/**
**===========================================================================
**
**  In this project, you can try some programming yourself.
**  You can use the 16 LEDs and the Sensor for anything you would like to do
**
**===========================================================================
*/


#include "main.h"
#include "stm32f0xx_rcc.h"
#include "drvApa102.h"
#include "drvMMA8653.h"
#include "drvPower.h"


//this sets the period (time between two runs) of the application loop in milli-seconds
#define LOOP_TIMEBASE	100


uint32_t timer=0;
uint8_t  timerFlag=0;
volatile uint32_t delayTimer;

void Warten(uint32_t ticks);

// turns on the LED with the given number
void LedEin(uint8_t ledNummer);

// turns on all LEDs where a "1" is set
void LedMusterEin(uint16_t muster);

// change the LED color using RGB values
void RGBFarbeAendern(uint8_t rot, uint8_t gruen, uint8_t blau);

// return the current value from the accelerometer
acc8_t AktuelleBeschleunigung();

// demo: a red light flowing from left to right and back again
void KnightRider(void);

// demo: turns on and off one LED after the other in different colors
void FarbenSpiel(void);

/**
**===========================================================================
**
**  setup: 	You have to add your application's setup code here.
**  		This method is called only once at the very beginning
**
**===========================================================================
*/
void setup(void)
{
	//init the drivers
	power_init();
	apa102_init();
	//LED-Test
	for(uint8_t i = 0; i<16; i++)
	{
		apa102_setSingle(i,5);
		delay(20);
	}
	mma8653_init();
	mma8653_setDataWidth(MMA8653_DATAWIDTH_8);
	mma8653_setDataRate(RATE_400Hz);
	globalColor.red=0x00;
	globalColor.green=0xFF;
	globalColor.blue=0x00;

	apa102_allOff();
}
/**
**===========================================================================
**
**  loop: 	You have to add your application's code here.
**  		This method is called over and over again, until the lightShaker is switched off.
**  		The macro "LOOP_TIMEBASE" defines how often loop is called every second.
**
**===========================================================================
*/

/** The following helper functions are available to control the LEDs and write own programs
** Warten(uint32_t ticks) warte die angegeben Zeit bis zum ausf체hren des n채chsten Kommandos
**
** LedEin(uint8_t ledNummer); schalte die LED mit der angegebenen Nummer ein
**
** LedMusterEin(uint16_t muster); schalte alle LEDs ein, bei denen eine "1" steht. Beispiel: LedMusterEin(0101010101010101) schaltet jede zweite LED ein.
**
** RGBFarbeAendern(uint8_t rot, uint8_t gruen, uint8_t blau); 채ndere die Farbe f체r alle LEDs. Beispiel: RGBFarbeAendern(255,0,0) macht alle LEDs rot.
**
** AktuelleBeschleunigung(); Gibt den aktuellen Wert des Beschleunigungssensor aus
**
** KnightRider(void); demo: Das rote Leuchtband von KIT aus Knight Rider 
**
** FarbenSpiel(void); demo: Schaltet LEDs in verschiedenen Farben ein
*/

void loop(void)
{
	KnightRider()();
}
/**
**===========================================================================
**
**  don't change the rest of this File!!
**
**===========================================================================
*/
void SysTick_Handler(void)
{
	if(delayTimer)
	{
		delayTimer--;
	}

	timer++;
	if  (timer>=LOOP_TIMEBASE)
	{
		timerFlag = 1;
		timer = 0;
		power_exec();
	}
}

void delay(uint32_t ticks)
{
	delayTimer = ticks;
	while(delayTimer > 0);
}


int main(void)
{
	SystemInit();
	SystemCoreClockUpdate();
	//the systick timer runs with 6MHz
	//config the timer for 1ms interval
	SysTick_Config(SystemCoreClock / 8 / 1000);
	setup();

	while(1)
	{
		if(timerFlag)
		{
			timerFlag = 0;
			loop();
		}
	}
  return 0;
}

/**
**===========================================================================
**
**  Helper classes for easy access to LED control
**
**===========================================================================
*/

// waits for the given time of ticks
void Warten(uint32_t ticks)
{
	delay(ticks);
}

// turns on the LED with the given number
void LedEin(uint8_t ledNummer)
{
	apa102_setSingle(ledNummer, 5);
}

// turns on all LEDs where a "1" is set
void LedMusterEin(uint16_t muster)
{
	apa102_setPattern(muster, 5);
}

// change the LED color using RGB values
void FarbeAendern(colorVrgb farbe)
{
	globalColor = farbe;
}

void RGBFarbeAendern(uint8_t rot, uint8_t gruen, uint8_t blau)
{
	globalColor.red = rot;
	globalColor.green = gruen;
	globalColor.blue = blau;
}

// return the current value from the accelerometer
acc8_t AktuelleBeschleunigung(){
	return mma8653_read8();
}

void FarbeNachNummerAendern(uint8_t LedPosition)
{
	colorVrgb neueFarbe;
	neueFarbe.red = 0;
	neueFarbe.green = 0;
	neueFarbe.blue = 0;

	switch (LedPosition) {
		case 0:
			neueFarbe.red = 0x77;
			break;
		case 1:
			neueFarbe.red = 0xff;
			break;
		case 2:
			neueFarbe.green = 0x77;
			break;
		case 3:
			neueFarbe.green = 0xff;
			break;
		case 4:
			neueFarbe.blue = 0x77;
			break;
		case 5:
			neueFarbe.blue = 0xff;
			break;
		case 6:
			neueFarbe.red = 0x77;
			neueFarbe.green = 0x77;
			break;
		case 7:
			neueFarbe.red = 0x77;
			neueFarbe.blue = 0x77;
			break;
		case 8:
			neueFarbe.green = 0x77;
			neueFarbe.blue = 0x77;
			break;
		case 9:
			neueFarbe.red = 0x77;
			neueFarbe.green = 0x77;
			neueFarbe.blue = 0x77;
			break;
		case 10:
			neueFarbe.red = 0xff;
			neueFarbe.green = 0xff;
			neueFarbe.blue = 0xff;
			break;
		case 11:
			neueFarbe.red = 0x44;
			neueFarbe.green = 0x88;
			neueFarbe.blue = 0xff;
			break;
		case 12:
			neueFarbe.red = 0xff;
			neueFarbe.green = 0x88;
			neueFarbe.blue = 0x44;
			break;
		case 13:
			neueFarbe.red = 0x88;
			neueFarbe.green = 0xff;
			neueFarbe.blue = 0x44;
			break;
		case 14:
			neueFarbe.red = 0x12;
			neueFarbe.green = 0x34;
			neueFarbe.blue = 0x56;
			break;
		case 15:
			neueFarbe.red = 0xff;
			neueFarbe.green = 0xff;
			neueFarbe.blue = 0xff;
			break;
		default:
			break;
	}

	FarbeAendern(neueFarbe);
}

uint8_t pos = 0;
int8_t step = 1;
// demo: a red light flowing from left to right and back again
void KnightRider(void){

	LedEin(pos);
	pos += step;
	if(pos >= 15)
	{
		step = -1;
	}
	if(pos == 0)
	{
		step = 1;
	}
	Warten(50);
}

uint8_t count = 0;
// demo: turns on and off one LED after the other in different colors
void FarbenSpiel(void)
{
	uint8_t ledPosition = count % 16;

	FarbeNachNummerAendern(ledPosition);
	LedEin(ledPosition);

	Warten(200);
	count++;
}
