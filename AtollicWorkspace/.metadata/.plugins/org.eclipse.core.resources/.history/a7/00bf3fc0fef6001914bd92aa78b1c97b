/**
**===========================================================================
**
**  Helper classes for easy access to LED control
**
**===========================================================================
*/

#include "helper.h"

void Warten(uint32_t ticks)
{
	delay(ticks);
}

void LedEin(uint8_t ledNummer)
{
	apa102_setSingle(ledNummer, 2);
}

void LedMusterEin(uint16_t muster)
{
	apa102_setPattern(muster, 2);
}

void FarbeAendern(colorVrgb farbe)
{
	globalColor = farbe;
}

void RGBFarbeAendern(uint8_t rot, uint8_t gruen, uint8_t blau)
{
	globalColor.red = rot;
	globalColor.green = gruen;
	globalColor.blue = blau;
}

acc8_t AktuelleBeschleunigung(){
	return mma8653_read8();
}

void FarbeNachNummerAendern(uint8_t LedPosition)
{
	colorVrgb neueFarbe;
	neueFarbe.red = 0;
	neueFarbe.green = 0;
	neueFarbe.blue = 0;

	switch (LedPosition) {
		case 0:
			neueFarbe.red = 0x77;
			break;
		case 1:
			neueFarbe.red = 0xff;
			break;
		case 2:
			neueFarbe.green = 0x77;
			break;
		case 3:
			neueFarbe.green = 0xff;
			break;
		case 4:
			neueFarbe.blue = 0x77;
			break;
		case 5:
			neueFarbe.blue = 0xff;
			break;
		case 6:
			neueFarbe.red = 0x77;
			neueFarbe.green = 0x77;
			break;
		case 7:
			neueFarbe.red = 0x77;
			neueFarbe.blue = 0x77;
			break;
		case 8:
			neueFarbe.green = 0x77;
			neueFarbe.blue = 0x77;
			break;
		case 9:
			neueFarbe.red = 0x77;
			neueFarbe.green = 0x77;
			neueFarbe.blue = 0x77;
			break;
		case 10:
			neueFarbe.red = 0xff;
			neueFarbe.green = 0xff;
			neueFarbe.blue = 0xff;
			break;
		case 11:
			neueFarbe.red = 0x44;
			neueFarbe.green = 0x88;
			neueFarbe.blue = 0xff;
			break;
		case 12:
			neueFarbe.red = 0xff;
			neueFarbe.green = 0x88;
			neueFarbe.blue = 0x44;
			break;
		case 13:
			neueFarbe.red = 0x88;
			neueFarbe.green = 0xff;
			neueFarbe.blue = 0x44;
			break;
		case 14:
			neueFarbe.red = 0x12;
			neueFarbe.green = 0x34;
			neueFarbe.blue = 0x56;
			break;
		case 15:
			neueFarbe.red = 0xff;
			neueFarbe.green = 0xff;
			neueFarbe.blue = 0xff;
			break;
		default:
			break;
	}

	FarbeAendern(neueFarbe);
}

uint64_t count = 0;

uint8_t knightRiderLedPosition[32] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0};

void KnightRider(void){
	uint8_t ledPosition = count % 32;

	RGBFarbeAendern(0xff, 0, 0);

	LedEin(knightRiderLedPosition[ledPosition]);
	Warten(50);

	count++;
}

void FarbenSpiel(void)
{
	uint8_t ledPosition = count % 16;

	FarbeNachNummerAendern(ledPosition);
	LedEin(ledPosition);

	Warten(200);
	count++;
}
