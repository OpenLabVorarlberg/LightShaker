/*
 * drvNvMemory.c
 *
 *  Created on: 15.10.2019
 *      Author: ChrLin00
 *
 *      alternative to the crap eeprom emulator from st
 *      Writing to flash is not protected! (if Power is removed during write, the user data in flash is corruted!)
 *      When supporting a multicolor display, we need up to 3kB of Flash to save the Picture-Data -> this needs to support more than 1 Page!
 *      Only 16-bit read/write and addressing
 */
#include "drvNvMemory.h"
#include "stm32f0xx.h"


#define NVMEM_PAGE_COUNT		2	//if you change that, don't forget to change the length of the flash-section in the linker-script!
#define NVMEM_FLASH_PAGESIZE	1024
#define NVMEM_FLASH_BASE		(0x08008000 - NVMEM_PAGE_COUNT*NVMEM_FLASH_PAGESIZE)
#define NVMEM_AD_TOP			(NVMEM_FLASH_PAGESIZE*NVMEM_PAGE_COUNT/2)-1

#define READ16(address) ((uint16_t)(*(uint16_t*)(address)))

uint16_t NvMem_RamBuffer[NVMEM_PAGE_COUNT*512];

#define NVMEM_ERR_OUTOFRANGE	0x01


/**
 * loads user data from flash into memory for easy access and change in the application
 */
void NvMem_init()
{
	for(uint16_t ad = 0; ad<=NVMEM_AD_TOP)
}

/**
 * Reads 16 bit form the user space in flash
 * address: 16-bit address (512 addresses per used flash page)
 */
uint16_t NvMem_read(uint16_t address)
{
	if(address > NVMEM_AD_TOP)
	{
		return NVMEM_ERR_OUTOFRANGE;
	}
	return
}


/**
 * Writes 16 bit to the user space in flash
 * address: 16-bit address (512 addresses per used flash page)
 * data: data to write
 * returns: errorcode
 */
uint8_t NvMem_write(uint16_t address, uint16_t data)
{

}


uint8_t NvMem_SaveToFlash()
{
	//enable flash-if clock
	RCC->AHBENR |= RCC_AHBENR_FLITFEN;
}


