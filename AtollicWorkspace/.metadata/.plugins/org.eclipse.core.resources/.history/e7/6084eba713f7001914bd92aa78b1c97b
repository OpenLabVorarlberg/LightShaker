/**
**===========================================================================
**
**  In this project, you can try some programming yourself.
**  You can use the 16 LEDs and the Sensor for anything you would like to do
**
**===========================================================================
*/


#include "main.h"
#include "stm32f0xx_rcc.h"
#include "drvApa102.h"
#include "drvMMA8653.h"
#include "drvPower.h"



#define SYS_TIMEBASE	100
//this sets the period (time between two runs) of the application loop in milli-seconds
#define LOOP_TIMEBASE	200

uint16_t loop_timebase=LOOP_TIMEBASE;
volatile uint8_t sys_timer=SYS_TIMEBASE;
volatile uint16_t loop_timer=LOOP_TIMEBASE;
volatile uint8_t  timerFlag=0;
volatile uint32_t delayTimer;

// setzt die Zeit vor dem nächsten Durchlauf der loop in millisekunden
void LoopZeitbasis(uint16_t ticks);

uint8_t Zufall(uint8_t bereich);

// turns on the LED with the given number
void LedEin(uint8_t ledNummer);

// turns on all LEDs where a "1" is set
void LedMusterEin(uint16_t muster);

// change the LED color using RGB values
void RGBFarbeAendern(uint8_t rot, uint8_t gruen, uint8_t blau);

// return the current value from the accelerometer
acc8_t AktuelleBeschleunigung();

// demo: a red light flowing from left to right and back again
void KnightRider(void);

// demo: turns on and off one LED after the other in different colors
void FarbenSpiel(void);

/**
**===========================================================================
**
**  setup: 	You have to add your application's setup code here.
**  		This method is called only once at the very beginning
**
**===========================================================================
*/
void setup(void)
{
	//init the drivers
	power_init();
	apa102_init();
	//LED-Test
	for(uint8_t i = 0; i<16; i++)
	{
		apa102_setSingle(i,5);
		delay(20);
	}
	mma8653_init();
	mma8653_setDataWidth(MMA8653_DATAWIDTH_8);
	mma8653_setDataRate(RATE_400Hz);
	globalColor.red=0x00;
	globalColor.green=0xFF;
	globalColor.blue=0x00;

	apa102_allOff();
}
/**
**===========================================================================
**
**  loop: 	You have to add your application's code here.
**  		This method is called over and over again, until the lightShaker is switched off.
**  		The macro "LOOP_TIMEBASE" defines how often loop is called every second.
**
**===========================================================================
*/

/** The following helper functions are available to control the LEDs and write own programs
** Warten(uint32_t ticks) warte die angegeben Zeit bis zum ausfÃ¼hren des nÃ¤chsten Kommandos
**
** LedEin(uint8_t ledNummer); schalte die LED mit der angegebenen Nummer ein
**
** LedMusterEin(uint16_t muster); schalte alle LEDs ein, bei denen eine "1" steht. Beispiel: LedMusterEin(0101010101010101) schaltet jede zweite LED ein.
**
** RGBFarbeAendern(uint8_t rot, uint8_t gruen, uint8_t blau); Ã¤ndere die Farbe fÃ¼r alle LEDs. Beispiel: RGBFarbeAendern(255,0,0) macht alle LEDs rot.
**
** AktuelleBeschleunigung(); Gibt den aktuellen Wert des Beschleunigungssensor aus
**
** KnightRider(void); demo: Das rote Leuchtband von KIT aus Knight Rider 
**
** FarbenSpiel(void); demo: Schaltet LEDs in verschiedenen Farben ein
*/

void loop(void)
{
	//KnightRider();
	FarbenSpiel();
}
/**
**===========================================================================
**
**  don't change the rest of this File!!
**
**===========================================================================
*/
void SysTick_Handler(void)
{
	if(delayTimer)
	{
		delayTimer--;
	}

	if(sys_timer)
	{
		sys_timer--;
	}
	else
	{
		power_exec();
		sys_timer = SYS_TIMEBASE;
	}
	if(loop_timer)
	{
		loop_timer--;
	}
	else
	{
		timerFlag = 1;
		loop_timer = loop_timebase;
	}
}

void delay(uint32_t ticks)
{
	delayTimer = ticks;
	while(delayTimer > 0);
}


int main(void)
{
	SystemInit();
	SystemCoreClockUpdate();
	//the systick timer runs with 6MHz
	//config the timer for 1ms interval
	SysTick_Config(SystemCoreClock / 8 / 1000);
	setup();

	while(1)
	{
		if(timerFlag)
		{
			timerFlag = 0;
			loop();
		}
	}
  return 0;
}

/**
**===========================================================================
**
**  Helper classes for easy access to LED control
**
**===========================================================================
*/

// setzt die Zeit vor dem nächsten Durchlauf der loop in millisekunden
void LoopZeitbasis(uint16_t ticks)
{
	loop_timebase = ticks;
}

// liefert eine zufällige zahl im Bereich von 0 bis bereich
uint8_t Zufall(uint8_t bereich)
{
	return rand() % (uint16_t)(bereich+1);
}

// turns on the LED with the given number
void LedEin(uint8_t ledNummer)
{
	apa102_setSingle(ledNummer, 20);
}

// turns on all LEDs where a "1" is set
void LedMusterEin(uint16_t muster)
{
	apa102_setPattern(muster, 5);
}

// change the LED color using RGB values
/*
 * farben:
 * 0 	aus		(0,0,0)
 * 1	Blau 	(0,0,1)
 * 2	Grün	(0,1,0)
 * 3	Zyan	(0,1,1)
 * 4	Rot		(1,0,0)
 * 5	Magenta	(1,0,1)
 * 6	Gelb	(1,1,0)
 * 7	Weiss	(1,1,1)
 */
void FarbeAendern(uint8_t farbe_palette)
{
	globalColor.blue = (farbe_palette&1)<<7;
	globalColor.green = (farbe_palette&2)<<6;
	globalColor.red = (farbe_palette&4)<<5;
}

void RGBFarbeAendern(uint8_t rot, uint8_t gruen, uint8_t blau)
{
	globalColor.red = rot;
	globalColor.green = gruen;
	globalColor.blue = blau;
}

// return the current value from the accelerometer
acc8_t AktuelleBeschleunigung(){
	return mma8653_read8();
}

uint8_t pos = 0;
int8_t step = 1;
// demo: a red light flowing from left to right and back again
void KnightRider(void)
{
	RGBFarbeAendern(255,0,0);
	LedEin(pos);
	pos += step;
	if(pos >= 15)
	{
		step = -1;
	}
	if(pos == 0)
	{
		step = 1;
	}
}

// demo: turns on and off one LED after the other in random colors
void FarbenSpiel(void)
{
	LoopZeitbasis(1);
	for(uint8_t i = 0; i<16;i++)
	{
		FarbeAendern(i%8);
		LedEin(i);
	}
}
