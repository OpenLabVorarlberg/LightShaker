
POV_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007294  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  08007354  08007354  00017354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800773c  0800773c  0001773c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007740  08007740  00017740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000120  20000000  08007744  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000dc4  20000120  08007864  00020120  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  20000ee4  08007864  00020ee4  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c0ba  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002e29  00000000  00000000  0002c202  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000fd0  00000000  00000000  0002f030  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ec8  00000000  00000000  00030000  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005ef7  00000000  00000000  00030ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003d94  00000000  00000000  00036dbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  0003ab53  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00003774  00000000  00000000  0003abd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000120 	.word	0x20000120
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800733c 	.word	0x0800733c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000124 	.word	0x20000124
 8000104:	0800733c 	.word	0x0800733c

08000108 <__aeabi_uidiv>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__aeabi_uidiv+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__aeabi_uidiv+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__aeabi_uidiv+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__aeabi_uidiv+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__aeabi_uidiv+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__aeabi_uidiv+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__aeabi_uidiv+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__aeabi_uidiv+0x6c>
 8000140:	e000      	b.n	8000144 <__aeabi_uidiv+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__aeabi_uidiv+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__aeabi_uidiv+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__aeabi_uidiv+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__aeabi_uidiv+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__aeabi_uidiv+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__aeabi_uidiv+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__aeabi_uidiv+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__aeabi_uidiv+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__aeabi_uidiv+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__aeabi_uidiv+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__aeabi_uidiv+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__aeabi_uidiv+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__aeabi_uidiv+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__aeabi_uidiv+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__aeabi_uidiv+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__aeabi_uidiv+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__aeabi_uidiv+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__aeabi_uidiv+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__aeabi_uidiv+0x100>
 8000218:	e776      	b.n	8000108 <__aeabi_uidiv>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <FifoIn>:
// Returns:
//     FIFO_FAIL       der Ringbuffer ist voll. Es kann kein weiteres Byte gespeichert werden
//     FIFO_SUCCESS    das Byte wurde gespeichert
//
uint8_t FifoIn(FifoBuffer *buf, uint8_t byte)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	000a      	movs	r2, r1
 800022a:	1cfb      	adds	r3, r7, #3
 800022c:	701a      	strb	r2, [r3, #0]
  uint32_t next = ((buf->write + 1) & FIFO_MASK);
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	2284      	movs	r2, #132	; 0x84
 8000232:	589b      	ldr	r3, [r3, r2]
 8000234:	3301      	adds	r3, #1
 8000236:	227f      	movs	r2, #127	; 0x7f
 8000238:	4013      	ands	r3, r2
 800023a:	60fb      	str	r3, [r7, #12]

  if (buf->read == next)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	2280      	movs	r2, #128	; 0x80
 8000240:	589a      	ldr	r2, [r3, r2]
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d101      	bne.n	800024c <FifoIn+0x2c>
    return FIFO_FAIL; // voll
 8000248:	2301      	movs	r3, #1
 800024a:	e00b      	b.n	8000264 <FifoIn+0x44>

  buf->data[buf->write] = byte;
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	2284      	movs	r2, #132	; 0x84
 8000250:	589b      	ldr	r3, [r3, r2]
 8000252:	687a      	ldr	r2, [r7, #4]
 8000254:	1cf9      	adds	r1, r7, #3
 8000256:	7809      	ldrb	r1, [r1, #0]
 8000258:	54d1      	strb	r1, [r2, r3]
  // buffer.data[buffer.write & BUFFER_MASK] = byte; // absolut Sicher
  buf->write = next;
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	2184      	movs	r1, #132	; 0x84
 800025e:	68fa      	ldr	r2, [r7, #12]
 8000260:	505a      	str	r2, [r3, r1]

  return FIFO_SUCCESS;
 8000262:	2300      	movs	r3, #0
}
 8000264:	0018      	movs	r0, r3
 8000266:	46bd      	mov	sp, r7
 8000268:	b004      	add	sp, #16
 800026a:	bd80      	pop	{r7, pc}

0800026c <FifoOut>:
// Returns:
//     FIFO_FAIL       der Ringbuffer ist leer. Es kann kein Byte geliefert werden.
//     FIFO_SUCCESS    1 Byte wurde geliefert
//
uint8_t FifoOut(FifoBuffer *buf, uint8_t *pByte)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	6039      	str	r1, [r7, #0]
  if (buf->read == buf->write)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	2280      	movs	r2, #128	; 0x80
 800027a:	589a      	ldr	r2, [r3, r2]
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2184      	movs	r1, #132	; 0x84
 8000280:	585b      	ldr	r3, [r3, r1]
 8000282:	429a      	cmp	r2, r3
 8000284:	d101      	bne.n	800028a <FifoOut+0x1e>
    return FIFO_FAIL;
 8000286:	2301      	movs	r3, #1
 8000288:	e010      	b.n	80002ac <FifoOut+0x40>

  *pByte = buf->data[buf->read];
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	2280      	movs	r2, #128	; 0x80
 800028e:	589b      	ldr	r3, [r3, r2]
 8000290:	687a      	ldr	r2, [r7, #4]
 8000292:	5cd2      	ldrb	r2, [r2, r3]
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	701a      	strb	r2, [r3, #0]

  buf->read = (buf->read+1) & FIFO_MASK;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2280      	movs	r2, #128	; 0x80
 800029c:	589b      	ldr	r3, [r3, r2]
 800029e:	3301      	adds	r3, #1
 80002a0:	227f      	movs	r2, #127	; 0x7f
 80002a2:	401a      	ands	r2, r3
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	2180      	movs	r1, #128	; 0x80
 80002a8:	505a      	str	r2, [r3, r1]

  return FIFO_SUCCESS;
 80002aa:	2300      	movs	r3, #0
}
 80002ac:	0018      	movs	r0, r3
 80002ae:	46bd      	mov	sp, r7
 80002b0:	b002      	add	sp, #8
 80002b2:	bd80      	pop	{r7, pc}

080002b4 <FifoCount>:

uint32_t FifoCount(FifoBuffer *buf)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
	if(buf->write >= buf->read)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2284      	movs	r2, #132	; 0x84
 80002c0:	589a      	ldr	r2, [r3, r2]
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	2180      	movs	r1, #128	; 0x80
 80002c6:	585b      	ldr	r3, [r3, r1]
 80002c8:	429a      	cmp	r2, r3
 80002ca:	d307      	bcc.n	80002dc <FifoCount+0x28>
	{
		return buf->write - buf->read;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	2284      	movs	r2, #132	; 0x84
 80002d0:	589a      	ldr	r2, [r3, r2]
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	2180      	movs	r1, #128	; 0x80
 80002d6:	585b      	ldr	r3, [r3, r1]
 80002d8:	1ad3      	subs	r3, r2, r3
 80002da:	e007      	b.n	80002ec <FifoCount+0x38>
	}
	else
	{
		return FIFO_SIZE - buf->read + buf->write;
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	2284      	movs	r2, #132	; 0x84
 80002e0:	589a      	ldr	r2, [r3, r2]
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	2180      	movs	r1, #128	; 0x80
 80002e6:	585b      	ldr	r3, [r3, r1]
 80002e8:	1ad3      	subs	r3, r2, r3
 80002ea:	3380      	adds	r3, #128	; 0x80
	}
}
 80002ec:	0018      	movs	r0, r3
 80002ee:	46bd      	mov	sp, r7
 80002f0:	b002      	add	sp, #8
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <USBD_USR_Init>:
  * @brief  Device lib initialization
  * @param  None
  * @retval None
  */
void USBD_USR_Init(void)
{   
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
}
 80002f8:	46c0      	nop			; (mov r8, r8)
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	46c0      	nop			; (mov r8, r8)

08000300 <USBD_USR_DeviceReset>:
  * @brief  Reset Event
  * @param  speed : device speed
  * @retval None
  */
void USBD_USR_DeviceReset(uint8_t speed )
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	0002      	movs	r2, r0
 8000308:	1dfb      	adds	r3, r7, #7
 800030a:	701a      	strb	r2, [r3, #0]

}
 800030c:	46c0      	nop			; (mov r8, r8)
 800030e:	46bd      	mov	sp, r7
 8000310:	b002      	add	sp, #8
 8000312:	bd80      	pop	{r7, pc}

08000314 <USBD_USR_DeviceConfigured>:
  * @brief  Configuration Event
  * @param  None
  * @retval Status
*/
void USBD_USR_DeviceConfigured (void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0

}
 8000318:	46c0      	nop			; (mov r8, r8)
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	46c0      	nop			; (mov r8, r8)

08000320 <USBD_USR_DeviceSuspended>:
  * @brief  Device suspend Event
  * @param  None
  * @retval None
  */
void USBD_USR_DeviceSuspended(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
}
 8000324:	46c0      	nop			; (mov r8, r8)
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	46c0      	nop			; (mov r8, r8)

0800032c <USBD_USR_DeviceResumed>:
  * @brief  Device resume Event
  * @param  None
  * @retval None
  */
void USBD_USR_DeviceResumed(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
}
 8000330:	46c0      	nop			; (mov r8, r8)
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	46c0      	nop			; (mov r8, r8)

08000338 <Suspend>:
  * @brief  Sets suspend mode operating conditions
  * @param  None
  * @retval USB_SUCCESS
  */
void Suspend(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
  uint16_t wCNTR;

  /*Store CNTR value */
  wCNTR = _GetCNTR();   
 800033e:	4b10      	ldr	r3, [pc, #64]	; (8000380 <Suspend+0x48>)
 8000340:	681a      	ldr	r2, [r3, #0]
 8000342:	1dbb      	adds	r3, r7, #6
 8000344:	801a      	strh	r2, [r3, #0]
  /* Set FSUSP bit in USB_CNTR register*/
  wCNTR |= CNTR_FSUSP;
 8000346:	1dbb      	adds	r3, r7, #6
 8000348:	1dba      	adds	r2, r7, #6
 800034a:	8812      	ldrh	r2, [r2, #0]
 800034c:	2108      	movs	r1, #8
 800034e:	430a      	orrs	r2, r1
 8000350:	801a      	strh	r2, [r3, #0]
  _SetCNTR(wCNTR);
 8000352:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <Suspend+0x48>)
 8000354:	1dba      	adds	r2, r7, #6
 8000356:	8812      	ldrh	r2, [r2, #0]
 8000358:	601a      	str	r2, [r3, #0]
  
  /* force low-power mode in the macrocell */
  wCNTR = _GetCNTR();
 800035a:	4b09      	ldr	r3, [pc, #36]	; (8000380 <Suspend+0x48>)
 800035c:	681a      	ldr	r2, [r3, #0]
 800035e:	1dbb      	adds	r3, r7, #6
 8000360:	801a      	strh	r2, [r3, #0]
  wCNTR |= CNTR_LPMODE;
 8000362:	1dbb      	adds	r3, r7, #6
 8000364:	1dba      	adds	r2, r7, #6
 8000366:	8812      	ldrh	r2, [r2, #0]
 8000368:	2104      	movs	r1, #4
 800036a:	430a      	orrs	r2, r1
 800036c:	801a      	strh	r2, [r3, #0]
  _SetCNTR(wCNTR);
 800036e:	4b04      	ldr	r3, [pc, #16]	; (8000380 <Suspend+0x48>)
 8000370:	1dba      	adds	r2, r7, #6
 8000372:	8812      	ldrh	r2, [r2, #0]
 8000374:	601a      	str	r2, [r3, #0]
    wCNTR = _GetCNTR();
    wCNTR&=~CNTR_FSUSP;
    _SetCNTR(wCNTR);
  }
#endif
}
 8000376:	46c0      	nop			; (mov r8, r8)
 8000378:	46bd      	mov	sp, r7
 800037a:	b002      	add	sp, #8
 800037c:	bd80      	pop	{r7, pc}
 800037e:	46c0      	nop			; (mov r8, r8)
 8000380:	40005c40 	.word	0x40005c40

08000384 <Resume_Init>:
  * @brief  Handles wake-up restoring normal operations
  * @param  None
  * @retval USB_SUCCESS
  */
void Resume_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
  /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
  /* restart the clocks */
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 800038a:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <Resume_Init+0x34>)
 800038c:	681a      	ldr	r2, [r3, #0]
 800038e:	1dbb      	adds	r3, r7, #6
 8000390:	801a      	strh	r2, [r3, #0]
  wCNTR &= (~CNTR_LPMODE);
 8000392:	1dbb      	adds	r3, r7, #6
 8000394:	1dba      	adds	r2, r7, #6
 8000396:	8812      	ldrh	r2, [r2, #0]
 8000398:	2104      	movs	r1, #4
 800039a:	438a      	bics	r2, r1
 800039c:	801a      	strh	r2, [r3, #0]
  _SetCNTR(wCNTR);    
 800039e:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <Resume_Init+0x34>)
 80003a0:	1dba      	adds	r2, r7, #6
 80003a2:	8812      	ldrh	r2, [r2, #0]
 80003a4:	601a      	str	r2, [r3, #0]
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
#endif
  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 80003a6:	4b04      	ldr	r3, [pc, #16]	; (80003b8 <Resume_Init+0x34>)
 80003a8:	22bf      	movs	r2, #191	; 0xbf
 80003aa:	0212      	lsls	r2, r2, #8
 80003ac:	601a      	str	r2, [r3, #0]

}
 80003ae:	46c0      	nop			; (mov r8, r8)
 80003b0:	46bd      	mov	sp, r7
 80003b2:	b002      	add	sp, #8
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	46c0      	nop			; (mov r8, r8)
 80003b8:	40005c40 	.word	0x40005c40

080003bc <Resume>:
  *         RESUME_ESOF doesn't change ResumeS.eState allowing
  *         decrementing of the ESOF counter in different states.
  * @retval Status
  */
void Resume(RESUME_STATE eResumeSetVal)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b084      	sub	sp, #16
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	0002      	movs	r2, r0
 80003c4:	1dfb      	adds	r3, r7, #7
 80003c6:	701a      	strb	r2, [r3, #0]
 uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
 80003c8:	1dfb      	adds	r3, r7, #7
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	2b07      	cmp	r3, #7
 80003ce:	d003      	beq.n	80003d8 <Resume+0x1c>
    ResumeS.eState = eResumeSetVal;
 80003d0:	4b42      	ldr	r3, [pc, #264]	; (80004dc <Resume+0x120>)
 80003d2:	1dfa      	adds	r2, r7, #7
 80003d4:	7812      	ldrb	r2, [r2, #0]
 80003d6:	701a      	strb	r2, [r3, #0]
  switch (ResumeS.eState)
 80003d8:	4b40      	ldr	r3, [pc, #256]	; (80004dc <Resume+0x120>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	b2db      	uxtb	r3, r3
 80003de:	2b05      	cmp	r3, #5
 80003e0:	d900      	bls.n	80003e4 <Resume+0x28>
 80003e2:	e070      	b.n	80004c6 <Resume+0x10a>
 80003e4:	009a      	lsls	r2, r3, #2
 80003e6:	4b3e      	ldr	r3, [pc, #248]	; (80004e0 <Resume+0x124>)
 80003e8:	18d3      	adds	r3, r2, r3
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	469f      	mov	pc, r3
  {
    case RESUME_EXTERNAL:
      
if (remotewakeupon ==0)
 80003ee:	4b3d      	ldr	r3, [pc, #244]	; (80004e4 <Resume+0x128>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d105      	bne.n	8000402 <Resume+0x46>
      {
        Resume_Init();
 80003f6:	f7ff ffc5 	bl	8000384 <Resume_Init>
        ResumeS.eState = RESUME_OFF;
 80003fa:	4b38      	ldr	r3, [pc, #224]	; (80004dc <Resume+0x120>)
 80003fc:	2206      	movs	r2, #6
 80003fe:	701a      	strb	r2, [r3, #0]
      }
      else /* RESUME detected during the RemoteWAkeup signalling => keep RemoteWakeup handling*/
      {
        ResumeS.eState = RESUME_ON;
      }
      break;
 8000400:	e068      	b.n	80004d4 <Resume+0x118>
        Resume_Init();
        ResumeS.eState = RESUME_OFF;
      }
      else /* RESUME detected during the RemoteWAkeup signalling => keep RemoteWakeup handling*/
      {
        ResumeS.eState = RESUME_ON;
 8000402:	4b36      	ldr	r3, [pc, #216]	; (80004dc <Resume+0x120>)
 8000404:	2205      	movs	r2, #5
 8000406:	701a      	strb	r2, [r3, #0]
      }
      break;
 8000408:	e064      	b.n	80004d4 <Resume+0x118>
    case RESUME_INTERNAL:
      Resume_Init();
 800040a:	f7ff ffbb 	bl	8000384 <Resume_Init>
      ResumeS.eState = RESUME_START;
 800040e:	4b33      	ldr	r3, [pc, #204]	; (80004dc <Resume+0x120>)
 8000410:	2204      	movs	r2, #4
 8000412:	701a      	strb	r2, [r3, #0]
      remotewakeupon = 1;
 8000414:	4b33      	ldr	r3, [pc, #204]	; (80004e4 <Resume+0x128>)
 8000416:	2201      	movs	r2, #1
 8000418:	601a      	str	r2, [r3, #0]
      break;
 800041a:	e05b      	b.n	80004d4 <Resume+0x118>
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 800041c:	4b2f      	ldr	r3, [pc, #188]	; (80004dc <Resume+0x120>)
 800041e:	2202      	movs	r2, #2
 8000420:	705a      	strb	r2, [r3, #1]
      ResumeS.eState = RESUME_WAIT;
 8000422:	4b2e      	ldr	r3, [pc, #184]	; (80004dc <Resume+0x120>)
 8000424:	2203      	movs	r2, #3
 8000426:	701a      	strb	r2, [r3, #0]
      break;
 8000428:	e054      	b.n	80004d4 <Resume+0x118>
    case RESUME_WAIT:
      ResumeS.bESOFcnt--;
 800042a:	4b2c      	ldr	r3, [pc, #176]	; (80004dc <Resume+0x120>)
 800042c:	785b      	ldrb	r3, [r3, #1]
 800042e:	b2db      	uxtb	r3, r3
 8000430:	3b01      	subs	r3, #1
 8000432:	b2da      	uxtb	r2, r3
 8000434:	4b29      	ldr	r3, [pc, #164]	; (80004dc <Resume+0x120>)
 8000436:	705a      	strb	r2, [r3, #1]
      if (ResumeS.bESOFcnt == 0)
 8000438:	4b28      	ldr	r3, [pc, #160]	; (80004dc <Resume+0x120>)
 800043a:	785b      	ldrb	r3, [r3, #1]
 800043c:	b2db      	uxtb	r3, r3
 800043e:	2b00      	cmp	r3, #0
 8000440:	d145      	bne.n	80004ce <Resume+0x112>
        ResumeS.eState = RESUME_START;
 8000442:	4b26      	ldr	r3, [pc, #152]	; (80004dc <Resume+0x120>)
 8000444:	2204      	movs	r2, #4
 8000446:	701a      	strb	r2, [r3, #0]
      break;
 8000448:	e041      	b.n	80004ce <Resume+0x112>
    case RESUME_START:
      wCNTR = _GetCNTR();
 800044a:	4b27      	ldr	r3, [pc, #156]	; (80004e8 <Resume+0x12c>)
 800044c:	681a      	ldr	r2, [r3, #0]
 800044e:	230e      	movs	r3, #14
 8000450:	18fb      	adds	r3, r7, r3
 8000452:	801a      	strh	r2, [r3, #0]
      wCNTR |= CNTR_RESUME;
 8000454:	230e      	movs	r3, #14
 8000456:	18fb      	adds	r3, r7, r3
 8000458:	220e      	movs	r2, #14
 800045a:	18ba      	adds	r2, r7, r2
 800045c:	8812      	ldrh	r2, [r2, #0]
 800045e:	2110      	movs	r1, #16
 8000460:	430a      	orrs	r2, r1
 8000462:	801a      	strh	r2, [r3, #0]
      _SetCNTR(wCNTR);
 8000464:	4b20      	ldr	r3, [pc, #128]	; (80004e8 <Resume+0x12c>)
 8000466:	220e      	movs	r2, #14
 8000468:	18ba      	adds	r2, r7, r2
 800046a:	8812      	ldrh	r2, [r2, #0]
 800046c:	601a      	str	r2, [r3, #0]
      ResumeS.eState = RESUME_ON;
 800046e:	4b1b      	ldr	r3, [pc, #108]	; (80004dc <Resume+0x120>)
 8000470:	2205      	movs	r2, #5
 8000472:	701a      	strb	r2, [r3, #0]
      ResumeS.bESOFcnt = 10;
 8000474:	4b19      	ldr	r3, [pc, #100]	; (80004dc <Resume+0x120>)
 8000476:	220a      	movs	r2, #10
 8000478:	705a      	strb	r2, [r3, #1]
      break;
 800047a:	e02b      	b.n	80004d4 <Resume+0x118>
    case RESUME_ON:    
      ResumeS.bESOFcnt--;
 800047c:	4b17      	ldr	r3, [pc, #92]	; (80004dc <Resume+0x120>)
 800047e:	785b      	ldrb	r3, [r3, #1]
 8000480:	b2db      	uxtb	r3, r3
 8000482:	3b01      	subs	r3, #1
 8000484:	b2da      	uxtb	r2, r3
 8000486:	4b15      	ldr	r3, [pc, #84]	; (80004dc <Resume+0x120>)
 8000488:	705a      	strb	r2, [r3, #1]
      if (ResumeS.bESOFcnt == 0)
 800048a:	4b14      	ldr	r3, [pc, #80]	; (80004dc <Resume+0x120>)
 800048c:	785b      	ldrb	r3, [r3, #1]
 800048e:	b2db      	uxtb	r3, r3
 8000490:	2b00      	cmp	r3, #0
 8000492:	d11e      	bne.n	80004d2 <Resume+0x116>
      {
        wCNTR = _GetCNTR();
 8000494:	4b14      	ldr	r3, [pc, #80]	; (80004e8 <Resume+0x12c>)
 8000496:	681a      	ldr	r2, [r3, #0]
 8000498:	230e      	movs	r3, #14
 800049a:	18fb      	adds	r3, r7, r3
 800049c:	801a      	strh	r2, [r3, #0]
        wCNTR &= (~CNTR_RESUME);
 800049e:	230e      	movs	r3, #14
 80004a0:	18fb      	adds	r3, r7, r3
 80004a2:	220e      	movs	r2, #14
 80004a4:	18ba      	adds	r2, r7, r2
 80004a6:	8812      	ldrh	r2, [r2, #0]
 80004a8:	2110      	movs	r1, #16
 80004aa:	438a      	bics	r2, r1
 80004ac:	801a      	strh	r2, [r3, #0]
        _SetCNTR(wCNTR);
 80004ae:	4b0e      	ldr	r3, [pc, #56]	; (80004e8 <Resume+0x12c>)
 80004b0:	220e      	movs	r2, #14
 80004b2:	18ba      	adds	r2, r7, r2
 80004b4:	8812      	ldrh	r2, [r2, #0]
 80004b6:	601a      	str	r2, [r3, #0]
        ResumeS.eState = RESUME_OFF;
 80004b8:	4b08      	ldr	r3, [pc, #32]	; (80004dc <Resume+0x120>)
 80004ba:	2206      	movs	r2, #6
 80004bc:	701a      	strb	r2, [r3, #0]
        remotewakeupon = 0;
 80004be:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <Resume+0x128>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
      }
      break;
 80004c4:	e005      	b.n	80004d2 <Resume+0x116>
    case RESUME_OFF:
    case RESUME_ESOF:
    default:
      ResumeS.eState = RESUME_OFF;
 80004c6:	4b05      	ldr	r3, [pc, #20]	; (80004dc <Resume+0x120>)
 80004c8:	2206      	movs	r2, #6
 80004ca:	701a      	strb	r2, [r3, #0]
      break;
 80004cc:	e002      	b.n	80004d4 <Resume+0x118>
      break;
    case RESUME_WAIT:
      ResumeS.bESOFcnt--;
      if (ResumeS.bESOFcnt == 0)
        ResumeS.eState = RESUME_START;
      break;
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	e000      	b.n	80004d4 <Resume+0x118>
        wCNTR &= (~CNTR_RESUME);
        _SetCNTR(wCNTR);
        ResumeS.eState = RESUME_OFF;
        remotewakeupon = 0;
      }
      break;
 80004d2:	46c0      	nop			; (mov r8, r8)
    case RESUME_ESOF:
    default:
      ResumeS.eState = RESUME_OFF;
      break;
  }
}
 80004d4:	46c0      	nop			; (mov r8, r8)
 80004d6:	46bd      	mov	sp, r7
 80004d8:	b004      	add	sp, #16
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	20000184 	.word	0x20000184
 80004e0:	0800760c 	.word	0x0800760c
 80004e4:	2000013c 	.word	0x2000013c
 80004e8:	40005c40 	.word	0x40005c40

080004ec <USBD_USR_DeviceDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t *  USBD_USR_DeviceDescriptor( uint8_t speed , uint16_t *length)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	0002      	movs	r2, r0
 80004f4:	6039      	str	r1, [r7, #0]
 80004f6:	1dfb      	adds	r3, r7, #7
 80004f8:	701a      	strb	r2, [r3, #0]
  *length = sizeof(USBD_DeviceDesc);
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	2212      	movs	r2, #18
 80004fe:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_DeviceDesc;
 8000500:	4b02      	ldr	r3, [pc, #8]	; (800050c <USBD_USR_DeviceDescriptor+0x20>)
}
 8000502:	0018      	movs	r0, r3
 8000504:	46bd      	mov	sp, r7
 8000506:	b002      	add	sp, #8
 8000508:	bd80      	pop	{r7, pc}
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	08007624 	.word	0x08007624

08000510 <USBD_USR_LangIDStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t *  USBD_USR_LangIDStrDescriptor( uint8_t speed , uint16_t *length)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	0002      	movs	r2, r0
 8000518:	6039      	str	r1, [r7, #0]
 800051a:	1dfb      	adds	r3, r7, #7
 800051c:	701a      	strb	r2, [r3, #0]
  *length =  sizeof(USBD_LangIDDesc);  
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	2204      	movs	r2, #4
 8000522:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_LangIDDesc;
 8000524:	4b02      	ldr	r3, [pc, #8]	; (8000530 <USBD_USR_LangIDStrDescriptor+0x20>)
}
 8000526:	0018      	movs	r0, r3
 8000528:	46bd      	mov	sp, r7
 800052a:	b002      	add	sp, #8
 800052c:	bd80      	pop	{r7, pc}
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	08007638 	.word	0x08007638

08000534 <USBD_USR_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t *  USBD_USR_ProductStrDescriptor( uint8_t speed , uint16_t *length)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	0002      	movs	r2, r0
 800053c:	6039      	str	r1, [r7, #0]
 800053e:	1dfb      	adds	r3, r7, #7
 8000540:	701a      	strb	r2, [r3, #0]
  USBD_GetString ( (uint8_t*)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 8000542:	683a      	ldr	r2, [r7, #0]
 8000544:	4904      	ldr	r1, [pc, #16]	; (8000558 <USBD_USR_ProductStrDescriptor+0x24>)
 8000546:	4b05      	ldr	r3, [pc, #20]	; (800055c <USBD_USR_ProductStrDescriptor+0x28>)
 8000548:	0018      	movs	r0, r3
 800054a:	f003 faa1 	bl	8003a90 <USBD_GetString>
  return USBD_StrDesc;
 800054e:	4b02      	ldr	r3, [pc, #8]	; (8000558 <USBD_USR_ProductStrDescriptor+0x24>)
}
 8000550:	0018      	movs	r0, r3
 8000552:	46bd      	mov	sp, r7
 8000554:	b002      	add	sp, #8
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000554 	.word	0x20000554
 800055c:	08007354 	.word	0x08007354

08000560 <USBD_USR_ManufacturerStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t *  USBD_USR_ManufacturerStrDescriptor( uint8_t speed , uint16_t *length)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	0002      	movs	r2, r0
 8000568:	6039      	str	r1, [r7, #0]
 800056a:	1dfb      	adds	r3, r7, #7
 800056c:	701a      	strb	r2, [r3, #0]
  USBD_GetString ( (uint8_t*)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800056e:	683a      	ldr	r2, [r7, #0]
 8000570:	4904      	ldr	r1, [pc, #16]	; (8000584 <USBD_USR_ManufacturerStrDescriptor+0x24>)
 8000572:	4b05      	ldr	r3, [pc, #20]	; (8000588 <USBD_USR_ManufacturerStrDescriptor+0x28>)
 8000574:	0018      	movs	r0, r3
 8000576:	f003 fa8b 	bl	8003a90 <USBD_GetString>
  return USBD_StrDesc;
 800057a:	4b02      	ldr	r3, [pc, #8]	; (8000584 <USBD_USR_ManufacturerStrDescriptor+0x24>)
}
 800057c:	0018      	movs	r0, r3
 800057e:	46bd      	mov	sp, r7
 8000580:	b002      	add	sp, #8
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20000554 	.word	0x20000554
 8000588:	08007378 	.word	0x08007378

0800058c <USBD_USR_SerialStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t *  USBD_USR_SerialStrDescriptor( uint8_t speed , uint16_t *length)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	0002      	movs	r2, r0
 8000594:	6039      	str	r1, [r7, #0]
 8000596:	1dfb      	adds	r3, r7, #7
 8000598:	701a      	strb	r2, [r3, #0]
  *length = USB_SIZ_STRING_SERIAL; 
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	221a      	movs	r2, #26
 800059e:	801a      	strh	r2, [r3, #0]
  return USBD_StringSerial;
 80005a0:	4b02      	ldr	r3, [pc, #8]	; (80005ac <USBD_USR_SerialStrDescriptor+0x20>)
}
 80005a2:	0018      	movs	r0, r3
 80005a4:	46bd      	mov	sp, r7
 80005a6:	b002      	add	sp, #8
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	20000030 	.word	0x20000030

080005b0 <USBD_USR_ConfigStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t *  USBD_USR_ConfigStrDescriptor( uint8_t speed , uint16_t *length)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	0002      	movs	r2, r0
 80005b8:	6039      	str	r1, [r7, #0]
 80005ba:	1dfb      	adds	r3, r7, #7
 80005bc:	701a      	strb	r2, [r3, #0]
  USBD_GetString ( (uint8_t*)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 80005be:	683a      	ldr	r2, [r7, #0]
 80005c0:	4904      	ldr	r1, [pc, #16]	; (80005d4 <USBD_USR_ConfigStrDescriptor+0x24>)
 80005c2:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <USBD_USR_ConfigStrDescriptor+0x28>)
 80005c4:	0018      	movs	r0, r3
 80005c6:	f003 fa63 	bl	8003a90 <USBD_GetString>
  return USBD_StrDesc;  
 80005ca:	4b02      	ldr	r3, [pc, #8]	; (80005d4 <USBD_USR_ConfigStrDescriptor+0x24>)
}
 80005cc:	0018      	movs	r0, r3
 80005ce:	46bd      	mov	sp, r7
 80005d0:	b002      	add	sp, #8
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000554 	.word	0x20000554
 80005d8:	0800738c 	.word	0x0800738c

080005dc <USBD_USR_InterfaceStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t *  USBD_USR_InterfaceStrDescriptor( uint8_t speed , uint16_t *length)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	0002      	movs	r2, r0
 80005e4:	6039      	str	r1, [r7, #0]
 80005e6:	1dfb      	adds	r3, r7, #7
 80005e8:	701a      	strb	r2, [r3, #0]
  USBD_GetString ( (uint8_t*)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 80005ea:	683a      	ldr	r2, [r7, #0]
 80005ec:	4904      	ldr	r1, [pc, #16]	; (8000600 <USBD_USR_InterfaceStrDescriptor+0x24>)
 80005ee:	4b05      	ldr	r3, [pc, #20]	; (8000604 <USBD_USR_InterfaceStrDescriptor+0x28>)
 80005f0:	0018      	movs	r0, r3
 80005f2:	f003 fa4d 	bl	8003a90 <USBD_GetString>
  return USBD_StrDesc;  
 80005f6:	4b02      	ldr	r3, [pc, #8]	; (8000600 <USBD_USR_InterfaceStrDescriptor+0x24>)
}
 80005f8:	0018      	movs	r0, r3
 80005fa:	46bd      	mov	sp, r7
 80005fc:	b002      	add	sp, #8
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000554 	.word	0x20000554
 8000604:	08007398 	.word	0x08007398

08000608 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
void Get_SerialNum(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;
  
  Device_Serial0 = *(uint32_t*)Device1_Identifier;
 800060e:	4b10      	ldr	r3, [pc, #64]	; (8000650 <Get_SerialNum+0x48>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	60fb      	str	r3, [r7, #12]
  Device_Serial1 = *(uint32_t*)Device2_Identifier;
 8000614:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <Get_SerialNum+0x4c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	60bb      	str	r3, [r7, #8]
  Device_Serial2 = *(uint32_t*)Device3_Identifier;
 800061a:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <Get_SerialNum+0x50>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	607b      	str	r3, [r7, #4]
  
  Device_Serial0 += Device_Serial2;
 8000620:	68fa      	ldr	r2, [r7, #12]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	18d3      	adds	r3, r2, r3
 8000626:	60fb      	str	r3, [r7, #12]
  
  if (Device_Serial0 != 0)
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d00b      	beq.n	8000646 <Get_SerialNum+0x3e>
  {
    IntToUnicode (Device_Serial0, &USBD_StringSerial[2] ,8);
 800062e:	490b      	ldr	r1, [pc, #44]	; (800065c <Get_SerialNum+0x54>)
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	2208      	movs	r2, #8
 8000634:	0018      	movs	r0, r3
 8000636:	f000 f815 	bl	8000664 <IntToUnicode>
    IntToUnicode (Device_Serial1, &USBD_StringSerial[18] ,4);
 800063a:	4909      	ldr	r1, [pc, #36]	; (8000660 <Get_SerialNum+0x58>)
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	2204      	movs	r2, #4
 8000640:	0018      	movs	r0, r3
 8000642:	f000 f80f 	bl	8000664 <IntToUnicode>
  }
}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	46bd      	mov	sp, r7
 800064a:	b004      	add	sp, #16
 800064c:	bd80      	pop	{r7, pc}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	1ffff7ac 	.word	0x1ffff7ac
 8000654:	1ffff7b0 	.word	0x1ffff7b0
 8000658:	1ffff7b4 	.word	0x1ffff7b4
 800065c:	20000032 	.word	0x20000032
 8000660:	20000042 	.word	0x20000042

08000664 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	1dfb      	adds	r3, r7, #7
 8000670:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8000672:	2317      	movs	r3, #23
 8000674:	18fb      	adds	r3, r7, r3
 8000676:	2200      	movs	r2, #0
 8000678:	701a      	strb	r2, [r3, #0]
  
  for( idx = 0 ; idx < len ; idx ++)
 800067a:	2317      	movs	r3, #23
 800067c:	18fb      	adds	r3, r7, r3
 800067e:	2200      	movs	r2, #0
 8000680:	701a      	strb	r2, [r3, #0]
 8000682:	e031      	b.n	80006e8 <IntToUnicode+0x84>
  {
    if( ((value >> 28)) < 0xA )
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	0f1b      	lsrs	r3, r3, #28
 8000688:	2b09      	cmp	r3, #9
 800068a:	d80d      	bhi.n	80006a8 <IntToUnicode+0x44>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 800068c:	2317      	movs	r3, #23
 800068e:	18fb      	adds	r3, r7, r3
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	005b      	lsls	r3, r3, #1
 8000694:	001a      	movs	r2, r3
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	189b      	adds	r3, r3, r2
 800069a:	68fa      	ldr	r2, [r7, #12]
 800069c:	0f12      	lsrs	r2, r2, #28
 800069e:	b2d2      	uxtb	r2, r2
 80006a0:	3230      	adds	r2, #48	; 0x30
 80006a2:	b2d2      	uxtb	r2, r2
 80006a4:	701a      	strb	r2, [r3, #0]
 80006a6:	e00c      	b.n	80006c2 <IntToUnicode+0x5e>
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 80006a8:	2317      	movs	r3, #23
 80006aa:	18fb      	adds	r3, r7, r3
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	001a      	movs	r2, r3
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	189b      	adds	r3, r3, r2
 80006b6:	68fa      	ldr	r2, [r7, #12]
 80006b8:	0f12      	lsrs	r2, r2, #28
 80006ba:	b2d2      	uxtb	r2, r2
 80006bc:	3237      	adds	r2, #55	; 0x37
 80006be:	b2d2      	uxtb	r2, r2
 80006c0:	701a      	strb	r2, [r3, #0]
    }
    
    value = value << 4;
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	011b      	lsls	r3, r3, #4
 80006c6:	60fb      	str	r3, [r7, #12]
    
    pbuf[ 2* idx + 1] = 0;
 80006c8:	2317      	movs	r3, #23
 80006ca:	18fb      	adds	r3, r7, r3
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	3301      	adds	r3, #1
 80006d2:	68ba      	ldr	r2, [r7, #8]
 80006d4:	18d3      	adds	r3, r2, r3
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 80006da:	2317      	movs	r3, #23
 80006dc:	18fb      	adds	r3, r7, r3
 80006de:	781a      	ldrb	r2, [r3, #0]
 80006e0:	2317      	movs	r3, #23
 80006e2:	18fb      	adds	r3, r7, r3
 80006e4:	3201      	adds	r2, #1
 80006e6:	701a      	strb	r2, [r3, #0]
 80006e8:	2317      	movs	r3, #23
 80006ea:	18fa      	adds	r2, r7, r3
 80006ec:	1dfb      	adds	r3, r7, #7
 80006ee:	7812      	ldrb	r2, [r2, #0]
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	429a      	cmp	r2, r3
 80006f4:	d3c6      	bcc.n	8000684 <IntToUnicode+0x20>
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
  }
}
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	46bd      	mov	sp, r7
 80006fa:	b006      	add	sp, #24
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	46c0      	nop			; (mov r8, r8)

08000700 <USB_BSP_Init>:
  * @param  None
  * @retval None
  */

void USB_BSP_Init(USB_CORE_HANDLE *pdev)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
#ifdef USB_DEVICE_LOW_PWR_MGMT_SUPPORT 
  EXTI_InitTypeDef EXTI_InitStructure;
#endif /*USB_DEVICE_LOW_PWR_MGMT_SUPPORT */  

  /* Enable USB clock */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB, ENABLE);
 8000708:	2380      	movs	r3, #128	; 0x80
 800070a:	041b      	lsls	r3, r3, #16
 800070c:	2101      	movs	r1, #1
 800070e:	0018      	movs	r0, r3
 8000710:	f005 fd04 	bl	800611c <RCC_APB1PeriphClockCmd>
  - Set AUTOTRIMEN
  - Set CEN
  */
  
  /* Select HSI48 as USB clock */
  RCC_USBCLKConfig(RCC_USBCLK_HSI48);
 8000714:	2000      	movs	r0, #0
 8000716:	f005 fcab 	bl	8006070 <RCC_USBCLKConfig>
  
  /* Configure the Clock Recovery System */
  CRS_Config();  
 800071a:	f000 f81f 	bl	800075c <CRS_Config>
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
  EXTI_Init(&EXTI_InitStructure);
#endif /*USB_DEVICE_LOW_PWR_MGMT_SUPPORT */
  
}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	46bd      	mov	sp, r7
 8000722:	b002      	add	sp, #8
 8000724:	bd80      	pop	{r7, pc}
 8000726:	46c0      	nop			; (mov r8, r8)

08000728 <USB_BSP_EnableInterrupt>:
  * @brief  Enable USB Global interrupt
  * @param  None
  * @retval None
  */
void USB_BSP_EnableInterrupt(USB_CORE_HANDLE *pdev)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  NVIC_InitTypeDef NVIC_InitStructure;
  
  /* Enable the USB interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = USB_IRQn;
 8000730:	230c      	movs	r3, #12
 8000732:	18fb      	adds	r3, r7, r3
 8000734:	221f      	movs	r2, #31
 8000736:	701a      	strb	r2, [r3, #0]
  NVIC_InitStructure.NVIC_IRQChannelPriority = USB_IT_PRIO;
 8000738:	230c      	movs	r3, #12
 800073a:	18fb      	adds	r3, r7, r3
 800073c:	2201      	movs	r2, #1
 800073e:	705a      	strb	r2, [r3, #1]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000740:	230c      	movs	r3, #12
 8000742:	18fb      	adds	r3, r7, r3
 8000744:	2201      	movs	r2, #1
 8000746:	709a      	strb	r2, [r3, #2]
  NVIC_Init(&NVIC_InitStructure);
 8000748:	230c      	movs	r3, #12
 800074a:	18fb      	adds	r3, r7, r3
 800074c:	0018      	movs	r0, r3
 800074e:	f005 fd05 	bl	800615c <NVIC_Init>
}
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	46bd      	mov	sp, r7
 8000756:	b004      	add	sp, #16
 8000758:	bd80      	pop	{r7, pc}
 800075a:	46c0      	nop			; (mov r8, r8)

0800075c <CRS_Config>:
  *         oscillator according to USB SOF
  * @param  None
  * @retval None
  */
static void CRS_Config(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /*Enable CRS Clock*/
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_CRS, ENABLE);
 8000760:	2380      	movs	r3, #128	; 0x80
 8000762:	051b      	lsls	r3, r3, #20
 8000764:	2101      	movs	r1, #1
 8000766:	0018      	movs	r0, r3
 8000768:	f005 fcd8 	bl	800611c <RCC_APB1PeriphClockCmd>
  
  /* Select USB SOF as synchronization source */
  CRS_SynchronizationSourceConfig(CRS_SYNCSource_USB);
 800076c:	2380      	movs	r3, #128	; 0x80
 800076e:	059b      	lsls	r3, r3, #22
 8000770:	0018      	movs	r0, r3
 8000772:	f006 f967 	bl	8006a44 <CRS_SynchronizationSourceConfig>
  
  /*Enables the automatic hardware adjustment of TRIM bits: AUTOTRIMEN:*/
  CRS_AutomaticCalibrationCmd(ENABLE);
 8000776:	2001      	movs	r0, #1
 8000778:	f006 f946 	bl	8006a08 <CRS_AutomaticCalibrationCmd>
  
  /*Enables the oscillator clock for frequency error counter CEN*/
  CRS_FrequencyErrorCounterCmd(ENABLE);
 800077c:	2001      	movs	r0, #1
 800077e:	f006 f925 	bl	80069cc <CRS_FrequencyErrorCounterCmd>
}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800078c:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <SystemInit+0x74>)
 800078e:	4a1b      	ldr	r2, [pc, #108]	; (80007fc <SystemInit+0x74>)
 8000790:	6812      	ldr	r2, [r2, #0]
 8000792:	2101      	movs	r1, #1
 8000794:	430a      	orrs	r2, r1
 8000796:	601a      	str	r2, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[3:0] bits MCOPRE[2:0] */
  RCC->CFGR &= (uint32_t)0x80FFB80C;
 8000798:	4b18      	ldr	r3, [pc, #96]	; (80007fc <SystemInit+0x74>)
 800079a:	4a18      	ldr	r2, [pc, #96]	; (80007fc <SystemInit+0x74>)
 800079c:	6852      	ldr	r2, [r2, #4]
 800079e:	4918      	ldr	r1, [pc, #96]	; (8000800 <SystemInit+0x78>)
 80007a0:	400a      	ands	r2, r1
 80007a2:	605a      	str	r2, [r3, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80007a4:	4b15      	ldr	r3, [pc, #84]	; (80007fc <SystemInit+0x74>)
 80007a6:	4a15      	ldr	r2, [pc, #84]	; (80007fc <SystemInit+0x74>)
 80007a8:	6812      	ldr	r2, [r2, #0]
 80007aa:	4916      	ldr	r1, [pc, #88]	; (8000804 <SystemInit+0x7c>)
 80007ac:	400a      	ands	r2, r1
 80007ae:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <SystemInit+0x74>)
 80007b2:	4a12      	ldr	r2, [pc, #72]	; (80007fc <SystemInit+0x74>)
 80007b4:	6812      	ldr	r2, [r2, #0]
 80007b6:	4914      	ldr	r1, [pc, #80]	; (8000808 <SystemInit+0x80>)
 80007b8:	400a      	ands	r2, r1
 80007ba:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC07FFF;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <SystemInit+0x74>)
 80007be:	4a0f      	ldr	r2, [pc, #60]	; (80007fc <SystemInit+0x74>)
 80007c0:	6852      	ldr	r2, [r2, #4]
 80007c2:	4912      	ldr	r1, [pc, #72]	; (800080c <SystemInit+0x84>)
 80007c4:	400a      	ands	r2, r1
 80007c6:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <SystemInit+0x74>)
 80007ca:	4a0c      	ldr	r2, [pc, #48]	; (80007fc <SystemInit+0x74>)
 80007cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80007ce:	210f      	movs	r1, #15
 80007d0:	438a      	bics	r2, r1
 80007d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <SystemInit+0x74>)
 80007d6:	4a09      	ldr	r2, [pc, #36]	; (80007fc <SystemInit+0x74>)
 80007d8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80007da:	490d      	ldr	r1, [pc, #52]	; (8000810 <SystemInit+0x88>)
 80007dc:	400a      	ands	r2, r1
 80007de:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset HSI14 & HSI48 bit */
  RCC->CR2 &= (uint32_t)0xFFFEFFFE;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <SystemInit+0x74>)
 80007e2:	4a06      	ldr	r2, [pc, #24]	; (80007fc <SystemInit+0x74>)
 80007e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80007e6:	490b      	ldr	r1, [pc, #44]	; (8000814 <SystemInit+0x8c>)
 80007e8:	400a      	ands	r2, r1
 80007ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80007ec:	4b03      	ldr	r3, [pc, #12]	; (80007fc <SystemInit+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]

  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 80007f2:	f000 f887 	bl	8000904 <SetSysClock>
}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40021000 	.word	0x40021000
 8000800:	80ffb80c 	.word	0x80ffb80c
 8000804:	fef6ffff 	.word	0xfef6ffff
 8000808:	fffbffff 	.word	0xfffbffff
 800080c:	ffc07fff 	.word	0xffc07fff
 8000810:	fffffeac 	.word	0xfffffeac
 8000814:	fffefffe 	.word	0xfffefffe

08000818 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	2300      	movs	r3, #0
 800082c:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800082e:	4b2f      	ldr	r3, [pc, #188]	; (80008ec <SystemCoreClockUpdate+0xd4>)
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	220c      	movs	r2, #12
 8000834:	4013      	ands	r3, r2
 8000836:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	2b04      	cmp	r3, #4
 800083c:	d00c      	beq.n	8000858 <SystemCoreClockUpdate+0x40>
 800083e:	d802      	bhi.n	8000846 <SystemCoreClockUpdate+0x2e>
 8000840:	2b00      	cmp	r3, #0
 8000842:	d005      	beq.n	8000850 <SystemCoreClockUpdate+0x38>
 8000844:	e03a      	b.n	80008bc <SystemCoreClockUpdate+0xa4>
 8000846:	2b08      	cmp	r3, #8
 8000848:	d00a      	beq.n	8000860 <SystemCoreClockUpdate+0x48>
 800084a:	2b0c      	cmp	r3, #12
 800084c:	d032      	beq.n	80008b4 <SystemCoreClockUpdate+0x9c>
 800084e:	e035      	b.n	80008bc <SystemCoreClockUpdate+0xa4>
  {
  case 0x00:  /* HSI used as system clock */
    SystemCoreClock = HSI_VALUE;
 8000850:	4b27      	ldr	r3, [pc, #156]	; (80008f0 <SystemCoreClockUpdate+0xd8>)
 8000852:	4a28      	ldr	r2, [pc, #160]	; (80008f4 <SystemCoreClockUpdate+0xdc>)
 8000854:	601a      	str	r2, [r3, #0]
    break;
 8000856:	e035      	b.n	80008c4 <SystemCoreClockUpdate+0xac>
  case 0x04:  /* HSE used as system clock */
    SystemCoreClock = HSE_VALUE;
 8000858:	4b25      	ldr	r3, [pc, #148]	; (80008f0 <SystemCoreClockUpdate+0xd8>)
 800085a:	4a26      	ldr	r2, [pc, #152]	; (80008f4 <SystemCoreClockUpdate+0xdc>)
 800085c:	601a      	str	r2, [r3, #0]
    break;
 800085e:	e031      	b.n	80008c4 <SystemCoreClockUpdate+0xac>
  case 0x08:  /* PLL used as system clock */
    /* Get PLL clock source and multiplication factor ----------------------*/
    pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000860:	4b22      	ldr	r3, [pc, #136]	; (80008ec <SystemCoreClockUpdate+0xd4>)
 8000862:	685a      	ldr	r2, [r3, #4]
 8000864:	23f0      	movs	r3, #240	; 0xf0
 8000866:	039b      	lsls	r3, r3, #14
 8000868:	4013      	ands	r3, r2
 800086a:	60bb      	str	r3, [r7, #8]
    pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800086c:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <SystemCoreClockUpdate+0xd4>)
 800086e:	685a      	ldr	r2, [r3, #4]
 8000870:	23c0      	movs	r3, #192	; 0xc0
 8000872:	025b      	lsls	r3, r3, #9
 8000874:	4013      	ands	r3, r2
 8000876:	607b      	str	r3, [r7, #4]
    pllmull = ( pllmull >> 18) + 2;
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	0c9b      	lsrs	r3, r3, #18
 800087c:	3302      	adds	r3, #2
 800087e:	60bb      	str	r3, [r7, #8]

    if (pllsource == 0x00)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d105      	bne.n	8000892 <SystemCoreClockUpdate+0x7a>
    {
      /* HSI oscillator clock divided by 2 selected as PLL clock entry */
      SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	4a1b      	ldr	r2, [pc, #108]	; (80008f8 <SystemCoreClockUpdate+0xe0>)
 800088a:	435a      	muls	r2, r3
 800088c:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <SystemCoreClockUpdate+0xd8>)
 800088e:	601a      	str	r2, [r3, #0]
    {
      prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
      /* HSE oscillator clock selected as PREDIV1 clock entry */
      SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
    }
    break;
 8000890:	e018      	b.n	80008c4 <SystemCoreClockUpdate+0xac>
      /* HSI oscillator clock divided by 2 selected as PLL clock entry */
      SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
    }
    else
    {
      prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000892:	4b16      	ldr	r3, [pc, #88]	; (80008ec <SystemCoreClockUpdate+0xd4>)
 8000894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000896:	220f      	movs	r2, #15
 8000898:	4013      	ands	r3, r2
 800089a:	3301      	adds	r3, #1
 800089c:	603b      	str	r3, [r7, #0]
      /* HSE oscillator clock selected as PREDIV1 clock entry */
      SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 800089e:	6839      	ldr	r1, [r7, #0]
 80008a0:	4814      	ldr	r0, [pc, #80]	; (80008f4 <SystemCoreClockUpdate+0xdc>)
 80008a2:	f7ff fc31 	bl	8000108 <__aeabi_uidiv>
 80008a6:	0003      	movs	r3, r0
 80008a8:	001a      	movs	r2, r3
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	435a      	muls	r2, r3
 80008ae:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <SystemCoreClockUpdate+0xd8>)
 80008b0:	601a      	str	r2, [r3, #0]
    }
    break;
 80008b2:	e007      	b.n	80008c4 <SystemCoreClockUpdate+0xac>
  case 0x0C:  /* HSI48 used as system clock */
    SystemCoreClock = HSI48_VALUE;
 80008b4:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <SystemCoreClockUpdate+0xd8>)
 80008b6:	4a11      	ldr	r2, [pc, #68]	; (80008fc <SystemCoreClockUpdate+0xe4>)
 80008b8:	601a      	str	r2, [r3, #0]
    break;
 80008ba:	e003      	b.n	80008c4 <SystemCoreClockUpdate+0xac>
  default: /* HSI used as system clock */
    SystemCoreClock = HSI_VALUE;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <SystemCoreClockUpdate+0xd8>)
 80008be:	4a0d      	ldr	r2, [pc, #52]	; (80008f4 <SystemCoreClockUpdate+0xdc>)
 80008c0:	601a      	str	r2, [r3, #0]
    break;
 80008c2:	46c0      	nop			; (mov r8, r8)

  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80008c4:	4b09      	ldr	r3, [pc, #36]	; (80008ec <SystemCoreClockUpdate+0xd4>)
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	22f0      	movs	r2, #240	; 0xf0
 80008ca:	4013      	ands	r3, r2
 80008cc:	091b      	lsrs	r3, r3, #4
 80008ce:	4a0c      	ldr	r2, [pc, #48]	; (8000900 <SystemCoreClockUpdate+0xe8>)
 80008d0:	5cd3      	ldrb	r3, [r2, r3]
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <SystemCoreClockUpdate+0xd8>)
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	40da      	lsrs	r2, r3
 80008de:	4b04      	ldr	r3, [pc, #16]	; (80008f0 <SystemCoreClockUpdate+0xd8>)
 80008e0:	601a      	str	r2, [r3, #0]
}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	46bd      	mov	sp, r7
 80008e6:	b004      	add	sp, #16
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	40021000 	.word	0x40021000
 80008f0:	2000004c 	.word	0x2000004c
 80008f4:	007a1200 	.word	0x007a1200
 80008f8:	003d0900 	.word	0x003d0900
 80008fc:	02dc6c00 	.word	0x02dc6c00
 8000900:	20000050 	.word	0x20000050

08000904 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
   /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
    /* At this stage the HSI is already enabled */
 
    /* Enable Prefetch Buffer and set Flash Latency */
    FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8000908:	4b13      	ldr	r3, [pc, #76]	; (8000958 <SetSysClock+0x54>)
 800090a:	2211      	movs	r2, #17
 800090c:	601a      	str	r2, [r3, #0]
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800090e:	4b13      	ldr	r3, [pc, #76]	; (800095c <SetSysClock+0x58>)
 8000910:	4a12      	ldr	r2, [pc, #72]	; (800095c <SetSysClock+0x58>)
 8000912:	6852      	ldr	r2, [r2, #4]
 8000914:	605a      	str	r2, [r3, #4]

    /* PCLK = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <SetSysClock+0x58>)
 8000918:	4a10      	ldr	r2, [pc, #64]	; (800095c <SetSysClock+0x58>)
 800091a:	6852      	ldr	r2, [r2, #4]
 800091c:	605a      	str	r2, [r3, #4]

   /* Enable HSI48 */
    RCC->CR2 |= RCC_CR2_HSI48ON;
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <SetSysClock+0x58>)
 8000920:	4a0e      	ldr	r2, [pc, #56]	; (800095c <SetSysClock+0x58>)
 8000922:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000924:	2180      	movs	r1, #128	; 0x80
 8000926:	0249      	lsls	r1, r1, #9
 8000928:	430a      	orrs	r2, r1
 800092a:	635a      	str	r2, [r3, #52]	; 0x34
  /* Wait till HSI48RDY is set */
    while((RCC->CR2 & RCC_CR2_HSI48RDY) == 0)
 800092c:	46c0      	nop			; (mov r8, r8)
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <SetSysClock+0x58>)
 8000930:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000932:	2380      	movs	r3, #128	; 0x80
 8000934:	029b      	lsls	r3, r3, #10
 8000936:	4013      	ands	r3, r2
 8000938:	d0f9      	beq.n	800092e <SetSysClock+0x2a>
    { }
  /* Select HSI48 as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <SetSysClock+0x58>)
 800093c:	4a07      	ldr	r2, [pc, #28]	; (800095c <SetSysClock+0x58>)
 800093e:	6852      	ldr	r2, [r2, #4]
 8000940:	2103      	movs	r1, #3
 8000942:	438a      	bics	r2, r1
 8000944:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_HSI48;
 8000946:	4b05      	ldr	r3, [pc, #20]	; (800095c <SetSysClock+0x58>)
 8000948:	4a04      	ldr	r2, [pc, #16]	; (800095c <SetSysClock+0x58>)
 800094a:	6852      	ldr	r2, [r2, #4]
 800094c:	2103      	movs	r1, #3
 800094e:	430a      	orrs	r2, r1
 8000950:	605a      	str	r2, [r3, #4]

}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40022000 	.word	0x40022000
 800095c:	40021000 	.word	0x40021000

08000960 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
}
 8000964:	46c0      	nop			; (mov r8, r8)
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	46c0      	nop			; (mov r8, r8)

0800096c <HardFault_Handler>:
  * @param  None
  * @retval None
  */

void HardFault_Handler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000970:	e7fe      	b.n	8000970 <HardFault_Handler+0x4>
 8000972:	46c0      	nop			; (mov r8, r8)

08000974 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	46c0      	nop			; (mov r8, r8)

08000980 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
}
 8000984:	46c0      	nop			; (mov r8, r8)
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	46c0      	nop			; (mov r8, r8)

0800098c <USB_IRQHandler>:
  * @brief  This function handles USB FS Handler.
  * @param  None
  * @retval None
  */
void USB_IRQHandler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
	USB_Istr();
 8000990:	f004 f8bc 	bl	8004b0c <USB_Istr>
}
 8000994:	46c0      	nop			; (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	46c0      	nop			; (mov r8, r8)

0800099c <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
	displayFindReturnPoint();
 80009a0:	f001 fbc6 	bl	8002130 <displayFindReturnPoint>
}
 80009a4:	46c0      	nop			; (mov r8, r8)
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	46c0      	nop			; (mov r8, r8)

080009ac <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
	displayEndOfLocktime();
 80009b0:	f001 fb4e 	bl	8002050 <displayEndOfLocktime>
}
 80009b4:	46c0      	nop			; (mov r8, r8)
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	46c0      	nop			; (mov r8, r8)

080009bc <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	displaySendLine();
 80009c0:	f001 fada 	bl	8001f78 <displaySendLine>
}
 80009c4:	46c0      	nop			; (mov r8, r8)
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	46c0      	nop			; (mov r8, r8)

080009cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009cc:	480d      	ldr	r0, [pc, #52]	; (8000a04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009ce:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80009d0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80009d2:	e003      	b.n	80009dc <LoopCopyDataInit>

080009d4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80009d6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80009d8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80009da:	3104      	adds	r1, #4

080009dc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80009dc:	480b      	ldr	r0, [pc, #44]	; (8000a0c <LoopForever+0xa>)
  ldr r3, =_edata
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <LoopForever+0xe>)
  adds r2, r0, r1
 80009e0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80009e2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80009e4:	d3f6      	bcc.n	80009d4 <CopyDataInit>
  ldr r2, =_sbss
 80009e6:	4a0b      	ldr	r2, [pc, #44]	; (8000a14 <LoopForever+0x12>)
  b LoopFillZerobss
 80009e8:	e002      	b.n	80009f0 <LoopFillZerobss>

080009ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  str  r3, [r2]
 80009ec:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ee:	3204      	adds	r2, #4

080009f0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80009f0:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <LoopForever+0x16>)
  cmp r2, r3
 80009f2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80009f4:	d3f9      	bcc.n	80009ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009f6:	f7ff fec7 	bl	8000788 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009fa:	f006 f83b 	bl	8006a74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009fe:	f000 f8d7 	bl	8000bb0 <main>

08000a02 <LoopForever>:
  
LoopForever:
    b LoopForever
 8000a02:	e7fe      	b.n	8000a02 <LoopForever>

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a04:	20001800 	.word	0x20001800
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8000a08:	08007744 	.word	0x08007744
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8000a0c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a10:	20000120 	.word	0x20000120
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8000a14:	20000120 	.word	0x20000120
  str  r3, [r2]
  adds r2, r2, #4


LoopFillZerobss:
  ldr r3, = _ebss
 8000a18:	20000ee4 	.word	0x20000ee4

08000a1c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a1c:	e7fe      	b.n	8000a1c <ADC1_COMP_IRQHandler>
	...

08000a20 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a20:	b5b0      	push	{r4, r5, r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	0002      	movs	r2, r0
 8000a28:	6039      	str	r1, [r7, #0]
 8000a2a:	1dfb      	adds	r3, r7, #7
 8000a2c:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
 8000a2e:	1dfb      	adds	r3, r7, #7
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b7f      	cmp	r3, #127	; 0x7f
 8000a34:	d932      	bls.n	8000a9c <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8000a36:	4c2f      	ldr	r4, [pc, #188]	; (8000af4 <NVIC_SetPriority+0xd4>)
 8000a38:	1dfb      	adds	r3, r7, #7
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	001a      	movs	r2, r3
 8000a3e:	230f      	movs	r3, #15
 8000a40:	4013      	ands	r3, r2
 8000a42:	3b08      	subs	r3, #8
 8000a44:	0899      	lsrs	r1, r3, #2
 8000a46:	4a2b      	ldr	r2, [pc, #172]	; (8000af4 <NVIC_SetPriority+0xd4>)
 8000a48:	1dfb      	adds	r3, r7, #7
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	230f      	movs	r3, #15
 8000a50:	4003      	ands	r3, r0
 8000a52:	3b08      	subs	r3, #8
 8000a54:	089b      	lsrs	r3, r3, #2
 8000a56:	3306      	adds	r3, #6
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	18d3      	adds	r3, r2, r3
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	1dfa      	adds	r2, r7, #7
 8000a62:	7812      	ldrb	r2, [r2, #0]
 8000a64:	0010      	movs	r0, r2
 8000a66:	2203      	movs	r2, #3
 8000a68:	4002      	ands	r2, r0
 8000a6a:	00d2      	lsls	r2, r2, #3
 8000a6c:	20ff      	movs	r0, #255	; 0xff
 8000a6e:	4090      	lsls	r0, r2
 8000a70:	0002      	movs	r2, r0
 8000a72:	43d2      	mvns	r2, r2
 8000a74:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	019b      	lsls	r3, r3, #6
 8000a7a:	20ff      	movs	r0, #255	; 0xff
 8000a7c:	4018      	ands	r0, r3
 8000a7e:	1dfb      	adds	r3, r7, #7
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	001d      	movs	r5, r3
 8000a84:	2303      	movs	r3, #3
 8000a86:	402b      	ands	r3, r5
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	4098      	lsls	r0, r3
 8000a8c:	0003      	movs	r3, r0
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8000a8e:	431a      	orrs	r2, r3
 8000a90:	1d8b      	adds	r3, r1, #6
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	18e3      	adds	r3, r4, r3
 8000a96:	3304      	adds	r3, #4
 8000a98:	601a      	str	r2, [r3, #0]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
 8000a9a:	e027      	b.n	8000aec <NVIC_SetPriority+0xcc>
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8000a9c:	4c16      	ldr	r4, [pc, #88]	; (8000af8 <NVIC_SetPriority+0xd8>)
 8000a9e:	1dfb      	adds	r3, r7, #7
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	b25b      	sxtb	r3, r3
 8000aa4:	089b      	lsrs	r3, r3, #2
 8000aa6:	4914      	ldr	r1, [pc, #80]	; (8000af8 <NVIC_SetPriority+0xd8>)
 8000aa8:	1dfa      	adds	r2, r7, #7
 8000aaa:	7812      	ldrb	r2, [r2, #0]
 8000aac:	b252      	sxtb	r2, r2
 8000aae:	0892      	lsrs	r2, r2, #2
 8000ab0:	32c0      	adds	r2, #192	; 0xc0
 8000ab2:	0092      	lsls	r2, r2, #2
 8000ab4:	5852      	ldr	r2, [r2, r1]
 8000ab6:	1df9      	adds	r1, r7, #7
 8000ab8:	7809      	ldrb	r1, [r1, #0]
 8000aba:	0008      	movs	r0, r1
 8000abc:	2103      	movs	r1, #3
 8000abe:	4001      	ands	r1, r0
 8000ac0:	00c9      	lsls	r1, r1, #3
 8000ac2:	20ff      	movs	r0, #255	; 0xff
 8000ac4:	4088      	lsls	r0, r1
 8000ac6:	0001      	movs	r1, r0
 8000ac8:	43c9      	mvns	r1, r1
 8000aca:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 8000acc:	683a      	ldr	r2, [r7, #0]
 8000ace:	0192      	lsls	r2, r2, #6
 8000ad0:	20ff      	movs	r0, #255	; 0xff
 8000ad2:	4010      	ands	r0, r2
 8000ad4:	1dfa      	adds	r2, r7, #7
 8000ad6:	7812      	ldrb	r2, [r2, #0]
 8000ad8:	0015      	movs	r5, r2
 8000ada:	2203      	movs	r2, #3
 8000adc:	402a      	ands	r2, r5
 8000ade:	00d2      	lsls	r2, r2, #3
 8000ae0:	4090      	lsls	r0, r2
 8000ae2:	0002      	movs	r2, r0
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8000ae4:	430a      	orrs	r2, r1
 8000ae6:	33c0      	adds	r3, #192	; 0xc0
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	511a      	str	r2, [r3, r4]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
 8000aec:	46c0      	nop			; (mov r8, r8)
 8000aee:	46bd      	mov	sp, r7
 8000af0:	b002      	add	sp, #8
 8000af2:	bdb0      	pop	{r4, r5, r7, pc}
 8000af4:	e000ed00 	.word	0xe000ed00
 8000af8:	e000e100 	.word	0xe000e100

08000afc <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3b01      	subs	r3, #1
 8000b08:	4a0c      	ldr	r2, [pc, #48]	; (8000b3c <SysTick_Config+0x40>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d901      	bls.n	8000b12 <SysTick_Config+0x16>
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e010      	b.n	8000b34 <SysTick_Config+0x38>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <SysTick_Config+0x44>)
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	3a01      	subs	r2, #1
 8000b18:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	425b      	negs	r3, r3
 8000b1e:	2103      	movs	r1, #3
 8000b20:	0018      	movs	r0, r3
 8000b22:	f7ff ff7d 	bl	8000a20 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <SysTick_Config+0x44>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b2c:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <SysTick_Config+0x44>)
 8000b2e:	2207      	movs	r2, #7
 8000b30:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000b32:	2300      	movs	r3, #0
}
 8000b34:	0018      	movs	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	b002      	add	sp, #8
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	00ffffff 	.word	0x00ffffff
 8000b40:	e000e010 	.word	0xe000e010

08000b44 <SysTick_Handler>:
uint8_t errorcode = 0;

uint8_t tempstring[32];

void SysTick_Handler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
	if(delayTimer)
 8000b48:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <SysTick_Handler+0x3c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d004      	beq.n	8000b5a <SysTick_Handler+0x16>
	{
		delayTimer--;
 8000b50:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <SysTick_Handler+0x3c>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	1e5a      	subs	r2, r3, #1
 8000b56:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <SysTick_Handler+0x3c>)
 8000b58:	601a      	str	r2, [r3, #0]
	}
	timer++;
 8000b5a:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <SysTick_Handler+0x40>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	1c5a      	adds	r2, r3, #1
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <SysTick_Handler+0x40>)
 8000b62:	601a      	str	r2, [r3, #0]

	if  (timer>=100)
 8000b64:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <SysTick_Handler+0x40>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2b63      	cmp	r3, #99	; 0x63
 8000b6a:	d905      	bls.n	8000b78 <SysTick_Handler+0x34>
	{
		timerFlag = 1;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <SysTick_Handler+0x44>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	701a      	strb	r2, [r3, #0]
		timer = 0;
 8000b72:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <SysTick_Handler+0x40>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
	}
}
 8000b78:	46c0      	nop			; (mov r8, r8)
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	200001d0 	.word	0x200001d0
 8000b84:	20000140 	.word	0x20000140
 8000b88:	20000144 	.word	0x20000144

08000b8c <delay>:


void delay(uint32_t ticks)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	delayTimer = ticks;
 8000b94:	4b05      	ldr	r3, [pc, #20]	; (8000bac <delay+0x20>)
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	601a      	str	r2, [r3, #0]
	while(delayTimer > 0);
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	4b03      	ldr	r3, [pc, #12]	; (8000bac <delay+0x20>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d1fb      	bne.n	8000b9c <delay+0x10>
}
 8000ba4:	46c0      	nop			; (mov r8, r8)
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	b002      	add	sp, #8
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	200001d0 	.word	0x200001d0

08000bb0 <main>:
 */

int main(void)


{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
	SystemInit();
 8000bb6:	f7ff fde7 	bl	8000788 <SystemInit>
	SystemCoreClockUpdate();
 8000bba:	f7ff fe2d 	bl	8000818 <SystemCoreClockUpdate>
	//the systick timer runs with 6MHz
	//config the timer for 1ms interval
	SysTick_Config(SystemCoreClock / 8 / 1000);
 8000bbe:	4b37      	ldr	r3, [pc, #220]	; (8000c9c <main+0xec>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	23fa      	movs	r3, #250	; 0xfa
 8000bc4:	0159      	lsls	r1, r3, #5
 8000bc6:	0010      	movs	r0, r2
 8000bc8:	f7ff fa9e 	bl	8000108 <__aeabi_uidiv>
 8000bcc:	0003      	movs	r3, r0
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f7ff ff94 	bl	8000afc <SysTick_Config>
	//the systick_config just set the priority of the systick to 15  or so - very low!
	//set it back to 0
	NVIC_SetPriority(SysTick_IRQn,0);
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	425b      	negs	r3, r3
 8000bd8:	2100      	movs	r1, #0
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f7ff ff20 	bl	8000a20 <NVIC_SetPriority>
	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8);
 8000be0:	2305      	movs	r3, #5
 8000be2:	425b      	negs	r3, r3
 8000be4:	0018      	movs	r0, r3
 8000be6:	f005 fb0f 	bl	8006208 <SysTick_CLKSourceConfig>
//	{
//		dbgLED_toggle();
//		delay(100);
//	}
//	dbgLED_off();
	USB_Init();
 8000bea:	f000 fcd9 	bl	80015a0 <USB_Init>
	consoleInit();
 8000bee:	f001 ff45 	bl	8002a7c <consoleInit>
	mma8653_init();
 8000bf2:	f000 ff89 	bl	8001b08 <mma8653_init>
	apa102_init();
 8000bf6:	f001 fb8d 	bl	8002314 <apa102_init>
	//LED-Test
	for(uint8_t i = 0; i<16; i++)
 8000bfa:	1dfb      	adds	r3, r7, #7
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	701a      	strb	r2, [r3, #0]
 8000c00:	e00d      	b.n	8000c1e <main+0x6e>
	{
		apa102_setSingle(i,10);
 8000c02:	1dfb      	adds	r3, r7, #7
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	210a      	movs	r1, #10
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f001 fd23 	bl	8002654 <apa102_setSingle>
		delay(30);
 8000c0e:	201e      	movs	r0, #30
 8000c10:	f7ff ffbc 	bl	8000b8c <delay>
	USB_Init();
	consoleInit();
	mma8653_init();
	apa102_init();
	//LED-Test
	for(uint8_t i = 0; i<16; i++)
 8000c14:	1dfb      	adds	r3, r7, #7
 8000c16:	781a      	ldrb	r2, [r3, #0]
 8000c18:	1dfb      	adds	r3, r7, #7
 8000c1a:	3201      	adds	r2, #1
 8000c1c:	701a      	strb	r2, [r3, #0]
 8000c1e:	1dfb      	adds	r3, r7, #7
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b0f      	cmp	r3, #15
 8000c24:	d9ed      	bls.n	8000c02 <main+0x52>
	{
		apa102_setSingle(i,10);
		delay(30);
	}
	apa102_allOff();
 8000c26:	f001 fd2f 	bl	8002688 <apa102_allOff>
	//TODO: battery-check is still missing

	displayInit();
 8000c2a:	f001 f925 	bl	8001e78 <displayInit>



	while(1)
	{
		if(timerFlag)
 8000c2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ca0 <main+0xf0>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d0fa      	beq.n	8000c2e <main+0x7e>
		{
			timerFlag = 0;
 8000c38:	4b19      	ldr	r3, [pc, #100]	; (8000ca0 <main+0xf0>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]


			if(USB_Flags & USB_FLAG_FIRST_CONTACT)
 8000c3e:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <main+0xf4>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	001a      	movs	r2, r3
 8000c46:	2304      	movs	r3, #4
 8000c48:	4013      	ands	r3, r2
 8000c4a:	d00c      	beq.n	8000c66 <main+0xb6>
			{
				USB_Flags &= ~USB_FLAG_FIRST_CONTACT;
 8000c4c:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <main+0xf4>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	2204      	movs	r2, #4
 8000c54:	4393      	bics	r3, r2
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <main+0xf4>)
 8000c5a:	701a      	strb	r2, [r3, #0]
				USB_VCP_DataTx((uint8_t*)"----LightShaker - POV_Display - Version1.1----\n",0);
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <main+0xf8>)
 8000c5e:	2100      	movs	r1, #0
 8000c60:	0018      	movs	r0, r3
 8000c62:	f000 fcfd 	bl	8001660 <USB_VCP_DataTx>
			}
			if(USB_Flags & USB_FLAG_CDC_OPEN)
 8000c66:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <main+0xf4>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	001a      	movs	r2, r3
 8000c6e:	2302      	movs	r3, #2
 8000c70:	4013      	ands	r3, r2
 8000c72:	d0dc      	beq.n	8000c2e <main+0x7e>
			{
				if(errorcode != 0)
 8000c74:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <main+0xfc>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d00c      	beq.n	8000c96 <main+0xe6>
				{
					sprintf((char*)tempstring,"Error %i occured!\n",errorcode);
 8000c7c:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <main+0xfc>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	001a      	movs	r2, r3
 8000c82:	490b      	ldr	r1, [pc, #44]	; (8000cb0 <main+0x100>)
 8000c84:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <main+0x104>)
 8000c86:	0018      	movs	r0, r3
 8000c88:	f005 ff24 	bl	8006ad4 <siprintf>
					USB_VCP_DataTx((uint8_t*)tempstring,0);
 8000c8c:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <main+0x104>)
 8000c8e:	2100      	movs	r1, #0
 8000c90:	0018      	movs	r0, r3
 8000c92:	f000 fce5 	bl	8001660 <USB_VCP_DataTx>
				}
				consoleExecute();
 8000c96:	f001 ffff 	bl	8002c98 <consoleExecute>
			}
		}
	}
 8000c9a:	e7c8      	b.n	8000c2e <main+0x7e>
 8000c9c:	2000004c 	.word	0x2000004c
 8000ca0:	20000144 	.word	0x20000144
 8000ca4:	20000186 	.word	0x20000186
 8000ca8:	080073a8 	.word	0x080073a8
 8000cac:	20000145 	.word	0x20000145
 8000cb0:	080073d8 	.word	0x080073d8
 8000cb4:	200001d4 	.word	0x200001d4

08000cb8 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8000cbe:	230a      	movs	r3, #10
 8000cc0:	18fb      	adds	r3, r7, r3
 8000cc2:	2206      	movs	r2, #6
 8000cc4:	801a      	strh	r2, [r3, #0]
 8000cc6:	2308      	movs	r3, #8
 8000cc8:	18fb      	adds	r3, r7, r3
 8000cca:	2206      	movs	r2, #6
 8000ccc:	801a      	strh	r2, [r3, #0]
  uint16_t VarIdx = 0;
 8000cce:	230e      	movs	r3, #14
 8000cd0:	18fb      	adds	r3, r7, r3
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	801a      	strh	r2, [r3, #0]
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8000cd6:	1dbb      	adds	r3, r7, #6
 8000cd8:	2200      	movs	r2, #0
 8000cda:	801a      	strh	r2, [r3, #0]
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	2200      	movs	r2, #0
 8000ce0:	801a      	strh	r2, [r3, #0]
  int16_t x = -1;
 8000ce2:	230c      	movs	r3, #12
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	801a      	strh	r2, [r3, #0]
  uint16_t  FlashStatus;

  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000cec:	4abe      	ldr	r2, [pc, #760]	; (8000fe8 <EE_Init+0x330>)
 8000cee:	230a      	movs	r3, #10
 8000cf0:	18fb      	adds	r3, r7, r3
 8000cf2:	8812      	ldrh	r2, [r2, #0]
 8000cf4:	801a      	strh	r2, [r3, #0]
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000cf6:	4abd      	ldr	r2, [pc, #756]	; (8000fec <EE_Init+0x334>)
 8000cf8:	2308      	movs	r3, #8
 8000cfa:	18fb      	adds	r3, r7, r3
 8000cfc:	8812      	ldrh	r2, [r2, #0]
 8000cfe:	801a      	strh	r2, [r3, #0]

  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8000d00:	230a      	movs	r3, #10
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	881b      	ldrh	r3, [r3, #0]
 8000d06:	4aba      	ldr	r2, [pc, #744]	; (8000ff0 <EE_Init+0x338>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d04f      	beq.n	8000dac <EE_Init+0xf4>
 8000d0c:	4ab9      	ldr	r2, [pc, #740]	; (8000ff4 <EE_Init+0x33c>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d003      	beq.n	8000d1a <EE_Init+0x62>
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d100      	bne.n	8000d18 <EE_Init+0x60>
 8000d16:	e0f6      	b.n	8000f06 <EE_Init+0x24e>
 8000d18:	e1a1      	b.n	800105e <EE_Init+0x3a6>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8000d1a:	2308      	movs	r3, #8
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	881b      	ldrh	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d10f      	bne.n	8000d44 <EE_Init+0x8c>
      {
        /* Erase Page0 */
        FlashStatus = FLASH_ErasePage(PAGE0_BASE_ADDRESS);
 8000d24:	4bb0      	ldr	r3, [pc, #704]	; (8000fe8 <EE_Init+0x330>)
 8000d26:	0018      	movs	r0, r3
 8000d28:	f005 fc92 	bl	8006650 <FLASH_ErasePage>
 8000d2c:	0003      	movs	r3, r0
 8000d2e:	001a      	movs	r2, r3
 8000d30:	1cbb      	adds	r3, r7, #2
 8000d32:	801a      	strh	r2, [r3, #0]
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000d34:	1cbb      	adds	r3, r7, #2
 8000d36:	881b      	ldrh	r3, [r3, #0]
 8000d38:	2b04      	cmp	r3, #4
 8000d3a:	d100      	bne.n	8000d3e <EE_Init+0x86>
 8000d3c:	e19c      	b.n	8001078 <EE_Init+0x3c0>
        {
          return FlashStatus;
 8000d3e:	1cbb      	adds	r3, r7, #2
 8000d40:	881b      	ldrh	r3, [r3, #0]
 8000d42:	e1a1      	b.n	8001088 <EE_Init+0x3d0>
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8000d44:	2308      	movs	r3, #8
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	4aa9      	ldr	r2, [pc, #676]	; (8000ff0 <EE_Init+0x338>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d11f      	bne.n	8000d90 <EE_Init+0xd8>
      {
        /* Erase Page0 */
        FlashStatus = FLASH_ErasePage(PAGE0_BASE_ADDRESS);
 8000d50:	4ba5      	ldr	r3, [pc, #660]	; (8000fe8 <EE_Init+0x330>)
 8000d52:	0018      	movs	r0, r3
 8000d54:	f005 fc7c 	bl	8006650 <FLASH_ErasePage>
 8000d58:	0003      	movs	r3, r0
 8000d5a:	001a      	movs	r2, r3
 8000d5c:	1cbb      	adds	r3, r7, #2
 8000d5e:	801a      	strh	r2, [r3, #0]
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000d60:	1cbb      	adds	r3, r7, #2
 8000d62:	881b      	ldrh	r3, [r3, #0]
 8000d64:	2b04      	cmp	r3, #4
 8000d66:	d002      	beq.n	8000d6e <EE_Init+0xb6>
        {
          return FlashStatus;
 8000d68:	1cbb      	adds	r3, r7, #2
 8000d6a:	881b      	ldrh	r3, [r3, #0]
 8000d6c:	e18c      	b.n	8001088 <EE_Init+0x3d0>
        }
        /* Mark Page1 as valid */
        FlashStatus = FLASH_ProgramHalfWord(PAGE1_BASE_ADDRESS, VALID_PAGE);
 8000d6e:	4b9f      	ldr	r3, [pc, #636]	; (8000fec <EE_Init+0x334>)
 8000d70:	2100      	movs	r1, #0
 8000d72:	0018      	movs	r0, r3
 8000d74:	f005 fcaa 	bl	80066cc <FLASH_ProgramHalfWord>
 8000d78:	0003      	movs	r3, r0
 8000d7a:	001a      	movs	r2, r3
 8000d7c:	1cbb      	adds	r3, r7, #2
 8000d7e:	801a      	strh	r2, [r3, #0]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000d80:	1cbb      	adds	r3, r7, #2
 8000d82:	881b      	ldrh	r3, [r3, #0]
 8000d84:	2b04      	cmp	r3, #4
 8000d86:	d100      	bne.n	8000d8a <EE_Init+0xd2>
 8000d88:	e176      	b.n	8001078 <EE_Init+0x3c0>
        {
          return FlashStatus;
 8000d8a:	1cbb      	adds	r3, r7, #2
 8000d8c:	881b      	ldrh	r3, [r3, #0]
 8000d8e:	e17b      	b.n	8001088 <EE_Init+0x3d0>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8000d90:	f000 fa1a 	bl	80011c8 <EE_Format>
 8000d94:	0003      	movs	r3, r0
 8000d96:	001a      	movs	r2, r3
 8000d98:	1cbb      	adds	r3, r7, #2
 8000d9a:	801a      	strh	r2, [r3, #0]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000d9c:	1cbb      	adds	r3, r7, #2
 8000d9e:	881b      	ldrh	r3, [r3, #0]
 8000da0:	2b04      	cmp	r3, #4
 8000da2:	d100      	bne.n	8000da6 <EE_Init+0xee>
 8000da4:	e168      	b.n	8001078 <EE_Init+0x3c0>
        {
          return FlashStatus;
 8000da6:	1cbb      	adds	r3, r7, #2
 8000da8:	881b      	ldrh	r3, [r3, #0]
 8000daa:	e16d      	b.n	8001088 <EE_Init+0x3d0>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8000dac:	2308      	movs	r3, #8
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d000      	beq.n	8000db8 <EE_Init+0x100>
 8000db6:	e072      	b.n	8000e9e <EE_Init+0x1e6>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000db8:	230e      	movs	r3, #14
 8000dba:	18fb      	adds	r3, r7, r3
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	801a      	strh	r2, [r3, #0]
 8000dc0:	e048      	b.n	8000e54 <EE_Init+0x19c>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8000dc2:	4b8d      	ldr	r3, [pc, #564]	; (8000ff8 <EE_Init+0x340>)
 8000dc4:	881b      	ldrh	r3, [r3, #0]
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	230e      	movs	r3, #14
 8000dca:	18fb      	adds	r3, r7, r3
 8000dcc:	8819      	ldrh	r1, [r3, #0]
 8000dce:	4b8b      	ldr	r3, [pc, #556]	; (8000ffc <EE_Init+0x344>)
 8000dd0:	0049      	lsls	r1, r1, #1
 8000dd2:	5acb      	ldrh	r3, [r1, r3]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d105      	bne.n	8000de4 <EE_Init+0x12c>
          {
            x = VarIdx;
 8000dd8:	230c      	movs	r3, #12
 8000dda:	18fb      	adds	r3, r7, r3
 8000ddc:	220e      	movs	r2, #14
 8000dde:	18ba      	adds	r2, r7, r2
 8000de0:	8812      	ldrh	r2, [r2, #0]
 8000de2:	801a      	strh	r2, [r3, #0]
          }
          if (VarIdx != x)
 8000de4:	230e      	movs	r3, #14
 8000de6:	18fb      	adds	r3, r7, r3
 8000de8:	881a      	ldrh	r2, [r3, #0]
 8000dea:	230c      	movs	r3, #12
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	2100      	movs	r1, #0
 8000df0:	5e5b      	ldrsh	r3, [r3, r1]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d027      	beq.n	8000e46 <EE_Init+0x18e>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8000df6:	230e      	movs	r3, #14
 8000df8:	18fb      	adds	r3, r7, r3
 8000dfa:	881a      	ldrh	r2, [r3, #0]
 8000dfc:	4b7f      	ldr	r3, [pc, #508]	; (8000ffc <EE_Init+0x344>)
 8000dfe:	0052      	lsls	r2, r2, #1
 8000e00:	5ad3      	ldrh	r3, [r2, r3]
 8000e02:	1d3c      	adds	r4, r7, #4
 8000e04:	4a7e      	ldr	r2, [pc, #504]	; (8001000 <EE_Init+0x348>)
 8000e06:	0011      	movs	r1, r2
 8000e08:	0018      	movs	r0, r3
 8000e0a:	f000 f945 	bl	8001098 <EE_ReadVariable>
 8000e0e:	0003      	movs	r3, r0
 8000e10:	8023      	strh	r3, [r4, #0]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	881b      	ldrh	r3, [r3, #0]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d015      	beq.n	8000e46 <EE_Init+0x18e>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8000e1a:	230e      	movs	r3, #14
 8000e1c:	18fb      	adds	r3, r7, r3
 8000e1e:	881a      	ldrh	r2, [r3, #0]
 8000e20:	4b76      	ldr	r3, [pc, #472]	; (8000ffc <EE_Init+0x344>)
 8000e22:	0052      	lsls	r2, r2, #1
 8000e24:	5ad2      	ldrh	r2, [r2, r3]
 8000e26:	4b76      	ldr	r3, [pc, #472]	; (8001000 <EE_Init+0x348>)
 8000e28:	881b      	ldrh	r3, [r3, #0]
 8000e2a:	1dbc      	adds	r4, r7, #6
 8000e2c:	0019      	movs	r1, r3
 8000e2e:	0010      	movs	r0, r2
 8000e30:	f000 fa58 	bl	80012e4 <EE_VerifyPageFullWriteVariable>
 8000e34:	0003      	movs	r3, r0
 8000e36:	8023      	strh	r3, [r4, #0]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != FLASH_COMPLETE)
 8000e38:	1dbb      	adds	r3, r7, #6
 8000e3a:	881b      	ldrh	r3, [r3, #0]
 8000e3c:	2b04      	cmp	r3, #4
 8000e3e:	d002      	beq.n	8000e46 <EE_Init+0x18e>
              {
                return EepromStatus;
 8000e40:	1dbb      	adds	r3, r7, #6
 8000e42:	881b      	ldrh	r3, [r3, #0]
 8000e44:	e120      	b.n	8001088 <EE_Init+0x3d0>

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000e46:	230e      	movs	r3, #14
 8000e48:	18fb      	adds	r3, r7, r3
 8000e4a:	881a      	ldrh	r2, [r3, #0]
 8000e4c:	230e      	movs	r3, #14
 8000e4e:	18fb      	adds	r3, r7, r3
 8000e50:	3201      	adds	r2, #1
 8000e52:	801a      	strh	r2, [r3, #0]
 8000e54:	230e      	movs	r3, #14
 8000e56:	18fb      	adds	r3, r7, r3
 8000e58:	881b      	ldrh	r3, [r3, #0]
 8000e5a:	2b24      	cmp	r3, #36	; 0x24
 8000e5c:	d9b1      	bls.n	8000dc2 <EE_Init+0x10a>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 8000e5e:	4b62      	ldr	r3, [pc, #392]	; (8000fe8 <EE_Init+0x330>)
 8000e60:	2100      	movs	r1, #0
 8000e62:	0018      	movs	r0, r3
 8000e64:	f005 fc32 	bl	80066cc <FLASH_ProgramHalfWord>
 8000e68:	0003      	movs	r3, r0
 8000e6a:	001a      	movs	r2, r3
 8000e6c:	1cbb      	adds	r3, r7, #2
 8000e6e:	801a      	strh	r2, [r3, #0]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000e70:	1cbb      	adds	r3, r7, #2
 8000e72:	881b      	ldrh	r3, [r3, #0]
 8000e74:	2b04      	cmp	r3, #4
 8000e76:	d002      	beq.n	8000e7e <EE_Init+0x1c6>
        {
          return FlashStatus;
 8000e78:	1cbb      	adds	r3, r7, #2
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	e104      	b.n	8001088 <EE_Init+0x3d0>
        }
        /* Erase Page1 */
        FlashStatus = FLASH_ErasePage(PAGE1_BASE_ADDRESS);
 8000e7e:	4b5b      	ldr	r3, [pc, #364]	; (8000fec <EE_Init+0x334>)
 8000e80:	0018      	movs	r0, r3
 8000e82:	f005 fbe5 	bl	8006650 <FLASH_ErasePage>
 8000e86:	0003      	movs	r3, r0
 8000e88:	001a      	movs	r2, r3
 8000e8a:	1cbb      	adds	r3, r7, #2
 8000e8c:	801a      	strh	r2, [r3, #0]
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000e8e:	1cbb      	adds	r3, r7, #2
 8000e90:	881b      	ldrh	r3, [r3, #0]
 8000e92:	2b04      	cmp	r3, #4
 8000e94:	d100      	bne.n	8000e98 <EE_Init+0x1e0>
 8000e96:	e0f1      	b.n	800107c <EE_Init+0x3c4>
        {
          return FlashStatus;
 8000e98:	1cbb      	adds	r3, r7, #2
 8000e9a:	881b      	ldrh	r3, [r3, #0]
 8000e9c:	e0f4      	b.n	8001088 <EE_Init+0x3d0>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 8000e9e:	2308      	movs	r3, #8
 8000ea0:	18fb      	adds	r3, r7, r3
 8000ea2:	881b      	ldrh	r3, [r3, #0]
 8000ea4:	4a53      	ldr	r2, [pc, #332]	; (8000ff4 <EE_Init+0x33c>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d11f      	bne.n	8000eea <EE_Init+0x232>
      {
        /* Erase Page1 */
        FlashStatus = FLASH_ErasePage(PAGE1_BASE_ADDRESS);
 8000eaa:	4b50      	ldr	r3, [pc, #320]	; (8000fec <EE_Init+0x334>)
 8000eac:	0018      	movs	r0, r3
 8000eae:	f005 fbcf 	bl	8006650 <FLASH_ErasePage>
 8000eb2:	0003      	movs	r3, r0
 8000eb4:	001a      	movs	r2, r3
 8000eb6:	1cbb      	adds	r3, r7, #2
 8000eb8:	801a      	strh	r2, [r3, #0]
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000eba:	1cbb      	adds	r3, r7, #2
 8000ebc:	881b      	ldrh	r3, [r3, #0]
 8000ebe:	2b04      	cmp	r3, #4
 8000ec0:	d002      	beq.n	8000ec8 <EE_Init+0x210>
        {
          return FlashStatus;
 8000ec2:	1cbb      	adds	r3, r7, #2
 8000ec4:	881b      	ldrh	r3, [r3, #0]
 8000ec6:	e0df      	b.n	8001088 <EE_Init+0x3d0>
        }
        /* Mark Page0 as valid */
        FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 8000ec8:	4b47      	ldr	r3, [pc, #284]	; (8000fe8 <EE_Init+0x330>)
 8000eca:	2100      	movs	r1, #0
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f005 fbfd 	bl	80066cc <FLASH_ProgramHalfWord>
 8000ed2:	0003      	movs	r3, r0
 8000ed4:	001a      	movs	r2, r3
 8000ed6:	1cbb      	adds	r3, r7, #2
 8000ed8:	801a      	strh	r2, [r3, #0]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000eda:	1cbb      	adds	r3, r7, #2
 8000edc:	881b      	ldrh	r3, [r3, #0]
 8000ede:	2b04      	cmp	r3, #4
 8000ee0:	d100      	bne.n	8000ee4 <EE_Init+0x22c>
 8000ee2:	e0cb      	b.n	800107c <EE_Init+0x3c4>
        {
          return FlashStatus;
 8000ee4:	1cbb      	adds	r3, r7, #2
 8000ee6:	881b      	ldrh	r3, [r3, #0]
 8000ee8:	e0ce      	b.n	8001088 <EE_Init+0x3d0>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8000eea:	f000 f96d 	bl	80011c8 <EE_Format>
 8000eee:	0003      	movs	r3, r0
 8000ef0:	001a      	movs	r2, r3
 8000ef2:	1cbb      	adds	r3, r7, #2
 8000ef4:	801a      	strh	r2, [r3, #0]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000ef6:	1cbb      	adds	r3, r7, #2
 8000ef8:	881b      	ldrh	r3, [r3, #0]
 8000efa:	2b04      	cmp	r3, #4
 8000efc:	d100      	bne.n	8000f00 <EE_Init+0x248>
 8000efe:	e0bd      	b.n	800107c <EE_Init+0x3c4>
        {
          return FlashStatus;
 8000f00:	1cbb      	adds	r3, r7, #2
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	e0c0      	b.n	8001088 <EE_Init+0x3d0>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 8000f06:	2308      	movs	r3, #8
 8000f08:	18fb      	adds	r3, r7, r3
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d10d      	bne.n	8000f2c <EE_Init+0x274>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8000f10:	f000 f95a 	bl	80011c8 <EE_Format>
 8000f14:	0003      	movs	r3, r0
 8000f16:	001a      	movs	r2, r3
 8000f18:	1cbb      	adds	r3, r7, #2
 8000f1a:	801a      	strh	r2, [r3, #0]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000f1c:	1cbb      	adds	r3, r7, #2
 8000f1e:	881b      	ldrh	r3, [r3, #0]
 8000f20:	2b04      	cmp	r3, #4
 8000f22:	d100      	bne.n	8000f26 <EE_Init+0x26e>
 8000f24:	e0ac      	b.n	8001080 <EE_Init+0x3c8>
        {
          return FlashStatus;
 8000f26:	1cbb      	adds	r3, r7, #2
 8000f28:	881b      	ldrh	r3, [r3, #0]
 8000f2a:	e0ad      	b.n	8001088 <EE_Init+0x3d0>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 8000f2c:	2308      	movs	r3, #8
 8000f2e:	18fb      	adds	r3, r7, r3
 8000f30:	881b      	ldrh	r3, [r3, #0]
 8000f32:	4a30      	ldr	r2, [pc, #192]	; (8000ff4 <EE_Init+0x33c>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d10f      	bne.n	8000f58 <EE_Init+0x2a0>
      {
        /* Erase Page1 */
        FlashStatus = FLASH_ErasePage(PAGE1_BASE_ADDRESS);
 8000f38:	4b2c      	ldr	r3, [pc, #176]	; (8000fec <EE_Init+0x334>)
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f005 fb88 	bl	8006650 <FLASH_ErasePage>
 8000f40:	0003      	movs	r3, r0
 8000f42:	001a      	movs	r2, r3
 8000f44:	1cbb      	adds	r3, r7, #2
 8000f46:	801a      	strh	r2, [r3, #0]
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000f48:	1cbb      	adds	r3, r7, #2
 8000f4a:	881b      	ldrh	r3, [r3, #0]
 8000f4c:	2b04      	cmp	r3, #4
 8000f4e:	d100      	bne.n	8000f52 <EE_Init+0x29a>
 8000f50:	e096      	b.n	8001080 <EE_Init+0x3c8>
        {
          return FlashStatus;
 8000f52:	1cbb      	adds	r3, r7, #2
 8000f54:	881b      	ldrh	r3, [r3, #0]
 8000f56:	e097      	b.n	8001088 <EE_Init+0x3d0>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000f58:	230e      	movs	r3, #14
 8000f5a:	18fb      	adds	r3, r7, r3
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	801a      	strh	r2, [r3, #0]
 8000f60:	e059      	b.n	8001016 <EE_Init+0x35e>
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8000f62:	4b28      	ldr	r3, [pc, #160]	; (8001004 <EE_Init+0x34c>)
 8000f64:	881b      	ldrh	r3, [r3, #0]
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	230e      	movs	r3, #14
 8000f6a:	18fb      	adds	r3, r7, r3
 8000f6c:	8819      	ldrh	r1, [r3, #0]
 8000f6e:	4b23      	ldr	r3, [pc, #140]	; (8000ffc <EE_Init+0x344>)
 8000f70:	0049      	lsls	r1, r1, #1
 8000f72:	5acb      	ldrh	r3, [r1, r3]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d105      	bne.n	8000f84 <EE_Init+0x2cc>
          {
            x = VarIdx;
 8000f78:	230c      	movs	r3, #12
 8000f7a:	18fb      	adds	r3, r7, r3
 8000f7c:	220e      	movs	r2, #14
 8000f7e:	18ba      	adds	r2, r7, r2
 8000f80:	8812      	ldrh	r2, [r2, #0]
 8000f82:	801a      	strh	r2, [r3, #0]
          }
          if (VarIdx != x)
 8000f84:	230e      	movs	r3, #14
 8000f86:	18fb      	adds	r3, r7, r3
 8000f88:	881a      	ldrh	r2, [r3, #0]
 8000f8a:	230c      	movs	r3, #12
 8000f8c:	18fb      	adds	r3, r7, r3
 8000f8e:	2100      	movs	r1, #0
 8000f90:	5e5b      	ldrsh	r3, [r3, r1]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d038      	beq.n	8001008 <EE_Init+0x350>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8000f96:	230e      	movs	r3, #14
 8000f98:	18fb      	adds	r3, r7, r3
 8000f9a:	881a      	ldrh	r2, [r3, #0]
 8000f9c:	4b17      	ldr	r3, [pc, #92]	; (8000ffc <EE_Init+0x344>)
 8000f9e:	0052      	lsls	r2, r2, #1
 8000fa0:	5ad3      	ldrh	r3, [r2, r3]
 8000fa2:	1d3c      	adds	r4, r7, #4
 8000fa4:	4a16      	ldr	r2, [pc, #88]	; (8001000 <EE_Init+0x348>)
 8000fa6:	0011      	movs	r1, r2
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f000 f875 	bl	8001098 <EE_ReadVariable>
 8000fae:	0003      	movs	r3, r0
 8000fb0:	8023      	strh	r3, [r4, #0]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d026      	beq.n	8001008 <EE_Init+0x350>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8000fba:	230e      	movs	r3, #14
 8000fbc:	18fb      	adds	r3, r7, r3
 8000fbe:	881a      	ldrh	r2, [r3, #0]
 8000fc0:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <EE_Init+0x344>)
 8000fc2:	0052      	lsls	r2, r2, #1
 8000fc4:	5ad2      	ldrh	r2, [r2, r3]
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <EE_Init+0x348>)
 8000fc8:	881b      	ldrh	r3, [r3, #0]
 8000fca:	1dbc      	adds	r4, r7, #6
 8000fcc:	0019      	movs	r1, r3
 8000fce:	0010      	movs	r0, r2
 8000fd0:	f000 f988 	bl	80012e4 <EE_VerifyPageFullWriteVariable>
 8000fd4:	0003      	movs	r3, r0
 8000fd6:	8023      	strh	r3, [r4, #0]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != FLASH_COMPLETE)
 8000fd8:	1dbb      	adds	r3, r7, #6
 8000fda:	881b      	ldrh	r3, [r3, #0]
 8000fdc:	2b04      	cmp	r3, #4
 8000fde:	d013      	beq.n	8001008 <EE_Init+0x350>
              {
                return EepromStatus;
 8000fe0:	1dbb      	adds	r3, r7, #6
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	e050      	b.n	8001088 <EE_Init+0x3d0>
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	08007800 	.word	0x08007800
 8000fec:	08007c00 	.word	0x08007c00
 8000ff0:	0000eeee 	.word	0x0000eeee
 8000ff4:	0000ffff 	.word	0x0000ffff
 8000ff8:	08007806 	.word	0x08007806
 8000ffc:	2000047c 	.word	0x2000047c
 8001000:	20000146 	.word	0x20000146
 8001004:	08007c06 	.word	0x08007c06
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001008:	230e      	movs	r3, #14
 800100a:	18fb      	adds	r3, r7, r3
 800100c:	881a      	ldrh	r2, [r3, #0]
 800100e:	230e      	movs	r3, #14
 8001010:	18fb      	adds	r3, r7, r3
 8001012:	3201      	adds	r2, #1
 8001014:	801a      	strh	r2, [r3, #0]
 8001016:	230e      	movs	r3, #14
 8001018:	18fb      	adds	r3, r7, r3
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	2b24      	cmp	r3, #36	; 0x24
 800101e:	d9a0      	bls.n	8000f62 <EE_Init+0x2aa>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = FLASH_ProgramHalfWord(PAGE1_BASE_ADDRESS, VALID_PAGE);
 8001020:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <EE_Init+0x3d8>)
 8001022:	2100      	movs	r1, #0
 8001024:	0018      	movs	r0, r3
 8001026:	f005 fb51 	bl	80066cc <FLASH_ProgramHalfWord>
 800102a:	0003      	movs	r3, r0
 800102c:	001a      	movs	r2, r3
 800102e:	1cbb      	adds	r3, r7, #2
 8001030:	801a      	strh	r2, [r3, #0]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8001032:	1cbb      	adds	r3, r7, #2
 8001034:	881b      	ldrh	r3, [r3, #0]
 8001036:	2b04      	cmp	r3, #4
 8001038:	d002      	beq.n	8001040 <EE_Init+0x388>
        {
          return FlashStatus;
 800103a:	1cbb      	adds	r3, r7, #2
 800103c:	881b      	ldrh	r3, [r3, #0]
 800103e:	e023      	b.n	8001088 <EE_Init+0x3d0>
        }
        /* Erase Page0 */
        FlashStatus = FLASH_ErasePage(PAGE0_BASE_ADDRESS);
 8001040:	4b14      	ldr	r3, [pc, #80]	; (8001094 <EE_Init+0x3dc>)
 8001042:	0018      	movs	r0, r3
 8001044:	f005 fb04 	bl	8006650 <FLASH_ErasePage>
 8001048:	0003      	movs	r3, r0
 800104a:	001a      	movs	r2, r3
 800104c:	1cbb      	adds	r3, r7, #2
 800104e:	801a      	strh	r2, [r3, #0]
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8001050:	1cbb      	adds	r3, r7, #2
 8001052:	881b      	ldrh	r3, [r3, #0]
 8001054:	2b04      	cmp	r3, #4
 8001056:	d013      	beq.n	8001080 <EE_Init+0x3c8>
        {
          return FlashStatus;
 8001058:	1cbb      	adds	r3, r7, #2
 800105a:	881b      	ldrh	r3, [r3, #0]
 800105c:	e014      	b.n	8001088 <EE_Init+0x3d0>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 800105e:	f000 f8b3 	bl	80011c8 <EE_Format>
 8001062:	0003      	movs	r3, r0
 8001064:	001a      	movs	r2, r3
 8001066:	1cbb      	adds	r3, r7, #2
 8001068:	801a      	strh	r2, [r3, #0]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != FLASH_COMPLETE)
 800106a:	1cbb      	adds	r3, r7, #2
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	2b04      	cmp	r3, #4
 8001070:	d008      	beq.n	8001084 <EE_Init+0x3cc>
      {
        return FlashStatus;
 8001072:	1cbb      	adds	r3, r7, #2
 8001074:	881b      	ldrh	r3, [r3, #0]
 8001076:	e007      	b.n	8001088 <EE_Init+0x3d0>
        if (FlashStatus != FLASH_COMPLETE)
        {
          return FlashStatus;
        }
      }
      break;
 8001078:	46c0      	nop			; (mov r8, r8)
 800107a:	e004      	b.n	8001086 <EE_Init+0x3ce>
        if (FlashStatus != FLASH_COMPLETE)
        {
          return FlashStatus;
        }
      }
      break;
 800107c:	46c0      	nop			; (mov r8, r8)
 800107e:	e002      	b.n	8001086 <EE_Init+0x3ce>
        if (FlashStatus != FLASH_COMPLETE)
        {
          return FlashStatus;
        }
      }
      break;
 8001080:	46c0      	nop			; (mov r8, r8)
 8001082:	e000      	b.n	8001086 <EE_Init+0x3ce>
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != FLASH_COMPLETE)
      {
        return FlashStatus;
      }
      break;
 8001084:	46c0      	nop			; (mov r8, r8)
  }

  return FLASH_COMPLETE;
 8001086:	2304      	movs	r3, #4
}
 8001088:	0018      	movs	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	b005      	add	sp, #20
 800108e:	bd90      	pop	{r4, r7, pc}
 8001090:	08007c00 	.word	0x08007c00
 8001094:	08007800 	.word	0x08007800

08001098 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8001098:	b590      	push	{r4, r7, lr}
 800109a:	b087      	sub	sp, #28
 800109c:	af00      	add	r7, sp, #0
 800109e:	0002      	movs	r2, r0
 80010a0:	6039      	str	r1, [r7, #0]
 80010a2:	1dbb      	adds	r3, r7, #6
 80010a4:	801a      	strh	r2, [r3, #0]
  uint16_t ValidPage = PAGE0;
 80010a6:	230e      	movs	r3, #14
 80010a8:	18fb      	adds	r3, r7, r3
 80010aa:	2200      	movs	r2, #0
 80010ac:	801a      	strh	r2, [r3, #0]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 80010ae:	230c      	movs	r3, #12
 80010b0:	18fb      	adds	r3, r7, r3
 80010b2:	4a28      	ldr	r2, [pc, #160]	; (8001154 <EE_ReadVariable+0xbc>)
 80010b4:	801a      	strh	r2, [r3, #0]
 80010b6:	2316      	movs	r3, #22
 80010b8:	18fb      	adds	r3, r7, r3
 80010ba:	2201      	movs	r2, #1
 80010bc:	801a      	strh	r2, [r3, #0]
  uint32_t Address = 0x08010000, PageStartAddress = 0x08010000;
 80010be:	4b26      	ldr	r3, [pc, #152]	; (8001158 <EE_ReadVariable+0xc0>)
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b25      	ldr	r3, [pc, #148]	; (8001158 <EE_ReadVariable+0xc0>)
 80010c4:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 80010c6:	230e      	movs	r3, #14
 80010c8:	18fc      	adds	r4, r7, r3
 80010ca:	2000      	movs	r0, #0
 80010cc:	f000 f8b0 	bl	8001230 <EE_FindValidPage>
 80010d0:	0003      	movs	r3, r0
 80010d2:	8023      	strh	r3, [r4, #0]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 80010d4:	230e      	movs	r3, #14
 80010d6:	18fb      	adds	r3, r7, r3
 80010d8:	881b      	ldrh	r3, [r3, #0]
 80010da:	2bab      	cmp	r3, #171	; 0xab
 80010dc:	d101      	bne.n	80010e2 <EE_ReadVariable+0x4a>
  {
    return  NO_VALID_PAGE;
 80010de:	23ab      	movs	r3, #171	; 0xab
 80010e0:	e033      	b.n	800114a <EE_ReadVariable+0xb2>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 80010e2:	230e      	movs	r3, #14
 80010e4:	18fb      	adds	r3, r7, r3
 80010e6:	881b      	ldrh	r3, [r3, #0]
 80010e8:	4a1c      	ldr	r2, [pc, #112]	; (800115c <EE_ReadVariable+0xc4>)
 80010ea:	4694      	mov	ip, r2
 80010ec:	4463      	add	r3, ip
 80010ee:	029b      	lsls	r3, r3, #10
 80010f0:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 80010f2:	230e      	movs	r3, #14
 80010f4:	18fb      	adds	r3, r7, r3
 80010f6:	881b      	ldrh	r3, [r3, #0]
 80010f8:	3301      	adds	r3, #1
 80010fa:	029b      	lsls	r3, r3, #10
 80010fc:	4a18      	ldr	r2, [pc, #96]	; (8001160 <EE_ReadVariable+0xc8>)
 80010fe:	4694      	mov	ip, r2
 8001100:	4463      	add	r3, ip
 8001102:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 8001104:	e019      	b.n	800113a <EE_ReadVariable+0xa2>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	230c      	movs	r3, #12
 800110a:	18fb      	adds	r3, r7, r3
 800110c:	8812      	ldrh	r2, [r2, #0]
 800110e:	801a      	strh	r2, [r3, #0]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 8001110:	230c      	movs	r3, #12
 8001112:	18fa      	adds	r2, r7, r3
 8001114:	1dbb      	adds	r3, r7, #6
 8001116:	8812      	ldrh	r2, [r2, #0]
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	429a      	cmp	r2, r3
 800111c:	d10a      	bne.n	8001134 <EE_ReadVariable+0x9c>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	3b02      	subs	r3, #2
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	b29a      	uxth	r2, r3
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 800112a:	2316      	movs	r3, #22
 800112c:	18fb      	adds	r3, r7, r3
 800112e:	2200      	movs	r2, #0
 8001130:	801a      	strh	r2, [r3, #0]

      break;
 8001132:	e007      	b.n	8001144 <EE_ReadVariable+0xac>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	3b04      	subs	r3, #4
 8001138:	613b      	str	r3, [r7, #16]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	1c9a      	adds	r2, r3, #2
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	429a      	cmp	r2, r3
 8001142:	d3e0      	bcc.n	8001106 <EE_ReadVariable+0x6e>
      Address = Address - 4;
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8001144:	2316      	movs	r3, #22
 8001146:	18fb      	adds	r3, r7, r3
 8001148:	881b      	ldrh	r3, [r3, #0]
}
 800114a:	0018      	movs	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	b007      	add	sp, #28
 8001150:	bd90      	pop	{r4, r7, pc}
 8001152:	46c0      	nop			; (mov r8, r8)
 8001154:	00005555 	.word	0x00005555
 8001158:	08010000 	.word	0x08010000
 800115c:	0002001e 	.word	0x0002001e
 8001160:	080077fe 	.word	0x080077fe

08001164 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001164:	b590      	push	{r4, r7, lr}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	0002      	movs	r2, r0
 800116c:	1dbb      	adds	r3, r7, #6
 800116e:	801a      	strh	r2, [r3, #0]
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	1c0a      	adds	r2, r1, #0
 8001174:	801a      	strh	r2, [r3, #0]
  uint16_t Status = 0;
 8001176:	230e      	movs	r3, #14
 8001178:	18fb      	adds	r3, r7, r3
 800117a:	2200      	movs	r2, #0
 800117c:	801a      	strh	r2, [r3, #0]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800117e:	230e      	movs	r3, #14
 8001180:	18fc      	adds	r4, r7, r3
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	881a      	ldrh	r2, [r3, #0]
 8001186:	1dbb      	adds	r3, r7, #6
 8001188:	881b      	ldrh	r3, [r3, #0]
 800118a:	0011      	movs	r1, r2
 800118c:	0018      	movs	r0, r3
 800118e:	f000 f8a9 	bl	80012e4 <EE_VerifyPageFullWriteVariable>
 8001192:	0003      	movs	r3, r0
 8001194:	8023      	strh	r3, [r4, #0]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 8001196:	230e      	movs	r3, #14
 8001198:	18fb      	adds	r3, r7, r3
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	2b80      	cmp	r3, #128	; 0x80
 800119e:	d10b      	bne.n	80011b8 <EE_WriteVariable+0x54>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 80011a0:	230e      	movs	r3, #14
 80011a2:	18fc      	adds	r4, r7, r3
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	881a      	ldrh	r2, [r3, #0]
 80011a8:	1dbb      	adds	r3, r7, #6
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	0011      	movs	r1, r2
 80011ae:	0018      	movs	r0, r3
 80011b0:	f000 f90c 	bl	80013cc <EE_PageTransfer>
 80011b4:	0003      	movs	r3, r0
 80011b6:	8023      	strh	r3, [r4, #0]
  }

  /* Return last operation status */
  return Status;
 80011b8:	230e      	movs	r3, #14
 80011ba:	18fb      	adds	r3, r7, r3
 80011bc:	881b      	ldrh	r3, [r3, #0]
}
 80011be:	0018      	movs	r0, r3
 80011c0:	46bd      	mov	sp, r7
 80011c2:	b005      	add	sp, #20
 80011c4:	bd90      	pop	{r4, r7, pc}
 80011c6:	46c0      	nop			; (mov r8, r8)

080011c8 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static FLASH_Status EE_Format(void)
{
 80011c8:	b590      	push	{r4, r7, lr}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
  FLASH_Status FlashStatus = FLASH_COMPLETE;
 80011ce:	1dfb      	adds	r3, r7, #7
 80011d0:	2204      	movs	r2, #4
 80011d2:	701a      	strb	r2, [r3, #0]

  /* Erase Page0 */
  FlashStatus = FLASH_ErasePage(PAGE0_BASE_ADDRESS);
 80011d4:	1dfc      	adds	r4, r7, #7
 80011d6:	4b14      	ldr	r3, [pc, #80]	; (8001228 <EE_Format+0x60>)
 80011d8:	0018      	movs	r0, r3
 80011da:	f005 fa39 	bl	8006650 <FLASH_ErasePage>
 80011de:	0003      	movs	r3, r0
 80011e0:	7023      	strb	r3, [r4, #0]

  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 80011e2:	1dfb      	adds	r3, r7, #7
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b04      	cmp	r3, #4
 80011e8:	d002      	beq.n	80011f0 <EE_Format+0x28>
  {
    return FlashStatus;
 80011ea:	1dfb      	adds	r3, r7, #7
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	e017      	b.n	8001220 <EE_Format+0x58>
  }

  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 80011f0:	1dfc      	adds	r4, r7, #7
 80011f2:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <EE_Format+0x60>)
 80011f4:	2100      	movs	r1, #0
 80011f6:	0018      	movs	r0, r3
 80011f8:	f005 fa68 	bl	80066cc <FLASH_ProgramHalfWord>
 80011fc:	0003      	movs	r3, r0
 80011fe:	7023      	strb	r3, [r4, #0]

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 8001200:	1dfb      	adds	r3, r7, #7
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b04      	cmp	r3, #4
 8001206:	d002      	beq.n	800120e <EE_Format+0x46>
  {
    return FlashStatus;
 8001208:	1dfb      	adds	r3, r7, #7
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	e008      	b.n	8001220 <EE_Format+0x58>
  }

  /* Erase Page1 */
  FlashStatus = FLASH_ErasePage(PAGE1_BASE_ADDRESS);
 800120e:	1dfc      	adds	r4, r7, #7
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <EE_Format+0x64>)
 8001212:	0018      	movs	r0, r3
 8001214:	f005 fa1c 	bl	8006650 <FLASH_ErasePage>
 8001218:	0003      	movs	r3, r0
 800121a:	7023      	strb	r3, [r4, #0]

  /* Return Page1 erase operation status */
  return FlashStatus;
 800121c:	1dfb      	adds	r3, r7, #7
 800121e:	781b      	ldrb	r3, [r3, #0]
}
 8001220:	0018      	movs	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	b003      	add	sp, #12
 8001226:	bd90      	pop	{r4, r7, pc}
 8001228:	08007800 	.word	0x08007800
 800122c:	08007c00 	.word	0x08007c00

08001230 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE0 or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	0002      	movs	r2, r0
 8001238:	1dfb      	adds	r3, r7, #7
 800123a:	701a      	strb	r2, [r3, #0]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 800123c:	230e      	movs	r3, #14
 800123e:	18fb      	adds	r3, r7, r3
 8001240:	2206      	movs	r2, #6
 8001242:	801a      	strh	r2, [r3, #0]
 8001244:	230c      	movs	r3, #12
 8001246:	18fb      	adds	r3, r7, r3
 8001248:	2206      	movs	r2, #6
 800124a:	801a      	strh	r2, [r3, #0]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800124c:	4a22      	ldr	r2, [pc, #136]	; (80012d8 <EE_FindValidPage+0xa8>)
 800124e:	230e      	movs	r3, #14
 8001250:	18fb      	adds	r3, r7, r3
 8001252:	8812      	ldrh	r2, [r2, #0]
 8001254:	801a      	strh	r2, [r3, #0]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8001256:	4a21      	ldr	r2, [pc, #132]	; (80012dc <EE_FindValidPage+0xac>)
 8001258:	230c      	movs	r3, #12
 800125a:	18fb      	adds	r3, r7, r3
 800125c:	8812      	ldrh	r2, [r2, #0]
 800125e:	801a      	strh	r2, [r3, #0]

  /* Write or read operation */
  switch (Operation)
 8001260:	1dfb      	adds	r3, r7, #7
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d021      	beq.n	80012ac <EE_FindValidPage+0x7c>
 8001268:	2b01      	cmp	r3, #1
 800126a:	d12f      	bne.n	80012cc <EE_FindValidPage+0x9c>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 800126c:	230c      	movs	r3, #12
 800126e:	18fb      	adds	r3, r7, r3
 8001270:	881b      	ldrh	r3, [r3, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d109      	bne.n	800128a <EE_FindValidPage+0x5a>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8001276:	230e      	movs	r3, #14
 8001278:	18fb      	adds	r3, r7, r3
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	4a18      	ldr	r2, [pc, #96]	; (80012e0 <EE_FindValidPage+0xb0>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d101      	bne.n	8001286 <EE_FindValidPage+0x56>
        {
          return PAGE0;         /* Page0 valid */
 8001282:	2300      	movs	r3, #0
 8001284:	e023      	b.n	80012ce <EE_FindValidPage+0x9e>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8001286:	2301      	movs	r3, #1
 8001288:	e021      	b.n	80012ce <EE_FindValidPage+0x9e>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 800128a:	230e      	movs	r3, #14
 800128c:	18fb      	adds	r3, r7, r3
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d109      	bne.n	80012a8 <EE_FindValidPage+0x78>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8001294:	230c      	movs	r3, #12
 8001296:	18fb      	adds	r3, r7, r3
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	4a11      	ldr	r2, [pc, #68]	; (80012e0 <EE_FindValidPage+0xb0>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d101      	bne.n	80012a4 <EE_FindValidPage+0x74>
        {
          return PAGE1;         /* Page1 valid */
 80012a0:	2301      	movs	r3, #1
 80012a2:	e014      	b.n	80012ce <EE_FindValidPage+0x9e>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 80012a4:	2300      	movs	r3, #0
 80012a6:	e012      	b.n	80012ce <EE_FindValidPage+0x9e>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 80012a8:	23ab      	movs	r3, #171	; 0xab
 80012aa:	e010      	b.n	80012ce <EE_FindValidPage+0x9e>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 80012ac:	230e      	movs	r3, #14
 80012ae:	18fb      	adds	r3, r7, r3
 80012b0:	881b      	ldrh	r3, [r3, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <EE_FindValidPage+0x8a>
      {
        return PAGE0;           /* Page0 valid */
 80012b6:	2300      	movs	r3, #0
 80012b8:	e009      	b.n	80012ce <EE_FindValidPage+0x9e>
      }
      else if (PageStatus1 == VALID_PAGE)
 80012ba:	230c      	movs	r3, #12
 80012bc:	18fb      	adds	r3, r7, r3
 80012be:	881b      	ldrh	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d101      	bne.n	80012c8 <EE_FindValidPage+0x98>
      {
        return PAGE1;           /* Page1 valid */
 80012c4:	2301      	movs	r3, #1
 80012c6:	e002      	b.n	80012ce <EE_FindValidPage+0x9e>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 80012c8:	23ab      	movs	r3, #171	; 0xab
 80012ca:	e000      	b.n	80012ce <EE_FindValidPage+0x9e>
      }

    default:
      return PAGE0;             /* Page0 valid */
 80012cc:	2300      	movs	r3, #0
  }
}
 80012ce:	0018      	movs	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	b004      	add	sp, #16
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	08007800 	.word	0x08007800
 80012dc:	08007c00 	.word	0x08007c00
 80012e0:	0000eeee 	.word	0x0000eeee

080012e4 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 80012e4:	b590      	push	{r4, r7, lr}
 80012e6:	b087      	sub	sp, #28
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	0002      	movs	r2, r0
 80012ec:	1dbb      	adds	r3, r7, #6
 80012ee:	801a      	strh	r2, [r3, #0]
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	1c0a      	adds	r2, r1, #0
 80012f4:	801a      	strh	r2, [r3, #0]
  FLASH_Status FlashStatus = FLASH_COMPLETE;
 80012f6:	2313      	movs	r3, #19
 80012f8:	18fb      	adds	r3, r7, r3
 80012fa:	2204      	movs	r2, #4
 80012fc:	701a      	strb	r2, [r3, #0]
  uint16_t ValidPage = PAGE0;
 80012fe:	2310      	movs	r3, #16
 8001300:	18fb      	adds	r3, r7, r3
 8001302:	2200      	movs	r2, #0
 8001304:	801a      	strh	r2, [r3, #0]
  uint32_t Address = 0x08010000, PageEndAddress = 0x080107FF;
 8001306:	4b2d      	ldr	r3, [pc, #180]	; (80013bc <EE_VerifyPageFullWriteVariable+0xd8>)
 8001308:	617b      	str	r3, [r7, #20]
 800130a:	4b2d      	ldr	r3, [pc, #180]	; (80013c0 <EE_VerifyPageFullWriteVariable+0xdc>)
 800130c:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 800130e:	2310      	movs	r3, #16
 8001310:	18fc      	adds	r4, r7, r3
 8001312:	2001      	movs	r0, #1
 8001314:	f7ff ff8c 	bl	8001230 <EE_FindValidPage>
 8001318:	0003      	movs	r3, r0
 800131a:	8023      	strh	r3, [r4, #0]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 800131c:	2310      	movs	r3, #16
 800131e:	18fb      	adds	r3, r7, r3
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	2bab      	cmp	r3, #171	; 0xab
 8001324:	d101      	bne.n	800132a <EE_VerifyPageFullWriteVariable+0x46>
  {
    return  NO_VALID_PAGE;
 8001326:	23ab      	movs	r3, #171	; 0xab
 8001328:	e043      	b.n	80013b2 <EE_VerifyPageFullWriteVariable+0xce>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800132a:	2310      	movs	r3, #16
 800132c:	18fb      	adds	r3, r7, r3
 800132e:	881b      	ldrh	r3, [r3, #0]
 8001330:	4a24      	ldr	r2, [pc, #144]	; (80013c4 <EE_VerifyPageFullWriteVariable+0xe0>)
 8001332:	4694      	mov	ip, r2
 8001334:	4463      	add	r3, ip
 8001336:	029b      	lsls	r3, r3, #10
 8001338:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 800133a:	2310      	movs	r3, #16
 800133c:	18fb      	adds	r3, r7, r3
 800133e:	881b      	ldrh	r3, [r3, #0]
 8001340:	3301      	adds	r3, #1
 8001342:	029b      	lsls	r3, r3, #10
 8001344:	4a20      	ldr	r2, [pc, #128]	; (80013c8 <EE_VerifyPageFullWriteVariable+0xe4>)
 8001346:	4694      	mov	ip, r2
 8001348:	4463      	add	r3, ip
 800134a:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 800134c:	e02c      	b.n	80013a8 <EE_VerifyPageFullWriteVariable+0xc4>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	3301      	adds	r3, #1
 8001354:	d125      	bne.n	80013a2 <EE_VerifyPageFullWriteVariable+0xbe>
    {
      /* Set variable data */
      FlashStatus = FLASH_ProgramHalfWord(Address, Data);
 8001356:	2313      	movs	r3, #19
 8001358:	18fc      	adds	r4, r7, r3
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	881a      	ldrh	r2, [r3, #0]
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	0011      	movs	r1, r2
 8001362:	0018      	movs	r0, r3
 8001364:	f005 f9b2 	bl	80066cc <FLASH_ProgramHalfWord>
 8001368:	0003      	movs	r3, r0
 800136a:	7023      	strb	r3, [r4, #0]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != FLASH_COMPLETE)
 800136c:	2313      	movs	r3, #19
 800136e:	18fb      	adds	r3, r7, r3
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b04      	cmp	r3, #4
 8001374:	d004      	beq.n	8001380 <EE_VerifyPageFullWriteVariable+0x9c>
      {
        return FlashStatus;
 8001376:	2313      	movs	r3, #19
 8001378:	18fb      	adds	r3, r7, r3
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	b29b      	uxth	r3, r3
 800137e:	e018      	b.n	80013b2 <EE_VerifyPageFullWriteVariable+0xce>
      }
      /* Set variable virtual address */
      FlashStatus = FLASH_ProgramHalfWord(Address + 2, VirtAddress);
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	1c9a      	adds	r2, r3, #2
 8001384:	2313      	movs	r3, #19
 8001386:	18fc      	adds	r4, r7, r3
 8001388:	1dbb      	adds	r3, r7, #6
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	0019      	movs	r1, r3
 800138e:	0010      	movs	r0, r2
 8001390:	f005 f99c 	bl	80066cc <FLASH_ProgramHalfWord>
 8001394:	0003      	movs	r3, r0
 8001396:	7023      	strb	r3, [r4, #0]
      /* Return program operation status */
      return FlashStatus;
 8001398:	2313      	movs	r3, #19
 800139a:	18fb      	adds	r3, r7, r3
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	b29b      	uxth	r3, r3
 80013a0:	e007      	b.n	80013b2 <EE_VerifyPageFullWriteVariable+0xce>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	3304      	adds	r3, #4
 80013a6:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 80013a8:	697a      	ldr	r2, [r7, #20]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d3ce      	bcc.n	800134e <EE_VerifyPageFullWriteVariable+0x6a>
      Address = Address + 4;
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 80013b0:	2380      	movs	r3, #128	; 0x80
}
 80013b2:	0018      	movs	r0, r3
 80013b4:	46bd      	mov	sp, r7
 80013b6:	b007      	add	sp, #28
 80013b8:	bd90      	pop	{r4, r7, pc}
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	08010000 	.word	0x08010000
 80013c0:	080107ff 	.word	0x080107ff
 80013c4:	0002001e 	.word	0x0002001e
 80013c8:	080077fe 	.word	0x080077fe

080013cc <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 80013cc:	b590      	push	{r4, r7, lr}
 80013ce:	b089      	sub	sp, #36	; 0x24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	0002      	movs	r2, r0
 80013d4:	1dbb      	adds	r3, r7, #6
 80013d6:	801a      	strh	r2, [r3, #0]
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	1c0a      	adds	r2, r1, #0
 80013dc:	801a      	strh	r2, [r3, #0]
  FLASH_Status FlashStatus = FLASH_COMPLETE;
 80013de:	2315      	movs	r3, #21
 80013e0:	18fb      	adds	r3, r7, r3
 80013e2:	2204      	movs	r2, #4
 80013e4:	701a      	strb	r2, [r3, #0]
  uint32_t NewPageAddress = 0x080103FF, OldPageAddress = 0x08010000;
 80013e6:	4b67      	ldr	r3, [pc, #412]	; (8001584 <EE_PageTransfer+0x1b8>)
 80013e8:	61fb      	str	r3, [r7, #28]
 80013ea:	4b67      	ldr	r3, [pc, #412]	; (8001588 <EE_PageTransfer+0x1bc>)
 80013ec:	61bb      	str	r3, [r7, #24]
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 80013ee:	2312      	movs	r3, #18
 80013f0:	18fb      	adds	r3, r7, r3
 80013f2:	2200      	movs	r2, #0
 80013f4:	801a      	strh	r2, [r3, #0]
 80013f6:	2316      	movs	r3, #22
 80013f8:	18fb      	adds	r3, r7, r3
 80013fa:	2200      	movs	r2, #0
 80013fc:	801a      	strh	r2, [r3, #0]
  uint16_t EepromStatus = 0, ReadStatus = 0;
 80013fe:	2310      	movs	r3, #16
 8001400:	18fb      	adds	r3, r7, r3
 8001402:	2200      	movs	r2, #0
 8001404:	801a      	strh	r2, [r3, #0]
 8001406:	230e      	movs	r3, #14
 8001408:	18fb      	adds	r3, r7, r3
 800140a:	2200      	movs	r2, #0
 800140c:	801a      	strh	r2, [r3, #0]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800140e:	2312      	movs	r3, #18
 8001410:	18fc      	adds	r4, r7, r3
 8001412:	2000      	movs	r0, #0
 8001414:	f7ff ff0c 	bl	8001230 <EE_FindValidPage>
 8001418:	0003      	movs	r3, r0
 800141a:	8023      	strh	r3, [r4, #0]

  if (ValidPage == PAGE1)       /* Page1 valid */
 800141c:	2312      	movs	r3, #18
 800141e:	18fb      	adds	r3, r7, r3
 8001420:	881b      	ldrh	r3, [r3, #0]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d104      	bne.n	8001430 <EE_PageTransfer+0x64>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8001426:	4b59      	ldr	r3, [pc, #356]	; (800158c <EE_PageTransfer+0x1c0>)
 8001428:	61fb      	str	r3, [r7, #28]

    /* Old page address where variable will be taken from */
    OldPageAddress = PAGE1_BASE_ADDRESS;
 800142a:	4b59      	ldr	r3, [pc, #356]	; (8001590 <EE_PageTransfer+0x1c4>)
 800142c:	61bb      	str	r3, [r7, #24]
 800142e:	e00b      	b.n	8001448 <EE_PageTransfer+0x7c>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8001430:	2312      	movs	r3, #18
 8001432:	18fb      	adds	r3, r7, r3
 8001434:	881b      	ldrh	r3, [r3, #0]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d104      	bne.n	8001444 <EE_PageTransfer+0x78>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 800143a:	4b55      	ldr	r3, [pc, #340]	; (8001590 <EE_PageTransfer+0x1c4>)
 800143c:	61fb      	str	r3, [r7, #28]

    /* Old page address where variable will be taken from */
    OldPageAddress = PAGE0_BASE_ADDRESS;
 800143e:	4b53      	ldr	r3, [pc, #332]	; (800158c <EE_PageTransfer+0x1c0>)
 8001440:	61bb      	str	r3, [r7, #24]
 8001442:	e001      	b.n	8001448 <EE_PageTransfer+0x7c>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8001444:	23ab      	movs	r3, #171	; 0xab
 8001446:	e099      	b.n	800157c <EE_PageTransfer+0x1b0>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = FLASH_ProgramHalfWord(NewPageAddress, RECEIVE_DATA);
 8001448:	2315      	movs	r3, #21
 800144a:	18fc      	adds	r4, r7, r3
 800144c:	4a51      	ldr	r2, [pc, #324]	; (8001594 <EE_PageTransfer+0x1c8>)
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	0011      	movs	r1, r2
 8001452:	0018      	movs	r0, r3
 8001454:	f005 f93a 	bl	80066cc <FLASH_ProgramHalfWord>
 8001458:	0003      	movs	r3, r0
 800145a:	7023      	strb	r3, [r4, #0]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 800145c:	2315      	movs	r3, #21
 800145e:	18fb      	adds	r3, r7, r3
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b04      	cmp	r3, #4
 8001464:	d004      	beq.n	8001470 <EE_PageTransfer+0xa4>
  {
    return FlashStatus;
 8001466:	2315      	movs	r3, #21
 8001468:	18fb      	adds	r3, r7, r3
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	b29b      	uxth	r3, r3
 800146e:	e085      	b.n	800157c <EE_PageTransfer+0x1b0>
  }

  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8001470:	2310      	movs	r3, #16
 8001472:	18fc      	adds	r4, r7, r3
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	881a      	ldrh	r2, [r3, #0]
 8001478:	1dbb      	adds	r3, r7, #6
 800147a:	881b      	ldrh	r3, [r3, #0]
 800147c:	0011      	movs	r1, r2
 800147e:	0018      	movs	r0, r3
 8001480:	f7ff ff30 	bl	80012e4 <EE_VerifyPageFullWriteVariable>
 8001484:	0003      	movs	r3, r0
 8001486:	8023      	strh	r3, [r4, #0]
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != FLASH_COMPLETE)
 8001488:	2310      	movs	r3, #16
 800148a:	18fb      	adds	r3, r7, r3
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	2b04      	cmp	r3, #4
 8001490:	d003      	beq.n	800149a <EE_PageTransfer+0xce>
  {
    return EepromStatus;
 8001492:	2310      	movs	r3, #16
 8001494:	18fb      	adds	r3, r7, r3
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	e070      	b.n	800157c <EE_PageTransfer+0x1b0>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800149a:	2316      	movs	r3, #22
 800149c:	18fb      	adds	r3, r7, r3
 800149e:	2200      	movs	r2, #0
 80014a0:	801a      	strh	r2, [r3, #0]
 80014a2:	e03d      	b.n	8001520 <EE_PageTransfer+0x154>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 80014a4:	2316      	movs	r3, #22
 80014a6:	18fb      	adds	r3, r7, r3
 80014a8:	881a      	ldrh	r2, [r3, #0]
 80014aa:	4b3b      	ldr	r3, [pc, #236]	; (8001598 <EE_PageTransfer+0x1cc>)
 80014ac:	0052      	lsls	r2, r2, #1
 80014ae:	5ad3      	ldrh	r3, [r2, r3]
 80014b0:	1dba      	adds	r2, r7, #6
 80014b2:	8812      	ldrh	r2, [r2, #0]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d02c      	beq.n	8001512 <EE_PageTransfer+0x146>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80014b8:	2316      	movs	r3, #22
 80014ba:	18fb      	adds	r3, r7, r3
 80014bc:	881a      	ldrh	r2, [r3, #0]
 80014be:	4b36      	ldr	r3, [pc, #216]	; (8001598 <EE_PageTransfer+0x1cc>)
 80014c0:	0052      	lsls	r2, r2, #1
 80014c2:	5ad3      	ldrh	r3, [r2, r3]
 80014c4:	220e      	movs	r2, #14
 80014c6:	18bc      	adds	r4, r7, r2
 80014c8:	4a34      	ldr	r2, [pc, #208]	; (800159c <EE_PageTransfer+0x1d0>)
 80014ca:	0011      	movs	r1, r2
 80014cc:	0018      	movs	r0, r3
 80014ce:	f7ff fde3 	bl	8001098 <EE_ReadVariable>
 80014d2:	0003      	movs	r3, r0
 80014d4:	8023      	strh	r3, [r4, #0]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 80014d6:	230e      	movs	r3, #14
 80014d8:	18fb      	adds	r3, r7, r3
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d018      	beq.n	8001512 <EE_PageTransfer+0x146>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80014e0:	2316      	movs	r3, #22
 80014e2:	18fb      	adds	r3, r7, r3
 80014e4:	881a      	ldrh	r2, [r3, #0]
 80014e6:	4b2c      	ldr	r3, [pc, #176]	; (8001598 <EE_PageTransfer+0x1cc>)
 80014e8:	0052      	lsls	r2, r2, #1
 80014ea:	5ad2      	ldrh	r2, [r2, r3]
 80014ec:	4b2b      	ldr	r3, [pc, #172]	; (800159c <EE_PageTransfer+0x1d0>)
 80014ee:	881b      	ldrh	r3, [r3, #0]
 80014f0:	2110      	movs	r1, #16
 80014f2:	187c      	adds	r4, r7, r1
 80014f4:	0019      	movs	r1, r3
 80014f6:	0010      	movs	r0, r2
 80014f8:	f7ff fef4 	bl	80012e4 <EE_VerifyPageFullWriteVariable>
 80014fc:	0003      	movs	r3, r0
 80014fe:	8023      	strh	r3, [r4, #0]
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != FLASH_COMPLETE)
 8001500:	2310      	movs	r3, #16
 8001502:	18fb      	adds	r3, r7, r3
 8001504:	881b      	ldrh	r3, [r3, #0]
 8001506:	2b04      	cmp	r3, #4
 8001508:	d003      	beq.n	8001512 <EE_PageTransfer+0x146>
        {
          return EepromStatus;
 800150a:	2310      	movs	r3, #16
 800150c:	18fb      	adds	r3, r7, r3
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	e034      	b.n	800157c <EE_PageTransfer+0x1b0>
  {
    return EepromStatus;
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001512:	2316      	movs	r3, #22
 8001514:	18fb      	adds	r3, r7, r3
 8001516:	881a      	ldrh	r2, [r3, #0]
 8001518:	2316      	movs	r3, #22
 800151a:	18fb      	adds	r3, r7, r3
 800151c:	3201      	adds	r2, #1
 800151e:	801a      	strh	r2, [r3, #0]
 8001520:	2316      	movs	r3, #22
 8001522:	18fb      	adds	r3, r7, r3
 8001524:	881b      	ldrh	r3, [r3, #0]
 8001526:	2b24      	cmp	r3, #36	; 0x24
 8001528:	d9bc      	bls.n	80014a4 <EE_PageTransfer+0xd8>
      }
    }
  }

  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = FLASH_ErasePage(OldPageAddress);
 800152a:	2315      	movs	r3, #21
 800152c:	18fc      	adds	r4, r7, r3
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	0018      	movs	r0, r3
 8001532:	f005 f88d 	bl	8006650 <FLASH_ErasePage>
 8001536:	0003      	movs	r3, r0
 8001538:	7023      	strb	r3, [r4, #0]
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 800153a:	2315      	movs	r3, #21
 800153c:	18fb      	adds	r3, r7, r3
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b04      	cmp	r3, #4
 8001542:	d004      	beq.n	800154e <EE_PageTransfer+0x182>
  {
    return FlashStatus;
 8001544:	2315      	movs	r3, #21
 8001546:	18fb      	adds	r3, r7, r3
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b29b      	uxth	r3, r3
 800154c:	e016      	b.n	800157c <EE_PageTransfer+0x1b0>
  }

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = FLASH_ProgramHalfWord(NewPageAddress, VALID_PAGE);
 800154e:	2315      	movs	r3, #21
 8001550:	18fc      	adds	r4, r7, r3
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	2100      	movs	r1, #0
 8001556:	0018      	movs	r0, r3
 8001558:	f005 f8b8 	bl	80066cc <FLASH_ProgramHalfWord>
 800155c:	0003      	movs	r3, r0
 800155e:	7023      	strb	r3, [r4, #0]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 8001560:	2315      	movs	r3, #21
 8001562:	18fb      	adds	r3, r7, r3
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b04      	cmp	r3, #4
 8001568:	d004      	beq.n	8001574 <EE_PageTransfer+0x1a8>
  {
    return FlashStatus;
 800156a:	2315      	movs	r3, #21
 800156c:	18fb      	adds	r3, r7, r3
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	b29b      	uxth	r3, r3
 8001572:	e003      	b.n	800157c <EE_PageTransfer+0x1b0>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8001574:	2315      	movs	r3, #21
 8001576:	18fb      	adds	r3, r7, r3
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	b29b      	uxth	r3, r3
}
 800157c:	0018      	movs	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	b009      	add	sp, #36	; 0x24
 8001582:	bd90      	pop	{r4, r7, pc}
 8001584:	080103ff 	.word	0x080103ff
 8001588:	08010000 	.word	0x08010000
 800158c:	08007800 	.word	0x08007800
 8001590:	08007c00 	.word	0x08007c00
 8001594:	0000eeee 	.word	0x0000eeee
 8001598:	2000047c 	.word	0x2000047c
 800159c:	20000146 	.word	0x20000146

080015a0 <USB_Init>:
};

/* Private functions ---------------------------------------------------------*/

void USB_Init()
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0


	//remap Pins PA11/12
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80015a4:	2101      	movs	r1, #1
 80015a6:	2001      	movs	r0, #1
 80015a8:	f004 fd98 	bl	80060dc <RCC_APB2PeriphClockCmd>
	SYSCFG->CFGR1 |= SYSCFG_CFGR1_PA11_PA12_RMP;
 80015ac:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <USB_Init+0x4c>)
 80015ae:	4a0f      	ldr	r2, [pc, #60]	; (80015ec <USB_Init+0x4c>)
 80015b0:	6812      	ldr	r2, [r2, #0]
 80015b2:	2110      	movs	r1, #16
 80015b4:	430a      	orrs	r2, r1
 80015b6:	601a      	str	r2, [r3, #0]

	USBD_Init(&USB_Device_dev,
 80015b8:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <USB_Init+0x50>)
 80015ba:	4a0e      	ldr	r2, [pc, #56]	; (80015f4 <USB_Init+0x54>)
 80015bc:	490e      	ldr	r1, [pc, #56]	; (80015f8 <USB_Init+0x58>)
 80015be:	480f      	ldr	r0, [pc, #60]	; (80015fc <USB_Init+0x5c>)
 80015c0:	f002 fb88 	bl	8003cd4 <USBD_Init>
				&USR_desc,
				&USBD_CDC_cb,
				&USR_cb);
	USB_Flags &= ~USB_FLAG_NEW_DATA;
 80015c4:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <USB_Init+0x60>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2201      	movs	r2, #1
 80015cc:	4393      	bics	r3, r2
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <USB_Init+0x60>)
 80015d2:	701a      	strb	r2, [r3, #0]
	UsbPcSendBuf.read = 0;
 80015d4:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <USB_Init+0x64>)
 80015d6:	2280      	movs	r2, #128	; 0x80
 80015d8:	2100      	movs	r1, #0
 80015da:	5099      	str	r1, [r3, r2]
	UsbPcSendBuf.write = 0;
 80015dc:	4b09      	ldr	r3, [pc, #36]	; (8001604 <USB_Init+0x64>)
 80015de:	2284      	movs	r2, #132	; 0x84
 80015e0:	2100      	movs	r1, #0
 80015e2:	5099      	str	r1, [r3, r2]
}
 80015e4:	46c0      	nop			; (mov r8, r8)
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	46c0      	nop			; (mov r8, r8)
 80015ec:	40010000 	.word	0x40010000
 80015f0:	20000000 	.word	0x20000000
 80015f4:	20000098 	.word	0x20000098
 80015f8:	20000014 	.word	0x20000014
 80015fc:	20000280 	.word	0x20000280
 8001600:	20000186 	.word	0x20000186
 8001604:	200001f8 	.word	0x200001f8

08001608 <USB_VCP_Init>:
  *         Initializes the Media on the STM32
  * @param  None
  * @retval Result of the operation (USBD_OK in all cases)
  */
uint16_t USB_VCP_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0

  return USBD_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	0018      	movs	r0, r3
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <USB_VCP_DeInit>:
  *         DeInitializes the Media on the STM32
  * @param  None
  * @retval Result of the opeartion (USBD_OK in all cases)
  */
uint16_t USB_VCP_DeInit(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0

  return USBD_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	0018      	movs	r0, r3
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <USB_VCP_Ctrl>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation (USBD_OK in all cases)
  */
uint16_t USB_VCP_Ctrl (uint32_t Cmd, uint8_t* Buf, uint32_t Len)
{ 
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
	//but the damn ST USB stack doesn't give us any data!
	//so we have to improvise and the user has to send something to wake the device up,
	//as win 10 sends CTRL-Packages immediatly after plugging the USB device in!!
	//-> moved this connection open recognition to USB_VCP_DataRx

	switch(Cmd)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2b22      	cmp	r3, #34	; 0x22
 8001630:	d10f      	bne.n	8001652 <USB_VCP_Ctrl+0x32>
	{
	case SET_CONTROL_LINE_STATE:

		//host is not ready to receive data (any more) -> connection terminated
		if(USB_Flags & USB_FLAG_CDC_OPEN)
 8001632:	4b0a      	ldr	r3, [pc, #40]	; (800165c <USB_VCP_Ctrl+0x3c>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	b2db      	uxtb	r3, r3
 8001638:	001a      	movs	r2, r3
 800163a:	2302      	movs	r3, #2
 800163c:	4013      	ands	r3, r2
 800163e:	d007      	beq.n	8001650 <USB_VCP_Ctrl+0x30>
		{
			USB_Flags &= ~USB_FLAG_CDC_OPEN;
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <USB_VCP_Ctrl+0x3c>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2202      	movs	r2, #2
 8001648:	4393      	bics	r3, r2
 800164a:	b2da      	uxtb	r2, r3
 800164c:	4b03      	ldr	r3, [pc, #12]	; (800165c <USB_VCP_Ctrl+0x3c>)
 800164e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001650:	46c0      	nop			; (mov r8, r8)
	}
	return USBD_OK;
 8001652:	2300      	movs	r3, #0
}
 8001654:	0018      	movs	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	b004      	add	sp, #16
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000186 	.word	0x20000186

08001660 <USB_VCP_DataTx>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes) or 0 to stop @ first null char
  * @retval Result of the operation: USBD_OK if all operations are OK else VCP_FAIL
  */
uint16_t USB_VCP_DataTx (uint8_t* Buf, uint32_t Len)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
	if(Len)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d020      	beq.n	80016b2 <USB_VCP_DataTx+0x52>
	{
		for(uint32_t i = 0; i < Len; i++)
 8001670:	2300      	movs	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	e018      	b.n	80016a8 <USB_VCP_DataTx+0x48>
		{
			APP_Rx_Buffer[APP_Rx_ptr_in] = Buf[i];
 8001676:	4b22      	ldr	r3, [pc, #136]	; (8001700 <USB_VCP_DataTx+0xa0>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6879      	ldr	r1, [r7, #4]
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	188a      	adds	r2, r1, r2
 8001680:	7811      	ldrb	r1, [r2, #0]
 8001682:	4a20      	ldr	r2, [pc, #128]	; (8001704 <USB_VCP_DataTx+0xa4>)
 8001684:	54d1      	strb	r1, [r2, r3]
			APP_Rx_ptr_in++;
 8001686:	4b1e      	ldr	r3, [pc, #120]	; (8001700 <USB_VCP_DataTx+0xa0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	1c5a      	adds	r2, r3, #1
 800168c:	4b1c      	ldr	r3, [pc, #112]	; (8001700 <USB_VCP_DataTx+0xa0>)
 800168e:	601a      	str	r2, [r3, #0]

			/* To avoid buffer overflow */
			if(APP_Rx_ptr_in == APP_RX_DATA_SIZE)
 8001690:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <USB_VCP_DataTx+0xa0>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	2380      	movs	r3, #128	; 0x80
 8001696:	011b      	lsls	r3, r3, #4
 8001698:	429a      	cmp	r2, r3
 800169a:	d102      	bne.n	80016a2 <USB_VCP_DataTx+0x42>
			{
				APP_Rx_ptr_in = 0;
 800169c:	4b18      	ldr	r3, [pc, #96]	; (8001700 <USB_VCP_DataTx+0xa0>)
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
  */
uint16_t USB_VCP_DataTx (uint8_t* Buf, uint32_t Len)
{
	if(Len)
	{
		for(uint32_t i = 0; i < Len; i++)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	3301      	adds	r3, #1
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d3e2      	bcc.n	8001676 <USB_VCP_DataTx+0x16>
 80016b0:	e021      	b.n	80016f6 <USB_VCP_DataTx+0x96>
		}
	}
	else
	//stop @ null character (Len = 0)
	{
		uint32_t i = 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	60bb      	str	r3, [r7, #8]
		while(Buf[i] != 0x00)
 80016b6:	e018      	b.n	80016ea <USB_VCP_DataTx+0x8a>
		{
			APP_Rx_Buffer[APP_Rx_ptr_in] = Buf[i];
 80016b8:	4b11      	ldr	r3, [pc, #68]	; (8001700 <USB_VCP_DataTx+0xa0>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6879      	ldr	r1, [r7, #4]
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	188a      	adds	r2, r1, r2
 80016c2:	7811      	ldrb	r1, [r2, #0]
 80016c4:	4a0f      	ldr	r2, [pc, #60]	; (8001704 <USB_VCP_DataTx+0xa4>)
 80016c6:	54d1      	strb	r1, [r2, r3]
			APP_Rx_ptr_in++;
 80016c8:	4b0d      	ldr	r3, [pc, #52]	; (8001700 <USB_VCP_DataTx+0xa0>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	1c5a      	adds	r2, r3, #1
 80016ce:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <USB_VCP_DataTx+0xa0>)
 80016d0:	601a      	str	r2, [r3, #0]

			/* To avoid buffer overflow */
			if(APP_Rx_ptr_in == APP_RX_DATA_SIZE)
 80016d2:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <USB_VCP_DataTx+0xa0>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	2380      	movs	r3, #128	; 0x80
 80016d8:	011b      	lsls	r3, r3, #4
 80016da:	429a      	cmp	r2, r3
 80016dc:	d102      	bne.n	80016e4 <USB_VCP_DataTx+0x84>
			{
				APP_Rx_ptr_in = 0;
 80016de:	4b08      	ldr	r3, [pc, #32]	; (8001700 <USB_VCP_DataTx+0xa0>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
			}
			i++;
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	3301      	adds	r3, #1
 80016e8:	60bb      	str	r3, [r7, #8]
	}
	else
	//stop @ null character (Len = 0)
	{
		uint32_t i = 0;
		while(Buf[i] != 0x00)
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	18d3      	adds	r3, r2, r3
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1e0      	bne.n	80016b8 <USB_VCP_DataTx+0x58>
				APP_Rx_ptr_in = 0;
			}
			i++;
		}
	}
	return USBD_OK;
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	0018      	movs	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	b004      	add	sp, #16
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	2000015c 	.word	0x2000015c
 8001704:	200006e0 	.word	0x200006e0

08001708 <USB_VCP_DataRx>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else VCP_FAIL
  */
uint16_t USB_VCP_DataRx (uint8_t* Buf, uint32_t Len)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
	//start communication with host, as soon as the host has sent anything
	if(!(USB_Flags & USB_FLAG_CDC_OPEN))
 8001712:	4b20      	ldr	r3, [pc, #128]	; (8001794 <USB_VCP_DataRx+0x8c>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	b2db      	uxtb	r3, r3
 8001718:	001a      	movs	r2, r3
 800171a:	2302      	movs	r3, #2
 800171c:	4013      	ands	r3, r2
 800171e:	d119      	bne.n	8001754 <USB_VCP_DataRx+0x4c>
	{
		//flush the buffer
		UsbPcSendBuf.read = 0;
 8001720:	4b1d      	ldr	r3, [pc, #116]	; (8001798 <USB_VCP_DataRx+0x90>)
 8001722:	2280      	movs	r2, #128	; 0x80
 8001724:	2100      	movs	r1, #0
 8001726:	5099      	str	r1, [r3, r2]
		UsbPcSendBuf.write = 0;
 8001728:	4b1b      	ldr	r3, [pc, #108]	; (8001798 <USB_VCP_DataRx+0x90>)
 800172a:	2284      	movs	r2, #132	; 0x84
 800172c:	2100      	movs	r1, #0
 800172e:	5099      	str	r1, [r3, r2]

		//set flags
		USB_Flags |= USB_FLAG_CDC_OPEN;
 8001730:	4b18      	ldr	r3, [pc, #96]	; (8001794 <USB_VCP_DataRx+0x8c>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2202      	movs	r2, #2
 8001738:	4313      	orrs	r3, r2
 800173a:	b2da      	uxtb	r2, r3
 800173c:	4b15      	ldr	r3, [pc, #84]	; (8001794 <USB_VCP_DataRx+0x8c>)
 800173e:	701a      	strb	r2, [r3, #0]
		USB_Flags |= USB_FLAG_FIRST_CONTACT;
 8001740:	4b14      	ldr	r3, [pc, #80]	; (8001794 <USB_VCP_DataRx+0x8c>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2204      	movs	r2, #4
 8001748:	4313      	orrs	r3, r2
 800174a:	b2da      	uxtb	r2, r3
 800174c:	4b11      	ldr	r3, [pc, #68]	; (8001794 <USB_VCP_DataRx+0x8c>)
 800174e:	701a      	strb	r2, [r3, #0]
		return USBD_OK;
 8001750:	2300      	movs	r3, #0
 8001752:	e01b      	b.n	800178c <USB_VCP_DataRx+0x84>
	}

	USB_Flags |= USB_FLAG_NEW_DATA;
 8001754:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <USB_VCP_DataRx+0x8c>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2201      	movs	r2, #1
 800175c:	4313      	orrs	r3, r2
 800175e:	b2da      	uxtb	r2, r3
 8001760:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <USB_VCP_DataRx+0x8c>)
 8001762:	701a      	strb	r2, [r3, #0]

	for(uint32_t i = 0; i < Len; i++)
 8001764:	2300      	movs	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	e00b      	b.n	8001782 <USB_VCP_DataRx+0x7a>
	{
		FifoIn(&UsbPcSendBuf, Buf[i]);
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	18d3      	adds	r3, r2, r3
 8001770:	781a      	ldrb	r2, [r3, #0]
 8001772:	4b09      	ldr	r3, [pc, #36]	; (8001798 <USB_VCP_DataRx+0x90>)
 8001774:	0011      	movs	r1, r2
 8001776:	0018      	movs	r0, r3
 8001778:	f7fe fd52 	bl	8000220 <FifoIn>
		return USBD_OK;
	}

	USB_Flags |= USB_FLAG_NEW_DATA;

	for(uint32_t i = 0; i < Len; i++)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	3301      	adds	r3, #1
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	429a      	cmp	r2, r3
 8001788:	d3ef      	bcc.n	800176a <USB_VCP_DataRx+0x62>
	{
		FifoIn(&UsbPcSendBuf, Buf[i]);
	}
	return USBD_OK;
 800178a:	2300      	movs	r3, #0
}
 800178c:	0018      	movs	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	b004      	add	sp, #16
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000186 	.word	0x20000186
 8001798:	200001f8 	.word	0x200001f8

0800179c <USB_ReadAvailable>:
	}
	return (char)tempByte;
}

uint32_t USB_ReadAvailable(uint8_t* string)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
	USB_Flags &= ~USB_FLAG_NEW_DATA;
 80017a4:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <USB_ReadAvailable+0x5c>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2201      	movs	r2, #1
 80017ac:	4393      	bics	r3, r2
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <USB_ReadAvailable+0x5c>)
 80017b2:	701a      	strb	r2, [r3, #0]
	uint32_t count = FifoCount(&UsbPcSendBuf);
 80017b4:	4b11      	ldr	r3, [pc, #68]	; (80017fc <USB_ReadAvailable+0x60>)
 80017b6:	0018      	movs	r0, r3
 80017b8:	f7fe fd7c 	bl	80002b4 <FifoCount>
 80017bc:	0003      	movs	r3, r0
 80017be:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < count; i++)
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	e00a      	b.n	80017dc <USB_ReadAvailable+0x40>
	{
		FifoOut(&UsbPcSendBuf,(uint8_t*)string+i);
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	18d2      	adds	r2, r2, r3
 80017cc:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <USB_ReadAvailable+0x60>)
 80017ce:	0011      	movs	r1, r2
 80017d0:	0018      	movs	r0, r3
 80017d2:	f7fe fd4b 	bl	800026c <FifoOut>

uint32_t USB_ReadAvailable(uint8_t* string)
{
	USB_Flags &= ~USB_FLAG_NEW_DATA;
	uint32_t count = FifoCount(&UsbPcSendBuf);
	for (uint32_t i = 0; i < count; i++)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	3301      	adds	r3, #1
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d3f0      	bcc.n	80017c6 <USB_ReadAvailable+0x2a>
	{
		FifoOut(&UsbPcSendBuf,(uint8_t*)string+i);
	}
	//add termination
	string[count] = 0x00;
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	18d3      	adds	r3, r2, r3
 80017ea:	2200      	movs	r2, #0
 80017ec:	701a      	strb	r2, [r3, #0]
	return count;
 80017ee:	68bb      	ldr	r3, [r7, #8]
}
 80017f0:	0018      	movs	r0, r3
 80017f2:	46bd      	mov	sp, r7
 80017f4:	b004      	add	sp, #16
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20000186 	.word	0x20000186
 80017fc:	200001f8 	.word	0x200001f8

08001800 <I2C_RdReg>:
/**
 * Origin of I2C_RdReg and I2C_WrReg:
 * https://hsel.co.uk/2014/08/13/stm32f0-mini-tutorial-using-the-i2c-peripheral-to-communicate-with-a-hmc5883l-digital-compass-ic/
 */
uint8_t I2C_RdReg(uint8_t Reg, uint8_t *Data, uint8_t DCnt)
{
 8001800:	b590      	push	{r4, r7, lr}
 8001802:	b087      	sub	sp, #28
 8001804:	af02      	add	r7, sp, #8
 8001806:	6039      	str	r1, [r7, #0]
 8001808:	0011      	movs	r1, r2
 800180a:	1dfb      	adds	r3, r7, #7
 800180c:	1c02      	adds	r2, r0, #0
 800180e:	701a      	strb	r2, [r3, #0]
 8001810:	1dbb      	adds	r3, r7, #6
 8001812:	1c0a      	adds	r2, r1, #0
 8001814:	701a      	strb	r2, [r3, #0]
	uint8_t Cnt, SingleData = 0;
 8001816:	230e      	movs	r3, #14
 8001818:	18fb      	adds	r3, r7, r3
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]

	//Wait until I2C isn't busy
	while(I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_BUSY) == SET);
 800181e:	46c0      	nop			; (mov r8, r8)
 8001820:	2380      	movs	r3, #128	; 0x80
 8001822:	021b      	lsls	r3, r3, #8
 8001824:	4a3d      	ldr	r2, [pc, #244]	; (800191c <I2C_RdReg+0x11c>)
 8001826:	0019      	movs	r1, r3
 8001828:	0010      	movs	r0, r2
 800182a:	f004 fddf 	bl	80063ec <I2C_GetFlagStatus>
 800182e:	1e03      	subs	r3, r0, #0
 8001830:	2b01      	cmp	r3, #1
 8001832:	d0f5      	beq.n	8001820 <I2C_RdReg+0x20>

	//first communication (try reading the status register)
	/* Configure slave address, nbytes, reload, end mode and start or stop generation */
	I2C_TransferHandling(I2C_MMA8653,ADDR_MMA8653,1,I2C_SoftEnd_Mode,I2C_Generate_Start_Write);
 8001834:	4839      	ldr	r0, [pc, #228]	; (800191c <I2C_RdReg+0x11c>)
 8001836:	2380      	movs	r3, #128	; 0x80
 8001838:	019b      	lsls	r3, r3, #6
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	2300      	movs	r3, #0
 800183e:	2201      	movs	r2, #1
 8001840:	213a      	movs	r1, #58	; 0x3a
 8001842:	f004 fd81 	bl	8006348 <I2C_TransferHandling>
	//Ensure the transmit interrupted flag is set
	while(I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_TXIS) == RESET);
 8001846:	46c0      	nop			; (mov r8, r8)
 8001848:	4b34      	ldr	r3, [pc, #208]	; (800191c <I2C_RdReg+0x11c>)
 800184a:	2102      	movs	r1, #2
 800184c:	0018      	movs	r0, r3
 800184e:	f004 fdcd 	bl	80063ec <I2C_GetFlagStatus>
 8001852:	1e03      	subs	r3, r0, #0
 8001854:	d0f8      	beq.n	8001848 <I2C_RdReg+0x48>
	//send reg address
	I2C_SendData(I2C_MMA8653, (uint8_t)Reg);
 8001856:	1dfb      	adds	r3, r7, #7
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	4a30      	ldr	r2, [pc, #192]	; (800191c <I2C_RdReg+0x11c>)
 800185c:	0019      	movs	r1, r3
 800185e:	0010      	movs	r0, r2
 8001860:	f004 fda8 	bl	80063b4 <I2C_SendData>
	//Wait until transfer is complete!
	while(I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_TC) == RESET);
 8001864:	46c0      	nop			; (mov r8, r8)
 8001866:	4b2d      	ldr	r3, [pc, #180]	; (800191c <I2C_RdReg+0x11c>)
 8001868:	2140      	movs	r1, #64	; 0x40
 800186a:	0018      	movs	r0, r3
 800186c:	f004 fdbe 	bl	80063ec <I2C_GetFlagStatus>
 8001870:	1e03      	subs	r3, r0, #0
 8001872:	d0f8      	beq.n	8001866 <I2C_RdReg+0x66>
	//initiate read
	I2C_TransferHandling(I2C_MMA8653, ADDR_MMA8653, DCnt, I2C_AutoEnd_Mode, I2C_Generate_Start_Read);
 8001874:	2380      	movs	r3, #128	; 0x80
 8001876:	0499      	lsls	r1, r3, #18
 8001878:	1dbb      	adds	r3, r7, #6
 800187a:	781a      	ldrb	r2, [r3, #0]
 800187c:	4827      	ldr	r0, [pc, #156]	; (800191c <I2C_RdReg+0x11c>)
 800187e:	2390      	movs	r3, #144	; 0x90
 8001880:	019b      	lsls	r3, r3, #6
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	000b      	movs	r3, r1
 8001886:	213a      	movs	r1, #58	; 0x3a
 8001888:	f004 fd5e 	bl	8006348 <I2C_TransferHandling>


	//Read in DCnt pieces of data
	for(Cnt = 0; Cnt<DCnt; Cnt++)
 800188c:	230f      	movs	r3, #15
 800188e:	18fb      	adds	r3, r7, r3
 8001890:	2200      	movs	r2, #0
 8001892:	701a      	strb	r2, [r3, #0]
 8001894:	e026      	b.n	80018e4 <I2C_RdReg+0xe4>
	{
        //Wait until the RX register is full of luscious data!
        while(I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_RXNE) == RESET);
 8001896:	46c0      	nop			; (mov r8, r8)
 8001898:	4b20      	ldr	r3, [pc, #128]	; (800191c <I2C_RdReg+0x11c>)
 800189a:	2104      	movs	r1, #4
 800189c:	0018      	movs	r0, r3
 800189e:	f004 fda5 	bl	80063ec <I2C_GetFlagStatus>
 80018a2:	1e03      	subs	r3, r0, #0
 80018a4:	d0f8      	beq.n	8001898 <I2C_RdReg+0x98>
        //If we're only reading one byte, place that data direct into the
        //SingleData variable. If we're reading more than 1 piece of data
        //store in the array "Data" (a pointer from main)
        if(DCnt > 1)
 80018a6:	1dbb      	adds	r3, r7, #6
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d90b      	bls.n	80018c6 <I2C_RdReg+0xc6>
        {
        	Data[Cnt] = I2C_ReceiveData(I2C_MMA8653);
 80018ae:	230f      	movs	r3, #15
 80018b0:	18fb      	adds	r3, r7, r3
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	18d4      	adds	r4, r2, r3
 80018b8:	4b18      	ldr	r3, [pc, #96]	; (800191c <I2C_RdReg+0x11c>)
 80018ba:	0018      	movs	r0, r3
 80018bc:	f004 fd8a 	bl	80063d4 <I2C_ReceiveData>
 80018c0:	0003      	movs	r3, r0
 80018c2:	7023      	strb	r3, [r4, #0]
 80018c4:	e007      	b.n	80018d6 <I2C_RdReg+0xd6>
        }
        else SingleData = I2C_ReceiveData(I2C_MMA8653);
 80018c6:	230e      	movs	r3, #14
 80018c8:	18fc      	adds	r4, r7, r3
 80018ca:	4b14      	ldr	r3, [pc, #80]	; (800191c <I2C_RdReg+0x11c>)
 80018cc:	0018      	movs	r0, r3
 80018ce:	f004 fd81 	bl	80063d4 <I2C_ReceiveData>
 80018d2:	0003      	movs	r3, r0
 80018d4:	7023      	strb	r3, [r4, #0]
	//initiate read
	I2C_TransferHandling(I2C_MMA8653, ADDR_MMA8653, DCnt, I2C_AutoEnd_Mode, I2C_Generate_Start_Read);


	//Read in DCnt pieces of data
	for(Cnt = 0; Cnt<DCnt; Cnt++)
 80018d6:	230f      	movs	r3, #15
 80018d8:	18fb      	adds	r3, r7, r3
 80018da:	781a      	ldrb	r2, [r3, #0]
 80018dc:	230f      	movs	r3, #15
 80018de:	18fb      	adds	r3, r7, r3
 80018e0:	3201      	adds	r2, #1
 80018e2:	701a      	strb	r2, [r3, #0]
 80018e4:	230f      	movs	r3, #15
 80018e6:	18fa      	adds	r2, r7, r3
 80018e8:	1dbb      	adds	r3, r7, #6
 80018ea:	7812      	ldrb	r2, [r2, #0]
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d3d1      	bcc.n	8001896 <I2C_RdReg+0x96>
        }
        else SingleData = I2C_ReceiveData(I2C_MMA8653);
     }

    //Wait for the stop condition to be sent
    while(I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_STOPF) == RESET);
 80018f2:	46c0      	nop			; (mov r8, r8)
 80018f4:	4b09      	ldr	r3, [pc, #36]	; (800191c <I2C_RdReg+0x11c>)
 80018f6:	2120      	movs	r1, #32
 80018f8:	0018      	movs	r0, r3
 80018fa:	f004 fd77 	bl	80063ec <I2C_GetFlagStatus>
 80018fe:	1e03      	subs	r3, r0, #0
 8001900:	d0f8      	beq.n	80018f4 <I2C_RdReg+0xf4>

    //Clear the stop flag for next transfers
    I2C_ClearFlag(I2C_MMA8653, I2C_FLAG_STOPF);
 8001902:	4b06      	ldr	r3, [pc, #24]	; (800191c <I2C_RdReg+0x11c>)
 8001904:	2120      	movs	r1, #32
 8001906:	0018      	movs	r0, r3
 8001908:	f004 fd96 	bl	8006438 <I2C_ClearFlag>

    //Return a single piece of data if DCnt was
    //less than 1, otherwise 0 will be returned.
	return SingleData;
 800190c:	230e      	movs	r3, #14
 800190e:	18fb      	adds	r3, r7, r3
 8001910:	781b      	ldrb	r3, [r3, #0]
}
 8001912:	0018      	movs	r0, r3
 8001914:	46bd      	mov	sp, r7
 8001916:	b005      	add	sp, #20
 8001918:	bd90      	pop	{r4, r7, pc}
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	40005400 	.word	0x40005400

08001920 <I2C_WrReg>:

void I2C_WrReg(uint8_t Reg, uint8_t Val){
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af02      	add	r7, sp, #8
 8001926:	0002      	movs	r2, r0
 8001928:	1dfb      	adds	r3, r7, #7
 800192a:	701a      	strb	r2, [r3, #0]
 800192c:	1dbb      	adds	r3, r7, #6
 800192e:	1c0a      	adds	r2, r1, #0
 8001930:	701a      	strb	r2, [r3, #0]

	//Wait until I2C isn't busy
	while(I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_BUSY) == SET);
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	021b      	lsls	r3, r3, #8
 8001938:	4a29      	ldr	r2, [pc, #164]	; (80019e0 <I2C_WrReg+0xc0>)
 800193a:	0019      	movs	r1, r3
 800193c:	0010      	movs	r0, r2
 800193e:	f004 fd55 	bl	80063ec <I2C_GetFlagStatus>
 8001942:	1e03      	subs	r3, r0, #0
 8001944:	2b01      	cmp	r3, #1
 8001946:	d0f5      	beq.n	8001934 <I2C_WrReg+0x14>
	//I2C interface... Regardless! Send the address of the HMC
	//sensor down the I2C Bus and generate a start saying we're
	//going to write one byte. I'll be completely honest,
	//the I2C peripheral doesn't make too much sense to me
	//and a lot of the code is from the Std peripheral library
	I2C_TransferHandling(I2C_MMA8653, ADDR_MMA8653, 1, I2C_Reload_Mode, I2C_Generate_Start_Write);
 8001948:	2380      	movs	r3, #128	; 0x80
 800194a:	045a      	lsls	r2, r3, #17
 800194c:	4824      	ldr	r0, [pc, #144]	; (80019e0 <I2C_WrReg+0xc0>)
 800194e:	2380      	movs	r3, #128	; 0x80
 8001950:	019b      	lsls	r3, r3, #6
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	0013      	movs	r3, r2
 8001956:	2201      	movs	r2, #1
 8001958:	213a      	movs	r1, #58	; 0x3a
 800195a:	f004 fcf5 	bl	8006348 <I2C_TransferHandling>

	//Ensure the transmit interrupted flag is set
	while(I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_TXIS) == RESET);
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	4b1f      	ldr	r3, [pc, #124]	; (80019e0 <I2C_WrReg+0xc0>)
 8001962:	2102      	movs	r1, #2
 8001964:	0018      	movs	r0, r3
 8001966:	f004 fd41 	bl	80063ec <I2C_GetFlagStatus>
 800196a:	1e03      	subs	r3, r0, #0
 800196c:	d0f8      	beq.n	8001960 <I2C_WrReg+0x40>

	//Send the address of the register we wish to write to
	I2C_SendData(I2C_MMA8653, Reg);
 800196e:	1dfb      	adds	r3, r7, #7
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	4a1b      	ldr	r2, [pc, #108]	; (80019e0 <I2C_WrReg+0xc0>)
 8001974:	0019      	movs	r1, r3
 8001976:	0010      	movs	r0, r2
 8001978:	f004 fd1c 	bl	80063b4 <I2C_SendData>

	//Ensure that the transfer complete reload flag is
	//set, essentially a standard TC flag
	while(I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_TCR) == RESET);
 800197c:	46c0      	nop			; (mov r8, r8)
 800197e:	4b18      	ldr	r3, [pc, #96]	; (80019e0 <I2C_WrReg+0xc0>)
 8001980:	2180      	movs	r1, #128	; 0x80
 8001982:	0018      	movs	r0, r3
 8001984:	f004 fd32 	bl	80063ec <I2C_GetFlagStatus>
 8001988:	1e03      	subs	r3, r0, #0
 800198a:	d0f8      	beq.n	800197e <I2C_WrReg+0x5e>

	//Now that the HMC5883L knows which register
	//we want to write to, send the address again
	//and ensure the I2C peripheral doesn't add
	//any start or stop conditions
	I2C_TransferHandling(I2C_MMA8653, ADDR_MMA8653, 1, I2C_AutoEnd_Mode, I2C_No_StartStop);
 800198c:	2380      	movs	r3, #128	; 0x80
 800198e:	049a      	lsls	r2, r3, #18
 8001990:	4813      	ldr	r0, [pc, #76]	; (80019e0 <I2C_WrReg+0xc0>)
 8001992:	2300      	movs	r3, #0
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	0013      	movs	r3, r2
 8001998:	2201      	movs	r2, #1
 800199a:	213a      	movs	r1, #58	; 0x3a
 800199c:	f004 fcd4 	bl	8006348 <I2C_TransferHandling>

	//Again, wait until the transmit interrupted flag is set
	while(I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_TXIS) == RESET);
 80019a0:	46c0      	nop			; (mov r8, r8)
 80019a2:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <I2C_WrReg+0xc0>)
 80019a4:	2102      	movs	r1, #2
 80019a6:	0018      	movs	r0, r3
 80019a8:	f004 fd20 	bl	80063ec <I2C_GetFlagStatus>
 80019ac:	1e03      	subs	r3, r0, #0
 80019ae:	d0f8      	beq.n	80019a2 <I2C_WrReg+0x82>

	//Send the value you wish you write to the register
	I2C_SendData(I2C_MMA8653, Val);
 80019b0:	1dbb      	adds	r3, r7, #6
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <I2C_WrReg+0xc0>)
 80019b6:	0019      	movs	r1, r3
 80019b8:	0010      	movs	r0, r2
 80019ba:	f004 fcfb 	bl	80063b4 <I2C_SendData>

	//Wait for the stop flag to be set indicating
	//a stop condition has been sent
	while(I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_STOPF) == RESET);
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <I2C_WrReg+0xc0>)
 80019c2:	2120      	movs	r1, #32
 80019c4:	0018      	movs	r0, r3
 80019c6:	f004 fd11 	bl	80063ec <I2C_GetFlagStatus>
 80019ca:	1e03      	subs	r3, r0, #0
 80019cc:	d0f8      	beq.n	80019c0 <I2C_WrReg+0xa0>

	//Clear the stop flag for the next potential transfer
	I2C_ClearFlag(I2C_MMA8653, I2C_FLAG_STOPF);
 80019ce:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <I2C_WrReg+0xc0>)
 80019d0:	2120      	movs	r1, #32
 80019d2:	0018      	movs	r0, r3
 80019d4:	f004 fd30 	bl	8006438 <I2C_ClearFlag>
}
 80019d8:	46c0      	nop			; (mov r8, r8)
 80019da:	46bd      	mov	sp, r7
 80019dc:	b002      	add	sp, #8
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40005400 	.word	0x40005400

080019e4 <I2C_BitHandling>:

void I2C_BitHandling(uint8_t reg, uint8_t bitmask, uint8_t set)
{
 80019e4:	b590      	push	{r4, r7, lr}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	0004      	movs	r4, r0
 80019ec:	0008      	movs	r0, r1
 80019ee:	0011      	movs	r1, r2
 80019f0:	1dfb      	adds	r3, r7, #7
 80019f2:	1c22      	adds	r2, r4, #0
 80019f4:	701a      	strb	r2, [r3, #0]
 80019f6:	1dbb      	adds	r3, r7, #6
 80019f8:	1c02      	adds	r2, r0, #0
 80019fa:	701a      	strb	r2, [r3, #0]
 80019fc:	1d7b      	adds	r3, r7, #5
 80019fe:	1c0a      	adds	r2, r1, #0
 8001a00:	701a      	strb	r2, [r3, #0]
	uint8_t tempReg = I2C_RdReg(reg,rxBuf,1u);
 8001a02:	230f      	movs	r3, #15
 8001a04:	18fc      	adds	r4, r7, r3
 8001a06:	4919      	ldr	r1, [pc, #100]	; (8001a6c <I2C_BitHandling+0x88>)
 8001a08:	1dfb      	adds	r3, r7, #7
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	0018      	movs	r0, r3
 8001a10:	f7ff fef6 	bl	8001800 <I2C_RdReg>
 8001a14:	0003      	movs	r3, r0
 8001a16:	7023      	strb	r3, [r4, #0]
	if(set)
 8001a18:	1d7b      	adds	r3, r7, #5
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d009      	beq.n	8001a34 <I2C_BitHandling+0x50>
	{
		//set bits
		tempReg |= bitmask;
 8001a20:	230f      	movs	r3, #15
 8001a22:	18fb      	adds	r3, r7, r3
 8001a24:	220f      	movs	r2, #15
 8001a26:	18b9      	adds	r1, r7, r2
 8001a28:	1dba      	adds	r2, r7, #6
 8001a2a:	7809      	ldrb	r1, [r1, #0]
 8001a2c:	7812      	ldrb	r2, [r2, #0]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	701a      	strb	r2, [r3, #0]
 8001a32:	e00d      	b.n	8001a50 <I2C_BitHandling+0x6c>
	}
	else
	{
		//reset bits
		tempReg &= ~bitmask;
 8001a34:	1dbb      	adds	r3, r7, #6
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	b25b      	sxtb	r3, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	b25b      	sxtb	r3, r3
 8001a3e:	220f      	movs	r2, #15
 8001a40:	18ba      	adds	r2, r7, r2
 8001a42:	7812      	ldrb	r2, [r2, #0]
 8001a44:	b252      	sxtb	r2, r2
 8001a46:	4013      	ands	r3, r2
 8001a48:	b25a      	sxtb	r2, r3
 8001a4a:	230f      	movs	r3, #15
 8001a4c:	18fb      	adds	r3, r7, r3
 8001a4e:	701a      	strb	r2, [r3, #0]
	}
	//write back the register
	I2C_WrReg(reg,tempReg);
 8001a50:	230f      	movs	r3, #15
 8001a52:	18fb      	adds	r3, r7, r3
 8001a54:	781a      	ldrb	r2, [r3, #0]
 8001a56:	1dfb      	adds	r3, r7, #7
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	0011      	movs	r1, r2
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f7ff ff5f 	bl	8001920 <I2C_WrReg>
}
 8001a62:	46c0      	nop			; (mov r8, r8)
 8001a64:	46bd      	mov	sp, r7
 8001a66:	b005      	add	sp, #20
 8001a68:	bd90      	pop	{r4, r7, pc}
 8001a6a:	46c0      	nop			; (mov r8, r8)
 8001a6c:	200003e8 	.word	0x200003e8

08001a70 <mma8653_goStandby>:

uint8_t mma8653_goStandby()
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
	if(!isActive)
 8001a74:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <mma8653_goStandby+0x44>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <mma8653_goStandby+0x10>
	{
		return 0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	e015      	b.n	8001aac <mma8653_goStandby+0x3c>
	}
	//reset the Active-bit
	I2C_BitHandling(REG_CTRL_REG_1, 1<<0, 0);
 8001a80:	2200      	movs	r2, #0
 8001a82:	2101      	movs	r1, #1
 8001a84:	202a      	movs	r0, #42	; 0x2a
 8001a86:	f7ff ffad 	bl	80019e4 <I2C_BitHandling>
	delay(100);
 8001a8a:	2064      	movs	r0, #100	; 0x64
 8001a8c:	f7ff f87e 	bl	8000b8c <delay>
	//check, if the sensor is inactive
	if(I2C_RdReg(REG_SYSMOD,rxBuf,1) != 0)
 8001a90:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <mma8653_goStandby+0x48>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	0019      	movs	r1, r3
 8001a96:	200b      	movs	r0, #11
 8001a98:	f7ff feb2 	bl	8001800 <I2C_RdReg>
 8001a9c:	1e03      	subs	r3, r0, #0
 8001a9e:	d001      	beq.n	8001aa4 <mma8653_goStandby+0x34>
	{
		return 1;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e003      	b.n	8001aac <mma8653_goStandby+0x3c>
	}
	isActive = 0;
 8001aa4:	4b03      	ldr	r3, [pc, #12]	; (8001ab4 <mma8653_goStandby+0x44>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	701a      	strb	r2, [r3, #0]
	return 0;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	0018      	movs	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	46c0      	nop			; (mov r8, r8)
 8001ab4:	20000148 	.word	0x20000148
 8001ab8:	200003e8 	.word	0x200003e8

08001abc <mma8653_goActive>:
uint8_t mma8653_goActive()
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0

	if(isActive)
 8001ac0:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <mma8653_goActive+0x44>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <mma8653_goActive+0x10>
	{
		return 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	e016      	b.n	8001afa <mma8653_goActive+0x3e>
	}
	//set the Active-bit
	I2C_BitHandling(REG_CTRL_REG_1, 1<<0, 1);
 8001acc:	2201      	movs	r2, #1
 8001ace:	2101      	movs	r1, #1
 8001ad0:	202a      	movs	r0, #42	; 0x2a
 8001ad2:	f7ff ff87 	bl	80019e4 <I2C_BitHandling>
	delay(100);
 8001ad6:	2064      	movs	r0, #100	; 0x64
 8001ad8:	f7ff f858 	bl	8000b8c <delay>
	//check, if the sensor is active
	if(I2C_RdReg(REG_SYSMOD,rxBuf,1) != 1)
 8001adc:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <mma8653_goActive+0x48>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	0019      	movs	r1, r3
 8001ae2:	200b      	movs	r0, #11
 8001ae4:	f7ff fe8c 	bl	8001800 <I2C_RdReg>
 8001ae8:	1e03      	subs	r3, r0, #0
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d001      	beq.n	8001af2 <mma8653_goActive+0x36>
	{

		return 1;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e003      	b.n	8001afa <mma8653_goActive+0x3e>
	}
	isActive = 1;
 8001af2:	4b03      	ldr	r3, [pc, #12]	; (8001b00 <mma8653_goActive+0x44>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	701a      	strb	r2, [r3, #0]
	return 0;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	0018      	movs	r0, r3
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20000148 	.word	0x20000148
 8001b04:	200003e8 	.word	0x200003e8

08001b08 <mma8653_init>:

uint8_t mma8653_init()
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08a      	sub	sp, #40	; 0x28
 8001b0c:	af00      	add	r7, sp, #0

	//enable clock for periphery modules
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8001b0e:	2380      	movs	r3, #128	; 0x80
 8001b10:	029b      	lsls	r3, r3, #10
 8001b12:	2101      	movs	r1, #1
 8001b14:	0018      	movs	r0, r3
 8001b16:	f004 fac1 	bl	800609c <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 8001b1a:	2380      	movs	r3, #128	; 0x80
 8001b1c:	03db      	lsls	r3, r3, #15
 8001b1e:	2101      	movs	r1, #1
 8001b20:	0018      	movs	r0, r3
 8001b22:	f004 fabb 	bl	800609c <RCC_AHBPeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 8001b26:	2380      	movs	r3, #128	; 0x80
 8001b28:	039b      	lsls	r3, r3, #14
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	f004 faf5 	bl	800611c <RCC_APB1PeriphClockCmd>

	//gpio init
	GPIO_InitTypeDef GPIO_InitStruct;
	//configure PINs PF0 and PF1 as AF OD out
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
 8001b32:	2320      	movs	r3, #32
 8001b34:	18fb      	adds	r3, r7, r3
 8001b36:	2203      	movs	r2, #3
 8001b38:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8001b3a:	2320      	movs	r3, #32
 8001b3c:	18fb      	adds	r3, r7, r3
 8001b3e:	2202      	movs	r2, #2
 8001b40:	711a      	strb	r2, [r3, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;
 8001b42:	2320      	movs	r3, #32
 8001b44:	18fb      	adds	r3, r7, r3
 8001b46:	2201      	movs	r2, #1
 8001b48:	719a      	strb	r2, [r3, #6]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_Level_1;
 8001b4a:	2320      	movs	r3, #32
 8001b4c:	18fb      	adds	r3, r7, r3
 8001b4e:	2200      	movs	r2, #0
 8001b50:	715a      	strb	r2, [r3, #5]
	GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b52:	2320      	movs	r3, #32
 8001b54:	18fb      	adds	r3, r7, r3
 8001b56:	4a3b      	ldr	r2, [pc, #236]	; (8001c44 <mma8653_init+0x13c>)
 8001b58:	0019      	movs	r1, r3
 8001b5a:	0010      	movs	r0, r2
 8001b5c:	f004 fc78 	bl	8006450 <GPIO_Init>

	//remap
	GPIO_PinAFConfig(GPIOF,GPIO_PinSource0,GPIO_AF_1);
 8001b60:	4b38      	ldr	r3, [pc, #224]	; (8001c44 <mma8653_init+0x13c>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	2100      	movs	r1, #0
 8001b66:	0018      	movs	r0, r3
 8001b68:	f004 fd0a 	bl	8006580 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOF,GPIO_PinSource1,GPIO_AF_1);
 8001b6c:	4b35      	ldr	r3, [pc, #212]	; (8001c44 <mma8653_init+0x13c>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	2101      	movs	r1, #1
 8001b72:	0018      	movs	r0, r3
 8001b74:	f004 fd04 	bl	8006580 <GPIO_PinAFConfig>

	//configure PINs PA2 and PA3 as inputs for the interrupt lines
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 8001b78:	2320      	movs	r3, #32
 8001b7a:	18fb      	adds	r3, r7, r3
 8001b7c:	220c      	movs	r2, #12
 8001b7e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 8001b80:	2320      	movs	r3, #32
 8001b82:	18fb      	adds	r3, r7, r3
 8001b84:	2200      	movs	r2, #0
 8001b86:	711a      	strb	r2, [r3, #4]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8001b88:	2320      	movs	r3, #32
 8001b8a:	18fb      	adds	r3, r7, r3
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	71da      	strb	r2, [r3, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8001b90:	2320      	movs	r3, #32
 8001b92:	18fb      	adds	r3, r7, r3
 8001b94:	2203      	movs	r2, #3
 8001b96:	715a      	strb	r2, [r3, #5]
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b98:	2320      	movs	r3, #32
 8001b9a:	18fa      	adds	r2, r7, r3
 8001b9c:	2390      	movs	r3, #144	; 0x90
 8001b9e:	05db      	lsls	r3, r3, #23
 8001ba0:	0011      	movs	r1, r2
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	f004 fc54 	bl	8006450 <GPIO_Init>


	//i2c init
	//I2C_DeInit(I2C1);
	I2C_InitTypeDef I2C_InitStruct;
	I2C_InitStruct.I2C_Ack = I2C_Ack_Enable;
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	2200      	movs	r2, #0
 8001bac:	615a      	str	r2, [r3, #20]
	I2C_InitStruct.I2C_AnalogFilter = I2C_AnalogFilter_Enable;
 8001bae:	1d3b      	adds	r3, r7, #4
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	605a      	str	r2, [r3, #4]
	I2C_InitStruct.I2C_OwnAddress1 = 0xAB;
 8001bb4:	1d3b      	adds	r3, r7, #4
 8001bb6:	22ab      	movs	r2, #171	; 0xab
 8001bb8:	611a      	str	r2, [r3, #16]
	I2C_InitStruct.I2C_DigitalFilter = 0;
 8001bba:	1d3b      	adds	r3, r7, #4
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
	I2C_InitStruct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8001bc0:	1d3b      	adds	r3, r7, #4
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	619a      	str	r2, [r3, #24]
	I2C_InitStruct.I2C_Mode = I2C_Mode_I2C;
 8001bc6:	1d3b      	adds	r3, r7, #4
 8001bc8:	2200      	movs	r2, #0
 8001bca:	60da      	str	r2, [r3, #12]
	I2C_InitStruct.I2C_Timing = 0x0010020A; //should be 400kHz for the 8Mhz HSI
 8001bcc:	1d3b      	adds	r3, r7, #4
 8001bce:	4a1e      	ldr	r2, [pc, #120]	; (8001c48 <mma8653_init+0x140>)
 8001bd0:	601a      	str	r2, [r3, #0]
	I2C_Init(I2C_MMA8653,&I2C_InitStruct);
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	4a1d      	ldr	r2, [pc, #116]	; (8001c4c <mma8653_init+0x144>)
 8001bd6:	0019      	movs	r1, r3
 8001bd8:	0010      	movs	r0, r2
 8001bda:	f004 fb2f 	bl	800623c <I2C_Init>

	I2C_Cmd(I2C_MMA8653, ENABLE);
 8001bde:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <mma8653_init+0x144>)
 8001be0:	2101      	movs	r1, #1
 8001be2:	0018      	movs	r0, r3
 8001be4:	f004 fb92 	bl	800630c <I2C_Cmd>

	delay(50);
 8001be8:	2032      	movs	r0, #50	; 0x32
 8001bea:	f7fe ffcf 	bl	8000b8c <delay>

	if(I2C_RdReg(REG_WHO_AM_I,rxBuf, 1) != 0x5A)	//read the device ID to verify communication
 8001bee:	4b18      	ldr	r3, [pc, #96]	; (8001c50 <mma8653_init+0x148>)
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	0019      	movs	r1, r3
 8001bf4:	200d      	movs	r0, #13
 8001bf6:	f7ff fe03 	bl	8001800 <I2C_RdReg>
 8001bfa:	1e03      	subs	r3, r0, #0
 8001bfc:	2b5a      	cmp	r3, #90	; 0x5a
 8001bfe:	d001      	beq.n	8001c04 <mma8653_init+0xfc>
	{
		return 1;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e01b      	b.n	8001c3c <mma8653_init+0x134>
	}

	//set to highres mode
	I2C_BitHandling(REG_CTRL_REG_2,1<<1,SET);
 8001c04:	2201      	movs	r2, #1
 8001c06:	2102      	movs	r1, #2
 8001c08:	202b      	movs	r0, #43	; 0x2b
 8001c0a:	f7ff feeb 	bl	80019e4 <I2C_BitHandling>

	//set the sensor as always active (disable auto sleep) <- default
	//set to active and 10 bit mode, DataRate to 12.5Hz
	I2C_BitHandling(REG_CTRL_REG_1,(1<<0 | 1<<3 | 1<<5),SET);
 8001c0e:	2201      	movs	r2, #1
 8001c10:	2129      	movs	r1, #41	; 0x29
 8001c12:	202a      	movs	r0, #42	; 0x2a
 8001c14:	f7ff fee6 	bl	80019e4 <I2C_BitHandling>

	//check, if the sensor is active
	if(I2C_RdReg(REG_SYSMOD,rxBuf,1) != 1)
 8001c18:	4b0d      	ldr	r3, [pc, #52]	; (8001c50 <mma8653_init+0x148>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	0019      	movs	r1, r3
 8001c1e:	200b      	movs	r0, #11
 8001c20:	f7ff fdee 	bl	8001800 <I2C_RdReg>
 8001c24:	1e03      	subs	r3, r0, #0
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d004      	beq.n	8001c34 <mma8653_init+0x12c>
	{
		isActive = 0;
 8001c2a:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <mma8653_init+0x14c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	701a      	strb	r2, [r3, #0]
		return 2;
 8001c30:	2302      	movs	r3, #2
 8001c32:	e003      	b.n	8001c3c <mma8653_init+0x134>
	}
	isActive = 1;
 8001c34:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <mma8653_init+0x14c>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	701a      	strb	r2, [r3, #0]
	return 0;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	b00a      	add	sp, #40	; 0x28
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	48001400 	.word	0x48001400
 8001c48:	0010020a 	.word	0x0010020a
 8001c4c:	40005400 	.word	0x40005400
 8001c50:	200003e8 	.word	0x200003e8
 8001c54:	20000148 	.word	0x20000148

08001c58 <mma8653_setRange>:

uint8_t mma8653_setRange(mma8653_Ranges range)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	0002      	movs	r2, r0
 8001c60:	1dfb      	adds	r3, r7, #7
 8001c62:	701a      	strb	r2, [r3, #0]
	//deactivate the sensor
	if(mma8653_goStandby())
 8001c64:	f7ff ff04 	bl	8001a70 <mma8653_goStandby>
 8001c68:	1e03      	subs	r3, r0, #0
 8001c6a:	d001      	beq.n	8001c70 <mma8653_setRange+0x18>
	{
		return 1;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e012      	b.n	8001c96 <mma8653_setRange+0x3e>
	}
	//clear bits in register to change
	I2C_BitHandling(REG_XYZ_DATA_CFG, 0x03, Bit_RESET);
 8001c70:	2200      	movs	r2, #0
 8001c72:	2103      	movs	r1, #3
 8001c74:	200e      	movs	r0, #14
 8001c76:	f7ff feb5 	bl	80019e4 <I2C_BitHandling>
	//set range
	I2C_BitHandling(REG_XYZ_DATA_CFG, range, Bit_SET);
 8001c7a:	1dfb      	adds	r3, r7, #7
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	0019      	movs	r1, r3
 8001c82:	200e      	movs	r0, #14
 8001c84:	f7ff feae 	bl	80019e4 <I2C_BitHandling>

	if(mma8653_goActive())
 8001c88:	f7ff ff18 	bl	8001abc <mma8653_goActive>
 8001c8c:	1e03      	subs	r3, r0, #0
 8001c8e:	d001      	beq.n	8001c94 <mma8653_setRange+0x3c>
	{
		return 3;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e000      	b.n	8001c96 <mma8653_setRange+0x3e>
	}
	return 0;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	0018      	movs	r0, r3
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	b002      	add	sp, #8
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	46c0      	nop			; (mov r8, r8)

08001ca0 <mma8653_setDataRate>:

uint8_t mma8653_setDataRate(mma8653_dataRates dataRate)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	0002      	movs	r2, r0
 8001ca8:	1dfb      	adds	r3, r7, #7
 8001caa:	701a      	strb	r2, [r3, #0]
	//deactivate the sensor
	if(mma8653_goStandby())
 8001cac:	f7ff fee0 	bl	8001a70 <mma8653_goStandby>
 8001cb0:	1e03      	subs	r3, r0, #0
 8001cb2:	d001      	beq.n	8001cb8 <mma8653_setDataRate+0x18>
	{
		return 1;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e014      	b.n	8001ce2 <mma8653_setDataRate+0x42>
	}
	//clear bits in register to change
	I2C_BitHandling(REG_CTRL_REG_1, 0x38, Bit_RESET);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	2138      	movs	r1, #56	; 0x38
 8001cbc:	202a      	movs	r0, #42	; 0x2a
 8001cbe:	f7ff fe91 	bl	80019e4 <I2C_BitHandling>
	//set range
	I2C_BitHandling(REG_CTRL_REG_1, dataRate<<3, Bit_SET);
 8001cc2:	1dfb      	adds	r3, r7, #7
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2201      	movs	r2, #1
 8001ccc:	0019      	movs	r1, r3
 8001cce:	202a      	movs	r0, #42	; 0x2a
 8001cd0:	f7ff fe88 	bl	80019e4 <I2C_BitHandling>

	if(mma8653_goActive())
 8001cd4:	f7ff fef2 	bl	8001abc <mma8653_goActive>
 8001cd8:	1e03      	subs	r3, r0, #0
 8001cda:	d001      	beq.n	8001ce0 <mma8653_setDataRate+0x40>
	{
		return 3;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e000      	b.n	8001ce2 <mma8653_setDataRate+0x42>
	}
	return 0;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	b002      	add	sp, #8
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	46c0      	nop			; (mov r8, r8)

08001cec <mma8653_setDataWidth>:

uint8_t mma8653_setDataWidth(uint8_t DataWidth)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	0002      	movs	r2, r0
 8001cf4:	1dfb      	adds	r3, r7, #7
 8001cf6:	701a      	strb	r2, [r3, #0]
	//deactivate the sensor
	if(mma8653_goStandby())
 8001cf8:	f7ff feba 	bl	8001a70 <mma8653_goStandby>
 8001cfc:	1e03      	subs	r3, r0, #0
 8001cfe:	d001      	beq.n	8001d04 <mma8653_setDataWidth+0x18>
	{
		return 1;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e020      	b.n	8001d46 <mma8653_setDataWidth+0x5a>
	}
	//clear bits in register to change
	I2C_BitHandling(REG_CTRL_REG_1, 0x3E, Bit_RESET);
 8001d04:	2200      	movs	r2, #0
 8001d06:	213e      	movs	r1, #62	; 0x3e
 8001d08:	202a      	movs	r0, #42	; 0x2a
 8001d0a:	f7ff fe6b 	bl	80019e4 <I2C_BitHandling>

	//decide what to do
	switch(DataWidth)
 8001d0e:	1dfb      	adds	r3, r7, #7
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d002      	beq.n	8001d1c <mma8653_setDataWidth+0x30>
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d006      	beq.n	8001d28 <mma8653_setDataWidth+0x3c>
 8001d1a:	e00b      	b.n	8001d34 <mma8653_setDataWidth+0x48>
	{
	case MMA8653_DATAWIDTH_8:
		//set F_READ and leave highest data rate
		I2C_BitHandling(REG_CTRL_REG_1, 1<<1, Bit_SET);
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	2102      	movs	r1, #2
 8001d20:	202a      	movs	r0, #42	; 0x2a
 8001d22:	f7ff fe5f 	bl	80019e4 <I2C_BitHandling>
		break;
 8001d26:	e007      	b.n	8001d38 <mma8653_setDataWidth+0x4c>
	case MMA8653_DATAWIDTH_10:
		//limit output data rate to 12.5Hz and leave F_READ reset
		I2C_BitHandling(REG_CTRL_REG_1,(1<<3 | 1<<5), Bit_SET);
 8001d28:	2201      	movs	r2, #1
 8001d2a:	2128      	movs	r1, #40	; 0x28
 8001d2c:	202a      	movs	r0, #42	; 0x2a
 8001d2e:	f7ff fe59 	bl	80019e4 <I2C_BitHandling>
		break;
 8001d32:	e001      	b.n	8001d38 <mma8653_setDataWidth+0x4c>
	default:
		return 2;
 8001d34:	2302      	movs	r3, #2
 8001d36:	e006      	b.n	8001d46 <mma8653_setDataWidth+0x5a>
		break;
	}
	if(mma8653_goActive())
 8001d38:	f7ff fec0 	bl	8001abc <mma8653_goActive>
 8001d3c:	1e03      	subs	r3, r0, #0
 8001d3e:	d001      	beq.n	8001d44 <mma8653_setDataWidth+0x58>
	{
		return 3;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e000      	b.n	8001d46 <mma8653_setDataWidth+0x5a>
	}
	return 0;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	0018      	movs	r0, r3
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	b002      	add	sp, #8
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	46c0      	nop			; (mov r8, r8)

08001d50 <mma8653_read8>:

//read when in fast (8-bit) mode
//needs the fast-read mode enabled as well
//max. sample frequency (because of communication) ~ 7kHz
acc8_t mma8653_read8()
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
	uint8_t rxBuf[3];
	acc8_t acc_result;

	I2C_RdReg(REG_OUT_X_MSB,rxBuf,3);
 8001d56:	2308      	movs	r3, #8
 8001d58:	18fb      	adds	r3, r7, r3
 8001d5a:	2203      	movs	r2, #3
 8001d5c:	0019      	movs	r1, r3
 8001d5e:	2001      	movs	r0, #1
 8001d60:	f7ff fd4e 	bl	8001800 <I2C_RdReg>
	//rxbuf[0] contains full 8 bit of data.
	//the first bit defines the sign!
	acc_result.x = rxBuf[0];
 8001d64:	2308      	movs	r3, #8
 8001d66:	18fb      	adds	r3, r7, r3
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	b25a      	sxtb	r2, r3
 8001d6c:	1d3b      	adds	r3, r7, #4
 8001d6e:	701a      	strb	r2, [r3, #0]
	acc_result.y = rxBuf[1];
 8001d70:	2308      	movs	r3, #8
 8001d72:	18fb      	adds	r3, r7, r3
 8001d74:	785b      	ldrb	r3, [r3, #1]
 8001d76:	b25a      	sxtb	r2, r3
 8001d78:	1d3b      	adds	r3, r7, #4
 8001d7a:	705a      	strb	r2, [r3, #1]
	acc_result.z = rxBuf[2];
 8001d7c:	2308      	movs	r3, #8
 8001d7e:	18fb      	adds	r3, r7, r3
 8001d80:	789b      	ldrb	r3, [r3, #2]
 8001d82:	b25a      	sxtb	r2, r3
 8001d84:	1d3b      	adds	r3, r7, #4
 8001d86:	709a      	strb	r2, [r3, #2]
	return acc_result;
 8001d88:	230c      	movs	r3, #12
 8001d8a:	18fb      	adds	r3, r7, r3
 8001d8c:	1d3a      	adds	r2, r7, #4
 8001d8e:	8811      	ldrh	r1, [r2, #0]
 8001d90:	8019      	strh	r1, [r3, #0]
 8001d92:	7892      	ldrb	r2, [r2, #2]
 8001d94:	709a      	strb	r2, [r3, #2]
 8001d96:	230c      	movs	r3, #12
 8001d98:	18fa      	adds	r2, r7, r3
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	7811      	ldrb	r1, [r2, #0]
 8001d9e:	20ff      	movs	r0, #255	; 0xff
 8001da0:	4001      	ands	r1, r0
 8001da2:	20ff      	movs	r0, #255	; 0xff
 8001da4:	4383      	bics	r3, r0
 8001da6:	430b      	orrs	r3, r1
 8001da8:	7851      	ldrb	r1, [r2, #1]
 8001daa:	20ff      	movs	r0, #255	; 0xff
 8001dac:	4001      	ands	r1, r0
 8001dae:	0209      	lsls	r1, r1, #8
 8001db0:	4806      	ldr	r0, [pc, #24]	; (8001dcc <mma8653_read8+0x7c>)
 8001db2:	4003      	ands	r3, r0
 8001db4:	430b      	orrs	r3, r1
 8001db6:	7892      	ldrb	r2, [r2, #2]
 8001db8:	21ff      	movs	r1, #255	; 0xff
 8001dba:	400a      	ands	r2, r1
 8001dbc:	0412      	lsls	r2, r2, #16
 8001dbe:	4904      	ldr	r1, [pc, #16]	; (8001dd0 <mma8653_read8+0x80>)
 8001dc0:	400b      	ands	r3, r1
 8001dc2:	4313      	orrs	r3, r2
}
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	b004      	add	sp, #16
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	ffff00ff 	.word	0xffff00ff
 8001dd0:	ff00ffff 	.word	0xff00ffff

08001dd4 <mma8653_initIrq>:
	return acc_result;
}

//TODO: don't forget to implement and register the interrupt handler in startup code
void mma8653_initIrq()
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
	mma8653_goStandby();
 8001dda:	f7ff fe49 	bl	8001a70 <mma8653_goStandby>

	//interrupt pins are defined for push/pull low active by default -> leave that

	//enable the wanted interrupt source
	I2C_BitHandling(REG_CTRL_REG_4,1<<0,Bit_SET);
 8001dde:	2201      	movs	r2, #1
 8001de0:	2101      	movs	r1, #1
 8001de2:	202d      	movs	r0, #45	; 0x2d
 8001de4:	f7ff fdfe 	bl	80019e4 <I2C_BitHandling>
	//and route it to the corresponding pin
	I2C_BitHandling(REG_CTRL_REG_5,1<<0,Bit_SET);
 8001de8:	2201      	movs	r2, #1
 8001dea:	2101      	movs	r1, #1
 8001dec:	202e      	movs	r0, #46	; 0x2e
 8001dee:	f7ff fdf9 	bl	80019e4 <I2C_BitHandling>

	//set up the Interrupt in the STM32!
	//INT1 is connected to PA2 -> EXTI2 line
	//enable the clock for the syscfg module
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8001df2:	2101      	movs	r1, #1
 8001df4:	2001      	movs	r0, #1
 8001df6:	f004 f971 	bl	80060dc <RCC_APB2PeriphClockCmd>
	//enable PA2 interrupt source
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource2);
 8001dfa:	2102      	movs	r1, #2
 8001dfc:	2000      	movs	r0, #0
 8001dfe:	f004 f81f 	bl	8005e40 <SYSCFG_EXTILineConfig>
	//configure and enable the exti2 line
	EXTI_InitTypeDef EXTI_InitStruct;
	EXTI_InitStruct.EXTI_Line = EXTI_Line2;
 8001e02:	2308      	movs	r3, #8
 8001e04:	18fb      	adds	r3, r7, r3
 8001e06:	2204      	movs	r2, #4
 8001e08:	601a      	str	r2, [r3, #0]
	EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 8001e0a:	2308      	movs	r3, #8
 8001e0c:	18fb      	adds	r3, r7, r3
 8001e0e:	2200      	movs	r2, #0
 8001e10:	711a      	strb	r2, [r3, #4]
	EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Falling;
 8001e12:	2308      	movs	r3, #8
 8001e14:	18fb      	adds	r3, r7, r3
 8001e16:	220c      	movs	r2, #12
 8001e18:	715a      	strb	r2, [r3, #5]
	EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 8001e1a:	2308      	movs	r3, #8
 8001e1c:	18fb      	adds	r3, r7, r3
 8001e1e:	2201      	movs	r2, #1
 8001e20:	719a      	strb	r2, [r3, #6]
	EXTI_Init(&EXTI_InitStruct);
 8001e22:	2308      	movs	r3, #8
 8001e24:	18fb      	adds	r3, r7, r3
 8001e26:	0018      	movs	r0, r3
 8001e28:	f004 fce6 	bl	80067f8 <EXTI_Init>
	//enable and set exti2 interrupt
	NVIC_InitTypeDef NVIC_InitStruct;
	NVIC_InitStruct.NVIC_IRQChannel = EXTI2_3_IRQn;
 8001e2c:	1d3b      	adds	r3, r7, #4
 8001e2e:	2206      	movs	r2, #6
 8001e30:	701a      	strb	r2, [r3, #0]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8001e32:	1d3b      	adds	r3, r7, #4
 8001e34:	2201      	movs	r2, #1
 8001e36:	709a      	strb	r2, [r3, #2]
	NVIC_Init(&NVIC_InitStruct);
 8001e38:	1d3b      	adds	r3, r7, #4
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	f004 f98e 	bl	800615c <NVIC_Init>

	//activate sensor again
	mma8653_goActive();
 8001e40:	f7ff fe3c 	bl	8001abc <mma8653_goActive>
}
 8001e44:	46c0      	nop			; (mov r8, r8)
 8001e46:	46bd      	mov	sp, r7
 8001e48:	b004      	add	sp, #16
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	0002      	movs	r2, r0
 8001e54:	1dfb      	adds	r3, r7, #7
 8001e56:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
 8001e58:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <NVIC_EnableIRQ+0x28>)
 8001e5a:	1dfa      	adds	r2, r7, #7
 8001e5c:	7812      	ldrb	r2, [r2, #0]
 8001e5e:	0011      	movs	r1, r2
 8001e60:	221f      	movs	r2, #31
 8001e62:	400a      	ands	r2, r1
 8001e64:	2101      	movs	r1, #1
 8001e66:	4091      	lsls	r1, r2
 8001e68:	000a      	movs	r2, r1
 8001e6a:	601a      	str	r2, [r3, #0]
}
 8001e6c:	46c0      	nop			; (mov r8, r8)
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	b002      	add	sp, #8
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	e000e100 	.word	0xe000e100

08001e78 <displayInit>:
 */



void displayInit()
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
	//set up mma8653 with +-4g-Range, low res and high sampling rate
	//set up interrupt-driven sensor readout
	mma8653_setRange(RANGE_8G);
 8001e7c:	2002      	movs	r0, #2
 8001e7e:	f7ff feeb 	bl	8001c58 <mma8653_setRange>
	mma8653_setDataWidth(MMA8653_DATAWIDTH_8);
 8001e82:	2000      	movs	r0, #0
 8001e84:	f7ff ff32 	bl	8001cec <mma8653_setDataWidth>
	mma8653_setDataRate(RATE_200Hz);
 8001e88:	2002      	movs	r0, #2
 8001e8a:	f7ff ff09 	bl	8001ca0 <mma8653_setDataRate>
	mma8653_initIrq();
 8001e8e:	f7ff ffa1 	bl	8001dd4 <mma8653_initIrq>

	apa102_allOff();
 8001e92:	f000 fbf9 	bl	8002688 <apa102_allOff>

	RowsLogic = RowsVisible+2*RowsOverscan;
 8001e96:	4b33      	ldr	r3, [pc, #204]	; (8001f64 <displayInit+0xec>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	18db      	adds	r3, r3, r3
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	4b31      	ldr	r3, [pc, #196]	; (8001f68 <displayInit+0xf0>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	18d3      	adds	r3, r2, r3
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	4b30      	ldr	r3, [pc, #192]	; (8001f6c <displayInit+0xf4>)
 8001eac:	701a      	strb	r2, [r3, #0]

	//set up timer TIM2 for measuring t_frame
	//upcounting,12MHz-> prescaler = 4,
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);
 8001eae:	2101      	movs	r1, #1
 8001eb0:	2001      	movs	r0, #1
 8001eb2:	f004 f933 	bl	800611c <RCC_APB1PeriphClockCmd>
	TIM2->CR1 = 0;
 8001eb6:	2380      	movs	r3, #128	; 0x80
 8001eb8:	05db      	lsls	r3, r3, #23
 8001eba:	2200      	movs	r2, #0
 8001ebc:	801a      	strh	r2, [r3, #0]
	TIM2->PSC = 48;
 8001ebe:	2380      	movs	r3, #128	; 0x80
 8001ec0:	05db      	lsls	r3, r3, #23
 8001ec2:	2230      	movs	r2, #48	; 0x30
 8001ec4:	851a      	strh	r2, [r3, #40]	; 0x28
	//reset the counter:
	TIM2->EGR |= TIM_EGR_UG;
 8001ec6:	2380      	movs	r3, #128	; 0x80
 8001ec8:	05db      	lsls	r3, r3, #23
 8001eca:	2280      	movs	r2, #128	; 0x80
 8001ecc:	05d2      	lsls	r2, r2, #23
 8001ece:	8a92      	ldrh	r2, [r2, #20]
 8001ed0:	b292      	uxth	r2, r2
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	b292      	uxth	r2, r2
 8001ed8:	829a      	strh	r2, [r3, #20]
	TIM2->CR1 |= TIM_CR1_CEN;
 8001eda:	2380      	movs	r3, #128	; 0x80
 8001edc:	05db      	lsls	r3, r3, #23
 8001ede:	2280      	movs	r2, #128	; 0x80
 8001ee0:	05d2      	lsls	r2, r2, #23
 8001ee2:	8812      	ldrh	r2, [r2, #0]
 8001ee4:	b292      	uxth	r2, r2
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	b292      	uxth	r2, r2
 8001eec:	801a      	strh	r2, [r3, #0]


	//setup TIM2 Compare Channel 1 for setting the length of the LockTime!
	//the data-ready interrupt from the sensor is ignored during that time
	//set to 30 ms (a faster swipe doesn't seem to be possible by hand)
	TIM2->DIER |= TIM_DIER_CC1IE;
 8001eee:	2380      	movs	r3, #128	; 0x80
 8001ef0:	05db      	lsls	r3, r3, #23
 8001ef2:	2280      	movs	r2, #128	; 0x80
 8001ef4:	05d2      	lsls	r2, r2, #23
 8001ef6:	8992      	ldrh	r2, [r2, #12]
 8001ef8:	b292      	uxth	r2, r2
 8001efa:	2102      	movs	r1, #2
 8001efc:	430a      	orrs	r2, r1
 8001efe:	b292      	uxth	r2, r2
 8001f00:	819a      	strh	r2, [r3, #12]
	TIM2->CCR1 = 30000;
 8001f02:	2380      	movs	r3, #128	; 0x80
 8001f04:	05db      	lsls	r3, r3, #23
 8001f06:	4a1a      	ldr	r2, [pc, #104]	; (8001f70 <displayInit+0xf8>)
 8001f08:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCER |= TIM_CCER_CC1E;
 8001f0a:	2380      	movs	r3, #128	; 0x80
 8001f0c:	05db      	lsls	r3, r3, #23
 8001f0e:	2280      	movs	r2, #128	; 0x80
 8001f10:	05d2      	lsls	r2, r2, #23
 8001f12:	8c12      	ldrh	r2, [r2, #32]
 8001f14:	b292      	uxth	r2, r2
 8001f16:	2101      	movs	r1, #1
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	b292      	uxth	r2, r2
 8001f1c:	841a      	strh	r2, [r3, #32]
	NVIC_EnableIRQ(TIM2_IRQn);
 8001f1e:	200f      	movs	r0, #15
 8001f20:	f7ff ff94 	bl	8001e4c <NVIC_EnableIRQ>

	//set up timer TIM3 for triggering the lines with t_line (= t_frame/LINECOUNT)
	//upcounting 12Mhz, autoreload @ t_frame/LINECOUNT, interrupt @ overflow
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3,ENABLE);
 8001f24:	2101      	movs	r1, #1
 8001f26:	2002      	movs	r0, #2
 8001f28:	f004 f8f8 	bl	800611c <RCC_APB1PeriphClockCmd>
	TIM3->CR1 = 0;
 8001f2c:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <displayInit+0xfc>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	801a      	strh	r2, [r3, #0]
	TIM3->PSC = 48;
 8001f32:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <displayInit+0xfc>)
 8001f34:	2230      	movs	r2, #48	; 0x30
 8001f36:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM3->DIER |= TIM_DIER_UIE;
 8001f38:	4a0e      	ldr	r2, [pc, #56]	; (8001f74 <displayInit+0xfc>)
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <displayInit+0xfc>)
 8001f3c:	899b      	ldrh	r3, [r3, #12]
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	2101      	movs	r1, #1
 8001f42:	430b      	orrs	r3, r1
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	8193      	strh	r3, [r2, #12]
	//clear interrupt flag
	TIM3->SR &= ~TIM_SR_UIF;
 8001f48:	4a0a      	ldr	r2, [pc, #40]	; (8001f74 <displayInit+0xfc>)
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <displayInit+0xfc>)
 8001f4c:	8a1b      	ldrh	r3, [r3, #16]
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	2101      	movs	r1, #1
 8001f52:	438b      	bics	r3, r1
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	8213      	strh	r3, [r2, #16]
	//enable the IRQ
	NVIC_EnableIRQ(TIM3_IRQn);
 8001f58:	2010      	movs	r0, #16
 8001f5a:	f7ff ff77 	bl	8001e4c <NVIC_EnableIRQ>
	//don't activate this timer now, because an overflow would produce a line on the display!
}
 8001f5e:	46c0      	nop			; (mov r8, r8)
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	20000188 	.word	0x20000188
 8001f68:	200001cc 	.word	0x200001cc
 8001f6c:	200001cd 	.word	0x200001cd
 8001f70:	00007530 	.word	0x00007530
 8001f74:	40000400 	.word	0x40000400

08001f78 <displaySendLine>:

//called 2 times for every row
//first call should switch on the LEDs according to rowData, 2nd should switch them off to insert a blank row
//without this blank row, the rows are squeezed together too much
void displaySendLine()
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
	//clear interrupt flag
	TIM3->SR &= ~TIM_SR_UIF;
 8001f7c:	4a2c      	ldr	r2, [pc, #176]	; (8002030 <displaySendLine+0xb8>)
 8001f7e:	4b2c      	ldr	r3, [pc, #176]	; (8002030 <displaySendLine+0xb8>)
 8001f80:	8a1b      	ldrh	r3, [r3, #16]
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	2101      	movs	r1, #1
 8001f86:	438b      	bics	r3, r1
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	8213      	strh	r3, [r2, #16]

	//left side is the row, right side the gap
	if(DisplayPosition == DISP_POS_ROW_START)
 8001f8c:	4b29      	ldr	r3, [pc, #164]	; (8002034 <displaySendLine+0xbc>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d128      	bne.n	8001fe8 <displaySendLine+0x70>
	{
		//if row is in the visible area
		if(RowNumber >= RowsOverscan && RowNumber < RowsOverscan+RowsVisible)
 8001f96:	4b28      	ldr	r3, [pc, #160]	; (8002038 <displaySendLine+0xc0>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	4b27      	ldr	r3, [pc, #156]	; (800203c <displaySendLine+0xc4>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d31a      	bcc.n	8001fdc <displaySendLine+0x64>
 8001fa6:	4b24      	ldr	r3, [pc, #144]	; (8002038 <displaySendLine+0xc0>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	001a      	movs	r2, r3
 8001fae:	4b23      	ldr	r3, [pc, #140]	; (800203c <displaySendLine+0xc4>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	0019      	movs	r1, r3
 8001fb6:	4b22      	ldr	r3, [pc, #136]	; (8002040 <displaySendLine+0xc8>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	18cb      	adds	r3, r1, r3
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	da0c      	bge.n	8001fdc <displaySendLine+0x64>
		{
			apa102_setPattern(DispRowMasks[RowNumber],31);
 8001fc2:	4b1d      	ldr	r3, [pc, #116]	; (8002038 <displaySendLine+0xc0>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	001a      	movs	r2, r3
 8001fca:	4b1e      	ldr	r3, [pc, #120]	; (8002044 <displaySendLine+0xcc>)
 8001fcc:	0052      	lsls	r2, r2, #1
 8001fce:	5ad3      	ldrh	r3, [r2, r3]
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	211f      	movs	r1, #31
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	f000 fad5 	bl	8002584 <apa102_setPattern>
 8001fda:	e001      	b.n	8001fe0 <displaySendLine+0x68>
		}
		else
		{
			//switch off the display
			apa102_allOff();
 8001fdc:	f000 fb54 	bl	8002688 <apa102_allOff>
		}
		DisplayPosition = DISP_POS_GAP_START;
 8001fe0:	4b14      	ldr	r3, [pc, #80]	; (8002034 <displaySendLine+0xbc>)
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	701a      	strb	r2, [r3, #0]
		}

	}


}
 8001fe6:	e01f      	b.n	8002028 <displaySendLine+0xb0>
		DisplayPosition = DISP_POS_GAP_START;
	}
	else //if(DisplayPosition == DISP_POS_GAP_START)
	{
		//switch off the display
		apa102_allOff();
 8001fe8:	f000 fb4e 	bl	8002688 <apa102_allOff>

		//next row
		RowNumber += rowStep;
 8001fec:	4b16      	ldr	r3, [pc, #88]	; (8002048 <displaySendLine+0xd0>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	b25b      	sxtb	r3, r3
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	4b10      	ldr	r3, [pc, #64]	; (8002038 <displaySendLine+0xc0>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	18d3      	adds	r3, r2, r3
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	; (8002038 <displaySendLine+0xc0>)
 8002000:	701a      	strb	r2, [r3, #0]
		DisplayPosition = DISP_POS_ROW_START;
 8002002:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <displaySendLine+0xbc>)
 8002004:	2200      	movs	r2, #0
 8002006:	701a      	strb	r2, [r3, #0]
		//prevent an overshoot if something with the timing doesn't fit
		if(RowNumber >= RowsLogic)
 8002008:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <displaySendLine+0xc0>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	b2da      	uxtb	r2, r3
 800200e:	4b0f      	ldr	r3, [pc, #60]	; (800204c <displaySendLine+0xd4>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	b2db      	uxtb	r3, r3
 8002014:	429a      	cmp	r2, r3
 8002016:	d307      	bcc.n	8002028 <displaySendLine+0xb0>
		{
			//prevent TIM3 from triggering a new row by stopping it
			TIM3->CR1 &= ~TIM_CR1_CEN;
 8002018:	4a05      	ldr	r2, [pc, #20]	; (8002030 <displaySendLine+0xb8>)
 800201a:	4b05      	ldr	r3, [pc, #20]	; (8002030 <displaySendLine+0xb8>)
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	b29b      	uxth	r3, r3
 8002020:	2101      	movs	r1, #1
 8002022:	438b      	bics	r3, r1
 8002024:	b29b      	uxth	r3, r3
 8002026:	8013      	strh	r3, [r2, #0]
		}

	}


}
 8002028:	46c0      	nop			; (mov r8, r8)
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	46c0      	nop			; (mov r8, r8)
 8002030:	40000400 	.word	0x40000400
 8002034:	200003ec 	.word	0x200003ec
 8002038:	2000014a 	.word	0x2000014a
 800203c:	20000188 	.word	0x20000188
 8002040:	200001cc 	.word	0x200001cc
 8002044:	2000018c 	.word	0x2000018c
 8002048:	20000149 	.word	0x20000149
 800204c:	200001cd 	.word	0x200001cd

08002050 <displayEndOfLocktime>:

//triggered by TIM2 CompareMatch
void displayEndOfLocktime()
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
	//clear the flag and read the data (so the sensor releases the INT line)
	EXTI->PR |= EXTI_PR_PR2;
 8002054:	4b0d      	ldr	r3, [pc, #52]	; (800208c <displayEndOfLocktime+0x3c>)
 8002056:	4a0d      	ldr	r2, [pc, #52]	; (800208c <displayEndOfLocktime+0x3c>)
 8002058:	6952      	ldr	r2, [r2, #20]
 800205a:	2104      	movs	r1, #4
 800205c:	430a      	orrs	r2, r1
 800205e:	615a      	str	r2, [r3, #20]
	mma8653_read8();
 8002060:	f7ff fe76 	bl	8001d50 <mma8653_read8>

	//reenable the EXTI interrupt
	EXTI->IMR |= EXTI_EMR_MR2;
 8002064:	4b09      	ldr	r3, [pc, #36]	; (800208c <displayEndOfLocktime+0x3c>)
 8002066:	4a09      	ldr	r2, [pc, #36]	; (800208c <displayEndOfLocktime+0x3c>)
 8002068:	6812      	ldr	r2, [r2, #0]
 800206a:	2104      	movs	r1, #4
 800206c:	430a      	orrs	r2, r1
 800206e:	601a      	str	r2, [r3, #0]

	//clear Flag for this Interrupt
	TIM2->SR &= ~TIM_SR_CC1IF;
 8002070:	2380      	movs	r3, #128	; 0x80
 8002072:	05db      	lsls	r3, r3, #23
 8002074:	2280      	movs	r2, #128	; 0x80
 8002076:	05d2      	lsls	r2, r2, #23
 8002078:	8a12      	ldrh	r2, [r2, #16]
 800207a:	b292      	uxth	r2, r2
 800207c:	2102      	movs	r1, #2
 800207e:	438a      	bics	r2, r1
 8002080:	b292      	uxth	r2, r2
 8002082:	821a      	strh	r2, [r3, #16]
}
 8002084:	46c0      	nop			; (mov r8, r8)
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	46c0      	nop			; (mov r8, r8)
 800208c:	40010400 	.word	0x40010400

08002090 <displayFrameStart>:

void displayFrameStart()
{
 8002090:	b590      	push	{r4, r7, lr}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0

	//deactivate the peak detection for some time after a valid return point
	//by deactivating the EXTI interrupt
	EXTI->IMR &= ~EXTI_EMR_MR2;
 8002096:	4b23      	ldr	r3, [pc, #140]	; (8002124 <displayFrameStart+0x94>)
 8002098:	4a22      	ldr	r2, [pc, #136]	; (8002124 <displayFrameStart+0x94>)
 800209a:	6812      	ldr	r2, [r2, #0]
 800209c:	2104      	movs	r1, #4
 800209e:	438a      	bics	r2, r1
 80020a0:	601a      	str	r2, [r3, #0]

	//take the counter value from timer2:
	uint32_t tFrame = TIM2->CNT;
 80020a2:	2380      	movs	r3, #128	; 0x80
 80020a4:	05db      	lsls	r3, r3, #23
 80020a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a8:	607b      	str	r3, [r7, #4]

	//calculate t_row and save it to the auto-reload register of tim3
	TIM3->ARR = (uint16_t)(tFrame / (RowsLogic*2));
 80020aa:	4c1f      	ldr	r4, [pc, #124]	; (8002128 <displayFrameStart+0x98>)
 80020ac:	4b1f      	ldr	r3, [pc, #124]	; (800212c <displayFrameStart+0x9c>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	0019      	movs	r1, r3
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7fe f826 	bl	8000108 <__aeabi_uidiv>
 80020bc:	0003      	movs	r3, r0
 80020be:	041b      	lsls	r3, r3, #16
 80020c0:	0c1b      	lsrs	r3, r3, #16
 80020c2:	62e3      	str	r3, [r4, #44]	; 0x2c
	//clear interrupt flag for TIM3
	TIM3->SR &= ~TIM_SR_UIF;
 80020c4:	4a18      	ldr	r2, [pc, #96]	; (8002128 <displayFrameStart+0x98>)
 80020c6:	4b18      	ldr	r3, [pc, #96]	; (8002128 <displayFrameStart+0x98>)
 80020c8:	8a1b      	ldrh	r3, [r3, #16]
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	2101      	movs	r1, #1
 80020ce:	438b      	bics	r3, r1
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	8213      	strh	r3, [r2, #16]
	//reset both timers
	TIM2->EGR |= TIM_EGR_UG;
 80020d4:	2380      	movs	r3, #128	; 0x80
 80020d6:	05db      	lsls	r3, r3, #23
 80020d8:	2280      	movs	r2, #128	; 0x80
 80020da:	05d2      	lsls	r2, r2, #23
 80020dc:	8a92      	ldrh	r2, [r2, #20]
 80020de:	b292      	uxth	r2, r2
 80020e0:	2101      	movs	r1, #1
 80020e2:	430a      	orrs	r2, r1
 80020e4:	b292      	uxth	r2, r2
 80020e6:	829a      	strh	r2, [r3, #20]
	TIM3->EGR |= TIM_EGR_UG;
 80020e8:	4a0f      	ldr	r2, [pc, #60]	; (8002128 <displayFrameStart+0x98>)
 80020ea:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <displayFrameStart+0x98>)
 80020ec:	8a9b      	ldrh	r3, [r3, #20]
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	2101      	movs	r1, #1
 80020f2:	430b      	orrs	r3, r1
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	8293      	strh	r3, [r2, #20]
	//start both timers
	TIM2->CR1 |= TIM_CR1_CEN;
 80020f8:	2380      	movs	r3, #128	; 0x80
 80020fa:	05db      	lsls	r3, r3, #23
 80020fc:	2280      	movs	r2, #128	; 0x80
 80020fe:	05d2      	lsls	r2, r2, #23
 8002100:	8812      	ldrh	r2, [r2, #0]
 8002102:	b292      	uxth	r2, r2
 8002104:	2101      	movs	r1, #1
 8002106:	430a      	orrs	r2, r1
 8002108:	b292      	uxth	r2, r2
 800210a:	801a      	strh	r2, [r3, #0]
	TIM3->CR1 |= TIM_CR1_CEN;
 800210c:	4a06      	ldr	r2, [pc, #24]	; (8002128 <displayFrameStart+0x98>)
 800210e:	4b06      	ldr	r3, [pc, #24]	; (8002128 <displayFrameStart+0x98>)
 8002110:	881b      	ldrh	r3, [r3, #0]
 8002112:	b29b      	uxth	r3, r3
 8002114:	2101      	movs	r1, #1
 8002116:	430b      	orrs	r3, r1
 8002118:	b29b      	uxth	r3, r3
 800211a:	8013      	strh	r3, [r2, #0]
}
 800211c:	46c0      	nop			; (mov r8, r8)
 800211e:	46bd      	mov	sp, r7
 8002120:	b003      	add	sp, #12
 8002122:	bd90      	pop	{r4, r7, pc}
 8002124:	40010400 	.word	0x40010400
 8002128:	40000400 	.word	0x40000400
 800212c:	200001cd 	.word	0x200001cd

08002130 <displayFindReturnPoint>:

//now this should be called with the sensors IRQ
void displayFindReturnPoint()
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0


	//read the output of the sensor
	//the low-pass filtering is done by the sensor!
	//this also lets the sensor release the interrupt line
	int8_t acc = mma8653_read8().x;
 8002136:	f7ff fe0b 	bl	8001d50 <mma8653_read8>
 800213a:	0003      	movs	r3, r0
 800213c:	001a      	movs	r2, r3
 800213e:	003b      	movs	r3, r7
 8002140:	1c11      	adds	r1, r2, #0
 8002142:	7019      	strb	r1, [r3, #0]
 8002144:	0411      	lsls	r1, r2, #16
 8002146:	0e09      	lsrs	r1, r1, #24
 8002148:	7059      	strb	r1, [r3, #1]
 800214a:	0212      	lsls	r2, r2, #8
 800214c:	0e12      	lsrs	r2, r2, #24
 800214e:	709a      	strb	r2, [r3, #2]
 8002150:	1dbb      	adds	r3, r7, #6
 8002152:	003a      	movs	r2, r7
 8002154:	7812      	ldrb	r2, [r2, #0]
 8002156:	701a      	strb	r2, [r3, #0]

	//separate value and sign for faster calculations
	uint8_t accAbs;
	if(acc >= 0)
 8002158:	1dbb      	adds	r3, r7, #6
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b7f      	cmp	r3, #127	; 0x7f
 800215e:	d804      	bhi.n	800216a <displayFindReturnPoint+0x3a>
	{
		accAbs = acc;
 8002160:	1dfb      	adds	r3, r7, #7
 8002162:	1dba      	adds	r2, r7, #6
 8002164:	7812      	ldrb	r2, [r2, #0]
 8002166:	701a      	strb	r2, [r3, #0]
 8002168:	e004      	b.n	8002174 <displayFindReturnPoint+0x44>
	}
	else
	{
		accAbs = -acc;
 800216a:	1dbb      	adds	r3, r7, #6
 800216c:	781a      	ldrb	r2, [r3, #0]
 800216e:	1dfb      	adds	r3, r7, #7
 8002170:	4252      	negs	r2, r2
 8002172:	701a      	strb	r2, [r3, #0]
	 * the return doesn't happen in one point, but takes some time (>10ms)
	 * ->stop the time measurement as soon as the acc gets higher that the threshold,
	 * ->start the next meas and the display if the acc gets lower than the threshold again
	 */

	switch(movementState)
 8002174:	4b5f      	ldr	r3, [pc, #380]	; (80022f4 <displayFindReturnPoint+0x1c4>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b04      	cmp	r3, #4
 800217c:	d900      	bls.n	8002180 <displayFindReturnPoint+0x50>
 800217e:	e093      	b.n	80022a8 <displayFindReturnPoint+0x178>
 8002180:	009a      	lsls	r2, r3, #2
 8002182:	4b5d      	ldr	r3, [pc, #372]	; (80022f8 <displayFindReturnPoint+0x1c8>)
 8002184:	18d3      	adds	r3, r2, r3
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	469f      	mov	pc, r3
	{
	case STATE_UNKNOWN:
		if(accAbs > ACC_RETURN_TH)
 800218a:	1dfb      	adds	r3, r7, #7
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2b64      	cmp	r3, #100	; 0x64
 8002190:	d800      	bhi.n	8002194 <displayFindReturnPoint+0x64>
 8002192:	e080      	b.n	8002296 <displayFindReturnPoint+0x166>
		{	//this could be the first return point
			//stop TIM2
			TIM2->CR1 &= ~TIM_CR1_CEN;
 8002194:	2380      	movs	r3, #128	; 0x80
 8002196:	05db      	lsls	r3, r3, #23
 8002198:	2280      	movs	r2, #128	; 0x80
 800219a:	05d2      	lsls	r2, r2, #23
 800219c:	8812      	ldrh	r2, [r2, #0]
 800219e:	b292      	uxth	r2, r2
 80021a0:	2101      	movs	r1, #1
 80021a2:	438a      	bics	r2, r1
 80021a4:	b292      	uxth	r2, r2
 80021a6:	801a      	strh	r2, [r3, #0]
			//prevent TIM3 from triggering a new row by stopping it
			TIM3->CR1 &= ~TIM_CR1_CEN;
 80021a8:	4a54      	ldr	r2, [pc, #336]	; (80022fc <displayFindReturnPoint+0x1cc>)
 80021aa:	4b54      	ldr	r3, [pc, #336]	; (80022fc <displayFindReturnPoint+0x1cc>)
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	2101      	movs	r1, #1
 80021b2:	438b      	bics	r3, r1
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	8013      	strh	r3, [r2, #0]


			if(acc > 0)
 80021b8:	1dbb      	adds	r3, r7, #6
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	b25b      	sxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	dd03      	ble.n	80021ca <displayFindReturnPoint+0x9a>
			{
				movementState = STATE_RIGHT_END;
 80021c2:	4b4c      	ldr	r3, [pc, #304]	; (80022f4 <displayFindReturnPoint+0x1c4>)
 80021c4:	2203      	movs	r2, #3
 80021c6:	701a      	strb	r2, [r3, #0]
			else
			{
				movementState = STATE_LEFT_END;
			}
		}
		break;
 80021c8:	e065      	b.n	8002296 <displayFindReturnPoint+0x166>
			{
				movementState = STATE_RIGHT_END;
			}
			else
			{
				movementState = STATE_LEFT_END;
 80021ca:	4b4a      	ldr	r3, [pc, #296]	; (80022f4 <displayFindReturnPoint+0x1c4>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 80021d0:	e061      	b.n	8002296 <displayFindReturnPoint+0x166>
	case STATE_LEFT_END:
		if(accAbs < ACC_RETURN_TH)
 80021d2:	1dfb      	adds	r3, r7, #7
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b63      	cmp	r3, #99	; 0x63
 80021d8:	d85f      	bhi.n	800229a <displayFindReturnPoint+0x16a>
		{
			rowStep = 1;
 80021da:	4b49      	ldr	r3, [pc, #292]	; (8002300 <displayFindReturnPoint+0x1d0>)
 80021dc:	2201      	movs	r2, #1
 80021de:	701a      	strb	r2, [r3, #0]
			RowNumber = 0;
 80021e0:	4b48      	ldr	r3, [pc, #288]	; (8002304 <displayFindReturnPoint+0x1d4>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	701a      	strb	r2, [r3, #0]
			DisplayPosition = DISP_POS_ROW_START;
 80021e6:	4b48      	ldr	r3, [pc, #288]	; (8002308 <displayFindReturnPoint+0x1d8>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	701a      	strb	r2, [r3, #0]
			//end of return phase
			displayFrameStart();
 80021ec:	f7ff ff50 	bl	8002090 <displayFrameStart>
			movementState = STATE_MOVE_FORW;
 80021f0:	4b40      	ldr	r3, [pc, #256]	; (80022f4 <displayFindReturnPoint+0x1c4>)
 80021f2:	2202      	movs	r2, #2
 80021f4:	701a      	strb	r2, [r3, #0]
		}
		break;
 80021f6:	e050      	b.n	800229a <displayFindReturnPoint+0x16a>
	case STATE_RIGHT_END:
		if(accAbs < ACC_RETURN_TH)
 80021f8:	1dfb      	adds	r3, r7, #7
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b63      	cmp	r3, #99	; 0x63
 80021fe:	d84e      	bhi.n	800229e <displayFindReturnPoint+0x16e>
		{
			//end of return phase
			rowStep = -1;
 8002200:	4b3f      	ldr	r3, [pc, #252]	; (8002300 <displayFindReturnPoint+0x1d0>)
 8002202:	22ff      	movs	r2, #255	; 0xff
 8002204:	701a      	strb	r2, [r3, #0]
			RowNumber = RowsLogic;
 8002206:	4b41      	ldr	r3, [pc, #260]	; (800230c <displayFindReturnPoint+0x1dc>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	b2da      	uxtb	r2, r3
 800220c:	4b3d      	ldr	r3, [pc, #244]	; (8002304 <displayFindReturnPoint+0x1d4>)
 800220e:	701a      	strb	r2, [r3, #0]
			DisplayPosition = DISP_POS_GAP_START;
 8002210:	4b3d      	ldr	r3, [pc, #244]	; (8002308 <displayFindReturnPoint+0x1d8>)
 8002212:	2201      	movs	r2, #1
 8002214:	701a      	strb	r2, [r3, #0]
			displayFrameStart();
 8002216:	f7ff ff3b 	bl	8002090 <displayFrameStart>


			movementState = STATE_MOVE_BACKW;
 800221a:	4b36      	ldr	r3, [pc, #216]	; (80022f4 <displayFindReturnPoint+0x1c4>)
 800221c:	2204      	movs	r2, #4
 800221e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002220:	e03d      	b.n	800229e <displayFindReturnPoint+0x16e>
	case STATE_MOVE_FORW:
		if(acc > ACC_RETURN_TH)
 8002222:	1dbb      	adds	r3, r7, #6
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	b25b      	sxtb	r3, r3
 8002228:	2b64      	cmp	r3, #100	; 0x64
 800222a:	dd3a      	ble.n	80022a2 <displayFindReturnPoint+0x172>
		{
			//stop TIM2
			TIM2->CR1 &= ~TIM_CR1_CEN;
 800222c:	2380      	movs	r3, #128	; 0x80
 800222e:	05db      	lsls	r3, r3, #23
 8002230:	2280      	movs	r2, #128	; 0x80
 8002232:	05d2      	lsls	r2, r2, #23
 8002234:	8812      	ldrh	r2, [r2, #0]
 8002236:	b292      	uxth	r2, r2
 8002238:	2101      	movs	r1, #1
 800223a:	438a      	bics	r2, r1
 800223c:	b292      	uxth	r2, r2
 800223e:	801a      	strh	r2, [r3, #0]
			//prevent TIM3 from triggering a new row by stopping it
			TIM3->CR1 &= ~TIM_CR1_CEN;
 8002240:	4a2e      	ldr	r2, [pc, #184]	; (80022fc <displayFindReturnPoint+0x1cc>)
 8002242:	4b2e      	ldr	r3, [pc, #184]	; (80022fc <displayFindReturnPoint+0x1cc>)
 8002244:	881b      	ldrh	r3, [r3, #0]
 8002246:	b29b      	uxth	r3, r3
 8002248:	2101      	movs	r1, #1
 800224a:	438b      	bics	r3, r1
 800224c:	b29b      	uxth	r3, r3
 800224e:	8013      	strh	r3, [r2, #0]
			//switch off the display
			apa102_allOff();
 8002250:	f000 fa1a 	bl	8002688 <apa102_allOff>
			movementState = STATE_RIGHT_END;
 8002254:	4b27      	ldr	r3, [pc, #156]	; (80022f4 <displayFindReturnPoint+0x1c4>)
 8002256:	2203      	movs	r2, #3
 8002258:	701a      	strb	r2, [r3, #0]
		}
		break;
 800225a:	e022      	b.n	80022a2 <displayFindReturnPoint+0x172>
	case STATE_MOVE_BACKW:
		if(acc < -ACC_RETURN_TH)
 800225c:	1dbb      	adds	r3, r7, #6
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	b25b      	sxtb	r3, r3
 8002262:	3364      	adds	r3, #100	; 0x64
 8002264:	da1f      	bge.n	80022a6 <displayFindReturnPoint+0x176>
		{
			//stop TIM2
			TIM2->CR1 &= ~TIM_CR1_CEN;
 8002266:	2380      	movs	r3, #128	; 0x80
 8002268:	05db      	lsls	r3, r3, #23
 800226a:	2280      	movs	r2, #128	; 0x80
 800226c:	05d2      	lsls	r2, r2, #23
 800226e:	8812      	ldrh	r2, [r2, #0]
 8002270:	b292      	uxth	r2, r2
 8002272:	2101      	movs	r1, #1
 8002274:	438a      	bics	r2, r1
 8002276:	b292      	uxth	r2, r2
 8002278:	801a      	strh	r2, [r3, #0]
			//prevent TIM3 from triggering a new row by stopping it
			TIM3->CR1 &= ~TIM_CR1_CEN;
 800227a:	4a20      	ldr	r2, [pc, #128]	; (80022fc <displayFindReturnPoint+0x1cc>)
 800227c:	4b1f      	ldr	r3, [pc, #124]	; (80022fc <displayFindReturnPoint+0x1cc>)
 800227e:	881b      	ldrh	r3, [r3, #0]
 8002280:	b29b      	uxth	r3, r3
 8002282:	2101      	movs	r1, #1
 8002284:	438b      	bics	r3, r1
 8002286:	b29b      	uxth	r3, r3
 8002288:	8013      	strh	r3, [r2, #0]
			//switch off the display
			apa102_allOff();
 800228a:	f000 f9fd 	bl	8002688 <apa102_allOff>
			movementState = STATE_LEFT_END;
 800228e:	4b19      	ldr	r3, [pc, #100]	; (80022f4 <displayFindReturnPoint+0x1c4>)
 8002290:	2201      	movs	r2, #1
 8002292:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002294:	e007      	b.n	80022a6 <displayFindReturnPoint+0x176>
			else
			{
				movementState = STATE_LEFT_END;
			}
		}
		break;
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	e006      	b.n	80022a8 <displayFindReturnPoint+0x178>
			DisplayPosition = DISP_POS_ROW_START;
			//end of return phase
			displayFrameStart();
			movementState = STATE_MOVE_FORW;
		}
		break;
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	e004      	b.n	80022a8 <displayFindReturnPoint+0x178>
			displayFrameStart();


			movementState = STATE_MOVE_BACKW;
		}
		break;
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	e002      	b.n	80022a8 <displayFindReturnPoint+0x178>
			TIM3->CR1 &= ~TIM_CR1_CEN;
			//switch off the display
			apa102_allOff();
			movementState = STATE_RIGHT_END;
		}
		break;
 80022a2:	46c0      	nop			; (mov r8, r8)
 80022a4:	e000      	b.n	80022a8 <displayFindReturnPoint+0x178>
			TIM3->CR1 &= ~TIM_CR1_CEN;
			//switch off the display
			apa102_allOff();
			movementState = STATE_LEFT_END;
		}
		break;
 80022a6:	46c0      	nop			; (mov r8, r8)
	}

	//no state other than STATE_UNKNOWN should last longer than T_FRAME_MAX
	//-> if TIM2 exceeds this time, stop it and
	//if this value is out of bounds, reset TIM2 and return to STATE_UNKNOWN
	if(TIM2->CNT > T_FRAME_MAX)
 80022a8:	2380      	movs	r3, #128	; 0x80
 80022aa:	05db      	lsls	r3, r3, #23
 80022ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ae:	4a18      	ldr	r2, [pc, #96]	; (8002310 <displayFindReturnPoint+0x1e0>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d918      	bls.n	80022e6 <displayFindReturnPoint+0x1b6>
	{//reset the counter:
		TIM2->EGR |= TIM_EGR_UG;
 80022b4:	2380      	movs	r3, #128	; 0x80
 80022b6:	05db      	lsls	r3, r3, #23
 80022b8:	2280      	movs	r2, #128	; 0x80
 80022ba:	05d2      	lsls	r2, r2, #23
 80022bc:	8a92      	ldrh	r2, [r2, #20]
 80022be:	b292      	uxth	r2, r2
 80022c0:	2101      	movs	r1, #1
 80022c2:	430a      	orrs	r2, r1
 80022c4:	b292      	uxth	r2, r2
 80022c6:	829a      	strh	r2, [r3, #20]
		//and stop it
		TIM2->CR1 |= TIM_CR1_CEN;
 80022c8:	2380      	movs	r3, #128	; 0x80
 80022ca:	05db      	lsls	r3, r3, #23
 80022cc:	2280      	movs	r2, #128	; 0x80
 80022ce:	05d2      	lsls	r2, r2, #23
 80022d0:	8812      	ldrh	r2, [r2, #0]
 80022d2:	b292      	uxth	r2, r2
 80022d4:	2101      	movs	r1, #1
 80022d6:	430a      	orrs	r2, r1
 80022d8:	b292      	uxth	r2, r2
 80022da:	801a      	strh	r2, [r3, #0]
		//switch off the display
		apa102_allOff();
 80022dc:	f000 f9d4 	bl	8002688 <apa102_allOff>
		//set state
		movementState = STATE_UNKNOWN;
 80022e0:	4b04      	ldr	r3, [pc, #16]	; (80022f4 <displayFindReturnPoint+0x1c4>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	701a      	strb	r2, [r3, #0]
	}

	EXTI_ClearITPendingBit(EXTI_Line2);
 80022e6:	2004      	movs	r0, #4
 80022e8:	f004 faf6 	bl	80068d8 <EXTI_ClearITPendingBit>

}
 80022ec:	46c0      	nop			; (mov r8, r8)
 80022ee:	46bd      	mov	sp, r7
 80022f0:	b002      	add	sp, #8
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	200003ed 	.word	0x200003ed
 80022f8:	0800763c 	.word	0x0800763c
 80022fc:	40000400 	.word	0x40000400
 8002300:	20000149 	.word	0x20000149
 8002304:	2000014a 	.word	0x2000014a
 8002308:	200003ec 	.word	0x200003ec
 800230c:	200001cd 	.word	0x200001cd
 8002310:	003fffc0 	.word	0x003fffc0

08002314 <apa102_init>:
colorVrgb leds[LED_CNT];

uint8_t spiSendData[12+4*LED_CNT];

void apa102_init()
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b092      	sub	sp, #72	; 0x48
 8002318:	af00      	add	r7, sp, #0

	//enable clock for periphery modules
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 800231a:	2380      	movs	r3, #128	; 0x80
 800231c:	029b      	lsls	r3, r3, #10
 800231e:	2101      	movs	r1, #1
 8002320:	0018      	movs	r0, r3
 8002322:	f003 febb 	bl	800609c <RCC_AHBPeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 8002326:	2380      	movs	r3, #128	; 0x80
 8002328:	015b      	lsls	r3, r3, #5
 800232a:	2101      	movs	r1, #1
 800232c:	0018      	movs	r0, r3
 800232e:	f003 fed5 	bl	80060dc <RCC_APB2PeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1,ENABLE);
 8002332:	2101      	movs	r1, #1
 8002334:	2001      	movs	r0, #1
 8002336:	f003 feb1 	bl	800609c <RCC_AHBPeriphClockCmd>

	//gpio
	GPIO_InitTypeDef GPIO_InitStructure;
	//configure PINs PA7 and PA5 as AF out
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_7;
 800233a:	2340      	movs	r3, #64	; 0x40
 800233c:	18fb      	adds	r3, r7, r3
 800233e:	22a0      	movs	r2, #160	; 0xa0
 8002340:	601a      	str	r2, [r3, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002342:	2340      	movs	r3, #64	; 0x40
 8002344:	18fb      	adds	r3, r7, r3
 8002346:	2202      	movs	r2, #2
 8002348:	711a      	strb	r2, [r3, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800234a:	2340      	movs	r3, #64	; 0x40
 800234c:	18fb      	adds	r3, r7, r3
 800234e:	2200      	movs	r2, #0
 8002350:	719a      	strb	r2, [r3, #6]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002352:	2340      	movs	r3, #64	; 0x40
 8002354:	18fb      	adds	r3, r7, r3
 8002356:	2203      	movs	r2, #3
 8002358:	715a      	strb	r2, [r3, #5]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 800235a:	2340      	movs	r3, #64	; 0x40
 800235c:	18fa      	adds	r2, r7, r3
 800235e:	2390      	movs	r3, #144	; 0x90
 8002360:	05db      	lsls	r3, r3, #23
 8002362:	0011      	movs	r1, r2
 8002364:	0018      	movs	r0, r3
 8002366:	f004 f873 	bl	8006450 <GPIO_Init>

	//init the SPI module
	SPI_InitTypeDef SPI_InitStruct;
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
 800236a:	232c      	movs	r3, #44	; 0x2c
 800236c:	18fb      	adds	r3, r7, r3
 800236e:	2210      	movs	r2, #16
 8002370:	819a      	strh	r2, [r3, #12]
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_2Edge;
 8002372:	232c      	movs	r3, #44	; 0x2c
 8002374:	18fb      	adds	r3, r7, r3
 8002376:	2201      	movs	r2, #1
 8002378:	811a      	strh	r2, [r3, #8]
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_High;
 800237a:	232c      	movs	r3, #44	; 0x2c
 800237c:	18fb      	adds	r3, r7, r3
 800237e:	2202      	movs	r2, #2
 8002380:	80da      	strh	r2, [r3, #6]
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
 8002382:	232c      	movs	r3, #44	; 0x2c
 8002384:	18fb      	adds	r3, r7, r3
 8002386:	22e0      	movs	r2, #224	; 0xe0
 8002388:	00d2      	lsls	r2, r2, #3
 800238a:	809a      	strh	r2, [r3, #4]
	SPI_InitStruct.SPI_Direction = SPI_Direction_Tx;
 800238c:	232c      	movs	r3, #44	; 0x2c
 800238e:	18fb      	adds	r3, r7, r3
 8002390:	2280      	movs	r2, #128	; 0x80
 8002392:	01d2      	lsls	r2, r2, #7
 8002394:	801a      	strh	r2, [r3, #0]
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
 8002396:	232c      	movs	r3, #44	; 0x2c
 8002398:	18fb      	adds	r3, r7, r3
 800239a:	2200      	movs	r2, #0
 800239c:	81da      	strh	r2, [r3, #14]
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
 800239e:	232c      	movs	r3, #44	; 0x2c
 80023a0:	18fb      	adds	r3, r7, r3
 80023a2:	2282      	movs	r2, #130	; 0x82
 80023a4:	0052      	lsls	r2, r2, #1
 80023a6:	805a      	strh	r2, [r3, #2]
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 80023a8:	232c      	movs	r3, #44	; 0x2c
 80023aa:	18fb      	adds	r3, r7, r3
 80023ac:	2280      	movs	r2, #128	; 0x80
 80023ae:	0092      	lsls	r2, r2, #2
 80023b0:	815a      	strh	r2, [r3, #10]
	SPI_Init(SPI1, &SPI_InitStruct);
 80023b2:	232c      	movs	r3, #44	; 0x2c
 80023b4:	18fb      	adds	r3, r7, r3
 80023b6:	4a1d      	ldr	r2, [pc, #116]	; (800242c <apa102_init+0x118>)
 80023b8:	0019      	movs	r1, r3
 80023ba:	0010      	movs	r0, r2
 80023bc:	f003 fd8a 	bl	8005ed4 <SPI_Init>

	SPI_I2S_DMACmd(SPI1,SPI_I2S_DMAReq_Tx,ENABLE);
 80023c0:	4b1a      	ldr	r3, [pc, #104]	; (800242c <apa102_init+0x118>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	2102      	movs	r1, #2
 80023c6:	0018      	movs	r0, r3
 80023c8:	f003 fe28 	bl	800601c <SPI_I2S_DMACmd>
	//start the SPI module:
	SPI_Cmd(SPI1,ENABLE);
 80023cc:	4b17      	ldr	r3, [pc, #92]	; (800242c <apa102_init+0x118>)
 80023ce:	2101      	movs	r1, #1
 80023d0:	0018      	movs	r0, r3
 80023d2:	f003 fe03 	bl	8005fdc <SPI_Cmd>

	DMA_InitTypeDef DMA_InitStruct;
	DMA_InitStruct.DMA_DIR = DMA_DIR_PeripheralDST;
 80023d6:	003b      	movs	r3, r7
 80023d8:	2210      	movs	r2, #16
 80023da:	609a      	str	r2, [r3, #8]
	DMA_InitStruct.DMA_M2M = DMA_M2M_Disable;
 80023dc:	003b      	movs	r3, r7
 80023de:	2200      	movs	r2, #0
 80023e0:	629a      	str	r2, [r3, #40]	; 0x28
	DMA_InitStruct.DMA_MemoryBaseAddr = (uint32_t)spiSendData;
 80023e2:	4a13      	ldr	r2, [pc, #76]	; (8002430 <apa102_init+0x11c>)
 80023e4:	003b      	movs	r3, r7
 80023e6:	605a      	str	r2, [r3, #4]
	DMA_InitStruct.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 80023e8:	003b      	movs	r3, r7
 80023ea:	2200      	movs	r2, #0
 80023ec:	61da      	str	r2, [r3, #28]
	DMA_InitStruct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80023ee:	003b      	movs	r3, r7
 80023f0:	2280      	movs	r2, #128	; 0x80
 80023f2:	615a      	str	r2, [r3, #20]
	DMA_InitStruct.DMA_Mode = DMA_Mode_Normal;
 80023f4:	003b      	movs	r3, r7
 80023f6:	2200      	movs	r2, #0
 80023f8:	621a      	str	r2, [r3, #32]
	DMA_InitStruct.DMA_PeripheralBaseAddr = (uint32_t)&(SPI1->DR);
 80023fa:	003b      	movs	r3, r7
 80023fc:	4a0d      	ldr	r2, [pc, #52]	; (8002434 <apa102_init+0x120>)
 80023fe:	601a      	str	r2, [r3, #0]
	DMA_InitStruct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8002400:	003b      	movs	r3, r7
 8002402:	2200      	movs	r2, #0
 8002404:	619a      	str	r2, [r3, #24]
	DMA_InitStruct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8002406:	003b      	movs	r3, r7
 8002408:	2200      	movs	r2, #0
 800240a:	611a      	str	r2, [r3, #16]
	DMA_InitStruct.DMA_Priority = DMA_Priority_High;
 800240c:	003b      	movs	r3, r7
 800240e:	2280      	movs	r2, #128	; 0x80
 8002410:	0192      	lsls	r2, r2, #6
 8002412:	625a      	str	r2, [r3, #36]	; 0x24
	DMA_Init(DMA1_Channel3, &DMA_InitStruct);
 8002414:	003b      	movs	r3, r7
 8002416:	4a08      	ldr	r2, [pc, #32]	; (8002438 <apa102_init+0x124>)
 8002418:	0019      	movs	r1, r3
 800241a:	0010      	movs	r0, r2
 800241c:	f004 fa6a 	bl	80068f4 <DMA_Init>

	apa102_allOff();
 8002420:	f000 f932 	bl	8002688 <apa102_allOff>

}
 8002424:	46c0      	nop			; (mov r8, r8)
 8002426:	46bd      	mov	sp, r7
 8002428:	b012      	add	sp, #72	; 0x48
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40013000 	.word	0x40013000
 8002430:	20000430 	.word	0x20000430
 8002434:	4001300c 	.word	0x4001300c
 8002438:	40020030 	.word	0x40020030

0800243c <updateStripe>:


void updateStripe()
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
	uint8_t ledIdx = 0;
 8002442:	1dfb      	adds	r3, r7, #7
 8002444:	2200      	movs	r2, #0
 8002446:	701a      	strb	r2, [r3, #0]
	uint8_t byteIdx = 0;
 8002448:	1dbb      	adds	r3, r7, #6
 800244a:	2200      	movs	r2, #0
 800244c:	701a      	strb	r2, [r3, #0]
	DMA_Cmd(DMA1_Channel3, DISABLE);
 800244e:	4b4a      	ldr	r3, [pc, #296]	; (8002578 <updateStripe+0x13c>)
 8002450:	2100      	movs	r1, #0
 8002452:	0018      	movs	r0, r3
 8002454:	f004 fa8c 	bl	8006970 <DMA_Cmd>
	//start frame
	for(uint8_t i = 0; i < 4; i++)
 8002458:	1d7b      	adds	r3, r7, #5
 800245a:	2200      	movs	r2, #0
 800245c:	701a      	strb	r2, [r3, #0]
 800245e:	e00e      	b.n	800247e <updateStripe+0x42>
	{
		spiSendData[byteIdx] = 0x00;
 8002460:	1dbb      	adds	r3, r7, #6
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	4a45      	ldr	r2, [pc, #276]	; (800257c <updateStripe+0x140>)
 8002466:	2100      	movs	r1, #0
 8002468:	54d1      	strb	r1, [r2, r3]
		byteIdx++;
 800246a:	1dbb      	adds	r3, r7, #6
 800246c:	781a      	ldrb	r2, [r3, #0]
 800246e:	1dbb      	adds	r3, r7, #6
 8002470:	3201      	adds	r2, #1
 8002472:	701a      	strb	r2, [r3, #0]
{
	uint8_t ledIdx = 0;
	uint8_t byteIdx = 0;
	DMA_Cmd(DMA1_Channel3, DISABLE);
	//start frame
	for(uint8_t i = 0; i < 4; i++)
 8002474:	1d7b      	adds	r3, r7, #5
 8002476:	781a      	ldrb	r2, [r3, #0]
 8002478:	1d7b      	adds	r3, r7, #5
 800247a:	3201      	adds	r2, #1
 800247c:	701a      	strb	r2, [r3, #0]
 800247e:	1d7b      	adds	r3, r7, #5
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b03      	cmp	r3, #3
 8002484:	d9ec      	bls.n	8002460 <updateStripe+0x24>
	{
		spiSendData[byteIdx] = 0x00;
		byteIdx++;
	}

	for(uint8_t i = 0; i < LED_CNT; i++)
 8002486:	1d3b      	adds	r3, r7, #4
 8002488:	2200      	movs	r2, #0
 800248a:	701a      	strb	r2, [r3, #0]
 800248c:	e04b      	b.n	8002526 <updateStripe+0xea>
	{
		//led frame
		spiSendData[byteIdx] = 0xE0 |(leds[ledIdx].global & 0x1F); //global
 800248e:	1dbb      	adds	r3, r7, #6
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	1dfa      	adds	r2, r7, #7
 8002494:	7811      	ldrb	r1, [r2, #0]
 8002496:	4a3a      	ldr	r2, [pc, #232]	; (8002580 <updateStripe+0x144>)
 8002498:	0089      	lsls	r1, r1, #2
 800249a:	5c8a      	ldrb	r2, [r1, r2]
 800249c:	2120      	movs	r1, #32
 800249e:	4249      	negs	r1, r1
 80024a0:	430a      	orrs	r2, r1
 80024a2:	b2d1      	uxtb	r1, r2
 80024a4:	4a35      	ldr	r2, [pc, #212]	; (800257c <updateStripe+0x140>)
 80024a6:	54d1      	strb	r1, [r2, r3]
		byteIdx++;
 80024a8:	1dbb      	adds	r3, r7, #6
 80024aa:	781a      	ldrb	r2, [r3, #0]
 80024ac:	1dbb      	adds	r3, r7, #6
 80024ae:	3201      	adds	r2, #1
 80024b0:	701a      	strb	r2, [r3, #0]
		spiSendData[byteIdx] = leds[ledIdx].blue;
 80024b2:	1dbb      	adds	r3, r7, #6
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	1dfa      	adds	r2, r7, #7
 80024b8:	7812      	ldrb	r2, [r2, #0]
 80024ba:	4931      	ldr	r1, [pc, #196]	; (8002580 <updateStripe+0x144>)
 80024bc:	0092      	lsls	r2, r2, #2
 80024be:	188a      	adds	r2, r1, r2
 80024c0:	3201      	adds	r2, #1
 80024c2:	7811      	ldrb	r1, [r2, #0]
 80024c4:	4a2d      	ldr	r2, [pc, #180]	; (800257c <updateStripe+0x140>)
 80024c6:	54d1      	strb	r1, [r2, r3]
		byteIdx++;
 80024c8:	1dbb      	adds	r3, r7, #6
 80024ca:	781a      	ldrb	r2, [r3, #0]
 80024cc:	1dbb      	adds	r3, r7, #6
 80024ce:	3201      	adds	r2, #1
 80024d0:	701a      	strb	r2, [r3, #0]
		spiSendData[byteIdx] = leds[ledIdx].green;
 80024d2:	1dbb      	adds	r3, r7, #6
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	1dfa      	adds	r2, r7, #7
 80024d8:	7812      	ldrb	r2, [r2, #0]
 80024da:	4929      	ldr	r1, [pc, #164]	; (8002580 <updateStripe+0x144>)
 80024dc:	0092      	lsls	r2, r2, #2
 80024de:	188a      	adds	r2, r1, r2
 80024e0:	3202      	adds	r2, #2
 80024e2:	7811      	ldrb	r1, [r2, #0]
 80024e4:	4a25      	ldr	r2, [pc, #148]	; (800257c <updateStripe+0x140>)
 80024e6:	54d1      	strb	r1, [r2, r3]
		byteIdx++;
 80024e8:	1dbb      	adds	r3, r7, #6
 80024ea:	781a      	ldrb	r2, [r3, #0]
 80024ec:	1dbb      	adds	r3, r7, #6
 80024ee:	3201      	adds	r2, #1
 80024f0:	701a      	strb	r2, [r3, #0]
		spiSendData[byteIdx] = leds[ledIdx].red;
 80024f2:	1dbb      	adds	r3, r7, #6
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	1dfa      	adds	r2, r7, #7
 80024f8:	7812      	ldrb	r2, [r2, #0]
 80024fa:	4921      	ldr	r1, [pc, #132]	; (8002580 <updateStripe+0x144>)
 80024fc:	0092      	lsls	r2, r2, #2
 80024fe:	188a      	adds	r2, r1, r2
 8002500:	3203      	adds	r2, #3
 8002502:	7811      	ldrb	r1, [r2, #0]
 8002504:	4a1d      	ldr	r2, [pc, #116]	; (800257c <updateStripe+0x140>)
 8002506:	54d1      	strb	r1, [r2, r3]
		byteIdx++;
 8002508:	1dbb      	adds	r3, r7, #6
 800250a:	781a      	ldrb	r2, [r3, #0]
 800250c:	1dbb      	adds	r3, r7, #6
 800250e:	3201      	adds	r2, #1
 8002510:	701a      	strb	r2, [r3, #0]
		ledIdx++;
 8002512:	1dfb      	adds	r3, r7, #7
 8002514:	781a      	ldrb	r2, [r3, #0]
 8002516:	1dfb      	adds	r3, r7, #7
 8002518:	3201      	adds	r2, #1
 800251a:	701a      	strb	r2, [r3, #0]
	{
		spiSendData[byteIdx] = 0x00;
		byteIdx++;
	}

	for(uint8_t i = 0; i < LED_CNT; i++)
 800251c:	1d3b      	adds	r3, r7, #4
 800251e:	781a      	ldrb	r2, [r3, #0]
 8002520:	1d3b      	adds	r3, r7, #4
 8002522:	3201      	adds	r2, #1
 8002524:	701a      	strb	r2, [r3, #0]
 8002526:	1d3b      	adds	r3, r7, #4
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b0f      	cmp	r3, #15
 800252c:	d9af      	bls.n	800248e <updateStripe+0x52>
		ledIdx++;
	}
	//end frame
	//this is not the Frame as stated in the Datasheet! our LEDs (SK9822) seem to be a bit different from the original APA102 here!
	//but it works this way...
	for(uint8_t i = 0; i < 8 ; i++)
 800252e:	1cfb      	adds	r3, r7, #3
 8002530:	2200      	movs	r2, #0
 8002532:	701a      	strb	r2, [r3, #0]
 8002534:	e00e      	b.n	8002554 <updateStripe+0x118>
	{
		spiSendData[byteIdx] = 0x00;
 8002536:	1dbb      	adds	r3, r7, #6
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	4a10      	ldr	r2, [pc, #64]	; (800257c <updateStripe+0x140>)
 800253c:	2100      	movs	r1, #0
 800253e:	54d1      	strb	r1, [r2, r3]
		byteIdx++;
 8002540:	1dbb      	adds	r3, r7, #6
 8002542:	781a      	ldrb	r2, [r3, #0]
 8002544:	1dbb      	adds	r3, r7, #6
 8002546:	3201      	adds	r2, #1
 8002548:	701a      	strb	r2, [r3, #0]
		ledIdx++;
	}
	//end frame
	//this is not the Frame as stated in the Datasheet! our LEDs (SK9822) seem to be a bit different from the original APA102 here!
	//but it works this way...
	for(uint8_t i = 0; i < 8 ; i++)
 800254a:	1cfb      	adds	r3, r7, #3
 800254c:	781a      	ldrb	r2, [r3, #0]
 800254e:	1cfb      	adds	r3, r7, #3
 8002550:	3201      	adds	r2, #1
 8002552:	701a      	strb	r2, [r3, #0]
 8002554:	1cfb      	adds	r3, r7, #3
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b07      	cmp	r3, #7
 800255a:	d9ec      	bls.n	8002536 <updateStripe+0xfa>
		byteIdx++;
	}


	//now the DMA has to send the spiSendData to the SPI tx fifo :)
	DMA_SetCurrDataCounter(DMA1_Channel3,12+4*LED_CNT);
 800255c:	4b06      	ldr	r3, [pc, #24]	; (8002578 <updateStripe+0x13c>)
 800255e:	214c      	movs	r1, #76	; 0x4c
 8002560:	0018      	movs	r0, r3
 8002562:	f004 fa23 	bl	80069ac <DMA_SetCurrDataCounter>
	DMA_Cmd(DMA1_Channel3, ENABLE);
 8002566:	4b04      	ldr	r3, [pc, #16]	; (8002578 <updateStripe+0x13c>)
 8002568:	2101      	movs	r1, #1
 800256a:	0018      	movs	r0, r3
 800256c:	f004 fa00 	bl	8006970 <DMA_Cmd>
}
 8002570:	46c0      	nop			; (mov r8, r8)
 8002572:	46bd      	mov	sp, r7
 8002574:	b002      	add	sp, #8
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40020030 	.word	0x40020030
 800257c:	20000430 	.word	0x20000430
 8002580:	200003f0 	.word	0x200003f0

08002584 <apa102_setPattern>:


//so far only one global color

void apa102_setPattern(uint16_t mask, uint8_t global)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	0002      	movs	r2, r0
 800258c:	1dbb      	adds	r3, r7, #6
 800258e:	801a      	strh	r2, [r3, #0]
 8002590:	1d7b      	adds	r3, r7, #5
 8002592:	1c0a      	adds	r2, r1, #0
 8002594:	701a      	strb	r2, [r3, #0]
	//the global-value in the Led-frame is only 5 bit (max.31)!
	if(global > 0x1F)
 8002596:	1d7b      	adds	r3, r7, #5
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b1f      	cmp	r3, #31
 800259c:	d902      	bls.n	80025a4 <apa102_setPattern+0x20>
	{
		global = 0x1F;
 800259e:	1d7b      	adds	r3, r7, #5
 80025a0:	221f      	movs	r2, #31
 80025a2:	701a      	strb	r2, [r3, #0]
	}
	globalColor.global = global;
 80025a4:	4b29      	ldr	r3, [pc, #164]	; (800264c <apa102_setPattern+0xc8>)
 80025a6:	1d7a      	adds	r2, r7, #5
 80025a8:	7812      	ldrb	r2, [r2, #0]
 80025aa:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i< 16; i++)
 80025ac:	230e      	movs	r3, #14
 80025ae:	18fb      	adds	r3, r7, r3
 80025b0:	2200      	movs	r2, #0
 80025b2:	801a      	strh	r2, [r3, #0]
 80025b4:	e03e      	b.n	8002634 <apa102_setPattern+0xb0>
	{
		if(mask & (1<<i))
 80025b6:	1dbb      	adds	r3, r7, #6
 80025b8:	881a      	ldrh	r2, [r3, #0]
 80025ba:	230e      	movs	r3, #14
 80025bc:	18fb      	adds	r3, r7, r3
 80025be:	881b      	ldrh	r3, [r3, #0]
 80025c0:	411a      	asrs	r2, r3
 80025c2:	0013      	movs	r3, r2
 80025c4:	2201      	movs	r2, #1
 80025c6:	4013      	ands	r3, r2
 80025c8:	d00b      	beq.n	80025e2 <apa102_setPattern+0x5e>
		{	//led shall be active
			leds[i] = globalColor;
 80025ca:	230e      	movs	r3, #14
 80025cc:	18fb      	adds	r3, r7, r3
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	4a1f      	ldr	r2, [pc, #124]	; (8002650 <apa102_setPattern+0xcc>)
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	491d      	ldr	r1, [pc, #116]	; (800264c <apa102_setPattern+0xc8>)
 80025d6:	18d3      	adds	r3, r2, r3
 80025d8:	2204      	movs	r2, #4
 80025da:	0018      	movs	r0, r3
 80025dc:	f004 fa70 	bl	8006ac0 <memcpy>
 80025e0:	e021      	b.n	8002626 <apa102_setPattern+0xa2>
		}
		else
		{	//led shall be off
			leds[i].global = 0;
 80025e2:	230e      	movs	r3, #14
 80025e4:	18fb      	adds	r3, r7, r3
 80025e6:	881a      	ldrh	r2, [r3, #0]
 80025e8:	4b19      	ldr	r3, [pc, #100]	; (8002650 <apa102_setPattern+0xcc>)
 80025ea:	0092      	lsls	r2, r2, #2
 80025ec:	2100      	movs	r1, #0
 80025ee:	54d1      	strb	r1, [r2, r3]
			leds[i].blue = 0;
 80025f0:	230e      	movs	r3, #14
 80025f2:	18fb      	adds	r3, r7, r3
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	4a16      	ldr	r2, [pc, #88]	; (8002650 <apa102_setPattern+0xcc>)
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	18d3      	adds	r3, r2, r3
 80025fc:	3301      	adds	r3, #1
 80025fe:	2200      	movs	r2, #0
 8002600:	701a      	strb	r2, [r3, #0]
			leds[i].green = 0;
 8002602:	230e      	movs	r3, #14
 8002604:	18fb      	adds	r3, r7, r3
 8002606:	881b      	ldrh	r3, [r3, #0]
 8002608:	4a11      	ldr	r2, [pc, #68]	; (8002650 <apa102_setPattern+0xcc>)
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	18d3      	adds	r3, r2, r3
 800260e:	3302      	adds	r3, #2
 8002610:	2200      	movs	r2, #0
 8002612:	701a      	strb	r2, [r3, #0]
			leds[i].red = 0;
 8002614:	230e      	movs	r3, #14
 8002616:	18fb      	adds	r3, r7, r3
 8002618:	881b      	ldrh	r3, [r3, #0]
 800261a:	4a0d      	ldr	r2, [pc, #52]	; (8002650 <apa102_setPattern+0xcc>)
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	18d3      	adds	r3, r2, r3
 8002620:	3303      	adds	r3, #3
 8002622:	2200      	movs	r2, #0
 8002624:	701a      	strb	r2, [r3, #0]
	if(global > 0x1F)
	{
		global = 0x1F;
	}
	globalColor.global = global;
	for(uint16_t i = 0; i< 16; i++)
 8002626:	230e      	movs	r3, #14
 8002628:	18fb      	adds	r3, r7, r3
 800262a:	881a      	ldrh	r2, [r3, #0]
 800262c:	230e      	movs	r3, #14
 800262e:	18fb      	adds	r3, r7, r3
 8002630:	3201      	adds	r2, #1
 8002632:	801a      	strh	r2, [r3, #0]
 8002634:	230e      	movs	r3, #14
 8002636:	18fb      	adds	r3, r7, r3
 8002638:	881b      	ldrh	r3, [r3, #0]
 800263a:	2b0f      	cmp	r3, #15
 800263c:	d9bb      	bls.n	80025b6 <apa102_setPattern+0x32>
			leds[i].blue = 0;
			leds[i].green = 0;
			leds[i].red = 0;
		}
	}
	updateStripe();
 800263e:	f7ff fefd 	bl	800243c <updateStripe>
}
 8002642:	46c0      	nop			; (mov r8, r8)
 8002644:	46bd      	mov	sp, r7
 8002646:	b004      	add	sp, #16
 8002648:	bd80      	pop	{r7, pc}
 800264a:	46c0      	nop			; (mov r8, r8)
 800264c:	200001f4 	.word	0x200001f4
 8002650:	200003f0 	.word	0x200003f0

08002654 <apa102_setSingle>:

void apa102_setSingle(uint8_t index, uint8_t global)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	0002      	movs	r2, r0
 800265c:	1dfb      	adds	r3, r7, #7
 800265e:	701a      	strb	r2, [r3, #0]
 8002660:	1dbb      	adds	r3, r7, #6
 8002662:	1c0a      	adds	r2, r1, #0
 8002664:	701a      	strb	r2, [r3, #0]
	apa102_setPattern(1<<index,global);
 8002666:	1dfb      	adds	r3, r7, #7
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2201      	movs	r2, #1
 800266c:	409a      	lsls	r2, r3
 800266e:	0013      	movs	r3, r2
 8002670:	b29a      	uxth	r2, r3
 8002672:	1dbb      	adds	r3, r7, #6
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	0019      	movs	r1, r3
 8002678:	0010      	movs	r0, r2
 800267a:	f7ff ff83 	bl	8002584 <apa102_setPattern>
}
 800267e:	46c0      	nop			; (mov r8, r8)
 8002680:	46bd      	mov	sp, r7
 8002682:	b002      	add	sp, #8
 8002684:	bd80      	pop	{r7, pc}
 8002686:	46c0      	nop			; (mov r8, r8)

08002688 <apa102_allOff>:

void apa102_allOff()
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
	for(uint16_t i = 0; i< 16; i++)
 800268e:	1dbb      	adds	r3, r7, #6
 8002690:	2200      	movs	r2, #0
 8002692:	801a      	strh	r2, [r3, #0]
 8002694:	e022      	b.n	80026dc <apa102_allOff+0x54>
	{

		leds[i].global = 0;
 8002696:	1dbb      	adds	r3, r7, #6
 8002698:	881a      	ldrh	r2, [r3, #0]
 800269a:	4b15      	ldr	r3, [pc, #84]	; (80026f0 <apa102_allOff+0x68>)
 800269c:	0092      	lsls	r2, r2, #2
 800269e:	2100      	movs	r1, #0
 80026a0:	54d1      	strb	r1, [r2, r3]
		leds[i].blue = 0;
 80026a2:	1dbb      	adds	r3, r7, #6
 80026a4:	881b      	ldrh	r3, [r3, #0]
 80026a6:	4a12      	ldr	r2, [pc, #72]	; (80026f0 <apa102_allOff+0x68>)
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	18d3      	adds	r3, r2, r3
 80026ac:	3301      	adds	r3, #1
 80026ae:	2200      	movs	r2, #0
 80026b0:	701a      	strb	r2, [r3, #0]
		leds[i].green = 0;
 80026b2:	1dbb      	adds	r3, r7, #6
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	4a0e      	ldr	r2, [pc, #56]	; (80026f0 <apa102_allOff+0x68>)
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	18d3      	adds	r3, r2, r3
 80026bc:	3302      	adds	r3, #2
 80026be:	2200      	movs	r2, #0
 80026c0:	701a      	strb	r2, [r3, #0]
		leds[i].red = 0;
 80026c2:	1dbb      	adds	r3, r7, #6
 80026c4:	881b      	ldrh	r3, [r3, #0]
 80026c6:	4a0a      	ldr	r2, [pc, #40]	; (80026f0 <apa102_allOff+0x68>)
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	18d3      	adds	r3, r2, r3
 80026cc:	3303      	adds	r3, #3
 80026ce:	2200      	movs	r2, #0
 80026d0:	701a      	strb	r2, [r3, #0]
	apa102_setPattern(1<<index,global);
}

void apa102_allOff()
{
	for(uint16_t i = 0; i< 16; i++)
 80026d2:	1dbb      	adds	r3, r7, #6
 80026d4:	881a      	ldrh	r2, [r3, #0]
 80026d6:	1dbb      	adds	r3, r7, #6
 80026d8:	3201      	adds	r2, #1
 80026da:	801a      	strh	r2, [r3, #0]
 80026dc:	1dbb      	adds	r3, r7, #6
 80026de:	881b      	ldrh	r3, [r3, #0]
 80026e0:	2b0f      	cmp	r3, #15
 80026e2:	d9d8      	bls.n	8002696 <apa102_allOff+0xe>
		leds[i].blue = 0;
		leds[i].green = 0;
		leds[i].red = 0;

	}
	updateStripe();
 80026e4:	f7ff feaa 	bl	800243c <updateStripe>
}
 80026e8:	46c0      	nop			; (mov r8, r8)
 80026ea:	46bd      	mov	sp, r7
 80026ec:	b002      	add	sp, #8
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	200003f0 	.word	0x200003f0

080026f4 <StrFindChar>:
 * returns the index of the first occurrence of char in the string starting at startindex
 * if not found, returns 0xFFFF
 * can be used to find the length of an string (charTofind = 0x00, length = LENGTH_UNKNOWN)
 */
uint16_t StrFindChar(uint8_t* string, uint8_t charToFind, uint8_t startIdx, uint8_t length)
{
 80026f4:	b590      	push	{r4, r7, lr}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	000c      	movs	r4, r1
 80026fe:	0010      	movs	r0, r2
 8002700:	0019      	movs	r1, r3
 8002702:	1cfb      	adds	r3, r7, #3
 8002704:	1c22      	adds	r2, r4, #0
 8002706:	701a      	strb	r2, [r3, #0]
 8002708:	1cbb      	adds	r3, r7, #2
 800270a:	1c02      	adds	r2, r0, #0
 800270c:	701a      	strb	r2, [r3, #0]
 800270e:	1c7b      	adds	r3, r7, #1
 8002710:	1c0a      	adds	r2, r1, #0
 8002712:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = startIdx; i < length+startIdx; i++)
 8002714:	230e      	movs	r3, #14
 8002716:	18fb      	adds	r3, r7, r3
 8002718:	1cba      	adds	r2, r7, #2
 800271a:	7812      	ldrb	r2, [r2, #0]
 800271c:	801a      	strh	r2, [r3, #0]
 800271e:	e022      	b.n	8002766 <StrFindChar+0x72>
	{
		if(string[i] == charToFind)
 8002720:	230e      	movs	r3, #14
 8002722:	18fb      	adds	r3, r7, r3
 8002724:	881b      	ldrh	r3, [r3, #0]
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	18d3      	adds	r3, r2, r3
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	1cfa      	adds	r2, r7, #3
 800272e:	7812      	ldrb	r2, [r2, #0]
 8002730:	429a      	cmp	r2, r3
 8002732:	d103      	bne.n	800273c <StrFindChar+0x48>
		{
			return i;
 8002734:	230e      	movs	r3, #14
 8002736:	18fb      	adds	r3, r7, r3
 8002738:	881b      	ldrh	r3, [r3, #0]
 800273a:	e01f      	b.n	800277c <StrFindChar+0x88>
		}
		if(length == LENGTH_UNKNOWN && string[i] == 0x00)
 800273c:	1c7b      	adds	r3, r7, #1
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2bff      	cmp	r3, #255	; 0xff
 8002742:	d109      	bne.n	8002758 <StrFindChar+0x64>
 8002744:	230e      	movs	r3, #14
 8002746:	18fb      	adds	r3, r7, r3
 8002748:	881b      	ldrh	r3, [r3, #0]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	18d3      	adds	r3, r2, r3
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <StrFindChar+0x64>
		{
			return 0xFFFF;
 8002754:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <StrFindChar+0x90>)
 8002756:	e011      	b.n	800277c <StrFindChar+0x88>
 * if not found, returns 0xFFFF
 * can be used to find the length of an string (charTofind = 0x00, length = LENGTH_UNKNOWN)
 */
uint16_t StrFindChar(uint8_t* string, uint8_t charToFind, uint8_t startIdx, uint8_t length)
{
	for(uint16_t i = startIdx; i < length+startIdx; i++)
 8002758:	230e      	movs	r3, #14
 800275a:	18fb      	adds	r3, r7, r3
 800275c:	881a      	ldrh	r2, [r3, #0]
 800275e:	230e      	movs	r3, #14
 8002760:	18fb      	adds	r3, r7, r3
 8002762:	3201      	adds	r2, #1
 8002764:	801a      	strh	r2, [r3, #0]
 8002766:	230e      	movs	r3, #14
 8002768:	18fb      	adds	r3, r7, r3
 800276a:	881a      	ldrh	r2, [r3, #0]
 800276c:	1c7b      	adds	r3, r7, #1
 800276e:	7819      	ldrb	r1, [r3, #0]
 8002770:	1cbb      	adds	r3, r7, #2
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	18cb      	adds	r3, r1, r3
 8002776:	429a      	cmp	r2, r3
 8002778:	dbd2      	blt.n	8002720 <StrFindChar+0x2c>
		if(length == LENGTH_UNKNOWN && string[i] == 0x00)
		{
			return 0xFFFF;
		}
	}
	return 0xFFFF;
 800277a:	4b02      	ldr	r3, [pc, #8]	; (8002784 <StrFindChar+0x90>)
}
 800277c:	0018      	movs	r0, r3
 800277e:	46bd      	mov	sp, r7
 8002780:	b005      	add	sp, #20
 8002782:	bd90      	pop	{r4, r7, pc}
 8002784:	0000ffff 	.word	0x0000ffff

08002788 <StrToU32>:
 * the number doesn't have to be right at the beginning, the algorithm searches for the first number (beginning at startIdx)
 * if something goes wrong, it returns 0xFFFFFFFF
 * automatically terminates @ null-character
 */
uint32_t StrToU32(uint8_t* string, uint8_t startIdx, uint8_t length)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	0008      	movs	r0, r1
 8002792:	0011      	movs	r1, r2
 8002794:	1cfb      	adds	r3, r7, #3
 8002796:	1c02      	adds	r2, r0, #0
 8002798:	701a      	strb	r2, [r3, #0]
 800279a:	1cbb      	adds	r3, r7, #2
 800279c:	1c0a      	adds	r2, r1, #0
 800279e:	701a      	strb	r2, [r3, #0]

	uint8_t numberStartIdx = 0;
 80027a0:	2317      	movs	r3, #23
 80027a2:	18fb      	adds	r3, r7, r3
 80027a4:	2200      	movs	r2, #0
 80027a6:	701a      	strb	r2, [r3, #0]
	uint8_t radix = 2;
 80027a8:	2316      	movs	r3, #22
 80027aa:	18fb      	adds	r3, r7, r3
 80027ac:	2202      	movs	r2, #2
 80027ae:	701a      	strb	r2, [r3, #0]


	//if the length is not specified, it will be 0xFF -> search for null-character
	if(length == LENGTH_UNKNOWN)
 80027b0:	1cbb      	adds	r3, r7, #2
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2bff      	cmp	r3, #255	; 0xff
 80027b6:	d10d      	bne.n	80027d4 <StrToU32+0x4c>
	{
		length = StrFindChar(string, 0x00, startIdx,0xFF)-startIdx;
 80027b8:	1cfb      	adds	r3, r7, #3
 80027ba:	781a      	ldrb	r2, [r3, #0]
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	23ff      	movs	r3, #255	; 0xff
 80027c0:	2100      	movs	r1, #0
 80027c2:	f7ff ff97 	bl	80026f4 <StrFindChar>
 80027c6:	0003      	movs	r3, r0
 80027c8:	b2d9      	uxtb	r1, r3
 80027ca:	1cbb      	adds	r3, r7, #2
 80027cc:	1cfa      	adds	r2, r7, #3
 80027ce:	7812      	ldrb	r2, [r2, #0]
 80027d0:	1a8a      	subs	r2, r1, r2
 80027d2:	701a      	strb	r2, [r3, #0]
	}

	//we will need this more than once
	uint8_t endIdx = startIdx + length - 1;
 80027d4:	1cfa      	adds	r2, r7, #3
 80027d6:	1cbb      	adds	r3, r7, #2
 80027d8:	7812      	ldrb	r2, [r2, #0]
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	18d3      	adds	r3, r2, r3
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	230e      	movs	r3, #14
 80027e2:	18fb      	adds	r3, r7, r3
 80027e4:	3a01      	subs	r2, #1
 80027e6:	701a      	strb	r2, [r3, #0]


	//search for the first number
	for(uint8_t i = startIdx; i <= endIdx; i++)
 80027e8:	230d      	movs	r3, #13
 80027ea:	18fb      	adds	r3, r7, r3
 80027ec:	1cfa      	adds	r2, r7, #3
 80027ee:	7812      	ldrb	r2, [r2, #0]
 80027f0:	701a      	strb	r2, [r3, #0]
 80027f2:	230d      	movs	r3, #13
 80027f4:	18fa      	adds	r2, r7, r3
 80027f6:	230e      	movs	r3, #14
 80027f8:	18fb      	adds	r3, r7, r3
 80027fa:	7812      	ldrb	r2, [r2, #0]
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d900      	bls.n	8002804 <StrToU32+0x7c>
 8002802:	e085      	b.n	8002910 <StrToU32+0x188>
	{
		if(string[i] >= '0' && string[i] <= '9')
 8002804:	230d      	movs	r3, #13
 8002806:	18fb      	adds	r3, r7, r3
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	18d3      	adds	r3, r2, r3
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b2f      	cmp	r3, #47	; 0x2f
 8002812:	d800      	bhi.n	8002816 <StrToU32+0x8e>
 8002814:	e079      	b.n	800290a <StrToU32+0x182>
 8002816:	230d      	movs	r3, #13
 8002818:	18fb      	adds	r3, r7, r3
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	18d3      	adds	r3, r2, r3
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b39      	cmp	r3, #57	; 0x39
 8002824:	d900      	bls.n	8002828 <StrToU32+0xa0>
 8002826:	e070      	b.n	800290a <StrToU32+0x182>
		{
			//we found the beginning of a number!
			//check if more is coming
			if(i == endIdx)
 8002828:	230d      	movs	r3, #13
 800282a:	18fa      	adds	r2, r7, r3
 800282c:	230e      	movs	r3, #14
 800282e:	18fb      	adds	r3, r7, r3
 8002830:	7812      	ldrb	r2, [r2, #0]
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	429a      	cmp	r2, r3
 8002836:	d107      	bne.n	8002848 <StrToU32+0xc0>
			{
				//we found a single digit right at the end
				return string[i]-'0';
 8002838:	230d      	movs	r3, #13
 800283a:	18fb      	adds	r3, r7, r3
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	18d3      	adds	r3, r2, r3
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	3b30      	subs	r3, #48	; 0x30
 8002846:	e114      	b.n	8002a72 <StrToU32+0x2ea>
			}
			//more characters left
			if(string[i+1] >= '0' && string[i+1] <= '9')
 8002848:	230d      	movs	r3, #13
 800284a:	18fb      	adds	r3, r7, r3
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	3301      	adds	r3, #1
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	18d3      	adds	r3, r2, r3
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	2b2f      	cmp	r3, #47	; 0x2f
 8002858:	d913      	bls.n	8002882 <StrToU32+0xfa>
 800285a:	230d      	movs	r3, #13
 800285c:	18fb      	adds	r3, r7, r3
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	3301      	adds	r3, #1
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	18d3      	adds	r3, r2, r3
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b39      	cmp	r3, #57	; 0x39
 800286a:	d80a      	bhi.n	8002882 <StrToU32+0xfa>
			{
				//decimal number
				radix = 10;
 800286c:	2316      	movs	r3, #22
 800286e:	18fb      	adds	r3, r7, r3
 8002870:	220a      	movs	r2, #10
 8002872:	701a      	strb	r2, [r3, #0]
				numberStartIdx = i;
 8002874:	2317      	movs	r3, #23
 8002876:	18fb      	adds	r3, r7, r3
 8002878:	220d      	movs	r2, #13
 800287a:	18ba      	adds	r2, r7, r2
 800287c:	7812      	ldrb	r2, [r2, #0]
 800287e:	701a      	strb	r2, [r3, #0]
				break;
 8002880:	e046      	b.n	8002910 <StrToU32+0x188>
			}
			else if(string[i+1] == 'X' || string[i+1] == 'x')
 8002882:	230d      	movs	r3, #13
 8002884:	18fb      	adds	r3, r7, r3
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	3301      	adds	r3, #1
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	18d3      	adds	r3, r2, r3
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b58      	cmp	r3, #88	; 0x58
 8002892:	d008      	beq.n	80028a6 <StrToU32+0x11e>
 8002894:	230d      	movs	r3, #13
 8002896:	18fb      	adds	r3, r7, r3
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	3301      	adds	r3, #1
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	18d3      	adds	r3, r2, r3
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b78      	cmp	r3, #120	; 0x78
 80028a4:	d10b      	bne.n	80028be <StrToU32+0x136>
			{
				//hex
				radix = 16;
 80028a6:	2316      	movs	r3, #22
 80028a8:	18fb      	adds	r3, r7, r3
 80028aa:	2210      	movs	r2, #16
 80028ac:	701a      	strb	r2, [r3, #0]
				numberStartIdx = i+2;
 80028ae:	2317      	movs	r3, #23
 80028b0:	18fb      	adds	r3, r7, r3
 80028b2:	220d      	movs	r2, #13
 80028b4:	18ba      	adds	r2, r7, r2
 80028b6:	7812      	ldrb	r2, [r2, #0]
 80028b8:	3202      	adds	r2, #2
 80028ba:	701a      	strb	r2, [r3, #0]
				break;
 80028bc:	e028      	b.n	8002910 <StrToU32+0x188>
			}
			else if(string[i+1] == 'B' || string[i+1] == 'b')
 80028be:	230d      	movs	r3, #13
 80028c0:	18fb      	adds	r3, r7, r3
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	3301      	adds	r3, #1
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	18d3      	adds	r3, r2, r3
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b42      	cmp	r3, #66	; 0x42
 80028ce:	d008      	beq.n	80028e2 <StrToU32+0x15a>
 80028d0:	230d      	movs	r3, #13
 80028d2:	18fb      	adds	r3, r7, r3
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	3301      	adds	r3, #1
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	18d3      	adds	r3, r2, r3
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b62      	cmp	r3, #98	; 0x62
 80028e0:	d10b      	bne.n	80028fa <StrToU32+0x172>
			{
				//hex
				radix = 2;
 80028e2:	2316      	movs	r3, #22
 80028e4:	18fb      	adds	r3, r7, r3
 80028e6:	2202      	movs	r2, #2
 80028e8:	701a      	strb	r2, [r3, #0]
				numberStartIdx = i+2;
 80028ea:	2317      	movs	r3, #23
 80028ec:	18fb      	adds	r3, r7, r3
 80028ee:	220d      	movs	r2, #13
 80028f0:	18ba      	adds	r2, r7, r2
 80028f2:	7812      	ldrb	r2, [r2, #0]
 80028f4:	3202      	adds	r2, #2
 80028f6:	701a      	strb	r2, [r3, #0]
				break;
 80028f8:	e00a      	b.n	8002910 <StrToU32+0x188>
			}
			else
			{
				//we found a single digit
				return string[i]-'0';
 80028fa:	230d      	movs	r3, #13
 80028fc:	18fb      	adds	r3, r7, r3
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	18d3      	adds	r3, r2, r3
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	3b30      	subs	r3, #48	; 0x30
 8002908:	e0b3      	b.n	8002a72 <StrToU32+0x2ea>
			}
		}
		else
		{
			return 0xFFFFFFFF;
 800290a:	2301      	movs	r3, #1
 800290c:	425b      	negs	r3, r3
 800290e:	e0b0      	b.n	8002a72 <StrToU32+0x2ea>
		}
	}
	//we know the number format and the start Index now
	uint32_t result = 0;
 8002910:	2300      	movs	r3, #0
 8002912:	613b      	str	r3, [r7, #16]
	//this loop starts with the first digit!
	for(uint8_t i = 0; i < length-startIdx; i++)
 8002914:	230f      	movs	r3, #15
 8002916:	18fb      	adds	r3, r7, r3
 8002918:	2200      	movs	r2, #0
 800291a:	701a      	strb	r2, [r3, #0]
 800291c:	e09d      	b.n	8002a5a <StrToU32+0x2d2>
	{
		uint8_t digit = string[numberStartIdx+i];
 800291e:	2317      	movs	r3, #23
 8002920:	18fb      	adds	r3, r7, r3
 8002922:	781a      	ldrb	r2, [r3, #0]
 8002924:	230f      	movs	r3, #15
 8002926:	18fb      	adds	r3, r7, r3
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	18d3      	adds	r3, r2, r3
 800292c:	001a      	movs	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	189a      	adds	r2, r3, r2
 8002932:	230c      	movs	r3, #12
 8002934:	18fb      	adds	r3, r7, r3
 8002936:	7812      	ldrb	r2, [r2, #0]
 8002938:	701a      	strb	r2, [r3, #0]
		switch(radix)
 800293a:	2316      	movs	r3, #22
 800293c:	18fb      	adds	r3, r7, r3
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	2b0a      	cmp	r3, #10
 8002942:	d01e      	beq.n	8002982 <StrToU32+0x1fa>
 8002944:	2b10      	cmp	r3, #16
 8002946:	d036      	beq.n	80029b6 <StrToU32+0x22e>
 8002948:	2b02      	cmp	r3, #2
 800294a:	d000      	beq.n	800294e <StrToU32+0x1c6>
 800294c:	e07e      	b.n	8002a4c <StrToU32+0x2c4>
		{
		case 2:
			if(digit == '0' || digit == '1')
 800294e:	230c      	movs	r3, #12
 8002950:	18fb      	adds	r3, r7, r3
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b30      	cmp	r3, #48	; 0x30
 8002956:	d004      	beq.n	8002962 <StrToU32+0x1da>
 8002958:	230c      	movs	r3, #12
 800295a:	18fb      	adds	r3, r7, r3
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b31      	cmp	r3, #49	; 0x31
 8002960:	d10d      	bne.n	800297e <StrToU32+0x1f6>
			{
				result *= radix;
 8002962:	2316      	movs	r3, #22
 8002964:	18fb      	adds	r3, r7, r3
 8002966:	781a      	ldrb	r2, [r3, #0]
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	4353      	muls	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
				result += (digit - '0');
 800296e:	230c      	movs	r3, #12
 8002970:	18fb      	adds	r3, r7, r3
 8002972:	781a      	ldrb	r2, [r3, #0]
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	18d3      	adds	r3, r2, r3
 8002978:	3b30      	subs	r3, #48	; 0x30
 800297a:	613b      	str	r3, [r7, #16]
			}
			else
			{
				return result;
			}
			break;
 800297c:	e066      	b.n	8002a4c <StrToU32+0x2c4>
				result *= radix;
				result += (digit - '0');
			}
			else
			{
				return result;
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	e077      	b.n	8002a72 <StrToU32+0x2ea>
			}
			break;
		case 10:
			if(digit >= '0' && digit <= '9')
 8002982:	230c      	movs	r3, #12
 8002984:	18fb      	adds	r3, r7, r3
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	2b2f      	cmp	r3, #47	; 0x2f
 800298a:	d912      	bls.n	80029b2 <StrToU32+0x22a>
 800298c:	230c      	movs	r3, #12
 800298e:	18fb      	adds	r3, r7, r3
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	2b39      	cmp	r3, #57	; 0x39
 8002994:	d80d      	bhi.n	80029b2 <StrToU32+0x22a>
			{
				result *= radix;
 8002996:	2316      	movs	r3, #22
 8002998:	18fb      	adds	r3, r7, r3
 800299a:	781a      	ldrb	r2, [r3, #0]
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4353      	muls	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]
				result += (digit - '0');
 80029a2:	230c      	movs	r3, #12
 80029a4:	18fb      	adds	r3, r7, r3
 80029a6:	781a      	ldrb	r2, [r3, #0]
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	18d3      	adds	r3, r2, r3
 80029ac:	3b30      	subs	r3, #48	; 0x30
 80029ae:	613b      	str	r3, [r7, #16]
			}
			else
			{
				return result;
			}
			break;
 80029b0:	e04c      	b.n	8002a4c <StrToU32+0x2c4>
				result *= radix;
				result += (digit - '0');
			}
			else
			{
				return result;
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	e05d      	b.n	8002a72 <StrToU32+0x2ea>
			}
			break;
		case 16:
			if(digit >= '0' && digit <= '9')
 80029b6:	230c      	movs	r3, #12
 80029b8:	18fb      	adds	r3, r7, r3
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b2f      	cmp	r3, #47	; 0x2f
 80029be:	d912      	bls.n	80029e6 <StrToU32+0x25e>
 80029c0:	230c      	movs	r3, #12
 80029c2:	18fb      	adds	r3, r7, r3
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2b39      	cmp	r3, #57	; 0x39
 80029c8:	d80d      	bhi.n	80029e6 <StrToU32+0x25e>
			{
				result *= radix;
 80029ca:	2316      	movs	r3, #22
 80029cc:	18fb      	adds	r3, r7, r3
 80029ce:	781a      	ldrb	r2, [r3, #0]
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	4353      	muls	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]
				result += (digit - '0');
 80029d6:	230c      	movs	r3, #12
 80029d8:	18fb      	adds	r3, r7, r3
 80029da:	781a      	ldrb	r2, [r3, #0]
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	18d3      	adds	r3, r2, r3
 80029e0:	3b30      	subs	r3, #48	; 0x30
 80029e2:	613b      	str	r3, [r7, #16]
 80029e4:	e031      	b.n	8002a4a <StrToU32+0x2c2>
			}
			else if(digit >= 'a' && digit <= 'f')
 80029e6:	230c      	movs	r3, #12
 80029e8:	18fb      	adds	r3, r7, r3
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b60      	cmp	r3, #96	; 0x60
 80029ee:	d912      	bls.n	8002a16 <StrToU32+0x28e>
 80029f0:	230c      	movs	r3, #12
 80029f2:	18fb      	adds	r3, r7, r3
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2b66      	cmp	r3, #102	; 0x66
 80029f8:	d80d      	bhi.n	8002a16 <StrToU32+0x28e>
			{
				result *= radix;
 80029fa:	2316      	movs	r3, #22
 80029fc:	18fb      	adds	r3, r7, r3
 80029fe:	781a      	ldrb	r2, [r3, #0]
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	4353      	muls	r3, r2
 8002a04:	613b      	str	r3, [r7, #16]
				result += (digit - 'a'+10);
 8002a06:	230c      	movs	r3, #12
 8002a08:	18fb      	adds	r3, r7, r3
 8002a0a:	781a      	ldrb	r2, [r3, #0]
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	18d3      	adds	r3, r2, r3
 8002a10:	3b57      	subs	r3, #87	; 0x57
 8002a12:	613b      	str	r3, [r7, #16]
 8002a14:	e019      	b.n	8002a4a <StrToU32+0x2c2>
			}
			else if(digit >= 'A' && digit <= 'F')
 8002a16:	230c      	movs	r3, #12
 8002a18:	18fb      	adds	r3, r7, r3
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b40      	cmp	r3, #64	; 0x40
 8002a1e:	d912      	bls.n	8002a46 <StrToU32+0x2be>
 8002a20:	230c      	movs	r3, #12
 8002a22:	18fb      	adds	r3, r7, r3
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b46      	cmp	r3, #70	; 0x46
 8002a28:	d80d      	bhi.n	8002a46 <StrToU32+0x2be>
			{
				result *= radix;
 8002a2a:	2316      	movs	r3, #22
 8002a2c:	18fb      	adds	r3, r7, r3
 8002a2e:	781a      	ldrb	r2, [r3, #0]
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	4353      	muls	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
				result += (digit - 'A'+10);
 8002a36:	230c      	movs	r3, #12
 8002a38:	18fb      	adds	r3, r7, r3
 8002a3a:	781a      	ldrb	r2, [r3, #0]
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	18d3      	adds	r3, r2, r3
 8002a40:	3b37      	subs	r3, #55	; 0x37
 8002a42:	613b      	str	r3, [r7, #16]
 8002a44:	e001      	b.n	8002a4a <StrToU32+0x2c2>
			}
			else
			{
				return result;
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	e013      	b.n	8002a72 <StrToU32+0x2ea>
			}
			break;
 8002a4a:	46c0      	nop			; (mov r8, r8)
		}
	}
	//we know the number format and the start Index now
	uint32_t result = 0;
	//this loop starts with the first digit!
	for(uint8_t i = 0; i < length-startIdx; i++)
 8002a4c:	230f      	movs	r3, #15
 8002a4e:	18fb      	adds	r3, r7, r3
 8002a50:	781a      	ldrb	r2, [r3, #0]
 8002a52:	230f      	movs	r3, #15
 8002a54:	18fb      	adds	r3, r7, r3
 8002a56:	3201      	adds	r2, #1
 8002a58:	701a      	strb	r2, [r3, #0]
 8002a5a:	230f      	movs	r3, #15
 8002a5c:	18fb      	adds	r3, r7, r3
 8002a5e:	781a      	ldrb	r2, [r3, #0]
 8002a60:	1cbb      	adds	r3, r7, #2
 8002a62:	7819      	ldrb	r1, [r3, #0]
 8002a64:	1cfb      	adds	r3, r7, #3
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	1acb      	subs	r3, r1, r3
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	da00      	bge.n	8002a70 <StrToU32+0x2e8>
 8002a6e:	e756      	b.n	800291e <StrToU32+0x196>
				return result;
			}
			break;
		}
	}
	return result;
 8002a70:	693b      	ldr	r3, [r7, #16]
}
 8002a72:	0018      	movs	r0, r3
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b006      	add	sp, #24
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	46c0      	nop			; (mov r8, r8)

08002a7c <consoleInit>:


void consoleInit()
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
	consoleStates = CSTATE_ROW_VIS;
 8002a82:	4b66      	ldr	r3, [pc, #408]	; (8002c1c <consoleInit+0x1a0>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	701a      	strb	r2, [r3, #0]
	consoleFlags |= CFLAG_NEWSTATE;
 8002a88:	4b65      	ldr	r3, [pc, #404]	; (8002c20 <consoleInit+0x1a4>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	4b63      	ldr	r3, [pc, #396]	; (8002c20 <consoleInit+0x1a4>)
 8002a94:	701a      	strb	r2, [r3, #0]
	FLASH_Unlock();
 8002a96:	f003 fdc5 	bl	8006624 <FLASH_Unlock>

	//fill array with addresses
	for(uint8_t i = 0; i < NB_OF_VAR; i++)
 8002a9a:	1dfb      	adds	r3, r7, #7
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	701a      	strb	r2, [r3, #0]
 8002aa0:	e00c      	b.n	8002abc <consoleInit+0x40>
	{
		VirtAddVarTab[i] = (uint16_t)i;
 8002aa2:	1dfb      	adds	r3, r7, #7
 8002aa4:	781a      	ldrb	r2, [r3, #0]
 8002aa6:	1dfb      	adds	r3, r7, #7
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	b299      	uxth	r1, r3
 8002aac:	4b5d      	ldr	r3, [pc, #372]	; (8002c24 <consoleInit+0x1a8>)
 8002aae:	0052      	lsls	r2, r2, #1
 8002ab0:	52d1      	strh	r1, [r2, r3]
	consoleStates = CSTATE_ROW_VIS;
	consoleFlags |= CFLAG_NEWSTATE;
	FLASH_Unlock();

	//fill array with addresses
	for(uint8_t i = 0; i < NB_OF_VAR; i++)
 8002ab2:	1dfb      	adds	r3, r7, #7
 8002ab4:	781a      	ldrb	r2, [r3, #0]
 8002ab6:	1dfb      	adds	r3, r7, #7
 8002ab8:	3201      	adds	r2, #1
 8002aba:	701a      	strb	r2, [r3, #0]
 8002abc:	1dfb      	adds	r3, r7, #7
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b24      	cmp	r3, #36	; 0x24
 8002ac2:	d9ee      	bls.n	8002aa2 <consoleInit+0x26>
	{
		VirtAddVarTab[i] = (uint16_t)i;
	}

	EE_Init();
 8002ac4:	f7fe f8f8 	bl	8000cb8 <EE_Init>


	//read values from virtual eeprom (from flash)
	for(uint8_t i = 0; i < NB_OF_VAR; i++)
 8002ac8:	1dbb      	adds	r3, r7, #6
 8002aca:	2200      	movs	r2, #0
 8002acc:	701a      	strb	r2, [r3, #0]
 8002ace:	e011      	b.n	8002af4 <consoleInit+0x78>
	{
		EE_ReadVariable(VirtAddVarTab[i],&VarDataTab[i]);
 8002ad0:	1dbb      	adds	r3, r7, #6
 8002ad2:	781a      	ldrb	r2, [r3, #0]
 8002ad4:	4b53      	ldr	r3, [pc, #332]	; (8002c24 <consoleInit+0x1a8>)
 8002ad6:	0052      	lsls	r2, r2, #1
 8002ad8:	5ad0      	ldrh	r0, [r2, r3]
 8002ada:	1dbb      	adds	r3, r7, #6
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	005a      	lsls	r2, r3, #1
 8002ae0:	4b51      	ldr	r3, [pc, #324]	; (8002c28 <consoleInit+0x1ac>)
 8002ae2:	18d3      	adds	r3, r2, r3
 8002ae4:	0019      	movs	r1, r3
 8002ae6:	f7fe fad7 	bl	8001098 <EE_ReadVariable>

	EE_Init();


	//read values from virtual eeprom (from flash)
	for(uint8_t i = 0; i < NB_OF_VAR; i++)
 8002aea:	1dbb      	adds	r3, r7, #6
 8002aec:	781a      	ldrb	r2, [r3, #0]
 8002aee:	1dbb      	adds	r3, r7, #6
 8002af0:	3201      	adds	r2, #1
 8002af2:	701a      	strb	r2, [r3, #0]
 8002af4:	1dbb      	adds	r3, r7, #6
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	2b24      	cmp	r3, #36	; 0x24
 8002afa:	d9e9      	bls.n	8002ad0 <consoleInit+0x54>
	{
		EE_ReadVariable(VirtAddVarTab[i],&VarDataTab[i]);
	}
	globalColor.red = EE_VAL_RED;
 8002afc:	4b4a      	ldr	r3, [pc, #296]	; (8002c28 <consoleInit+0x1ac>)
 8002afe:	881b      	ldrh	r3, [r3, #0]
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	4b4a      	ldr	r3, [pc, #296]	; (8002c2c <consoleInit+0x1b0>)
 8002b04:	70da      	strb	r2, [r3, #3]
	globalColor.green = EE_VAL_GREEN;
 8002b06:	4b48      	ldr	r3, [pc, #288]	; (8002c28 <consoleInit+0x1ac>)
 8002b08:	885b      	ldrh	r3, [r3, #2]
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	4b47      	ldr	r3, [pc, #284]	; (8002c2c <consoleInit+0x1b0>)
 8002b0e:	709a      	strb	r2, [r3, #2]
	globalColor.blue = EE_VAL_BLUE;
 8002b10:	4b45      	ldr	r3, [pc, #276]	; (8002c28 <consoleInit+0x1ac>)
 8002b12:	889b      	ldrh	r3, [r3, #4]
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	4b45      	ldr	r3, [pc, #276]	; (8002c2c <consoleInit+0x1b0>)
 8002b18:	705a      	strb	r2, [r3, #1]
	RowsVisible = EE_VAL_ROWS;
 8002b1a:	4b43      	ldr	r3, [pc, #268]	; (8002c28 <consoleInit+0x1ac>)
 8002b1c:	88db      	ldrh	r3, [r3, #6]
 8002b1e:	b2da      	uxtb	r2, r3
 8002b20:	4b43      	ldr	r3, [pc, #268]	; (8002c30 <consoleInit+0x1b4>)
 8002b22:	701a      	strb	r2, [r3, #0]
	RowsOverscan = EE_VAL_OVERSCAN;
 8002b24:	4b40      	ldr	r3, [pc, #256]	; (8002c28 <consoleInit+0x1ac>)
 8002b26:	891b      	ldrh	r3, [r3, #8]
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	4b42      	ldr	r3, [pc, #264]	; (8002c34 <consoleInit+0x1b8>)
 8002b2c:	701a      	strb	r2, [r3, #0]
	//uninitialized Flash should read 0xFFFF
	//todo: check that
	if(RowsVisible == 0xFF)
 8002b2e:	4b40      	ldr	r3, [pc, #256]	; (8002c30 <consoleInit+0x1b4>)
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2bff      	cmp	r3, #255	; 0xff
 8002b36:	d102      	bne.n	8002b3e <consoleInit+0xc2>
	{
		RowsVisible = 0;
 8002b38:	4b3d      	ldr	r3, [pc, #244]	; (8002c30 <consoleInit+0x1b4>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	701a      	strb	r2, [r3, #0]
	}

	//the array for the rowData holds 32 values -> limit RowsVisible to that
	if( RowsVisible > 32)
 8002b3e:	4b3c      	ldr	r3, [pc, #240]	; (8002c30 <consoleInit+0x1b4>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b20      	cmp	r3, #32
 8002b46:	d902      	bls.n	8002b4e <consoleInit+0xd2>
	{
		RowsVisible = 32;
 8002b48:	4b39      	ldr	r3, [pc, #228]	; (8002c30 <consoleInit+0x1b4>)
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	701a      	strb	r2, [r3, #0]
	}
	for(uint8_t i = 0; i< RowsVisible; i++)
 8002b4e:	1d7b      	adds	r3, r7, #5
 8002b50:	2200      	movs	r2, #0
 8002b52:	701a      	strb	r2, [r3, #0]
 8002b54:	e00f      	b.n	8002b76 <consoleInit+0xfa>
	{
		DispRowMasks[i] = VarDataTab[EE_VAL_PIC_START+i];
 8002b56:	1d7b      	adds	r3, r7, #5
 8002b58:	781a      	ldrb	r2, [r3, #0]
 8002b5a:	1d7b      	adds	r3, r7, #5
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	1d59      	adds	r1, r3, #5
 8002b60:	4b31      	ldr	r3, [pc, #196]	; (8002c28 <consoleInit+0x1ac>)
 8002b62:	0049      	lsls	r1, r1, #1
 8002b64:	5ac9      	ldrh	r1, [r1, r3]
 8002b66:	4b34      	ldr	r3, [pc, #208]	; (8002c38 <consoleInit+0x1bc>)
 8002b68:	0052      	lsls	r2, r2, #1
 8002b6a:	52d1      	strh	r1, [r2, r3]
	//the array for the rowData holds 32 values -> limit RowsVisible to that
	if( RowsVisible > 32)
	{
		RowsVisible = 32;
	}
	for(uint8_t i = 0; i< RowsVisible; i++)
 8002b6c:	1d7b      	adds	r3, r7, #5
 8002b6e:	781a      	ldrb	r2, [r3, #0]
 8002b70:	1d7b      	adds	r3, r7, #5
 8002b72:	3201      	adds	r2, #1
 8002b74:	701a      	strb	r2, [r3, #0]
 8002b76:	4b2e      	ldr	r3, [pc, #184]	; (8002c30 <consoleInit+0x1b4>)
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	1d7a      	adds	r2, r7, #5
 8002b7e:	7812      	ldrb	r2, [r2, #0]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d3e8      	bcc.n	8002b56 <consoleInit+0xda>
	{
		DispRowMasks[i] = VarDataTab[EE_VAL_PIC_START+i];
	}

	//if the device is unconfigured (rowsVisible = 0), set a smiley as default picture
	if(RowsVisible == 0)
 8002b84:	4b2a      	ldr	r3, [pc, #168]	; (8002c30 <consoleInit+0x1b4>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d142      	bne.n	8002c14 <consoleInit+0x198>
	{
		RowsVisible = 16;
 8002b8e:	4b28      	ldr	r3, [pc, #160]	; (8002c30 <consoleInit+0x1b4>)
 8002b90:	2210      	movs	r2, #16
 8002b92:	701a      	strb	r2, [r3, #0]
		RowsOverscan = 0;
 8002b94:	4b27      	ldr	r3, [pc, #156]	; (8002c34 <consoleInit+0x1b8>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	701a      	strb	r2, [r3, #0]
		DispRowMasks[0]  = 0b0000001111000000;
 8002b9a:	4b27      	ldr	r3, [pc, #156]	; (8002c38 <consoleInit+0x1bc>)
 8002b9c:	22f0      	movs	r2, #240	; 0xf0
 8002b9e:	0092      	lsls	r2, r2, #2
 8002ba0:	801a      	strh	r2, [r3, #0]
		DispRowMasks[1]  = 0b0000110000110000;
 8002ba2:	4b25      	ldr	r3, [pc, #148]	; (8002c38 <consoleInit+0x1bc>)
 8002ba4:	22c3      	movs	r2, #195	; 0xc3
 8002ba6:	0112      	lsls	r2, r2, #4
 8002ba8:	805a      	strh	r2, [r3, #2]
		DispRowMasks[2]  = 0b0001000000001000;
 8002baa:	4b23      	ldr	r3, [pc, #140]	; (8002c38 <consoleInit+0x1bc>)
 8002bac:	4a23      	ldr	r2, [pc, #140]	; (8002c3c <consoleInit+0x1c0>)
 8002bae:	809a      	strh	r2, [r3, #4]
		DispRowMasks[3]  = 0b0010000000000100;
 8002bb0:	4b21      	ldr	r3, [pc, #132]	; (8002c38 <consoleInit+0x1bc>)
 8002bb2:	4a23      	ldr	r2, [pc, #140]	; (8002c40 <consoleInit+0x1c4>)
 8002bb4:	80da      	strh	r2, [r3, #6]
		DispRowMasks[4]  = 0b0100010000010010;
 8002bb6:	4b20      	ldr	r3, [pc, #128]	; (8002c38 <consoleInit+0x1bc>)
 8002bb8:	4a22      	ldr	r2, [pc, #136]	; (8002c44 <consoleInit+0x1c8>)
 8002bba:	811a      	strh	r2, [r3, #8]
		DispRowMasks[5]  = 0b0100010000010010;
 8002bbc:	4b1e      	ldr	r3, [pc, #120]	; (8002c38 <consoleInit+0x1bc>)
 8002bbe:	4a21      	ldr	r2, [pc, #132]	; (8002c44 <consoleInit+0x1c8>)
 8002bc0:	815a      	strh	r2, [r3, #10]
		DispRowMasks[6]  = 0b1000000000001001;
 8002bc2:	4b1d      	ldr	r3, [pc, #116]	; (8002c38 <consoleInit+0x1bc>)
 8002bc4:	4a20      	ldr	r2, [pc, #128]	; (8002c48 <consoleInit+0x1cc>)
 8002bc6:	819a      	strh	r2, [r3, #12]
		DispRowMasks[7]  = 0b1000000110001001;
 8002bc8:	4b1b      	ldr	r3, [pc, #108]	; (8002c38 <consoleInit+0x1bc>)
 8002bca:	4a20      	ldr	r2, [pc, #128]	; (8002c4c <consoleInit+0x1d0>)
 8002bcc:	81da      	strh	r2, [r3, #14]
		DispRowMasks[8]  = 0b1000000000001001;
 8002bce:	4b1a      	ldr	r3, [pc, #104]	; (8002c38 <consoleInit+0x1bc>)
 8002bd0:	4a1d      	ldr	r2, [pc, #116]	; (8002c48 <consoleInit+0x1cc>)
 8002bd2:	821a      	strh	r2, [r3, #16]
		DispRowMasks[9]  = 0b1000000000001001;
 8002bd4:	4b18      	ldr	r3, [pc, #96]	; (8002c38 <consoleInit+0x1bc>)
 8002bd6:	4a1c      	ldr	r2, [pc, #112]	; (8002c48 <consoleInit+0x1cc>)
 8002bd8:	825a      	strh	r2, [r3, #18]
		DispRowMasks[10] = 0b0100010000010010;
 8002bda:	4b17      	ldr	r3, [pc, #92]	; (8002c38 <consoleInit+0x1bc>)
 8002bdc:	4a19      	ldr	r2, [pc, #100]	; (8002c44 <consoleInit+0x1c8>)
 8002bde:	829a      	strh	r2, [r3, #20]
		DispRowMasks[11] = 0b0100010000010010;
 8002be0:	4b15      	ldr	r3, [pc, #84]	; (8002c38 <consoleInit+0x1bc>)
 8002be2:	4a18      	ldr	r2, [pc, #96]	; (8002c44 <consoleInit+0x1c8>)
 8002be4:	82da      	strh	r2, [r3, #22]
		DispRowMasks[12] = 0b0010000000000100;
 8002be6:	4b14      	ldr	r3, [pc, #80]	; (8002c38 <consoleInit+0x1bc>)
 8002be8:	4a15      	ldr	r2, [pc, #84]	; (8002c40 <consoleInit+0x1c4>)
 8002bea:	831a      	strh	r2, [r3, #24]
		DispRowMasks[13] = 0b0001000000001000;
 8002bec:	4b12      	ldr	r3, [pc, #72]	; (8002c38 <consoleInit+0x1bc>)
 8002bee:	4a13      	ldr	r2, [pc, #76]	; (8002c3c <consoleInit+0x1c0>)
 8002bf0:	835a      	strh	r2, [r3, #26]
		DispRowMasks[14] = 0b0000110000110000;
 8002bf2:	4b11      	ldr	r3, [pc, #68]	; (8002c38 <consoleInit+0x1bc>)
 8002bf4:	22c3      	movs	r2, #195	; 0xc3
 8002bf6:	0112      	lsls	r2, r2, #4
 8002bf8:	839a      	strh	r2, [r3, #28]
		DispRowMasks[15] = 0b0000001111000000;
 8002bfa:	4b0f      	ldr	r3, [pc, #60]	; (8002c38 <consoleInit+0x1bc>)
 8002bfc:	22f0      	movs	r2, #240	; 0xf0
 8002bfe:	0092      	lsls	r2, r2, #2
 8002c00:	83da      	strh	r2, [r3, #30]
		globalColor.red = 255;
 8002c02:	4b0a      	ldr	r3, [pc, #40]	; (8002c2c <consoleInit+0x1b0>)
 8002c04:	22ff      	movs	r2, #255	; 0xff
 8002c06:	70da      	strb	r2, [r3, #3]
		globalColor.green = 255;
 8002c08:	4b08      	ldr	r3, [pc, #32]	; (8002c2c <consoleInit+0x1b0>)
 8002c0a:	22ff      	movs	r2, #255	; 0xff
 8002c0c:	709a      	strb	r2, [r3, #2]
		globalColor.blue = 255;
 8002c0e:	4b07      	ldr	r3, [pc, #28]	; (8002c2c <consoleInit+0x1b0>)
 8002c10:	22ff      	movs	r2, #255	; 0xff
 8002c12:	705a      	strb	r2, [r3, #1]
	}

}
 8002c14:	46c0      	nop			; (mov r8, r8)
 8002c16:	46bd      	mov	sp, r7
 8002c18:	b002      	add	sp, #8
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	200004c6 	.word	0x200004c6
 8002c20:	20000553 	.word	0x20000553
 8002c24:	2000047c 	.word	0x2000047c
 8002c28:	20000508 	.word	0x20000508
 8002c2c:	200001f4 	.word	0x200001f4
 8002c30:	200001cc 	.word	0x200001cc
 8002c34:	20000188 	.word	0x20000188
 8002c38:	2000018c 	.word	0x2000018c
 8002c3c:	00001008 	.word	0x00001008
 8002c40:	00002004 	.word	0x00002004
 8002c44:	00004412 	.word	0x00004412
 8002c48:	ffff8009 	.word	0xffff8009
 8002c4c:	ffff8189 	.word	0xffff8189

08002c50 <consoleError>:

void consoleError()
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
	USB_VCP_DataTx((uint8_t*)"invalid input:",0);
 8002c54:	4b0c      	ldr	r3, [pc, #48]	; (8002c88 <consoleError+0x38>)
 8002c56:	2100      	movs	r1, #0
 8002c58:	0018      	movs	r0, r3
 8002c5a:	f7fe fd01 	bl	8001660 <USB_VCP_DataTx>
	USB_VCP_DataTx((uint8_t*)stringBuff,0);
 8002c5e:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <consoleError+0x3c>)
 8002c60:	2100      	movs	r1, #0
 8002c62:	0018      	movs	r0, r3
 8002c64:	f7fe fcfc 	bl	8001660 <USB_VCP_DataTx>
	USB_VCP_DataTx((uint8_t*)"\n",0);
 8002c68:	4b09      	ldr	r3, [pc, #36]	; (8002c90 <consoleError+0x40>)
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f7fe fcf7 	bl	8001660 <USB_VCP_DataTx>
	consoleFlags |= CFLAG_NEWSTATE;
 8002c72:	4b08      	ldr	r3, [pc, #32]	; (8002c94 <consoleError+0x44>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	2201      	movs	r2, #1
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <consoleError+0x44>)
 8002c7e:	701a      	strb	r2, [r3, #0]
	return;
 8002c80:	46c0      	nop			; (mov r8, r8)
}
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	46c0      	nop			; (mov r8, r8)
 8002c88:	080073ec 	.word	0x080073ec
 8002c8c:	200004c8 	.word	0x200004c8
 8002c90:	080073fc 	.word	0x080073fc
 8002c94:	20000553 	.word	0x20000553

08002c98 <consoleExecute>:


void consoleExecute()
{
 8002c98:	b5b0      	push	{r4, r5, r7, lr}
 8002c9a:	b08a      	sub	sp, #40	; 0x28
 8002c9c:	af02      	add	r7, sp, #8
	uint8_t inputLength = USB_ReadAvailable(stringBuff);
 8002c9e:	4be0      	ldr	r3, [pc, #896]	; (8003020 <consoleExecute+0x388>)
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f7fe fd7b 	bl	800179c <USB_ReadAvailable>
 8002ca6:	0002      	movs	r2, r0
 8002ca8:	231f      	movs	r3, #31
 8002caa:	18fb      	adds	r3, r7, r3
 8002cac:	701a      	strb	r2, [r3, #0]
	switch(consoleStates)
 8002cae:	4bdd      	ldr	r3, [pc, #884]	; (8003024 <consoleExecute+0x38c>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d900      	bls.n	8002cb8 <consoleExecute+0x20>
 8002cb6:	e291      	b.n	80031dc <consoleExecute+0x544>
 8002cb8:	009a      	lsls	r2, r3, #2
 8002cba:	4bdb      	ldr	r3, [pc, #876]	; (8003028 <consoleExecute+0x390>)
 8002cbc:	18d3      	adds	r3, r2, r3
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	469f      	mov	pc, r3
	{
	case CSTATE_ROW_VIS:	//set number of visible rows
		if(consoleFlags & CFLAG_NEWSTATE)
 8002cc2:	4bda      	ldr	r3, [pc, #872]	; (800302c <consoleExecute+0x394>)
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	001a      	movs	r2, r3
 8002cc8:	2301      	movs	r3, #1
 8002cca:	4013      	ands	r3, r2
 8002ccc:	d019      	beq.n	8002d02 <consoleExecute+0x6a>
		{
			consoleFlags &= ~CFLAG_NEWSTATE;
 8002cce:	4bd7      	ldr	r3, [pc, #860]	; (800302c <consoleExecute+0x394>)
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	4393      	bics	r3, r2
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	4bd4      	ldr	r3, [pc, #848]	; (800302c <consoleExecute+0x394>)
 8002cda:	701a      	strb	r2, [r3, #0]
			USB_VCP_DataTx((uint8_t*)"set number of visible rows - 1..32",0);
 8002cdc:	4bd4      	ldr	r3, [pc, #848]	; (8003030 <consoleExecute+0x398>)
 8002cde:	2100      	movs	r1, #0
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	f7fe fcbd 	bl	8001660 <USB_VCP_DataTx>
			sprintf((char*)stringBuff,"[%u]\n",RowsVisible);
 8002ce6:	4bd3      	ldr	r3, [pc, #844]	; (8003034 <consoleExecute+0x39c>)
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	001a      	movs	r2, r3
 8002cee:	49d2      	ldr	r1, [pc, #840]	; (8003038 <consoleExecute+0x3a0>)
 8002cf0:	4bcb      	ldr	r3, [pc, #812]	; (8003020 <consoleExecute+0x388>)
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	f003 feee 	bl	8006ad4 <siprintf>
			USB_VCP_DataTx((uint8_t*)stringBuff,0);
 8002cf8:	4bc9      	ldr	r3, [pc, #804]	; (8003020 <consoleExecute+0x388>)
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	f7fe fcaf 	bl	8001660 <USB_VCP_DataTx>
		}
		if(inputLength == 0)
 8002d02:	231f      	movs	r3, #31
 8002d04:	18fb      	adds	r3, r7, r3
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d100      	bne.n	8002d0e <consoleExecute+0x76>
 8002d0c:	e25d      	b.n	80031ca <consoleExecute+0x532>
		{
			return;
		}
		//the user input could just be a single line break (no change)
		if(stringBuff[0] == '\n')
 8002d0e:	4bc4      	ldr	r3, [pc, #784]	; (8003020 <consoleExecute+0x388>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	2b0a      	cmp	r3, #10
 8002d14:	d10b      	bne.n	8002d2e <consoleExecute+0x96>
		{
			USB_VCP_DataTx((uint8_t*)"no change\n",0);
 8002d16:	4bc9      	ldr	r3, [pc, #804]	; (800303c <consoleExecute+0x3a4>)
 8002d18:	2100      	movs	r1, #0
 8002d1a:	0018      	movs	r0, r3
 8002d1c:	f7fe fca0 	bl	8001660 <USB_VCP_DataTx>
			consoleStates = CSTATE_ROW_OVERSCAN;
 8002d20:	4bc0      	ldr	r3, [pc, #768]	; (8003024 <consoleExecute+0x38c>)
 8002d22:	2201      	movs	r2, #1
 8002d24:	701a      	strb	r2, [r3, #0]
			consoleFlags = CFLAG_NEWSTATE;
 8002d26:	4bc1      	ldr	r3, [pc, #772]	; (800302c <consoleExecute+0x394>)
 8002d28:	2201      	movs	r2, #1
 8002d2a:	701a      	strb	r2, [r3, #0]
			return;
 8002d2c:	e256      	b.n	80031dc <consoleExecute+0x544>
		}
		uint32_t rows = StrToU32(stringBuff,0,inputLength);
 8002d2e:	231f      	movs	r3, #31
 8002d30:	18fb      	adds	r3, r7, r3
 8002d32:	781a      	ldrb	r2, [r3, #0]
 8002d34:	4bba      	ldr	r3, [pc, #744]	; (8003020 <consoleExecute+0x388>)
 8002d36:	2100      	movs	r1, #0
 8002d38:	0018      	movs	r0, r3
 8002d3a:	f7ff fd25 	bl	8002788 <StrToU32>
 8002d3e:	0003      	movs	r3, r0
 8002d40:	61bb      	str	r3, [r7, #24]
		if(rows > 32)
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	2b20      	cmp	r3, #32
 8002d46:	d902      	bls.n	8002d4e <consoleExecute+0xb6>
		{
			//no number or too big number
			consoleError();
 8002d48:	f7ff ff82 	bl	8002c50 <consoleError>
			return;
 8002d4c:	e246      	b.n	80031dc <consoleExecute+0x544>
		}
		EE_WriteVariable(EE_ROWS,(uint8_t)rows);
 8002d4e:	4bbc      	ldr	r3, [pc, #752]	; (8003040 <consoleExecute+0x3a8>)
 8002d50:	88db      	ldrh	r3, [r3, #6]
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	b2d2      	uxtb	r2, r2
 8002d56:	b292      	uxth	r2, r2
 8002d58:	0011      	movs	r1, r2
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	f7fe fa02 	bl	8001164 <EE_WriteVariable>
		RowsVisible = (uint8_t) rows;
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	4bb3      	ldr	r3, [pc, #716]	; (8003034 <consoleExecute+0x39c>)
 8002d66:	701a      	strb	r2, [r3, #0]
		sprintf((char*)stringBuff,"saved number of visible rows %u\n",RowsVisible);
 8002d68:	4bb2      	ldr	r3, [pc, #712]	; (8003034 <consoleExecute+0x39c>)
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	001a      	movs	r2, r3
 8002d70:	49b4      	ldr	r1, [pc, #720]	; (8003044 <consoleExecute+0x3ac>)
 8002d72:	4bab      	ldr	r3, [pc, #684]	; (8003020 <consoleExecute+0x388>)
 8002d74:	0018      	movs	r0, r3
 8002d76:	f003 fead 	bl	8006ad4 <siprintf>
		USB_VCP_DataTx((uint8_t*)stringBuff,0);
 8002d7a:	4ba9      	ldr	r3, [pc, #676]	; (8003020 <consoleExecute+0x388>)
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	0018      	movs	r0, r3
 8002d80:	f7fe fc6e 	bl	8001660 <USB_VCP_DataTx>
		consoleStates = CSTATE_ROW_OVERSCAN;
 8002d84:	4ba7      	ldr	r3, [pc, #668]	; (8003024 <consoleExecute+0x38c>)
 8002d86:	2201      	movs	r2, #1
 8002d88:	701a      	strb	r2, [r3, #0]
		consoleFlags = CFLAG_NEWSTATE;
 8002d8a:	4ba8      	ldr	r3, [pc, #672]	; (800302c <consoleExecute+0x394>)
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	701a      	strb	r2, [r3, #0]
		break;
 8002d90:	e224      	b.n	80031dc <consoleExecute+0x544>
	case CSTATE_ROW_OVERSCAN:	//set number of overscan rows
		if(consoleFlags & CFLAG_NEWSTATE)
 8002d92:	4ba6      	ldr	r3, [pc, #664]	; (800302c <consoleExecute+0x394>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	001a      	movs	r2, r3
 8002d98:	2301      	movs	r3, #1
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	d01e      	beq.n	8002ddc <consoleExecute+0x144>
		{
			consoleFlags &= ~CFLAG_NEWSTATE;
 8002d9e:	4ba3      	ldr	r3, [pc, #652]	; (800302c <consoleExecute+0x394>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	2201      	movs	r2, #1
 8002da4:	4393      	bics	r3, r2
 8002da6:	b2da      	uxtb	r2, r3
 8002da8:	4ba0      	ldr	r3, [pc, #640]	; (800302c <consoleExecute+0x394>)
 8002daa:	701a      	strb	r2, [r3, #0]
			USB_VCP_DataTx((uint8_t*)"set number of overscan rows (start and end)",0);
 8002dac:	4ba6      	ldr	r3, [pc, #664]	; (8003048 <consoleExecute+0x3b0>)
 8002dae:	2100      	movs	r1, #0
 8002db0:	0018      	movs	r0, r3
 8002db2:	f7fe fc55 	bl	8001660 <USB_VCP_DataTx>
			sprintf((char*)stringBuff,"[%u]\n",RowsOverscan);
 8002db6:	4ba5      	ldr	r3, [pc, #660]	; (800304c <consoleExecute+0x3b4>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	001a      	movs	r2, r3
 8002dbe:	499e      	ldr	r1, [pc, #632]	; (8003038 <consoleExecute+0x3a0>)
 8002dc0:	4b97      	ldr	r3, [pc, #604]	; (8003020 <consoleExecute+0x388>)
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f003 fe86 	bl	8006ad4 <siprintf>
			USB_VCP_DataTx((uint8_t*)stringBuff,0);
 8002dc8:	4b95      	ldr	r3, [pc, #596]	; (8003020 <consoleExecute+0x388>)
 8002dca:	2100      	movs	r1, #0
 8002dcc:	0018      	movs	r0, r3
 8002dce:	f7fe fc47 	bl	8001660 <USB_VCP_DataTx>
			USB_VCP_DataTx((uint8_t*)"the total number of rows (visible + 2*overscan) should be 2^n!\n",0);
 8002dd2:	4b9f      	ldr	r3, [pc, #636]	; (8003050 <consoleExecute+0x3b8>)
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	f7fe fc42 	bl	8001660 <USB_VCP_DataTx>
		}
		if(inputLength == 0)
 8002ddc:	231f      	movs	r3, #31
 8002dde:	18fb      	adds	r3, r7, r3
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d100      	bne.n	8002de8 <consoleExecute+0x150>
 8002de6:	e1f2      	b.n	80031ce <consoleExecute+0x536>
		{
			return;
		}
		//the user input could just be a single line break (no change)
		if(stringBuff[0] == '\n')
 8002de8:	4b8d      	ldr	r3, [pc, #564]	; (8003020 <consoleExecute+0x388>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b0a      	cmp	r3, #10
 8002dee:	d10b      	bne.n	8002e08 <consoleExecute+0x170>
		{
			USB_VCP_DataTx((uint8_t*)"no change\n",0);
 8002df0:	4b92      	ldr	r3, [pc, #584]	; (800303c <consoleExecute+0x3a4>)
 8002df2:	2100      	movs	r1, #0
 8002df4:	0018      	movs	r0, r3
 8002df6:	f7fe fc33 	bl	8001660 <USB_VCP_DataTx>
			consoleStates = CSTATE_PICTURE;
 8002dfa:	4b8a      	ldr	r3, [pc, #552]	; (8003024 <consoleExecute+0x38c>)
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	701a      	strb	r2, [r3, #0]
			consoleFlags = CFLAG_NEWSTATE;
 8002e00:	4b8a      	ldr	r3, [pc, #552]	; (800302c <consoleExecute+0x394>)
 8002e02:	2201      	movs	r2, #1
 8002e04:	701a      	strb	r2, [r3, #0]
			return;
 8002e06:	e1e9      	b.n	80031dc <consoleExecute+0x544>
		}
		uint32_t overscan = StrToU32(stringBuff,0,inputLength);
 8002e08:	231f      	movs	r3, #31
 8002e0a:	18fb      	adds	r3, r7, r3
 8002e0c:	781a      	ldrb	r2, [r3, #0]
 8002e0e:	4b84      	ldr	r3, [pc, #528]	; (8003020 <consoleExecute+0x388>)
 8002e10:	2100      	movs	r1, #0
 8002e12:	0018      	movs	r0, r3
 8002e14:	f7ff fcb8 	bl	8002788 <StrToU32>
 8002e18:	0003      	movs	r3, r0
 8002e1a:	617b      	str	r3, [r7, #20]
		if(overscan > 0xFF)
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	2bff      	cmp	r3, #255	; 0xff
 8002e20:	d902      	bls.n	8002e28 <consoleExecute+0x190>
		{
			//no number or too big number
			consoleError();
 8002e22:	f7ff ff15 	bl	8002c50 <consoleError>
			return;
 8002e26:	e1d9      	b.n	80031dc <consoleExecute+0x544>
		}
		EE_WriteVariable(EE_OVERSCAN,(uint8_t)overscan);
 8002e28:	4b85      	ldr	r3, [pc, #532]	; (8003040 <consoleExecute+0x3a8>)
 8002e2a:	891b      	ldrh	r3, [r3, #8]
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	b2d2      	uxtb	r2, r2
 8002e30:	b292      	uxth	r2, r2
 8002e32:	0011      	movs	r1, r2
 8002e34:	0018      	movs	r0, r3
 8002e36:	f7fe f995 	bl	8001164 <EE_WriteVariable>
		RowsOverscan = (uint8_t)overscan;
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	4b83      	ldr	r3, [pc, #524]	; (800304c <consoleExecute+0x3b4>)
 8002e40:	701a      	strb	r2, [r3, #0]
		sprintf((char*)stringBuff,"saved number of overscan rows %u\n",RowsVisible);
 8002e42:	4b7c      	ldr	r3, [pc, #496]	; (8003034 <consoleExecute+0x39c>)
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	001a      	movs	r2, r3
 8002e4a:	4982      	ldr	r1, [pc, #520]	; (8003054 <consoleExecute+0x3bc>)
 8002e4c:	4b74      	ldr	r3, [pc, #464]	; (8003020 <consoleExecute+0x388>)
 8002e4e:	0018      	movs	r0, r3
 8002e50:	f003 fe40 	bl	8006ad4 <siprintf>
		USB_VCP_DataTx((uint8_t*)stringBuff,0);
 8002e54:	4b72      	ldr	r3, [pc, #456]	; (8003020 <consoleExecute+0x388>)
 8002e56:	2100      	movs	r1, #0
 8002e58:	0018      	movs	r0, r3
 8002e5a:	f7fe fc01 	bl	8001660 <USB_VCP_DataTx>
		consoleStates = CSTATE_PICTURE;
 8002e5e:	4b71      	ldr	r3, [pc, #452]	; (8003024 <consoleExecute+0x38c>)
 8002e60:	2202      	movs	r2, #2
 8002e62:	701a      	strb	r2, [r3, #0]
		consoleFlags = CFLAG_NEWSTATE;
 8002e64:	4b71      	ldr	r3, [pc, #452]	; (800302c <consoleExecute+0x394>)
 8002e66:	2201      	movs	r2, #1
 8002e68:	701a      	strb	r2, [r3, #0]
		break;
 8002e6a:	e1b7      	b.n	80031dc <consoleExecute+0x544>
	case CSTATE_PICTURE:	//set picture data
		if(consoleFlags & CFLAG_NEWSTATE)
 8002e6c:	4b6f      	ldr	r3, [pc, #444]	; (800302c <consoleExecute+0x394>)
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	001a      	movs	r2, r3
 8002e72:	2301      	movs	r3, #1
 8002e74:	4013      	ands	r3, r2
 8002e76:	d020      	beq.n	8002eba <consoleExecute+0x222>
		{
			consoleFlags &= ~CFLAG_NEWSTATE;
 8002e78:	4b6c      	ldr	r3, [pc, #432]	; (800302c <consoleExecute+0x394>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	4393      	bics	r3, r2
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	4b6a      	ldr	r3, [pc, #424]	; (800302c <consoleExecute+0x394>)
 8002e84:	701a      	strb	r2, [r3, #0]
			USB_VCP_DataTx((uint8_t*)"enter picture data - one value per row\n",0);
 8002e86:	4b74      	ldr	r3, [pc, #464]	; (8003058 <consoleExecute+0x3c0>)
 8002e88:	2100      	movs	r1, #0
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	f7fe fbe8 	bl	8001660 <USB_VCP_DataTx>
			USB_VCP_DataTx((uint8_t*)"1st row is the leftmost, MSB is top pixel\n",0);
 8002e90:	4b72      	ldr	r3, [pc, #456]	; (800305c <consoleExecute+0x3c4>)
 8002e92:	2100      	movs	r1, #0
 8002e94:	0018      	movs	r0, r3
 8002e96:	f7fe fbe3 	bl	8001660 <USB_VCP_DataTx>
			//Todo: writeback of the saved data?
			CountOfEnteredDates = 0;
 8002e9a:	4b71      	ldr	r3, [pc, #452]	; (8003060 <consoleExecute+0x3c8>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	701a      	strb	r2, [r3, #0]

			sprintf((char*)stringBuff,"%u>",CountOfEnteredDates);
 8002ea0:	4b6f      	ldr	r3, [pc, #444]	; (8003060 <consoleExecute+0x3c8>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	001a      	movs	r2, r3
 8002ea6:	496f      	ldr	r1, [pc, #444]	; (8003064 <consoleExecute+0x3cc>)
 8002ea8:	4b5d      	ldr	r3, [pc, #372]	; (8003020 <consoleExecute+0x388>)
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f003 fe12 	bl	8006ad4 <siprintf>
			USB_VCP_DataTx((uint8_t*)stringBuff,0);
 8002eb0:	4b5b      	ldr	r3, [pc, #364]	; (8003020 <consoleExecute+0x388>)
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	f7fe fbd3 	bl	8001660 <USB_VCP_DataTx>
		}
		if(CountOfEnteredDates < RowsVisible)
 8002eba:	4b69      	ldr	r3, [pc, #420]	; (8003060 <consoleExecute+0x3c8>)
 8002ebc:	781a      	ldrb	r2, [r3, #0]
 8002ebe:	4b5d      	ldr	r3, [pc, #372]	; (8003034 <consoleExecute+0x39c>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d24f      	bcs.n	8002f68 <consoleExecute+0x2d0>
		{
			if(inputLength == 0)
 8002ec8:	231f      	movs	r3, #31
 8002eca:	18fb      	adds	r3, r7, r3
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d100      	bne.n	8002ed4 <consoleExecute+0x23c>
 8002ed2:	e17e      	b.n	80031d2 <consoleExecute+0x53a>
			{
				return;
			}
			//the user input could just be a single line break

			if(stringBuff[0] == '\n')
 8002ed4:	4b52      	ldr	r3, [pc, #328]	; (8003020 <consoleExecute+0x388>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	2b0a      	cmp	r3, #10
 8002eda:	d10f      	bne.n	8002efc <consoleExecute+0x264>
			{
				//for row 0, this terminates the complete picture data entry
				if(CountOfEnteredDates == 0)
 8002edc:	4b60      	ldr	r3, [pc, #384]	; (8003060 <consoleExecute+0x3c8>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10b      	bne.n	8002efc <consoleExecute+0x264>
				{
					USB_VCP_DataTx((uint8_t*)"no change to picture data\n",0);
 8002ee4:	4b60      	ldr	r3, [pc, #384]	; (8003068 <consoleExecute+0x3d0>)
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	0018      	movs	r0, r3
 8002eea:	f7fe fbb9 	bl	8001660 <USB_VCP_DataTx>
					consoleStates = CSTATE_COLOR;
 8002eee:	4b4d      	ldr	r3, [pc, #308]	; (8003024 <consoleExecute+0x38c>)
 8002ef0:	2203      	movs	r2, #3
 8002ef2:	701a      	strb	r2, [r3, #0]
					consoleFlags = CFLAG_NEWSTATE;
 8002ef4:	4b4d      	ldr	r3, [pc, #308]	; (800302c <consoleExecute+0x394>)
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	701a      	strb	r2, [r3, #0]
					return;
 8002efa:	e16f      	b.n	80031dc <consoleExecute+0x544>
				}
			}
			uint32_t rowData = StrToU32(stringBuff,0,inputLength);
 8002efc:	231f      	movs	r3, #31
 8002efe:	18fb      	adds	r3, r7, r3
 8002f00:	781a      	ldrb	r2, [r3, #0]
 8002f02:	4b47      	ldr	r3, [pc, #284]	; (8003020 <consoleExecute+0x388>)
 8002f04:	2100      	movs	r1, #0
 8002f06:	0018      	movs	r0, r3
 8002f08:	f7ff fc3e 	bl	8002788 <StrToU32>
 8002f0c:	0003      	movs	r3, r0
 8002f0e:	613b      	str	r3, [r7, #16]
			if(rowData > 0xFFFF)
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	4a56      	ldr	r2, [pc, #344]	; (800306c <consoleExecute+0x3d4>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d902      	bls.n	8002f1e <consoleExecute+0x286>
			{
				//no number or too big number
				consoleError();
 8002f18:	f7ff fe9a 	bl	8002c50 <consoleError>
				return;
 8002f1c:	e15e      	b.n	80031dc <consoleExecute+0x544>
			}
			EE_WriteVariable(VirtAddVarTab[EE_PIC_START+CountOfEnteredDates],rowData);
 8002f1e:	4b50      	ldr	r3, [pc, #320]	; (8003060 <consoleExecute+0x3c8>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	1d5a      	adds	r2, r3, #5
 8002f24:	4b46      	ldr	r3, [pc, #280]	; (8003040 <consoleExecute+0x3a8>)
 8002f26:	0052      	lsls	r2, r2, #1
 8002f28:	5ad3      	ldrh	r3, [r2, r3]
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	b292      	uxth	r2, r2
 8002f2e:	0011      	movs	r1, r2
 8002f30:	0018      	movs	r0, r3
 8002f32:	f7fe f917 	bl	8001164 <EE_WriteVariable>
			USB_VCP_DataTx((uint8_t*)" saved\n",0);
 8002f36:	4b4e      	ldr	r3, [pc, #312]	; (8003070 <consoleExecute+0x3d8>)
 8002f38:	2100      	movs	r1, #0
 8002f3a:	0018      	movs	r0, r3
 8002f3c:	f7fe fb90 	bl	8001660 <USB_VCP_DataTx>
			CountOfEnteredDates++;
 8002f40:	4b47      	ldr	r3, [pc, #284]	; (8003060 <consoleExecute+0x3c8>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	3301      	adds	r3, #1
 8002f46:	b2da      	uxtb	r2, r3
 8002f48:	4b45      	ldr	r3, [pc, #276]	; (8003060 <consoleExecute+0x3c8>)
 8002f4a:	701a      	strb	r2, [r3, #0]
			sprintf((char*)stringBuff,"%u>",CountOfEnteredDates);
 8002f4c:	4b44      	ldr	r3, [pc, #272]	; (8003060 <consoleExecute+0x3c8>)
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	001a      	movs	r2, r3
 8002f52:	4944      	ldr	r1, [pc, #272]	; (8003064 <consoleExecute+0x3cc>)
 8002f54:	4b32      	ldr	r3, [pc, #200]	; (8003020 <consoleExecute+0x388>)
 8002f56:	0018      	movs	r0, r3
 8002f58:	f003 fdbc 	bl	8006ad4 <siprintf>
			USB_VCP_DataTx((uint8_t*)stringBuff,0);
 8002f5c:	4b30      	ldr	r3, [pc, #192]	; (8003020 <consoleExecute+0x388>)
 8002f5e:	2100      	movs	r1, #0
 8002f60:	0018      	movs	r0, r3
 8002f62:	f7fe fb7d 	bl	8001660 <USB_VCP_DataTx>
			USB_VCP_DataTx((uint8_t*)"successfully saved new picture\n",0);
			consoleStates = CSTATE_COLOR;
			consoleFlags = CFLAG_NEWSTATE;

		}
		break;
 8002f66:	e139      	b.n	80031dc <consoleExecute+0x544>
			USB_VCP_DataTx((uint8_t*)stringBuff,0);

		}
		else
		{
			USB_VCP_DataTx((uint8_t*)"successfully saved new picture\n",0);
 8002f68:	4b42      	ldr	r3, [pc, #264]	; (8003074 <consoleExecute+0x3dc>)
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	f7fe fb77 	bl	8001660 <USB_VCP_DataTx>
			consoleStates = CSTATE_COLOR;
 8002f72:	4b2c      	ldr	r3, [pc, #176]	; (8003024 <consoleExecute+0x38c>)
 8002f74:	2203      	movs	r2, #3
 8002f76:	701a      	strb	r2, [r3, #0]
			consoleFlags = CFLAG_NEWSTATE;
 8002f78:	4b2c      	ldr	r3, [pc, #176]	; (800302c <consoleExecute+0x394>)
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	701a      	strb	r2, [r3, #0]

		}
		break;
 8002f7e:	e12d      	b.n	80031dc <consoleExecute+0x544>
	case CSTATE_COLOR:	//set global color
		if(consoleFlags & CFLAG_NEWSTATE)
 8002f80:	4b2a      	ldr	r3, [pc, #168]	; (800302c <consoleExecute+0x394>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	001a      	movs	r2, r3
 8002f86:	2301      	movs	r3, #1
 8002f88:	4013      	ands	r3, r2
 8002f8a:	d01e      	beq.n	8002fca <consoleExecute+0x332>
		{
			consoleFlags &= ~CFLAG_NEWSTATE;
 8002f8c:	4b27      	ldr	r3, [pc, #156]	; (800302c <consoleExecute+0x394>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2201      	movs	r2, #1
 8002f92:	4393      	bics	r3, r2
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	4b25      	ldr	r3, [pc, #148]	; (800302c <consoleExecute+0x394>)
 8002f98:	701a      	strb	r2, [r3, #0]
			USB_VCP_DataTx((uint8_t*)"set global color as uint8_t R, uint8_t G, uint8_t B ",0);
 8002f9a:	4b37      	ldr	r3, [pc, #220]	; (8003078 <consoleExecute+0x3e0>)
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	f7fe fb5e 	bl	8001660 <USB_VCP_DataTx>
			sprintf((char*)stringBuff,"[%u,%u,%u]\n",EE_VAL_RED,EE_VAL_GREEN,EE_VAL_BLUE);
 8002fa4:	4b35      	ldr	r3, [pc, #212]	; (800307c <consoleExecute+0x3e4>)
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	001a      	movs	r2, r3
 8002faa:	4b34      	ldr	r3, [pc, #208]	; (800307c <consoleExecute+0x3e4>)
 8002fac:	885b      	ldrh	r3, [r3, #2]
 8002fae:	001c      	movs	r4, r3
 8002fb0:	4b32      	ldr	r3, [pc, #200]	; (800307c <consoleExecute+0x3e4>)
 8002fb2:	889b      	ldrh	r3, [r3, #4]
 8002fb4:	4932      	ldr	r1, [pc, #200]	; (8003080 <consoleExecute+0x3e8>)
 8002fb6:	481a      	ldr	r0, [pc, #104]	; (8003020 <consoleExecute+0x388>)
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	0023      	movs	r3, r4
 8002fbc:	f003 fd8a 	bl	8006ad4 <siprintf>
			USB_VCP_DataTx((uint8_t*)stringBuff,0);
 8002fc0:	4b17      	ldr	r3, [pc, #92]	; (8003020 <consoleExecute+0x388>)
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	f7fe fb4b 	bl	8001660 <USB_VCP_DataTx>
		}
		if(inputLength == 0)
 8002fca:	231f      	movs	r3, #31
 8002fcc:	18fb      	adds	r3, r7, r3
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d100      	bne.n	8002fd6 <consoleExecute+0x33e>
 8002fd4:	e0ff      	b.n	80031d6 <consoleExecute+0x53e>
		{
			return;
		}
		//the user input could just be a single line break (no change)
		if(stringBuff[0] == '\n')
 8002fd6:	4b12      	ldr	r3, [pc, #72]	; (8003020 <consoleExecute+0x388>)
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	2b0a      	cmp	r3, #10
 8002fdc:	d10b      	bne.n	8002ff6 <consoleExecute+0x35e>
		{
			USB_VCP_DataTx((uint8_t*)"no change\n",0);
 8002fde:	4b17      	ldr	r3, [pc, #92]	; (800303c <consoleExecute+0x3a4>)
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f7fe fb3c 	bl	8001660 <USB_VCP_DataTx>
			consoleStates = CSTATE_FINISHED;
 8002fe8:	4b0e      	ldr	r3, [pc, #56]	; (8003024 <consoleExecute+0x38c>)
 8002fea:	2204      	movs	r2, #4
 8002fec:	701a      	strb	r2, [r3, #0]
			consoleFlags = CFLAG_NEWSTATE;
 8002fee:	4b0f      	ldr	r3, [pc, #60]	; (800302c <consoleExecute+0x394>)
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	701a      	strb	r2, [r3, #0]
			return;
 8002ff4:	e0f2      	b.n	80031dc <consoleExecute+0x544>
		}
		//search for the 2 needed commas
		uint16_t comma1Idx;
		uint16_t comma2Idx;

		comma1Idx = StrFindChar(stringBuff, ',',1,inputLength);
 8002ff6:	230e      	movs	r3, #14
 8002ff8:	18fc      	adds	r4, r7, r3
 8002ffa:	231f      	movs	r3, #31
 8002ffc:	18fb      	adds	r3, r7, r3
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	4807      	ldr	r0, [pc, #28]	; (8003020 <consoleExecute+0x388>)
 8003002:	2201      	movs	r2, #1
 8003004:	212c      	movs	r1, #44	; 0x2c
 8003006:	f7ff fb75 	bl	80026f4 <StrFindChar>
 800300a:	0003      	movs	r3, r0
 800300c:	8023      	strh	r3, [r4, #0]
		if(comma1Idx == 0xFFFF)
 800300e:	230e      	movs	r3, #14
 8003010:	18fb      	adds	r3, r7, r3
 8003012:	881b      	ldrh	r3, [r3, #0]
 8003014:	4a15      	ldr	r2, [pc, #84]	; (800306c <consoleExecute+0x3d4>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d134      	bne.n	8003084 <consoleExecute+0x3ec>
		{
			//no comma found -> cannot be parsed
			consoleError();
 800301a:	f7ff fe19 	bl	8002c50 <consoleError>
			return;
 800301e:	e0dd      	b.n	80031dc <consoleExecute+0x544>
 8003020:	200004c8 	.word	0x200004c8
 8003024:	200004c6 	.word	0x200004c6
 8003028:	08007650 	.word	0x08007650
 800302c:	20000553 	.word	0x20000553
 8003030:	08007400 	.word	0x08007400
 8003034:	200001cc 	.word	0x200001cc
 8003038:	08007424 	.word	0x08007424
 800303c:	0800742c 	.word	0x0800742c
 8003040:	2000047c 	.word	0x2000047c
 8003044:	08007438 	.word	0x08007438
 8003048:	0800745c 	.word	0x0800745c
 800304c:	20000188 	.word	0x20000188
 8003050:	08007488 	.word	0x08007488
 8003054:	080074c8 	.word	0x080074c8
 8003058:	080074ec 	.word	0x080074ec
 800305c:	08007514 	.word	0x08007514
 8003060:	20000552 	.word	0x20000552
 8003064:	08007540 	.word	0x08007540
 8003068:	08007544 	.word	0x08007544
 800306c:	0000ffff 	.word	0x0000ffff
 8003070:	08007560 	.word	0x08007560
 8003074:	08007568 	.word	0x08007568
 8003078:	08007588 	.word	0x08007588
 800307c:	20000508 	.word	0x20000508
 8003080:	080075c0 	.word	0x080075c0
		}
		comma2Idx = StrFindChar(stringBuff, ',',comma1Idx + 1,inputLength);
 8003084:	230e      	movs	r3, #14
 8003086:	18fb      	adds	r3, r7, r3
 8003088:	881b      	ldrh	r3, [r3, #0]
 800308a:	b2db      	uxtb	r3, r3
 800308c:	3301      	adds	r3, #1
 800308e:	b2da      	uxtb	r2, r3
 8003090:	230c      	movs	r3, #12
 8003092:	18fc      	adds	r4, r7, r3
 8003094:	231f      	movs	r3, #31
 8003096:	18fb      	adds	r3, r7, r3
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	4852      	ldr	r0, [pc, #328]	; (80031e4 <consoleExecute+0x54c>)
 800309c:	212c      	movs	r1, #44	; 0x2c
 800309e:	f7ff fb29 	bl	80026f4 <StrFindChar>
 80030a2:	0003      	movs	r3, r0
 80030a4:	8023      	strh	r3, [r4, #0]
		if(comma1Idx == 0xFFFF)
 80030a6:	230e      	movs	r3, #14
 80030a8:	18fb      	adds	r3, r7, r3
 80030aa:	881b      	ldrh	r3, [r3, #0]
 80030ac:	4a4e      	ldr	r2, [pc, #312]	; (80031e8 <consoleExecute+0x550>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d102      	bne.n	80030b8 <consoleExecute+0x420>
		{
			//no comma found -> cannot be parsed
			consoleError();
 80030b2:	f7ff fdcd 	bl	8002c50 <consoleError>
			return;
 80030b6:	e091      	b.n	80031dc <consoleExecute+0x544>
		}

		//parse the values
		uint32_t red = StrToU32(stringBuff,0,comma1Idx);
 80030b8:	230e      	movs	r3, #14
 80030ba:	18fb      	adds	r3, r7, r3
 80030bc:	881b      	ldrh	r3, [r3, #0]
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	4b48      	ldr	r3, [pc, #288]	; (80031e4 <consoleExecute+0x54c>)
 80030c2:	2100      	movs	r1, #0
 80030c4:	0018      	movs	r0, r3
 80030c6:	f7ff fb5f 	bl	8002788 <StrToU32>
 80030ca:	0003      	movs	r3, r0
 80030cc:	60bb      	str	r3, [r7, #8]
		if(red > 0xFF)
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	2bff      	cmp	r3, #255	; 0xff
 80030d2:	d902      	bls.n	80030da <consoleExecute+0x442>
		{
			//no number or too big number
			consoleError();
 80030d4:	f7ff fdbc 	bl	8002c50 <consoleError>
			return;
 80030d8:	e080      	b.n	80031dc <consoleExecute+0x544>
		}
		uint32_t green = StrToU32(stringBuff,comma1Idx+1,comma2Idx);
 80030da:	230e      	movs	r3, #14
 80030dc:	18fb      	adds	r3, r7, r3
 80030de:	881b      	ldrh	r3, [r3, #0]
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	3301      	adds	r3, #1
 80030e4:	b2d9      	uxtb	r1, r3
 80030e6:	230c      	movs	r3, #12
 80030e8:	18fb      	adds	r3, r7, r3
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	4b3d      	ldr	r3, [pc, #244]	; (80031e4 <consoleExecute+0x54c>)
 80030f0:	0018      	movs	r0, r3
 80030f2:	f7ff fb49 	bl	8002788 <StrToU32>
 80030f6:	0003      	movs	r3, r0
 80030f8:	607b      	str	r3, [r7, #4]
		if(green > 0xFF)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2bff      	cmp	r3, #255	; 0xff
 80030fe:	d902      	bls.n	8003106 <consoleExecute+0x46e>
		{
			//no number or too big number
			consoleError();
 8003100:	f7ff fda6 	bl	8002c50 <consoleError>
			return;
 8003104:	e06a      	b.n	80031dc <consoleExecute+0x544>
		}
		uint32_t blue = StrToU32(stringBuff,comma2Idx+1,inputLength);
 8003106:	230c      	movs	r3, #12
 8003108:	18fb      	adds	r3, r7, r3
 800310a:	881b      	ldrh	r3, [r3, #0]
 800310c:	b2db      	uxtb	r3, r3
 800310e:	3301      	adds	r3, #1
 8003110:	b2d9      	uxtb	r1, r3
 8003112:	231f      	movs	r3, #31
 8003114:	18fb      	adds	r3, r7, r3
 8003116:	781a      	ldrb	r2, [r3, #0]
 8003118:	4b32      	ldr	r3, [pc, #200]	; (80031e4 <consoleExecute+0x54c>)
 800311a:	0018      	movs	r0, r3
 800311c:	f7ff fb34 	bl	8002788 <StrToU32>
 8003120:	0003      	movs	r3, r0
 8003122:	603b      	str	r3, [r7, #0]
		if(blue > 0xFF)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	2bff      	cmp	r3, #255	; 0xff
 8003128:	d902      	bls.n	8003130 <consoleExecute+0x498>
		{
			//no number or too big number
			consoleError();
 800312a:	f7ff fd91 	bl	8002c50 <consoleError>
			return;
 800312e:	e055      	b.n	80031dc <consoleExecute+0x544>
		}
		//all values ok -> write to flash
		EE_WriteVariable(EE_RED,(uint8_t)red);
 8003130:	4b2e      	ldr	r3, [pc, #184]	; (80031ec <consoleExecute+0x554>)
 8003132:	881b      	ldrh	r3, [r3, #0]
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	b2d2      	uxtb	r2, r2
 8003138:	b292      	uxth	r2, r2
 800313a:	0011      	movs	r1, r2
 800313c:	0018      	movs	r0, r3
 800313e:	f7fe f811 	bl	8001164 <EE_WriteVariable>
		EE_WriteVariable(EE_GREEN,(uint8_t)green);
 8003142:	4b2a      	ldr	r3, [pc, #168]	; (80031ec <consoleExecute+0x554>)
 8003144:	885b      	ldrh	r3, [r3, #2]
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	b2d2      	uxtb	r2, r2
 800314a:	b292      	uxth	r2, r2
 800314c:	0011      	movs	r1, r2
 800314e:	0018      	movs	r0, r3
 8003150:	f7fe f808 	bl	8001164 <EE_WriteVariable>
		EE_WriteVariable(EE_BLUE,(uint8_t)blue);
 8003154:	4b25      	ldr	r3, [pc, #148]	; (80031ec <consoleExecute+0x554>)
 8003156:	889b      	ldrh	r3, [r3, #4]
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	b2d2      	uxtb	r2, r2
 800315c:	b292      	uxth	r2, r2
 800315e:	0011      	movs	r1, r2
 8003160:	0018      	movs	r0, r3
 8003162:	f7fd ffff 	bl	8001164 <EE_WriteVariable>

		sprintf((char*)stringBuff,"saved global color %u,%u,%u\n",(uint8_t)red,(uint8_t)green,(uint8_t)blue);
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	22ff      	movs	r2, #255	; 0xff
 800316a:	4013      	ands	r3, r2
 800316c:	001c      	movs	r4, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	22ff      	movs	r2, #255	; 0xff
 8003172:	4013      	ands	r3, r2
 8003174:	001d      	movs	r5, r3
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	22ff      	movs	r2, #255	; 0xff
 800317a:	4013      	ands	r3, r2
 800317c:	491c      	ldr	r1, [pc, #112]	; (80031f0 <consoleExecute+0x558>)
 800317e:	4819      	ldr	r0, [pc, #100]	; (80031e4 <consoleExecute+0x54c>)
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	002b      	movs	r3, r5
 8003184:	0022      	movs	r2, r4
 8003186:	f003 fca5 	bl	8006ad4 <siprintf>
		USB_VCP_DataTx((uint8_t*)stringBuff,0);
 800318a:	4b16      	ldr	r3, [pc, #88]	; (80031e4 <consoleExecute+0x54c>)
 800318c:	2100      	movs	r1, #0
 800318e:	0018      	movs	r0, r3
 8003190:	f7fe fa66 	bl	8001660 <USB_VCP_DataTx>

		consoleStates = CSTATE_FINISHED;
 8003194:	4b17      	ldr	r3, [pc, #92]	; (80031f4 <consoleExecute+0x55c>)
 8003196:	2204      	movs	r2, #4
 8003198:	701a      	strb	r2, [r3, #0]
		consoleFlags = CFLAG_NEWSTATE;
 800319a:	4b17      	ldr	r3, [pc, #92]	; (80031f8 <consoleExecute+0x560>)
 800319c:	2201      	movs	r2, #1
 800319e:	701a      	strb	r2, [r3, #0]

		break;
 80031a0:	e01c      	b.n	80031dc <consoleExecute+0x544>
	case CSTATE_FINISHED:
		if(consoleFlags & CFLAG_NEWSTATE)
 80031a2:	4b15      	ldr	r3, [pc, #84]	; (80031f8 <consoleExecute+0x560>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	001a      	movs	r2, r3
 80031a8:	2301      	movs	r3, #1
 80031aa:	4013      	ands	r3, r2
 80031ac:	d015      	beq.n	80031da <consoleExecute+0x542>
		{
			consoleFlags &= ~CFLAG_NEWSTATE;
 80031ae:	4b12      	ldr	r3, [pc, #72]	; (80031f8 <consoleExecute+0x560>)
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2201      	movs	r2, #1
 80031b4:	4393      	bics	r3, r2
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	4b0f      	ldr	r3, [pc, #60]	; (80031f8 <consoleExecute+0x560>)
 80031ba:	701a      	strb	r2, [r3, #0]
			USB_VCP_DataTx((uint8_t*)"config done, ready for work!\n",0);
 80031bc:	4b0f      	ldr	r3, [pc, #60]	; (80031fc <consoleExecute+0x564>)
 80031be:	2100      	movs	r1, #0
 80031c0:	0018      	movs	r0, r3
 80031c2:	f7fe fa4d 	bl	8001660 <USB_VCP_DataTx>
		}
		break;
 80031c6:	46c0      	nop			; (mov r8, r8)
 80031c8:	e007      	b.n	80031da <consoleExecute+0x542>
			sprintf((char*)stringBuff,"[%u]\n",RowsVisible);
			USB_VCP_DataTx((uint8_t*)stringBuff,0);
		}
		if(inputLength == 0)
		{
			return;
 80031ca:	46c0      	nop			; (mov r8, r8)
 80031cc:	e006      	b.n	80031dc <consoleExecute+0x544>
			USB_VCP_DataTx((uint8_t*)stringBuff,0);
			USB_VCP_DataTx((uint8_t*)"the total number of rows (visible + 2*overscan) should be 2^n!\n",0);
		}
		if(inputLength == 0)
		{
			return;
 80031ce:	46c0      	nop			; (mov r8, r8)
 80031d0:	e004      	b.n	80031dc <consoleExecute+0x544>
		}
		if(CountOfEnteredDates < RowsVisible)
		{
			if(inputLength == 0)
			{
				return;
 80031d2:	46c0      	nop			; (mov r8, r8)
 80031d4:	e002      	b.n	80031dc <consoleExecute+0x544>
			sprintf((char*)stringBuff,"[%u,%u,%u]\n",EE_VAL_RED,EE_VAL_GREEN,EE_VAL_BLUE);
			USB_VCP_DataTx((uint8_t*)stringBuff,0);
		}
		if(inputLength == 0)
		{
			return;
 80031d6:	46c0      	nop			; (mov r8, r8)
 80031d8:	e000      	b.n	80031dc <consoleExecute+0x544>
		if(consoleFlags & CFLAG_NEWSTATE)
		{
			consoleFlags &= ~CFLAG_NEWSTATE;
			USB_VCP_DataTx((uint8_t*)"config done, ready for work!\n",0);
		}
		break;
 80031da:	46c0      	nop			; (mov r8, r8)
	}
}
 80031dc:	46bd      	mov	sp, r7
 80031de:	b008      	add	sp, #32
 80031e0:	bdb0      	pop	{r4, r5, r7, pc}
 80031e2:	46c0      	nop			; (mov r8, r8)
 80031e4:	200004c8 	.word	0x200004c8
 80031e8:	0000ffff 	.word	0x0000ffff
 80031ec:	2000047c 	.word	0x2000047c
 80031f0:	080075cc 	.word	0x080075cc
 80031f4:	200004c6 	.word	0x200004c6
 80031f8:	20000553 	.word	0x20000553
 80031fc:	080075ec 	.word	0x080075ec

08003200 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_Status  USBD_StdDevReq (USB_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  USBD_Status ret = USBD_OK;  
 800320a:	230f      	movs	r3, #15
 800320c:	18fb      	adds	r3, r7, r3
 800320e:	2200      	movs	r2, #0
 8003210:	701a      	strb	r2, [r3, #0]
  
  switch (req->bRequest) 
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	785b      	ldrb	r3, [r3, #1]
 8003216:	2b09      	cmp	r3, #9
 8003218:	d835      	bhi.n	8003286 <USBD_StdDevReq+0x86>
 800321a:	009a      	lsls	r2, r3, #2
 800321c:	4b21      	ldr	r3, [pc, #132]	; (80032a4 <USBD_StdDevReq+0xa4>)
 800321e:	18d3      	adds	r3, r2, r3
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	469f      	mov	pc, r3
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	0011      	movs	r1, r2
 800322a:	0018      	movs	r0, r3
 800322c:	f000 f98e 	bl	800354c <USBD_GetDescriptor>
    break;
 8003230:	e030      	b.n	8003294 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	0011      	movs	r1, r2
 8003238:	0018      	movs	r0, r3
 800323a:	f000 fa6f 	bl	800371c <USBD_SetAddress>
    break;
 800323e:	e029      	b.n	8003294 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	0011      	movs	r1, r2
 8003246:	0018      	movs	r0, r3
 8003248:	f000 fab0 	bl	80037ac <USBD_SetConfig>
    break;
 800324c:	e022      	b.n	8003294 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	0011      	movs	r1, r2
 8003254:	0018      	movs	r0, r3
 8003256:	f000 fb27 	bl	80038a8 <USBD_GetConfig>
    break;
 800325a:	e01b      	b.n	8003294 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	0011      	movs	r1, r2
 8003262:	0018      	movs	r0, r3
 8003264:	f000 fb54 	bl	8003910 <USBD_GetStatus>
    break;
 8003268:	e014      	b.n	8003294 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	0011      	movs	r1, r2
 8003270:	0018      	movs	r0, r3
 8003272:	f000 fb77 	bl	8003964 <USBD_SetFeature>
    break;
 8003276:	e00d      	b.n	8003294 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	0011      	movs	r1, r2
 800327e:	0018      	movs	r0, r3
 8003280:	f000 fb8e 	bl	80039a0 <USBD_ClrFeature>
    break;
 8003284:	e006      	b.n	8003294 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	0011      	movs	r1, r2
 800328c:	0018      	movs	r0, r3
 800328e:	f000 fbf1 	bl	8003a74 <USBD_CtlError>
    break;
 8003292:	46c0      	nop			; (mov r8, r8)
  }
  
  return ret;
 8003294:	230f      	movs	r3, #15
 8003296:	18fb      	adds	r3, r7, r3
 8003298:	781b      	ldrb	r3, [r3, #0]
}
 800329a:	0018      	movs	r0, r3
 800329c:	46bd      	mov	sp, r7
 800329e:	b004      	add	sp, #16
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	08007664 	.word	0x08007664

080032a8 <USBD_StdItfReq>:
  * @param  pdev: USB device instance
  * @param  req: usb request
  * @retval status
  */
USBD_Status  USBD_StdItfReq (USB_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 80032a8:	b590      	push	{r4, r7, lr}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  USBD_Status ret = USBD_OK; 
 80032b2:	230f      	movs	r3, #15
 80032b4:	18fb      	adds	r3, r7, r3
 80032b6:	2200      	movs	r2, #0
 80032b8:	701a      	strb	r2, [r3, #0]
  
  switch (pdev->dev.device_status) 
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	789b      	ldrb	r3, [r3, #2]
 80032be:	2b03      	cmp	r3, #3
 80032c0:	d126      	bne.n	8003310 <USBD_StdItfReq+0x68>
  {
  case USB_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_ITF_MAX_NUM) 
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	889b      	ldrh	r3, [r3, #4]
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d81a      	bhi.n	8003302 <USBD_StdItfReq+0x5a>
    {
      ret = (USBD_Status) (pdev->dev.class_cb->Setup (pdev, req)); 
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	23ac      	movs	r3, #172	; 0xac
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	58d3      	ldr	r3, [r2, r3]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	220f      	movs	r2, #15
 80032d8:	18bc      	adds	r4, r7, r2
 80032da:	6839      	ldr	r1, [r7, #0]
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	0010      	movs	r0, r2
 80032e0:	4798      	blx	r3
 80032e2:	0003      	movs	r3, r0
 80032e4:	7023      	strb	r3, [r4, #0]
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	88db      	ldrh	r3, [r3, #6]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d117      	bne.n	800331e <USBD_StdItfReq+0x76>
 80032ee:	230f      	movs	r3, #15
 80032f0:	18fb      	adds	r3, r7, r3
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d112      	bne.n	800331e <USBD_StdItfReq+0x76>
      {
         USBD_CtlSendStatus(pdev);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	0018      	movs	r0, r3
 80032fc:	f000 fcba 	bl	8003c74 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8003300:	e00d      	b.n	800331e <USBD_StdItfReq+0x76>
         USBD_CtlSendStatus(pdev);
      }
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
 8003302:	683a      	ldr	r2, [r7, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	0011      	movs	r1, r2
 8003308:	0018      	movs	r0, r3
 800330a:	f000 fbb3 	bl	8003a74 <USBD_CtlError>
    }
    break;
 800330e:	e006      	b.n	800331e <USBD_StdItfReq+0x76>
    
  default:
     USBD_CtlError(pdev , req);
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	0011      	movs	r1, r2
 8003316:	0018      	movs	r0, r3
 8003318:	f000 fbac 	bl	8003a74 <USBD_CtlError>
    break;
 800331c:	e000      	b.n	8003320 <USBD_StdItfReq+0x78>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 800331e:	46c0      	nop			; (mov r8, r8)
    
  default:
     USBD_CtlError(pdev , req);
    break;
  }
  return ret;
 8003320:	230f      	movs	r3, #15
 8003322:	18fb      	adds	r3, r7, r3
 8003324:	781b      	ldrb	r3, [r3, #0]
}
 8003326:	0018      	movs	r0, r3
 8003328:	46bd      	mov	sp, r7
 800332a:	b005      	add	sp, #20
 800332c:	bd90      	pop	{r4, r7, pc}
 800332e:	46c0      	nop			; (mov r8, r8)

08003330 <USBD_StdEPReq>:
  * @param  pdev: USB device instance
  * @param  req: usb request
  * @retval status
  */
USBD_Status  USBD_StdEPReq (USB_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  uint32_t USBD_ep_status  = 0; 
 800333a:	2300      	movs	r3, #0
 800333c:	60bb      	str	r3, [r7, #8]
  USBD_Status ret = USBD_OK; 
 800333e:	230f      	movs	r3, #15
 8003340:	18fb      	adds	r3, r7, r3
 8003342:	2200      	movs	r2, #0
 8003344:	701a      	strb	r2, [r3, #0]
  
  ep_addr  = LOBYTE(req->wIndex);   
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	889a      	ldrh	r2, [r3, #4]
 800334a:	230e      	movs	r3, #14
 800334c:	18fb      	adds	r3, r7, r3
 800334e:	701a      	strb	r2, [r3, #0]
  
  switch (req->bRequest) 
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	785b      	ldrb	r3, [r3, #1]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d04c      	beq.n	80033f2 <USBD_StdEPReq+0xc2>
 8003358:	2b03      	cmp	r3, #3
 800335a:	d003      	beq.n	8003364 <USBD_StdEPReq+0x34>
 800335c:	2b00      	cmp	r3, #0
 800335e:	d100      	bne.n	8003362 <USBD_StdEPReq+0x32>
 8003360:	e08e      	b.n	8003480 <USBD_StdEPReq+0x150>
      break;
    }
    break;
    
  default:
    break;
 8003362:	e0ec      	b.n	800353e <USBD_StdEPReq+0x20e>
  
  switch (req->bRequest) 
  {  
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev.device_status) 
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	789b      	ldrb	r3, [r3, #2]
 8003368:	2b02      	cmp	r3, #2
 800336a:	d002      	beq.n	8003372 <USBD_StdEPReq+0x42>
 800336c:	2b03      	cmp	r3, #3
 800336e:	d013      	beq.n	8003398 <USBD_StdEPReq+0x68>
 8003370:	e036      	b.n	80033e0 <USBD_StdEPReq+0xb0>
    {
    case USB_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8003372:	230e      	movs	r3, #14
 8003374:	18fb      	adds	r3, r7, r3
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d038      	beq.n	80033ee <USBD_StdEPReq+0xbe>
 800337c:	230e      	movs	r3, #14
 800337e:	18fb      	adds	r3, r7, r3
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	2b80      	cmp	r3, #128	; 0x80
 8003384:	d033      	beq.n	80033ee <USBD_StdEPReq+0xbe>
      {
        DCD_EP_Stall(pdev , ep_addr);
 8003386:	230e      	movs	r3, #14
 8003388:	18fb      	adds	r3, r7, r3
 800338a:	781a      	ldrb	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	0011      	movs	r1, r2
 8003390:	0018      	movs	r0, r3
 8003392:	f001 ff7b 	bl	800528c <DCD_EP_Stall>
      }
      break;	
 8003396:	e02a      	b.n	80033ee <USBD_StdEPReq+0xbe>
      
    case USB_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	885b      	ldrh	r3, [r3, #2]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d111      	bne.n	80033c4 <USBD_StdEPReq+0x94>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80033a0:	230e      	movs	r3, #14
 80033a2:	18fb      	adds	r3, r7, r3
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00c      	beq.n	80033c4 <USBD_StdEPReq+0x94>
 80033aa:	230e      	movs	r3, #14
 80033ac:	18fb      	adds	r3, r7, r3
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	2b80      	cmp	r3, #128	; 0x80
 80033b2:	d007      	beq.n	80033c4 <USBD_StdEPReq+0x94>
        { 
          DCD_EP_Stall(pdev , ep_addr);
 80033b4:	230e      	movs	r3, #14
 80033b6:	18fb      	adds	r3, r7, r3
 80033b8:	781a      	ldrb	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	0011      	movs	r1, r2
 80033be:	0018      	movs	r0, r3
 80033c0:	f001 ff64 	bl	800528c <DCD_EP_Stall>
          
        }
      }
      pdev->dev.class_cb->Setup (pdev, req);   
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	23ac      	movs	r3, #172	; 0xac
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	58d3      	ldr	r3, [r2, r3]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	6839      	ldr	r1, [r7, #0]
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	0010      	movs	r0, r2
 80033d4:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	0018      	movs	r0, r3
 80033da:	f000 fc4b 	bl	8003c74 <USBD_CtlSendStatus>
      
      break;
 80033de:	e007      	b.n	80033f0 <USBD_StdEPReq+0xc0>
      
    default:                         
      USBD_CtlError(pdev , req);
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	0011      	movs	r1, r2
 80033e6:	0018      	movs	r0, r3
 80033e8:	f000 fb44 	bl	8003a74 <USBD_CtlError>
      break;    
 80033ec:	e000      	b.n	80033f0 <USBD_StdEPReq+0xc0>
    case USB_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
      {
        DCD_EP_Stall(pdev , ep_addr);
      }
      break;	
 80033ee:	46c0      	nop			; (mov r8, r8)
      
    default:                         
      USBD_CtlError(pdev , req);
      break;    
    }
    break;
 80033f0:	e0a5      	b.n	800353e <USBD_StdEPReq+0x20e>
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev.device_status) 
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	789b      	ldrb	r3, [r3, #2]
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d002      	beq.n	8003400 <USBD_StdEPReq+0xd0>
 80033fa:	2b03      	cmp	r3, #3
 80033fc:	d013      	beq.n	8003426 <USBD_StdEPReq+0xf6>
 80033fe:	e036      	b.n	800346e <USBD_StdEPReq+0x13e>
    {
    case USB_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8003400:	230e      	movs	r3, #14
 8003402:	18fb      	adds	r3, r7, r3
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d038      	beq.n	800347c <USBD_StdEPReq+0x14c>
 800340a:	230e      	movs	r3, #14
 800340c:	18fb      	adds	r3, r7, r3
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	2b80      	cmp	r3, #128	; 0x80
 8003412:	d033      	beq.n	800347c <USBD_StdEPReq+0x14c>
      {
        DCD_EP_Stall(pdev , ep_addr);
 8003414:	230e      	movs	r3, #14
 8003416:	18fb      	adds	r3, r7, r3
 8003418:	781a      	ldrb	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	0011      	movs	r1, r2
 800341e:	0018      	movs	r0, r3
 8003420:	f001 ff34 	bl	800528c <DCD_EP_Stall>
      }
      break;	
 8003424:	e02a      	b.n	800347c <USBD_StdEPReq+0x14c>
      
    case USB_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	885b      	ldrh	r3, [r3, #2]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d111      	bne.n	8003452 <USBD_StdEPReq+0x122>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800342e:	230e      	movs	r3, #14
 8003430:	18fb      	adds	r3, r7, r3
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00c      	beq.n	8003452 <USBD_StdEPReq+0x122>
 8003438:	230e      	movs	r3, #14
 800343a:	18fb      	adds	r3, r7, r3
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	2b80      	cmp	r3, #128	; 0x80
 8003440:	d007      	beq.n	8003452 <USBD_StdEPReq+0x122>
        {        
          DCD_EP_ClrStall(pdev , ep_addr);
 8003442:	230e      	movs	r3, #14
 8003444:	18fb      	adds	r3, r7, r3
 8003446:	781a      	ldrb	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	0011      	movs	r1, r2
 800344c:	0018      	movs	r0, r3
 800344e:	f001 ff8b 	bl	8005368 <DCD_EP_ClrStall>
        }
      }
      pdev->dev.class_cb->Setup (pdev, req);
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	23ac      	movs	r3, #172	; 0xac
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	58d3      	ldr	r3, [r2, r3]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	6839      	ldr	r1, [r7, #0]
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	0010      	movs	r0, r2
 8003462:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	0018      	movs	r0, r3
 8003468:	f000 fc04 	bl	8003c74 <USBD_CtlSendStatus>
      break;
 800346c:	e007      	b.n	800347e <USBD_StdEPReq+0x14e>
      
    default:                         
       USBD_CtlError(pdev , req);
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	0011      	movs	r1, r2
 8003474:	0018      	movs	r0, r3
 8003476:	f000 fafd 	bl	8003a74 <USBD_CtlError>
      break;    
 800347a:	e000      	b.n	800347e <USBD_StdEPReq+0x14e>
    case USB_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
      {
        DCD_EP_Stall(pdev , ep_addr);
      }
      break;	
 800347c:	46c0      	nop			; (mov r8, r8)
      
    default:                         
       USBD_CtlError(pdev , req);
      break;    
    }
    break;
 800347e:	e05e      	b.n	800353e <USBD_StdEPReq+0x20e>
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev.device_status) 
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	789b      	ldrb	r3, [r3, #2]
 8003484:	2b02      	cmp	r3, #2
 8003486:	d002      	beq.n	800348e <USBD_StdEPReq+0x15e>
 8003488:	2b03      	cmp	r3, #3
 800348a:	d013      	beq.n	80034b4 <USBD_StdEPReq+0x184>
 800348c:	e04e      	b.n	800352c <USBD_StdEPReq+0x1fc>
    {
    case USB_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800348e:	230e      	movs	r3, #14
 8003490:	18fb      	adds	r3, r7, r3
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d050      	beq.n	800353a <USBD_StdEPReq+0x20a>
 8003498:	230e      	movs	r3, #14
 800349a:	18fb      	adds	r3, r7, r3
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	2b80      	cmp	r3, #128	; 0x80
 80034a0:	d04b      	beq.n	800353a <USBD_StdEPReq+0x20a>
      {
        DCD_EP_Stall(pdev , ep_addr);
 80034a2:	230e      	movs	r3, #14
 80034a4:	18fb      	adds	r3, r7, r3
 80034a6:	781a      	ldrb	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	0011      	movs	r1, r2
 80034ac:	0018      	movs	r0, r3
 80034ae:	f001 feed 	bl	800528c <DCD_EP_Stall>
      }
      break;	
 80034b2:	e042      	b.n	800353a <USBD_StdEPReq+0x20a>
      
    case USB_CONFIGURED:         
      
      if ((ep_addr & 0x80)== 0x80)
 80034b4:	230e      	movs	r3, #14
 80034b6:	18fb      	adds	r3, r7, r3
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	b25b      	sxtb	r3, r3
 80034bc:	2b00      	cmp	r3, #0
 80034be:	da14      	bge.n	80034ea <USBD_StdEPReq+0x1ba>
      {
        if(pdev->dev.in_ep[ep_addr & 0x7F].is_stall)
 80034c0:	230e      	movs	r3, #14
 80034c2:	18fb      	adds	r3, r7, r3
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	227f      	movs	r2, #127	; 0x7f
 80034c8:	401a      	ands	r2, r3
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	0013      	movs	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	189b      	adds	r3, r3, r2
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	18cb      	adds	r3, r1, r3
 80034d6:	331a      	adds	r3, #26
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d002      	beq.n	80034e4 <USBD_StdEPReq+0x1b4>
        {
          USBD_ep_status = 0x0001;     
 80034de:	2301      	movs	r3, #1
 80034e0:	60bb      	str	r3, [r7, #8]
 80034e2:	e01b      	b.n	800351c <USBD_StdEPReq+0x1ec>
        }
        else
        {
          USBD_ep_status = 0x0000;  
 80034e4:	2300      	movs	r3, #0
 80034e6:	60bb      	str	r3, [r7, #8]
 80034e8:	e018      	b.n	800351c <USBD_StdEPReq+0x1ec>
        }
      }
      else if ((ep_addr & 0x80)== 0x00)
 80034ea:	230e      	movs	r3, #14
 80034ec:	18fb      	adds	r3, r7, r3
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	b25b      	sxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	db12      	blt.n	800351c <USBD_StdEPReq+0x1ec>
      {
        if(pdev->dev.out_ep[ep_addr].is_stall)
 80034f6:	230e      	movs	r3, #14
 80034f8:	18fb      	adds	r3, r7, r3
 80034fa:	781a      	ldrb	r2, [r3, #0]
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	20ba      	movs	r0, #186	; 0xba
 8003500:	0013      	movs	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	189b      	adds	r3, r3, r2
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	18cb      	adds	r3, r1, r3
 800350a:	181b      	adds	r3, r3, r0
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d002      	beq.n	8003518 <USBD_StdEPReq+0x1e8>
        {
          USBD_ep_status = 0x0001;     
 8003512:	2301      	movs	r3, #1
 8003514:	60bb      	str	r3, [r7, #8]
 8003516:	e001      	b.n	800351c <USBD_StdEPReq+0x1ec>
        }
        
        else 
        {
          USBD_ep_status = 0x0000;     
 8003518:	2300      	movs	r3, #0
 800351a:	60bb      	str	r3, [r7, #8]
        }      
      }
      USBD_CtlSendData (pdev,
 800351c:	2308      	movs	r3, #8
 800351e:	18f9      	adds	r1, r7, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	0018      	movs	r0, r3
 8003526:	f000 fb27 	bl	8003b78 <USBD_CtlSendData>
                        (uint8_t *)&USBD_ep_status,
                        2);
      break;
 800352a:	e007      	b.n	800353c <USBD_StdEPReq+0x20c>
      
    default:                         
       USBD_CtlError(pdev , req);
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	0011      	movs	r1, r2
 8003532:	0018      	movs	r0, r3
 8003534:	f000 fa9e 	bl	8003a74 <USBD_CtlError>
      break;
 8003538:	e000      	b.n	800353c <USBD_StdEPReq+0x20c>
    case USB_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
      {
        DCD_EP_Stall(pdev , ep_addr);
      }
      break;	
 800353a:	46c0      	nop			; (mov r8, r8)
      
    default:                         
       USBD_CtlError(pdev , req);
      break;
    }
    break;
 800353c:	46c0      	nop			; (mov r8, r8)
    
  default:
    break;
  }
  return ret;
 800353e:	230f      	movs	r3, #15
 8003540:	18fb      	adds	r3, r7, r3
 8003542:	781b      	ldrb	r3, [r3, #0]
}
 8003544:	0018      	movs	r0, r3
 8003546:	46bd      	mov	sp, r7
 8003548:	b004      	add	sp, #16
 800354a:	bd80      	pop	{r7, pc}

0800354c <USBD_GetDescriptor>:
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USB_CORE_HANDLE  *pdev, 
                               USB_SETUP_REQ *req)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
  switch (req->wValue >> 8)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	885b      	ldrh	r3, [r3, #2]
 800355a:	0a1b      	lsrs	r3, r3, #8
 800355c:	b29b      	uxth	r3, r3
 800355e:	2b07      	cmp	r3, #7
 8003560:	d900      	bls.n	8003564 <USBD_GetDescriptor+0x18>
 8003562:	e0aa      	b.n	80036ba <USBD_GetDescriptor+0x16e>
 8003564:	009a      	lsls	r2, r3, #2
 8003566:	4b6b      	ldr	r3, [pc, #428]	; (8003714 <USBD_GetDescriptor+0x1c8>)
 8003568:	18d3      	adds	r3, r2, r3
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	469f      	mov	pc, r3
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->dev.usr_device->GetBOSDescriptor(pdev->dev.speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->dev.usr_device->GetDeviceDescriptor(pdev->dev.speed, &len);
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	23b0      	movs	r3, #176	; 0xb0
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	58d3      	ldr	r3, [r2, r3]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	b2db      	uxtb	r3, r3
 800357e:	210a      	movs	r1, #10
 8003580:	1879      	adds	r1, r7, r1
 8003582:	0018      	movs	r0, r3
 8003584:	4790      	blx	r2
 8003586:	0003      	movs	r3, r0
 8003588:	60fb      	str	r3, [r7, #12]
    if (req->wLength == 64)   
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	88db      	ldrh	r3, [r3, #6]
 800358e:	2b40      	cmp	r3, #64	; 0x40
 8003590:	d000      	beq.n	8003594 <USBD_GetDescriptor+0x48>
 8003592:	e099      	b.n	80036c8 <USBD_GetDescriptor+0x17c>
    {                  
      len = 8;
 8003594:	230a      	movs	r3, #10
 8003596:	18fb      	adds	r3, r7, r3
 8003598:	2208      	movs	r2, #8
 800359a:	801a      	strh	r2, [r3, #0]
    }
    break;
 800359c:	e094      	b.n	80036c8 <USBD_GetDescriptor+0x17c>
    
  case USB_DESC_TYPE_CONFIGURATION:
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetConfigDescriptor(pdev->dev.speed, &len);  
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	23ac      	movs	r3, #172	; 0xac
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	58d3      	ldr	r3, [r2, r3]
 80035a6:	6a1a      	ldr	r2, [r3, #32]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	210a      	movs	r1, #10
 80035b0:	1879      	adds	r1, r7, r1
 80035b2:	0018      	movs	r0, r3
 80035b4:	4790      	blx	r2
 80035b6:	0003      	movs	r3, r0
 80035b8:	60fb      	str	r3, [r7, #12]
      pdev->dev.pConfig_descriptor = pbuf;    
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	23b2      	movs	r3, #178	; 0xb2
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	68f9      	ldr	r1, [r7, #12]
 80035c2:	50d1      	str	r1, [r2, r3]
    break;
 80035c4:	e081      	b.n	80036ca <USBD_GetDescriptor+0x17e>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	885b      	ldrh	r3, [r3, #2]
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b05      	cmp	r3, #5
 80035ce:	d85e      	bhi.n	800368e <USBD_GetDescriptor+0x142>
 80035d0:	009a      	lsls	r2, r3, #2
 80035d2:	4b51      	ldr	r3, [pc, #324]	; (8003718 <USBD_GetDescriptor+0x1cc>)
 80035d4:	18d3      	adds	r3, r2, r3
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	469f      	mov	pc, r3
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->dev.usr_device->GetLangIDStrDescriptor(pdev->dev.speed, &len);        
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	23b0      	movs	r3, #176	; 0xb0
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	58d3      	ldr	r3, [r2, r3]
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	210a      	movs	r1, #10
 80035ec:	1879      	adds	r1, r7, r1
 80035ee:	0018      	movs	r0, r3
 80035f0:	4790      	blx	r2
 80035f2:	0003      	movs	r3, r0
 80035f4:	60fb      	str	r3, [r7, #12]
      break;
 80035f6:	e051      	b.n	800369c <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->dev.usr_device->GetManufacturerStrDescriptor(pdev->dev.speed, &len);
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	23b0      	movs	r3, #176	; 0xb0
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	58d3      	ldr	r3, [r2, r3]
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	b2db      	uxtb	r3, r3
 8003608:	210a      	movs	r1, #10
 800360a:	1879      	adds	r1, r7, r1
 800360c:	0018      	movs	r0, r3
 800360e:	4790      	blx	r2
 8003610:	0003      	movs	r3, r0
 8003612:	60fb      	str	r3, [r7, #12]
      break;
 8003614:	e042      	b.n	800369c <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->dev.usr_device->GetProductStrDescriptor(pdev->dev.speed, &len);
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	23b0      	movs	r3, #176	; 0xb0
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	58d3      	ldr	r3, [r2, r3]
 800361e:	68da      	ldr	r2, [r3, #12]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	b2db      	uxtb	r3, r3
 8003626:	210a      	movs	r1, #10
 8003628:	1879      	adds	r1, r7, r1
 800362a:	0018      	movs	r0, r3
 800362c:	4790      	blx	r2
 800362e:	0003      	movs	r3, r0
 8003630:	60fb      	str	r3, [r7, #12]
      break;
 8003632:	e033      	b.n	800369c <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->dev.usr_device->GetSerialStrDescriptor(pdev->dev.speed, &len);
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	23b0      	movs	r3, #176	; 0xb0
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	58d3      	ldr	r3, [r2, r3]
 800363c:	691a      	ldr	r2, [r3, #16]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	b2db      	uxtb	r3, r3
 8003644:	210a      	movs	r1, #10
 8003646:	1879      	adds	r1, r7, r1
 8003648:	0018      	movs	r0, r3
 800364a:	4790      	blx	r2
 800364c:	0003      	movs	r3, r0
 800364e:	60fb      	str	r3, [r7, #12]
      break;
 8003650:	e024      	b.n	800369c <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->dev.usr_device->GetConfigurationStrDescriptor(pdev->dev.speed, &len);
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	23b0      	movs	r3, #176	; 0xb0
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	58d3      	ldr	r3, [r2, r3]
 800365a:	695a      	ldr	r2, [r3, #20]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	b2db      	uxtb	r3, r3
 8003662:	210a      	movs	r1, #10
 8003664:	1879      	adds	r1, r7, r1
 8003666:	0018      	movs	r0, r3
 8003668:	4790      	blx	r2
 800366a:	0003      	movs	r3, r0
 800366c:	60fb      	str	r3, [r7, #12]
      break;
 800366e:	e015      	b.n	800369c <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->dev.usr_device->GetInterfaceStrDescriptor(pdev->dev.speed, &len);
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	23b0      	movs	r3, #176	; 0xb0
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	58d3      	ldr	r3, [r2, r3]
 8003678:	699a      	ldr	r2, [r3, #24]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	b2db      	uxtb	r3, r3
 8003680:	210a      	movs	r1, #10
 8003682:	1879      	adds	r1, r7, r1
 8003684:	0018      	movs	r0, r3
 8003686:	4790      	blx	r2
 8003688:	0003      	movs	r3, r0
 800368a:	60fb      	str	r3, [r7, #12]
      break;
 800368c:	e006      	b.n	800369c <USBD_GetDescriptor+0x150>
    default:
#ifdef USB_SUPPORT_USER_STRING_DESC
      pbuf = pdev->dev.class_cb->GetUsrStrDescriptor(pdev->dev.speed, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	0011      	movs	r1, r2
 8003694:	0018      	movs	r0, r3
 8003696:	f000 f9ed 	bl	8003a74 <USBD_CtlError>
      return;
 800369a:	e037      	b.n	800370c <USBD_GetDescriptor+0x1c0>
#endif /* USBD_CtlError(pdev , req); */      
    }
    break;
 800369c:	e015      	b.n	80036ca <USBD_GetDescriptor+0x17e>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   
       USBD_CtlError(pdev , req);
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	0011      	movs	r1, r2
 80036a4:	0018      	movs	r0, r3
 80036a6:	f000 f9e5 	bl	8003a74 <USBD_CtlError>
      return;  
 80036aa:	e02f      	b.n	800370c <USBD_GetDescriptor+0x1c0>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      USBD_CtlError(pdev , req);
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	0011      	movs	r1, r2
 80036b2:	0018      	movs	r0, r3
 80036b4:	f000 f9de 	bl	8003a74 <USBD_CtlError>
      return;  
 80036b8:	e028      	b.n	800370c <USBD_GetDescriptor+0x1c0>
  default: 
     USBD_CtlError(pdev , req);
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	0011      	movs	r1, r2
 80036c0:	0018      	movs	r0, r3
 80036c2:	f000 f9d7 	bl	8003a74 <USBD_CtlError>
    return;
 80036c6:	e021      	b.n	800370c <USBD_GetDescriptor+0x1c0>
    pbuf = pdev->dev.usr_device->GetDeviceDescriptor(pdev->dev.speed, &len);
    if (req->wLength == 64)   
    {                  
      len = 8;
    }
    break;
 80036c8:	46c0      	nop			; (mov r8, r8)
  default: 
     USBD_CtlError(pdev , req);
    return;
  }
  
  if((len != 0)&& (req->wLength != 0))
 80036ca:	230a      	movs	r3, #10
 80036cc:	18fb      	adds	r3, r7, r3
 80036ce:	881b      	ldrh	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d01b      	beq.n	800370c <USBD_GetDescriptor+0x1c0>
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	88db      	ldrh	r3, [r3, #6]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d017      	beq.n	800370c <USBD_GetDescriptor+0x1c0>
  {
    
    len = MIN(len , req->wLength);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	88da      	ldrh	r2, [r3, #6]
 80036e0:	230a      	movs	r3, #10
 80036e2:	18fb      	adds	r3, r7, r3
 80036e4:	881b      	ldrh	r3, [r3, #0]
 80036e6:	1c18      	adds	r0, r3, #0
 80036e8:	1c11      	adds	r1, r2, #0
 80036ea:	b28a      	uxth	r2, r1
 80036ec:	b283      	uxth	r3, r0
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d900      	bls.n	80036f4 <USBD_GetDescriptor+0x1a8>
 80036f2:	1c01      	adds	r1, r0, #0
 80036f4:	b28a      	uxth	r2, r1
 80036f6:	230a      	movs	r3, #10
 80036f8:	18fb      	adds	r3, r7, r3
 80036fa:	801a      	strh	r2, [r3, #0]
    
    USBD_CtlSendData (pdev, 
 80036fc:	230a      	movs	r3, #10
 80036fe:	18fb      	adds	r3, r7, r3
 8003700:	881a      	ldrh	r2, [r3, #0]
 8003702:	68f9      	ldr	r1, [r7, #12]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	0018      	movs	r0, r3
 8003708:	f000 fa36 	bl	8003b78 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 800370c:	46bd      	mov	sp, r7
 800370e:	b004      	add	sp, #16
 8003710:	bd80      	pop	{r7, pc}
 8003712:	46c0      	nop			; (mov r8, r8)
 8003714:	0800768c 	.word	0x0800768c
 8003718:	080076ac 	.word	0x080076ac

0800371c <USBD_SetAddress>:
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USB_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	889b      	ldrh	r3, [r3, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d131      	bne.n	8003792 <USBD_SetAddress+0x76>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	88db      	ldrh	r3, [r3, #6]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d12d      	bne.n	8003792 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	885b      	ldrh	r3, [r3, #2]
 800373a:	b2da      	uxtb	r2, r3
 800373c:	230f      	movs	r3, #15
 800373e:	18fb      	adds	r3, r7, r3
 8003740:	217f      	movs	r1, #127	; 0x7f
 8003742:	400a      	ands	r2, r1
 8003744:	701a      	strb	r2, [r3, #0]
    
    if (pdev->dev.device_status == USB_CONFIGURED) 
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	789b      	ldrb	r3, [r3, #2]
 800374a:	2b03      	cmp	r3, #3
 800374c:	d106      	bne.n	800375c <USBD_SetAddress+0x40>
    {
      USBD_CtlError(pdev , req);
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	0011      	movs	r1, r2
 8003754:	0018      	movs	r0, r3
 8003756:	f000 f98d 	bl	8003a74 <USBD_CtlError>
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev.device_status == USB_CONFIGURED) 
 800375a:	e020      	b.n	800379e <USBD_SetAddress+0x82>
    {
      USBD_CtlError(pdev , req);
    } 
    else 
    {
      pdev->dev.device_address = dev_addr;              
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	220f      	movs	r2, #15
 8003760:	18ba      	adds	r2, r7, r2
 8003762:	7812      	ldrb	r2, [r2, #0]
 8003764:	711a      	strb	r2, [r3, #4]
      ADDRESS = dev_addr;
 8003766:	230f      	movs	r3, #15
 8003768:	18fb      	adds	r3, r7, r3
 800376a:	781a      	ldrb	r2, [r3, #0]
 800376c:	4b0e      	ldr	r3, [pc, #56]	; (80037a8 <USBD_SetAddress+0x8c>)
 800376e:	601a      	str	r2, [r3, #0]
      USBD_CtlSendStatus(pdev);                         
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	0018      	movs	r0, r3
 8003774:	f000 fa7e 	bl	8003c74 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8003778:	230f      	movs	r3, #15
 800377a:	18fb      	adds	r3, r7, r3
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <USBD_SetAddress+0x6e>
      {
        pdev->dev.device_status  = USB_ADDRESSED;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2202      	movs	r2, #2
 8003786:	709a      	strb	r2, [r3, #2]
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev.device_status == USB_CONFIGURED) 
 8003788:	e009      	b.n	800379e <USBD_SetAddress+0x82>
      {
        pdev->dev.device_status  = USB_ADDRESSED;
      } 
      else 
      {
        pdev->dev.device_status  = USB_DEFAULT; 
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	709a      	strb	r2, [r3, #2]
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev.device_status == USB_CONFIGURED) 
 8003790:	e005      	b.n	800379e <USBD_SetAddress+0x82>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	0011      	movs	r1, r2
 8003798:	0018      	movs	r0, r3
 800379a:	f000 f96b 	bl	8003a74 <USBD_CtlError>
  } 
}
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	46bd      	mov	sp, r7
 80037a2:	b004      	add	sp, #16
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	46c0      	nop			; (mov r8, r8)
 80037a8:	2000014c 	.word	0x2000014c

080037ac <USBD_SetConfig>:
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetConfig(USB_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	885b      	ldrh	r3, [r3, #2]
 80037ba:	b2da      	uxtb	r2, r3
 80037bc:	4b39      	ldr	r3, [pc, #228]	; (80038a4 <USBD_SetConfig+0xf8>)
 80037be:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_CFG_MAX_NUM ) 
 80037c0:	4b38      	ldr	r3, [pc, #224]	; (80038a4 <USBD_SetConfig+0xf8>)
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d906      	bls.n	80037d6 <USBD_SetConfig+0x2a>
  {            
     USBD_CtlError(pdev , req);                              
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	0011      	movs	r1, r2
 80037ce:	0018      	movs	r0, r3
 80037d0:	f000 f950 	bl	8003a74 <USBD_CtlError>
    default:					
       USBD_CtlError(pdev , req);                     
      break;
    }
  }
}
 80037d4:	e062      	b.n	800389c <USBD_SetConfig+0xf0>
  {            
     USBD_CtlError(pdev , req);                              
  } 
  else 
  {
    switch (pdev->dev.device_status) 
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	789b      	ldrb	r3, [r3, #2]
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d002      	beq.n	80037e4 <USBD_SetConfig+0x38>
 80037de:	2b03      	cmp	r3, #3
 80037e0:	d01c      	beq.n	800381c <USBD_SetConfig+0x70>
 80037e2:	e054      	b.n	800388e <USBD_SetConfig+0xe2>
    {
    case USB_ADDRESSED:
      if (cfgidx) 
 80037e4:	4b2f      	ldr	r3, [pc, #188]	; (80038a4 <USBD_SetConfig+0xf8>)
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d012      	beq.n	8003812 <USBD_SetConfig+0x66>
      {                                			   							   							   				
        pdev->dev.device_config = cfgidx;
 80037ec:	4b2d      	ldr	r3, [pc, #180]	; (80038a4 <USBD_SetConfig+0xf8>)
 80037ee:	781a      	ldrb	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	701a      	strb	r2, [r3, #0]
        pdev->dev.device_status = USB_CONFIGURED;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2203      	movs	r2, #3
 80037f8:	709a      	strb	r2, [r3, #2]
        USBD_SetCfg(pdev , cfgidx);
 80037fa:	4b2a      	ldr	r3, [pc, #168]	; (80038a4 <USBD_SetConfig+0xf8>)
 80037fc:	781a      	ldrb	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	0011      	movs	r1, r2
 8003802:	0018      	movs	r0, r3
 8003804:	f000 fc48 	bl	8004098 <USBD_SetCfg>
        USBD_CtlSendStatus(pdev);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	0018      	movs	r0, r3
 800380c:	f000 fa32 	bl	8003c74 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 8003810:	e044      	b.n	800389c <USBD_SetConfig+0xf0>
        USBD_SetCfg(pdev , cfgidx);
        USBD_CtlSendStatus(pdev);
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	0018      	movs	r0, r3
 8003816:	f000 fa2d 	bl	8003c74 <USBD_CtlSendStatus>
      }
      break;
 800381a:	e03f      	b.n	800389c <USBD_SetConfig+0xf0>
      
    case USB_CONFIGURED:
      if (cfgidx == 0) 
 800381c:	4b21      	ldr	r3, [pc, #132]	; (80038a4 <USBD_SetConfig+0xf8>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d112      	bne.n	800384a <USBD_SetConfig+0x9e>
      {                           
        pdev->dev.device_status = USB_ADDRESSED;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2202      	movs	r2, #2
 8003828:	709a      	strb	r2, [r3, #2]
        pdev->dev.device_config = cfgidx;          
 800382a:	4b1e      	ldr	r3, [pc, #120]	; (80038a4 <USBD_SetConfig+0xf8>)
 800382c:	781a      	ldrb	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	701a      	strb	r2, [r3, #0]
        USBD_ClrCfg(pdev , cfgidx);
 8003832:	4b1c      	ldr	r3, [pc, #112]	; (80038a4 <USBD_SetConfig+0xf8>)
 8003834:	781a      	ldrb	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	0011      	movs	r1, r2
 800383a:	0018      	movs	r0, r3
 800383c:	f000 fc48 	bl	80040d0 <USBD_ClrCfg>
        USBD_CtlSendStatus(pdev);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	0018      	movs	r0, r3
 8003844:	f000 fa16 	bl	8003c74 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8003848:	e028      	b.n	800389c <USBD_SetConfig+0xf0>
        pdev->dev.device_status = USB_ADDRESSED;
        pdev->dev.device_config = cfgidx;          
        USBD_ClrCfg(pdev , cfgidx);
        USBD_CtlSendStatus(pdev);
      } 
      else  if (cfgidx != pdev->dev.device_config) 
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	781a      	ldrb	r2, [r3, #0]
 800384e:	4b15      	ldr	r3, [pc, #84]	; (80038a4 <USBD_SetConfig+0xf8>)
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d016      	beq.n	8003884 <USBD_SetConfig+0xd8>
      {
        /* Clear old configuration */
        USBD_ClrCfg(pdev , pdev->dev.device_config);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	781a      	ldrb	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	0011      	movs	r1, r2
 800385e:	0018      	movs	r0, r3
 8003860:	f000 fc36 	bl	80040d0 <USBD_ClrCfg>
        
        /* set new configuration */
        pdev->dev.device_config = cfgidx;
 8003864:	4b0f      	ldr	r3, [pc, #60]	; (80038a4 <USBD_SetConfig+0xf8>)
 8003866:	781a      	ldrb	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	701a      	strb	r2, [r3, #0]
        USBD_SetCfg(pdev , cfgidx);
 800386c:	4b0d      	ldr	r3, [pc, #52]	; (80038a4 <USBD_SetConfig+0xf8>)
 800386e:	781a      	ldrb	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	0011      	movs	r1, r2
 8003874:	0018      	movs	r0, r3
 8003876:	f000 fc0f 	bl	8004098 <USBD_SetCfg>
        USBD_CtlSendStatus(pdev);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	0018      	movs	r0, r3
 800387e:	f000 f9f9 	bl	8003c74 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8003882:	e00b      	b.n	800389c <USBD_SetConfig+0xf0>
        USBD_SetCfg(pdev , cfgidx);
        USBD_CtlSendStatus(pdev);
      }
      else
      {
        USBD_CtlSendStatus(pdev);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	0018      	movs	r0, r3
 8003888:	f000 f9f4 	bl	8003c74 <USBD_CtlSendStatus>
      }
      break;
 800388c:	e006      	b.n	800389c <USBD_SetConfig+0xf0>
      
    default:					
       USBD_CtlError(pdev , req);                     
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	0011      	movs	r1, r2
 8003894:	0018      	movs	r0, r3
 8003896:	f000 f8ed 	bl	8003a74 <USBD_CtlError>
      break;
 800389a:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800389c:	46c0      	nop			; (mov r8, r8)
 800389e:	46bd      	mov	sp, r7
 80038a0:	b002      	add	sp, #8
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	20000150 	.word	0x20000150

080038a8 <USBD_GetConfig>:
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USB_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  uint32_t  USBD_default_cfg  = 0;
 80038b2:	2300      	movs	r3, #0
 80038b4:	60fb      	str	r3, [r7, #12]
 
  if (req->wLength != 1) 
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	88db      	ldrh	r3, [r3, #6]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d006      	beq.n	80038cc <USBD_GetConfig+0x24>
  {                   
     USBD_CtlError(pdev , req);
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	0011      	movs	r1, r2
 80038c4:	0018      	movs	r0, r3
 80038c6:	f000 f8d5 	bl	8003a74 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80038ca:	e01c      	b.n	8003906 <USBD_GetConfig+0x5e>
  {                   
     USBD_CtlError(pdev , req);
  }
  else 
  {
    switch (pdev->dev.device_status )  
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	789b      	ldrb	r3, [r3, #2]
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d002      	beq.n	80038da <USBD_GetConfig+0x32>
 80038d4:	2b03      	cmp	r3, #3
 80038d6:	d008      	beq.n	80038ea <USBD_GetConfig+0x42>
 80038d8:	e00e      	b.n	80038f8 <USBD_GetConfig+0x50>
    {
    case USB_ADDRESSED:                     
      
      USBD_CtlSendData (pdev, 
 80038da:	230c      	movs	r3, #12
 80038dc:	18f9      	adds	r1, r7, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	0018      	movs	r0, r3
 80038e4:	f000 f948 	bl	8003b78 <USBD_CtlSendData>
                        (uint8_t *)&USBD_default_cfg,
                        1);
      break;
 80038e8:	e00d      	b.n	8003906 <USBD_GetConfig+0x5e>
      
    case USB_CONFIGURED:                   
      
      USBD_CtlSendData (pdev, 
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	0018      	movs	r0, r3
 80038f2:	f000 f941 	bl	8003b78 <USBD_CtlSendData>
                        &pdev->dev.device_config,
                        1);
      break;
 80038f6:	e006      	b.n	8003906 <USBD_GetConfig+0x5e>
      
    default:
       USBD_CtlError(pdev , req);
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	0011      	movs	r1, r2
 80038fe:	0018      	movs	r0, r3
 8003900:	f000 f8b8 	bl	8003a74 <USBD_CtlError>
      break;
 8003904:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8003906:	46c0      	nop			; (mov r8, r8)
 8003908:	46bd      	mov	sp, r7
 800390a:	b004      	add	sp, #16
 800390c:	bd80      	pop	{r7, pc}
 800390e:	46c0      	nop			; (mov r8, r8)

08003910 <USBD_GetStatus>:
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USB_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t  USBD_cfg_status = 0;  
 800391a:	2300      	movs	r3, #0
 800391c:	60fb      	str	r3, [r7, #12]
  switch (pdev->dev.device_status) 
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	789b      	ldrb	r3, [r3, #2]
 8003922:	3b02      	subs	r3, #2
 8003924:	2b01      	cmp	r3, #1
 8003926:	d811      	bhi.n	800394c <USBD_GetStatus+0x3c>
  {
  case USB_ADDRESSED:
  case USB_CONFIGURED:
    
#ifdef USBD_SELF_POWERED
    USBD_cfg_status = USB_CONFIG_SELF_POWERED;                                    
 8003928:	2301      	movs	r3, #1
 800392a:	60fb      	str	r3, [r7, #12]
#else
    USBD_cfg_status = 0x00;                                    
#endif
                      
    if (pdev->dev.DevRemoteWakeup) 
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d003      	beq.n	800393c <USBD_GetStatus+0x2c>
    {
      USBD_cfg_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2202      	movs	r2, #2
 8003938:	4313      	orrs	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]
    }
    
    USBD_CtlSendData (pdev, 
 800393c:	230c      	movs	r3, #12
 800393e:	18f9      	adds	r1, r7, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2202      	movs	r2, #2
 8003944:	0018      	movs	r0, r3
 8003946:	f000 f917 	bl	8003b78 <USBD_CtlSendData>
                      (uint8_t *)&USBD_cfg_status,
                      2);
    break;
 800394a:	e006      	b.n	800395a <USBD_GetStatus+0x4a>
    
  default :
    USBD_CtlError(pdev , req);                        
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	0011      	movs	r1, r2
 8003952:	0018      	movs	r0, r3
 8003954:	f000 f88e 	bl	8003a74 <USBD_CtlError>
    break;
 8003958:	46c0      	nop			; (mov r8, r8)
  }
}
 800395a:	46c0      	nop			; (mov r8, r8)
 800395c:	46bd      	mov	sp, r7
 800395e:	b004      	add	sp, #16
 8003960:	bd80      	pop	{r7, pc}
 8003962:	46c0      	nop			; (mov r8, r8)

08003964 <USBD_SetFeature>:
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USB_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
 
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	885b      	ldrh	r3, [r3, #2]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d10f      	bne.n	8003996 <USBD_SetFeature+0x32>
  {
    pdev->dev.DevRemoteWakeup = 1;  
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2201      	movs	r2, #1
 800397a:	609a      	str	r2, [r3, #8]
    pdev->dev.class_cb->Setup (pdev, req);   
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	23ac      	movs	r3, #172	; 0xac
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	58d3      	ldr	r3, [r2, r3]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	6839      	ldr	r1, [r7, #0]
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	0010      	movs	r0, r2
 800398c:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	0018      	movs	r0, r3
 8003992:	f000 f96f 	bl	8003c74 <USBD_CtlSendStatus>
  }
}
 8003996:	46c0      	nop			; (mov r8, r8)
 8003998:	46bd      	mov	sp, r7
 800399a:	b002      	add	sp, #8
 800399c:	bd80      	pop	{r7, pc}
 800399e:	46c0      	nop			; (mov r8, r8)

080039a0 <USBD_ClrFeature>:
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USB_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev.device_status)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	789b      	ldrb	r3, [r3, #2]
 80039ae:	3b02      	subs	r3, #2
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d814      	bhi.n	80039de <USBD_ClrFeature+0x3e>
  {
  case USB_ADDRESSED:
  case USB_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	885b      	ldrh	r3, [r3, #2]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d117      	bne.n	80039ec <USBD_ClrFeature+0x4c>
    {
      pdev->dev.DevRemoteWakeup = 0; 
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	609a      	str	r2, [r3, #8]
      pdev->dev.class_cb->Setup (pdev, req);   
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	23ac      	movs	r3, #172	; 0xac
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	58d3      	ldr	r3, [r2, r3]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	6839      	ldr	r1, [r7, #0]
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	0010      	movs	r0, r2
 80039d2:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	0018      	movs	r0, r3
 80039d8:	f000 f94c 	bl	8003c74 <USBD_CtlSendStatus>
    }
    break;
 80039dc:	e006      	b.n	80039ec <USBD_ClrFeature+0x4c>
    
  default :
     USBD_CtlError(pdev , req);
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	0011      	movs	r1, r2
 80039e4:	0018      	movs	r0, r3
 80039e6:	f000 f845 	bl	8003a74 <USBD_CtlError>
    break;
 80039ea:	e000      	b.n	80039ee <USBD_ClrFeature+0x4e>
    {
      pdev->dev.DevRemoteWakeup = 0; 
      pdev->dev.class_cb->Setup (pdev, req);   
      USBD_CtlSendStatus(pdev);
    }
    break;
 80039ec:	46c0      	nop			; (mov r8, r8)
    
  default :
     USBD_CtlError(pdev , req);
    break;
  }
}
 80039ee:	46c0      	nop			; (mov r8, r8)
 80039f0:	46bd      	mov	sp, r7
 80039f2:	b002      	add	sp, #8
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	46c0      	nop			; (mov r8, r8)

080039f8 <USBD_ParseSetupRequest>:
  * @retval None
  */

void USBD_ParseSetupRequest( USB_CORE_HANDLE  *pdev,
                            USB_SETUP_REQ *req)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdev->dev.setup_packet);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	7c1a      	ldrb	r2, [r3, #16]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdev->dev.setup_packet +  1);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	7c5a      	ldrb	r2, [r3, #17]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdev->dev.setup_packet +  2);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	7c9b      	ldrb	r3, [r3, #18]
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	7cdb      	ldrb	r3, [r3, #19]
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	021b      	lsls	r3, r3, #8
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	18d3      	adds	r3, r2, r3
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdev->dev.setup_packet +  4);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	7d1b      	ldrb	r3, [r3, #20]
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	7d5b      	ldrb	r3, [r3, #21]
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	021b      	lsls	r3, r3, #8
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	18d3      	adds	r3, r2, r3
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdev->dev.setup_packet +  6);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	7d9b      	ldrb	r3, [r3, #22]
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	7ddb      	ldrb	r3, [r3, #23]
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	021b      	lsls	r3, r3, #8
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	18d3      	adds	r3, r2, r3
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	80da      	strh	r2, [r3, #6]
  
  pdev->dev.in_ep[0].ctl_data_len = req->wLength  ;
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	88db      	ldrh	r3, [r3, #6]
 8003a5e:	001a      	movs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	63da      	str	r2, [r3, #60]	; 0x3c
  pdev->dev.device_state = USB_EP0_SETUP;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	705a      	strb	r2, [r3, #1]
}
 8003a6a:	46c0      	nop			; (mov r8, r8)
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	b002      	add	sp, #8
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	46c0      	nop			; (mov r8, r8)

08003a74 <USBD_CtlError>:
  * @retval None
  */

void USBD_CtlError( USB_CORE_HANDLE  *pdev,
                            USB_SETUP_REQ *req)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  DCD_EP_Stall(pdev , 0);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2100      	movs	r1, #0
 8003a82:	0018      	movs	r0, r3
 8003a84:	f001 fc02 	bl	800528c <DCD_EP_Stall>
}
 8003a88:	46c0      	nop			; (mov r8, r8)
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	b002      	add	sp, #8
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 8003a9c:	2317      	movs	r3, #23
 8003a9e:	18fb      	adds	r3, r7, r3
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	701a      	strb	r2, [r3, #0]
  
  if (desc != NULL) 
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d044      	beq.n	8003b34 <USBD_GetString+0xa4>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	0018      	movs	r0, r3
 8003aae:	f000 f845 	bl	8003b3c <USBD_GetLen>
 8003ab2:	0003      	movs	r3, r0
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	18db      	adds	r3, r3, r3
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 8003ac0:	2317      	movs	r3, #23
 8003ac2:	18fb      	adds	r3, r7, r3
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	2217      	movs	r2, #23
 8003ac8:	18ba      	adds	r2, r7, r2
 8003aca:	1c59      	adds	r1, r3, #1
 8003acc:	7011      	strb	r1, [r2, #0]
 8003ace:	001a      	movs	r2, r3
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	189b      	adds	r3, r3, r2
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	8812      	ldrh	r2, [r2, #0]
 8003ad8:	b2d2      	uxtb	r2, r2
 8003ada:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8003adc:	2317      	movs	r3, #23
 8003ade:	18fb      	adds	r3, r7, r3
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	2217      	movs	r2, #23
 8003ae4:	18ba      	adds	r2, r7, r2
 8003ae6:	1c59      	adds	r1, r3, #1
 8003ae8:	7011      	strb	r1, [r2, #0]
 8003aea:	001a      	movs	r2, r3
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	189b      	adds	r3, r3, r2
 8003af0:	2203      	movs	r2, #3
 8003af2:	701a      	strb	r2, [r3, #0]
    
    while (*desc != NULL) 
 8003af4:	e01a      	b.n	8003b2c <USBD_GetString+0x9c>
    {
      unicode[idx++] = *desc++;
 8003af6:	2317      	movs	r3, #23
 8003af8:	18fb      	adds	r3, r7, r3
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	2217      	movs	r2, #23
 8003afe:	18ba      	adds	r2, r7, r2
 8003b00:	1c59      	adds	r1, r3, #1
 8003b02:	7011      	strb	r1, [r2, #0]
 8003b04:	001a      	movs	r2, r3
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	189a      	adds	r2, r3, r2
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	1c59      	adds	r1, r3, #1
 8003b0e:	60f9      	str	r1, [r7, #12]
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 8003b14:	2317      	movs	r3, #23
 8003b16:	18fb      	adds	r3, r7, r3
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	2217      	movs	r2, #23
 8003b1c:	18ba      	adds	r2, r7, r2
 8003b1e:	1c59      	adds	r1, r3, #1
 8003b20:	7011      	strb	r1, [r2, #0]
 8003b22:	001a      	movs	r2, r3
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	189b      	adds	r3, r3, r2
 8003b28:	2200      	movs	r2, #0
 8003b2a:	701a      	strb	r2, [r3, #0]
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
    unicode[idx++] = *len;
    unicode[idx++] =  USB_DESC_TYPE_STRING;
    
    while (*desc != NULL) 
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1e0      	bne.n	8003af6 <USBD_GetString+0x66>
    {
      unicode[idx++] = *desc++;
      unicode[idx++] =  0x00;
    }
  } 
}
 8003b34:	46c0      	nop			; (mov r8, r8)
 8003b36:	46bd      	mov	sp, r7
 8003b38:	b006      	add	sp, #24
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 8003b44:	230f      	movs	r3, #15
 8003b46:	18fb      	adds	r3, r7, r3
 8003b48:	2200      	movs	r2, #0
 8003b4a:	701a      	strb	r2, [r3, #0]

    while (*buf != NULL) 
 8003b4c:	e009      	b.n	8003b62 <USBD_GetLen+0x26>
    {
        len++;
 8003b4e:	230f      	movs	r3, #15
 8003b50:	18fb      	adds	r3, r7, r3
 8003b52:	781a      	ldrb	r2, [r3, #0]
 8003b54:	230f      	movs	r3, #15
 8003b56:	18fb      	adds	r3, r7, r3
 8003b58:	3201      	adds	r2, #1
 8003b5a:	701a      	strb	r2, [r3, #0]
        buf++;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	3301      	adds	r3, #1
 8003b60:	607b      	str	r3, [r7, #4]
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != NULL) 
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1f1      	bne.n	8003b4e <USBD_GetLen+0x12>
    {
        len++;
        buf++;
    }

    return len;
 8003b6a:	230f      	movs	r3, #15
 8003b6c:	18fb      	adds	r3, r7, r3
 8003b6e:	781b      	ldrb	r3, [r3, #0]
}
 8003b70:	0018      	movs	r0, r3
 8003b72:	46bd      	mov	sp, r7
 8003b74:	b004      	add	sp, #16
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <USBD_CtlSendData>:
  * @retval status
  */
USBD_Status  USBD_CtlSendData (USB_CORE_HANDLE  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	1dbb      	adds	r3, r7, #6
 8003b84:	801a      	strh	r2, [r3, #0]
  USBD_Status ret = USBD_OK;
 8003b86:	2317      	movs	r3, #23
 8003b88:	18fb      	adds	r3, r7, r3
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	701a      	strb	r2, [r3, #0]
  
  pdev->dev.in_ep[0].total_data_len = len;
 8003b8e:	1dbb      	adds	r3, r7, #6
 8003b90:	881a      	ldrh	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	639a      	str	r2, [r3, #56]	; 0x38
  pdev->dev.in_ep[0].rem_data_len   = len;
 8003b96:	1dbb      	adds	r3, r7, #6
 8003b98:	881a      	ldrh	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	635a      	str	r2, [r3, #52]	; 0x34
  pdev->dev.device_state = USB_EP0_DATA_IN;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	705a      	strb	r2, [r3, #1]

  DCD_EP_Tx (pdev, 0, pbuf, len);
 8003ba4:	1dbb      	adds	r3, r7, #6
 8003ba6:	881b      	ldrh	r3, [r3, #0]
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	2100      	movs	r1, #0
 8003bae:	f001 fad7 	bl	8005160 <DCD_EP_Tx>
 
  return ret;
 8003bb2:	2317      	movs	r3, #23
 8003bb4:	18fb      	adds	r3, r7, r3
 8003bb6:	781b      	ldrb	r3, [r3, #0]
}
 8003bb8:	0018      	movs	r0, r3
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	b006      	add	sp, #24
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <USBD_CtlContinueSendData>:
  * @retval status
  */
USBD_Status  USBD_CtlContinueSendData (USB_CORE_HANDLE  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	1dbb      	adds	r3, r7, #6
 8003bcc:	801a      	strh	r2, [r3, #0]
  USBD_Status ret = USBD_OK;
 8003bce:	2317      	movs	r3, #23
 8003bd0:	18fb      	adds	r3, r7, r3
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	701a      	strb	r2, [r3, #0]
  
  DCD_EP_Tx (pdev, 0, pbuf, len);
 8003bd6:	1dbb      	adds	r3, r7, #6
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	68ba      	ldr	r2, [r7, #8]
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	2100      	movs	r1, #0
 8003be0:	f001 fabe 	bl	8005160 <DCD_EP_Tx>
  
  
  return ret;
 8003be4:	2317      	movs	r3, #23
 8003be6:	18fb      	adds	r3, r7, r3
 8003be8:	781b      	ldrb	r3, [r3, #0]
}
 8003bea:	0018      	movs	r0, r3
 8003bec:	46bd      	mov	sp, r7
 8003bee:	b006      	add	sp, #24
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	46c0      	nop			; (mov r8, r8)

08003bf4 <USBD_CtlPrepareRx>:
  * @retval status
  */
USBD_Status  USBD_CtlPrepareRx (USB_CORE_HANDLE  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	1dbb      	adds	r3, r7, #6
 8003c00:	801a      	strh	r2, [r3, #0]
  USBD_Status ret = USBD_OK;
 8003c02:	2317      	movs	r3, #23
 8003c04:	18fb      	adds	r3, r7, r3
 8003c06:	2200      	movs	r2, #0
 8003c08:	701a      	strb	r2, [r3, #0]
  
  pdev->dev.out_ep[0].total_data_len = len;
 8003c0a:	1dbb      	adds	r3, r7, #6
 8003c0c:	881a      	ldrh	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	21d8      	movs	r1, #216	; 0xd8
 8003c12:	505a      	str	r2, [r3, r1]
  pdev->dev.out_ep[0].rem_data_len   = len;
 8003c14:	1dbb      	adds	r3, r7, #6
 8003c16:	881a      	ldrh	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	21d4      	movs	r1, #212	; 0xd4
 8003c1c:	505a      	str	r2, [r3, r1]
  pdev->dev.device_state = USB_EP0_DATA_OUT;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2203      	movs	r2, #3
 8003c22:	705a      	strb	r2, [r3, #1]
  
  DCD_EP_PrepareRx (pdev,
 8003c24:	1dbb      	adds	r3, r7, #6
 8003c26:	881b      	ldrh	r3, [r3, #0]
 8003c28:	68ba      	ldr	r2, [r7, #8]
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	f001 fa35 	bl	800509c <DCD_EP_PrepareRx>
                    0,
                    pbuf,
                    len);
  

  return ret;
 8003c32:	2317      	movs	r3, #23
 8003c34:	18fb      	adds	r3, r7, r3
 8003c36:	781b      	ldrb	r3, [r3, #0]
}
 8003c38:	0018      	movs	r0, r3
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	b006      	add	sp, #24
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <USBD_CtlContinueRx>:
  * @retval status
  */
USBD_Status  USBD_CtlContinueRx (USB_CORE_HANDLE  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	1dbb      	adds	r3, r7, #6
 8003c4c:	801a      	strh	r2, [r3, #0]
  USBD_Status ret = USBD_OK;
 8003c4e:	2317      	movs	r3, #23
 8003c50:	18fb      	adds	r3, r7, r3
 8003c52:	2200      	movs	r2, #0
 8003c54:	701a      	strb	r2, [r3, #0]
  
  DCD_EP_PrepareRx (pdev,
 8003c56:	1dbb      	adds	r3, r7, #6
 8003c58:	881b      	ldrh	r3, [r3, #0]
 8003c5a:	68ba      	ldr	r2, [r7, #8]
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	2100      	movs	r1, #0
 8003c60:	f001 fa1c 	bl	800509c <DCD_EP_PrepareRx>
                    0,                     
                    pbuf,                         
                    len);
  return ret;
 8003c64:	2317      	movs	r3, #23
 8003c66:	18fb      	adds	r3, r7, r3
 8003c68:	781b      	ldrb	r3, [r3, #0]
}
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	b006      	add	sp, #24
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	46c0      	nop			; (mov r8, r8)

08003c74 <USBD_CtlSendStatus>:
  *         send zero length packet on the ctl pipe
  * @param  pdev: USB device instance
  * @retval status
  */
USBD_Status  USBD_CtlSendStatus (USB_CORE_HANDLE  *pdev)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  USBD_Status ret = USBD_OK;
 8003c7c:	230f      	movs	r3, #15
 8003c7e:	18fb      	adds	r3, r7, r3
 8003c80:	2200      	movs	r2, #0
 8003c82:	701a      	strb	r2, [r3, #0]
  pdev->dev.device_state = USB_EP0_STATUS_IN;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2204      	movs	r2, #4
 8003c88:	705a      	strb	r2, [r3, #1]
  DCD_EP_Tx (pdev,
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	2200      	movs	r2, #0
 8003c90:	2100      	movs	r1, #0
 8003c92:	f001 fa65 	bl	8005160 <DCD_EP_Tx>
             0,
             NULL, 
             0); 
  return ret;
 8003c96:	230f      	movs	r3, #15
 8003c98:	18fb      	adds	r3, r7, r3
 8003c9a:	781b      	ldrb	r3, [r3, #0]
}
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	b004      	add	sp, #16
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <USBD_CtlReceiveStatus>:
  *         receive zero length packet on the ctl pipe
  * @param  pdev: USB device instance
  * @retval status
  */
USBD_Status  USBD_CtlReceiveStatus (USB_CORE_HANDLE  *pdev)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  USBD_Status ret = USBD_OK;
 8003cac:	230f      	movs	r3, #15
 8003cae:	18fb      	adds	r3, r7, r3
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	701a      	strb	r2, [r3, #0]
  pdev->dev.device_state = USB_EP0_STATUS_OUT;  
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2205      	movs	r2, #5
 8003cb8:	705a      	strb	r2, [r3, #1]
  DCD_EP_PrepareRx ( pdev,
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	f001 f9eb 	bl	800509c <DCD_EP_PrepareRx>
                    0,
                    NULL,
                    0); 
  
  return ret;
 8003cc6:	230f      	movs	r3, #15
 8003cc8:	18fb      	adds	r3, r7, r3
 8003cca:	781b      	ldrb	r3, [r3, #0]
}
 8003ccc:	0018      	movs	r0, r3
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	b004      	add	sp, #16
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <USBD_Init>:
  */
void USBD_Init(USB_CORE_HANDLE *pdev,
               USBD_DEVICE *pDevice,                  
               USBD_Class_cb_TypeDef *class_cb, 
               USBD_Usr_cb_TypeDef *usr_cb)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
 8003ce0:	603b      	str	r3, [r7, #0]
  /* Hardware Init */
  USB_BSP_Init(pdev);  
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	f7fc fd0b 	bl	8000700 <USB_BSP_Init>
  
  USBD_DeInit(pdev);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	0018      	movs	r0, r3
 8003cee:	f000 f827 	bl	8003d40 <USBD_DeInit>
  
  /*Register class and user callbacks */
  pdev->dev.class_cb = class_cb;
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	23ac      	movs	r3, #172	; 0xac
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	6879      	ldr	r1, [r7, #4]
 8003cfa:	50d1      	str	r1, [r2, r3]
  pdev->dev.usr_cb = usr_cb;  
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	23ae      	movs	r3, #174	; 0xae
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	6839      	ldr	r1, [r7, #0]
 8003d04:	50d1      	str	r1, [r2, r3]
  pdev->dev.usr_device = pDevice;    
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	23b0      	movs	r3, #176	; 0xb0
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	68b9      	ldr	r1, [r7, #8]
 8003d0e:	50d1      	str	r1, [r2, r3]
  
  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 8003d10:	f7fc fc7a 	bl	8000608 <Get_SerialNum>
  
  /* set USB DEVICE core params */
  DCD_Init(pdev);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	0018      	movs	r0, r3
 8003d18:	f000 ffa2 	bl	8004c60 <DCD_Init>
  
  /* Upon Init call usr callback */
  pdev->dev.usr_cb->Init();
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	23ae      	movs	r3, #174	; 0xae
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	58d3      	ldr	r3, [r2, r3]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4798      	blx	r3
//  dbgLED_off();
//  delay(500);


  /* Enable Interrupts */
  USB_BSP_EnableInterrupt(pdev);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	f7fc fcfc 	bl	8000728 <USB_BSP_EnableInterrupt>
//  delay(500);
  //TODO: Program flow works till here!

  /* Enable the pull-up */
//#ifdef INTERNAL_PULLUP
  DCD_DevConnect(pdev);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	0018      	movs	r0, r3
 8003d34:	f001 fba8 	bl	8005488 <DCD_DevConnect>
//  dbgLED_on();
//#else
// USB_BSP_DevConnect(pdev);
//#endif
  //TODO: but it's already stuck here!
}
 8003d38:	46c0      	nop			; (mov r8, r8)
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	b004      	add	sp, #16
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <USBD_DeInit>:
  *         Re-Initialize th device library
  * @param  pdev: device instance
  * @retval status: status
  */
USBD_Status USBD_DeInit(USB_CORE_HANDLE *pdev)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Software Init */
  
  return USBD_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	b002      	add	sp, #8
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	46c0      	nop			; (mov r8, r8)

08003d54 <USBD_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_SetupStage(USB_CORE_HANDLE *pdev)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  USB_SETUP_REQ req;
  
  USBD_ParseSetupRequest(pdev , &req);
 8003d5c:	2308      	movs	r3, #8
 8003d5e:	18fa      	adds	r2, r7, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	0011      	movs	r1, r2
 8003d64:	0018      	movs	r0, r3
 8003d66:	f7ff fe47 	bl	80039f8 <USBD_ParseSetupRequest>
  
  switch (req.bmRequest & 0x1F) 
 8003d6a:	2308      	movs	r3, #8
 8003d6c:	18fb      	adds	r3, r7, r3
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	001a      	movs	r2, r3
 8003d72:	231f      	movs	r3, #31
 8003d74:	4013      	ands	r3, r2
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d00b      	beq.n	8003d92 <USBD_SetupStage+0x3e>
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d011      	beq.n	8003da2 <USBD_SetupStage+0x4e>
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d117      	bne.n	8003db2 <USBD_SetupStage+0x5e>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &req);
 8003d82:	2308      	movs	r3, #8
 8003d84:	18fa      	adds	r2, r7, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	0011      	movs	r1, r2
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	f7ff fa38 	bl	8003200 <USBD_StdDevReq>
    break;
 8003d90:	e01b      	b.n	8003dca <USBD_SetupStage+0x76>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &req);
 8003d92:	2308      	movs	r3, #8
 8003d94:	18fa      	adds	r2, r7, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	0011      	movs	r1, r2
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	f7ff fa84 	bl	80032a8 <USBD_StdItfReq>
    break;
 8003da0:	e013      	b.n	8003dca <USBD_SetupStage+0x76>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &req);   
 8003da2:	2308      	movs	r3, #8
 8003da4:	18fa      	adds	r2, r7, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	0011      	movs	r1, r2
 8003daa:	0018      	movs	r0, r3
 8003dac:	f7ff fac0 	bl	8003330 <USBD_StdEPReq>
    break;
 8003db0:	e00b      	b.n	8003dca <USBD_SetupStage+0x76>
    
  default:           
    DCD_EP_Stall(pdev , req.bmRequest & 0x80);
 8003db2:	2308      	movs	r3, #8
 8003db4:	18fb      	adds	r3, r7, r3
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	227f      	movs	r2, #127	; 0x7f
 8003dba:	4393      	bics	r3, r2
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	0011      	movs	r1, r2
 8003dc2:	0018      	movs	r0, r3
 8003dc4:	f001 fa62 	bl	800528c <DCD_EP_Stall>
    break;
 8003dc8:	46c0      	nop			; (mov r8, r8)
  }  
  return USBD_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	0018      	movs	r0, r3
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	b004      	add	sp, #16
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <USBD_DataOutStage>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_DataOutStage(USB_CORE_HANDLE *pdev , uint8_t epnum)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	000a      	movs	r2, r1
 8003dde:	1cfb      	adds	r3, r7, #3
 8003de0:	701a      	strb	r2, [r3, #0]
  USB_EP *ep;
  
  if(epnum == 0) 
 8003de2:	1cfb      	adds	r3, r7, #3
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d13a      	bne.n	8003e60 <USBD_DataOutStage+0x8c>
  {
    ep = &pdev->dev.out_ep[0];
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	33b8      	adds	r3, #184	; 0xb8
 8003dee:	60fb      	str	r3, [r7, #12]
    if ( pdev->dev.device_state == USB_EP0_DATA_OUT)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	785b      	ldrb	r3, [r3, #1]
 8003df4:	2b03      	cmp	r3, #3
 8003df6:	d148      	bne.n	8003e8a <USBD_DataOutStage+0xb6>
    {
      if(ep->rem_data_len > ep->maxpacket)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	69da      	ldr	r2, [r3, #28]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d915      	bls.n	8003e30 <USBD_DataOutStage+0x5c>
      {
        ep->rem_data_len -=  ep->maxpacket;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	69da      	ldr	r2, [r3, #28]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	1ad2      	subs	r2, r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	61da      	str	r2, [r3, #28]
                
        USBD_CtlContinueRx (pdev, 
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6919      	ldr	r1, [r3, #16]
                            ep->xfer_buff,
                            MIN(ep->rem_data_len ,ep->maxpacket));
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	68da      	ldr	r2, [r3, #12]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d900      	bls.n	8003e24 <USBD_DataOutStage+0x50>
 8003e22:	001a      	movs	r2, r3
    {
      if(ep->rem_data_len > ep->maxpacket)
      {
        ep->rem_data_len -=  ep->maxpacket;
                
        USBD_CtlContinueRx (pdev, 
 8003e24:	b292      	uxth	r2, r2
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	0018      	movs	r0, r3
 8003e2a:	f7ff ff09 	bl	8003c40 <USBD_CtlContinueRx>
 8003e2e:	e02c      	b.n	8003e8a <USBD_DataOutStage+0xb6>
                            ep->xfer_buff,
                            MIN(ep->rem_data_len ,ep->maxpacket));
      }
      else
      {
        if((pdev->dev.class_cb->EP0_RxReady != NULL)&&
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	23ac      	movs	r3, #172	; 0xac
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	58d3      	ldr	r3, [r2, r3]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00b      	beq.n	8003e56 <USBD_DataOutStage+0x82>
           (pdev->dev.device_status == USB_CONFIGURED))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	789b      	ldrb	r3, [r3, #2]
                            ep->xfer_buff,
                            MIN(ep->rem_data_len ,ep->maxpacket));
      }
      else
      {
        if((pdev->dev.class_cb->EP0_RxReady != NULL)&&
 8003e42:	2b03      	cmp	r3, #3
 8003e44:	d107      	bne.n	8003e56 <USBD_DataOutStage+0x82>
           (pdev->dev.device_status == USB_CONFIGURED))
        {
          pdev->dev.class_cb->EP0_RxReady(pdev); 
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	23ac      	movs	r3, #172	; 0xac
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	58d3      	ldr	r3, [r2, r3]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	0010      	movs	r0, r2
 8003e54:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	0018      	movs	r0, r3
 8003e5a:	f7ff ff0b 	bl	8003c74 <USBD_CtlSendStatus>
 8003e5e:	e014      	b.n	8003e8a <USBD_DataOutStage+0xb6>
      }
    }
  }
  else if((pdev->dev.class_cb->DataOut != NULL)&&
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	23ac      	movs	r3, #172	; 0xac
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	58d3      	ldr	r3, [r2, r3]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00d      	beq.n	8003e8a <USBD_DataOutStage+0xb6>
          (pdev->dev.device_status == USB_CONFIGURED))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	789b      	ldrb	r3, [r3, #2]
        }
        USBD_CtlSendStatus(pdev);
      }
    }
  }
  else if((pdev->dev.class_cb->DataOut != NULL)&&
 8003e72:	2b03      	cmp	r3, #3
 8003e74:	d109      	bne.n	8003e8a <USBD_DataOutStage+0xb6>
          (pdev->dev.device_status == USB_CONFIGURED))
  {
    pdev->dev.class_cb->DataOut(pdev, epnum); 
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	23ac      	movs	r3, #172	; 0xac
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	58d3      	ldr	r3, [r2, r3]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	1cfa      	adds	r2, r7, #3
 8003e82:	7811      	ldrb	r1, [r2, #0]
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	0010      	movs	r0, r2
 8003e88:	4798      	blx	r3
  }  
  return USBD_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	b004      	add	sp, #16
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <USBD_DataInStage>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_DataInStage(USB_CORE_HANDLE *pdev , uint8_t epnum)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	000a      	movs	r2, r1
 8003e9e:	1cfb      	adds	r3, r7, #3
 8003ea0:	701a      	strb	r2, [r3, #0]
  USB_EP *ep;
  
  if(epnum == 0) 
 8003ea2:	1cfb      	adds	r3, r7, #3
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d000      	beq.n	8003eac <USBD_DataInStage+0x18>
 8003eaa:	e069      	b.n	8003f80 <USBD_DataInStage+0xec>
  {
    ep = &pdev->dev.in_ep[0];
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3318      	adds	r3, #24
 8003eb0:	60fb      	str	r3, [r7, #12]
    if ( pdev->dev.device_state == USB_EP0_DATA_IN)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	785b      	ldrb	r3, [r3, #1]
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d14e      	bne.n	8003f58 <USBD_DataInStage+0xc4>
    {
      if(ep->rem_data_len > ep->maxpacket)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	69da      	ldr	r2, [r3, #28]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d910      	bls.n	8003ee8 <USBD_DataInStage+0x54>
      {
        ep->rem_data_len -=  ep->maxpacket;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	69da      	ldr	r2, [r3, #28]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	1ad2      	subs	r2, r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	61da      	str	r2, [r3, #28]
        USBD_CtlContinueSendData (pdev, 
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6919      	ldr	r1, [r3, #16]
                                  ep->xfer_buff, 
                                  ep->rem_data_len);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	69db      	ldr	r3, [r3, #28]
    if ( pdev->dev.device_state == USB_EP0_DATA_IN)
    {
      if(ep->rem_data_len > ep->maxpacket)
      {
        ep->rem_data_len -=  ep->maxpacket;
        USBD_CtlContinueSendData (pdev, 
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	f7ff fe6d 	bl	8003bc0 <USBD_CtlContinueSendData>
 8003ee6:	e060      	b.n	8003faa <USBD_DataInStage+0x116>
                                  ep->xfer_buff, 
                                  ep->rem_data_len);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((ep->total_data_len % ep->maxpacket == 0) &&
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6a1a      	ldr	r2, [r3, #32]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	0019      	movs	r1, r3
 8003ef2:	0010      	movs	r0, r2
 8003ef4:	f7fc f98e 	bl	8000214 <__aeabi_uidivmod>
 8003ef8:	1e0b      	subs	r3, r1, #0
 8003efa:	d115      	bne.n	8003f28 <USBD_DataInStage+0x94>
           (ep->total_data_len >= ep->maxpacket) &&
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6a1a      	ldr	r2, [r3, #32]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	68db      	ldr	r3, [r3, #12]
                                  ep->xfer_buff, 
                                  ep->rem_data_len);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((ep->total_data_len % ep->maxpacket == 0) &&
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d30f      	bcc.n	8003f28 <USBD_DataInStage+0x94>
           (ep->total_data_len >= ep->maxpacket) &&
             (ep->total_data_len < ep->ctl_data_len ))
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6a1a      	ldr	r2, [r3, #32]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                  ep->rem_data_len);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((ep->total_data_len % ep->maxpacket == 0) &&
           (ep->total_data_len >= ep->maxpacket) &&
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d209      	bcs.n	8003f28 <USBD_DataInStage+0x94>
             (ep->total_data_len < ep->ctl_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	2100      	movs	r1, #0
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	f7ff fe50 	bl	8003bc0 <USBD_CtlContinueSendData>
          ep->ctl_data_len = 0;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	625a      	str	r2, [r3, #36]	; 0x24
 8003f26:	e040      	b.n	8003faa <USBD_DataInStage+0x116>
        }
        else
        {
          if((pdev->dev.class_cb->EP0_TxSent != NULL)&&
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	23ac      	movs	r3, #172	; 0xac
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	58d3      	ldr	r3, [r2, r3]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00b      	beq.n	8003f4e <USBD_DataInStage+0xba>
             (pdev->dev.device_status == USB_CONFIGURED))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	789b      	ldrb	r3, [r3, #2]
          USBD_CtlContinueSendData(pdev , NULL, 0);
          ep->ctl_data_len = 0;
        }
        else
        {
          if((pdev->dev.class_cb->EP0_TxSent != NULL)&&
 8003f3a:	2b03      	cmp	r3, #3
 8003f3c:	d107      	bne.n	8003f4e <USBD_DataInStage+0xba>
             (pdev->dev.device_status == USB_CONFIGURED))
          {
            pdev->dev.class_cb->EP0_TxSent(pdev); 
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	23ac      	movs	r3, #172	; 0xac
 8003f42:	005b      	lsls	r3, r3, #1
 8003f44:	58d3      	ldr	r3, [r2, r3]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	0010      	movs	r0, r2
 8003f4c:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	0018      	movs	r0, r3
 8003f52:	f7ff fea7 	bl	8003ca4 <USBD_CtlReceiveStatus>
 8003f56:	e028      	b.n	8003faa <USBD_DataInStage+0x116>
        }
      }
    }
    else  if ((pdev->dev.device_state == USB_EP0_STATUS_IN)&& (ADDRESS!=0))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	785b      	ldrb	r3, [r3, #1]
 8003f5c:	2b04      	cmp	r3, #4
 8003f5e:	d124      	bne.n	8003faa <USBD_DataInStage+0x116>
 8003f60:	4b14      	ldr	r3, [pc, #80]	; (8003fb4 <USBD_DataInStage+0x120>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d020      	beq.n	8003faa <USBD_DataInStage+0x116>
    {
      
      DCD_EP_SetAddress(pdev, ADDRESS); 
 8003f68:	4b12      	ldr	r3, [pc, #72]	; (8003fb4 <USBD_DataInStage+0x120>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	0011      	movs	r1, r2
 8003f72:	0018      	movs	r0, r3
 8003f74:	f001 fa44 	bl	8005400 <DCD_EP_SetAddress>
      ADDRESS = 0;
 8003f78:	4b0e      	ldr	r3, [pc, #56]	; (8003fb4 <USBD_DataInStage+0x120>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	601a      	str	r2, [r3, #0]
 8003f7e:	e014      	b.n	8003faa <USBD_DataInStage+0x116>
    }
  }
  else if((pdev->dev.class_cb->DataIn != NULL)&& 
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	23ac      	movs	r3, #172	; 0xac
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	58d3      	ldr	r3, [r2, r3]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00d      	beq.n	8003faa <USBD_DataInStage+0x116>
          (pdev->dev.device_status == USB_CONFIGURED))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	789b      	ldrb	r3, [r3, #2]
      
      DCD_EP_SetAddress(pdev, ADDRESS); 
      ADDRESS = 0;
    }
  }
  else if((pdev->dev.class_cb->DataIn != NULL)&& 
 8003f92:	2b03      	cmp	r3, #3
 8003f94:	d109      	bne.n	8003faa <USBD_DataInStage+0x116>
          (pdev->dev.device_status == USB_CONFIGURED))
  {
    pdev->dev.class_cb->DataIn(pdev, epnum); 
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	23ac      	movs	r3, #172	; 0xac
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	58d3      	ldr	r3, [r2, r3]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	1cfa      	adds	r2, r7, #3
 8003fa2:	7811      	ldrb	r1, [r2, #0]
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	0010      	movs	r0, r2
 8003fa8:	4798      	blx	r3
  }  
  return USBD_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	0018      	movs	r0, r3
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	b004      	add	sp, #16
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	2000014c 	.word	0x2000014c

08003fb8 <USBD_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

static uint8_t USBD_Reset(USB_CORE_HANDLE  *pdev)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]

  DCD_PMA_Config(pdev , 0x00 ,USB_SNG_BUF, ENDP0_RX_ADDRESS);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	2340      	movs	r3, #64	; 0x40
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	f000 fe76 	bl	8004cb8 <DCD_PMA_Config>
  DCD_PMA_Config(pdev , 0x80 ,USB_SNG_BUF, ENDP0_TX_ADDRESS);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	2380      	movs	r3, #128	; 0x80
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	2180      	movs	r1, #128	; 0x80
 8003fd4:	f000 fe70 	bl	8004cb8 <DCD_PMA_Config>

  /* Open EP0 OUT */
  DCD_EP_Open(pdev,
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	2300      	movs	r3, #0
 8003fdc:	2240      	movs	r2, #64	; 0x40
 8003fde:	2100      	movs	r1, #0
 8003fe0:	f000 feb8 	bl	8004d54 <DCD_EP_Open>
              0x00,
              USB_MAX_EP0_SIZE,
              EP_TYPE_CTRL);
  
  /* Open EP0 IN */
  DCD_EP_Open(pdev,
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	2240      	movs	r2, #64	; 0x40
 8003fea:	2180      	movs	r1, #128	; 0x80
 8003fec:	f000 feb2 	bl	8004d54 <DCD_EP_Open>
              0x80,
              USB_MAX_EP0_SIZE,
              EP_TYPE_CTRL);
  
  /* Upon Reset call user call back */
  pdev->dev.device_status = USB_DEFAULT;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	709a      	strb	r2, [r3, #2]
  pdev->dev.usr_cb->DeviceReset(pdev->dev.speed);
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	23ae      	movs	r3, #174	; 0xae
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	58d3      	ldr	r3, [r2, r3]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	b2db      	uxtb	r3, r3
 8004006:	0018      	movs	r0, r3
 8004008:	4790      	blx	r2
  
  return USBD_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	0018      	movs	r0, r3
 800400e:	46bd      	mov	sp, r7
 8004010:	b002      	add	sp, #8
 8004012:	bd80      	pop	{r7, pc}

08004014 <USBD_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

static uint8_t USBD_Resume(USB_CORE_HANDLE  *pdev)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Upon Resume call user call back */
  pdev->dev.usr_cb->DeviceResumed(); 
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	23ae      	movs	r3, #174	; 0xae
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	58d3      	ldr	r3, [r2, r3]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	4798      	blx	r3
  pdev->dev.device_status = pdev->dev.device_old_status;   
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	78da      	ldrb	r2, [r3, #3]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	709a      	strb	r2, [r3, #2]
  return USBD_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	0018      	movs	r0, r3
 8004034:	46bd      	mov	sp, r7
 8004036:	b002      	add	sp, #8
 8004038:	bd80      	pop	{r7, pc}
 800403a:	46c0      	nop			; (mov r8, r8)

0800403c <USBD_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

static uint8_t USBD_Suspend(USB_CORE_HANDLE  *pdev)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  pdev->dev.device_old_status = pdev->dev.device_status;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	789a      	ldrb	r2, [r3, #2]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	70da      	strb	r2, [r3, #3]
  /*Device is in Suspended State*/
  pdev->dev.device_status  = USB_SUSPENDED;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2204      	movs	r2, #4
 8004050:	709a      	strb	r2, [r3, #2]
  /* Upon Resume call user call back */
  pdev->dev.usr_cb->DeviceSuspended(); 
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	23ae      	movs	r3, #174	; 0xae
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	58d3      	ldr	r3, [r2, r3]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	4798      	blx	r3
  return USBD_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	0018      	movs	r0, r3
 8004062:	46bd      	mov	sp, r7
 8004064:	b002      	add	sp, #8
 8004066:	bd80      	pop	{r7, pc}

08004068 <USBD_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

static uint8_t USBD_SOF(USB_CORE_HANDLE  *pdev)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  if(pdev->dev.class_cb->SOF)
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	23ac      	movs	r3, #172	; 0xac
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	58d3      	ldr	r3, [r2, r3]
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d007      	beq.n	800408e <USBD_SOF+0x26>
  {
    pdev->dev.class_cb->SOF(pdev); 
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	23ac      	movs	r3, #172	; 0xac
 8004082:	005b      	lsls	r3, r3, #1
 8004084:	58d3      	ldr	r3, [r2, r3]
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	0010      	movs	r0, r2
 800408c:	4798      	blx	r3
  }
  return USBD_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	0018      	movs	r0, r3
 8004092:	46bd      	mov	sp, r7
 8004094:	b002      	add	sp, #8
 8004096:	bd80      	pop	{r7, pc}

08004098 <USBD_SetCfg>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_Status USBD_SetCfg(USB_CORE_HANDLE  *pdev, uint8_t cfgidx)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	000a      	movs	r2, r1
 80040a2:	1cfb      	adds	r3, r7, #3
 80040a4:	701a      	strb	r2, [r3, #0]
  pdev->dev.class_cb->Init(pdev, cfgidx); 
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	23ac      	movs	r3, #172	; 0xac
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	58d3      	ldr	r3, [r2, r3]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	1cfa      	adds	r2, r7, #3
 80040b2:	7811      	ldrb	r1, [r2, #0]
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	0010      	movs	r0, r2
 80040b8:	4798      	blx	r3
  
  /* Upon set config call user call back */
  pdev->dev.usr_cb->DeviceConfigured();
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	23ae      	movs	r3, #174	; 0xae
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	58d3      	ldr	r3, [r2, r3]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	4798      	blx	r3
  return USBD_OK; 
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	0018      	movs	r0, r3
 80040ca:	46bd      	mov	sp, r7
 80040cc:	b002      	add	sp, #8
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <USBD_ClrCfg>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_Status
  */
USBD_Status USBD_ClrCfg(USB_CORE_HANDLE  *pdev, uint8_t cfgidx)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	000a      	movs	r2, r1
 80040da:	1cfb      	adds	r3, r7, #3
 80040dc:	701a      	strb	r2, [r3, #0]
  pdev->dev.class_cb->DeInit(pdev, cfgidx);   
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	23ac      	movs	r3, #172	; 0xac
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	58d3      	ldr	r3, [r2, r3]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	1cfa      	adds	r2, r7, #3
 80040ea:	7811      	ldrb	r1, [r2, #0]
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	0010      	movs	r0, r2
 80040f0:	4798      	blx	r3
  return USBD_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	0018      	movs	r0, r3
 80040f6:	46bd      	mov	sp, r7
 80040f8:	b002      	add	sp, #8
 80040fa:	bd80      	pop	{r7, pc}

080040fc <usbd_cdc_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
uint8_t  usbd_cdc_Init (void  *pdev, 
                               uint8_t cfgidx)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	000a      	movs	r2, r1
 8004106:	1cfb      	adds	r3, r7, #3
 8004108:	701a      	strb	r2, [r3, #0]
  DCD_PMA_Config(pdev , CDC_IN_EP,USB_SNG_BUF,BULK_IN_TX_ADDRESS);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	23c0      	movs	r3, #192	; 0xc0
 800410e:	2200      	movs	r2, #0
 8004110:	2181      	movs	r1, #129	; 0x81
 8004112:	f000 fdd1 	bl	8004cb8 <DCD_PMA_Config>
  DCD_PMA_Config(pdev , CDC_CMD_EP,USB_SNG_BUF,INT_IN_TX_ADDRESS);
 8004116:	2380      	movs	r3, #128	; 0x80
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	2182      	movs	r1, #130	; 0x82
 8004120:	f000 fdca 	bl	8004cb8 <DCD_PMA_Config>
  DCD_PMA_Config(pdev , CDC_OUT_EP,USB_SNG_BUF,BULK_OUT_RX_ADDRESS);
 8004124:	2388      	movs	r3, #136	; 0x88
 8004126:	005b      	lsls	r3, r3, #1
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	2103      	movs	r1, #3
 800412e:	f000 fdc3 	bl	8004cb8 <DCD_PMA_Config>

  /* Open EP IN */
  DCD_EP_Open(pdev,
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	2302      	movs	r3, #2
 8004136:	2240      	movs	r2, #64	; 0x40
 8004138:	2181      	movs	r1, #129	; 0x81
 800413a:	f000 fe0b 	bl	8004d54 <DCD_EP_Open>
              CDC_IN_EP,
              CDC_DATA_IN_PACKET_SIZE,
              USB_EP_BULK);
  
  /* Open EP OUT */
  DCD_EP_Open(pdev,
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	2302      	movs	r3, #2
 8004142:	2240      	movs	r2, #64	; 0x40
 8004144:	2103      	movs	r1, #3
 8004146:	f000 fe05 	bl	8004d54 <DCD_EP_Open>
              CDC_OUT_EP,
              CDC_DATA_OUT_PACKET_SIZE,
              USB_EP_BULK);
  
  /* Open Command IN EP */
  DCD_EP_Open(pdev,
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	2303      	movs	r3, #3
 800414e:	2208      	movs	r2, #8
 8004150:	2182      	movs	r1, #130	; 0x82
 8004152:	f000 fdff 	bl	8004d54 <DCD_EP_Open>
              USB_EP_INT);
  

  
  /* Initialize the Interface physical components */
  APP_FOPS.pIf_Init();
 8004156:	4b07      	ldr	r3, [pc, #28]	; (8004174 <usbd_cdc_Init+0x78>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4798      	blx	r3

  /* Prepare Out endpoint to receive next packet */
  DCD_EP_PrepareRx(pdev,
 800415c:	4a06      	ldr	r2, [pc, #24]	; (8004178 <usbd_cdc_Init+0x7c>)
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	2340      	movs	r3, #64	; 0x40
 8004162:	2103      	movs	r1, #3
 8004164:	f000 ff9a 	bl	800509c <DCD_EP_PrepareRx>
                   CDC_OUT_EP,
                   (uint8_t*)(USB_Rx_Buffer),
                   CDC_DATA_OUT_PACKET_SIZE);
  
  return USBD_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	0018      	movs	r0, r3
 800416c:	46bd      	mov	sp, r7
 800416e:	b002      	add	sp, #8
 8004170:	bd80      	pop	{r7, pc}
 8004172:	46c0      	nop			; (mov r8, r8)
 8004174:	20000060 	.word	0x20000060
 8004178:	20000698 	.word	0x20000698

0800417c <usbd_cdc_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
uint8_t  usbd_cdc_DeInit (void  *pdev, 
                                 uint8_t cfgidx)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	000a      	movs	r2, r1
 8004186:	1cfb      	adds	r3, r7, #3
 8004188:	701a      	strb	r2, [r3, #0]
  /* Open EP IN */
  DCD_EP_Close(pdev,
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2181      	movs	r1, #129	; 0x81
 800418e:	0018      	movs	r0, r3
 8004190:	f000 fefe 	bl	8004f90 <DCD_EP_Close>
              CDC_IN_EP);
  
  /* Open EP OUT */
  DCD_EP_Close(pdev,
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2103      	movs	r1, #3
 8004198:	0018      	movs	r0, r3
 800419a:	f000 fef9 	bl	8004f90 <DCD_EP_Close>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  DCD_EP_Close(pdev,
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2182      	movs	r1, #130	; 0x82
 80041a2:	0018      	movs	r0, r3
 80041a4:	f000 fef4 	bl	8004f90 <DCD_EP_Close>
              CDC_CMD_EP);

  /* Restore default state of the Interface physical components */
  APP_FOPS.pIf_DeInit();
 80041a8:	4b03      	ldr	r3, [pc, #12]	; (80041b8 <usbd_cdc_DeInit+0x3c>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	4798      	blx	r3
  
  return USBD_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	0018      	movs	r0, r3
 80041b2:	46bd      	mov	sp, r7
 80041b4:	b002      	add	sp, #8
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	20000060 	.word	0x20000060

080041bc <usbd_cdc_Setup>:
  * @param  req: usb requests
  * @retval status
  */
uint8_t  usbd_cdc_Setup (void  *pdev, 
                                USB_SETUP_REQ *req)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  uint16_t len=USB_CDC_DESC_SIZ;
 80041c6:	230e      	movs	r3, #14
 80041c8:	18fb      	adds	r3, r7, r3
 80041ca:	223a      	movs	r2, #58	; 0x3a
 80041cc:	801a      	strh	r2, [r3, #0]
  uint8_t  *pbuf= (uint8_t*)usbd_cdc_CfgDesc + 9;
 80041ce:	4b44      	ldr	r3, [pc, #272]	; (80042e0 <usbd_cdc_Setup+0x124>)
 80041d0:	60bb      	str	r3, [r7, #8]
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	001a      	movs	r2, r3
 80041d8:	2360      	movs	r3, #96	; 0x60
 80041da:	4013      	ands	r3, r2
 80041dc:	d03f      	beq.n	800425e <usbd_cdc_Setup+0xa2>
 80041de:	2b20      	cmp	r3, #32
 80041e0:	d135      	bne.n	800424e <usbd_cdc_Setup+0x92>
  {
    /* CDC Class Requests -------------------------------*/
  case USB_REQ_TYPE_CLASS :
      /* Check if the request is a data setup packet */
      if (req->wLength)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	88db      	ldrh	r3, [r3, #6]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d027      	beq.n	800423a <usbd_cdc_Setup+0x7e>
      {
        /* Check if the request is Device-to-Host */
        if (req->bmRequest & 0x80)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	b25b      	sxtb	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	da10      	bge.n	8004216 <usbd_cdc_Setup+0x5a>
        {
          /* Get the data to be sent to Host from interface layer */
          APP_FOPS.pIf_Ctrl(req->bRequest, CmdBuff, req->wLength);
 80041f4:	4b3b      	ldr	r3, [pc, #236]	; (80042e4 <usbd_cdc_Setup+0x128>)
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	7852      	ldrb	r2, [r2, #1]
 80041fc:	0010      	movs	r0, r2
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	88d2      	ldrh	r2, [r2, #6]
 8004202:	4939      	ldr	r1, [pc, #228]	; (80042e8 <usbd_cdc_Setup+0x12c>)
 8004204:	4798      	blx	r3
          
          /* Send the data to the host */
          USBD_CtlSendData (pdev, 
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	88da      	ldrh	r2, [r3, #6]
 800420a:	4937      	ldr	r1, [pc, #220]	; (80042e8 <usbd_cdc_Setup+0x12c>)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	0018      	movs	r0, r3
 8004210:	f7ff fcb2 	bl	8003b78 <USBD_CtlSendData>
 8004214:	e019      	b.n	800424a <usbd_cdc_Setup+0x8e>
                            req->wLength);          
        }
        else /* Host-to-Device requeset */
        {
          /* Set the value of the current command to be processed */
          cdcCmd = req->bRequest;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	785b      	ldrb	r3, [r3, #1]
 800421a:	001a      	movs	r2, r3
 800421c:	4b33      	ldr	r3, [pc, #204]	; (80042ec <usbd_cdc_Setup+0x130>)
 800421e:	601a      	str	r2, [r3, #0]
          cdcLen = req->wLength;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	88db      	ldrh	r3, [r3, #6]
 8004224:	001a      	movs	r2, r3
 8004226:	4b32      	ldr	r3, [pc, #200]	; (80042f0 <usbd_cdc_Setup+0x134>)
 8004228:	601a      	str	r2, [r3, #0]
          
          /* Prepare the reception of the buffer over EP0
          Next step: the received data will be managed in usbd_cdc_EP0_TxSent() 
          function. */
          USBD_CtlPrepareRx (pdev,
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	88da      	ldrh	r2, [r3, #6]
 800422e:	492e      	ldr	r1, [pc, #184]	; (80042e8 <usbd_cdc_Setup+0x12c>)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	0018      	movs	r0, r3
 8004234:	f7ff fcde 	bl	8003bf4 <USBD_CtlPrepareRx>
 8004238:	e007      	b.n	800424a <usbd_cdc_Setup+0x8e>
        }
      }
      else /* No Data request */
      {
        /* Transfer the command to the interface layer */
        APP_FOPS.pIf_Ctrl(req->bRequest, NULL, 0);
 800423a:	4b2a      	ldr	r3, [pc, #168]	; (80042e4 <usbd_cdc_Setup+0x128>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	7852      	ldrb	r2, [r2, #1]
 8004242:	0010      	movs	r0, r2
 8004244:	2200      	movs	r2, #0
 8004246:	2100      	movs	r1, #0
 8004248:	4798      	blx	r3
      }
      
      return USBD_OK;
 800424a:	2300      	movs	r3, #0
 800424c:	e044      	b.n	80042d8 <usbd_cdc_Setup+0x11c>
      
    default:
      USBD_CtlError (pdev, req);
 800424e:	683a      	ldr	r2, [r7, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	0011      	movs	r1, r2
 8004254:	0018      	movs	r0, r3
 8004256:	f7ff fc0d 	bl	8003a74 <USBD_CtlError>
      return USBD_FAIL;
 800425a:	2302      	movs	r3, #2
 800425c:	e03c      	b.n	80042d8 <usbd_cdc_Setup+0x11c>
    
      
      
    /* Standard Requests -------------------------------*/
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	785b      	ldrb	r3, [r3, #1]
 8004262:	2b0a      	cmp	r3, #10
 8004264:	d01d      	beq.n	80042a2 <usbd_cdc_Setup+0xe6>
 8004266:	2b0b      	cmp	r3, #11
 8004268:	d022      	beq.n	80042b0 <usbd_cdc_Setup+0xf4>
 800426a:	2b06      	cmp	r3, #6
 800426c:	d133      	bne.n	80042d6 <usbd_cdc_Setup+0x11a>
    {
    case USB_REQ_GET_DESCRIPTOR: 
      if( (req->wValue >> 8) == CDC_DESCRIPTOR_TYPE)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	885b      	ldrh	r3, [r3, #2]
 8004272:	0a1b      	lsrs	r3, r3, #8
 8004274:	b29b      	uxth	r3, r3
 8004276:	2b21      	cmp	r3, #33	; 0x21
 8004278:	d10a      	bne.n	8004290 <usbd_cdc_Setup+0xd4>
      {
        pbuf = (uint8_t*)usbd_cdc_CfgDesc + 9 + (9 * USBD_ITF_MAX_NUM);
 800427a:	4b1e      	ldr	r3, [pc, #120]	; (80042f4 <usbd_cdc_Setup+0x138>)
 800427c:	60bb      	str	r3, [r7, #8]
        len = MIN(USB_CDC_DESC_SIZ , req->wLength);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	88db      	ldrh	r3, [r3, #6]
 8004282:	220e      	movs	r2, #14
 8004284:	18ba      	adds	r2, r7, r2
 8004286:	b299      	uxth	r1, r3
 8004288:	293a      	cmp	r1, #58	; 0x3a
 800428a:	d900      	bls.n	800428e <usbd_cdc_Setup+0xd2>
 800428c:	233a      	movs	r3, #58	; 0x3a
 800428e:	8013      	strh	r3, [r2, #0]
      }
      
      USBD_CtlSendData (pdev, 
 8004290:	230e      	movs	r3, #14
 8004292:	18fb      	adds	r3, r7, r3
 8004294:	881a      	ldrh	r2, [r3, #0]
 8004296:	68b9      	ldr	r1, [r7, #8]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	0018      	movs	r0, r3
 800429c:	f7ff fc6c 	bl	8003b78 <USBD_CtlSendData>
                        pbuf,
                        len);
      break;
 80042a0:	e019      	b.n	80042d6 <usbd_cdc_Setup+0x11a>
      
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
 80042a2:	4915      	ldr	r1, [pc, #84]	; (80042f8 <usbd_cdc_Setup+0x13c>)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	0018      	movs	r0, r3
 80042aa:	f7ff fc65 	bl	8003b78 <USBD_CtlSendData>
                        (uint8_t *)&usbd_cdc_AltSet,
                        1);
      break;
 80042ae:	e012      	b.n	80042d6 <usbd_cdc_Setup+0x11a>
      
    case USB_REQ_SET_INTERFACE :
      if ((uint8_t)(req->wValue) < USBD_ITF_MAX_NUM)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	885b      	ldrh	r3, [r3, #2]
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d106      	bne.n	80042c8 <usbd_cdc_Setup+0x10c>
      {
        usbd_cdc_AltSet = (uint8_t)(req->wValue);
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	885b      	ldrh	r3, [r3, #2]
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	001a      	movs	r2, r3
 80042c2:	4b0d      	ldr	r3, [pc, #52]	; (80042f8 <usbd_cdc_Setup+0x13c>)
 80042c4:	601a      	str	r2, [r3, #0]
      else
      {
        /* Call the error management function (command will be nacked */
        USBD_CtlError (pdev, req);
      }
      break;
 80042c6:	e005      	b.n	80042d4 <usbd_cdc_Setup+0x118>
        usbd_cdc_AltSet = (uint8_t)(req->wValue);
      }
      else
      {
        /* Call the error management function (command will be nacked */
        USBD_CtlError (pdev, req);
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	0011      	movs	r1, r2
 80042ce:	0018      	movs	r0, r3
 80042d0:	f7ff fbd0 	bl	8003a74 <USBD_CtlError>
      }
      break;
 80042d4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return USBD_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	0018      	movs	r0, r3
 80042da:	46bd      	mov	sp, r7
 80042dc:	b004      	add	sp, #16
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	080076cd 	.word	0x080076cd
 80042e4:	20000060 	.word	0x20000060
 80042e8:	200006d8 	.word	0x200006d8
 80042ec:	20000094 	.word	0x20000094
 80042f0:	2000016c 	.word	0x2000016c
 80042f4:	080076d6 	.word	0x080076d6
 80042f8:	20000154 	.word	0x20000154

080042fc <usbd_cdc_EP0_RxReady>:
  *         Data received on control endpoint
  * @param  pdev: device device instance
  * @retval status
  */
uint8_t  usbd_cdc_EP0_RxReady (void  *pdev)
{ 
 80042fc:	b590      	push	{r4, r7, lr}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  if (cdcCmd != NO_CMD)
 8004304:	4b0a      	ldr	r3, [pc, #40]	; (8004330 <usbd_cdc_EP0_RxReady+0x34>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2bff      	cmp	r3, #255	; 0xff
 800430a:	d00b      	beq.n	8004324 <usbd_cdc_EP0_RxReady+0x28>
  {
    /* Process the data */
    APP_FOPS.pIf_Ctrl(cdcCmd, CmdBuff, cdcLen);
 800430c:	4b09      	ldr	r3, [pc, #36]	; (8004334 <usbd_cdc_EP0_RxReady+0x38>)
 800430e:	689c      	ldr	r4, [r3, #8]
 8004310:	4b07      	ldr	r3, [pc, #28]	; (8004330 <usbd_cdc_EP0_RxReady+0x34>)
 8004312:	6818      	ldr	r0, [r3, #0]
 8004314:	4b08      	ldr	r3, [pc, #32]	; (8004338 <usbd_cdc_EP0_RxReady+0x3c>)
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	4b08      	ldr	r3, [pc, #32]	; (800433c <usbd_cdc_EP0_RxReady+0x40>)
 800431a:	0019      	movs	r1, r3
 800431c:	47a0      	blx	r4
    
    /* Reset the command variable to default value */
    cdcCmd = NO_CMD;
 800431e:	4b04      	ldr	r3, [pc, #16]	; (8004330 <usbd_cdc_EP0_RxReady+0x34>)
 8004320:	22ff      	movs	r2, #255	; 0xff
 8004322:	601a      	str	r2, [r3, #0]
  }
  
  return USBD_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	0018      	movs	r0, r3
 8004328:	46bd      	mov	sp, r7
 800432a:	b003      	add	sp, #12
 800432c:	bd90      	pop	{r4, r7, pc}
 800432e:	46c0      	nop			; (mov r8, r8)
 8004330:	20000094 	.word	0x20000094
 8004334:	20000060 	.word	0x20000060
 8004338:	2000016c 	.word	0x2000016c
 800433c:	200006d8 	.word	0x200006d8

08004340 <usbd_cdc_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  usbd_cdc_DataIn (void *pdev, uint8_t epnum)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	000a      	movs	r2, r1
 800434a:	1cfb      	adds	r3, r7, #3
 800434c:	701a      	strb	r2, [r3, #0]
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if (USB_Tx_State == 1)
 800434e:	4b30      	ldr	r3, [pc, #192]	; (8004410 <usbd_cdc_DataIn+0xd0>)
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d156      	bne.n	8004404 <usbd_cdc_DataIn+0xc4>
  {
    if (APP_Rx_length == 0) 
 8004356:	4b2f      	ldr	r3, [pc, #188]	; (8004414 <usbd_cdc_DataIn+0xd4>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d111      	bne.n	8004382 <usbd_cdc_DataIn+0x42>
    {
      if (last_packet ==1)
 800435e:	4b2e      	ldr	r3, [pc, #184]	; (8004418 <usbd_cdc_DataIn+0xd8>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d109      	bne.n	800437a <usbd_cdc_DataIn+0x3a>
      {
        last_packet =0;
 8004366:	4b2c      	ldr	r3, [pc, #176]	; (8004418 <usbd_cdc_DataIn+0xd8>)
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]
        
        /*Send zero-length packet*/
        DCD_EP_Tx (pdev, CDC_IN_EP, 0, 0);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	2300      	movs	r3, #0
 8004370:	2200      	movs	r2, #0
 8004372:	2181      	movs	r1, #129	; 0x81
 8004374:	f000 fef4 	bl	8005160 <DCD_EP_Tx>
 8004378:	e044      	b.n	8004404 <usbd_cdc_DataIn+0xc4>
      }
      else
      {
        USB_Tx_State = 0;
 800437a:	4b25      	ldr	r3, [pc, #148]	; (8004410 <usbd_cdc_DataIn+0xd0>)
 800437c:	2200      	movs	r2, #0
 800437e:	701a      	strb	r2, [r3, #0]
 8004380:	e040      	b.n	8004404 <usbd_cdc_DataIn+0xc4>
      }
    }
    else 
    {
      if (APP_Rx_length > CDC_DATA_IN_PACKET_SIZE){
 8004382:	4b24      	ldr	r3, [pc, #144]	; (8004414 <usbd_cdc_DataIn+0xd4>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2b40      	cmp	r3, #64	; 0x40
 8004388:	d915      	bls.n	80043b6 <usbd_cdc_DataIn+0x76>
        USB_Tx_ptr = APP_Rx_ptr_out;
 800438a:	4b24      	ldr	r3, [pc, #144]	; (800441c <usbd_cdc_DataIn+0xdc>)
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	230e      	movs	r3, #14
 8004390:	18fb      	adds	r3, r7, r3
 8004392:	801a      	strh	r2, [r3, #0]
        USB_Tx_length = CDC_DATA_IN_PACKET_SIZE;
 8004394:	230c      	movs	r3, #12
 8004396:	18fb      	adds	r3, r7, r3
 8004398:	2240      	movs	r2, #64	; 0x40
 800439a:	801a      	strh	r2, [r3, #0]
        
        APP_Rx_ptr_out += CDC_DATA_IN_PACKET_SIZE;
 800439c:	4b1f      	ldr	r3, [pc, #124]	; (800441c <usbd_cdc_DataIn+0xdc>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	3340      	adds	r3, #64	; 0x40
 80043a2:	001a      	movs	r2, r3
 80043a4:	4b1d      	ldr	r3, [pc, #116]	; (800441c <usbd_cdc_DataIn+0xdc>)
 80043a6:	601a      	str	r2, [r3, #0]
        APP_Rx_length -= CDC_DATA_IN_PACKET_SIZE;    
 80043a8:	4b1a      	ldr	r3, [pc, #104]	; (8004414 <usbd_cdc_DataIn+0xd4>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	3b40      	subs	r3, #64	; 0x40
 80043ae:	001a      	movs	r2, r3
 80043b0:	4b18      	ldr	r3, [pc, #96]	; (8004414 <usbd_cdc_DataIn+0xd4>)
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	e01a      	b.n	80043ec <usbd_cdc_DataIn+0xac>
      }
      else 
      {
        USB_Tx_ptr = APP_Rx_ptr_out;
 80043b6:	4b19      	ldr	r3, [pc, #100]	; (800441c <usbd_cdc_DataIn+0xdc>)
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	230e      	movs	r3, #14
 80043bc:	18fb      	adds	r3, r7, r3
 80043be:	801a      	strh	r2, [r3, #0]
        USB_Tx_length = APP_Rx_length;
 80043c0:	4b14      	ldr	r3, [pc, #80]	; (8004414 <usbd_cdc_DataIn+0xd4>)
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	230c      	movs	r3, #12
 80043c6:	18fb      	adds	r3, r7, r3
 80043c8:	801a      	strh	r2, [r3, #0]
        
        APP_Rx_ptr_out += APP_Rx_length;
 80043ca:	4b14      	ldr	r3, [pc, #80]	; (800441c <usbd_cdc_DataIn+0xdc>)
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	4b11      	ldr	r3, [pc, #68]	; (8004414 <usbd_cdc_DataIn+0xd4>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	18d2      	adds	r2, r2, r3
 80043d4:	4b11      	ldr	r3, [pc, #68]	; (800441c <usbd_cdc_DataIn+0xdc>)
 80043d6:	601a      	str	r2, [r3, #0]
        APP_Rx_length = 0;
 80043d8:	4b0e      	ldr	r3, [pc, #56]	; (8004414 <usbd_cdc_DataIn+0xd4>)
 80043da:	2200      	movs	r2, #0
 80043dc:	601a      	str	r2, [r3, #0]
        if (APP_Rx_length == CDC_DATA_IN_PACKET_SIZE) last_packet = 1;
 80043de:	4b0d      	ldr	r3, [pc, #52]	; (8004414 <usbd_cdc_DataIn+0xd4>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2b40      	cmp	r3, #64	; 0x40
 80043e4:	d102      	bne.n	80043ec <usbd_cdc_DataIn+0xac>
 80043e6:	4b0c      	ldr	r3, [pc, #48]	; (8004418 <usbd_cdc_DataIn+0xd8>)
 80043e8:	2201      	movs	r2, #1
 80043ea:	601a      	str	r2, [r3, #0]
      }
      
      /* Prepare the available data buffer to be sent on IN endpoint */
      DCD_EP_Tx (pdev,
                 CDC_IN_EP,
                 (uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],
 80043ec:	230e      	movs	r3, #14
 80043ee:	18fb      	adds	r3, r7, r3
 80043f0:	881a      	ldrh	r2, [r3, #0]
        APP_Rx_length = 0;
        if (APP_Rx_length == CDC_DATA_IN_PACKET_SIZE) last_packet = 1;
      }
      
      /* Prepare the available data buffer to be sent on IN endpoint */
      DCD_EP_Tx (pdev,
 80043f2:	4b0b      	ldr	r3, [pc, #44]	; (8004420 <usbd_cdc_DataIn+0xe0>)
 80043f4:	18d2      	adds	r2, r2, r3
 80043f6:	230c      	movs	r3, #12
 80043f8:	18fb      	adds	r3, r7, r3
 80043fa:	881b      	ldrh	r3, [r3, #0]
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	2181      	movs	r1, #129	; 0x81
 8004400:	f000 feae 	bl	8005160 <DCD_EP_Tx>
                 (uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],
                 USB_Tx_length);
    }
  }  
  
  return USBD_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	0018      	movs	r0, r3
 8004408:	46bd      	mov	sp, r7
 800440a:	b004      	add	sp, #16
 800440c:	bd80      	pop	{r7, pc}
 800440e:	46c0      	nop			; (mov r8, r8)
 8004410:	20000168 	.word	0x20000168
 8004414:	20000164 	.word	0x20000164
 8004418:	20000158 	.word	0x20000158
 800441c:	20000160 	.word	0x20000160
 8004420:	200006e0 	.word	0x200006e0

08004424 <usbd_cdc_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  usbd_cdc_DataOut (void *pdev, uint8_t epnum)
{      
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	000a      	movs	r2, r1
 800442e:	1cfb      	adds	r3, r7, #3
 8004430:	701a      	strb	r2, [r3, #0]
  uint16_t USB_Rx_Cnt;
  
  /* Get the received data buffer and update the counter */
  USB_Rx_Cnt = ((USB_CORE_HANDLE*)pdev)->dev.out_ep[epnum].xfer_count;
 8004432:	1cfb      	adds	r3, r7, #3
 8004434:	781a      	ldrb	r2, [r3, #0]
 8004436:	6879      	ldr	r1, [r7, #4]
 8004438:	20d0      	movs	r0, #208	; 0xd0
 800443a:	0013      	movs	r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	189b      	adds	r3, r3, r2
 8004440:	00db      	lsls	r3, r3, #3
 8004442:	18cb      	adds	r3, r1, r3
 8004444:	181b      	adds	r3, r3, r0
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	230e      	movs	r3, #14
 800444a:	18fb      	adds	r3, r7, r3
 800444c:	801a      	strh	r2, [r3, #0]
  
  /* USB data will be immediately processed, this allow next USB traffic being 
     NAKed till the end of the application Xfer */
  APP_FOPS.pIf_DataRx(USB_Rx_Buffer, USB_Rx_Cnt);
 800444e:	4b09      	ldr	r3, [pc, #36]	; (8004474 <usbd_cdc_DataOut+0x50>)
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	220e      	movs	r2, #14
 8004454:	18ba      	adds	r2, r7, r2
 8004456:	8811      	ldrh	r1, [r2, #0]
 8004458:	4a07      	ldr	r2, [pc, #28]	; (8004478 <usbd_cdc_DataOut+0x54>)
 800445a:	0010      	movs	r0, r2
 800445c:	4798      	blx	r3
  
  /* Prepare Out endpoint to receive next packet */
  DCD_EP_PrepareRx(pdev,
 800445e:	4a06      	ldr	r2, [pc, #24]	; (8004478 <usbd_cdc_DataOut+0x54>)
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	2340      	movs	r3, #64	; 0x40
 8004464:	2103      	movs	r1, #3
 8004466:	f000 fe19 	bl	800509c <DCD_EP_PrepareRx>
                   CDC_OUT_EP,
                   (uint8_t*)(USB_Rx_Buffer),
                   CDC_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	0018      	movs	r0, r3
 800446e:	46bd      	mov	sp, r7
 8004470:	b004      	add	sp, #16
 8004472:	bd80      	pop	{r7, pc}
 8004474:	20000060 	.word	0x20000060
 8004478:	20000698 	.word	0x20000698

0800447c <usbd_cdc_SOF>:
  * @param  pdev: instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  usbd_cdc_SOF (void *pdev)
{      
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  static uint32_t FrameCount = 0;
  
  if (FrameCount++ == CDC_IN_FRAME_INTERVAL)
 8004484:	4b09      	ldr	r3, [pc, #36]	; (80044ac <usbd_cdc_SOF+0x30>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	1c59      	adds	r1, r3, #1
 800448a:	4a08      	ldr	r2, [pc, #32]	; (80044ac <usbd_cdc_SOF+0x30>)
 800448c:	6011      	str	r1, [r2, #0]
 800448e:	2b05      	cmp	r3, #5
 8004490:	d106      	bne.n	80044a0 <usbd_cdc_SOF+0x24>
  {
    /* Reset the frame counter */
    FrameCount = 0;
 8004492:	4b06      	ldr	r3, [pc, #24]	; (80044ac <usbd_cdc_SOF+0x30>)
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]
    
    /* Check the data to be sent through IN pipe */
    Handle_USBAsynchXfer(pdev);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	0018      	movs	r0, r3
 800449c:	f000 f808 	bl	80044b0 <Handle_USBAsynchXfer>
  }
  
  return USBD_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	0018      	movs	r0, r3
 80044a4:	46bd      	mov	sp, r7
 80044a6:	b002      	add	sp, #8
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	46c0      	nop			; (mov r8, r8)
 80044ac:	20000170 	.word	0x20000170

080044b0 <Handle_USBAsynchXfer>:
  *         Send data to USB
  * @param  pdev: instance
  * @retval None
  */
static void Handle_USBAsynchXfer (void *pdev)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if(USB_Tx_State != 1)
 80044b8:	4b3d      	ldr	r3, [pc, #244]	; (80045b0 <Handle_USBAsynchXfer+0x100>)
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d100      	bne.n	80044c2 <Handle_USBAsynchXfer+0x12>
 80044c0:	e073      	b.n	80045aa <Handle_USBAsynchXfer+0xfa>
  {
    if (APP_Rx_ptr_out == APP_RX_DATA_SIZE)
 80044c2:	4b3c      	ldr	r3, [pc, #240]	; (80045b4 <Handle_USBAsynchXfer+0x104>)
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	2380      	movs	r3, #128	; 0x80
 80044c8:	011b      	lsls	r3, r3, #4
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d102      	bne.n	80044d4 <Handle_USBAsynchXfer+0x24>
    {
      APP_Rx_ptr_out = 0;
 80044ce:	4b39      	ldr	r3, [pc, #228]	; (80045b4 <Handle_USBAsynchXfer+0x104>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	601a      	str	r2, [r3, #0]
    }
    
    if(APP_Rx_ptr_out == APP_Rx_ptr_in) 
 80044d4:	4b37      	ldr	r3, [pc, #220]	; (80045b4 <Handle_USBAsynchXfer+0x104>)
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	4b37      	ldr	r3, [pc, #220]	; (80045b8 <Handle_USBAsynchXfer+0x108>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d103      	bne.n	80044e8 <Handle_USBAsynchXfer+0x38>
    {
      USB_Tx_State = 0; 
 80044e0:	4b33      	ldr	r3, [pc, #204]	; (80045b0 <Handle_USBAsynchXfer+0x100>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	701a      	strb	r2, [r3, #0]
      return;
 80044e6:	e060      	b.n	80045aa <Handle_USBAsynchXfer+0xfa>
    }
    
    if(APP_Rx_ptr_out > APP_Rx_ptr_in) /* rollback */
 80044e8:	4b32      	ldr	r3, [pc, #200]	; (80045b4 <Handle_USBAsynchXfer+0x104>)
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	4b32      	ldr	r3, [pc, #200]	; (80045b8 <Handle_USBAsynchXfer+0x108>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d907      	bls.n	8004504 <Handle_USBAsynchXfer+0x54>
    { 
      APP_Rx_length = APP_RX_DATA_SIZE - APP_Rx_ptr_out;
 80044f4:	4b2f      	ldr	r3, [pc, #188]	; (80045b4 <Handle_USBAsynchXfer+0x104>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2280      	movs	r2, #128	; 0x80
 80044fa:	0112      	lsls	r2, r2, #4
 80044fc:	1ad2      	subs	r2, r2, r3
 80044fe:	4b2f      	ldr	r3, [pc, #188]	; (80045bc <Handle_USBAsynchXfer+0x10c>)
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	e006      	b.n	8004512 <Handle_USBAsynchXfer+0x62>
      
    }
    else 
    {
      APP_Rx_length = APP_Rx_ptr_in - APP_Rx_ptr_out;
 8004504:	4b2c      	ldr	r3, [pc, #176]	; (80045b8 <Handle_USBAsynchXfer+0x108>)
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	4b2a      	ldr	r3, [pc, #168]	; (80045b4 <Handle_USBAsynchXfer+0x104>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	1ad2      	subs	r2, r2, r3
 800450e:	4b2b      	ldr	r3, [pc, #172]	; (80045bc <Handle_USBAsynchXfer+0x10c>)
 8004510:	601a      	str	r2, [r3, #0]
      
    }
    
    if (APP_Rx_length > CDC_DATA_IN_PACKET_SIZE)
 8004512:	4b2a      	ldr	r3, [pc, #168]	; (80045bc <Handle_USBAsynchXfer+0x10c>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2b40      	cmp	r3, #64	; 0x40
 8004518:	d915      	bls.n	8004546 <Handle_USBAsynchXfer+0x96>
    {
      USB_Tx_ptr = APP_Rx_ptr_out;
 800451a:	4b26      	ldr	r3, [pc, #152]	; (80045b4 <Handle_USBAsynchXfer+0x104>)
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	230e      	movs	r3, #14
 8004520:	18fb      	adds	r3, r7, r3
 8004522:	801a      	strh	r2, [r3, #0]
      USB_Tx_length = CDC_DATA_IN_PACKET_SIZE;
 8004524:	230c      	movs	r3, #12
 8004526:	18fb      	adds	r3, r7, r3
 8004528:	2240      	movs	r2, #64	; 0x40
 800452a:	801a      	strh	r2, [r3, #0]
      
      APP_Rx_ptr_out += CDC_DATA_IN_PACKET_SIZE;	
 800452c:	4b21      	ldr	r3, [pc, #132]	; (80045b4 <Handle_USBAsynchXfer+0x104>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	3340      	adds	r3, #64	; 0x40
 8004532:	001a      	movs	r2, r3
 8004534:	4b1f      	ldr	r3, [pc, #124]	; (80045b4 <Handle_USBAsynchXfer+0x104>)
 8004536:	601a      	str	r2, [r3, #0]
      APP_Rx_length -= CDC_DATA_IN_PACKET_SIZE;
 8004538:	4b20      	ldr	r3, [pc, #128]	; (80045bc <Handle_USBAsynchXfer+0x10c>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	3b40      	subs	r3, #64	; 0x40
 800453e:	001a      	movs	r2, r3
 8004540:	4b1e      	ldr	r3, [pc, #120]	; (80045bc <Handle_USBAsynchXfer+0x10c>)
 8004542:	601a      	str	r2, [r3, #0]
 8004544:	e022      	b.n	800458c <Handle_USBAsynchXfer+0xdc>
    }
    else
    {
      USB_Tx_ptr = APP_Rx_ptr_out;
 8004546:	4b1b      	ldr	r3, [pc, #108]	; (80045b4 <Handle_USBAsynchXfer+0x104>)
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	230e      	movs	r3, #14
 800454c:	18fb      	adds	r3, r7, r3
 800454e:	801a      	strh	r2, [r3, #0]
      USB_Tx_length = APP_Rx_length;
 8004550:	4b1a      	ldr	r3, [pc, #104]	; (80045bc <Handle_USBAsynchXfer+0x10c>)
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	230c      	movs	r3, #12
 8004556:	18fb      	adds	r3, r7, r3
 8004558:	801a      	strh	r2, [r3, #0]
      
      APP_Rx_ptr_out += APP_Rx_length;
 800455a:	4b16      	ldr	r3, [pc, #88]	; (80045b4 <Handle_USBAsynchXfer+0x104>)
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	4b17      	ldr	r3, [pc, #92]	; (80045bc <Handle_USBAsynchXfer+0x10c>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	18d2      	adds	r2, r2, r3
 8004564:	4b13      	ldr	r3, [pc, #76]	; (80045b4 <Handle_USBAsynchXfer+0x104>)
 8004566:	601a      	str	r2, [r3, #0]
      APP_Rx_length = 0;
 8004568:	4b14      	ldr	r3, [pc, #80]	; (80045bc <Handle_USBAsynchXfer+0x10c>)
 800456a:	2200      	movs	r2, #0
 800456c:	601a      	str	r2, [r3, #0]
      if (USB_Tx_length == CDC_DATA_IN_PACKET_SIZE) last_packet = 1; //IBA
 800456e:	230c      	movs	r3, #12
 8004570:	18fb      	adds	r3, r7, r3
 8004572:	881b      	ldrh	r3, [r3, #0]
 8004574:	2b40      	cmp	r3, #64	; 0x40
 8004576:	d102      	bne.n	800457e <Handle_USBAsynchXfer+0xce>
 8004578:	4b11      	ldr	r3, [pc, #68]	; (80045c0 <Handle_USBAsynchXfer+0x110>)
 800457a:	2201      	movs	r2, #1
 800457c:	601a      	str	r2, [r3, #0]
      if (APP_Rx_ptr_in == 64) APP_Rx_ptr_in=0;
 800457e:	4b0e      	ldr	r3, [pc, #56]	; (80045b8 <Handle_USBAsynchXfer+0x108>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2b40      	cmp	r3, #64	; 0x40
 8004584:	d102      	bne.n	800458c <Handle_USBAsynchXfer+0xdc>
 8004586:	4b0c      	ldr	r3, [pc, #48]	; (80045b8 <Handle_USBAsynchXfer+0x108>)
 8004588:	2200      	movs	r2, #0
 800458a:	601a      	str	r2, [r3, #0]
    }
    USB_Tx_State = 1; 
 800458c:	4b08      	ldr	r3, [pc, #32]	; (80045b0 <Handle_USBAsynchXfer+0x100>)
 800458e:	2201      	movs	r2, #1
 8004590:	701a      	strb	r2, [r3, #0]
    
    DCD_EP_Tx (pdev,
               CDC_IN_EP,
               (uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],
 8004592:	230e      	movs	r3, #14
 8004594:	18fb      	adds	r3, r7, r3
 8004596:	881a      	ldrh	r2, [r3, #0]
      if (USB_Tx_length == CDC_DATA_IN_PACKET_SIZE) last_packet = 1; //IBA
      if (APP_Rx_ptr_in == 64) APP_Rx_ptr_in=0;
    }
    USB_Tx_State = 1; 
    
    DCD_EP_Tx (pdev,
 8004598:	4b0a      	ldr	r3, [pc, #40]	; (80045c4 <Handle_USBAsynchXfer+0x114>)
 800459a:	18d2      	adds	r2, r2, r3
 800459c:	230c      	movs	r3, #12
 800459e:	18fb      	adds	r3, r7, r3
 80045a0:	881b      	ldrh	r3, [r3, #0]
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	2181      	movs	r1, #129	; 0x81
 80045a6:	f000 fddb 	bl	8005160 <DCD_EP_Tx>
               CDC_IN_EP,
               (uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],
               USB_Tx_length);
  }  
  
}
 80045aa:	46bd      	mov	sp, r7
 80045ac:	b004      	add	sp, #16
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	20000168 	.word	0x20000168
 80045b4:	20000160 	.word	0x20000160
 80045b8:	2000015c 	.word	0x2000015c
 80045bc:	20000164 	.word	0x20000164
 80045c0:	20000158 	.word	0x20000158
 80045c4:	200006e0 	.word	0x200006e0

080045c8 <USBD_cdc_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_cdc_GetCfgDesc (uint8_t speed, uint16_t *length)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	0002      	movs	r2, r0
 80045d0:	6039      	str	r1, [r7, #0]
 80045d2:	1dfb      	adds	r3, r7, #7
 80045d4:	701a      	strb	r2, [r3, #0]
  *length = sizeof (usbd_cdc_CfgDesc);
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	2243      	movs	r2, #67	; 0x43
 80045da:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)usbd_cdc_CfgDesc;
 80045dc:	4b02      	ldr	r3, [pc, #8]	; (80045e8 <USBD_cdc_GetCfgDesc+0x20>)
}
 80045de:	0018      	movs	r0, r3
 80045e0:	46bd      	mov	sp, r7
 80045e2:	b002      	add	sp, #8
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	46c0      	nop			; (mov r8, r8)
 80045e8:	080076c4 	.word	0x080076c4

080045ec <CTR>:
  * @brief  Correct Transfer interrupt's service
  * @param  None
  * @retval None
  */
void CTR(void)
{
 80045ec:	b590      	push	{r4, r7, lr}
 80045ee:	b087      	sub	sp, #28
 80045f0:	af00      	add	r7, sp, #0
  USB_EP *ep;
  uint16_t count=0;
 80045f2:	2316      	movs	r3, #22
 80045f4:	18fb      	adds	r3, r7, r3
 80045f6:	2200      	movs	r2, #0
 80045f8:	801a      	strh	r2, [r3, #0]
  uint8_t EPindex;
  volatile uint16_t wIstr;
  volatile uint16_t wEPVal = 0;
 80045fa:	1d3b      	adds	r3, r7, #4
 80045fc:	2200      	movs	r2, #0
 80045fe:	801a      	strh	r2, [r3, #0]
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8004600:	e26b      	b.n	8004ada <CTR+0x4ee>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8004602:	1dbb      	adds	r3, r7, #6
 8004604:	881b      	ldrh	r3, [r3, #0]
 8004606:	b29b      	uxth	r3, r3
 8004608:	b2da      	uxtb	r2, r3
 800460a:	2313      	movs	r3, #19
 800460c:	18fb      	adds	r3, r7, r3
 800460e:	210f      	movs	r1, #15
 8004610:	400a      	ands	r2, r1
 8004612:	701a      	strb	r2, [r3, #0]
    
    if (EPindex == 0)
 8004614:	2313      	movs	r3, #19
 8004616:	18fb      	adds	r3, r7, r3
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d000      	beq.n	8004620 <CTR+0x34>
 800461e:	e0dd      	b.n	80047dc <CTR+0x1f0>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & ISTR_DIR) == 0)
 8004620:	1dbb      	adds	r3, r7, #6
 8004622:	881b      	ldrh	r3, [r3, #0]
 8004624:	b29b      	uxth	r3, r3
 8004626:	001a      	movs	r2, r3
 8004628:	2310      	movs	r3, #16
 800462a:	4013      	ands	r3, r2
 800462c:	d11f      	bne.n	800466e <CTR+0x82>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        _ClearEP_CTR_TX(ENDP0);
 800462e:	4bc5      	ldr	r3, [pc, #788]	; (8004944 <CTR+0x358>)
 8004630:	4ac4      	ldr	r2, [pc, #784]	; (8004944 <CTR+0x358>)
 8004632:	6812      	ldr	r2, [r2, #0]
 8004634:	49c4      	ldr	r1, [pc, #784]	; (8004948 <CTR+0x35c>)
 8004636:	400a      	ands	r2, r1
 8004638:	601a      	str	r2, [r3, #0]
        ep = &((&USB_Device_dev)->dev.in_ep[0]);
 800463a:	4bc4      	ldr	r3, [pc, #784]	; (800494c <CTR+0x360>)
 800463c:	60fb      	str	r3, [r7, #12]
        
        ep->xfer_count = GetEPTxCount(ep->num);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	0018      	movs	r0, r3
 8004644:	f001 f9b0 	bl	80059a8 <GetEPTxCount>
 8004648:	0003      	movs	r3, r0
 800464a:	001a      	movs	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	619a      	str	r2, [r3, #24]
        ep->xfer_buff += ep->xfer_count;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	691a      	ldr	r2, [r3, #16]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	18d2      	adds	r2, r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	611a      	str	r2, [r3, #16]
 
        /* TX COMPLETE */
        USBD_DCD_INT_fops->DataInStage(&USB_Device_dev, 0x00);
 800465e:	4bbc      	ldr	r3, [pc, #752]	; (8004950 <CTR+0x364>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	4abb      	ldr	r2, [pc, #748]	; (8004954 <CTR+0x368>)
 8004666:	2100      	movs	r1, #0
 8004668:	0010      	movs	r0, r2
 800466a:	4798      	blx	r3
 800466c:	e235      	b.n	8004ada <CTR+0x4ee>
      {
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &((&USB_Device_dev)->dev.out_ep[0]);
 800466e:	4bba      	ldr	r3, [pc, #744]	; (8004958 <CTR+0x36c>)
 8004670:	60fb      	str	r3, [r7, #12]
        wEPVal = _GetENDPOINT(ENDP0);
 8004672:	4bb4      	ldr	r3, [pc, #720]	; (8004944 <CTR+0x358>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	b29a      	uxth	r2, r3
 8004678:	1d3b      	adds	r3, r7, #4
 800467a:	801a      	strh	r2, [r3, #0]
        
        if ((wEPVal &EP_SETUP) != 0)
 800467c:	1d3b      	adds	r3, r7, #4
 800467e:	881b      	ldrh	r3, [r3, #0]
 8004680:	b29b      	uxth	r3, r3
 8004682:	001a      	movs	r2, r3
 8004684:	2380      	movs	r3, #128	; 0x80
 8004686:	011b      	lsls	r3, r3, #4
 8004688:	4013      	ands	r3, r2
 800468a:	d01e      	beq.n	80046ca <CTR+0xde>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = GetEPRxCount(ep->num);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	0018      	movs	r0, r3
 8004692:	f001 f9a7 	bl	80059e4 <GetEPRxCount>
 8004696:	0003      	movs	r3, r0
 8004698:	001a      	movs	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	619a      	str	r2, [r3, #24]
          PMAToUserBufferCopy(&((&USB_Device_dev)->dev.setup_packet[0]),ep->pmaadress , ep->xfer_count);       
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8899      	ldrh	r1, [r3, #4]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	4bac      	ldr	r3, [pc, #688]	; (800495c <CTR+0x370>)
 80046aa:	0018      	movs	r0, r3
 80046ac:	f001 fb96 	bl	8005ddc <PMAToUserBufferCopy>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          _ClearEP_CTR_RX(ENDP0); 
 80046b0:	4ba4      	ldr	r3, [pc, #656]	; (8004944 <CTR+0x358>)
 80046b2:	4aa4      	ldr	r2, [pc, #656]	; (8004944 <CTR+0x358>)
 80046b4:	6812      	ldr	r2, [r2, #0]
 80046b6:	49aa      	ldr	r1, [pc, #680]	; (8004960 <CTR+0x374>)
 80046b8:	400a      	ands	r2, r1
 80046ba:	601a      	str	r2, [r3, #0]
          
          /* Process SETUP Packet*/
          USBD_DCD_INT_fops->SetupStage(&USB_Device_dev);
 80046bc:	4ba4      	ldr	r3, [pc, #656]	; (8004950 <CTR+0x364>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	4aa4      	ldr	r2, [pc, #656]	; (8004954 <CTR+0x368>)
 80046c4:	0010      	movs	r0, r2
 80046c6:	4798      	blx	r3
 80046c8:	e207      	b.n	8004ada <CTR+0x4ee>
        }
        
        else if ((wEPVal & EP_CTR_RX) != 0)
 80046ca:	1d3b      	adds	r3, r7, #4
 80046cc:	881b      	ldrh	r3, [r3, #0]
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	b21b      	sxth	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	db00      	blt.n	80046d8 <CTR+0xec>
 80046d6:	e200      	b.n	8004ada <CTR+0x4ee>
        {
          _ClearEP_CTR_RX(ENDP0);
 80046d8:	4b9a      	ldr	r3, [pc, #616]	; (8004944 <CTR+0x358>)
 80046da:	4a9a      	ldr	r2, [pc, #616]	; (8004944 <CTR+0x358>)
 80046dc:	6812      	ldr	r2, [r2, #0]
 80046de:	49a0      	ldr	r1, [pc, #640]	; (8004960 <CTR+0x374>)
 80046e0:	400a      	ands	r2, r1
 80046e2:	601a      	str	r2, [r3, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = GetEPRxCount(ep->num);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	0018      	movs	r0, r3
 80046ea:	f001 f97b 	bl	80059e4 <GetEPRxCount>
 80046ee:	0003      	movs	r3, r0
 80046f0:	001a      	movs	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	619a      	str	r2, [r3, #24]
          
          if (ep->xfer_count != 0)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d010      	beq.n	8004720 <CTR+0x134>
          {
            PMAToUserBufferCopy(ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6918      	ldr	r0, [r3, #16]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	8899      	ldrh	r1, [r3, #4]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	b29b      	uxth	r3, r3
 800470c:	001a      	movs	r2, r3
 800470e:	f001 fb65 	bl	8005ddc <PMAToUserBufferCopy>
            ep->xfer_buff+=ep->xfer_count;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	691a      	ldr	r2, [r3, #16]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	18d2      	adds	r2, r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	611a      	str	r2, [r3, #16]
          }
          
          /* Process Control Data OUT Packet*/
          USBD_DCD_INT_fops->DataOutStage(&USB_Device_dev, 0x00);
 8004720:	4b8b      	ldr	r3, [pc, #556]	; (8004950 <CTR+0x364>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a8b      	ldr	r2, [pc, #556]	; (8004954 <CTR+0x368>)
 8004728:	2100      	movs	r1, #0
 800472a:	0010      	movs	r0, r2
 800472c:	4798      	blx	r3
          
          _SetEPRxCount(ENDP0, ep->maxpacket);
 800472e:	4b8d      	ldr	r3, [pc, #564]	; (8004964 <CTR+0x378>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	041b      	lsls	r3, r3, #16
 8004734:	0c1b      	lsrs	r3, r3, #16
 8004736:	4a8c      	ldr	r2, [pc, #560]	; (8004968 <CTR+0x37c>)
 8004738:	4694      	mov	ip, r2
 800473a:	4463      	add	r3, ip
 800473c:	60bb      	str	r3, [r7, #8]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	2b3e      	cmp	r3, #62	; 0x3e
 8004744:	d91d      	bls.n	8004782 <CTR+0x196>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	095a      	lsrs	r2, r3, #5
 800474c:	2314      	movs	r3, #20
 800474e:	18fb      	adds	r3, r7, r3
 8004750:	801a      	strh	r2, [r3, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	221f      	movs	r2, #31
 8004758:	4013      	ands	r3, r2
 800475a:	d106      	bne.n	800476a <CTR+0x17e>
 800475c:	2314      	movs	r3, #20
 800475e:	18fb      	adds	r3, r7, r3
 8004760:	881a      	ldrh	r2, [r3, #0]
 8004762:	2314      	movs	r3, #20
 8004764:	18fb      	adds	r3, r7, r3
 8004766:	3a01      	subs	r2, #1
 8004768:	801a      	strh	r2, [r3, #0]
 800476a:	2314      	movs	r3, #20
 800476c:	18fb      	adds	r3, r7, r3
 800476e:	881b      	ldrh	r3, [r3, #0]
 8004770:	029b      	lsls	r3, r3, #10
 8004772:	b21b      	sxth	r3, r3
 8004774:	4a7d      	ldr	r2, [pc, #500]	; (800496c <CTR+0x380>)
 8004776:	4313      	orrs	r3, r2
 8004778:	b21b      	sxth	r3, r3
 800477a:	b29a      	uxth	r2, r3
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	801a      	strh	r2, [r3, #0]
 8004780:	e018      	b.n	80047b4 <CTR+0x1c8>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	085a      	lsrs	r2, r3, #1
 8004788:	2314      	movs	r3, #20
 800478a:	18fb      	adds	r3, r7, r3
 800478c:	801a      	strh	r2, [r3, #0]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	2201      	movs	r2, #1
 8004794:	4013      	ands	r3, r2
 8004796:	d006      	beq.n	80047a6 <CTR+0x1ba>
 8004798:	2314      	movs	r3, #20
 800479a:	18fb      	adds	r3, r7, r3
 800479c:	881a      	ldrh	r2, [r3, #0]
 800479e:	2314      	movs	r3, #20
 80047a0:	18fb      	adds	r3, r7, r3
 80047a2:	3201      	adds	r2, #1
 80047a4:	801a      	strh	r2, [r3, #0]
 80047a6:	2314      	movs	r3, #20
 80047a8:	18fb      	adds	r3, r7, r3
 80047aa:	881b      	ldrh	r3, [r3, #0]
 80047ac:	029b      	lsls	r3, r3, #10
 80047ae:	b29a      	uxth	r2, r3
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	801a      	strh	r2, [r3, #0]
          _SetEPRxStatus(ENDP0,EP_RX_VALID);
 80047b4:	4b63      	ldr	r3, [pc, #396]	; (8004944 <CTR+0x358>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	4a6d      	ldr	r2, [pc, #436]	; (8004970 <CTR+0x384>)
 80047bc:	4013      	ands	r3, r2
 80047be:	b29c      	uxth	r4, r3
 80047c0:	2380      	movs	r3, #128	; 0x80
 80047c2:	015b      	lsls	r3, r3, #5
 80047c4:	4063      	eors	r3, r4
 80047c6:	b29c      	uxth	r4, r3
 80047c8:	2380      	movs	r3, #128	; 0x80
 80047ca:	019b      	lsls	r3, r3, #6
 80047cc:	4063      	eors	r3, r4
 80047ce:	b29c      	uxth	r4, r3
 80047d0:	4b5c      	ldr	r3, [pc, #368]	; (8004944 <CTR+0x358>)
 80047d2:	4a68      	ldr	r2, [pc, #416]	; (8004974 <CTR+0x388>)
 80047d4:	4322      	orrs	r2, r4
 80047d6:	b292      	uxth	r2, r2
 80047d8:	601a      	str	r2, [r3, #0]
 80047da:	e17e      	b.n	8004ada <CTR+0x4ee>
    {
      
      /* Decode and service non control endpoints interrupt  */
      
      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 80047dc:	2313      	movs	r3, #19
 80047de:	18fb      	adds	r3, r7, r3
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	4a57      	ldr	r2, [pc, #348]	; (8004944 <CTR+0x358>)
 80047e6:	4694      	mov	ip, r2
 80047e8:	4463      	add	r3, ip
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	1d3b      	adds	r3, r7, #4
 80047f0:	801a      	strh	r2, [r3, #0]
      if ((wEPVal & EP_CTR_RX) != 0)
 80047f2:	1d3b      	adds	r3, r7, #4
 80047f4:	881b      	ldrh	r3, [r3, #0]
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	b21b      	sxth	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	db00      	blt.n	8004800 <CTR+0x214>
 80047fe:	e0c5      	b.n	800498c <CTR+0x3a0>
      {  
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 8004800:	2313      	movs	r3, #19
 8004802:	18fb      	adds	r3, r7, r3
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4a4e      	ldr	r2, [pc, #312]	; (8004944 <CTR+0x358>)
 800480a:	4694      	mov	ip, r2
 800480c:	4463      	add	r3, ip
 800480e:	2213      	movs	r2, #19
 8004810:	18ba      	adds	r2, r7, r2
 8004812:	7812      	ldrb	r2, [r2, #0]
 8004814:	0092      	lsls	r2, r2, #2
 8004816:	494b      	ldr	r1, [pc, #300]	; (8004944 <CTR+0x358>)
 8004818:	468c      	mov	ip, r1
 800481a:	4462      	add	r2, ip
 800481c:	6812      	ldr	r2, [r2, #0]
 800481e:	4950      	ldr	r1, [pc, #320]	; (8004960 <CTR+0x374>)
 8004820:	400a      	ands	r2, r1
 8004822:	601a      	str	r2, [r3, #0]
        ep = &((&USB_Device_dev)->dev.out_ep[EPindex]);
 8004824:	2313      	movs	r3, #19
 8004826:	18fb      	adds	r3, r7, r3
 8004828:	781a      	ldrb	r2, [r3, #0]
 800482a:	0013      	movs	r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	189b      	adds	r3, r3, r2
 8004830:	00db      	lsls	r3, r3, #3
 8004832:	33b8      	adds	r3, #184	; 0xb8
 8004834:	001a      	movs	r2, r3
 8004836:	4b47      	ldr	r3, [pc, #284]	; (8004954 <CTR+0x368>)
 8004838:	18d3      	adds	r3, r2, r3
 800483a:	60fb      	str	r3, [r7, #12]
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	7a9b      	ldrb	r3, [r3, #10]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d118      	bne.n	8004876 <CTR+0x28a>
        {
          count = GetEPRxCount(ep->num);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	2216      	movs	r2, #22
 800484a:	18bc      	adds	r4, r7, r2
 800484c:	0018      	movs	r0, r3
 800484e:	f001 f8c9 	bl	80059e4 <GetEPRxCount>
 8004852:	0003      	movs	r3, r0
 8004854:	8023      	strh	r3, [r4, #0]
          if (count != 0)
 8004856:	2316      	movs	r3, #22
 8004858:	18fb      	adds	r3, r7, r3
 800485a:	881b      	ldrh	r3, [r3, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d04c      	beq.n	80048fa <CTR+0x30e>
          {
            PMAToUserBufferCopy(ep->xfer_buff, ep->pmaadress, count);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6918      	ldr	r0, [r3, #16]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8899      	ldrh	r1, [r3, #4]
 8004868:	2316      	movs	r3, #22
 800486a:	18fb      	adds	r3, r7, r3
 800486c:	881b      	ldrh	r3, [r3, #0]
 800486e:	001a      	movs	r2, r3
 8004870:	f001 fab4 	bl	8005ddc <PMAToUserBufferCopy>
 8004874:	e041      	b.n	80048fa <CTR+0x30e>
          }
        }
        else
        {
          if (GetENDPOINT(ep->num) & EP_DTOG_RX)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	0018      	movs	r0, r3
 800487c:	f000 fe4c 	bl	8005518 <GetENDPOINT>
 8004880:	0003      	movs	r3, r0
 8004882:	001a      	movs	r2, r3
 8004884:	2380      	movs	r3, #128	; 0x80
 8004886:	01db      	lsls	r3, r3, #7
 8004888:	4013      	ands	r3, r2
 800488a:	d018      	beq.n	80048be <CTR+0x2d2>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = GetEPDblBuf0Count(ep->num);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	2216      	movs	r2, #22
 8004892:	18bc      	adds	r4, r7, r2
 8004894:	0018      	movs	r0, r3
 8004896:	f001 f9db 	bl	8005c50 <GetEPDblBuf0Count>
 800489a:	0003      	movs	r3, r0
 800489c:	8023      	strh	r3, [r4, #0]
            if (count != 0)
 800489e:	2316      	movs	r3, #22
 80048a0:	18fb      	adds	r3, r7, r3
 80048a2:	881b      	ldrh	r3, [r3, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d022      	beq.n	80048ee <CTR+0x302>
            {
              PMAToUserBufferCopy(ep->xfer_buff, ep->pmaaddr0, count);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6918      	ldr	r0, [r3, #16]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	88d9      	ldrh	r1, [r3, #6]
 80048b0:	2316      	movs	r3, #22
 80048b2:	18fb      	adds	r3, r7, r3
 80048b4:	881b      	ldrh	r3, [r3, #0]
 80048b6:	001a      	movs	r2, r3
 80048b8:	f001 fa90 	bl	8005ddc <PMAToUserBufferCopy>
 80048bc:	e017      	b.n	80048ee <CTR+0x302>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = GetEPDblBuf1Count(ep->num);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	2216      	movs	r2, #22
 80048c4:	18bc      	adds	r4, r7, r2
 80048c6:	0018      	movs	r0, r3
 80048c8:	f001 f9e0 	bl	8005c8c <GetEPDblBuf1Count>
 80048cc:	0003      	movs	r3, r0
 80048ce:	8023      	strh	r3, [r4, #0]
            if (count != 0)
 80048d0:	2316      	movs	r3, #22
 80048d2:	18fb      	adds	r3, r7, r3
 80048d4:	881b      	ldrh	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d009      	beq.n	80048ee <CTR+0x302>
            {
              PMAToUserBufferCopy(ep->xfer_buff, ep->pmaaddr1, count);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6918      	ldr	r0, [r3, #16]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	8919      	ldrh	r1, [r3, #8]
 80048e2:	2316      	movs	r3, #22
 80048e4:	18fb      	adds	r3, r7, r3
 80048e6:	881b      	ldrh	r3, [r3, #0]
 80048e8:	001a      	movs	r2, r3
 80048ea:	f001 fa77 	bl	8005ddc <PMAToUserBufferCopy>
            }
          }
          FreeUserBuffer(ep->num, EP_DBUF_OUT);  
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	2100      	movs	r1, #0
 80048f4:	0018      	movs	r0, r3
 80048f6:	f001 f9e7 	bl	8005cc8 <FreeUserBuffer>
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	699a      	ldr	r2, [r3, #24]
 80048fe:	2316      	movs	r3, #22
 8004900:	18fb      	adds	r3, r7, r3
 8004902:	881b      	ldrh	r3, [r3, #0]
 8004904:	18d2      	adds	r2, r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	619a      	str	r2, [r3, #24]
        ep->xfer_buff+=count;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	691a      	ldr	r2, [r3, #16]
 800490e:	2316      	movs	r3, #22
 8004910:	18fb      	adds	r3, r7, r3
 8004912:	881b      	ldrh	r3, [r3, #0]
 8004914:	18d2      	adds	r2, r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	611a      	str	r2, [r3, #16]
       
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d006      	beq.n	8004930 <CTR+0x344>
 8004922:	2316      	movs	r3, #22
 8004924:	18fb      	adds	r3, r7, r3
 8004926:	881a      	ldrh	r2, [r3, #0]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	429a      	cmp	r2, r3
 800492e:	d223      	bcs.n	8004978 <CTR+0x38c>
        {
          /* RX COMPLETE */
          USBD_DCD_INT_fops->DataOutStage(&USB_Device_dev, ep->num);
 8004930:	4b07      	ldr	r3, [pc, #28]	; (8004950 <CTR+0x364>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	7811      	ldrb	r1, [r2, #0]
 800493a:	4a06      	ldr	r2, [pc, #24]	; (8004954 <CTR+0x368>)
 800493c:	0010      	movs	r0, r2
 800493e:	4798      	blx	r3
 8004940:	e024      	b.n	800498c <CTR+0x3a0>
 8004942:	46c0      	nop			; (mov r8, r8)
 8004944:	40005c00 	.word	0x40005c00
 8004948:	00008f0f 	.word	0x00008f0f
 800494c:	20000298 	.word	0x20000298
 8004950:	20000090 	.word	0x20000090
 8004954:	20000280 	.word	0x20000280
 8004958:	20000338 	.word	0x20000338
 800495c:	20000290 	.word	0x20000290
 8004960:	00000f8f 	.word	0x00000f8f
 8004964:	40005c50 	.word	0x40005c50
 8004968:	40006006 	.word	0x40006006
 800496c:	ffff8000 	.word	0xffff8000
 8004970:	ffffbf8f 	.word	0xffffbf8f
 8004974:	ffff8080 	.word	0xffff8080
        }
        else
        {
          DCD_EP_PrepareRx (&USB_Device_dev,ep->num, ep->xfer_buff, ep->xfer_len);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	7819      	ldrb	r1, [r3, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	691a      	ldr	r2, [r3, #16]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	695b      	ldr	r3, [r3, #20]
 8004984:	b29b      	uxth	r3, r3
 8004986:	485c      	ldr	r0, [pc, #368]	; (8004af8 <CTR+0x50c>)
 8004988:	f000 fb88 	bl	800509c <DCD_EP_PrepareRx>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & EP_CTR_TX) != 0)
 800498c:	1d3b      	adds	r3, r7, #4
 800498e:	881b      	ldrh	r3, [r3, #0]
 8004990:	b29b      	uxth	r3, r3
 8004992:	001a      	movs	r2, r3
 8004994:	2380      	movs	r3, #128	; 0x80
 8004996:	4013      	ands	r3, r2
 8004998:	d100      	bne.n	800499c <CTR+0x3b0>
 800499a:	e09e      	b.n	8004ada <CTR+0x4ee>
      {
        ep = &((&USB_Device_dev)->dev.in_ep[EPindex]);
 800499c:	2313      	movs	r3, #19
 800499e:	18fb      	adds	r3, r7, r3
 80049a0:	781a      	ldrb	r2, [r3, #0]
 80049a2:	0013      	movs	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	189b      	adds	r3, r3, r2
 80049a8:	00db      	lsls	r3, r3, #3
 80049aa:	3318      	adds	r3, #24
 80049ac:	001a      	movs	r2, r3
 80049ae:	4b52      	ldr	r3, [pc, #328]	; (8004af8 <CTR+0x50c>)
 80049b0:	18d3      	adds	r3, r2, r3
 80049b2:	60fb      	str	r3, [r7, #12]
        
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 80049b4:	2313      	movs	r3, #19
 80049b6:	18fb      	adds	r3, r7, r3
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4a4f      	ldr	r2, [pc, #316]	; (8004afc <CTR+0x510>)
 80049be:	4694      	mov	ip, r2
 80049c0:	4463      	add	r3, ip
 80049c2:	2213      	movs	r2, #19
 80049c4:	18ba      	adds	r2, r7, r2
 80049c6:	7812      	ldrb	r2, [r2, #0]
 80049c8:	0092      	lsls	r2, r2, #2
 80049ca:	494c      	ldr	r1, [pc, #304]	; (8004afc <CTR+0x510>)
 80049cc:	468c      	mov	ip, r1
 80049ce:	4462      	add	r2, ip
 80049d0:	6812      	ldr	r2, [r2, #0]
 80049d2:	494b      	ldr	r1, [pc, #300]	; (8004b00 <CTR+0x514>)
 80049d4:	400a      	ands	r2, r1
 80049d6:	601a      	str	r2, [r3, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	7a9b      	ldrb	r3, [r3, #10]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d117      	bne.n	8004a10 <CTR+0x424>
        {
          ep->xfer_count = GetEPTxCount(ep->num);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	0018      	movs	r0, r3
 80049e6:	f000 ffdf 	bl	80059a8 <GetEPTxCount>
 80049ea:	0003      	movs	r3, r0
 80049ec:	001a      	movs	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	619a      	str	r2, [r3, #24]
          if (ep->xfer_count != 0)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d049      	beq.n	8004a8e <CTR+0x4a2>
          {
            UserToPMABufferCopy(ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6918      	ldr	r0, [r3, #16]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8899      	ldrh	r1, [r3, #4]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	001a      	movs	r2, r3
 8004a0a:	f001 f9a1 	bl	8005d50 <UserToPMABufferCopy>
 8004a0e:	e03e      	b.n	8004a8e <CTR+0x4a2>
          }
        }
        else
        {
          if (GetENDPOINT(ep->num) & EP_DTOG_TX)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	0018      	movs	r0, r3
 8004a16:	f000 fd7f 	bl	8005518 <GetENDPOINT>
 8004a1a:	0003      	movs	r3, r0
 8004a1c:	001a      	movs	r2, r3
 8004a1e:	2340      	movs	r3, #64	; 0x40
 8004a20:	4013      	ands	r3, r2
 8004a22:	d017      	beq.n	8004a54 <CTR+0x468>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = GetEPDblBuf0Count(ep->num);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	0018      	movs	r0, r3
 8004a2a:	f001 f911 	bl	8005c50 <GetEPDblBuf0Count>
 8004a2e:	0003      	movs	r3, r0
 8004a30:	001a      	movs	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	619a      	str	r2, [r3, #24]
            if (ep->xfer_count != 0)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d021      	beq.n	8004a82 <CTR+0x496>
            {
              UserToPMABufferCopy(ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6918      	ldr	r0, [r3, #16]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	88d9      	ldrh	r1, [r3, #6]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	001a      	movs	r2, r3
 8004a4e:	f001 f97f 	bl	8005d50 <UserToPMABufferCopy>
 8004a52:	e016      	b.n	8004a82 <CTR+0x496>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = GetEPDblBuf1Count(ep->num);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	0018      	movs	r0, r3
 8004a5a:	f001 f917 	bl	8005c8c <GetEPDblBuf1Count>
 8004a5e:	0003      	movs	r3, r0
 8004a60:	001a      	movs	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	619a      	str	r2, [r3, #24]
            if (ep->xfer_count != 0)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d009      	beq.n	8004a82 <CTR+0x496>
            {
              UserToPMABufferCopy(ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6918      	ldr	r0, [r3, #16]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	8919      	ldrh	r1, [r3, #8]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	001a      	movs	r2, r3
 8004a7e:	f001 f967 	bl	8005d50 <UserToPMABufferCopy>
            }
          }
          FreeUserBuffer(ep->num, EP_DBUF_IN);  
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	2101      	movs	r1, #1
 8004a88:	0018      	movs	r0, r3
 8004a8a:	f001 f91d 	bl	8005cc8 <FreeUserBuffer>
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count =GetEPTxCount(ep->num);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	0018      	movs	r0, r3
 8004a94:	f000 ff88 	bl	80059a8 <GetEPTxCount>
 8004a98:	0003      	movs	r3, r0
 8004a9a:	001a      	movs	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	619a      	str	r2, [r3, #24]
        ep->xfer_buff+=ep->xfer_count;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	691a      	ldr	r2, [r3, #16]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	18d2      	adds	r2, r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	611a      	str	r2, [r3, #16]
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d108      	bne.n	8004ac8 <CTR+0x4dc>
        {
          /* TX COMPLETE */
          USBD_DCD_INT_fops->DataInStage(&USB_Device_dev, ep->num);
 8004ab6:	4b13      	ldr	r3, [pc, #76]	; (8004b04 <CTR+0x518>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	7811      	ldrb	r1, [r2, #0]
 8004ac0:	4a0d      	ldr	r2, [pc, #52]	; (8004af8 <CTR+0x50c>)
 8004ac2:	0010      	movs	r0, r2
 8004ac4:	4798      	blx	r3
 8004ac6:	e008      	b.n	8004ada <CTR+0x4ee>
        }
        else
        {
          DCD_EP_Tx  (&USB_Device_dev,ep->num, ep->xfer_buff, ep->xfer_len);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	7819      	ldrb	r1, [r3, #0]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	691a      	ldr	r2, [r3, #16]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	4808      	ldr	r0, [pc, #32]	; (8004af8 <CTR+0x50c>)
 8004ad6:	f000 fb43 	bl	8005160 <DCD_EP_Tx>
  uint16_t count=0;
  uint8_t EPindex;
  volatile uint16_t wIstr;
  volatile uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8004ada:	4b0b      	ldr	r3, [pc, #44]	; (8004b08 <CTR+0x51c>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	1dbb      	adds	r3, r7, #6
 8004ae2:	1c11      	adds	r1, r2, #0
 8004ae4:	8019      	strh	r1, [r3, #0]
 8004ae6:	b213      	sxth	r3, r2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	da00      	bge.n	8004aee <CTR+0x502>
 8004aec:	e589      	b.n	8004602 <CTR+0x16>
      } /* if((wEPVal & EP_CTR_TX) != 0) */
      
    }/* if(EPindex == 0) else */
    
  }/* while(...) */
}
 8004aee:	46c0      	nop			; (mov r8, r8)
 8004af0:	46bd      	mov	sp, r7
 8004af2:	b007      	add	sp, #28
 8004af4:	bd90      	pop	{r4, r7, pc}
 8004af6:	46c0      	nop			; (mov r8, r8)
 8004af8:	20000280 	.word	0x20000280
 8004afc:	40005c00 	.word	0x40005c00
 8004b00:	00008f0f 	.word	0x00008f0f
 8004b04:	20000090 	.word	0x20000090
 8004b08:	40005c44 	.word	0x40005c44

08004b0c <USB_Istr>:
  * @brief ISTR events interrupt service routine
  * @param  None
  * @retval None
  */
void USB_Istr(void)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
  volatile uint16_t wIstr = 0;
 8004b12:	1dbb      	adds	r3, r7, #6
 8004b14:	2200      	movs	r2, #0
 8004b16:	801a      	strh	r2, [r3, #0]
  
  wIstr = _GetISTR();
 8004b18:	4b47      	ldr	r3, [pc, #284]	; (8004c38 <USB_Istr+0x12c>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	b29a      	uxth	r2, r3
 8004b1e:	1dbb      	adds	r3, r7, #6
 8004b20:	801a      	strh	r2, [r3, #0]
  
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 8004b22:	1dbb      	adds	r3, r7, #6
 8004b24:	881b      	ldrh	r3, [r3, #0]
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	001a      	movs	r2, r3
 8004b2a:	4b44      	ldr	r3, [pc, #272]	; (8004c3c <USB_Istr+0x130>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	401a      	ands	r2, r3
 8004b30:	2380      	movs	r3, #128	; 0x80
 8004b32:	021b      	lsls	r3, r3, #8
 8004b34:	4013      	ands	r3, r2
 8004b36:	d001      	beq.n	8004b3c <USB_Istr+0x30>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    CTR();
 8004b38:	f7ff fd58 	bl	80045ec <CTR>
  }
#endif  
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 8004b3c:	1dbb      	adds	r3, r7, #6
 8004b3e:	881b      	ldrh	r3, [r3, #0]
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	001a      	movs	r2, r3
 8004b44:	4b3d      	ldr	r3, [pc, #244]	; (8004c3c <USB_Istr+0x130>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	401a      	ands	r2, r3
 8004b4a:	2380      	movs	r3, #128	; 0x80
 8004b4c:	00db      	lsls	r3, r3, #3
 8004b4e:	4013      	ands	r3, r2
 8004b50:	d00d      	beq.n	8004b6e <USB_Istr+0x62>
  {
    _SetISTR((uint16_t)CLR_RESET);
 8004b52:	4b39      	ldr	r3, [pc, #228]	; (8004c38 <USB_Istr+0x12c>)
 8004b54:	4a3a      	ldr	r2, [pc, #232]	; (8004c40 <USB_Istr+0x134>)
 8004b56:	601a      	str	r2, [r3, #0]
    USBD_DCD_INT_fops->Reset(&USB_Device_dev);
 8004b58:	4b3a      	ldr	r3, [pc, #232]	; (8004c44 <USB_Istr+0x138>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	4a3a      	ldr	r2, [pc, #232]	; (8004c48 <USB_Istr+0x13c>)
 8004b60:	0010      	movs	r0, r2
 8004b62:	4798      	blx	r3
    DCD_EP_SetAddress(&USB_Device_dev, 0);
 8004b64:	4b38      	ldr	r3, [pc, #224]	; (8004c48 <USB_Istr+0x13c>)
 8004b66:	2100      	movs	r1, #0
 8004b68:	0018      	movs	r0, r3
 8004b6a:	f000 fc49 	bl	8005400 <DCD_EP_SetAddress>
    _SetISTR((uint16_t)CLR_DOVR);
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_ERR)
  if (wIstr & ISTR_ERR & wInterrupt_Mask)
 8004b6e:	1dbb      	adds	r3, r7, #6
 8004b70:	881b      	ldrh	r3, [r3, #0]
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	001a      	movs	r2, r3
 8004b76:	4b31      	ldr	r3, [pc, #196]	; (8004c3c <USB_Istr+0x130>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	401a      	ands	r2, r3
 8004b7c:	2380      	movs	r3, #128	; 0x80
 8004b7e:	019b      	lsls	r3, r3, #6
 8004b80:	4013      	ands	r3, r2
 8004b82:	d002      	beq.n	8004b8a <USB_Istr+0x7e>
  {
    _SetISTR((uint16_t)CLR_ERR);
 8004b84:	4b2c      	ldr	r3, [pc, #176]	; (8004c38 <USB_Istr+0x12c>)
 8004b86:	4a31      	ldr	r2, [pc, #196]	; (8004c4c <USB_Istr+0x140>)
 8004b88:	601a      	str	r2, [r3, #0]
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
 8004b8a:	1dbb      	adds	r3, r7, #6
 8004b8c:	881b      	ldrh	r3, [r3, #0]
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	001a      	movs	r2, r3
 8004b92:	4b2a      	ldr	r3, [pc, #168]	; (8004c3c <USB_Istr+0x130>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	401a      	ands	r2, r3
 8004b98:	2380      	movs	r3, #128	; 0x80
 8004b9a:	015b      	lsls	r3, r3, #5
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	d00b      	beq.n	8004bb8 <USB_Istr+0xac>
  {
    _SetISTR((uint16_t)CLR_WKUP);
 8004ba0:	4b25      	ldr	r3, [pc, #148]	; (8004c38 <USB_Istr+0x12c>)
 8004ba2:	4a2b      	ldr	r2, [pc, #172]	; (8004c50 <USB_Istr+0x144>)
 8004ba4:	601a      	str	r2, [r3, #0]
    
    USBD_DCD_INT_fops->Resume(&USB_Device_dev);
 8004ba6:	4b27      	ldr	r3, [pc, #156]	; (8004c44 <USB_Istr+0x138>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	4a26      	ldr	r2, [pc, #152]	; (8004c48 <USB_Istr+0x13c>)
 8004bae:	0010      	movs	r0, r2
 8004bb0:	4798      	blx	r3
     
    /* Handle Resume state machine */  
    Resume(RESUME_EXTERNAL);
 8004bb2:	2000      	movs	r0, #0
 8004bb4:	f7fb fc02 	bl	80003bc <Resume>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_SUSP)
  if (wIstr & ISTR_SUSP & wInterrupt_Mask)
 8004bb8:	1dbb      	adds	r3, r7, #6
 8004bba:	881b      	ldrh	r3, [r3, #0]
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	001a      	movs	r2, r3
 8004bc0:	4b1e      	ldr	r3, [pc, #120]	; (8004c3c <USB_Istr+0x130>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	401a      	ands	r2, r3
 8004bc6:	2380      	movs	r3, #128	; 0x80
 8004bc8:	011b      	lsls	r3, r3, #4
 8004bca:	4013      	ands	r3, r2
 8004bcc:	d00a      	beq.n	8004be4 <USB_Istr+0xd8>
  {
   /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    _SetISTR((uint16_t)CLR_SUSP);
 8004bce:	4b1a      	ldr	r3, [pc, #104]	; (8004c38 <USB_Istr+0x12c>)
 8004bd0:	4a20      	ldr	r2, [pc, #128]	; (8004c54 <USB_Istr+0x148>)
 8004bd2:	601a      	str	r2, [r3, #0]
    
    /* process library core layer suspend routine*/
    USBD_DCD_INT_fops->Suspend(&USB_Device_dev); 
 8004bd4:	4b1b      	ldr	r3, [pc, #108]	; (8004c44 <USB_Istr+0x138>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	4a1b      	ldr	r2, [pc, #108]	; (8004c48 <USB_Istr+0x13c>)
 8004bdc:	0010      	movs	r0, r2
 8004bde:	4798      	blx	r3
    
    /* enter macrocell in suspend and system in low power mode when 
       USB_DEVICE_LOW_PWR_MGMT_SUPPORT defined in usb_conf.h */
    Suspend();   
 8004be0:	f7fb fbaa 	bl	8000338 <Suspend>
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8004be4:	1dbb      	adds	r3, r7, #6
 8004be6:	881b      	ldrh	r3, [r3, #0]
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	001a      	movs	r2, r3
 8004bec:	4b13      	ldr	r3, [pc, #76]	; (8004c3c <USB_Istr+0x130>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	401a      	ands	r2, r3
 8004bf2:	2380      	movs	r3, #128	; 0x80
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	d008      	beq.n	8004c0c <USB_Istr+0x100>
  {
    _SetISTR((uint16_t)CLR_SOF);
 8004bfa:	4b0f      	ldr	r3, [pc, #60]	; (8004c38 <USB_Istr+0x12c>)
 8004bfc:	4a16      	ldr	r2, [pc, #88]	; (8004c58 <USB_Istr+0x14c>)
 8004bfe:	601a      	str	r2, [r3, #0]
    USBD_DCD_INT_fops->SOF(&USB_Device_dev);
 8004c00:	4b10      	ldr	r3, [pc, #64]	; (8004c44 <USB_Istr+0x138>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	4a10      	ldr	r2, [pc, #64]	; (8004c48 <USB_Istr+0x13c>)
 8004c08:	0010      	movs	r0, r2
 8004c0a:	4798      	blx	r3
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
 8004c0c:	1dbb      	adds	r3, r7, #6
 8004c0e:	881b      	ldrh	r3, [r3, #0]
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	001a      	movs	r2, r3
 8004c14:	4b09      	ldr	r3, [pc, #36]	; (8004c3c <USB_Istr+0x130>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	401a      	ands	r2, r3
 8004c1a:	2380      	movs	r3, #128	; 0x80
 8004c1c:	005b      	lsls	r3, r3, #1
 8004c1e:	4013      	ands	r3, r2
 8004c20:	d005      	beq.n	8004c2e <USB_Istr+0x122>
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 8004c22:	4b05      	ldr	r3, [pc, #20]	; (8004c38 <USB_Istr+0x12c>)
 8004c24:	4a0d      	ldr	r2, [pc, #52]	; (8004c5c <USB_Istr+0x150>)
 8004c26:	601a      	str	r2, [r3, #0]
    
    /* resume handling timing is made with ESOFs */
    Resume(RESUME_ESOF); /* request without change of the machine state */
 8004c28:	2007      	movs	r0, #7
 8004c2a:	f7fb fbc7 	bl	80003bc <Resume>
    STM32F072 can wakeup system from STOP mode in less than 50 us */
    Suspend();
  }
#endif
#endif
} /* USB_Istr */
 8004c2e:	46c0      	nop			; (mov r8, r8)
 8004c30:	46bd      	mov	sp, r7
 8004c32:	b002      	add	sp, #8
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	46c0      	nop			; (mov r8, r8)
 8004c38:	40005c44 	.word	0x40005c44
 8004c3c:	20000174 	.word	0x20000174
 8004c40:	0000fbff 	.word	0x0000fbff
 8004c44:	20000090 	.word	0x20000090
 8004c48:	20000280 	.word	0x20000280
 8004c4c:	0000dfff 	.word	0x0000dfff
 8004c50:	0000efff 	.word	0x0000efff
 8004c54:	0000f7ff 	.word	0x0000f7ff
 8004c58:	0000fdff 	.word	0x0000fdff
 8004c5c:	0000feff 	.word	0x0000feff

08004c60 <DCD_Init>:
  * @brief Device Initialization
  * @param  pdev: device instance
  * @retval : None
  */
void DCD_Init(USB_CORE_HANDLE *pdev)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  /*Device is in Default State*/
  pdev->dev.device_status = USB_DEFAULT;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	709a      	strb	r2, [r3, #2]
  pdev->dev.device_address = 0;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	711a      	strb	r2, [r3, #4]
  pdev->dev.DevRemoteWakeup = 0;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	609a      	str	r2, [r3, #8]
  
  pdev->dev.speed = USB_SPEED_FULL; /*kept for API compatibility reason*/
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	60da      	str	r2, [r3, #12]
  
  /*CNTR_FRES = 1*/
  SetCNTR(CNTR_FRES);
 8004c80:	2001      	movs	r0, #1
 8004c82:	f000 fc15 	bl	80054b0 <SetCNTR>
  
  /*CNTR_FRES = 0*/
  SetCNTR(0);
 8004c86:	2000      	movs	r0, #0
 8004c88:	f000 fc12 	bl	80054b0 <SetCNTR>
  
  /*Clear pending interrupts*/
  SetISTR(0);
 8004c8c:	2000      	movs	r0, #0
 8004c8e:	f000 fc1f 	bl	80054d0 <SetISTR>
  
  /*Set Btable Address*/
  SetBTABLE(BTABLE_ADDRESS);
 8004c92:	2000      	movs	r0, #0
 8004c94:	f000 fc2c 	bl	80054f0 <SetBTABLE>
  
  /*set wInterrupt_Mask global variable*/
  wInterrupt_Mask = CNTR_CTRM  | CNTR_WKUPM | CNTR_SUSPM | CNTR_ERRM  | CNTR_SOFM \
 8004c98:	4b06      	ldr	r3, [pc, #24]	; (8004cb4 <DCD_Init+0x54>)
 8004c9a:	22bf      	movs	r2, #191	; 0xbf
 8004c9c:	0212      	lsls	r2, r2, #8
 8004c9e:	601a      	str	r2, [r3, #0]
  /* Enable LPM support and enable ACK answer to LPM request*/
  _SetLPMCSR(LPMCSR_LMPEN | LPMCSR_LPMACK);
#endif
 
  /*Set interrupt mask*/
  SetCNTR(wInterrupt_Mask); 
 8004ca0:	4b04      	ldr	r3, [pc, #16]	; (8004cb4 <DCD_Init+0x54>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	0018      	movs	r0, r3
 8004ca8:	f000 fc02 	bl	80054b0 <SetCNTR>
}
 8004cac:	46c0      	nop			; (mov r8, r8)
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	b002      	add	sp, #8
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	20000174 	.word	0x20000174

08004cb8 <DCD_PMA_Config>:
uint32_t DCD_PMA_Config(USB_CORE_HANDLE *pdev , 
                        uint16_t ep_addr,
                        uint16_t ep_kind,
                        uint32_t pmaadress)

{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b086      	sub	sp, #24
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	0008      	movs	r0, r1
 8004cc2:	0011      	movs	r1, r2
 8004cc4:	607b      	str	r3, [r7, #4]
 8004cc6:	230a      	movs	r3, #10
 8004cc8:	18fb      	adds	r3, r7, r3
 8004cca:	1c02      	adds	r2, r0, #0
 8004ccc:	801a      	strh	r2, [r3, #0]
 8004cce:	2308      	movs	r3, #8
 8004cd0:	18fb      	adds	r3, r7, r3
 8004cd2:	1c0a      	adds	r2, r1, #0
 8004cd4:	801a      	strh	r2, [r3, #0]
  USB_EP *ep;
  /* initialize ep structure*/
  if ((ep_addr & 0x80) == 0x80)
 8004cd6:	230a      	movs	r3, #10
 8004cd8:	18fb      	adds	r3, r7, r3
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	2280      	movs	r2, #128	; 0x80
 8004cde:	4013      	ands	r3, r2
 8004ce0:	d00d      	beq.n	8004cfe <DCD_PMA_Config+0x46>
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8004ce2:	230a      	movs	r3, #10
 8004ce4:	18fb      	adds	r3, r7, r3
 8004ce6:	881b      	ldrh	r3, [r3, #0]
 8004ce8:	227f      	movs	r2, #127	; 0x7f
 8004cea:	401a      	ands	r2, r3
 8004cec:	0013      	movs	r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	189b      	adds	r3, r3, r2
 8004cf2:	00db      	lsls	r3, r3, #3
 8004cf4:	3318      	adds	r3, #24
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	18d3      	adds	r3, r2, r3
 8004cfa:	617b      	str	r3, [r7, #20]
 8004cfc:	e00c      	b.n	8004d18 <DCD_PMA_Config+0x60>
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 8004cfe:	230a      	movs	r3, #10
 8004d00:	18fb      	adds	r3, r7, r3
 8004d02:	881b      	ldrh	r3, [r3, #0]
 8004d04:	227f      	movs	r2, #127	; 0x7f
 8004d06:	401a      	ands	r2, r3
 8004d08:	0013      	movs	r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	189b      	adds	r3, r3, r2
 8004d0e:	00db      	lsls	r3, r3, #3
 8004d10:	33b8      	adds	r3, #184	; 0xb8
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	18d3      	adds	r3, r2, r3
 8004d16:	617b      	str	r3, [r7, #20]
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == USB_SNG_BUF)
 8004d18:	2308      	movs	r3, #8
 8004d1a:	18fb      	adds	r3, r7, r3
 8004d1c:	881b      	ldrh	r3, [r3, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d107      	bne.n	8004d32 <DCD_PMA_Config+0x7a>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0;
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	2200      	movs	r2, #0
 8004d26:	729a      	strb	r2, [r3, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	809a      	strh	r2, [r3, #4]
 8004d30:	e00b      	b.n	8004d4a <DCD_PMA_Config+0x92>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1;
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	2201      	movs	r2, #1
 8004d36:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	0c1b      	lsrs	r3, r3, #16
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	811a      	strh	r2, [r3, #8]
  }
  
  return USB_OK; 
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	0018      	movs	r0, r3
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	b006      	add	sp, #24
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <DCD_EP_Open>:
  */
uint32_t DCD_EP_Open(USB_CORE_HANDLE *pdev , 
                     uint16_t ep_addr,
                     uint16_t ep_mps,
                     uint8_t ep_type)
{
 8004d54:	b590      	push	{r4, r7, lr}
 8004d56:	b087      	sub	sp, #28
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	000c      	movs	r4, r1
 8004d5e:	0010      	movs	r0, r2
 8004d60:	0019      	movs	r1, r3
 8004d62:	230a      	movs	r3, #10
 8004d64:	18fb      	adds	r3, r7, r3
 8004d66:	1c22      	adds	r2, r4, #0
 8004d68:	801a      	strh	r2, [r3, #0]
 8004d6a:	2308      	movs	r3, #8
 8004d6c:	18fb      	adds	r3, r7, r3
 8004d6e:	1c02      	adds	r2, r0, #0
 8004d70:	801a      	strh	r2, [r3, #0]
 8004d72:	1dfb      	adds	r3, r7, #7
 8004d74:	1c0a      	adds	r2, r1, #0
 8004d76:	701a      	strb	r2, [r3, #0]
  
  USB_EP *ep;
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80) == 0x80)
 8004d78:	230a      	movs	r3, #10
 8004d7a:	18fb      	adds	r3, r7, r3
 8004d7c:	881b      	ldrh	r3, [r3, #0]
 8004d7e:	2280      	movs	r2, #128	; 0x80
 8004d80:	4013      	ands	r3, r2
 8004d82:	d010      	beq.n	8004da6 <DCD_EP_Open+0x52>
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8004d84:	230a      	movs	r3, #10
 8004d86:	18fb      	adds	r3, r7, r3
 8004d88:	881b      	ldrh	r3, [r3, #0]
 8004d8a:	227f      	movs	r2, #127	; 0x7f
 8004d8c:	401a      	ands	r2, r3
 8004d8e:	0013      	movs	r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	189b      	adds	r3, r3, r2
 8004d94:	00db      	lsls	r3, r3, #3
 8004d96:	3318      	adds	r3, #24
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	18d3      	adds	r3, r2, r3
 8004d9c:	617b      	str	r3, [r7, #20]
    ep->is_in = 1;
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	2201      	movs	r2, #1
 8004da2:	705a      	strb	r2, [r3, #1]
 8004da4:	e00f      	b.n	8004dc6 <DCD_EP_Open+0x72>
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 8004da6:	230a      	movs	r3, #10
 8004da8:	18fb      	adds	r3, r7, r3
 8004daa:	881b      	ldrh	r3, [r3, #0]
 8004dac:	227f      	movs	r2, #127	; 0x7f
 8004dae:	401a      	ands	r2, r3
 8004db0:	0013      	movs	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	189b      	adds	r3, r3, r2
 8004db6:	00db      	lsls	r3, r3, #3
 8004db8:	33b8      	adds	r3, #184	; 0xb8
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	18d3      	adds	r3, r2, r3
 8004dbe:	617b      	str	r3, [r7, #20]
    ep->is_in = 0;
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	705a      	strb	r2, [r3, #1]
  }
  
  ep->maxpacket = ep_mps;
 8004dc6:	2308      	movs	r3, #8
 8004dc8:	18fb      	adds	r3, r7, r3
 8004dca:	881a      	ldrh	r2, [r3, #0]
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	1dfa      	adds	r2, r7, #7
 8004dd4:	7812      	ldrb	r2, [r2, #0]
 8004dd6:	70da      	strb	r2, [r3, #3]
  ep->num   = ep_addr & 0x7F;
 8004dd8:	230a      	movs	r3, #10
 8004dda:	18fb      	adds	r3, r7, r3
 8004ddc:	881b      	ldrh	r3, [r3, #0]
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	227f      	movs	r2, #127	; 0x7f
 8004de2:	4013      	ands	r3, r2
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	701a      	strb	r2, [r3, #0]
  
  if (ep->num == 0)
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d108      	bne.n	8004e04 <DCD_EP_Open+0xb0>
  {
    /* Initialize the control transfer variables*/ 
    ep->ctl_data_len =0;
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	2200      	movs	r2, #0
 8004df6:	625a      	str	r2, [r3, #36]	; 0x24
    ep->rem_data_len = 0;
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	61da      	str	r2, [r3, #28]
    ep->total_data_len = 0;
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	2200      	movs	r2, #0
 8004e02:	621a      	str	r2, [r3, #32]
  }
  
  /* Initialize the transaction level variables */
  ep->xfer_buff = 0;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	2200      	movs	r2, #0
 8004e08:	611a      	str	r2, [r3, #16]
  ep->xfer_len = 0;
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0;
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	2200      	movs	r2, #0
 8004e14:	619a      	str	r2, [r3, #24]
  ep->is_stall = 0;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	709a      	strb	r2, [r3, #2]
  
  /* initialize HW */
  switch (ep->type)
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	78db      	ldrb	r3, [r3, #3]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d021      	beq.n	8004e68 <DCD_EP_Open+0x114>
 8004e24:	dc02      	bgt.n	8004e2c <DCD_EP_Open+0xd8>
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d005      	beq.n	8004e36 <DCD_EP_Open+0xe2>
 8004e2a:	e026      	b.n	8004e7a <DCD_EP_Open+0x126>
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d00b      	beq.n	8004e48 <DCD_EP_Open+0xf4>
 8004e30:	2b03      	cmp	r3, #3
 8004e32:	d010      	beq.n	8004e56 <DCD_EP_Open+0x102>
 8004e34:	e021      	b.n	8004e7a <DCD_EP_Open+0x126>
  {
  case USB_EP_CONTROL:
    SetEPType(ep->num, EP_CONTROL);
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	781a      	ldrb	r2, [r3, #0]
 8004e3a:	2380      	movs	r3, #128	; 0x80
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	0019      	movs	r1, r3
 8004e40:	0010      	movs	r0, r2
 8004e42:	f000 fb7d 	bl	8005540 <SetEPType>
    break;
 8004e46:	e018      	b.n	8004e7a <DCD_EP_Open+0x126>
  case USB_EP_BULK:
    SetEPType(ep->num, EP_BULK);
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	0018      	movs	r0, r3
 8004e50:	f000 fb76 	bl	8005540 <SetEPType>
    break;
 8004e54:	e011      	b.n	8004e7a <DCD_EP_Open+0x126>
  case USB_EP_INT:
    SetEPType(ep->num, EP_INTERRUPT);
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	781a      	ldrb	r2, [r3, #0]
 8004e5a:	23c0      	movs	r3, #192	; 0xc0
 8004e5c:	00db      	lsls	r3, r3, #3
 8004e5e:	0019      	movs	r1, r3
 8004e60:	0010      	movs	r0, r2
 8004e62:	f000 fb6d 	bl	8005540 <SetEPType>
    break;
 8004e66:	e008      	b.n	8004e7a <DCD_EP_Open+0x126>
  case USB_EP_ISOC:
    SetEPType(ep->num, EP_ISOCHRONOUS);
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	781a      	ldrb	r2, [r3, #0]
 8004e6c:	2380      	movs	r3, #128	; 0x80
 8004e6e:	00db      	lsls	r3, r3, #3
 8004e70:	0019      	movs	r1, r3
 8004e72:	0010      	movs	r0, r2
 8004e74:	f000 fb64 	bl	8005540 <SetEPType>
    break;
 8004e78:	46c0      	nop			; (mov r8, r8)
  } 
  
  if (ep->doublebuffer == 0) 
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	7a9b      	ldrb	r3, [r3, #10]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d136      	bne.n	8004ef0 <DCD_EP_Open+0x19c>
  {
    if (ep->is_in)
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	785b      	ldrb	r3, [r3, #1]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d013      	beq.n	8004eb2 <DCD_EP_Open+0x15e>
    {
      /*Set the endpoint Transmit buffer address */
      SetEPTxAddr(ep->num, ep->pmaadress);
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	781a      	ldrb	r2, [r3, #0]
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	889b      	ldrh	r3, [r3, #4]
 8004e92:	0019      	movs	r1, r3
 8004e94:	0010      	movs	r0, r2
 8004e96:	f000 fcc5 	bl	8005824 <SetEPTxAddr>
      ClearDTOG_TX(ep->num);
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	0018      	movs	r0, r3
 8004ea0:	f000 fc92 	bl	80057c8 <ClearDTOG_TX>
      /* Configure NAK status for the Endpoint*/
      SetEPTxStatus(ep->num, EP_TX_NAK); 
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	2120      	movs	r1, #32
 8004eaa:	0018      	movs	r0, r3
 8004eac:	f000 fb72 	bl	8005594 <SetEPTxStatus>
 8004eb0:	e069      	b.n	8004f86 <DCD_EP_Open+0x232>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      SetEPRxAddr(ep->num, ep->pmaadress);
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	781a      	ldrb	r2, [r3, #0]
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	889b      	ldrh	r3, [r3, #4]
 8004eba:	0019      	movs	r1, r3
 8004ebc:	0010      	movs	r0, r2
 8004ebe:	f000 fcd5 	bl	800586c <SetEPRxAddr>
      /*Set the endpoint Receive buffer counter*/
      SetEPRxCount(ep->num, ep->maxpacket);
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	781a      	ldrb	r2, [r3, #0]
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	0019      	movs	r1, r3
 8004ece:	0010      	movs	r0, r2
 8004ed0:	f000 fd10 	bl	80058f4 <SetEPRxCount>
      ClearDTOG_RX(ep->num);
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	0018      	movs	r0, r3
 8004eda:	f000 fc45 	bl	8005768 <ClearDTOG_RX>
      /* Configure VALID status for the Endpoint*/
      SetEPRxStatus(ep->num, EP_RX_VALID);
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	781a      	ldrb	r2, [r3, #0]
 8004ee2:	23c0      	movs	r3, #192	; 0xc0
 8004ee4:	019b      	lsls	r3, r3, #6
 8004ee6:	0019      	movs	r1, r3
 8004ee8:	0010      	movs	r0, r2
 8004eea:	f000 fb8f 	bl	800560c <SetEPRxStatus>
 8004eee:	e04a      	b.n	8004f86 <DCD_EP_Open+0x232>
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    SetEPDoubleBuff(ep->num);
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	0018      	movs	r0, r3
 8004ef6:	f000 fbc9 	bl	800568c <SetEPDoubleBuff>
    /*Set buffer address for double buffered mode*/
    SetEPDblBuffAddr(ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	7818      	ldrb	r0, [r3, #0]
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	88d9      	ldrh	r1, [r3, #6]
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	891b      	ldrh	r3, [r3, #8]
 8004f06:	001a      	movs	r2, r3
 8004f08:	f000 fd8a 	bl	8005a20 <SetEPDblBuffAddr>
    
    if (ep->is_in==0)
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	785b      	ldrb	r3, [r3, #1]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d11d      	bne.n	8004f50 <DCD_EP_Open+0x1fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      ClearDTOG_RX(ep->num);
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	0018      	movs	r0, r3
 8004f1a:	f000 fc25 	bl	8005768 <ClearDTOG_RX>
      ClearDTOG_TX(ep->num);
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	0018      	movs	r0, r3
 8004f24:	f000 fc50 	bl	80057c8 <ClearDTOG_TX>
      
      /* Reset value of the data toggle bits for the endpoint out*/
      ToggleDTOG_TX(ep->num);
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	0018      	movs	r0, r3
 8004f2e:	f000 fbf7 	bl	8005720 <ToggleDTOG_TX>
      
      SetEPRxStatus(ep->num, EP_RX_VALID);
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	781a      	ldrb	r2, [r3, #0]
 8004f36:	23c0      	movs	r3, #192	; 0xc0
 8004f38:	019b      	lsls	r3, r3, #6
 8004f3a:	0019      	movs	r1, r3
 8004f3c:	0010      	movs	r0, r2
 8004f3e:	f000 fb65 	bl	800560c <SetEPRxStatus>
      SetEPTxStatus(ep->num, EP_TX_DIS);
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	2100      	movs	r1, #0
 8004f48:	0018      	movs	r0, r3
 8004f4a:	f000 fb23 	bl	8005594 <SetEPTxStatus>
 8004f4e:	e01a      	b.n	8004f86 <DCD_EP_Open+0x232>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      ClearDTOG_RX(ep->num);
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	0018      	movs	r0, r3
 8004f56:	f000 fc07 	bl	8005768 <ClearDTOG_RX>
      ClearDTOG_TX(ep->num);
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	0018      	movs	r0, r3
 8004f60:	f000 fc32 	bl	80057c8 <ClearDTOG_TX>
      ToggleDTOG_RX(ep->num);
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	0018      	movs	r0, r3
 8004f6a:	f000 fbb5 	bl	80056d8 <ToggleDTOG_RX>
      /* Configure DISABLE status for the Endpoint*/
      SetEPTxStatus(ep->num, EP_TX_DIS);
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	2100      	movs	r1, #0
 8004f74:	0018      	movs	r0, r3
 8004f76:	f000 fb0d 	bl	8005594 <SetEPTxStatus>
      SetEPRxStatus(ep->num, EP_RX_DIS);
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	2100      	movs	r1, #0
 8004f80:	0018      	movs	r0, r3
 8004f82:	f000 fb43 	bl	800560c <SetEPRxStatus>
    }
  } 
  return USB_OK; 
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	0018      	movs	r0, r3
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	b007      	add	sp, #28
 8004f8e:	bd90      	pop	{r4, r7, pc}

08004f90 <DCD_EP_Close>:
  * @param  pdev: device instance
  * @param  ep_addr: endpoint address
  * @retval : status
  */
uint32_t DCD_EP_Close(USB_CORE_HANDLE *pdev , uint8_t  ep_addr)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	000a      	movs	r2, r1
 8004f9a:	1cfb      	adds	r3, r7, #3
 8004f9c:	701a      	strb	r2, [r3, #0]
  USB_EP *ep;
  
  if ((ep_addr&0x80) == 0x80)
 8004f9e:	1cfb      	adds	r3, r7, #3
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	b25b      	sxtb	r3, r3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	da0c      	bge.n	8004fc2 <DCD_EP_Close+0x32>
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8004fa8:	1cfb      	adds	r3, r7, #3
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	227f      	movs	r2, #127	; 0x7f
 8004fae:	401a      	ands	r2, r3
 8004fb0:	0013      	movs	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	189b      	adds	r3, r3, r2
 8004fb6:	00db      	lsls	r3, r3, #3
 8004fb8:	3318      	adds	r3, #24
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	18d3      	adds	r3, r2, r3
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	e00b      	b.n	8004fda <DCD_EP_Close+0x4a>
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 8004fc2:	1cfb      	adds	r3, r7, #3
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	227f      	movs	r2, #127	; 0x7f
 8004fc8:	401a      	ands	r2, r3
 8004fca:	0013      	movs	r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	189b      	adds	r3, r3, r2
 8004fd0:	00db      	lsls	r3, r3, #3
 8004fd2:	33b8      	adds	r3, #184	; 0xb8
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	18d3      	adds	r3, r2, r3
 8004fd8:	60fb      	str	r3, [r7, #12]
  }
  
  if (ep->doublebuffer == 0) 
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	7a9b      	ldrb	r3, [r3, #10]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d11b      	bne.n	800501a <DCD_EP_Close+0x8a>
  {
    if (ep->is_in)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	785b      	ldrb	r3, [r3, #1]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00b      	beq.n	8005002 <DCD_EP_Close+0x72>
    {
      ClearDTOG_TX(ep->num);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	0018      	movs	r0, r3
 8004ff0:	f000 fbea 	bl	80057c8 <ClearDTOG_TX>
      /* Configure DISABLE status for the Endpoint*/
      SetEPTxStatus(ep->num, EP_TX_DIS); 
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	0018      	movs	r0, r3
 8004ffc:	f000 faca 	bl	8005594 <SetEPTxStatus>
 8005000:	e046      	b.n	8005090 <DCD_EP_Close+0x100>
    }
    else
    {
      ClearDTOG_RX(ep->num);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	0018      	movs	r0, r3
 8005008:	f000 fbae 	bl	8005768 <ClearDTOG_RX>
      /* Configure DISABLE status for the Endpoint*/
      SetEPRxStatus(ep->num, EP_RX_DIS);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	2100      	movs	r1, #0
 8005012:	0018      	movs	r0, r3
 8005014:	f000 fafa 	bl	800560c <SetEPRxStatus>
 8005018:	e03a      	b.n	8005090 <DCD_EP_Close+0x100>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	785b      	ldrb	r3, [r3, #1]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d11b      	bne.n	800505a <DCD_EP_Close+0xca>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      ClearDTOG_RX(ep->num);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	0018      	movs	r0, r3
 8005028:	f000 fb9e 	bl	8005768 <ClearDTOG_RX>
      ClearDTOG_TX(ep->num);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	0018      	movs	r0, r3
 8005032:	f000 fbc9 	bl	80057c8 <ClearDTOG_TX>
      
      /* Reset value of the data toggle bits for the endpoint out*/
      ToggleDTOG_TX(ep->num);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	0018      	movs	r0, r3
 800503c:	f000 fb70 	bl	8005720 <ToggleDTOG_TX>
      
      SetEPRxStatus(ep->num, EP_RX_DIS);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	2100      	movs	r1, #0
 8005046:	0018      	movs	r0, r3
 8005048:	f000 fae0 	bl	800560c <SetEPRxStatus>
      SetEPTxStatus(ep->num, EP_TX_DIS);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	2100      	movs	r1, #0
 8005052:	0018      	movs	r0, r3
 8005054:	f000 fa9e 	bl	8005594 <SetEPTxStatus>
 8005058:	e01a      	b.n	8005090 <DCD_EP_Close+0x100>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      ClearDTOG_RX(ep->num);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	0018      	movs	r0, r3
 8005060:	f000 fb82 	bl	8005768 <ClearDTOG_RX>
      ClearDTOG_TX(ep->num);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	0018      	movs	r0, r3
 800506a:	f000 fbad 	bl	80057c8 <ClearDTOG_TX>
      ToggleDTOG_RX(ep->num);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	0018      	movs	r0, r3
 8005074:	f000 fb30 	bl	80056d8 <ToggleDTOG_RX>
      /* Configure DISABLE status for the Endpoint*/
      SetEPTxStatus(ep->num, EP_TX_DIS);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	2100      	movs	r1, #0
 800507e:	0018      	movs	r0, r3
 8005080:	f000 fa88 	bl	8005594 <SetEPTxStatus>
      SetEPRxStatus(ep->num, EP_RX_DIS);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	2100      	movs	r1, #0
 800508a:	0018      	movs	r0, r3
 800508c:	f000 fabe 	bl	800560c <SetEPRxStatus>
    }
  } 
  return USB_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	0018      	movs	r0, r3
 8005094:	46bd      	mov	sp, r7
 8005096:	b004      	add	sp, #16
 8005098:	bd80      	pop	{r7, pc}
 800509a:	46c0      	nop			; (mov r8, r8)

0800509c <DCD_EP_PrepareRx>:
  */
uint32_t DCD_EP_PrepareRx( USB_CORE_HANDLE *pdev,
                          uint8_t   ep_addr,
                          uint8_t *pbuf,                        
                          uint16_t  buf_len)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b086      	sub	sp, #24
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	0008      	movs	r0, r1
 80050a6:	607a      	str	r2, [r7, #4]
 80050a8:	0019      	movs	r1, r3
 80050aa:	230b      	movs	r3, #11
 80050ac:	18fb      	adds	r3, r7, r3
 80050ae:	1c02      	adds	r2, r0, #0
 80050b0:	701a      	strb	r2, [r3, #0]
 80050b2:	2308      	movs	r3, #8
 80050b4:	18fb      	adds	r3, r7, r3
 80050b6:	1c0a      	adds	r2, r1, #0
 80050b8:	801a      	strh	r2, [r3, #0]
  volatile uint32_t len = 0;
 80050ba:	2300      	movs	r3, #0
 80050bc:	613b      	str	r3, [r7, #16]
  USB_EP *ep;
  
  ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 80050be:	230b      	movs	r3, #11
 80050c0:	18fb      	adds	r3, r7, r3
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	227f      	movs	r2, #127	; 0x7f
 80050c6:	401a      	ands	r2, r3
 80050c8:	0013      	movs	r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	189b      	adds	r3, r3, r2
 80050ce:	00db      	lsls	r3, r3, #3
 80050d0:	33b8      	adds	r3, #184	; 0xb8
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	18d3      	adds	r3, r2, r3
 80050d6:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pbuf;  
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = buf_len;
 80050de:	2308      	movs	r3, #8
 80050e0:	18fb      	adds	r3, r7, r3
 80050e2:	881a      	ldrh	r2, [r3, #0]
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0; 
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	2200      	movs	r2, #0
 80050ec:	619a      	str	r2, [r3, #24]
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	695a      	ldr	r2, [r3, #20]
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d909      	bls.n	800510e <DCD_EP_PrepareRx+0x72>
  {
    len=ep->maxpacket;
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	613b      	str	r3, [r7, #16]
    ep->xfer_len-=len; 
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	1a9a      	subs	r2, r3, r2
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	615a      	str	r2, [r3, #20]
 800510c:	e005      	b.n	800511a <DCD_EP_PrepareRx+0x7e>
  }
  else
  {
    len=ep->xfer_len;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	613b      	str	r3, [r7, #16]
    ep->xfer_len =0;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	2200      	movs	r2, #0
 8005118:	615a      	str	r2, [r3, #20]
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	7a9b      	ldrb	r3, [r3, #10]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d108      	bne.n	8005134 <DCD_EP_PrepareRx+0x98>
  {
    /*Set RX buffer count*/
    SetEPRxCount(ep->num, len);
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	b292      	uxth	r2, r2
 800512a:	0011      	movs	r1, r2
 800512c:	0018      	movs	r0, r3
 800512e:	f000 fbe1 	bl	80058f4 <SetEPRxCount>
 8005132:	e008      	b.n	8005146 <DCD_EP_PrepareRx+0xaa>
  }
  else
  {
    /*Set the Double buffer counter*/
    SetEPDblBuffCount(ep->num, ep->is_in, len);
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	7818      	ldrb	r0, [r3, #0]
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	785b      	ldrb	r3, [r3, #1]
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	b292      	uxth	r2, r2
 8005140:	0019      	movs	r1, r3
 8005142:	f000 fcab 	bl	8005a9c <SetEPDblBuffCount>
  } 
  
  SetEPRxStatus(ep->num, EP_RX_VALID);
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	781a      	ldrb	r2, [r3, #0]
 800514a:	23c0      	movs	r3, #192	; 0xc0
 800514c:	019b      	lsls	r3, r3, #6
 800514e:	0019      	movs	r1, r3
 8005150:	0010      	movs	r0, r2
 8005152:	f000 fa5b 	bl	800560c <SetEPRxStatus>
  
  return USB_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	0018      	movs	r0, r3
 800515a:	46bd      	mov	sp, r7
 800515c:	b006      	add	sp, #24
 800515e:	bd80      	pop	{r7, pc}

08005160 <DCD_EP_Tx>:
  */
uint32_t  DCD_EP_Tx ( USB_CORE_HANDLE *pdev,
                     uint8_t   ep_addr,
                     uint8_t   *pbuf,
                     uint32_t   buf_len)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b088      	sub	sp, #32
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	607a      	str	r2, [r7, #4]
 800516a:	603b      	str	r3, [r7, #0]
 800516c:	230b      	movs	r3, #11
 800516e:	18fb      	adds	r3, r7, r3
 8005170:	1c0a      	adds	r2, r1, #0
 8005172:	701a      	strb	r2, [r3, #0]
  volatile uint32_t len = 0;
 8005174:	2300      	movs	r3, #0
 8005176:	617b      	str	r3, [r7, #20]
  USB_EP *ep;
  
  ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8005178:	230b      	movs	r3, #11
 800517a:	18fb      	adds	r3, r7, r3
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	227f      	movs	r2, #127	; 0x7f
 8005180:	401a      	ands	r2, r3
 8005182:	0013      	movs	r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	189b      	adds	r3, r3, r2
 8005188:	00db      	lsls	r3, r3, #3
 800518a:	3318      	adds	r3, #24
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	18d3      	adds	r3, r2, r3
 8005190:	61bb      	str	r3, [r7, #24]
  
  /*setup and start the Xfer */
  ep->num = ep_addr & 0x7F; 
 8005192:	230b      	movs	r3, #11
 8005194:	18fb      	adds	r3, r7, r3
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	227f      	movs	r2, #127	; 0x7f
 800519a:	4013      	ands	r3, r2
 800519c:	b2da      	uxtb	r2, r3
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	701a      	strb	r2, [r3, #0]
  ep->xfer_buff = pbuf;  
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = buf_len;
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	683a      	ldr	r2, [r7, #0]
 80051ac:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0; 
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	2200      	movs	r2, #0
 80051b2:	619a      	str	r2, [r3, #24]
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	695a      	ldr	r2, [r3, #20]
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d909      	bls.n	80051d4 <DCD_EP_Tx+0x74>
  {
    len=ep->maxpacket;
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	617b      	str	r3, [r7, #20]
    ep->xfer_len-=len; 
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	695b      	ldr	r3, [r3, #20]
 80051cc:	1a9a      	subs	r2, r3, r2
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	615a      	str	r2, [r3, #20]
 80051d2:	e005      	b.n	80051e0 <DCD_EP_Tx+0x80>
  }
  else
  {
    len=ep->xfer_len;
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	695b      	ldr	r3, [r3, #20]
 80051d8:	617b      	str	r3, [r7, #20]
    ep->xfer_len =0;
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	2200      	movs	r2, #0
 80051de:	615a      	str	r2, [r3, #20]
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0) 
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	7a9b      	ldrb	r3, [r3, #10]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d111      	bne.n	800520c <DCD_EP_Tx+0xac>
  {
    UserToPMABufferCopy(ep->xfer_buff, ep->pmaadress, len);
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	6918      	ldr	r0, [r3, #16]
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	889b      	ldrh	r3, [r3, #4]
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	b292      	uxth	r2, r2
 80051f4:	0019      	movs	r1, r3
 80051f6:	f000 fdab 	bl	8005d50 <UserToPMABufferCopy>
    SetEPTxCount(ep->num, len);
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	b292      	uxth	r2, r2
 8005202:	0011      	movs	r1, r2
 8005204:	0018      	movs	r0, r3
 8005206:	f000 fb55 	bl	80058b4 <SetEPTxCount>
 800520a:	e033      	b.n	8005274 <DCD_EP_Tx+0x114>
  }
  else
  {
    uint16_t pmabuffer=0;
 800520c:	231e      	movs	r3, #30
 800520e:	18fb      	adds	r3, r7, r3
 8005210:	2200      	movs	r2, #0
 8005212:	801a      	strh	r2, [r3, #0]
    /*Set the Double buffer counter*/
    SetEPDblBuffCount(ep->num, ep->is_in, len);
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	7818      	ldrb	r0, [r3, #0]
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	785b      	ldrb	r3, [r3, #1]
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	b292      	uxth	r2, r2
 8005220:	0019      	movs	r1, r3
 8005222:	f000 fc3b 	bl	8005a9c <SetEPDblBuffCount>
    
    /*Write the data to the USB endpoint*/
    if (GetENDPOINT(ep->num)&EP_DTOG_TX)
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	0018      	movs	r0, r3
 800522c:	f000 f974 	bl	8005518 <GetENDPOINT>
 8005230:	0003      	movs	r3, r0
 8005232:	001a      	movs	r2, r3
 8005234:	2340      	movs	r3, #64	; 0x40
 8005236:	4013      	ands	r3, r2
 8005238:	d005      	beq.n	8005246 <DCD_EP_Tx+0xe6>
    {
      pmabuffer = ep->pmaaddr1;
 800523a:	231e      	movs	r3, #30
 800523c:	18fb      	adds	r3, r7, r3
 800523e:	69ba      	ldr	r2, [r7, #24]
 8005240:	8912      	ldrh	r2, [r2, #8]
 8005242:	801a      	strh	r2, [r3, #0]
 8005244:	e004      	b.n	8005250 <DCD_EP_Tx+0xf0>
    }
    else
    {
      pmabuffer = ep->pmaaddr0;
 8005246:	231e      	movs	r3, #30
 8005248:	18fb      	adds	r3, r7, r3
 800524a:	69ba      	ldr	r2, [r7, #24]
 800524c:	88d2      	ldrh	r2, [r2, #6]
 800524e:	801a      	strh	r2, [r3, #0]
    }
    UserToPMABufferCopy(ep->xfer_buff, pmabuffer, len);
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	6918      	ldr	r0, [r3, #16]
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	b29a      	uxth	r2, r3
 8005258:	231e      	movs	r3, #30
 800525a:	18fb      	adds	r3, r7, r3
 800525c:	881b      	ldrh	r3, [r3, #0]
 800525e:	0019      	movs	r1, r3
 8005260:	f000 fd76 	bl	8005d50 <UserToPMABufferCopy>
    FreeUserBuffer(ep->num, ep->is_in);
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	781a      	ldrb	r2, [r3, #0]
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	785b      	ldrb	r3, [r3, #1]
 800526c:	0019      	movs	r1, r3
 800526e:	0010      	movs	r0, r2
 8005270:	f000 fd2a 	bl	8005cc8 <FreeUserBuffer>
  }
  
  SetEPTxStatus(ep->num, EP_TX_VALID);
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	2130      	movs	r1, #48	; 0x30
 800527a:	0018      	movs	r0, r3
 800527c:	f000 f98a 	bl	8005594 <SetEPTxStatus>
  
  return USB_OK; 
 8005280:	2300      	movs	r3, #0
}
 8005282:	0018      	movs	r0, r3
 8005284:	46bd      	mov	sp, r7
 8005286:	b008      	add	sp, #32
 8005288:	bd80      	pop	{r7, pc}
 800528a:	46c0      	nop			; (mov r8, r8)

0800528c <DCD_EP_Stall>:
  * @param  pdev: device instance
  * @param  epnum: endpoint address
  * @retval : status
  */
uint32_t  DCD_EP_Stall (USB_CORE_HANDLE *pdev, uint8_t   epnum)
{
 800528c:	b590      	push	{r4, r7, lr}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	000a      	movs	r2, r1
 8005296:	1cfb      	adds	r3, r7, #3
 8005298:	701a      	strb	r2, [r3, #0]
  USB_EP *ep;
  if ((0x80 & epnum) == 0x80)
 800529a:	1cfb      	adds	r3, r7, #3
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	b25b      	sxtb	r3, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	da0c      	bge.n	80052be <DCD_EP_Stall+0x32>
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];    
 80052a4:	1cfb      	adds	r3, r7, #3
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	227f      	movs	r2, #127	; 0x7f
 80052aa:	401a      	ands	r2, r3
 80052ac:	0013      	movs	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	189b      	adds	r3, r3, r2
 80052b2:	00db      	lsls	r3, r3, #3
 80052b4:	3318      	adds	r3, #24
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	18d3      	adds	r3, r2, r3
 80052ba:	60fb      	str	r3, [r7, #12]
 80052bc:	e009      	b.n	80052d2 <DCD_EP_Stall+0x46>
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 80052be:	1cfb      	adds	r3, r7, #3
 80052c0:	781a      	ldrb	r2, [r3, #0]
 80052c2:	0013      	movs	r3, r2
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	189b      	adds	r3, r3, r2
 80052c8:	00db      	lsls	r3, r3, #3
 80052ca:	33b8      	adds	r3, #184	; 0xb8
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	18d3      	adds	r3, r2, r3
 80052d0:	60fb      	str	r3, [r7, #12]
  }
  
  if (ep->num ==0)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d121      	bne.n	800531e <DCD_EP_Stall+0x92>
  {
    /* This macro sets STALL status for RX & TX*/ 
    _SetEPRxTxStatus(ep->num,EP_RX_STALL,EP_TX_STALL); 
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	4a1e      	ldr	r2, [pc, #120]	; (800535c <DCD_EP_Stall+0xd0>)
 80052e2:	4694      	mov	ip, r2
 80052e4:	4463      	add	r3, ip
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a1d      	ldr	r2, [pc, #116]	; (8005360 <DCD_EP_Stall+0xd4>)
 80052ea:	4013      	ands	r3, r2
 80052ec:	001c      	movs	r4, r3
 80052ee:	2380      	movs	r3, #128	; 0x80
 80052f0:	015b      	lsls	r3, r3, #5
 80052f2:	4063      	eors	r3, r4
 80052f4:	001c      	movs	r4, r3
 80052f6:	2310      	movs	r3, #16
 80052f8:	4063      	eors	r3, r4
 80052fa:	001c      	movs	r4, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	4a16      	ldr	r2, [pc, #88]	; (800535c <DCD_EP_Stall+0xd0>)
 8005304:	4694      	mov	ip, r2
 8005306:	4463      	add	r3, ip
 8005308:	0022      	movs	r2, r4
 800530a:	0412      	lsls	r2, r2, #16
 800530c:	0c12      	lsrs	r2, r2, #16
 800530e:	4915      	ldr	r1, [pc, #84]	; (8005364 <DCD_EP_Stall+0xd8>)
 8005310:	430a      	orrs	r2, r1
 8005312:	601a      	str	r2, [r3, #0]
    /*Endpoint is stalled */
    ep->is_stall = 1;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2201      	movs	r2, #1
 8005318:	709a      	strb	r2, [r3, #2]
    return USB_OK;
 800531a:	2300      	movs	r3, #0
 800531c:	e019      	b.n	8005352 <DCD_EP_Stall+0xc6>
  }
  if (ep->is_in)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	785b      	ldrb	r3, [r3, #1]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d009      	beq.n	800533a <DCD_EP_Stall+0xae>
  {  
    /* IN endpoint */
    ep->is_stall = 1;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2201      	movs	r2, #1
 800532a:	709a      	strb	r2, [r3, #2]
    /* IN Endpoint stalled */
   SetEPTxStatus(ep->num , EP_TX_STALL); 
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	2110      	movs	r1, #16
 8005332:	0018      	movs	r0, r3
 8005334:	f000 f92e 	bl	8005594 <SetEPTxStatus>
 8005338:	e00a      	b.n	8005350 <DCD_EP_Stall+0xc4>
  }
  else
  { 
    ep->is_stall = 1;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2201      	movs	r2, #1
 800533e:	709a      	strb	r2, [r3, #2]
    /* OUT Endpoint stalled */
    SetEPRxStatus(ep->num , EP_RX_STALL);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	781a      	ldrb	r2, [r3, #0]
 8005344:	2380      	movs	r3, #128	; 0x80
 8005346:	015b      	lsls	r3, r3, #5
 8005348:	0019      	movs	r1, r3
 800534a:	0010      	movs	r0, r2
 800534c:	f000 f95e 	bl	800560c <SetEPRxStatus>
  }
  
  return USB_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	0018      	movs	r0, r3
 8005354:	46bd      	mov	sp, r7
 8005356:	b005      	add	sp, #20
 8005358:	bd90      	pop	{r4, r7, pc}
 800535a:	46c0      	nop			; (mov r8, r8)
 800535c:	40005c00 	.word	0x40005c00
 8005360:	0000bfbf 	.word	0x0000bfbf
 8005364:	00008080 	.word	0x00008080

08005368 <DCD_EP_ClrStall>:
  * @param  pdev: device instance
  * @param  epnum: endpoint address
  * @retval : status
  */
uint32_t  DCD_EP_ClrStall (USB_CORE_HANDLE *pdev, uint8_t epnum)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	000a      	movs	r2, r1
 8005372:	1cfb      	adds	r3, r7, #3
 8005374:	701a      	strb	r2, [r3, #0]
  USB_EP *ep;
  if ((0x80 & epnum) == 0x80)
 8005376:	1cfb      	adds	r3, r7, #3
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	b25b      	sxtb	r3, r3
 800537c:	2b00      	cmp	r3, #0
 800537e:	da0c      	bge.n	800539a <DCD_EP_ClrStall+0x32>
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];    
 8005380:	1cfb      	adds	r3, r7, #3
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	227f      	movs	r2, #127	; 0x7f
 8005386:	401a      	ands	r2, r3
 8005388:	0013      	movs	r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	189b      	adds	r3, r3, r2
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	3318      	adds	r3, #24
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	18d3      	adds	r3, r2, r3
 8005396:	60fb      	str	r3, [r7, #12]
 8005398:	e009      	b.n	80053ae <DCD_EP_ClrStall+0x46>
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 800539a:	1cfb      	adds	r3, r7, #3
 800539c:	781a      	ldrb	r2, [r3, #0]
 800539e:	0013      	movs	r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	189b      	adds	r3, r3, r2
 80053a4:	00db      	lsls	r3, r3, #3
 80053a6:	33b8      	adds	r3, #184	; 0xb8
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	18d3      	adds	r3, r2, r3
 80053ac:	60fb      	str	r3, [r7, #12]
  } 
  
  if (ep->is_in)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	785b      	ldrb	r3, [r3, #1]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00e      	beq.n	80053d4 <DCD_EP_ClrStall+0x6c>
  {
    ClearDTOG_TX(ep->num);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	0018      	movs	r0, r3
 80053bc:	f000 fa04 	bl	80057c8 <ClearDTOG_TX>
    SetEPTxStatus(ep->num, EP_TX_VALID);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	2130      	movs	r1, #48	; 0x30
 80053c6:	0018      	movs	r0, r3
 80053c8:	f000 f8e4 	bl	8005594 <SetEPTxStatus>
    ep->is_stall = 0;  
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	709a      	strb	r2, [r3, #2]
 80053d2:	e00f      	b.n	80053f4 <DCD_EP_ClrStall+0x8c>
  }
  else
  {
    ClearDTOG_RX(ep->num);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	0018      	movs	r0, r3
 80053da:	f000 f9c5 	bl	8005768 <ClearDTOG_RX>
    SetEPRxStatus(ep->num, EP_RX_VALID);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	781a      	ldrb	r2, [r3, #0]
 80053e2:	23c0      	movs	r3, #192	; 0xc0
 80053e4:	019b      	lsls	r3, r3, #6
 80053e6:	0019      	movs	r1, r3
 80053e8:	0010      	movs	r0, r2
 80053ea:	f000 f90f 	bl	800560c <SetEPRxStatus>
    ep->is_stall = 0;  
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	709a      	strb	r2, [r3, #2]
  }
  
  return USB_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	0018      	movs	r0, r3
 80053f8:	46bd      	mov	sp, r7
 80053fa:	b004      	add	sp, #16
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	46c0      	nop			; (mov r8, r8)

08005400 <DCD_EP_SetAddress>:
  * @brief This Function set USB device address
  * @param  pdev: device instance
  * @param  address: new device address
  */
void  DCD_EP_SetAddress (USB_CORE_HANDLE *pdev, uint8_t address)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	000a      	movs	r2, r1
 800540a:	1cfb      	adds	r3, r7, #3
 800540c:	701a      	strb	r2, [r3, #0]
  uint32_t i=0;
 800540e:	2300      	movs	r3, #0
 8005410:	60fb      	str	r3, [r7, #12]
  pdev->dev.device_address = address;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	1cfa      	adds	r2, r7, #3
 8005416:	7812      	ldrb	r2, [r2, #0]
 8005418:	711a      	strb	r2, [r3, #4]
  
  /* set address in every used endpoint */
  for (i = 0; i < EP_NUM; i++)
 800541a:	2300      	movs	r3, #0
 800541c:	60fb      	str	r3, [r7, #12]
 800541e:	e01b      	b.n	8005458 <DCD_EP_SetAddress+0x58>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	22ff      	movs	r2, #255	; 0xff
 8005424:	4013      	ands	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4a13      	ldr	r2, [pc, #76]	; (8005478 <DCD_EP_SetAddress+0x78>)
 800542a:	4694      	mov	ip, r2
 800542c:	4463      	add	r3, ip
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	21ff      	movs	r1, #255	; 0xff
 8005432:	400a      	ands	r2, r1
 8005434:	0092      	lsls	r2, r2, #2
 8005436:	4910      	ldr	r1, [pc, #64]	; (8005478 <DCD_EP_SetAddress+0x78>)
 8005438:	468c      	mov	ip, r1
 800543a:	4462      	add	r2, ip
 800543c:	6812      	ldr	r2, [r2, #0]
 800543e:	0011      	movs	r1, r2
 8005440:	4a0e      	ldr	r2, [pc, #56]	; (800547c <DCD_EP_SetAddress+0x7c>)
 8005442:	400a      	ands	r2, r1
 8005444:	490e      	ldr	r1, [pc, #56]	; (8005480 <DCD_EP_SetAddress+0x80>)
 8005446:	4311      	orrs	r1, r2
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	20ff      	movs	r0, #255	; 0xff
 800544c:	4002      	ands	r2, r0
 800544e:	430a      	orrs	r2, r1
 8005450:	601a      	str	r2, [r3, #0]
{
  uint32_t i=0;
  pdev->dev.device_address = address;
  
  /* set address in every used endpoint */
  for (i = 0; i < EP_NUM; i++)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	3301      	adds	r3, #1
 8005456:	60fb      	str	r3, [r7, #12]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2b03      	cmp	r3, #3
 800545c:	d9e0      	bls.n	8005420 <DCD_EP_SetAddress+0x20>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
  } /* set device address and enable function */
  _SetDADDR(address | DADDR_EF); 
 800545e:	4b09      	ldr	r3, [pc, #36]	; (8005484 <DCD_EP_SetAddress+0x84>)
 8005460:	1cfa      	adds	r2, r7, #3
 8005462:	7812      	ldrb	r2, [r2, #0]
 8005464:	2180      	movs	r1, #128	; 0x80
 8005466:	4249      	negs	r1, r1
 8005468:	430a      	orrs	r2, r1
 800546a:	b2d2      	uxtb	r2, r2
 800546c:	601a      	str	r2, [r3, #0]
}
 800546e:	46c0      	nop			; (mov r8, r8)
 8005470:	46bd      	mov	sp, r7
 8005472:	b004      	add	sp, #16
 8005474:	bd80      	pop	{r7, pc}
 8005476:	46c0      	nop			; (mov r8, r8)
 8005478:	40005c00 	.word	0x40005c00
 800547c:	00000f0f 	.word	0x00000f0f
 8005480:	00008080 	.word	0x00008080
 8005484:	40005c4c 	.word	0x40005c4c

08005488 <DCD_DevConnect>:
  * @brief Connect device (enable internal pull-up)
  * @param  pdev: device instance
  * @retval : None
  */
void  DCD_DevConnect (USB_CORE_HANDLE *pdev)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-Down bit to Connect internal pull-up on USB DP line */
  *BCDR |= BCDR_DPPU;
 8005490:	4b06      	ldr	r3, [pc, #24]	; (80054ac <DCD_DevConnect+0x24>)
 8005492:	4a06      	ldr	r2, [pc, #24]	; (80054ac <DCD_DevConnect+0x24>)
 8005494:	6812      	ldr	r2, [r2, #0]
 8005496:	2180      	movs	r1, #128	; 0x80
 8005498:	0209      	lsls	r1, r1, #8
 800549a:	430a      	orrs	r2, r1
 800549c:	601a      	str	r2, [r3, #0]
  /*Device is in default state*/
  pdev->dev.device_status  = USB_DEFAULT;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2201      	movs	r2, #1
 80054a2:	709a      	strb	r2, [r3, #2]
}
 80054a4:	46c0      	nop			; (mov r8, r8)
 80054a6:	46bd      	mov	sp, r7
 80054a8:	b002      	add	sp, #8
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	40005c58 	.word	0x40005c58

080054b0 <SetCNTR>:
  * @brief Set the CNTR register value 
  * @param   wRegValue: new register value
  * @retval None
  */
void SetCNTR(uint16_t wRegValue)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	0002      	movs	r2, r0
 80054b8:	1dbb      	adds	r3, r7, #6
 80054ba:	801a      	strh	r2, [r3, #0]
  _SetCNTR(wRegValue);
 80054bc:	4b03      	ldr	r3, [pc, #12]	; (80054cc <SetCNTR+0x1c>)
 80054be:	1dba      	adds	r2, r7, #6
 80054c0:	8812      	ldrh	r2, [r2, #0]
 80054c2:	601a      	str	r2, [r3, #0]
}
 80054c4:	46c0      	nop			; (mov r8, r8)
 80054c6:	46bd      	mov	sp, r7
 80054c8:	b002      	add	sp, #8
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	40005c40 	.word	0x40005c40

080054d0 <SetISTR>:
  * @brief Set the ISTR register value 
  * @param   wRegValue: new register value
  * @retval None
  */
void SetISTR(uint16_t wRegValue)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	0002      	movs	r2, r0
 80054d8:	1dbb      	adds	r3, r7, #6
 80054da:	801a      	strh	r2, [r3, #0]
  _SetISTR(wRegValue);
 80054dc:	4b03      	ldr	r3, [pc, #12]	; (80054ec <SetISTR+0x1c>)
 80054de:	1dba      	adds	r2, r7, #6
 80054e0:	8812      	ldrh	r2, [r2, #0]
 80054e2:	601a      	str	r2, [r3, #0]
}
 80054e4:	46c0      	nop			; (mov r8, r8)
 80054e6:	46bd      	mov	sp, r7
 80054e8:	b002      	add	sp, #8
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	40005c44 	.word	0x40005c44

080054f0 <SetBTABLE>:
  * @brief Set the BTABLE.
  * @param   wRegValue: New register value
  * @retval None
  */
void SetBTABLE(uint16_t wRegValue)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	0002      	movs	r2, r0
 80054f8:	1dbb      	adds	r3, r7, #6
 80054fa:	801a      	strh	r2, [r3, #0]
  _SetBTABLE(wRegValue);
 80054fc:	4b04      	ldr	r3, [pc, #16]	; (8005510 <SetBTABLE+0x20>)
 80054fe:	1dba      	adds	r2, r7, #6
 8005500:	8812      	ldrh	r2, [r2, #0]
 8005502:	4904      	ldr	r1, [pc, #16]	; (8005514 <SetBTABLE+0x24>)
 8005504:	400a      	ands	r2, r1
 8005506:	601a      	str	r2, [r3, #0]
}
 8005508:	46c0      	nop			; (mov r8, r8)
 800550a:	46bd      	mov	sp, r7
 800550c:	b002      	add	sp, #8
 800550e:	bd80      	pop	{r7, pc}
 8005510:	40005c50 	.word	0x40005c50
 8005514:	0000fff8 	.word	0x0000fff8

08005518 <GetENDPOINT>:
  * @brief Return the Endpoint register value.
  * @param   bEpNum: Endpoint Number
  * @retval Endpoint register value.
  */
uint16_t GetENDPOINT(uint8_t bEpNum)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	0002      	movs	r2, r0
 8005520:	1dfb      	adds	r3, r7, #7
 8005522:	701a      	strb	r2, [r3, #0]
  return(_GetENDPOINT(bEpNum));
 8005524:	1dfb      	adds	r3, r7, #7
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4a04      	ldr	r2, [pc, #16]	; (800553c <GetENDPOINT+0x24>)
 800552c:	4694      	mov	ip, r2
 800552e:	4463      	add	r3, ip
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	b29b      	uxth	r3, r3
}
 8005534:	0018      	movs	r0, r3
 8005536:	46bd      	mov	sp, r7
 8005538:	b002      	add	sp, #8
 800553a:	bd80      	pop	{r7, pc}
 800553c:	40005c00 	.word	0x40005c00

08005540 <SetEPType>:
  * @param   bEpNum: Endpoint Number
  * @param   wType: type definition
  * @retval None.
  */
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	0002      	movs	r2, r0
 8005548:	1dfb      	adds	r3, r7, #7
 800554a:	701a      	strb	r2, [r3, #0]
 800554c:	1d3b      	adds	r3, r7, #4
 800554e:	1c0a      	adds	r2, r1, #0
 8005550:	801a      	strh	r2, [r3, #0]
  _SetEPType(bEpNum, wType);
 8005552:	1dfb      	adds	r3, r7, #7
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	4a0c      	ldr	r2, [pc, #48]	; (800558c <SetEPType+0x4c>)
 800555a:	4694      	mov	ip, r2
 800555c:	4463      	add	r3, ip
 800555e:	1dfa      	adds	r2, r7, #7
 8005560:	7812      	ldrb	r2, [r2, #0]
 8005562:	0092      	lsls	r2, r2, #2
 8005564:	4909      	ldr	r1, [pc, #36]	; (800558c <SetEPType+0x4c>)
 8005566:	468c      	mov	ip, r1
 8005568:	4462      	add	r2, ip
 800556a:	6812      	ldr	r2, [r2, #0]
 800556c:	b212      	sxth	r2, r2
 800556e:	4908      	ldr	r1, [pc, #32]	; (8005590 <SetEPType+0x50>)
 8005570:	400a      	ands	r2, r1
 8005572:	b211      	sxth	r1, r2
 8005574:	1d3a      	adds	r2, r7, #4
 8005576:	2000      	movs	r0, #0
 8005578:	5e12      	ldrsh	r2, [r2, r0]
 800557a:	430a      	orrs	r2, r1
 800557c:	b212      	sxth	r2, r2
 800557e:	b292      	uxth	r2, r2
 8005580:	601a      	str	r2, [r3, #0]
}
 8005582:	46c0      	nop			; (mov r8, r8)
 8005584:	46bd      	mov	sp, r7
 8005586:	b002      	add	sp, #8
 8005588:	bd80      	pop	{r7, pc}
 800558a:	46c0      	nop			; (mov r8, r8)
 800558c:	40005c00 	.word	0x40005c00
 8005590:	ffff898f 	.word	0xffff898f

08005594 <SetEPTxStatus>:
  * @param   bEpNum: Endpoint Number
  * @param   wState: new state.
  * @retval None
  */
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
 8005594:	b590      	push	{r4, r7, lr}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	0002      	movs	r2, r0
 800559c:	1dfb      	adds	r3, r7, #7
 800559e:	701a      	strb	r2, [r3, #0]
 80055a0:	1d3b      	adds	r3, r7, #4
 80055a2:	1c0a      	adds	r2, r1, #0
 80055a4:	801a      	strh	r2, [r3, #0]
  _SetEPTxStatus(bEpNum, wState);   
 80055a6:	1dfb      	adds	r3, r7, #7
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4a14      	ldr	r2, [pc, #80]	; (8005600 <SetEPTxStatus+0x6c>)
 80055ae:	4694      	mov	ip, r2
 80055b0:	4463      	add	r3, ip
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	4a13      	ldr	r2, [pc, #76]	; (8005604 <SetEPTxStatus+0x70>)
 80055b8:	4013      	ands	r3, r2
 80055ba:	b29c      	uxth	r4, r3
 80055bc:	1d3b      	adds	r3, r7, #4
 80055be:	881b      	ldrh	r3, [r3, #0]
 80055c0:	2210      	movs	r2, #16
 80055c2:	4013      	ands	r3, r2
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d002      	beq.n	80055d0 <SetEPTxStatus+0x3c>
 80055ca:	2310      	movs	r3, #16
 80055cc:	4063      	eors	r3, r4
 80055ce:	b29c      	uxth	r4, r3
 80055d0:	1d3b      	adds	r3, r7, #4
 80055d2:	881b      	ldrh	r3, [r3, #0]
 80055d4:	2220      	movs	r2, #32
 80055d6:	4013      	ands	r3, r2
 80055d8:	b29b      	uxth	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d002      	beq.n	80055e4 <SetEPTxStatus+0x50>
 80055de:	2320      	movs	r3, #32
 80055e0:	4063      	eors	r3, r4
 80055e2:	b29c      	uxth	r4, r3
 80055e4:	1dfb      	adds	r3, r7, #7
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	4a05      	ldr	r2, [pc, #20]	; (8005600 <SetEPTxStatus+0x6c>)
 80055ec:	4694      	mov	ip, r2
 80055ee:	4463      	add	r3, ip
 80055f0:	4a05      	ldr	r2, [pc, #20]	; (8005608 <SetEPTxStatus+0x74>)
 80055f2:	4322      	orrs	r2, r4
 80055f4:	b292      	uxth	r2, r2
 80055f6:	601a      	str	r2, [r3, #0]
}
 80055f8:	46c0      	nop			; (mov r8, r8)
 80055fa:	46bd      	mov	sp, r7
 80055fc:	b003      	add	sp, #12
 80055fe:	bd90      	pop	{r4, r7, pc}
 8005600:	40005c00 	.word	0x40005c00
 8005604:	ffff8fbf 	.word	0xffff8fbf
 8005608:	ffff8080 	.word	0xffff8080

0800560c <SetEPRxStatus>:
  * @param   bEpNum: Endpoint Number
  * @param   wState: new state.
  * @retval None
  */
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
 800560c:	b590      	push	{r4, r7, lr}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	0002      	movs	r2, r0
 8005614:	1dfb      	adds	r3, r7, #7
 8005616:	701a      	strb	r2, [r3, #0]
 8005618:	1d3b      	adds	r3, r7, #4
 800561a:	1c0a      	adds	r2, r1, #0
 800561c:	801a      	strh	r2, [r3, #0]
  _SetEPRxStatus(bEpNum, wState);
 800561e:	1dfb      	adds	r3, r7, #7
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4a16      	ldr	r2, [pc, #88]	; (8005680 <SetEPRxStatus+0x74>)
 8005626:	4694      	mov	ip, r2
 8005628:	4463      	add	r3, ip
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	b29b      	uxth	r3, r3
 800562e:	4a15      	ldr	r2, [pc, #84]	; (8005684 <SetEPRxStatus+0x78>)
 8005630:	4013      	ands	r3, r2
 8005632:	b29c      	uxth	r4, r3
 8005634:	1d3b      	adds	r3, r7, #4
 8005636:	881a      	ldrh	r2, [r3, #0]
 8005638:	2380      	movs	r3, #128	; 0x80
 800563a:	015b      	lsls	r3, r3, #5
 800563c:	4013      	ands	r3, r2
 800563e:	b29b      	uxth	r3, r3
 8005640:	2b00      	cmp	r3, #0
 8005642:	d003      	beq.n	800564c <SetEPRxStatus+0x40>
 8005644:	2380      	movs	r3, #128	; 0x80
 8005646:	015b      	lsls	r3, r3, #5
 8005648:	4063      	eors	r3, r4
 800564a:	b29c      	uxth	r4, r3
 800564c:	1d3b      	adds	r3, r7, #4
 800564e:	881a      	ldrh	r2, [r3, #0]
 8005650:	2380      	movs	r3, #128	; 0x80
 8005652:	019b      	lsls	r3, r3, #6
 8005654:	4013      	ands	r3, r2
 8005656:	b29b      	uxth	r3, r3
 8005658:	2b00      	cmp	r3, #0
 800565a:	d003      	beq.n	8005664 <SetEPRxStatus+0x58>
 800565c:	2380      	movs	r3, #128	; 0x80
 800565e:	019b      	lsls	r3, r3, #6
 8005660:	4063      	eors	r3, r4
 8005662:	b29c      	uxth	r4, r3
 8005664:	1dfb      	adds	r3, r7, #7
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4a05      	ldr	r2, [pc, #20]	; (8005680 <SetEPRxStatus+0x74>)
 800566c:	4694      	mov	ip, r2
 800566e:	4463      	add	r3, ip
 8005670:	4a05      	ldr	r2, [pc, #20]	; (8005688 <SetEPRxStatus+0x7c>)
 8005672:	4322      	orrs	r2, r4
 8005674:	b292      	uxth	r2, r2
 8005676:	601a      	str	r2, [r3, #0]
}
 8005678:	46c0      	nop			; (mov r8, r8)
 800567a:	46bd      	mov	sp, r7
 800567c:	b003      	add	sp, #12
 800567e:	bd90      	pop	{r4, r7, pc}
 8005680:	40005c00 	.word	0x40005c00
 8005684:	ffffbf8f 	.word	0xffffbf8f
 8005688:	ffff8080 	.word	0xffff8080

0800568c <SetEPDoubleBuff>:
  * @brief Enable the double buffer feature for the endpoint.
  * @param   bEpNum: Endpoint Number
  * @retval None
  */
void SetEPDoubleBuff(uint8_t bEpNum)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	0002      	movs	r2, r0
 8005694:	1dfb      	adds	r3, r7, #7
 8005696:	701a      	strb	r2, [r3, #0]
  _SetEP_KIND(bEpNum);
 8005698:	1dfb      	adds	r3, r7, #7
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	4a0b      	ldr	r2, [pc, #44]	; (80056cc <SetEPDoubleBuff+0x40>)
 80056a0:	4694      	mov	ip, r2
 80056a2:	4463      	add	r3, ip
 80056a4:	1dfa      	adds	r2, r7, #7
 80056a6:	7812      	ldrb	r2, [r2, #0]
 80056a8:	0092      	lsls	r2, r2, #2
 80056aa:	4908      	ldr	r1, [pc, #32]	; (80056cc <SetEPDoubleBuff+0x40>)
 80056ac:	468c      	mov	ip, r1
 80056ae:	4462      	add	r2, ip
 80056b0:	6812      	ldr	r2, [r2, #0]
 80056b2:	b212      	sxth	r2, r2
 80056b4:	4906      	ldr	r1, [pc, #24]	; (80056d0 <SetEPDoubleBuff+0x44>)
 80056b6:	400a      	ands	r2, r1
 80056b8:	b212      	sxth	r2, r2
 80056ba:	4906      	ldr	r1, [pc, #24]	; (80056d4 <SetEPDoubleBuff+0x48>)
 80056bc:	430a      	orrs	r2, r1
 80056be:	b212      	sxth	r2, r2
 80056c0:	b292      	uxth	r2, r2
 80056c2:	601a      	str	r2, [r3, #0]
}
 80056c4:	46c0      	nop			; (mov r8, r8)
 80056c6:	46bd      	mov	sp, r7
 80056c8:	b002      	add	sp, #8
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	40005c00 	.word	0x40005c00
 80056d0:	00000e0f 	.word	0x00000e0f
 80056d4:	ffff8180 	.word	0xffff8180

080056d8 <ToggleDTOG_RX>:
  * @brief Toggle the DTOG_RX bit.
  * @param   bEpNum: Endpoint Number
  * @retval None
  */
void ToggleDTOG_RX(uint8_t bEpNum)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	0002      	movs	r2, r0
 80056e0:	1dfb      	adds	r3, r7, #7
 80056e2:	701a      	strb	r2, [r3, #0]
  _ToggleDTOG_RX(bEpNum);
 80056e4:	1dfb      	adds	r3, r7, #7
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	4a0a      	ldr	r2, [pc, #40]	; (8005714 <ToggleDTOG_RX+0x3c>)
 80056ec:	4694      	mov	ip, r2
 80056ee:	4463      	add	r3, ip
 80056f0:	1dfa      	adds	r2, r7, #7
 80056f2:	7812      	ldrb	r2, [r2, #0]
 80056f4:	0092      	lsls	r2, r2, #2
 80056f6:	4907      	ldr	r1, [pc, #28]	; (8005714 <ToggleDTOG_RX+0x3c>)
 80056f8:	468c      	mov	ip, r1
 80056fa:	4462      	add	r2, ip
 80056fc:	6812      	ldr	r2, [r2, #0]
 80056fe:	0011      	movs	r1, r2
 8005700:	4a05      	ldr	r2, [pc, #20]	; (8005718 <ToggleDTOG_RX+0x40>)
 8005702:	400a      	ands	r2, r1
 8005704:	4905      	ldr	r1, [pc, #20]	; (800571c <ToggleDTOG_RX+0x44>)
 8005706:	430a      	orrs	r2, r1
 8005708:	601a      	str	r2, [r3, #0]
}
 800570a:	46c0      	nop			; (mov r8, r8)
 800570c:	46bd      	mov	sp, r7
 800570e:	b002      	add	sp, #8
 8005710:	bd80      	pop	{r7, pc}
 8005712:	46c0      	nop			; (mov r8, r8)
 8005714:	40005c00 	.word	0x40005c00
 8005718:	00000f0f 	.word	0x00000f0f
 800571c:	0000c080 	.word	0x0000c080

08005720 <ToggleDTOG_TX>:
  * @brief Toggle the DTOG_TX bit.
  * @param   bEpNum: Endpoint Number
  * @retval None
  */
void ToggleDTOG_TX(uint8_t bEpNum)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	0002      	movs	r2, r0
 8005728:	1dfb      	adds	r3, r7, #7
 800572a:	701a      	strb	r2, [r3, #0]
  _ToggleDTOG_TX(bEpNum);
 800572c:	1dfb      	adds	r3, r7, #7
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	4a0a      	ldr	r2, [pc, #40]	; (800575c <ToggleDTOG_TX+0x3c>)
 8005734:	4694      	mov	ip, r2
 8005736:	4463      	add	r3, ip
 8005738:	1dfa      	adds	r2, r7, #7
 800573a:	7812      	ldrb	r2, [r2, #0]
 800573c:	0092      	lsls	r2, r2, #2
 800573e:	4907      	ldr	r1, [pc, #28]	; (800575c <ToggleDTOG_TX+0x3c>)
 8005740:	468c      	mov	ip, r1
 8005742:	4462      	add	r2, ip
 8005744:	6812      	ldr	r2, [r2, #0]
 8005746:	0011      	movs	r1, r2
 8005748:	4a05      	ldr	r2, [pc, #20]	; (8005760 <ToggleDTOG_TX+0x40>)
 800574a:	400a      	ands	r2, r1
 800574c:	4905      	ldr	r1, [pc, #20]	; (8005764 <ToggleDTOG_TX+0x44>)
 800574e:	430a      	orrs	r2, r1
 8005750:	601a      	str	r2, [r3, #0]
}
 8005752:	46c0      	nop			; (mov r8, r8)
 8005754:	46bd      	mov	sp, r7
 8005756:	b002      	add	sp, #8
 8005758:	bd80      	pop	{r7, pc}
 800575a:	46c0      	nop			; (mov r8, r8)
 800575c:	40005c00 	.word	0x40005c00
 8005760:	00000f0f 	.word	0x00000f0f
 8005764:	000080c0 	.word	0x000080c0

08005768 <ClearDTOG_RX>:
  * @brief Clear the DTOG_RX bit.
  * @param   bEpNum: Endpoint Number
  * @retval None
  */
void ClearDTOG_RX(uint8_t bEpNum)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	0002      	movs	r2, r0
 8005770:	1dfb      	adds	r3, r7, #7
 8005772:	701a      	strb	r2, [r3, #0]
  _ClearDTOG_RX(bEpNum);
 8005774:	1dfb      	adds	r3, r7, #7
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	4a10      	ldr	r2, [pc, #64]	; (80057bc <ClearDTOG_RX+0x54>)
 800577c:	4694      	mov	ip, r2
 800577e:	4463      	add	r3, ip
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	001a      	movs	r2, r3
 8005784:	2380      	movs	r3, #128	; 0x80
 8005786:	01db      	lsls	r3, r3, #7
 8005788:	4013      	ands	r3, r2
 800578a:	d012      	beq.n	80057b2 <ClearDTOG_RX+0x4a>
 800578c:	1dfb      	adds	r3, r7, #7
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	4a0a      	ldr	r2, [pc, #40]	; (80057bc <ClearDTOG_RX+0x54>)
 8005794:	4694      	mov	ip, r2
 8005796:	4463      	add	r3, ip
 8005798:	1dfa      	adds	r2, r7, #7
 800579a:	7812      	ldrb	r2, [r2, #0]
 800579c:	0092      	lsls	r2, r2, #2
 800579e:	4907      	ldr	r1, [pc, #28]	; (80057bc <ClearDTOG_RX+0x54>)
 80057a0:	468c      	mov	ip, r1
 80057a2:	4462      	add	r2, ip
 80057a4:	6812      	ldr	r2, [r2, #0]
 80057a6:	0011      	movs	r1, r2
 80057a8:	4a05      	ldr	r2, [pc, #20]	; (80057c0 <ClearDTOG_RX+0x58>)
 80057aa:	400a      	ands	r2, r1
 80057ac:	4905      	ldr	r1, [pc, #20]	; (80057c4 <ClearDTOG_RX+0x5c>)
 80057ae:	430a      	orrs	r2, r1
 80057b0:	601a      	str	r2, [r3, #0]
}
 80057b2:	46c0      	nop			; (mov r8, r8)
 80057b4:	46bd      	mov	sp, r7
 80057b6:	b002      	add	sp, #8
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	46c0      	nop			; (mov r8, r8)
 80057bc:	40005c00 	.word	0x40005c00
 80057c0:	00000f0f 	.word	0x00000f0f
 80057c4:	0000c080 	.word	0x0000c080

080057c8 <ClearDTOG_TX>:
  * @brief Clear the DTOG_TX bit.
  * @param   bEpNum: Endpoint Number
  * @retval None
  */
void ClearDTOG_TX(uint8_t bEpNum)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	0002      	movs	r2, r0
 80057d0:	1dfb      	adds	r3, r7, #7
 80057d2:	701a      	strb	r2, [r3, #0]
  _ClearDTOG_TX(bEpNum);
 80057d4:	1dfb      	adds	r3, r7, #7
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	4a0f      	ldr	r2, [pc, #60]	; (8005818 <ClearDTOG_TX+0x50>)
 80057dc:	4694      	mov	ip, r2
 80057de:	4463      	add	r3, ip
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	001a      	movs	r2, r3
 80057e4:	2340      	movs	r3, #64	; 0x40
 80057e6:	4013      	ands	r3, r2
 80057e8:	d012      	beq.n	8005810 <ClearDTOG_TX+0x48>
 80057ea:	1dfb      	adds	r3, r7, #7
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	4a09      	ldr	r2, [pc, #36]	; (8005818 <ClearDTOG_TX+0x50>)
 80057f2:	4694      	mov	ip, r2
 80057f4:	4463      	add	r3, ip
 80057f6:	1dfa      	adds	r2, r7, #7
 80057f8:	7812      	ldrb	r2, [r2, #0]
 80057fa:	0092      	lsls	r2, r2, #2
 80057fc:	4906      	ldr	r1, [pc, #24]	; (8005818 <ClearDTOG_TX+0x50>)
 80057fe:	468c      	mov	ip, r1
 8005800:	4462      	add	r2, ip
 8005802:	6812      	ldr	r2, [r2, #0]
 8005804:	0011      	movs	r1, r2
 8005806:	4a05      	ldr	r2, [pc, #20]	; (800581c <ClearDTOG_TX+0x54>)
 8005808:	400a      	ands	r2, r1
 800580a:	4905      	ldr	r1, [pc, #20]	; (8005820 <ClearDTOG_TX+0x58>)
 800580c:	430a      	orrs	r2, r1
 800580e:	601a      	str	r2, [r3, #0]
}
 8005810:	46c0      	nop			; (mov r8, r8)
 8005812:	46bd      	mov	sp, r7
 8005814:	b002      	add	sp, #8
 8005816:	bd80      	pop	{r7, pc}
 8005818:	40005c00 	.word	0x40005c00
 800581c:	00000f0f 	.word	0x00000f0f
 8005820:	000080c0 	.word	0x000080c0

08005824 <SetEPTxAddr>:
  * @param   bEpNum: Endpoint Number
  * @param   wAddr: new address.
  * @retval Endpoint address.
  */
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	0002      	movs	r2, r0
 800582c:	1dfb      	adds	r3, r7, #7
 800582e:	701a      	strb	r2, [r3, #0]
 8005830:	1d3b      	adds	r3, r7, #4
 8005832:	1c0a      	adds	r2, r1, #0
 8005834:	801a      	strh	r2, [r3, #0]
  _SetEPTxAddr(bEpNum, wAddr);
 8005836:	4b0b      	ldr	r3, [pc, #44]	; (8005864 <SetEPTxAddr+0x40>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	041b      	lsls	r3, r3, #16
 800583c:	0c1a      	lsrs	r2, r3, #16
 800583e:	1dfb      	adds	r3, r7, #7
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	00db      	lsls	r3, r3, #3
 8005844:	18d3      	adds	r3, r2, r3
 8005846:	4a08      	ldr	r2, [pc, #32]	; (8005868 <SetEPTxAddr+0x44>)
 8005848:	4694      	mov	ip, r2
 800584a:	4463      	add	r3, ip
 800584c:	0019      	movs	r1, r3
 800584e:	1d3b      	adds	r3, r7, #4
 8005850:	881b      	ldrh	r3, [r3, #0]
 8005852:	2201      	movs	r2, #1
 8005854:	4393      	bics	r3, r2
 8005856:	b29b      	uxth	r3, r3
 8005858:	800b      	strh	r3, [r1, #0]
}
 800585a:	46c0      	nop			; (mov r8, r8)
 800585c:	46bd      	mov	sp, r7
 800585e:	b002      	add	sp, #8
 8005860:	bd80      	pop	{r7, pc}
 8005862:	46c0      	nop			; (mov r8, r8)
 8005864:	40005c50 	.word	0x40005c50
 8005868:	40006000 	.word	0x40006000

0800586c <SetEPRxAddr>:
  * @param   bEpNum: Endpoint Number
  * @param   wAddr: new address.
  * @retval Endpoint address.
  */
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	0002      	movs	r2, r0
 8005874:	1dfb      	adds	r3, r7, #7
 8005876:	701a      	strb	r2, [r3, #0]
 8005878:	1d3b      	adds	r3, r7, #4
 800587a:	1c0a      	adds	r2, r1, #0
 800587c:	801a      	strh	r2, [r3, #0]
  _SetEPRxAddr(bEpNum, wAddr);
 800587e:	4b0b      	ldr	r3, [pc, #44]	; (80058ac <SetEPRxAddr+0x40>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	041b      	lsls	r3, r3, #16
 8005884:	0c1a      	lsrs	r2, r3, #16
 8005886:	1dfb      	adds	r3, r7, #7
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	00db      	lsls	r3, r3, #3
 800588c:	18d3      	adds	r3, r2, r3
 800588e:	4a08      	ldr	r2, [pc, #32]	; (80058b0 <SetEPRxAddr+0x44>)
 8005890:	4694      	mov	ip, r2
 8005892:	4463      	add	r3, ip
 8005894:	0019      	movs	r1, r3
 8005896:	1d3b      	adds	r3, r7, #4
 8005898:	881b      	ldrh	r3, [r3, #0]
 800589a:	2201      	movs	r2, #1
 800589c:	4393      	bics	r3, r2
 800589e:	b29b      	uxth	r3, r3
 80058a0:	800b      	strh	r3, [r1, #0]
}
 80058a2:	46c0      	nop			; (mov r8, r8)
 80058a4:	46bd      	mov	sp, r7
 80058a6:	b002      	add	sp, #8
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	46c0      	nop			; (mov r8, r8)
 80058ac:	40005c50 	.word	0x40005c50
 80058b0:	40006004 	.word	0x40006004

080058b4 <SetEPTxCount>:
  * @param   bEpNum: Endpoint Number
  * @param   wCount: new count value.
  * @retval Rx buffer address.
  */
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	0002      	movs	r2, r0
 80058bc:	1dfb      	adds	r3, r7, #7
 80058be:	701a      	strb	r2, [r3, #0]
 80058c0:	1d3b      	adds	r3, r7, #4
 80058c2:	1c0a      	adds	r2, r1, #0
 80058c4:	801a      	strh	r2, [r3, #0]
  _SetEPTxCount(bEpNum, wCount);
 80058c6:	4b09      	ldr	r3, [pc, #36]	; (80058ec <SetEPTxCount+0x38>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	041b      	lsls	r3, r3, #16
 80058cc:	0c1a      	lsrs	r2, r3, #16
 80058ce:	1dfb      	adds	r3, r7, #7
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	00db      	lsls	r3, r3, #3
 80058d4:	18d3      	adds	r3, r2, r3
 80058d6:	4a06      	ldr	r2, [pc, #24]	; (80058f0 <SetEPTxCount+0x3c>)
 80058d8:	4694      	mov	ip, r2
 80058da:	4463      	add	r3, ip
 80058dc:	001a      	movs	r2, r3
 80058de:	1d3b      	adds	r3, r7, #4
 80058e0:	881b      	ldrh	r3, [r3, #0]
 80058e2:	8013      	strh	r3, [r2, #0]
}
 80058e4:	46c0      	nop			; (mov r8, r8)
 80058e6:	46bd      	mov	sp, r7
 80058e8:	b002      	add	sp, #8
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	40005c50 	.word	0x40005c50
 80058f0:	40006002 	.word	0x40006002

080058f4 <SetEPRxCount>:
  * @param   bEpNum: Endpoint Number.
  * @param   wCount: the new register value.
  * @retval None
  */
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	0002      	movs	r2, r0
 80058fc:	1dfb      	adds	r3, r7, #7
 80058fe:	701a      	strb	r2, [r3, #0]
 8005900:	1d3b      	adds	r3, r7, #4
 8005902:	1c0a      	adds	r2, r1, #0
 8005904:	801a      	strh	r2, [r3, #0]
  _SetEPRxCount(bEpNum, wCount);
 8005906:	4b25      	ldr	r3, [pc, #148]	; (800599c <SetEPRxCount+0xa8>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	041b      	lsls	r3, r3, #16
 800590c:	0c1a      	lsrs	r2, r3, #16
 800590e:	1dfb      	adds	r3, r7, #7
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	00db      	lsls	r3, r3, #3
 8005914:	18d3      	adds	r3, r2, r3
 8005916:	4a22      	ldr	r2, [pc, #136]	; (80059a0 <SetEPRxCount+0xac>)
 8005918:	4694      	mov	ip, r2
 800591a:	4463      	add	r3, ip
 800591c:	60bb      	str	r3, [r7, #8]
 800591e:	1d3b      	adds	r3, r7, #4
 8005920:	881b      	ldrh	r3, [r3, #0]
 8005922:	2b3e      	cmp	r3, #62	; 0x3e
 8005924:	d91d      	bls.n	8005962 <SetEPRxCount+0x6e>
 8005926:	230e      	movs	r3, #14
 8005928:	18fb      	adds	r3, r7, r3
 800592a:	1d3a      	adds	r2, r7, #4
 800592c:	8812      	ldrh	r2, [r2, #0]
 800592e:	0952      	lsrs	r2, r2, #5
 8005930:	801a      	strh	r2, [r3, #0]
 8005932:	1d3b      	adds	r3, r7, #4
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	221f      	movs	r2, #31
 8005938:	4013      	ands	r3, r2
 800593a:	d106      	bne.n	800594a <SetEPRxCount+0x56>
 800593c:	230e      	movs	r3, #14
 800593e:	18fb      	adds	r3, r7, r3
 8005940:	881a      	ldrh	r2, [r3, #0]
 8005942:	230e      	movs	r3, #14
 8005944:	18fb      	adds	r3, r7, r3
 8005946:	3a01      	subs	r2, #1
 8005948:	801a      	strh	r2, [r3, #0]
 800594a:	230e      	movs	r3, #14
 800594c:	18fb      	adds	r3, r7, r3
 800594e:	881b      	ldrh	r3, [r3, #0]
 8005950:	029b      	lsls	r3, r3, #10
 8005952:	b21b      	sxth	r3, r3
 8005954:	4a13      	ldr	r2, [pc, #76]	; (80059a4 <SetEPRxCount+0xb0>)
 8005956:	4313      	orrs	r3, r2
 8005958:	b21b      	sxth	r3, r3
 800595a:	b29a      	uxth	r2, r3
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	801a      	strh	r2, [r3, #0]
}
 8005960:	e018      	b.n	8005994 <SetEPRxCount+0xa0>
  * @param   wCount: the new register value.
  * @retval None
  */
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 8005962:	230e      	movs	r3, #14
 8005964:	18fb      	adds	r3, r7, r3
 8005966:	1d3a      	adds	r2, r7, #4
 8005968:	8812      	ldrh	r2, [r2, #0]
 800596a:	0852      	lsrs	r2, r2, #1
 800596c:	801a      	strh	r2, [r3, #0]
 800596e:	1d3b      	adds	r3, r7, #4
 8005970:	881b      	ldrh	r3, [r3, #0]
 8005972:	2201      	movs	r2, #1
 8005974:	4013      	ands	r3, r2
 8005976:	d006      	beq.n	8005986 <SetEPRxCount+0x92>
 8005978:	230e      	movs	r3, #14
 800597a:	18fb      	adds	r3, r7, r3
 800597c:	881a      	ldrh	r2, [r3, #0]
 800597e:	230e      	movs	r3, #14
 8005980:	18fb      	adds	r3, r7, r3
 8005982:	3201      	adds	r2, #1
 8005984:	801a      	strh	r2, [r3, #0]
 8005986:	230e      	movs	r3, #14
 8005988:	18fb      	adds	r3, r7, r3
 800598a:	881b      	ldrh	r3, [r3, #0]
 800598c:	029b      	lsls	r3, r3, #10
 800598e:	b29a      	uxth	r2, r3
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	801a      	strh	r2, [r3, #0]
}
 8005994:	46c0      	nop			; (mov r8, r8)
 8005996:	46bd      	mov	sp, r7
 8005998:	b004      	add	sp, #16
 800599a:	bd80      	pop	{r7, pc}
 800599c:	40005c50 	.word	0x40005c50
 80059a0:	40006006 	.word	0x40006006
 80059a4:	ffff8000 	.word	0xffff8000

080059a8 <GetEPTxCount>:
  * @brief Get the Tx count.
  * @param   bEpNum: Endpoint Number.
  * @retval Tx count value.
  */
uint16_t GetEPTxCount(uint8_t bEpNum)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	0002      	movs	r2, r0
 80059b0:	1dfb      	adds	r3, r7, #7
 80059b2:	701a      	strb	r2, [r3, #0]
  return(_GetEPTxCount(bEpNum));
 80059b4:	4b09      	ldr	r3, [pc, #36]	; (80059dc <GetEPTxCount+0x34>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	041b      	lsls	r3, r3, #16
 80059ba:	0c1a      	lsrs	r2, r3, #16
 80059bc:	1dfb      	adds	r3, r7, #7
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	00db      	lsls	r3, r3, #3
 80059c2:	18d3      	adds	r3, r2, r3
 80059c4:	4a06      	ldr	r2, [pc, #24]	; (80059e0 <GetEPTxCount+0x38>)
 80059c6:	4694      	mov	ip, r2
 80059c8:	4463      	add	r3, ip
 80059ca:	881b      	ldrh	r3, [r3, #0]
 80059cc:	059b      	lsls	r3, r3, #22
 80059ce:	0d9b      	lsrs	r3, r3, #22
 80059d0:	b29b      	uxth	r3, r3
}
 80059d2:	0018      	movs	r0, r3
 80059d4:	46bd      	mov	sp, r7
 80059d6:	b002      	add	sp, #8
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	46c0      	nop			; (mov r8, r8)
 80059dc:	40005c50 	.word	0x40005c50
 80059e0:	40006002 	.word	0x40006002

080059e4 <GetEPRxCount>:
  * @brief Get the Rx count.
  * @param   bEpNum: Endpoint Number.
  * @retval Rx count value.
  */
uint16_t GetEPRxCount(uint8_t bEpNum)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	0002      	movs	r2, r0
 80059ec:	1dfb      	adds	r3, r7, #7
 80059ee:	701a      	strb	r2, [r3, #0]
  return(_GetEPRxCount(bEpNum));
 80059f0:	4b09      	ldr	r3, [pc, #36]	; (8005a18 <GetEPRxCount+0x34>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	041b      	lsls	r3, r3, #16
 80059f6:	0c1a      	lsrs	r2, r3, #16
 80059f8:	1dfb      	adds	r3, r7, #7
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	00db      	lsls	r3, r3, #3
 80059fe:	18d3      	adds	r3, r2, r3
 8005a00:	4a06      	ldr	r2, [pc, #24]	; (8005a1c <GetEPRxCount+0x38>)
 8005a02:	4694      	mov	ip, r2
 8005a04:	4463      	add	r3, ip
 8005a06:	881b      	ldrh	r3, [r3, #0]
 8005a08:	059b      	lsls	r3, r3, #22
 8005a0a:	0d9b      	lsrs	r3, r3, #22
 8005a0c:	b29b      	uxth	r3, r3
}
 8005a0e:	0018      	movs	r0, r3
 8005a10:	46bd      	mov	sp, r7
 8005a12:	b002      	add	sp, #8
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	46c0      	nop			; (mov r8, r8)
 8005a18:	40005c50 	.word	0x40005c50
 8005a1c:	40006006 	.word	0x40006006

08005a20 <SetEPDblBuffAddr>:
  * @param   wBuf0Addr: new address of buffer 0.
  * @param   wBuf1Addr: new address of buffer 1.
  * @retval None
  */
void SetEPDblBuffAddr(uint8_t bEpNum, uint16_t wBuf0Addr, uint16_t wBuf1Addr)
{
 8005a20:	b590      	push	{r4, r7, lr}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	0004      	movs	r4, r0
 8005a28:	0008      	movs	r0, r1
 8005a2a:	0011      	movs	r1, r2
 8005a2c:	1dfb      	adds	r3, r7, #7
 8005a2e:	1c22      	adds	r2, r4, #0
 8005a30:	701a      	strb	r2, [r3, #0]
 8005a32:	1d3b      	adds	r3, r7, #4
 8005a34:	1c02      	adds	r2, r0, #0
 8005a36:	801a      	strh	r2, [r3, #0]
 8005a38:	1cbb      	adds	r3, r7, #2
 8005a3a:	1c0a      	adds	r2, r1, #0
 8005a3c:	801a      	strh	r2, [r3, #0]
  _SetEPDblBuffAddr(bEpNum, wBuf0Addr, wBuf1Addr);
 8005a3e:	4b14      	ldr	r3, [pc, #80]	; (8005a90 <SetEPDblBuffAddr+0x70>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	041b      	lsls	r3, r3, #16
 8005a44:	0c1a      	lsrs	r2, r3, #16
 8005a46:	1dfb      	adds	r3, r7, #7
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	18d3      	adds	r3, r2, r3
 8005a4e:	4a11      	ldr	r2, [pc, #68]	; (8005a94 <SetEPDblBuffAddr+0x74>)
 8005a50:	4694      	mov	ip, r2
 8005a52:	4463      	add	r3, ip
 8005a54:	0019      	movs	r1, r3
 8005a56:	1d3b      	adds	r3, r7, #4
 8005a58:	881b      	ldrh	r3, [r3, #0]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	4393      	bics	r3, r2
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	800b      	strh	r3, [r1, #0]
 8005a62:	4b0b      	ldr	r3, [pc, #44]	; (8005a90 <SetEPDblBuffAddr+0x70>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	041b      	lsls	r3, r3, #16
 8005a68:	0c1a      	lsrs	r2, r3, #16
 8005a6a:	1dfb      	adds	r3, r7, #7
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	00db      	lsls	r3, r3, #3
 8005a70:	18d3      	adds	r3, r2, r3
 8005a72:	4a09      	ldr	r2, [pc, #36]	; (8005a98 <SetEPDblBuffAddr+0x78>)
 8005a74:	4694      	mov	ip, r2
 8005a76:	4463      	add	r3, ip
 8005a78:	0019      	movs	r1, r3
 8005a7a:	1cbb      	adds	r3, r7, #2
 8005a7c:	881b      	ldrh	r3, [r3, #0]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	4393      	bics	r3, r2
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	800b      	strh	r3, [r1, #0]
}
 8005a86:	46c0      	nop			; (mov r8, r8)
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	b003      	add	sp, #12
 8005a8c:	bd90      	pop	{r4, r7, pc}
 8005a8e:	46c0      	nop			; (mov r8, r8)
 8005a90:	40005c50 	.word	0x40005c50
 8005a94:	40006000 	.word	0x40006000
 8005a98:	40006004 	.word	0x40006004

08005a9c <SetEPDblBuffCount>:
  * @brief Set the number of bytes for a double Buffer
  * @param   bEpNum,bDir, wCount
  * @retval Address of the Buffer 1.
  */
void SetEPDblBuffCount(uint8_t bEpNum, uint8_t bDir, uint16_t wCount)
{
 8005a9c:	b590      	push	{r4, r7, lr}
 8005a9e:	b087      	sub	sp, #28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	0004      	movs	r4, r0
 8005aa4:	0008      	movs	r0, r1
 8005aa6:	0011      	movs	r1, r2
 8005aa8:	1dfb      	adds	r3, r7, #7
 8005aaa:	1c22      	adds	r2, r4, #0
 8005aac:	701a      	strb	r2, [r3, #0]
 8005aae:	1dbb      	adds	r3, r7, #6
 8005ab0:	1c02      	adds	r2, r0, #0
 8005ab2:	701a      	strb	r2, [r3, #0]
 8005ab4:	1d3b      	adds	r3, r7, #4
 8005ab6:	1c0a      	adds	r2, r1, #0
 8005ab8:	801a      	strh	r2, [r3, #0]
  _SetEPDblBuffCount(bEpNum, bDir, wCount);
 8005aba:	1dbb      	adds	r3, r7, #6
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d147      	bne.n	8005b52 <SetEPDblBuffCount+0xb6>
 8005ac2:	4b5f      	ldr	r3, [pc, #380]	; (8005c40 <SetEPDblBuffCount+0x1a4>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	041b      	lsls	r3, r3, #16
 8005ac8:	0c1a      	lsrs	r2, r3, #16
 8005aca:	1dfb      	adds	r3, r7, #7
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	00db      	lsls	r3, r3, #3
 8005ad0:	18d3      	adds	r3, r2, r3
 8005ad2:	4a5c      	ldr	r2, [pc, #368]	; (8005c44 <SetEPDblBuffCount+0x1a8>)
 8005ad4:	4694      	mov	ip, r2
 8005ad6:	4463      	add	r3, ip
 8005ad8:	613b      	str	r3, [r7, #16]
 8005ada:	1d3b      	adds	r3, r7, #4
 8005adc:	881b      	ldrh	r3, [r3, #0]
 8005ade:	2b3e      	cmp	r3, #62	; 0x3e
 8005ae0:	d91d      	bls.n	8005b1e <SetEPDblBuffCount+0x82>
 8005ae2:	2316      	movs	r3, #22
 8005ae4:	18fb      	adds	r3, r7, r3
 8005ae6:	1d3a      	adds	r2, r7, #4
 8005ae8:	8812      	ldrh	r2, [r2, #0]
 8005aea:	0952      	lsrs	r2, r2, #5
 8005aec:	801a      	strh	r2, [r3, #0]
 8005aee:	1d3b      	adds	r3, r7, #4
 8005af0:	881b      	ldrh	r3, [r3, #0]
 8005af2:	221f      	movs	r2, #31
 8005af4:	4013      	ands	r3, r2
 8005af6:	d106      	bne.n	8005b06 <SetEPDblBuffCount+0x6a>
 8005af8:	2316      	movs	r3, #22
 8005afa:	18fb      	adds	r3, r7, r3
 8005afc:	881a      	ldrh	r2, [r3, #0]
 8005afe:	2316      	movs	r3, #22
 8005b00:	18fb      	adds	r3, r7, r3
 8005b02:	3a01      	subs	r2, #1
 8005b04:	801a      	strh	r2, [r3, #0]
 8005b06:	2316      	movs	r3, #22
 8005b08:	18fb      	adds	r3, r7, r3
 8005b0a:	881b      	ldrh	r3, [r3, #0]
 8005b0c:	029b      	lsls	r3, r3, #10
 8005b0e:	b21b      	sxth	r3, r3
 8005b10:	4a4d      	ldr	r2, [pc, #308]	; (8005c48 <SetEPDblBuffCount+0x1ac>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	b21b      	sxth	r3, r3
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	801a      	strh	r2, [r3, #0]
 8005b1c:	e02c      	b.n	8005b78 <SetEPDblBuffCount+0xdc>
 8005b1e:	2316      	movs	r3, #22
 8005b20:	18fb      	adds	r3, r7, r3
 8005b22:	1d3a      	adds	r2, r7, #4
 8005b24:	8812      	ldrh	r2, [r2, #0]
 8005b26:	0852      	lsrs	r2, r2, #1
 8005b28:	801a      	strh	r2, [r3, #0]
 8005b2a:	1d3b      	adds	r3, r7, #4
 8005b2c:	881b      	ldrh	r3, [r3, #0]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	4013      	ands	r3, r2
 8005b32:	d006      	beq.n	8005b42 <SetEPDblBuffCount+0xa6>
 8005b34:	2316      	movs	r3, #22
 8005b36:	18fb      	adds	r3, r7, r3
 8005b38:	881a      	ldrh	r2, [r3, #0]
 8005b3a:	2316      	movs	r3, #22
 8005b3c:	18fb      	adds	r3, r7, r3
 8005b3e:	3201      	adds	r2, #1
 8005b40:	801a      	strh	r2, [r3, #0]
 8005b42:	2316      	movs	r3, #22
 8005b44:	18fb      	adds	r3, r7, r3
 8005b46:	881b      	ldrh	r3, [r3, #0]
 8005b48:	029b      	lsls	r3, r3, #10
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	801a      	strh	r2, [r3, #0]
 8005b50:	e012      	b.n	8005b78 <SetEPDblBuffCount+0xdc>
 8005b52:	1dbb      	adds	r3, r7, #6
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d10e      	bne.n	8005b78 <SetEPDblBuffCount+0xdc>
 8005b5a:	4b39      	ldr	r3, [pc, #228]	; (8005c40 <SetEPDblBuffCount+0x1a4>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	041b      	lsls	r3, r3, #16
 8005b60:	0c1a      	lsrs	r2, r3, #16
 8005b62:	1dfb      	adds	r3, r7, #7
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	00db      	lsls	r3, r3, #3
 8005b68:	18d3      	adds	r3, r2, r3
 8005b6a:	4a36      	ldr	r2, [pc, #216]	; (8005c44 <SetEPDblBuffCount+0x1a8>)
 8005b6c:	4694      	mov	ip, r2
 8005b6e:	4463      	add	r3, ip
 8005b70:	001a      	movs	r2, r3
 8005b72:	1d3b      	adds	r3, r7, #4
 8005b74:	881b      	ldrh	r3, [r3, #0]
 8005b76:	8013      	strh	r3, [r2, #0]
 8005b78:	1dbb      	adds	r3, r7, #6
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d147      	bne.n	8005c10 <SetEPDblBuffCount+0x174>
 8005b80:	4b2f      	ldr	r3, [pc, #188]	; (8005c40 <SetEPDblBuffCount+0x1a4>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	041b      	lsls	r3, r3, #16
 8005b86:	0c1a      	lsrs	r2, r3, #16
 8005b88:	1dfb      	adds	r3, r7, #7
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	00db      	lsls	r3, r3, #3
 8005b8e:	18d3      	adds	r3, r2, r3
 8005b90:	4a2e      	ldr	r2, [pc, #184]	; (8005c4c <SetEPDblBuffCount+0x1b0>)
 8005b92:	4694      	mov	ip, r2
 8005b94:	4463      	add	r3, ip
 8005b96:	60fb      	str	r3, [r7, #12]
 8005b98:	1d3b      	adds	r3, r7, #4
 8005b9a:	881b      	ldrh	r3, [r3, #0]
 8005b9c:	2b3e      	cmp	r3, #62	; 0x3e
 8005b9e:	d91d      	bls.n	8005bdc <SetEPDblBuffCount+0x140>
 8005ba0:	2314      	movs	r3, #20
 8005ba2:	18fb      	adds	r3, r7, r3
 8005ba4:	1d3a      	adds	r2, r7, #4
 8005ba6:	8812      	ldrh	r2, [r2, #0]
 8005ba8:	0952      	lsrs	r2, r2, #5
 8005baa:	801a      	strh	r2, [r3, #0]
 8005bac:	1d3b      	adds	r3, r7, #4
 8005bae:	881b      	ldrh	r3, [r3, #0]
 8005bb0:	221f      	movs	r2, #31
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	d106      	bne.n	8005bc4 <SetEPDblBuffCount+0x128>
 8005bb6:	2314      	movs	r3, #20
 8005bb8:	18fb      	adds	r3, r7, r3
 8005bba:	881a      	ldrh	r2, [r3, #0]
 8005bbc:	2314      	movs	r3, #20
 8005bbe:	18fb      	adds	r3, r7, r3
 8005bc0:	3a01      	subs	r2, #1
 8005bc2:	801a      	strh	r2, [r3, #0]
 8005bc4:	2314      	movs	r3, #20
 8005bc6:	18fb      	adds	r3, r7, r3
 8005bc8:	881b      	ldrh	r3, [r3, #0]
 8005bca:	029b      	lsls	r3, r3, #10
 8005bcc:	b21b      	sxth	r3, r3
 8005bce:	4a1e      	ldr	r2, [pc, #120]	; (8005c48 <SetEPDblBuffCount+0x1ac>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	b21b      	sxth	r3, r3
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	801a      	strh	r2, [r3, #0]
}
 8005bda:	e02c      	b.n	8005c36 <SetEPDblBuffCount+0x19a>
  * @param   bEpNum,bDir, wCount
  * @retval Address of the Buffer 1.
  */
void SetEPDblBuffCount(uint8_t bEpNum, uint8_t bDir, uint16_t wCount)
{
  _SetEPDblBuffCount(bEpNum, bDir, wCount);
 8005bdc:	2314      	movs	r3, #20
 8005bde:	18fb      	adds	r3, r7, r3
 8005be0:	1d3a      	adds	r2, r7, #4
 8005be2:	8812      	ldrh	r2, [r2, #0]
 8005be4:	0852      	lsrs	r2, r2, #1
 8005be6:	801a      	strh	r2, [r3, #0]
 8005be8:	1d3b      	adds	r3, r7, #4
 8005bea:	881b      	ldrh	r3, [r3, #0]
 8005bec:	2201      	movs	r2, #1
 8005bee:	4013      	ands	r3, r2
 8005bf0:	d006      	beq.n	8005c00 <SetEPDblBuffCount+0x164>
 8005bf2:	2314      	movs	r3, #20
 8005bf4:	18fb      	adds	r3, r7, r3
 8005bf6:	881a      	ldrh	r2, [r3, #0]
 8005bf8:	2314      	movs	r3, #20
 8005bfa:	18fb      	adds	r3, r7, r3
 8005bfc:	3201      	adds	r2, #1
 8005bfe:	801a      	strh	r2, [r3, #0]
 8005c00:	2314      	movs	r3, #20
 8005c02:	18fb      	adds	r3, r7, r3
 8005c04:	881b      	ldrh	r3, [r3, #0]
 8005c06:	029b      	lsls	r3, r3, #10
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	801a      	strh	r2, [r3, #0]
}
 8005c0e:	e012      	b.n	8005c36 <SetEPDblBuffCount+0x19a>
  * @param   bEpNum,bDir, wCount
  * @retval Address of the Buffer 1.
  */
void SetEPDblBuffCount(uint8_t bEpNum, uint8_t bDir, uint16_t wCount)
{
  _SetEPDblBuffCount(bEpNum, bDir, wCount);
 8005c10:	1dbb      	adds	r3, r7, #6
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d10e      	bne.n	8005c36 <SetEPDblBuffCount+0x19a>
 8005c18:	4b09      	ldr	r3, [pc, #36]	; (8005c40 <SetEPDblBuffCount+0x1a4>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	041b      	lsls	r3, r3, #16
 8005c1e:	0c1a      	lsrs	r2, r3, #16
 8005c20:	1dfb      	adds	r3, r7, #7
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	00db      	lsls	r3, r3, #3
 8005c26:	18d3      	adds	r3, r2, r3
 8005c28:	4a08      	ldr	r2, [pc, #32]	; (8005c4c <SetEPDblBuffCount+0x1b0>)
 8005c2a:	4694      	mov	ip, r2
 8005c2c:	4463      	add	r3, ip
 8005c2e:	001a      	movs	r2, r3
 8005c30:	1d3b      	adds	r3, r7, #4
 8005c32:	881b      	ldrh	r3, [r3, #0]
 8005c34:	8013      	strh	r3, [r2, #0]
}
 8005c36:	46c0      	nop			; (mov r8, r8)
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	b007      	add	sp, #28
 8005c3c:	bd90      	pop	{r4, r7, pc}
 8005c3e:	46c0      	nop			; (mov r8, r8)
 8005c40:	40005c50 	.word	0x40005c50
 8005c44:	40006002 	.word	0x40006002
 8005c48:	ffff8000 	.word	0xffff8000
 8005c4c:	40006006 	.word	0x40006006

08005c50 <GetEPDblBuf0Count>:
  *         Buffer endpoint.
  * @param   bEpNum: Endpoint Number.
  * @retval Endpoint Buffer 0 count
  */
uint16_t GetEPDblBuf0Count(uint8_t bEpNum)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b082      	sub	sp, #8
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	0002      	movs	r2, r0
 8005c58:	1dfb      	adds	r3, r7, #7
 8005c5a:	701a      	strb	r2, [r3, #0]
  return(_GetEPDblBuf0Count(bEpNum));
 8005c5c:	4b09      	ldr	r3, [pc, #36]	; (8005c84 <GetEPDblBuf0Count+0x34>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	041b      	lsls	r3, r3, #16
 8005c62:	0c1a      	lsrs	r2, r3, #16
 8005c64:	1dfb      	adds	r3, r7, #7
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	00db      	lsls	r3, r3, #3
 8005c6a:	18d3      	adds	r3, r2, r3
 8005c6c:	4a06      	ldr	r2, [pc, #24]	; (8005c88 <GetEPDblBuf0Count+0x38>)
 8005c6e:	4694      	mov	ip, r2
 8005c70:	4463      	add	r3, ip
 8005c72:	881b      	ldrh	r3, [r3, #0]
 8005c74:	059b      	lsls	r3, r3, #22
 8005c76:	0d9b      	lsrs	r3, r3, #22
 8005c78:	b29b      	uxth	r3, r3
}
 8005c7a:	0018      	movs	r0, r3
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	b002      	add	sp, #8
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	46c0      	nop			; (mov r8, r8)
 8005c84:	40005c50 	.word	0x40005c50
 8005c88:	40006002 	.word	0x40006002

08005c8c <GetEPDblBuf1Count>:
  * @brief Returns the number of data received in the buffer 1 of a double
  * @param   bEpNum: Endpoint Number.
  * @retval Endpoint Buffer 1 count
  */
uint16_t GetEPDblBuf1Count(uint8_t bEpNum)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	0002      	movs	r2, r0
 8005c94:	1dfb      	adds	r3, r7, #7
 8005c96:	701a      	strb	r2, [r3, #0]
  return(_GetEPDblBuf1Count(bEpNum));
 8005c98:	4b09      	ldr	r3, [pc, #36]	; (8005cc0 <GetEPDblBuf1Count+0x34>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	041b      	lsls	r3, r3, #16
 8005c9e:	0c1a      	lsrs	r2, r3, #16
 8005ca0:	1dfb      	adds	r3, r7, #7
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	00db      	lsls	r3, r3, #3
 8005ca6:	18d3      	adds	r3, r2, r3
 8005ca8:	4a06      	ldr	r2, [pc, #24]	; (8005cc4 <GetEPDblBuf1Count+0x38>)
 8005caa:	4694      	mov	ip, r2
 8005cac:	4463      	add	r3, ip
 8005cae:	881b      	ldrh	r3, [r3, #0]
 8005cb0:	059b      	lsls	r3, r3, #22
 8005cb2:	0d9b      	lsrs	r3, r3, #22
 8005cb4:	b29b      	uxth	r3, r3
}
 8005cb6:	0018      	movs	r0, r3
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	b002      	add	sp, #8
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	46c0      	nop			; (mov r8, r8)
 8005cc0:	40005c50 	.word	0x40005c50
 8005cc4:	40006006 	.word	0x40006006

08005cc8 <FreeUserBuffer>:
          toggles bit SW_BUF in the double buffered endpoint register
  * @param   bEpNum, bDir
  * @retval None
  */
void FreeUserBuffer(uint8_t bEpNum, uint8_t bDir)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	0002      	movs	r2, r0
 8005cd0:	1dfb      	adds	r3, r7, #7
 8005cd2:	701a      	strb	r2, [r3, #0]
 8005cd4:	1dbb      	adds	r3, r7, #6
 8005cd6:	1c0a      	adds	r2, r1, #0
 8005cd8:	701a      	strb	r2, [r3, #0]
  if (bDir == EP_DBUF_OUT)
 8005cda:	1dbb      	adds	r3, r7, #6
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d113      	bne.n	8005d0a <FreeUserBuffer+0x42>
  { /* OUT double buffered endpoint */
    _ToggleDTOG_TX(bEpNum);
 8005ce2:	1dfb      	adds	r3, r7, #7
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4a15      	ldr	r2, [pc, #84]	; (8005d40 <FreeUserBuffer+0x78>)
 8005cea:	4694      	mov	ip, r2
 8005cec:	4463      	add	r3, ip
 8005cee:	1dfa      	adds	r2, r7, #7
 8005cf0:	7812      	ldrb	r2, [r2, #0]
 8005cf2:	0092      	lsls	r2, r2, #2
 8005cf4:	4912      	ldr	r1, [pc, #72]	; (8005d40 <FreeUserBuffer+0x78>)
 8005cf6:	468c      	mov	ip, r1
 8005cf8:	4462      	add	r2, ip
 8005cfa:	6812      	ldr	r2, [r2, #0]
 8005cfc:	0011      	movs	r1, r2
 8005cfe:	4a11      	ldr	r2, [pc, #68]	; (8005d44 <FreeUserBuffer+0x7c>)
 8005d00:	400a      	ands	r2, r1
 8005d02:	4911      	ldr	r1, [pc, #68]	; (8005d48 <FreeUserBuffer+0x80>)
 8005d04:	430a      	orrs	r2, r1
 8005d06:	601a      	str	r2, [r3, #0]
  }
  else if (bDir == EP_DBUF_IN)
  { /* IN double buffered endpoint */
    _ToggleDTOG_RX(bEpNum);
  }
}
 8005d08:	e016      	b.n	8005d38 <FreeUserBuffer+0x70>
{
  if (bDir == EP_DBUF_OUT)
  { /* OUT double buffered endpoint */
    _ToggleDTOG_TX(bEpNum);
  }
  else if (bDir == EP_DBUF_IN)
 8005d0a:	1dbb      	adds	r3, r7, #6
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d112      	bne.n	8005d38 <FreeUserBuffer+0x70>
  { /* IN double buffered endpoint */
    _ToggleDTOG_RX(bEpNum);
 8005d12:	1dfb      	adds	r3, r7, #7
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4a09      	ldr	r2, [pc, #36]	; (8005d40 <FreeUserBuffer+0x78>)
 8005d1a:	4694      	mov	ip, r2
 8005d1c:	4463      	add	r3, ip
 8005d1e:	1dfa      	adds	r2, r7, #7
 8005d20:	7812      	ldrb	r2, [r2, #0]
 8005d22:	0092      	lsls	r2, r2, #2
 8005d24:	4906      	ldr	r1, [pc, #24]	; (8005d40 <FreeUserBuffer+0x78>)
 8005d26:	468c      	mov	ip, r1
 8005d28:	4462      	add	r2, ip
 8005d2a:	6812      	ldr	r2, [r2, #0]
 8005d2c:	0011      	movs	r1, r2
 8005d2e:	4a05      	ldr	r2, [pc, #20]	; (8005d44 <FreeUserBuffer+0x7c>)
 8005d30:	400a      	ands	r2, r1
 8005d32:	4906      	ldr	r1, [pc, #24]	; (8005d4c <FreeUserBuffer+0x84>)
 8005d34:	430a      	orrs	r2, r1
 8005d36:	601a      	str	r2, [r3, #0]
  }
}
 8005d38:	46c0      	nop			; (mov r8, r8)
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	b002      	add	sp, #8
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	40005c00 	.word	0x40005c00
 8005d44:	00000f0f 	.word	0x00000f0f
 8005d48:	000080c0 	.word	0x000080c0
 8005d4c:	0000c080 	.word	0x0000c080

08005d50 <UserToPMABufferCopy>:
  * @param   wPMABufAddr: address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b086      	sub	sp, #24
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	0008      	movs	r0, r1
 8005d5a:	0011      	movs	r1, r2
 8005d5c:	1cbb      	adds	r3, r7, #2
 8005d5e:	1c02      	adds	r2, r0, #0
 8005d60:	801a      	strh	r2, [r3, #0]
 8005d62:	003b      	movs	r3, r7
 8005d64:	1c0a      	adds	r2, r1, #0
 8005d66:	801a      	strh	r2, [r3, #0]
  uint32_t n = (wNBytes + 1) >> 1; 
 8005d68:	003b      	movs	r3, r7
 8005d6a:	881b      	ldrh	r3, [r3, #0]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	105b      	asrs	r3, r3, #1
 8005d70:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint16_t temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr + PMAAddr);
 8005d72:	1cbb      	adds	r3, r7, #2
 8005d74:	881b      	ldrh	r3, [r3, #0]
 8005d76:	4a18      	ldr	r2, [pc, #96]	; (8005dd8 <UserToPMABufferCopy+0x88>)
 8005d78:	4694      	mov	ip, r2
 8005d7a:	4463      	add	r3, ip
 8005d7c:	613b      	str	r3, [r7, #16]
  
  for (i = n; i != 0; i--)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	617b      	str	r3, [r7, #20]
 8005d82:	e021      	b.n	8005dc8 <UserToPMABufferCopy+0x78>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	781a      	ldrb	r2, [r3, #0]
 8005d88:	230a      	movs	r3, #10
 8005d8a:	18fb      	adds	r3, r7, r3
 8005d8c:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	3301      	adds	r3, #1
 8005d92:	607b      	str	r3, [r7, #4]
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	021b      	lsls	r3, r3, #8
 8005d9a:	b21a      	sxth	r2, r3
 8005d9c:	230a      	movs	r3, #10
 8005d9e:	18fb      	adds	r3, r7, r3
 8005da0:	2100      	movs	r1, #0
 8005da2:	5e5b      	ldrsh	r3, [r3, r1]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	b21a      	sxth	r2, r3
 8005da8:	2308      	movs	r3, #8
 8005daa:	18fb      	adds	r3, r7, r3
 8005dac:	801a      	strh	r2, [r3, #0]
    *pdwVal++ = temp2;
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	1c9a      	adds	r2, r3, #2
 8005db2:	613a      	str	r2, [r7, #16]
 8005db4:	2208      	movs	r2, #8
 8005db6:	18ba      	adds	r2, r7, r2
 8005db8:	8812      	ldrh	r2, [r2, #0]
 8005dba:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	607b      	str	r3, [r7, #4]
  uint32_t i;
  uint16_t temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr + PMAAddr);
  
  for (i = n; i != 0; i--)
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	617b      	str	r3, [r7, #20]
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1da      	bne.n	8005d84 <UserToPMABufferCopy+0x34>
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pbUsrBuf++;
  }
}
 8005dce:	46c0      	nop			; (mov r8, r8)
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	b006      	add	sp, #24
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	46c0      	nop			; (mov r8, r8)
 8005dd8:	40006000 	.word	0x40006000

08005ddc <PMAToUserBufferCopy>:
  * @param   wPMABufAddr: address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	0008      	movs	r0, r1
 8005de6:	0011      	movs	r1, r2
 8005de8:	1cbb      	adds	r3, r7, #2
 8005dea:	1c02      	adds	r2, r0, #0
 8005dec:	801a      	strh	r2, [r3, #0]
 8005dee:	003b      	movs	r3, r7
 8005df0:	1c0a      	adds	r2, r1, #0
 8005df2:	801a      	strh	r2, [r3, #0]
  uint32_t n = (wNBytes + 1) >> 1;
 8005df4:	003b      	movs	r3, r7
 8005df6:	881b      	ldrh	r3, [r3, #0]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	105b      	asrs	r3, r3, #1
 8005dfc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr + PMAAddr);
 8005dfe:	1cbb      	adds	r3, r7, #2
 8005e00:	881b      	ldrh	r3, [r3, #0]
 8005e02:	4a0e      	ldr	r2, [pc, #56]	; (8005e3c <PMAToUserBufferCopy+0x60>)
 8005e04:	4694      	mov	ip, r2
 8005e06:	4463      	add	r3, ip
 8005e08:	613b      	str	r3, [r7, #16]
  for (i = n; i != 0; i--)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	617b      	str	r3, [r7, #20]
 8005e0e:	e00d      	b.n	8005e2c <PMAToUserBufferCopy+0x50>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	1c5a      	adds	r2, r3, #1
 8005e14:	607a      	str	r2, [r7, #4]
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	1c91      	adds	r1, r2, #2
 8005e1a:	6139      	str	r1, [r7, #16]
 8005e1c:	8812      	ldrh	r2, [r2, #0]
 8005e1e:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	3301      	adds	r3, #1
 8005e24:	607b      	str	r3, [r7, #4]
{
  uint32_t n = (wNBytes + 1) >> 1;
  uint32_t i;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr + PMAAddr);
  for (i = n; i != 0; i--)
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	617b      	str	r3, [r7, #20]
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1ee      	bne.n	8005e10 <PMAToUserBufferCopy+0x34>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 8005e32:	46c0      	nop			; (mov r8, r8)
 8005e34:	46bd      	mov	sp, r7
 8005e36:	b006      	add	sp, #24
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	46c0      	nop			; (mov r8, r8)
 8005e3c:	40006000 	.word	0x40006000

08005e40 <SYSCFG_EXTILineConfig>:
  *         For STM32F072: (0..15) for GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, (0..10) for GPIOF.
  *         For STM32F031: (0..15) for GPIOA, GPIOB, (13..15) for GPIOC and (0..1, 6..7) for GPIOF.
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8005e40:	b5b0      	push	{r4, r5, r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	0002      	movs	r2, r0
 8005e48:	1dfb      	adds	r3, r7, #7
 8005e4a:	701a      	strb	r2, [r3, #0]
 8005e4c:	1dbb      	adds	r3, r7, #6
 8005e4e:	1c0a      	adds	r2, r1, #0
 8005e50:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0x00;
 8005e52:	2300      	movs	r3, #0
 8005e54:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8005e56:	1dbb      	adds	r3, r7, #6
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	2203      	movs	r2, #3
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	220f      	movs	r2, #15
 8005e62:	409a      	lsls	r2, r3
 8005e64:	0013      	movs	r3, r2
 8005e66:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8005e68:	4919      	ldr	r1, [pc, #100]	; (8005ed0 <SYSCFG_EXTILineConfig+0x90>)
 8005e6a:	1dbb      	adds	r3, r7, #6
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	089b      	lsrs	r3, r3, #2
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	0018      	movs	r0, r3
 8005e74:	4a16      	ldr	r2, [pc, #88]	; (8005ed0 <SYSCFG_EXTILineConfig+0x90>)
 8005e76:	1dbb      	adds	r3, r7, #6
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	089b      	lsrs	r3, r3, #2
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	3302      	adds	r3, #2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	589b      	ldr	r3, [r3, r2]
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	43d2      	mvns	r2, r2
 8005e88:	401a      	ands	r2, r3
 8005e8a:	1c83      	adds	r3, r0, #2
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	505a      	str	r2, [r3, r1]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8005e90:	480f      	ldr	r0, [pc, #60]	; (8005ed0 <SYSCFG_EXTILineConfig+0x90>)
 8005e92:	1dbb      	adds	r3, r7, #6
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	089b      	lsrs	r3, r3, #2
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	001d      	movs	r5, r3
 8005e9c:	4a0c      	ldr	r2, [pc, #48]	; (8005ed0 <SYSCFG_EXTILineConfig+0x90>)
 8005e9e:	1dbb      	adds	r3, r7, #6
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	089b      	lsrs	r3, r3, #2
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	3302      	adds	r3, #2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	589a      	ldr	r2, [r3, r2]
 8005eac:	1dfb      	adds	r3, r7, #7
 8005eae:	7819      	ldrb	r1, [r3, #0]
 8005eb0:	1dbb      	adds	r3, r7, #6
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	2403      	movs	r4, #3
 8005eb6:	4023      	ands	r3, r4
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4099      	lsls	r1, r3
 8005ebc:	000b      	movs	r3, r1
 8005ebe:	431a      	orrs	r2, r3
 8005ec0:	1cab      	adds	r3, r5, #2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	501a      	str	r2, [r3, r0]
}
 8005ec6:	46c0      	nop			; (mov r8, r8)
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	b004      	add	sp, #16
 8005ecc:	bdb0      	pop	{r4, r5, r7, pc}
 8005ece:	46c0      	nop			; (mov r8, r8)
 8005ed0:	40010000 	.word	0x40010000

08005ed4 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005ede:	230e      	movs	r3, #14
 8005ee0:	18fb      	adds	r3, r7, r3
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	801a      	strh	r2, [r3, #0]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8005ee6:	230e      	movs	r3, #14
 8005ee8:	18fb      	adds	r3, r7, r3
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	8812      	ldrh	r2, [r2, #0]
 8005eee:	801a      	strh	r2, [r3, #0]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8005ef0:	230e      	movs	r3, #14
 8005ef2:	18fb      	adds	r3, r7, r3
 8005ef4:	220e      	movs	r2, #14
 8005ef6:	18ba      	adds	r2, r7, r2
 8005ef8:	8811      	ldrh	r1, [r2, #0]
 8005efa:	22c1      	movs	r2, #193	; 0xc1
 8005efc:	0192      	lsls	r2, r2, #6
 8005efe:	400a      	ands	r2, r1
 8005f00:	801a      	strh	r2, [r3, #0]
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	881a      	ldrh	r2, [r3, #0]
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	89db      	ldrh	r3, [r3, #14]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	b29a      	uxth	r2, r3
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8005f12:	4313      	orrs	r3, r2
 8005f14:	b29a      	uxth	r2, r3
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	b29a      	uxth	r2, r3
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
                      SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8005f22:	4313      	orrs	r3, r2
 8005f24:	b29a      	uxth	r2, r3
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
                      SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	b299      	uxth	r1, r3
 8005f2e:	230e      	movs	r3, #14
 8005f30:	18fb      	adds	r3, r7, r3
 8005f32:	220e      	movs	r2, #14
 8005f34:	18ba      	adds	r2, r7, r2
 8005f36:	8812      	ldrh	r2, [r2, #0]
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	801a      	strh	r2, [r3, #0]
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
                      SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	220e      	movs	r2, #14
 8005f40:	18ba      	adds	r2, r7, r2
 8005f42:	8812      	ldrh	r2, [r2, #0]
 8005f44:	801a      	strh	r2, [r3, #0]
  /*-------------------------Data Size Configuration -----------------------*/
  /* Get the SPIx CR2 value */
  tmpreg = SPIx->CR2;
 8005f46:	230e      	movs	r3, #14
 8005f48:	18fb      	adds	r3, r7, r3
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	8892      	ldrh	r2, [r2, #4]
 8005f4e:	801a      	strh	r2, [r3, #0]
  /* Clear DS[3:0] bits */
  tmpreg &=(uint16_t)~SPI_CR2_DS;
 8005f50:	230e      	movs	r3, #14
 8005f52:	18fb      	adds	r3, r7, r3
 8005f54:	220e      	movs	r2, #14
 8005f56:	18ba      	adds	r2, r7, r2
 8005f58:	8812      	ldrh	r2, [r2, #0]
 8005f5a:	491e      	ldr	r1, [pc, #120]	; (8005fd4 <SPI_Init+0x100>)
 8005f5c:	400a      	ands	r2, r1
 8005f5e:	801a      	strh	r2, [r3, #0]
  /* Configure SPIx: Data Size */
  tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	8899      	ldrh	r1, [r3, #4]
 8005f64:	230e      	movs	r3, #14
 8005f66:	18fb      	adds	r3, r7, r3
 8005f68:	220e      	movs	r2, #14
 8005f6a:	18ba      	adds	r2, r7, r2
 8005f6c:	8812      	ldrh	r2, [r2, #0]
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	801a      	strh	r2, [r3, #0]
  /* Write to SPIx CR2 */
  SPIx->CR2 = tmpreg;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	220e      	movs	r2, #14
 8005f76:	18ba      	adds	r2, r7, r2
 8005f78:	8812      	ldrh	r2, [r2, #0]
 8005f7a:	809a      	strh	r2, [r3, #4]
  
  /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	8a1a      	ldrh	r2, [r3, #16]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	821a      	strh	r2, [r3, #16]
  
  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8005f84:	230e      	movs	r3, #14
 8005f86:	18fb      	adds	r3, r7, r3
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	8812      	ldrh	r2, [r2, #0]
 8005f8c:	801a      	strh	r2, [r3, #0]
  /* Clear MSTR bit */
  tmpreg &= CR1_CLEAR_MASK2;
 8005f8e:	230e      	movs	r3, #14
 8005f90:	18fb      	adds	r3, r7, r3
 8005f92:	220e      	movs	r2, #14
 8005f94:	18ba      	adds	r2, r7, r2
 8005f96:	8812      	ldrh	r2, [r2, #0]
 8005f98:	2104      	movs	r1, #4
 8005f9a:	438a      	bics	r2, r1
 8005f9c:	801a      	strh	r2, [r3, #0]
  /* Configure SPIx: master/slave mode */  
  /* Set MSTR bit according to SPI_Mode */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Mode);  
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	8859      	ldrh	r1, [r3, #2]
 8005fa2:	230e      	movs	r3, #14
 8005fa4:	18fb      	adds	r3, r7, r3
 8005fa6:	220e      	movs	r2, #14
 8005fa8:	18ba      	adds	r2, r7, r2
 8005faa:	8812      	ldrh	r2, [r2, #0]
 8005fac:	430a      	orrs	r2, r1
 8005fae:	801a      	strh	r2, [r3, #0]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;  
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	220e      	movs	r2, #14
 8005fb4:	18ba      	adds	r2, r7, r2
 8005fb6:	8812      	ldrh	r2, [r2, #0]
 8005fb8:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	8b9b      	ldrh	r3, [r3, #28]
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	4a05      	ldr	r2, [pc, #20]	; (8005fd8 <SPI_Init+0x104>)
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	839a      	strh	r2, [r3, #28]
}
 8005fca:	46c0      	nop			; (mov r8, r8)
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	b004      	add	sp, #16
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	46c0      	nop			; (mov r8, r8)
 8005fd4:	fffff0ff 	.word	0xfffff0ff
 8005fd8:	fffff7ff 	.word	0xfffff7ff

08005fdc <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	000a      	movs	r2, r1
 8005fe6:	1cfb      	adds	r3, r7, #3
 8005fe8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005fea:	1cfb      	adds	r3, r7, #3
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d008      	beq.n	8006004 <SPI_Cmd+0x28>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	881b      	ldrh	r3, [r3, #0]
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	2240      	movs	r2, #64	; 0x40
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 8006002:	e007      	b.n	8006014 <SPI_Cmd+0x38>
    SPIx->CR1 |= SPI_CR1_SPE;
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	881b      	ldrh	r3, [r3, #0]
 8006008:	b29b      	uxth	r3, r3
 800600a:	2240      	movs	r2, #64	; 0x40
 800600c:	4393      	bics	r3, r2
 800600e:	b29a      	uxth	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	801a      	strh	r2, [r3, #0]
  }
}
 8006014:	46c0      	nop			; (mov r8, r8)
 8006016:	46bd      	mov	sp, r7
 8006018:	b002      	add	sp, #8
 800601a:	bd80      	pop	{r7, pc}

0800601c <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	0008      	movs	r0, r1
 8006026:	0011      	movs	r1, r2
 8006028:	1cbb      	adds	r3, r7, #2
 800602a:	1c02      	adds	r2, r0, #0
 800602c:	801a      	strh	r2, [r3, #0]
 800602e:	1c7b      	adds	r3, r7, #1
 8006030:	1c0a      	adds	r2, r1, #0
 8006032:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMA_REQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8006034:	1c7b      	adds	r3, r7, #1
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d009      	beq.n	8006050 <SPI_I2S_DMACmd+0x34>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	889b      	ldrh	r3, [r3, #4]
 8006040:	b29a      	uxth	r2, r3
 8006042:	1cbb      	adds	r3, r7, #2
 8006044:	881b      	ldrh	r3, [r3, #0]
 8006046:	4313      	orrs	r3, r2
 8006048:	b29a      	uxth	r2, r3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
  }
}
 800604e:	e00a      	b.n	8006066 <SPI_I2S_DMACmd+0x4a>
    SPIx->CR2 |= SPI_I2S_DMAReq;
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	889b      	ldrh	r3, [r3, #4]
 8006054:	b29b      	uxth	r3, r3
 8006056:	1cba      	adds	r2, r7, #2
 8006058:	8812      	ldrh	r2, [r2, #0]
 800605a:	43d2      	mvns	r2, r2
 800605c:	b292      	uxth	r2, r2
 800605e:	4013      	ands	r3, r2
 8006060:	b29a      	uxth	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	809a      	strh	r2, [r3, #4]
  }
}
 8006066:	46c0      	nop			; (mov r8, r8)
 8006068:	46bd      	mov	sp, r7
 800606a:	b002      	add	sp, #8
 800606c:	bd80      	pop	{r7, pc}
 800606e:	46c0      	nop			; (mov r8, r8)

08006070 <RCC_USBCLKConfig>:
  *             @arg RCC_USBCLK_HSI48: USB clock = HSI48
  *             @arg RCC_USBCLK_PLLCLK: USB clock = PLL clock
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLK)
{ 
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK(RCC_USBCLK));

  /* Clear USBSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_USBSW;
 8006078:	4b07      	ldr	r3, [pc, #28]	; (8006098 <RCC_USBCLKConfig+0x28>)
 800607a:	4a07      	ldr	r2, [pc, #28]	; (8006098 <RCC_USBCLKConfig+0x28>)
 800607c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800607e:	2180      	movs	r1, #128	; 0x80
 8006080:	438a      	bics	r2, r1
 8006082:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set USBSW bits according to RCC_USBCLK value */
  RCC->CFGR3 |= RCC_USBCLK;
 8006084:	4b04      	ldr	r3, [pc, #16]	; (8006098 <RCC_USBCLKConfig+0x28>)
 8006086:	4a04      	ldr	r2, [pc, #16]	; (8006098 <RCC_USBCLKConfig+0x28>)
 8006088:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	430a      	orrs	r2, r1
 800608e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006090:	46c0      	nop			; (mov r8, r8)
 8006092:	46bd      	mov	sp, r7
 8006094:	b002      	add	sp, #8
 8006096:	bd80      	pop	{r7, pc}
 8006098:	40021000 	.word	0x40021000

0800609c <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	000a      	movs	r2, r1
 80060a6:	1cfb      	adds	r3, r7, #3
 80060a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80060aa:	1cfb      	adds	r3, r7, #3
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d006      	beq.n	80060c0 <RCC_AHBPeriphClockCmd+0x24>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80060b2:	4b09      	ldr	r3, [pc, #36]	; (80060d8 <RCC_AHBPeriphClockCmd+0x3c>)
 80060b4:	4a08      	ldr	r2, [pc, #32]	; (80060d8 <RCC_AHBPeriphClockCmd+0x3c>)
 80060b6:	6951      	ldr	r1, [r2, #20]
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	430a      	orrs	r2, r1
 80060bc:	615a      	str	r2, [r3, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 80060be:	e006      	b.n	80060ce <RCC_AHBPeriphClockCmd+0x32>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80060c0:	4b05      	ldr	r3, [pc, #20]	; (80060d8 <RCC_AHBPeriphClockCmd+0x3c>)
 80060c2:	4a05      	ldr	r2, [pc, #20]	; (80060d8 <RCC_AHBPeriphClockCmd+0x3c>)
 80060c4:	6952      	ldr	r2, [r2, #20]
 80060c6:	6879      	ldr	r1, [r7, #4]
 80060c8:	43c9      	mvns	r1, r1
 80060ca:	400a      	ands	r2, r1
 80060cc:	615a      	str	r2, [r3, #20]
  }
}
 80060ce:	46c0      	nop			; (mov r8, r8)
 80060d0:	46bd      	mov	sp, r7
 80060d2:	b002      	add	sp, #8
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	46c0      	nop			; (mov r8, r8)
 80060d8:	40021000 	.word	0x40021000

080060dc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	000a      	movs	r2, r1
 80060e6:	1cfb      	adds	r3, r7, #3
 80060e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80060ea:	1cfb      	adds	r3, r7, #3
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d006      	beq.n	8006100 <RCC_APB2PeriphClockCmd+0x24>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80060f2:	4b09      	ldr	r3, [pc, #36]	; (8006118 <RCC_APB2PeriphClockCmd+0x3c>)
 80060f4:	4a08      	ldr	r2, [pc, #32]	; (8006118 <RCC_APB2PeriphClockCmd+0x3c>)
 80060f6:	6991      	ldr	r1, [r2, #24]
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	430a      	orrs	r2, r1
 80060fc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80060fe:	e006      	b.n	800610e <RCC_APB2PeriphClockCmd+0x32>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8006100:	4b05      	ldr	r3, [pc, #20]	; (8006118 <RCC_APB2PeriphClockCmd+0x3c>)
 8006102:	4a05      	ldr	r2, [pc, #20]	; (8006118 <RCC_APB2PeriphClockCmd+0x3c>)
 8006104:	6992      	ldr	r2, [r2, #24]
 8006106:	6879      	ldr	r1, [r7, #4]
 8006108:	43c9      	mvns	r1, r1
 800610a:	400a      	ands	r2, r1
 800610c:	619a      	str	r2, [r3, #24]
  }
}
 800610e:	46c0      	nop			; (mov r8, r8)
 8006110:	46bd      	mov	sp, r7
 8006112:	b002      	add	sp, #8
 8006114:	bd80      	pop	{r7, pc}
 8006116:	46c0      	nop			; (mov r8, r8)
 8006118:	40021000 	.word	0x40021000

0800611c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	000a      	movs	r2, r1
 8006126:	1cfb      	adds	r3, r7, #3
 8006128:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800612a:	1cfb      	adds	r3, r7, #3
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d006      	beq.n	8006140 <RCC_APB1PeriphClockCmd+0x24>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8006132:	4b09      	ldr	r3, [pc, #36]	; (8006158 <RCC_APB1PeriphClockCmd+0x3c>)
 8006134:	4a08      	ldr	r2, [pc, #32]	; (8006158 <RCC_APB1PeriphClockCmd+0x3c>)
 8006136:	69d1      	ldr	r1, [r2, #28]
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	430a      	orrs	r2, r1
 800613c:	61da      	str	r2, [r3, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800613e:	e006      	b.n	800614e <RCC_APB1PeriphClockCmd+0x32>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8006140:	4b05      	ldr	r3, [pc, #20]	; (8006158 <RCC_APB1PeriphClockCmd+0x3c>)
 8006142:	4a05      	ldr	r2, [pc, #20]	; (8006158 <RCC_APB1PeriphClockCmd+0x3c>)
 8006144:	69d2      	ldr	r2, [r2, #28]
 8006146:	6879      	ldr	r1, [r7, #4]
 8006148:	43c9      	mvns	r1, r1
 800614a:	400a      	ands	r2, r1
 800614c:	61da      	str	r2, [r3, #28]
  }
}
 800614e:	46c0      	nop			; (mov r8, r8)
 8006150:	46bd      	mov	sp, r7
 8006152:	b002      	add	sp, #8
 8006154:	bd80      	pop	{r7, pc}
 8006156:	46c0      	nop			; (mov r8, r8)
 8006158:	40021000 	.word	0x40021000

0800615c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00;
 8006164:	2300      	movs	r3, #0
 8006166:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	789b      	ldrb	r3, [r3, #2]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d039      	beq.n	80061e4 <NVIC_Init+0x88>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 8006170:	4a24      	ldr	r2, [pc, #144]	; (8006204 <NVIC_Init+0xa8>)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	089b      	lsrs	r3, r3, #2
 8006178:	b2db      	uxtb	r3, r3
 800617a:	33c0      	adds	r3, #192	; 0xc0
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	589b      	ldr	r3, [r3, r2]
 8006180:	60fb      	str	r3, [r7, #12]
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	001a      	movs	r2, r3
 8006188:	2303      	movs	r3, #3
 800618a:	4013      	ands	r3, r2
 800618c:	00db      	lsls	r3, r3, #3
 800618e:	22ff      	movs	r2, #255	; 0xff
 8006190:	409a      	lsls	r2, r3
 8006192:	0013      	movs	r3, r2
 8006194:	43da      	mvns	r2, r3
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	4013      	ands	r3, r2
 800619a:	60fb      	str	r3, [r7, #12]
    tmppriority |= (uint32_t)((((uint32_t)NVIC_InitStruct->NVIC_IRQChannelPriority << 6) & 0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8));    
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	785b      	ldrb	r3, [r3, #1]
 80061a0:	019b      	lsls	r3, r3, #6
 80061a2:	22ff      	movs	r2, #255	; 0xff
 80061a4:	401a      	ands	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	0019      	movs	r1, r3
 80061ac:	2303      	movs	r3, #3
 80061ae:	400b      	ands	r3, r1
 80061b0:	00db      	lsls	r3, r3, #3
 80061b2:	409a      	lsls	r2, r3
 80061b4:	0013      	movs	r3, r2
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	60fb      	str	r3, [r7, #12]
    
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02] = tmppriority;
 80061bc:	4911      	ldr	r1, [pc, #68]	; (8006204 <NVIC_Init+0xa8>)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	089b      	lsrs	r3, r3, #2
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	33c0      	adds	r3, #192	; 0xc0
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	505a      	str	r2, [r3, r1]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80061ce:	4b0d      	ldr	r3, [pc, #52]	; (8006204 <NVIC_Init+0xa8>)
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	7812      	ldrb	r2, [r2, #0]
 80061d4:	0011      	movs	r1, r2
 80061d6:	221f      	movs	r2, #31
 80061d8:	400a      	ands	r2, r1
 80061da:	2101      	movs	r1, #1
 80061dc:	4091      	lsls	r1, r2
 80061de:	000a      	movs	r2, r1
 80061e0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80061e2:	e00a      	b.n	80061fa <NVIC_Init+0x9e>
    NVIC->ISER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80061e4:	4907      	ldr	r1, [pc, #28]	; (8006204 <NVIC_Init+0xa8>)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	001a      	movs	r2, r3
 80061ec:	231f      	movs	r3, #31
 80061ee:	4013      	ands	r3, r2
 80061f0:	2201      	movs	r2, #1
 80061f2:	409a      	lsls	r2, r3
 80061f4:	0013      	movs	r3, r2
 80061f6:	2280      	movs	r2, #128	; 0x80
 80061f8:	508b      	str	r3, [r1, r2]
  }
}
 80061fa:	46c0      	nop			; (mov r8, r8)
 80061fc:	46bd      	mov	sp, r7
 80061fe:	b004      	add	sp, #16
 8006200:	bd80      	pop	{r7, pc}
 8006202:	46c0      	nop			; (mov r8, r8)
 8006204:	e000e100 	.word	0xe000e100

08006208 <SysTick_CLKSourceConfig>:
  *            @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *            @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b04      	cmp	r3, #4
 8006214:	d106      	bne.n	8006224 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8006216:	4b08      	ldr	r3, [pc, #32]	; (8006238 <SysTick_CLKSourceConfig+0x30>)
 8006218:	4a07      	ldr	r2, [pc, #28]	; (8006238 <SysTick_CLKSourceConfig+0x30>)
 800621a:	6812      	ldr	r2, [r2, #0]
 800621c:	2104      	movs	r1, #4
 800621e:	430a      	orrs	r2, r1
 8006220:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
  }
}
 8006222:	e005      	b.n	8006230 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8006224:	4b04      	ldr	r3, [pc, #16]	; (8006238 <SysTick_CLKSourceConfig+0x30>)
 8006226:	4a04      	ldr	r2, [pc, #16]	; (8006238 <SysTick_CLKSourceConfig+0x30>)
 8006228:	6812      	ldr	r2, [r2, #0]
 800622a:	2104      	movs	r1, #4
 800622c:	438a      	bics	r2, r1
 800622e:	601a      	str	r2, [r3, #0]
  }
}
 8006230:	46c0      	nop			; (mov r8, r8)
 8006232:	46bd      	mov	sp, r7
 8006234:	b002      	add	sp, #8
 8006236:	bd80      	pop	{r7, pc}
 8006238:	e000e010 	.word	0xe000e010

0800623c <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *         contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006246:	2300      	movs	r3, #0
 8006248:	60fb      	str	r3, [r7, #12]
  assert_param(IS_I2C_OWN_ADDRESS1(I2C_InitStruct->I2C_OwnAddress1));
  assert_param(IS_I2C_ACK(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

  /* Disable I2Cx Peripheral */
  I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2201      	movs	r2, #1
 8006250:	4393      	bics	r3, r2
 8006252:	001a      	movs	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx FILTERS Configuration ------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	60fb      	str	r3, [r7, #12]
  /* Clear I2Cx CR1 register */
  tmpreg &= CR1_CLEAR_MASK;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	4a27      	ldr	r2, [pc, #156]	; (8006300 <I2C_Init+0xc4>)
 8006262:	4013      	ands	r3, r2
 8006264:	60fb      	str	r3, [r7, #12]
  /* Configure I2Cx: analog and digital filter */
  /* Set ANFOFF bit according to I2C_AnalogFilter value */
  /* Set DFN bits according to I2C_DigitalFilter value */
  tmpreg |= (uint32_t)I2C_InitStruct->I2C_AnalogFilter |(I2C_InitStruct->I2C_DigitalFilter << 8);
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	021b      	lsls	r3, r3, #8
 8006270:	4313      	orrs	r3, r2
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	4313      	orrs	r3, r2
 8006276:	60fb      	str	r3, [r7, #12]

  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMING Configuration -------------------*/
  /* Configure I2Cx: Timing */
  /* Set TIMINGR bits according to I2C_Timing */
  /* Write to I2Cx TIMING */
  I2Cx->TIMINGR = I2C_InitStruct->I2C_Timing & TIMING_CLEAR_MASK;
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a20      	ldr	r2, [pc, #128]	; (8006304 <I2C_Init+0xc8>)
 8006284:	401a      	ands	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	611a      	str	r2, [r3, #16]

  /* Enable I2Cx Peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2201      	movs	r2, #1
 8006290:	431a      	orrs	r2, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Clear tmpreg local variable */
  tmpreg = 0;
 8006296:	2300      	movs	r3, #0
 8006298:	60fb      	str	r3, [r7, #12]
  /* Clear OAR1 register */
  I2Cx->OAR1 = (uint32_t)tmpreg;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	609a      	str	r2, [r3, #8]
  /* Clear OAR2 register */
  I2Cx->OAR2 = (uint32_t)tmpreg;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	60da      	str	r2, [r3, #12]
  /* Configure I2Cx: Own Address1 and acknowledged address */
  /* Set OA1MODE bit according to I2C_AcknowledgedAddress value */
  /* Set OA1 bits according to I2C_OwnAddress1 value */
  tmpreg = (uint32_t)((uint32_t)I2C_InitStruct->I2C_AcknowledgedAddress | \
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	699a      	ldr	r2, [r3, #24]
                      (uint32_t)I2C_InitStruct->I2C_OwnAddress1);
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	691b      	ldr	r3, [r3, #16]
  /* Clear OAR2 register */
  I2Cx->OAR2 = (uint32_t)tmpreg;
  /* Configure I2Cx: Own Address1 and acknowledged address */
  /* Set OA1MODE bit according to I2C_AcknowledgedAddress value */
  /* Set OA1 bits according to I2C_OwnAddress1 value */
  tmpreg = (uint32_t)((uint32_t)I2C_InitStruct->I2C_AcknowledgedAddress | \
 80062ae:	4313      	orrs	r3, r2
 80062b0:	60fb      	str	r3, [r7, #12]
                      (uint32_t)I2C_InitStruct->I2C_OwnAddress1);
  /* Write to I2Cx OAR1 */
  I2Cx->OAR1 = tmpreg;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	609a      	str	r2, [r3, #8]
  /* Enable Own Address1 acknowledgement */
  I2Cx->OAR1 |= I2C_OAR1_OA1EN;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	2280      	movs	r2, #128	; 0x80
 80062be:	0212      	lsls	r2, r2, #8
 80062c0:	431a      	orrs	r2, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx MODE Configuration ---------------------*/
  /* Configure I2Cx: mode */
  /* Set SMBDEN and SMBHEN bits according to I2C_Mode value */
  tmpreg = I2C_InitStruct->I2C_Mode;
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	60fb      	str	r3, [r7, #12]
  /* Write to I2Cx CR1 */
  I2Cx->CR1 |= tmpreg;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	431a      	orrs	r2, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx ACK Configuration ----------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	60fb      	str	r3, [r7, #12]
  /* Clear I2Cx CR2 register */
  tmpreg &= CR2_CLEAR_MASK;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	4a09      	ldr	r2, [pc, #36]	; (8006308 <I2C_Init+0xcc>)
 80062e2:	4013      	ands	r3, r2
 80062e4:	60fb      	str	r3, [r7, #12]
  /* Configure I2Cx: acknowledgement */
  /* Set NACK bit according to I2C_Ack value */
  tmpreg |= I2C_InitStruct->I2C_Ack;
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	695b      	ldr	r3, [r3, #20]
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	60fb      	str	r3, [r7, #12]
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	605a      	str	r2, [r3, #4]
}
 80062f6:	46c0      	nop			; (mov r8, r8)
 80062f8:	46bd      	mov	sp, r7
 80062fa:	b004      	add	sp, #16
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	46c0      	nop			; (mov r8, r8)
 8006300:	00cfe0ff 	.word	0x00cfe0ff
 8006304:	f0ffffff 	.word	0xf0ffffff
 8006308:	07ff7fff 	.word	0x07ff7fff

0800630c <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	000a      	movs	r2, r1
 8006316:	1cfb      	adds	r3, r7, #3
 8006318:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800631a:	1cfb      	adds	r3, r7, #3
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d006      	beq.n	8006330 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2201      	movs	r2, #1
 8006328:	431a      	orrs	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
  }
}
 800632e:	e006      	b.n	800633e <I2C_Cmd+0x32>
    I2Cx->CR1 |= I2C_CR1_PE;
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2201      	movs	r2, #1
 8006336:	4393      	bics	r3, r2
 8006338:	001a      	movs	r2, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	601a      	str	r2, [r3, #0]
  }
}
 800633e:	46c0      	nop			; (mov r8, r8)
 8006340:	46bd      	mov	sp, r7
 8006342:	b002      	add	sp, #8
 8006344:	bd80      	pop	{r7, pc}
 8006346:	46c0      	nop			; (mov r8, r8)

08006348 <I2C_TransferHandling>:
  *            @arg I2C_Generate_Start_Read: Generate Restart for read request.
  *            @arg I2C_Generate_Start_Write: Generate Restart for write request.
  * @retval None
  */
void I2C_TransferHandling(I2C_TypeDef* I2Cx, uint16_t Address, uint8_t Number_Bytes, uint32_t ReloadEndMode, uint32_t StartStopMode)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b086      	sub	sp, #24
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	0008      	movs	r0, r1
 8006352:	0011      	movs	r1, r2
 8006354:	607b      	str	r3, [r7, #4]
 8006356:	230a      	movs	r3, #10
 8006358:	18fb      	adds	r3, r7, r3
 800635a:	1c02      	adds	r2, r0, #0
 800635c:	801a      	strh	r2, [r3, #0]
 800635e:	2309      	movs	r3, #9
 8006360:	18fb      	adds	r3, r7, r3
 8006362:	1c0a      	adds	r2, r1, #0
 8006364:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
 8006366:	2300      	movs	r3, #0
 8006368:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_SLAVE_ADDRESS(Address));  
  assert_param(IS_RELOAD_END_MODE(ReloadEndMode));
  assert_param(IS_START_STOP_MODE(StartStopMode));
    
  /* Get the CR2 register value */
  tmpreg = I2Cx->CR2;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	617b      	str	r3, [r7, #20]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	4a0f      	ldr	r2, [pc, #60]	; (80063b0 <I2C_TransferHandling+0x68>)
 8006374:	4013      	ands	r3, r2
 8006376:	617b      	str	r3, [r7, #20]
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_CR2_SADD) | (((uint32_t)Number_Bytes << 16 ) & I2C_CR2_NBYTES) | \
 8006378:	230a      	movs	r3, #10
 800637a:	18fb      	adds	r3, r7, r3
 800637c:	881b      	ldrh	r3, [r3, #0]
 800637e:	059b      	lsls	r3, r3, #22
 8006380:	0d9a      	lsrs	r2, r3, #22
 8006382:	2309      	movs	r3, #9
 8006384:	18fb      	adds	r3, r7, r3
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	0419      	lsls	r1, r3, #16
 800638a:	23ff      	movs	r3, #255	; 0xff
 800638c:	041b      	lsls	r3, r3, #16
 800638e:	400b      	ands	r3, r1
 8006390:	431a      	orrs	r2, r3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	431a      	orrs	r2, r3
 8006396:	6a3b      	ldr	r3, [r7, #32]
 8006398:	4313      	orrs	r3, r2
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	4313      	orrs	r3, r2
 800639e:	617b      	str	r3, [r7, #20]
            (uint32_t)ReloadEndMode | (uint32_t)StartStopMode);
  
  /* update CR2 register */
  I2Cx->CR2 = tmpreg;  
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	697a      	ldr	r2, [r7, #20]
 80063a4:	605a      	str	r2, [r3, #4]
}
 80063a6:	46c0      	nop			; (mov r8, r8)
 80063a8:	46bd      	mov	sp, r7
 80063aa:	b006      	add	sp, #24
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	46c0      	nop			; (mov r8, r8)
 80063b0:	fc009800 	.word	0xfc009800

080063b4 <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	000a      	movs	r2, r1
 80063be:	1cfb      	adds	r3, r7, #3
 80063c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Write in the DR register the data to be sent */
  I2Cx->TXDR = (uint8_t)Data;
 80063c2:	1cfb      	adds	r3, r7, #3
 80063c4:	781a      	ldrb	r2, [r3, #0]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80063ca:	46c0      	nop			; (mov r8, r8)
 80063cc:	46bd      	mov	sp, r7
 80063ce:	b002      	add	sp, #8
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	46c0      	nop			; (mov r8, r8)

080063d4 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->RXDR;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e0:	b2db      	uxtb	r3, r3
}  
 80063e2:	0018      	movs	r0, r3
 80063e4:	46bd      	mov	sp, r7
 80063e6:	b002      	add	sp, #8
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	46c0      	nop			; (mov r8, r8)

080063ec <I2C_GetFlagStatus>:
  *            @arg I2C_FLAG_ALERT: SMBus Alert
  *            @arg I2C_FLAG_BUSY: Bus busy
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80063f6:	2300      	movs	r3, #0
 80063f8:	60bb      	str	r3, [r7, #8]
  FlagStatus bitstatus = RESET;
 80063fa:	230f      	movs	r3, #15
 80063fc:	18fb      	adds	r3, r7, r3
 80063fe:	2200      	movs	r2, #0
 8006400:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));
  
  /* Get the ISR register value */
  tmpreg = I2Cx->ISR;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	60bb      	str	r3, [r7, #8]
  
  /* Get flag status */
  tmpreg &= I2C_FLAG;
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	683a      	ldr	r2, [r7, #0]
 800640c:	4013      	ands	r3, r2
 800640e:	60bb      	str	r3, [r7, #8]
  
  if(tmpreg != 0)
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d004      	beq.n	8006420 <I2C_GetFlagStatus+0x34>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8006416:	230f      	movs	r3, #15
 8006418:	18fb      	adds	r3, r7, r3
 800641a:	2201      	movs	r2, #1
 800641c:	701a      	strb	r2, [r3, #0]
 800641e:	e003      	b.n	8006428 <I2C_GetFlagStatus+0x3c>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8006420:	230f      	movs	r3, #15
 8006422:	18fb      	adds	r3, r7, r3
 8006424:	2200      	movs	r2, #0
 8006426:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8006428:	230f      	movs	r3, #15
 800642a:	18fb      	adds	r3, r7, r3
 800642c:	781b      	ldrb	r3, [r3, #0]
} 
 800642e:	0018      	movs	r0, r3
 8006430:	46bd      	mov	sp, r7
 8006432:	b004      	add	sp, #16
 8006434:	bd80      	pop	{r7, pc}
 8006436:	46c0      	nop			; (mov r8, r8)

08006438 <I2C_ClearFlag>:
  *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow detection flag
  *            @arg I2C_FLAG_ALERT: SMBus Alert
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{ 
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));

  /* Clear the selected flag */
  I2Cx->ICR = I2C_FLAG;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	683a      	ldr	r2, [r7, #0]
 8006446:	61da      	str	r2, [r3, #28]
  }
 8006448:	46c0      	nop			; (mov r8, r8)
 800644a:	46bd      	mov	sp, r7
 800644c:	b002      	add	sp, #8
 800644e:	bd80      	pop	{r7, pc}

08006450 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b086      	sub	sp, #24
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800645a:	2300      	movs	r3, #0
 800645c:	617b      	str	r3, [r7, #20]
 800645e:	2300      	movs	r3, #0
 8006460:	613b      	str	r3, [r7, #16]
 8006462:	2300      	movs	r3, #0
 8006464:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8006466:	2300      	movs	r3, #0
 8006468:	617b      	str	r3, [r7, #20]
 800646a:	e081      	b.n	8006570 <GPIO_Init+0x120>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800646c:	2201      	movs	r2, #1
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	409a      	lsls	r2, r3
 8006472:	0013      	movs	r3, r2
 8006474:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	4013      	ands	r3, r2
 800647e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	429a      	cmp	r2, r3
 8006486:	d170      	bne.n	800656a <GPIO_Init+0x11a>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	791b      	ldrb	r3, [r3, #4]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d003      	beq.n	8006498 <GPIO_Init+0x48>
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	791b      	ldrb	r3, [r3, #4]
 8006494:	2b02      	cmp	r3, #2
 8006496:	d138      	bne.n	800650a <GPIO_Init+0xba>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	697a      	ldr	r2, [r7, #20]
 800649e:	0052      	lsls	r2, r2, #1
 80064a0:	2103      	movs	r1, #3
 80064a2:	4091      	lsls	r1, r2
 80064a4:	000a      	movs	r2, r1
 80064a6:	43d2      	mvns	r2, r2
 80064a8:	401a      	ands	r2, r3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	689a      	ldr	r2, [r3, #8]
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	795b      	ldrb	r3, [r3, #5]
 80064b6:	0019      	movs	r1, r3
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	005b      	lsls	r3, r3, #1
 80064bc:	4099      	lsls	r1, r3
 80064be:	000b      	movs	r3, r1
 80064c0:	431a      	orrs	r2, r3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	889b      	ldrh	r3, [r3, #4]
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	697a      	ldr	r2, [r7, #20]
 80064ce:	0412      	lsls	r2, r2, #16
 80064d0:	0c12      	lsrs	r2, r2, #16
 80064d2:	2101      	movs	r1, #1
 80064d4:	4091      	lsls	r1, r2
 80064d6:	000a      	movs	r2, r1
 80064d8:	b292      	uxth	r2, r2
 80064da:	43d2      	mvns	r2, r2
 80064dc:	b292      	uxth	r2, r2
 80064de:	4013      	ands	r3, r2
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	889b      	ldrh	r3, [r3, #4]
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	b21a      	sxth	r2, r3
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	799b      	ldrb	r3, [r3, #6]
 80064f2:	0019      	movs	r1, r3
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	041b      	lsls	r3, r3, #16
 80064f8:	0c1b      	lsrs	r3, r3, #16
 80064fa:	4099      	lsls	r1, r3
 80064fc:	000b      	movs	r3, r1
 80064fe:	b21b      	sxth	r3, r3
 8006500:	4313      	orrs	r3, r2
 8006502:	b21b      	sxth	r3, r3
 8006504:	b29a      	uxth	r2, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	809a      	strh	r2, [r3, #4]
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	697a      	ldr	r2, [r7, #20]
 8006510:	0052      	lsls	r2, r2, #1
 8006512:	2103      	movs	r1, #3
 8006514:	4091      	lsls	r1, r2
 8006516:	000a      	movs	r2, r1
 8006518:	43d2      	mvns	r2, r2
 800651a:	401a      	ands	r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	791b      	ldrb	r3, [r3, #4]
 8006528:	0019      	movs	r1, r3
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	005b      	lsls	r3, r3, #1
 800652e:	4099      	lsls	r1, r3
 8006530:	000b      	movs	r3, r1
 8006532:	431a      	orrs	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	0412      	lsls	r2, r2, #16
 8006540:	0c12      	lsrs	r2, r2, #16
 8006542:	0052      	lsls	r2, r2, #1
 8006544:	2103      	movs	r1, #3
 8006546:	4091      	lsls	r1, r2
 8006548:	000a      	movs	r2, r1
 800654a:	43d2      	mvns	r2, r2
 800654c:	401a      	ands	r2, r3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	68da      	ldr	r2, [r3, #12]
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	79db      	ldrb	r3, [r3, #7]
 800655a:	0019      	movs	r1, r3
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	005b      	lsls	r3, r3, #1
 8006560:	4099      	lsls	r1, r3
 8006562:	000b      	movs	r3, r1
 8006564:	431a      	orrs	r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	3301      	adds	r3, #1
 800656e:	617b      	str	r3, [r7, #20]
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	2b0f      	cmp	r3, #15
 8006574:	d800      	bhi.n	8006578 <GPIO_Init+0x128>
 8006576:	e779      	b.n	800646c <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8006578:	46c0      	nop			; (mov r8, r8)
 800657a:	46bd      	mov	sp, r7
 800657c:	b006      	add	sp, #24
 800657e:	bd80      	pop	{r7, pc}

08006580 <GPIO_PinAFConfig>:
  *         for the detailed mapping of the system and peripherals'alternate 
  *         function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	0008      	movs	r0, r1
 800658a:	0011      	movs	r1, r2
 800658c:	1cbb      	adds	r3, r7, #2
 800658e:	1c02      	adds	r2, r0, #0
 8006590:	801a      	strh	r2, [r3, #0]
 8006592:	1c7b      	adds	r3, r7, #1
 8006594:	1c0a      	adds	r2, r1, #0
 8006596:	701a      	strb	r2, [r3, #0]
  uint32_t temp = 0x00;
 8006598:	2300      	movs	r3, #0
 800659a:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800659c:	2300      	movs	r3, #0
 800659e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80065a0:	1c7b      	adds	r3, r7, #1
 80065a2:	781a      	ldrb	r2, [r3, #0]
 80065a4:	1cbb      	adds	r3, r7, #2
 80065a6:	881b      	ldrh	r3, [r3, #0]
 80065a8:	2107      	movs	r1, #7
 80065aa:	400b      	ands	r3, r1
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	409a      	lsls	r2, r3
 80065b0:	0013      	movs	r3, r2
 80065b2:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80065b4:	1cbb      	adds	r3, r7, #2
 80065b6:	881b      	ldrh	r3, [r3, #0]
 80065b8:	08db      	lsrs	r3, r3, #3
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	0018      	movs	r0, r3
 80065be:	1cbb      	adds	r3, r7, #2
 80065c0:	881b      	ldrh	r3, [r3, #0]
 80065c2:	08db      	lsrs	r3, r3, #3
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	001a      	movs	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	3208      	adds	r2, #8
 80065cc:	0092      	lsls	r2, r2, #2
 80065ce:	58d3      	ldr	r3, [r2, r3]
 80065d0:	1cba      	adds	r2, r7, #2
 80065d2:	8812      	ldrh	r2, [r2, #0]
 80065d4:	2107      	movs	r1, #7
 80065d6:	400a      	ands	r2, r1
 80065d8:	0092      	lsls	r2, r2, #2
 80065da:	210f      	movs	r1, #15
 80065dc:	4091      	lsls	r1, r2
 80065de:	000a      	movs	r2, r1
 80065e0:	43d2      	mvns	r2, r2
 80065e2:	401a      	ands	r2, r3
 80065e4:	0011      	movs	r1, r2
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	0002      	movs	r2, r0
 80065ea:	3208      	adds	r2, #8
 80065ec:	0092      	lsls	r2, r2, #2
 80065ee:	50d1      	str	r1, [r2, r3]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80065f0:	1cbb      	adds	r3, r7, #2
 80065f2:	881b      	ldrh	r3, [r3, #0]
 80065f4:	08db      	lsrs	r3, r3, #3
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	001a      	movs	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	3208      	adds	r2, #8
 80065fe:	0092      	lsls	r2, r2, #2
 8006600:	58d2      	ldr	r2, [r2, r3]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	4313      	orrs	r3, r2
 8006606:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8006608:	1cbb      	adds	r3, r7, #2
 800660a:	881b      	ldrh	r3, [r3, #0]
 800660c:	08db      	lsrs	r3, r3, #3
 800660e:	b29b      	uxth	r3, r3
 8006610:	001a      	movs	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	3208      	adds	r2, #8
 8006616:	0092      	lsls	r2, r2, #2
 8006618:	68b9      	ldr	r1, [r7, #8]
 800661a:	50d1      	str	r1, [r2, r3]
}
 800661c:	46c0      	nop			; (mov r8, r8)
 800661e:	46bd      	mov	sp, r7
 8006620:	b004      	add	sp, #16
 8006622:	bd80      	pop	{r7, pc}

08006624 <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register and program memory access.
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 8006628:	4b06      	ldr	r3, [pc, #24]	; (8006644 <FLASH_Unlock+0x20>)
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	2280      	movs	r2, #128	; 0x80
 800662e:	4013      	ands	r3, r2
 8006630:	d005      	beq.n	800663e <FLASH_Unlock+0x1a>
  {
    /* Unlocking the program memory access */
    FLASH->KEYR = FLASH_FKEY1;
 8006632:	4b04      	ldr	r3, [pc, #16]	; (8006644 <FLASH_Unlock+0x20>)
 8006634:	4a04      	ldr	r2, [pc, #16]	; (8006648 <FLASH_Unlock+0x24>)
 8006636:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_FKEY2;
 8006638:	4b02      	ldr	r3, [pc, #8]	; (8006644 <FLASH_Unlock+0x20>)
 800663a:	4a04      	ldr	r2, [pc, #16]	; (800664c <FLASH_Unlock+0x28>)
 800663c:	605a      	str	r2, [r3, #4]
  }
}
 800663e:	46c0      	nop			; (mov r8, r8)
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}
 8006644:	40022000 	.word	0x40022000
 8006648:	45670123 	.word	0x45670123
 800664c:	cdef89ab 	.word	0xcdef89ab

08006650 <FLASH_ErasePage>:
  *         is the start address of a page (multiple of 1024 bytes).
  * @retval FLASH Status: The returned value can be: 
  *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
{
 8006650:	b590      	push	{r4, r7, lr}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  FLASH_Status status = FLASH_COMPLETE;
 8006658:	230f      	movs	r3, #15
 800665a:	18fb      	adds	r3, r7, r3
 800665c:	2204      	movs	r2, #4
 800665e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Page_Address));
 
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8006660:	230f      	movs	r3, #15
 8006662:	18fc      	adds	r4, r7, r3
 8006664:	23b0      	movs	r3, #176	; 0xb0
 8006666:	031b      	lsls	r3, r3, #12
 8006668:	0018      	movs	r0, r3
 800666a:	f000 f897 	bl	800679c <FLASH_WaitForLastOperation>
 800666e:	0003      	movs	r3, r0
 8006670:	7023      	strb	r3, [r4, #0]
  
  if(status == FLASH_COMPLETE)
 8006672:	230f      	movs	r3, #15
 8006674:	18fb      	adds	r3, r7, r3
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	2b04      	cmp	r3, #4
 800667a:	d11d      	bne.n	80066b8 <FLASH_ErasePage+0x68>
  { 
    /* If the previous operation is completed, proceed to erase the page */
    FLASH->CR |= FLASH_CR_PER;
 800667c:	4b12      	ldr	r3, [pc, #72]	; (80066c8 <FLASH_ErasePage+0x78>)
 800667e:	4a12      	ldr	r2, [pc, #72]	; (80066c8 <FLASH_ErasePage+0x78>)
 8006680:	6912      	ldr	r2, [r2, #16]
 8006682:	2102      	movs	r1, #2
 8006684:	430a      	orrs	r2, r1
 8006686:	611a      	str	r2, [r3, #16]
    FLASH->AR  = Page_Address;
 8006688:	4b0f      	ldr	r3, [pc, #60]	; (80066c8 <FLASH_ErasePage+0x78>)
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	615a      	str	r2, [r3, #20]
    FLASH->CR |= FLASH_CR_STRT;
 800668e:	4b0e      	ldr	r3, [pc, #56]	; (80066c8 <FLASH_ErasePage+0x78>)
 8006690:	4a0d      	ldr	r2, [pc, #52]	; (80066c8 <FLASH_ErasePage+0x78>)
 8006692:	6912      	ldr	r2, [r2, #16]
 8006694:	2140      	movs	r1, #64	; 0x40
 8006696:	430a      	orrs	r2, r1
 8006698:	611a      	str	r2, [r3, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 800669a:	230f      	movs	r3, #15
 800669c:	18fc      	adds	r4, r7, r3
 800669e:	23b0      	movs	r3, #176	; 0xb0
 80066a0:	031b      	lsls	r3, r3, #12
 80066a2:	0018      	movs	r0, r3
 80066a4:	f000 f87a 	bl	800679c <FLASH_WaitForLastOperation>
 80066a8:	0003      	movs	r3, r0
 80066aa:	7023      	strb	r3, [r4, #0]
    
    /* Disable the PER Bit */
    FLASH->CR &= ~FLASH_CR_PER;
 80066ac:	4b06      	ldr	r3, [pc, #24]	; (80066c8 <FLASH_ErasePage+0x78>)
 80066ae:	4a06      	ldr	r2, [pc, #24]	; (80066c8 <FLASH_ErasePage+0x78>)
 80066b0:	6912      	ldr	r2, [r2, #16]
 80066b2:	2102      	movs	r1, #2
 80066b4:	438a      	bics	r2, r1
 80066b6:	611a      	str	r2, [r3, #16]
  }
    
  /* Return the Erase Status */
  return status;
 80066b8:	230f      	movs	r3, #15
 80066ba:	18fb      	adds	r3, r7, r3
 80066bc:	781b      	ldrb	r3, [r3, #0]
}
 80066be:	0018      	movs	r0, r3
 80066c0:	46bd      	mov	sp, r7
 80066c2:	b005      	add	sp, #20
 80066c4:	bd90      	pop	{r4, r7, pc}
 80066c6:	46c0      	nop			; (mov r8, r8)
 80066c8:	40022000 	.word	0x40022000

080066cc <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 80066cc:	b590      	push	{r4, r7, lr}
 80066ce:	b085      	sub	sp, #20
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	000a      	movs	r2, r1
 80066d6:	1cbb      	adds	r3, r7, #2
 80066d8:	801a      	strh	r2, [r3, #0]
  FLASH_Status status = FLASH_COMPLETE;
 80066da:	230f      	movs	r3, #15
 80066dc:	18fb      	adds	r3, r7, r3
 80066de:	2204      	movs	r2, #4
 80066e0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80066e2:	230f      	movs	r3, #15
 80066e4:	18fc      	adds	r4, r7, r3
 80066e6:	23b0      	movs	r3, #176	; 0xb0
 80066e8:	031b      	lsls	r3, r3, #12
 80066ea:	0018      	movs	r0, r3
 80066ec:	f000 f856 	bl	800679c <FLASH_WaitForLastOperation>
 80066f0:	0003      	movs	r3, r0
 80066f2:	7023      	strb	r3, [r4, #0]
  
  if(status == FLASH_COMPLETE)
 80066f4:	230f      	movs	r3, #15
 80066f6:	18fb      	adds	r3, r7, r3
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	2b04      	cmp	r3, #4
 80066fc:	d118      	bne.n	8006730 <FLASH_ProgramHalfWord+0x64>
  {
    /* If the previous operation is completed, proceed to program the new data */
    FLASH->CR |= FLASH_CR_PG;
 80066fe:	4b10      	ldr	r3, [pc, #64]	; (8006740 <FLASH_ProgramHalfWord+0x74>)
 8006700:	4a0f      	ldr	r2, [pc, #60]	; (8006740 <FLASH_ProgramHalfWord+0x74>)
 8006702:	6912      	ldr	r2, [r2, #16]
 8006704:	2101      	movs	r1, #1
 8006706:	430a      	orrs	r2, r1
 8006708:	611a      	str	r2, [r3, #16]
  
    *(__IO uint16_t*)Address = Data;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	1cba      	adds	r2, r7, #2
 800670e:	8812      	ldrh	r2, [r2, #0]
 8006710:	801a      	strh	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8006712:	230f      	movs	r3, #15
 8006714:	18fc      	adds	r4, r7, r3
 8006716:	23b0      	movs	r3, #176	; 0xb0
 8006718:	031b      	lsls	r3, r3, #12
 800671a:	0018      	movs	r0, r3
 800671c:	f000 f83e 	bl	800679c <FLASH_WaitForLastOperation>
 8006720:	0003      	movs	r3, r0
 8006722:	7023      	strb	r3, [r4, #0]
    
    /* Disable the PG Bit */
    FLASH->CR &= ~FLASH_CR_PG;
 8006724:	4b06      	ldr	r3, [pc, #24]	; (8006740 <FLASH_ProgramHalfWord+0x74>)
 8006726:	4a06      	ldr	r2, [pc, #24]	; (8006740 <FLASH_ProgramHalfWord+0x74>)
 8006728:	6912      	ldr	r2, [r2, #16]
 800672a:	2101      	movs	r1, #1
 800672c:	438a      	bics	r2, r1
 800672e:	611a      	str	r2, [r3, #16]
  } 
  
  /* Return the Program Status */
  return status;
 8006730:	230f      	movs	r3, #15
 8006732:	18fb      	adds	r3, r7, r3
 8006734:	781b      	ldrb	r3, [r3, #0]
}
 8006736:	0018      	movs	r0, r3
 8006738:	46bd      	mov	sp, r7
 800673a:	b005      	add	sp, #20
 800673c:	bd90      	pop	{r4, r7, pc}
 800673e:	46c0      	nop			; (mov r8, r8)
 8006740:	40022000 	.word	0x40022000

08006744 <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: 
  *         FLASH_BUSY, FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP or FLASH_COMPLETE.
  */
FLASH_Status FLASH_GetStatus(void)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
  FLASH_Status FLASHstatus = FLASH_COMPLETE;
 800674a:	1dfb      	adds	r3, r7, #7
 800674c:	2204      	movs	r2, #4
 800674e:	701a      	strb	r2, [r3, #0]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8006750:	4b11      	ldr	r3, [pc, #68]	; (8006798 <FLASH_GetStatus+0x54>)
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	2201      	movs	r2, #1
 8006756:	4013      	ands	r3, r2
 8006758:	d003      	beq.n	8006762 <FLASH_GetStatus+0x1e>
  {
    FLASHstatus = FLASH_BUSY;
 800675a:	1dfb      	adds	r3, r7, #7
 800675c:	2201      	movs	r2, #1
 800675e:	701a      	strb	r2, [r3, #0]
 8006760:	e014      	b.n	800678c <FLASH_GetStatus+0x48>
  }
  else 
  {  
    if((FLASH->SR & (uint32_t)FLASH_FLAG_WRPERR)!= (uint32_t)0x00)
 8006762:	4b0d      	ldr	r3, [pc, #52]	; (8006798 <FLASH_GetStatus+0x54>)
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	2210      	movs	r2, #16
 8006768:	4013      	ands	r3, r2
 800676a:	d003      	beq.n	8006774 <FLASH_GetStatus+0x30>
    { 
      FLASHstatus = FLASH_ERROR_WRP;
 800676c:	1dfb      	adds	r3, r7, #7
 800676e:	2202      	movs	r2, #2
 8006770:	701a      	strb	r2, [r3, #0]
 8006772:	e00b      	b.n	800678c <FLASH_GetStatus+0x48>
    }
    else 
    {
      if((FLASH->SR & (uint32_t)(FLASH_SR_PGERR)) != (uint32_t)0x00)
 8006774:	4b08      	ldr	r3, [pc, #32]	; (8006798 <FLASH_GetStatus+0x54>)
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	2204      	movs	r2, #4
 800677a:	4013      	ands	r3, r2
 800677c:	d003      	beq.n	8006786 <FLASH_GetStatus+0x42>
      {
        FLASHstatus = FLASH_ERROR_PROGRAM; 
 800677e:	1dfb      	adds	r3, r7, #7
 8006780:	2203      	movs	r2, #3
 8006782:	701a      	strb	r2, [r3, #0]
 8006784:	e002      	b.n	800678c <FLASH_GetStatus+0x48>
      }
      else
      {
        FLASHstatus = FLASH_COMPLETE;
 8006786:	1dfb      	adds	r3, r7, #7
 8006788:	2204      	movs	r2, #4
 800678a:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  /* Return the FLASH Status */
  return FLASHstatus;
 800678c:	1dfb      	adds	r3, r7, #7
 800678e:	781b      	ldrb	r3, [r3, #0]
}
 8006790:	0018      	movs	r0, r3
 8006792:	46bd      	mov	sp, r7
 8006794:	b002      	add	sp, #8
 8006796:	bd80      	pop	{r7, pc}
 8006798:	40022000 	.word	0x40022000

0800679c <FLASH_WaitForLastOperation>:
  * @param  Timeout: FLASH programming Timeout
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, 
  *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800679c:	b590      	push	{r4, r7, lr}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  FLASH_Status status = FLASH_COMPLETE;
 80067a4:	230f      	movs	r3, #15
 80067a6:	18fb      	adds	r3, r7, r3
 80067a8:	2204      	movs	r2, #4
 80067aa:	701a      	strb	r2, [r3, #0]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 80067ac:	230f      	movs	r3, #15
 80067ae:	18fc      	adds	r4, r7, r3
 80067b0:	f7ff ffc8 	bl	8006744 <FLASH_GetStatus>
 80067b4:	0003      	movs	r3, r0
 80067b6:	7023      	strb	r3, [r4, #0]
  
  /* Wait for a FLASH operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 80067b8:	e008      	b.n	80067cc <FLASH_WaitForLastOperation+0x30>
  {
    status = FLASH_GetStatus();
 80067ba:	230f      	movs	r3, #15
 80067bc:	18fc      	adds	r4, r7, r3
 80067be:	f7ff ffc1 	bl	8006744 <FLASH_GetStatus>
 80067c2:	0003      	movs	r3, r0
 80067c4:	7023      	strb	r3, [r4, #0]
    Timeout--;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	3b01      	subs	r3, #1
 80067ca:	607b      	str	r3, [r7, #4]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
  
  /* Wait for a FLASH operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 80067cc:	230f      	movs	r3, #15
 80067ce:	18fb      	adds	r3, r7, r3
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d102      	bne.n	80067dc <FLASH_WaitForLastOperation+0x40>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1ee      	bne.n	80067ba <FLASH_WaitForLastOperation+0x1e>
  {
    status = FLASH_GetStatus();
    Timeout--;
  }
  
  if(Timeout == 0x00 )
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d103      	bne.n	80067ea <FLASH_WaitForLastOperation+0x4e>
  {
    status = FLASH_TIMEOUT;
 80067e2:	230f      	movs	r3, #15
 80067e4:	18fb      	adds	r3, r7, r3
 80067e6:	2205      	movs	r2, #5
 80067e8:	701a      	strb	r2, [r3, #0]
  }
  /* Return the operation status */
  return status;
 80067ea:	230f      	movs	r3, #15
 80067ec:	18fb      	adds	r3, r7, r3
 80067ee:	781b      	ldrb	r3, [r3, #0]
}
 80067f0:	0018      	movs	r0, r3
 80067f2:	46bd      	mov	sp, r7
 80067f4:	b005      	add	sp, #20
 80067f6:	bd90      	pop	{r4, r7, pc}

080067f8 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure that 
  *         contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8006800:	2300      	movs	r3, #0
 8006802:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8006804:	4b33      	ldr	r3, [pc, #204]	; (80068d4 <EXTI_Init+0xdc>)
 8006806:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	799b      	ldrb	r3, [r3, #6]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d04f      	beq.n	80068b0 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8006810:	4a30      	ldr	r2, [pc, #192]	; (80068d4 <EXTI_Init+0xdc>)
 8006812:	4b30      	ldr	r3, [pc, #192]	; (80068d4 <EXTI_Init+0xdc>)
 8006814:	6819      	ldr	r1, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	43db      	mvns	r3, r3
 800681c:	400b      	ands	r3, r1
 800681e:	6013      	str	r3, [r2, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8006820:	4a2c      	ldr	r2, [pc, #176]	; (80068d4 <EXTI_Init+0xdc>)
 8006822:	4b2c      	ldr	r3, [pc, #176]	; (80068d4 <EXTI_Init+0xdc>)
 8006824:	6859      	ldr	r1, [r3, #4]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	43db      	mvns	r3, r3
 800682c:	400b      	ands	r3, r1
 800682e:	6053      	str	r3, [r2, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	791b      	ldrb	r3, [r3, #4]
 8006834:	001a      	movs	r2, r3
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	189b      	adds	r3, r3, r2
 800683a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	6811      	ldr	r1, [r2, #0]
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	6812      	ldr	r2, [r2, #0]
 8006846:	430a      	orrs	r2, r1
 8006848:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800684a:	4a22      	ldr	r2, [pc, #136]	; (80068d4 <EXTI_Init+0xdc>)
 800684c:	4b21      	ldr	r3, [pc, #132]	; (80068d4 <EXTI_Init+0xdc>)
 800684e:	6899      	ldr	r1, [r3, #8]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	43db      	mvns	r3, r3
 8006856:	400b      	ands	r3, r1
 8006858:	6093      	str	r3, [r2, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800685a:	4a1e      	ldr	r2, [pc, #120]	; (80068d4 <EXTI_Init+0xdc>)
 800685c:	4b1d      	ldr	r3, [pc, #116]	; (80068d4 <EXTI_Init+0xdc>)
 800685e:	68d9      	ldr	r1, [r3, #12]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	43db      	mvns	r3, r3
 8006866:	400b      	ands	r3, r1
 8006868:	60d3      	str	r3, [r2, #12]

    /* Select the trigger for the selected interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	795b      	ldrb	r3, [r3, #5]
 800686e:	2b10      	cmp	r3, #16
 8006870:	d10e      	bne.n	8006890 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8006872:	4a18      	ldr	r2, [pc, #96]	; (80068d4 <EXTI_Init+0xdc>)
 8006874:	4b17      	ldr	r3, [pc, #92]	; (80068d4 <EXTI_Init+0xdc>)
 8006876:	6899      	ldr	r1, [r3, #8]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	430b      	orrs	r3, r1
 800687e:	6093      	str	r3, [r2, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8006880:	4a14      	ldr	r2, [pc, #80]	; (80068d4 <EXTI_Init+0xdc>)
 8006882:	4b14      	ldr	r3, [pc, #80]	; (80068d4 <EXTI_Init+0xdc>)
 8006884:	68d9      	ldr	r1, [r3, #12]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	430b      	orrs	r3, r1
 800688c:	60d3      	str	r3, [r2, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 800688e:	e01d      	b.n	80068cc <EXTI_Init+0xd4>
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8006890:	4b10      	ldr	r3, [pc, #64]	; (80068d4 <EXTI_Init+0xdc>)
 8006892:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	795b      	ldrb	r3, [r3, #5]
 8006898:	001a      	movs	r2, r3
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	189b      	adds	r3, r3, r2
 800689e:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	6811      	ldr	r1, [r2, #0]
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	6812      	ldr	r2, [r2, #0]
 80068aa:	430a      	orrs	r2, r1
 80068ac:	601a      	str	r2, [r3, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80068ae:	e00d      	b.n	80068cc <EXTI_Init+0xd4>
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	791b      	ldrb	r3, [r3, #4]
 80068b4:	001a      	movs	r2, r3
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	189b      	adds	r3, r3, r2
 80068ba:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	6811      	ldr	r1, [r2, #0]
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	6812      	ldr	r2, [r2, #0]
 80068c6:	43d2      	mvns	r2, r2
 80068c8:	400a      	ands	r2, r1
 80068ca:	601a      	str	r2, [r3, #0]
  }
}
 80068cc:	46c0      	nop			; (mov r8, r8)
 80068ce:	46bd      	mov	sp, r7
 80068d0:	b004      	add	sp, #16
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	40010400 	.word	0x40010400

080068d8 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..27).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
 80068e0:	4b03      	ldr	r3, [pc, #12]	; (80068f0 <EXTI_ClearITPendingBit+0x18>)
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	615a      	str	r2, [r3, #20]
}
 80068e6:	46c0      	nop			; (mov r8, r8)
 80068e8:	46bd      	mov	sp, r7
 80068ea:	b002      	add	sp, #8
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	46c0      	nop			; (mov r8, r8)
 80068f0:	40010400 	.word	0x40010400

080068f4 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80068fe:	2300      	movs	r3, #0
 8006900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration ----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	60fb      	str	r3, [r7, #12]

  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_MASK;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	4a18      	ldr	r2, [pc, #96]	; (800696c <DMA_Init+0x78>)
 800690c:	4013      	ands	r3, r2
 800690e:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	689a      	ldr	r2, [r3, #8]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	6a1b      	ldr	r3, [r3, #32]
 8006918:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	691b      	ldr	r3, [r3, #16]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 800691e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	695b      	ldr	r3, [r3, #20]
 8006924:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	699b      	ldr	r3, [r3, #24]
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800692a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	69db      	ldr	r3, [r3, #28]
 8006930:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8006936:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800693c:	4313      	orrs	r3, r2
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	4313      	orrs	r3, r2
 8006942:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	68da      	ldr	r2, [r3, #12]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ---------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ---------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	685a      	ldr	r2, [r3, #4]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	60da      	str	r2, [r3, #12]
}
 8006962:	46c0      	nop			; (mov r8, r8)
 8006964:	46bd      	mov	sp, r7
 8006966:	b004      	add	sp, #16
 8006968:	bd80      	pop	{r7, pc}
 800696a:	46c0      	nop			; (mov r8, r8)
 800696c:	ffff800f 	.word	0xffff800f

08006970 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	000a      	movs	r2, r1
 800697a:	1cfb      	adds	r3, r7, #3
 800697c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800697e:	1cfb      	adds	r3, r7, #3
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d006      	beq.n	8006994 <DMA_Cmd+0x24>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR_EN;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2201      	movs	r2, #1
 800698c:	431a      	orrs	r2, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
  }
}
 8006992:	e005      	b.n	80069a0 <DMA_Cmd+0x30>
    DMAy_Channelx->CCR |= DMA_CCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a03      	ldr	r2, [pc, #12]	; (80069a8 <DMA_Cmd+0x38>)
 800699a:	401a      	ands	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	601a      	str	r2, [r3, #0]
  }
}
 80069a0:	46c0      	nop			; (mov r8, r8)
 80069a2:	46bd      	mov	sp, r7
 80069a4:	b002      	add	sp, #8
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	0000fffe 	.word	0x0000fffe

080069ac <DMA_SetCurrDataCounter>:
  *         transfer.
  * @note   This function can only be used when the DMAy_Channelx is disabled.
  * @retval None.
  */
void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	000a      	movs	r2, r1
 80069b6:	1cbb      	adds	r3, r7, #2
 80069b8:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));

/*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DataNumber;
 80069ba:	1cbb      	adds	r3, r7, #2
 80069bc:	881a      	ldrh	r2, [r3, #0]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	605a      	str	r2, [r3, #4]
}
 80069c2:	46c0      	nop			; (mov r8, r8)
 80069c4:	46bd      	mov	sp, r7
 80069c6:	b002      	add	sp, #8
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	46c0      	nop			; (mov r8, r8)

080069cc <CRS_FrequencyErrorCounterCmd>:
  * @param  NewState: new state of the frequency error counter.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRS_FrequencyErrorCounterCmd(FunctionalState NewState)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	0002      	movs	r2, r0
 80069d4:	1dfb      	adds	r3, r7, #7
 80069d6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80069d8:	1dfb      	adds	r3, r7, #7
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d006      	beq.n	80069ee <CRS_FrequencyErrorCounterCmd+0x22>
  {
     CRS->CR |= CRS_CR_CEN;
 80069e0:	4b08      	ldr	r3, [pc, #32]	; (8006a04 <CRS_FrequencyErrorCounterCmd+0x38>)
 80069e2:	4a08      	ldr	r2, [pc, #32]	; (8006a04 <CRS_FrequencyErrorCounterCmd+0x38>)
 80069e4:	6812      	ldr	r2, [r2, #0]
 80069e6:	2120      	movs	r1, #32
 80069e8:	430a      	orrs	r2, r1
 80069ea:	601a      	str	r2, [r3, #0]
  }
  else
  {
    CRS->CR &= ~CRS_CR_CEN;
  }
}
 80069ec:	e005      	b.n	80069fa <CRS_FrequencyErrorCounterCmd+0x2e>
  {
     CRS->CR |= CRS_CR_CEN;
  }
  else
  {
    CRS->CR &= ~CRS_CR_CEN;
 80069ee:	4b05      	ldr	r3, [pc, #20]	; (8006a04 <CRS_FrequencyErrorCounterCmd+0x38>)
 80069f0:	4a04      	ldr	r2, [pc, #16]	; (8006a04 <CRS_FrequencyErrorCounterCmd+0x38>)
 80069f2:	6812      	ldr	r2, [r2, #0]
 80069f4:	2120      	movs	r1, #32
 80069f6:	438a      	bics	r2, r1
 80069f8:	601a      	str	r2, [r3, #0]
  }
}
 80069fa:	46c0      	nop			; (mov r8, r8)
 80069fc:	46bd      	mov	sp, r7
 80069fe:	b002      	add	sp, #8
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	46c0      	nop			; (mov r8, r8)
 8006a04:	40006c00 	.word	0x40006c00

08006a08 <CRS_AutomaticCalibrationCmd>:
  * @param  NewState: new state of the automatic trimming.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRS_AutomaticCalibrationCmd(FunctionalState NewState)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	0002      	movs	r2, r0
 8006a10:	1dfb      	adds	r3, r7, #7
 8006a12:	701a      	strb	r2, [r3, #0]
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006a14:	1dfb      	adds	r3, r7, #7
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d006      	beq.n	8006a2a <CRS_AutomaticCalibrationCmd+0x22>
  {
    CRS->CR |= CRS_CR_AUTOTRIMEN;
 8006a1c:	4b08      	ldr	r3, [pc, #32]	; (8006a40 <CRS_AutomaticCalibrationCmd+0x38>)
 8006a1e:	4a08      	ldr	r2, [pc, #32]	; (8006a40 <CRS_AutomaticCalibrationCmd+0x38>)
 8006a20:	6812      	ldr	r2, [r2, #0]
 8006a22:	2140      	movs	r1, #64	; 0x40
 8006a24:	430a      	orrs	r2, r1
 8006a26:	601a      	str	r2, [r3, #0]
  }
else
  {
    CRS->CR &= ~CRS_CR_AUTOTRIMEN;
  }
}
 8006a28:	e005      	b.n	8006a36 <CRS_AutomaticCalibrationCmd+0x2e>
  {
    CRS->CR |= CRS_CR_AUTOTRIMEN;
  }
else
  {
    CRS->CR &= ~CRS_CR_AUTOTRIMEN;
 8006a2a:	4b05      	ldr	r3, [pc, #20]	; (8006a40 <CRS_AutomaticCalibrationCmd+0x38>)
 8006a2c:	4a04      	ldr	r2, [pc, #16]	; (8006a40 <CRS_AutomaticCalibrationCmd+0x38>)
 8006a2e:	6812      	ldr	r2, [r2, #0]
 8006a30:	2140      	movs	r1, #64	; 0x40
 8006a32:	438a      	bics	r2, r1
 8006a34:	601a      	str	r2, [r3, #0]
  }
}
 8006a36:	46c0      	nop			; (mov r8, r8)
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	b002      	add	sp, #8
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	46c0      	nop			; (mov r8, r8)
 8006a40:	40006c00 	.word	0x40006c00

08006a44 <CRS_SynchronizationSourceConfig>:
  *            @arg CRS_SYNCSource_LSE:   
  *            @arg CRS_SYNCSource_USB:   
  * @retval None
  */
void CRS_SynchronizationSourceConfig(uint32_t CRS_Source)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_CRS_SYNC_SOURCE(CRS_Source));
  
  /* Clear SYNCSRC[1:0] bits */
  CRS->CFGR &= ~CRS_CFGR_SYNCSRC;
 8006a4c:	4b07      	ldr	r3, [pc, #28]	; (8006a6c <CRS_SynchronizationSourceConfig+0x28>)
 8006a4e:	4a07      	ldr	r2, [pc, #28]	; (8006a6c <CRS_SynchronizationSourceConfig+0x28>)
 8006a50:	6852      	ldr	r2, [r2, #4]
 8006a52:	4907      	ldr	r1, [pc, #28]	; (8006a70 <CRS_SynchronizationSourceConfig+0x2c>)
 8006a54:	400a      	ands	r2, r1
 8006a56:	605a      	str	r2, [r3, #4]
  
  /* Set the SYNCSRC[1:0] bits according to CRS_Source value */
  CRS->CFGR |= CRS_Source;
 8006a58:	4b04      	ldr	r3, [pc, #16]	; (8006a6c <CRS_SynchronizationSourceConfig+0x28>)
 8006a5a:	4a04      	ldr	r2, [pc, #16]	; (8006a6c <CRS_SynchronizationSourceConfig+0x28>)
 8006a5c:	6851      	ldr	r1, [r2, #4]
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	430a      	orrs	r2, r1
 8006a62:	605a      	str	r2, [r3, #4]
}
 8006a64:	46c0      	nop			; (mov r8, r8)
 8006a66:	46bd      	mov	sp, r7
 8006a68:	b002      	add	sp, #8
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	40006c00 	.word	0x40006c00
 8006a70:	cfffffff 	.word	0xcfffffff

08006a74 <__libc_init_array>:
 8006a74:	4b0e      	ldr	r3, [pc, #56]	; (8006ab0 <__libc_init_array+0x3c>)
 8006a76:	b570      	push	{r4, r5, r6, lr}
 8006a78:	2500      	movs	r5, #0
 8006a7a:	001e      	movs	r6, r3
 8006a7c:	4c0d      	ldr	r4, [pc, #52]	; (8006ab4 <__libc_init_array+0x40>)
 8006a7e:	1ae4      	subs	r4, r4, r3
 8006a80:	10a4      	asrs	r4, r4, #2
 8006a82:	42a5      	cmp	r5, r4
 8006a84:	d004      	beq.n	8006a90 <__libc_init_array+0x1c>
 8006a86:	00ab      	lsls	r3, r5, #2
 8006a88:	58f3      	ldr	r3, [r6, r3]
 8006a8a:	4798      	blx	r3
 8006a8c:	3501      	adds	r5, #1
 8006a8e:	e7f8      	b.n	8006a82 <__libc_init_array+0xe>
 8006a90:	f000 fc54 	bl	800733c <_init>
 8006a94:	4b08      	ldr	r3, [pc, #32]	; (8006ab8 <__libc_init_array+0x44>)
 8006a96:	2500      	movs	r5, #0
 8006a98:	001e      	movs	r6, r3
 8006a9a:	4c08      	ldr	r4, [pc, #32]	; (8006abc <__libc_init_array+0x48>)
 8006a9c:	1ae4      	subs	r4, r4, r3
 8006a9e:	10a4      	asrs	r4, r4, #2
 8006aa0:	42a5      	cmp	r5, r4
 8006aa2:	d004      	beq.n	8006aae <__libc_init_array+0x3a>
 8006aa4:	00ab      	lsls	r3, r5, #2
 8006aa6:	58f3      	ldr	r3, [r6, r3]
 8006aa8:	4798      	blx	r3
 8006aaa:	3501      	adds	r5, #1
 8006aac:	e7f8      	b.n	8006aa0 <__libc_init_array+0x2c>
 8006aae:	bd70      	pop	{r4, r5, r6, pc}
 8006ab0:	0800773c 	.word	0x0800773c
 8006ab4:	0800773c 	.word	0x0800773c
 8006ab8:	0800773c 	.word	0x0800773c
 8006abc:	08007740 	.word	0x08007740

08006ac0 <memcpy>:
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	b510      	push	{r4, lr}
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d003      	beq.n	8006ad0 <memcpy+0x10>
 8006ac8:	5ccc      	ldrb	r4, [r1, r3]
 8006aca:	54c4      	strb	r4, [r0, r3]
 8006acc:	3301      	adds	r3, #1
 8006ace:	e7f9      	b.n	8006ac4 <memcpy+0x4>
 8006ad0:	bd10      	pop	{r4, pc}
	...

08006ad4 <siprintf>:
 8006ad4:	b40e      	push	{r1, r2, r3}
 8006ad6:	b510      	push	{r4, lr}
 8006ad8:	b09d      	sub	sp, #116	; 0x74
 8006ada:	a902      	add	r1, sp, #8
 8006adc:	9002      	str	r0, [sp, #8]
 8006ade:	6108      	str	r0, [r1, #16]
 8006ae0:	480b      	ldr	r0, [pc, #44]	; (8006b10 <siprintf+0x3c>)
 8006ae2:	2482      	movs	r4, #130	; 0x82
 8006ae4:	6088      	str	r0, [r1, #8]
 8006ae6:	6148      	str	r0, [r1, #20]
 8006ae8:	2001      	movs	r0, #1
 8006aea:	4240      	negs	r0, r0
 8006aec:	ab1f      	add	r3, sp, #124	; 0x7c
 8006aee:	81c8      	strh	r0, [r1, #14]
 8006af0:	4808      	ldr	r0, [pc, #32]	; (8006b14 <siprintf+0x40>)
 8006af2:	cb04      	ldmia	r3!, {r2}
 8006af4:	00a4      	lsls	r4, r4, #2
 8006af6:	6800      	ldr	r0, [r0, #0]
 8006af8:	9301      	str	r3, [sp, #4]
 8006afa:	818c      	strh	r4, [r1, #12]
 8006afc:	f000 f86e 	bl	8006bdc <_svfiprintf_r>
 8006b00:	2300      	movs	r3, #0
 8006b02:	9a02      	ldr	r2, [sp, #8]
 8006b04:	7013      	strb	r3, [r2, #0]
 8006b06:	b01d      	add	sp, #116	; 0x74
 8006b08:	bc10      	pop	{r4}
 8006b0a:	bc08      	pop	{r3}
 8006b0c:	b003      	add	sp, #12
 8006b0e:	4718      	bx	r3
 8006b10:	7fffffff 	.word	0x7fffffff
 8006b14:	2000011c 	.word	0x2000011c

08006b18 <__ssputs_r>:
 8006b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b1a:	688e      	ldr	r6, [r1, #8]
 8006b1c:	b085      	sub	sp, #20
 8006b1e:	0007      	movs	r7, r0
 8006b20:	000c      	movs	r4, r1
 8006b22:	9203      	str	r2, [sp, #12]
 8006b24:	9301      	str	r3, [sp, #4]
 8006b26:	429e      	cmp	r6, r3
 8006b28:	d843      	bhi.n	8006bb2 <__ssputs_r+0x9a>
 8006b2a:	2390      	movs	r3, #144	; 0x90
 8006b2c:	898a      	ldrh	r2, [r1, #12]
 8006b2e:	00db      	lsls	r3, r3, #3
 8006b30:	421a      	tst	r2, r3
 8006b32:	d03e      	beq.n	8006bb2 <__ssputs_r+0x9a>
 8006b34:	2503      	movs	r5, #3
 8006b36:	6909      	ldr	r1, [r1, #16]
 8006b38:	6823      	ldr	r3, [r4, #0]
 8006b3a:	9801      	ldr	r0, [sp, #4]
 8006b3c:	1a5b      	subs	r3, r3, r1
 8006b3e:	9302      	str	r3, [sp, #8]
 8006b40:	6963      	ldr	r3, [r4, #20]
 8006b42:	435d      	muls	r5, r3
 8006b44:	0feb      	lsrs	r3, r5, #31
 8006b46:	195d      	adds	r5, r3, r5
 8006b48:	9b02      	ldr	r3, [sp, #8]
 8006b4a:	106d      	asrs	r5, r5, #1
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	181b      	adds	r3, r3, r0
 8006b50:	42ab      	cmp	r3, r5
 8006b52:	d900      	bls.n	8006b56 <__ssputs_r+0x3e>
 8006b54:	001d      	movs	r5, r3
 8006b56:	0553      	lsls	r3, r2, #21
 8006b58:	d510      	bpl.n	8006b7c <__ssputs_r+0x64>
 8006b5a:	0029      	movs	r1, r5
 8006b5c:	0038      	movs	r0, r7
 8006b5e:	f000 fb37 	bl	80071d0 <_malloc_r>
 8006b62:	1e06      	subs	r6, r0, #0
 8006b64:	d014      	beq.n	8006b90 <__ssputs_r+0x78>
 8006b66:	9a02      	ldr	r2, [sp, #8]
 8006b68:	6921      	ldr	r1, [r4, #16]
 8006b6a:	f7ff ffa9 	bl	8006ac0 <memcpy>
 8006b6e:	89a2      	ldrh	r2, [r4, #12]
 8006b70:	4b19      	ldr	r3, [pc, #100]	; (8006bd8 <__ssputs_r+0xc0>)
 8006b72:	4013      	ands	r3, r2
 8006b74:	2280      	movs	r2, #128	; 0x80
 8006b76:	4313      	orrs	r3, r2
 8006b78:	81a3      	strh	r3, [r4, #12]
 8006b7a:	e012      	b.n	8006ba2 <__ssputs_r+0x8a>
 8006b7c:	002a      	movs	r2, r5
 8006b7e:	0038      	movs	r0, r7
 8006b80:	f000 fb86 	bl	8007290 <_realloc_r>
 8006b84:	1e06      	subs	r6, r0, #0
 8006b86:	d10c      	bne.n	8006ba2 <__ssputs_r+0x8a>
 8006b88:	6921      	ldr	r1, [r4, #16]
 8006b8a:	0038      	movs	r0, r7
 8006b8c:	f000 fad4 	bl	8007138 <_free_r>
 8006b90:	230c      	movs	r3, #12
 8006b92:	2240      	movs	r2, #64	; 0x40
 8006b94:	2001      	movs	r0, #1
 8006b96:	603b      	str	r3, [r7, #0]
 8006b98:	89a3      	ldrh	r3, [r4, #12]
 8006b9a:	4240      	negs	r0, r0
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	81a3      	strh	r3, [r4, #12]
 8006ba0:	e017      	b.n	8006bd2 <__ssputs_r+0xba>
 8006ba2:	9b02      	ldr	r3, [sp, #8]
 8006ba4:	6126      	str	r6, [r4, #16]
 8006ba6:	18f6      	adds	r6, r6, r3
 8006ba8:	6026      	str	r6, [r4, #0]
 8006baa:	6165      	str	r5, [r4, #20]
 8006bac:	9e01      	ldr	r6, [sp, #4]
 8006bae:	1aed      	subs	r5, r5, r3
 8006bb0:	60a5      	str	r5, [r4, #8]
 8006bb2:	9b01      	ldr	r3, [sp, #4]
 8006bb4:	42b3      	cmp	r3, r6
 8006bb6:	d200      	bcs.n	8006bba <__ssputs_r+0xa2>
 8006bb8:	001e      	movs	r6, r3
 8006bba:	0032      	movs	r2, r6
 8006bbc:	9903      	ldr	r1, [sp, #12]
 8006bbe:	6820      	ldr	r0, [r4, #0]
 8006bc0:	f000 faa5 	bl	800710e <memmove>
 8006bc4:	2000      	movs	r0, #0
 8006bc6:	68a3      	ldr	r3, [r4, #8]
 8006bc8:	1b9b      	subs	r3, r3, r6
 8006bca:	60a3      	str	r3, [r4, #8]
 8006bcc:	6823      	ldr	r3, [r4, #0]
 8006bce:	199e      	adds	r6, r3, r6
 8006bd0:	6026      	str	r6, [r4, #0]
 8006bd2:	b005      	add	sp, #20
 8006bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bd6:	46c0      	nop			; (mov r8, r8)
 8006bd8:	fffffb7f 	.word	0xfffffb7f

08006bdc <_svfiprintf_r>:
 8006bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bde:	b09f      	sub	sp, #124	; 0x7c
 8006be0:	9002      	str	r0, [sp, #8]
 8006be2:	9305      	str	r3, [sp, #20]
 8006be4:	898b      	ldrh	r3, [r1, #12]
 8006be6:	000f      	movs	r7, r1
 8006be8:	0016      	movs	r6, r2
 8006bea:	061b      	lsls	r3, r3, #24
 8006bec:	d510      	bpl.n	8006c10 <_svfiprintf_r+0x34>
 8006bee:	690b      	ldr	r3, [r1, #16]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d10d      	bne.n	8006c10 <_svfiprintf_r+0x34>
 8006bf4:	2140      	movs	r1, #64	; 0x40
 8006bf6:	f000 faeb 	bl	80071d0 <_malloc_r>
 8006bfa:	6038      	str	r0, [r7, #0]
 8006bfc:	6138      	str	r0, [r7, #16]
 8006bfe:	2800      	cmp	r0, #0
 8006c00:	d104      	bne.n	8006c0c <_svfiprintf_r+0x30>
 8006c02:	230c      	movs	r3, #12
 8006c04:	9a02      	ldr	r2, [sp, #8]
 8006c06:	3801      	subs	r0, #1
 8006c08:	6013      	str	r3, [r2, #0]
 8006c0a:	e0d8      	b.n	8006dbe <_svfiprintf_r+0x1e2>
 8006c0c:	2340      	movs	r3, #64	; 0x40
 8006c0e:	617b      	str	r3, [r7, #20]
 8006c10:	2300      	movs	r3, #0
 8006c12:	ad06      	add	r5, sp, #24
 8006c14:	616b      	str	r3, [r5, #20]
 8006c16:	3320      	adds	r3, #32
 8006c18:	766b      	strb	r3, [r5, #25]
 8006c1a:	3310      	adds	r3, #16
 8006c1c:	76ab      	strb	r3, [r5, #26]
 8006c1e:	0034      	movs	r4, r6
 8006c20:	7823      	ldrb	r3, [r4, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d103      	bne.n	8006c2e <_svfiprintf_r+0x52>
 8006c26:	1ba3      	subs	r3, r4, r6
 8006c28:	9304      	str	r3, [sp, #16]
 8006c2a:	d012      	beq.n	8006c52 <_svfiprintf_r+0x76>
 8006c2c:	e003      	b.n	8006c36 <_svfiprintf_r+0x5a>
 8006c2e:	2b25      	cmp	r3, #37	; 0x25
 8006c30:	d0f9      	beq.n	8006c26 <_svfiprintf_r+0x4a>
 8006c32:	3401      	adds	r4, #1
 8006c34:	e7f4      	b.n	8006c20 <_svfiprintf_r+0x44>
 8006c36:	1ba3      	subs	r3, r4, r6
 8006c38:	0032      	movs	r2, r6
 8006c3a:	0039      	movs	r1, r7
 8006c3c:	9802      	ldr	r0, [sp, #8]
 8006c3e:	f7ff ff6b 	bl	8006b18 <__ssputs_r>
 8006c42:	1c43      	adds	r3, r0, #1
 8006c44:	d100      	bne.n	8006c48 <_svfiprintf_r+0x6c>
 8006c46:	e0b4      	b.n	8006db2 <_svfiprintf_r+0x1d6>
 8006c48:	696a      	ldr	r2, [r5, #20]
 8006c4a:	9b04      	ldr	r3, [sp, #16]
 8006c4c:	4694      	mov	ip, r2
 8006c4e:	4463      	add	r3, ip
 8006c50:	616b      	str	r3, [r5, #20]
 8006c52:	7823      	ldrb	r3, [r4, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d100      	bne.n	8006c5a <_svfiprintf_r+0x7e>
 8006c58:	e0ab      	b.n	8006db2 <_svfiprintf_r+0x1d6>
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	4252      	negs	r2, r2
 8006c60:	606a      	str	r2, [r5, #4]
 8006c62:	a902      	add	r1, sp, #8
 8006c64:	3254      	adds	r2, #84	; 0x54
 8006c66:	1852      	adds	r2, r2, r1
 8006c68:	3401      	adds	r4, #1
 8006c6a:	602b      	str	r3, [r5, #0]
 8006c6c:	60eb      	str	r3, [r5, #12]
 8006c6e:	60ab      	str	r3, [r5, #8]
 8006c70:	7013      	strb	r3, [r2, #0]
 8006c72:	65ab      	str	r3, [r5, #88]	; 0x58
 8006c74:	4e53      	ldr	r6, [pc, #332]	; (8006dc4 <_svfiprintf_r+0x1e8>)
 8006c76:	7821      	ldrb	r1, [r4, #0]
 8006c78:	2205      	movs	r2, #5
 8006c7a:	0030      	movs	r0, r6
 8006c7c:	f000 fa3c 	bl	80070f8 <memchr>
 8006c80:	2800      	cmp	r0, #0
 8006c82:	d007      	beq.n	8006c94 <_svfiprintf_r+0xb8>
 8006c84:	2301      	movs	r3, #1
 8006c86:	1b80      	subs	r0, r0, r6
 8006c88:	4083      	lsls	r3, r0
 8006c8a:	682a      	ldr	r2, [r5, #0]
 8006c8c:	3401      	adds	r4, #1
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	602b      	str	r3, [r5, #0]
 8006c92:	e7ef      	b.n	8006c74 <_svfiprintf_r+0x98>
 8006c94:	682b      	ldr	r3, [r5, #0]
 8006c96:	06da      	lsls	r2, r3, #27
 8006c98:	d504      	bpl.n	8006ca4 <_svfiprintf_r+0xc8>
 8006c9a:	2253      	movs	r2, #83	; 0x53
 8006c9c:	2120      	movs	r1, #32
 8006c9e:	a802      	add	r0, sp, #8
 8006ca0:	1812      	adds	r2, r2, r0
 8006ca2:	7011      	strb	r1, [r2, #0]
 8006ca4:	071a      	lsls	r2, r3, #28
 8006ca6:	d504      	bpl.n	8006cb2 <_svfiprintf_r+0xd6>
 8006ca8:	2253      	movs	r2, #83	; 0x53
 8006caa:	212b      	movs	r1, #43	; 0x2b
 8006cac:	a802      	add	r0, sp, #8
 8006cae:	1812      	adds	r2, r2, r0
 8006cb0:	7011      	strb	r1, [r2, #0]
 8006cb2:	7822      	ldrb	r2, [r4, #0]
 8006cb4:	2a2a      	cmp	r2, #42	; 0x2a
 8006cb6:	d003      	beq.n	8006cc0 <_svfiprintf_r+0xe4>
 8006cb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cba:	2000      	movs	r0, #0
 8006cbc:	210a      	movs	r1, #10
 8006cbe:	e00e      	b.n	8006cde <_svfiprintf_r+0x102>
 8006cc0:	9a05      	ldr	r2, [sp, #20]
 8006cc2:	1d11      	adds	r1, r2, #4
 8006cc4:	6812      	ldr	r2, [r2, #0]
 8006cc6:	9105      	str	r1, [sp, #20]
 8006cc8:	2a00      	cmp	r2, #0
 8006cca:	db01      	blt.n	8006cd0 <_svfiprintf_r+0xf4>
 8006ccc:	9209      	str	r2, [sp, #36]	; 0x24
 8006cce:	e004      	b.n	8006cda <_svfiprintf_r+0xfe>
 8006cd0:	4252      	negs	r2, r2
 8006cd2:	60ea      	str	r2, [r5, #12]
 8006cd4:	2202      	movs	r2, #2
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	602b      	str	r3, [r5, #0]
 8006cda:	3401      	adds	r4, #1
 8006cdc:	e00b      	b.n	8006cf6 <_svfiprintf_r+0x11a>
 8006cde:	7822      	ldrb	r2, [r4, #0]
 8006ce0:	3a30      	subs	r2, #48	; 0x30
 8006ce2:	2a09      	cmp	r2, #9
 8006ce4:	d804      	bhi.n	8006cf0 <_svfiprintf_r+0x114>
 8006ce6:	434b      	muls	r3, r1
 8006ce8:	3401      	adds	r4, #1
 8006cea:	189b      	adds	r3, r3, r2
 8006cec:	2001      	movs	r0, #1
 8006cee:	e7f6      	b.n	8006cde <_svfiprintf_r+0x102>
 8006cf0:	2800      	cmp	r0, #0
 8006cf2:	d000      	beq.n	8006cf6 <_svfiprintf_r+0x11a>
 8006cf4:	9309      	str	r3, [sp, #36]	; 0x24
 8006cf6:	7823      	ldrb	r3, [r4, #0]
 8006cf8:	2b2e      	cmp	r3, #46	; 0x2e
 8006cfa:	d11e      	bne.n	8006d3a <_svfiprintf_r+0x15e>
 8006cfc:	7863      	ldrb	r3, [r4, #1]
 8006cfe:	2b2a      	cmp	r3, #42	; 0x2a
 8006d00:	d10a      	bne.n	8006d18 <_svfiprintf_r+0x13c>
 8006d02:	9b05      	ldr	r3, [sp, #20]
 8006d04:	3402      	adds	r4, #2
 8006d06:	1d1a      	adds	r2, r3, #4
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	9205      	str	r2, [sp, #20]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	da01      	bge.n	8006d14 <_svfiprintf_r+0x138>
 8006d10:	2301      	movs	r3, #1
 8006d12:	425b      	negs	r3, r3
 8006d14:	9307      	str	r3, [sp, #28]
 8006d16:	e010      	b.n	8006d3a <_svfiprintf_r+0x15e>
 8006d18:	2300      	movs	r3, #0
 8006d1a:	200a      	movs	r0, #10
 8006d1c:	001a      	movs	r2, r3
 8006d1e:	3401      	adds	r4, #1
 8006d20:	606b      	str	r3, [r5, #4]
 8006d22:	7821      	ldrb	r1, [r4, #0]
 8006d24:	3930      	subs	r1, #48	; 0x30
 8006d26:	2909      	cmp	r1, #9
 8006d28:	d804      	bhi.n	8006d34 <_svfiprintf_r+0x158>
 8006d2a:	4342      	muls	r2, r0
 8006d2c:	3401      	adds	r4, #1
 8006d2e:	1852      	adds	r2, r2, r1
 8006d30:	2301      	movs	r3, #1
 8006d32:	e7f6      	b.n	8006d22 <_svfiprintf_r+0x146>
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d000      	beq.n	8006d3a <_svfiprintf_r+0x15e>
 8006d38:	9207      	str	r2, [sp, #28]
 8006d3a:	4e23      	ldr	r6, [pc, #140]	; (8006dc8 <_svfiprintf_r+0x1ec>)
 8006d3c:	7821      	ldrb	r1, [r4, #0]
 8006d3e:	2203      	movs	r2, #3
 8006d40:	0030      	movs	r0, r6
 8006d42:	f000 f9d9 	bl	80070f8 <memchr>
 8006d46:	2800      	cmp	r0, #0
 8006d48:	d006      	beq.n	8006d58 <_svfiprintf_r+0x17c>
 8006d4a:	2340      	movs	r3, #64	; 0x40
 8006d4c:	1b80      	subs	r0, r0, r6
 8006d4e:	4083      	lsls	r3, r0
 8006d50:	682a      	ldr	r2, [r5, #0]
 8006d52:	3401      	adds	r4, #1
 8006d54:	4313      	orrs	r3, r2
 8006d56:	602b      	str	r3, [r5, #0]
 8006d58:	7821      	ldrb	r1, [r4, #0]
 8006d5a:	2206      	movs	r2, #6
 8006d5c:	481b      	ldr	r0, [pc, #108]	; (8006dcc <_svfiprintf_r+0x1f0>)
 8006d5e:	1c66      	adds	r6, r4, #1
 8006d60:	7629      	strb	r1, [r5, #24]
 8006d62:	f000 f9c9 	bl	80070f8 <memchr>
 8006d66:	2800      	cmp	r0, #0
 8006d68:	d012      	beq.n	8006d90 <_svfiprintf_r+0x1b4>
 8006d6a:	4b19      	ldr	r3, [pc, #100]	; (8006dd0 <_svfiprintf_r+0x1f4>)
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d106      	bne.n	8006d7e <_svfiprintf_r+0x1a2>
 8006d70:	2207      	movs	r2, #7
 8006d72:	9b05      	ldr	r3, [sp, #20]
 8006d74:	3307      	adds	r3, #7
 8006d76:	4393      	bics	r3, r2
 8006d78:	3308      	adds	r3, #8
 8006d7a:	9305      	str	r3, [sp, #20]
 8006d7c:	e014      	b.n	8006da8 <_svfiprintf_r+0x1cc>
 8006d7e:	ab05      	add	r3, sp, #20
 8006d80:	9300      	str	r3, [sp, #0]
 8006d82:	003a      	movs	r2, r7
 8006d84:	4b13      	ldr	r3, [pc, #76]	; (8006dd4 <_svfiprintf_r+0x1f8>)
 8006d86:	0029      	movs	r1, r5
 8006d88:	9802      	ldr	r0, [sp, #8]
 8006d8a:	e000      	b.n	8006d8e <_svfiprintf_r+0x1b2>
 8006d8c:	bf00      	nop
 8006d8e:	e007      	b.n	8006da0 <_svfiprintf_r+0x1c4>
 8006d90:	ab05      	add	r3, sp, #20
 8006d92:	9300      	str	r3, [sp, #0]
 8006d94:	003a      	movs	r2, r7
 8006d96:	4b0f      	ldr	r3, [pc, #60]	; (8006dd4 <_svfiprintf_r+0x1f8>)
 8006d98:	0029      	movs	r1, r5
 8006d9a:	9802      	ldr	r0, [sp, #8]
 8006d9c:	f000 f88a 	bl	8006eb4 <_printf_i>
 8006da0:	9003      	str	r0, [sp, #12]
 8006da2:	9b03      	ldr	r3, [sp, #12]
 8006da4:	3301      	adds	r3, #1
 8006da6:	d004      	beq.n	8006db2 <_svfiprintf_r+0x1d6>
 8006da8:	696b      	ldr	r3, [r5, #20]
 8006daa:	9a03      	ldr	r2, [sp, #12]
 8006dac:	189b      	adds	r3, r3, r2
 8006dae:	616b      	str	r3, [r5, #20]
 8006db0:	e735      	b.n	8006c1e <_svfiprintf_r+0x42>
 8006db2:	89bb      	ldrh	r3, [r7, #12]
 8006db4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006db6:	065b      	lsls	r3, r3, #25
 8006db8:	d501      	bpl.n	8006dbe <_svfiprintf_r+0x1e2>
 8006dba:	2001      	movs	r0, #1
 8006dbc:	4240      	negs	r0, r0
 8006dbe:	b01f      	add	sp, #124	; 0x7c
 8006dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dc2:	46c0      	nop			; (mov r8, r8)
 8006dc4:	08007709 	.word	0x08007709
 8006dc8:	0800770f 	.word	0x0800770f
 8006dcc:	08007713 	.word	0x08007713
 8006dd0:	00000000 	.word	0x00000000
 8006dd4:	08006b19 	.word	0x08006b19

08006dd8 <_printf_common>:
 8006dd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006dda:	0017      	movs	r7, r2
 8006ddc:	9301      	str	r3, [sp, #4]
 8006dde:	688a      	ldr	r2, [r1, #8]
 8006de0:	690b      	ldr	r3, [r1, #16]
 8006de2:	9000      	str	r0, [sp, #0]
 8006de4:	000c      	movs	r4, r1
 8006de6:	4293      	cmp	r3, r2
 8006de8:	da00      	bge.n	8006dec <_printf_common+0x14>
 8006dea:	0013      	movs	r3, r2
 8006dec:	0022      	movs	r2, r4
 8006dee:	603b      	str	r3, [r7, #0]
 8006df0:	3243      	adds	r2, #67	; 0x43
 8006df2:	7812      	ldrb	r2, [r2, #0]
 8006df4:	2a00      	cmp	r2, #0
 8006df6:	d001      	beq.n	8006dfc <_printf_common+0x24>
 8006df8:	3301      	adds	r3, #1
 8006dfa:	603b      	str	r3, [r7, #0]
 8006dfc:	6823      	ldr	r3, [r4, #0]
 8006dfe:	069b      	lsls	r3, r3, #26
 8006e00:	d502      	bpl.n	8006e08 <_printf_common+0x30>
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	3302      	adds	r3, #2
 8006e06:	603b      	str	r3, [r7, #0]
 8006e08:	2506      	movs	r5, #6
 8006e0a:	6823      	ldr	r3, [r4, #0]
 8006e0c:	401d      	ands	r5, r3
 8006e0e:	d01e      	beq.n	8006e4e <_printf_common+0x76>
 8006e10:	0023      	movs	r3, r4
 8006e12:	3343      	adds	r3, #67	; 0x43
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	1e5a      	subs	r2, r3, #1
 8006e18:	4193      	sbcs	r3, r2
 8006e1a:	6822      	ldr	r2, [r4, #0]
 8006e1c:	0692      	lsls	r2, r2, #26
 8006e1e:	d51c      	bpl.n	8006e5a <_printf_common+0x82>
 8006e20:	2030      	movs	r0, #48	; 0x30
 8006e22:	18e1      	adds	r1, r4, r3
 8006e24:	3143      	adds	r1, #67	; 0x43
 8006e26:	7008      	strb	r0, [r1, #0]
 8006e28:	0021      	movs	r1, r4
 8006e2a:	1c5a      	adds	r2, r3, #1
 8006e2c:	3145      	adds	r1, #69	; 0x45
 8006e2e:	7809      	ldrb	r1, [r1, #0]
 8006e30:	18a2      	adds	r2, r4, r2
 8006e32:	3243      	adds	r2, #67	; 0x43
 8006e34:	3302      	adds	r3, #2
 8006e36:	7011      	strb	r1, [r2, #0]
 8006e38:	e00f      	b.n	8006e5a <_printf_common+0x82>
 8006e3a:	0022      	movs	r2, r4
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	3219      	adds	r2, #25
 8006e40:	9901      	ldr	r1, [sp, #4]
 8006e42:	9800      	ldr	r0, [sp, #0]
 8006e44:	9e08      	ldr	r6, [sp, #32]
 8006e46:	47b0      	blx	r6
 8006e48:	1c43      	adds	r3, r0, #1
 8006e4a:	d00e      	beq.n	8006e6a <_printf_common+0x92>
 8006e4c:	3501      	adds	r5, #1
 8006e4e:	68e3      	ldr	r3, [r4, #12]
 8006e50:	683a      	ldr	r2, [r7, #0]
 8006e52:	1a9b      	subs	r3, r3, r2
 8006e54:	429d      	cmp	r5, r3
 8006e56:	dbf0      	blt.n	8006e3a <_printf_common+0x62>
 8006e58:	e7da      	b.n	8006e10 <_printf_common+0x38>
 8006e5a:	0022      	movs	r2, r4
 8006e5c:	9901      	ldr	r1, [sp, #4]
 8006e5e:	3243      	adds	r2, #67	; 0x43
 8006e60:	9800      	ldr	r0, [sp, #0]
 8006e62:	9d08      	ldr	r5, [sp, #32]
 8006e64:	47a8      	blx	r5
 8006e66:	1c43      	adds	r3, r0, #1
 8006e68:	d102      	bne.n	8006e70 <_printf_common+0x98>
 8006e6a:	2001      	movs	r0, #1
 8006e6c:	4240      	negs	r0, r0
 8006e6e:	e020      	b.n	8006eb2 <_printf_common+0xda>
 8006e70:	2306      	movs	r3, #6
 8006e72:	6820      	ldr	r0, [r4, #0]
 8006e74:	68e1      	ldr	r1, [r4, #12]
 8006e76:	683a      	ldr	r2, [r7, #0]
 8006e78:	4003      	ands	r3, r0
 8006e7a:	2500      	movs	r5, #0
 8006e7c:	2b04      	cmp	r3, #4
 8006e7e:	d103      	bne.n	8006e88 <_printf_common+0xb0>
 8006e80:	1a8d      	subs	r5, r1, r2
 8006e82:	43eb      	mvns	r3, r5
 8006e84:	17db      	asrs	r3, r3, #31
 8006e86:	401d      	ands	r5, r3
 8006e88:	68a3      	ldr	r3, [r4, #8]
 8006e8a:	6922      	ldr	r2, [r4, #16]
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	dd01      	ble.n	8006e94 <_printf_common+0xbc>
 8006e90:	1a9b      	subs	r3, r3, r2
 8006e92:	18ed      	adds	r5, r5, r3
 8006e94:	2700      	movs	r7, #0
 8006e96:	42bd      	cmp	r5, r7
 8006e98:	d00a      	beq.n	8006eb0 <_printf_common+0xd8>
 8006e9a:	0022      	movs	r2, r4
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	321a      	adds	r2, #26
 8006ea0:	9901      	ldr	r1, [sp, #4]
 8006ea2:	9800      	ldr	r0, [sp, #0]
 8006ea4:	9e08      	ldr	r6, [sp, #32]
 8006ea6:	47b0      	blx	r6
 8006ea8:	1c43      	adds	r3, r0, #1
 8006eaa:	d0de      	beq.n	8006e6a <_printf_common+0x92>
 8006eac:	3701      	adds	r7, #1
 8006eae:	e7f2      	b.n	8006e96 <_printf_common+0xbe>
 8006eb0:	2000      	movs	r0, #0
 8006eb2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08006eb4 <_printf_i>:
 8006eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eb6:	b08b      	sub	sp, #44	; 0x2c
 8006eb8:	9206      	str	r2, [sp, #24]
 8006eba:	000a      	movs	r2, r1
 8006ebc:	3243      	adds	r2, #67	; 0x43
 8006ebe:	9307      	str	r3, [sp, #28]
 8006ec0:	9005      	str	r0, [sp, #20]
 8006ec2:	9204      	str	r2, [sp, #16]
 8006ec4:	7e0a      	ldrb	r2, [r1, #24]
 8006ec6:	000c      	movs	r4, r1
 8006ec8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006eca:	2a6e      	cmp	r2, #110	; 0x6e
 8006ecc:	d100      	bne.n	8006ed0 <_printf_i+0x1c>
 8006ece:	e0ab      	b.n	8007028 <_printf_i+0x174>
 8006ed0:	d811      	bhi.n	8006ef6 <_printf_i+0x42>
 8006ed2:	2a63      	cmp	r2, #99	; 0x63
 8006ed4:	d022      	beq.n	8006f1c <_printf_i+0x68>
 8006ed6:	d809      	bhi.n	8006eec <_printf_i+0x38>
 8006ed8:	2a00      	cmp	r2, #0
 8006eda:	d100      	bne.n	8006ede <_printf_i+0x2a>
 8006edc:	e0b5      	b.n	800704a <_printf_i+0x196>
 8006ede:	2a58      	cmp	r2, #88	; 0x58
 8006ee0:	d000      	beq.n	8006ee4 <_printf_i+0x30>
 8006ee2:	e0c5      	b.n	8007070 <_printf_i+0x1bc>
 8006ee4:	3145      	adds	r1, #69	; 0x45
 8006ee6:	700a      	strb	r2, [r1, #0]
 8006ee8:	4a81      	ldr	r2, [pc, #516]	; (80070f0 <_printf_i+0x23c>)
 8006eea:	e04f      	b.n	8006f8c <_printf_i+0xd8>
 8006eec:	2a64      	cmp	r2, #100	; 0x64
 8006eee:	d01d      	beq.n	8006f2c <_printf_i+0x78>
 8006ef0:	2a69      	cmp	r2, #105	; 0x69
 8006ef2:	d01b      	beq.n	8006f2c <_printf_i+0x78>
 8006ef4:	e0bc      	b.n	8007070 <_printf_i+0x1bc>
 8006ef6:	2a73      	cmp	r2, #115	; 0x73
 8006ef8:	d100      	bne.n	8006efc <_printf_i+0x48>
 8006efa:	e0aa      	b.n	8007052 <_printf_i+0x19e>
 8006efc:	d809      	bhi.n	8006f12 <_printf_i+0x5e>
 8006efe:	2a6f      	cmp	r2, #111	; 0x6f
 8006f00:	d029      	beq.n	8006f56 <_printf_i+0xa2>
 8006f02:	2a70      	cmp	r2, #112	; 0x70
 8006f04:	d000      	beq.n	8006f08 <_printf_i+0x54>
 8006f06:	e0b3      	b.n	8007070 <_printf_i+0x1bc>
 8006f08:	2220      	movs	r2, #32
 8006f0a:	6809      	ldr	r1, [r1, #0]
 8006f0c:	430a      	orrs	r2, r1
 8006f0e:	6022      	str	r2, [r4, #0]
 8006f10:	e037      	b.n	8006f82 <_printf_i+0xce>
 8006f12:	2a75      	cmp	r2, #117	; 0x75
 8006f14:	d01f      	beq.n	8006f56 <_printf_i+0xa2>
 8006f16:	2a78      	cmp	r2, #120	; 0x78
 8006f18:	d033      	beq.n	8006f82 <_printf_i+0xce>
 8006f1a:	e0a9      	b.n	8007070 <_printf_i+0x1bc>
 8006f1c:	000e      	movs	r6, r1
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	3642      	adds	r6, #66	; 0x42
 8006f22:	1d11      	adds	r1, r2, #4
 8006f24:	6019      	str	r1, [r3, #0]
 8006f26:	6813      	ldr	r3, [r2, #0]
 8006f28:	7033      	strb	r3, [r6, #0]
 8006f2a:	e0a4      	b.n	8007076 <_printf_i+0x1c2>
 8006f2c:	6821      	ldr	r1, [r4, #0]
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	0608      	lsls	r0, r1, #24
 8006f32:	d406      	bmi.n	8006f42 <_printf_i+0x8e>
 8006f34:	0649      	lsls	r1, r1, #25
 8006f36:	d504      	bpl.n	8006f42 <_printf_i+0x8e>
 8006f38:	1d11      	adds	r1, r2, #4
 8006f3a:	6019      	str	r1, [r3, #0]
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	5ed5      	ldrsh	r5, [r2, r3]
 8006f40:	e002      	b.n	8006f48 <_printf_i+0x94>
 8006f42:	1d11      	adds	r1, r2, #4
 8006f44:	6019      	str	r1, [r3, #0]
 8006f46:	6815      	ldr	r5, [r2, #0]
 8006f48:	2d00      	cmp	r5, #0
 8006f4a:	da3b      	bge.n	8006fc4 <_printf_i+0x110>
 8006f4c:	232d      	movs	r3, #45	; 0x2d
 8006f4e:	9a04      	ldr	r2, [sp, #16]
 8006f50:	426d      	negs	r5, r5
 8006f52:	7013      	strb	r3, [r2, #0]
 8006f54:	e036      	b.n	8006fc4 <_printf_i+0x110>
 8006f56:	6821      	ldr	r1, [r4, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	0608      	lsls	r0, r1, #24
 8006f5c:	d406      	bmi.n	8006f6c <_printf_i+0xb8>
 8006f5e:	0649      	lsls	r1, r1, #25
 8006f60:	d504      	bpl.n	8006f6c <_printf_i+0xb8>
 8006f62:	6815      	ldr	r5, [r2, #0]
 8006f64:	1d11      	adds	r1, r2, #4
 8006f66:	6019      	str	r1, [r3, #0]
 8006f68:	b2ad      	uxth	r5, r5
 8006f6a:	e002      	b.n	8006f72 <_printf_i+0xbe>
 8006f6c:	1d11      	adds	r1, r2, #4
 8006f6e:	6019      	str	r1, [r3, #0]
 8006f70:	6815      	ldr	r5, [r2, #0]
 8006f72:	4b5f      	ldr	r3, [pc, #380]	; (80070f0 <_printf_i+0x23c>)
 8006f74:	7e22      	ldrb	r2, [r4, #24]
 8006f76:	9303      	str	r3, [sp, #12]
 8006f78:	2708      	movs	r7, #8
 8006f7a:	2a6f      	cmp	r2, #111	; 0x6f
 8006f7c:	d01d      	beq.n	8006fba <_printf_i+0x106>
 8006f7e:	270a      	movs	r7, #10
 8006f80:	e01b      	b.n	8006fba <_printf_i+0x106>
 8006f82:	0022      	movs	r2, r4
 8006f84:	2178      	movs	r1, #120	; 0x78
 8006f86:	3245      	adds	r2, #69	; 0x45
 8006f88:	7011      	strb	r1, [r2, #0]
 8006f8a:	4a5a      	ldr	r2, [pc, #360]	; (80070f4 <_printf_i+0x240>)
 8006f8c:	6819      	ldr	r1, [r3, #0]
 8006f8e:	9203      	str	r2, [sp, #12]
 8006f90:	1d08      	adds	r0, r1, #4
 8006f92:	6822      	ldr	r2, [r4, #0]
 8006f94:	6018      	str	r0, [r3, #0]
 8006f96:	680d      	ldr	r5, [r1, #0]
 8006f98:	0610      	lsls	r0, r2, #24
 8006f9a:	d402      	bmi.n	8006fa2 <_printf_i+0xee>
 8006f9c:	0650      	lsls	r0, r2, #25
 8006f9e:	d500      	bpl.n	8006fa2 <_printf_i+0xee>
 8006fa0:	b2ad      	uxth	r5, r5
 8006fa2:	07d3      	lsls	r3, r2, #31
 8006fa4:	d502      	bpl.n	8006fac <_printf_i+0xf8>
 8006fa6:	2320      	movs	r3, #32
 8006fa8:	431a      	orrs	r2, r3
 8006faa:	6022      	str	r2, [r4, #0]
 8006fac:	2710      	movs	r7, #16
 8006fae:	2d00      	cmp	r5, #0
 8006fb0:	d103      	bne.n	8006fba <_printf_i+0x106>
 8006fb2:	2320      	movs	r3, #32
 8006fb4:	6822      	ldr	r2, [r4, #0]
 8006fb6:	439a      	bics	r2, r3
 8006fb8:	6022      	str	r2, [r4, #0]
 8006fba:	0023      	movs	r3, r4
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	3343      	adds	r3, #67	; 0x43
 8006fc0:	701a      	strb	r2, [r3, #0]
 8006fc2:	e002      	b.n	8006fca <_printf_i+0x116>
 8006fc4:	270a      	movs	r7, #10
 8006fc6:	4b4a      	ldr	r3, [pc, #296]	; (80070f0 <_printf_i+0x23c>)
 8006fc8:	9303      	str	r3, [sp, #12]
 8006fca:	6863      	ldr	r3, [r4, #4]
 8006fcc:	60a3      	str	r3, [r4, #8]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	db09      	blt.n	8006fe6 <_printf_i+0x132>
 8006fd2:	2204      	movs	r2, #4
 8006fd4:	6821      	ldr	r1, [r4, #0]
 8006fd6:	4391      	bics	r1, r2
 8006fd8:	6021      	str	r1, [r4, #0]
 8006fda:	2d00      	cmp	r5, #0
 8006fdc:	d105      	bne.n	8006fea <_printf_i+0x136>
 8006fde:	9e04      	ldr	r6, [sp, #16]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d011      	beq.n	8007008 <_printf_i+0x154>
 8006fe4:	e07b      	b.n	80070de <_printf_i+0x22a>
 8006fe6:	2d00      	cmp	r5, #0
 8006fe8:	d079      	beq.n	80070de <_printf_i+0x22a>
 8006fea:	9e04      	ldr	r6, [sp, #16]
 8006fec:	0028      	movs	r0, r5
 8006fee:	0039      	movs	r1, r7
 8006ff0:	f7f9 f910 	bl	8000214 <__aeabi_uidivmod>
 8006ff4:	9b03      	ldr	r3, [sp, #12]
 8006ff6:	3e01      	subs	r6, #1
 8006ff8:	5c5b      	ldrb	r3, [r3, r1]
 8006ffa:	0028      	movs	r0, r5
 8006ffc:	7033      	strb	r3, [r6, #0]
 8006ffe:	0039      	movs	r1, r7
 8007000:	f7f9 f882 	bl	8000108 <__aeabi_uidiv>
 8007004:	1e05      	subs	r5, r0, #0
 8007006:	d1f1      	bne.n	8006fec <_printf_i+0x138>
 8007008:	2f08      	cmp	r7, #8
 800700a:	d109      	bne.n	8007020 <_printf_i+0x16c>
 800700c:	6823      	ldr	r3, [r4, #0]
 800700e:	07db      	lsls	r3, r3, #31
 8007010:	d506      	bpl.n	8007020 <_printf_i+0x16c>
 8007012:	6863      	ldr	r3, [r4, #4]
 8007014:	6922      	ldr	r2, [r4, #16]
 8007016:	4293      	cmp	r3, r2
 8007018:	dc02      	bgt.n	8007020 <_printf_i+0x16c>
 800701a:	2330      	movs	r3, #48	; 0x30
 800701c:	3e01      	subs	r6, #1
 800701e:	7033      	strb	r3, [r6, #0]
 8007020:	9b04      	ldr	r3, [sp, #16]
 8007022:	1b9b      	subs	r3, r3, r6
 8007024:	6123      	str	r3, [r4, #16]
 8007026:	e02b      	b.n	8007080 <_printf_i+0x1cc>
 8007028:	6809      	ldr	r1, [r1, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	0608      	lsls	r0, r1, #24
 800702e:	d407      	bmi.n	8007040 <_printf_i+0x18c>
 8007030:	0649      	lsls	r1, r1, #25
 8007032:	d505      	bpl.n	8007040 <_printf_i+0x18c>
 8007034:	1d11      	adds	r1, r2, #4
 8007036:	6019      	str	r1, [r3, #0]
 8007038:	6813      	ldr	r3, [r2, #0]
 800703a:	8aa2      	ldrh	r2, [r4, #20]
 800703c:	801a      	strh	r2, [r3, #0]
 800703e:	e004      	b.n	800704a <_printf_i+0x196>
 8007040:	1d11      	adds	r1, r2, #4
 8007042:	6019      	str	r1, [r3, #0]
 8007044:	6813      	ldr	r3, [r2, #0]
 8007046:	6962      	ldr	r2, [r4, #20]
 8007048:	601a      	str	r2, [r3, #0]
 800704a:	2300      	movs	r3, #0
 800704c:	9e04      	ldr	r6, [sp, #16]
 800704e:	6123      	str	r3, [r4, #16]
 8007050:	e016      	b.n	8007080 <_printf_i+0x1cc>
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	1d11      	adds	r1, r2, #4
 8007056:	6019      	str	r1, [r3, #0]
 8007058:	6816      	ldr	r6, [r2, #0]
 800705a:	2100      	movs	r1, #0
 800705c:	6862      	ldr	r2, [r4, #4]
 800705e:	0030      	movs	r0, r6
 8007060:	f000 f84a 	bl	80070f8 <memchr>
 8007064:	2800      	cmp	r0, #0
 8007066:	d001      	beq.n	800706c <_printf_i+0x1b8>
 8007068:	1b80      	subs	r0, r0, r6
 800706a:	6060      	str	r0, [r4, #4]
 800706c:	6863      	ldr	r3, [r4, #4]
 800706e:	e003      	b.n	8007078 <_printf_i+0x1c4>
 8007070:	0026      	movs	r6, r4
 8007072:	3642      	adds	r6, #66	; 0x42
 8007074:	7032      	strb	r2, [r6, #0]
 8007076:	2301      	movs	r3, #1
 8007078:	6123      	str	r3, [r4, #16]
 800707a:	2300      	movs	r3, #0
 800707c:	9a04      	ldr	r2, [sp, #16]
 800707e:	7013      	strb	r3, [r2, #0]
 8007080:	9b07      	ldr	r3, [sp, #28]
 8007082:	aa09      	add	r2, sp, #36	; 0x24
 8007084:	9300      	str	r3, [sp, #0]
 8007086:	0021      	movs	r1, r4
 8007088:	9b06      	ldr	r3, [sp, #24]
 800708a:	9805      	ldr	r0, [sp, #20]
 800708c:	f7ff fea4 	bl	8006dd8 <_printf_common>
 8007090:	1c43      	adds	r3, r0, #1
 8007092:	d102      	bne.n	800709a <_printf_i+0x1e6>
 8007094:	2001      	movs	r0, #1
 8007096:	4240      	negs	r0, r0
 8007098:	e027      	b.n	80070ea <_printf_i+0x236>
 800709a:	6923      	ldr	r3, [r4, #16]
 800709c:	0032      	movs	r2, r6
 800709e:	9906      	ldr	r1, [sp, #24]
 80070a0:	9805      	ldr	r0, [sp, #20]
 80070a2:	9d07      	ldr	r5, [sp, #28]
 80070a4:	47a8      	blx	r5
 80070a6:	1c43      	adds	r3, r0, #1
 80070a8:	d0f4      	beq.n	8007094 <_printf_i+0x1e0>
 80070aa:	6823      	ldr	r3, [r4, #0]
 80070ac:	2500      	movs	r5, #0
 80070ae:	079b      	lsls	r3, r3, #30
 80070b0:	d40f      	bmi.n	80070d2 <_printf_i+0x21e>
 80070b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070b4:	68e0      	ldr	r0, [r4, #12]
 80070b6:	4298      	cmp	r0, r3
 80070b8:	da17      	bge.n	80070ea <_printf_i+0x236>
 80070ba:	0018      	movs	r0, r3
 80070bc:	e015      	b.n	80070ea <_printf_i+0x236>
 80070be:	0022      	movs	r2, r4
 80070c0:	2301      	movs	r3, #1
 80070c2:	3219      	adds	r2, #25
 80070c4:	9906      	ldr	r1, [sp, #24]
 80070c6:	9805      	ldr	r0, [sp, #20]
 80070c8:	9e07      	ldr	r6, [sp, #28]
 80070ca:	47b0      	blx	r6
 80070cc:	1c43      	adds	r3, r0, #1
 80070ce:	d0e1      	beq.n	8007094 <_printf_i+0x1e0>
 80070d0:	3501      	adds	r5, #1
 80070d2:	68e3      	ldr	r3, [r4, #12]
 80070d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070d6:	1a9b      	subs	r3, r3, r2
 80070d8:	429d      	cmp	r5, r3
 80070da:	dbf0      	blt.n	80070be <_printf_i+0x20a>
 80070dc:	e7e9      	b.n	80070b2 <_printf_i+0x1fe>
 80070de:	0026      	movs	r6, r4
 80070e0:	9b03      	ldr	r3, [sp, #12]
 80070e2:	3642      	adds	r6, #66	; 0x42
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	7033      	strb	r3, [r6, #0]
 80070e8:	e78e      	b.n	8007008 <_printf_i+0x154>
 80070ea:	b00b      	add	sp, #44	; 0x2c
 80070ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070ee:	46c0      	nop			; (mov r8, r8)
 80070f0:	0800771a 	.word	0x0800771a
 80070f4:	0800772b 	.word	0x0800772b

080070f8 <memchr>:
 80070f8:	b2c9      	uxtb	r1, r1
 80070fa:	1882      	adds	r2, r0, r2
 80070fc:	4290      	cmp	r0, r2
 80070fe:	d004      	beq.n	800710a <memchr+0x12>
 8007100:	7803      	ldrb	r3, [r0, #0]
 8007102:	428b      	cmp	r3, r1
 8007104:	d002      	beq.n	800710c <memchr+0x14>
 8007106:	3001      	adds	r0, #1
 8007108:	e7f8      	b.n	80070fc <memchr+0x4>
 800710a:	2000      	movs	r0, #0
 800710c:	4770      	bx	lr

0800710e <memmove>:
 800710e:	b510      	push	{r4, lr}
 8007110:	4288      	cmp	r0, r1
 8007112:	d902      	bls.n	800711a <memmove+0xc>
 8007114:	188b      	adds	r3, r1, r2
 8007116:	4298      	cmp	r0, r3
 8007118:	d301      	bcc.n	800711e <memmove+0x10>
 800711a:	2300      	movs	r3, #0
 800711c:	e005      	b.n	800712a <memmove+0x1c>
 800711e:	1a9b      	subs	r3, r3, r2
 8007120:	3a01      	subs	r2, #1
 8007122:	d308      	bcc.n	8007136 <memmove+0x28>
 8007124:	5c99      	ldrb	r1, [r3, r2]
 8007126:	5481      	strb	r1, [r0, r2]
 8007128:	e7fa      	b.n	8007120 <memmove+0x12>
 800712a:	4293      	cmp	r3, r2
 800712c:	d003      	beq.n	8007136 <memmove+0x28>
 800712e:	5ccc      	ldrb	r4, [r1, r3]
 8007130:	54c4      	strb	r4, [r0, r3]
 8007132:	3301      	adds	r3, #1
 8007134:	e7f9      	b.n	800712a <memmove+0x1c>
 8007136:	bd10      	pop	{r4, pc}

08007138 <_free_r>:
 8007138:	b570      	push	{r4, r5, r6, lr}
 800713a:	0005      	movs	r5, r0
 800713c:	2900      	cmp	r1, #0
 800713e:	d044      	beq.n	80071ca <_free_r+0x92>
 8007140:	1f0c      	subs	r4, r1, #4
 8007142:	6823      	ldr	r3, [r4, #0]
 8007144:	2b00      	cmp	r3, #0
 8007146:	da00      	bge.n	800714a <_free_r+0x12>
 8007148:	18e4      	adds	r4, r4, r3
 800714a:	0028      	movs	r0, r5
 800714c:	f000 f8d8 	bl	8007300 <__malloc_lock>
 8007150:	4a1e      	ldr	r2, [pc, #120]	; (80071cc <_free_r+0x94>)
 8007152:	6813      	ldr	r3, [r2, #0]
 8007154:	0011      	movs	r1, r2
 8007156:	2b00      	cmp	r3, #0
 8007158:	d102      	bne.n	8007160 <_free_r+0x28>
 800715a:	6063      	str	r3, [r4, #4]
 800715c:	6014      	str	r4, [r2, #0]
 800715e:	e031      	b.n	80071c4 <_free_r+0x8c>
 8007160:	42a3      	cmp	r3, r4
 8007162:	d90d      	bls.n	8007180 <_free_r+0x48>
 8007164:	6822      	ldr	r2, [r4, #0]
 8007166:	18a0      	adds	r0, r4, r2
 8007168:	4283      	cmp	r3, r0
 800716a:	d103      	bne.n	8007174 <_free_r+0x3c>
 800716c:	6818      	ldr	r0, [r3, #0]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	1882      	adds	r2, r0, r2
 8007172:	6022      	str	r2, [r4, #0]
 8007174:	6063      	str	r3, [r4, #4]
 8007176:	600c      	str	r4, [r1, #0]
 8007178:	e024      	b.n	80071c4 <_free_r+0x8c>
 800717a:	42a2      	cmp	r2, r4
 800717c:	d803      	bhi.n	8007186 <_free_r+0x4e>
 800717e:	0013      	movs	r3, r2
 8007180:	685a      	ldr	r2, [r3, #4]
 8007182:	2a00      	cmp	r2, #0
 8007184:	d1f9      	bne.n	800717a <_free_r+0x42>
 8007186:	681e      	ldr	r6, [r3, #0]
 8007188:	1998      	adds	r0, r3, r6
 800718a:	42a0      	cmp	r0, r4
 800718c:	d10b      	bne.n	80071a6 <_free_r+0x6e>
 800718e:	6821      	ldr	r1, [r4, #0]
 8007190:	1871      	adds	r1, r6, r1
 8007192:	1858      	adds	r0, r3, r1
 8007194:	6019      	str	r1, [r3, #0]
 8007196:	4282      	cmp	r2, r0
 8007198:	d114      	bne.n	80071c4 <_free_r+0x8c>
 800719a:	6810      	ldr	r0, [r2, #0]
 800719c:	6852      	ldr	r2, [r2, #4]
 800719e:	1841      	adds	r1, r0, r1
 80071a0:	6019      	str	r1, [r3, #0]
 80071a2:	605a      	str	r2, [r3, #4]
 80071a4:	e00e      	b.n	80071c4 <_free_r+0x8c>
 80071a6:	42a0      	cmp	r0, r4
 80071a8:	d902      	bls.n	80071b0 <_free_r+0x78>
 80071aa:	230c      	movs	r3, #12
 80071ac:	602b      	str	r3, [r5, #0]
 80071ae:	e009      	b.n	80071c4 <_free_r+0x8c>
 80071b0:	6821      	ldr	r1, [r4, #0]
 80071b2:	1860      	adds	r0, r4, r1
 80071b4:	4282      	cmp	r2, r0
 80071b6:	d103      	bne.n	80071c0 <_free_r+0x88>
 80071b8:	6810      	ldr	r0, [r2, #0]
 80071ba:	6852      	ldr	r2, [r2, #4]
 80071bc:	1841      	adds	r1, r0, r1
 80071be:	6021      	str	r1, [r4, #0]
 80071c0:	6062      	str	r2, [r4, #4]
 80071c2:	605c      	str	r4, [r3, #4]
 80071c4:	0028      	movs	r0, r5
 80071c6:	f000 f89c 	bl	8007302 <__malloc_unlock>
 80071ca:	bd70      	pop	{r4, r5, r6, pc}
 80071cc:	2000017c 	.word	0x2000017c

080071d0 <_malloc_r>:
 80071d0:	2303      	movs	r3, #3
 80071d2:	b570      	push	{r4, r5, r6, lr}
 80071d4:	1ccd      	adds	r5, r1, #3
 80071d6:	439d      	bics	r5, r3
 80071d8:	3508      	adds	r5, #8
 80071da:	0006      	movs	r6, r0
 80071dc:	2d0c      	cmp	r5, #12
 80071de:	d201      	bcs.n	80071e4 <_malloc_r+0x14>
 80071e0:	250c      	movs	r5, #12
 80071e2:	e001      	b.n	80071e8 <_malloc_r+0x18>
 80071e4:	2d00      	cmp	r5, #0
 80071e6:	db01      	blt.n	80071ec <_malloc_r+0x1c>
 80071e8:	42a9      	cmp	r1, r5
 80071ea:	d902      	bls.n	80071f2 <_malloc_r+0x22>
 80071ec:	230c      	movs	r3, #12
 80071ee:	6033      	str	r3, [r6, #0]
 80071f0:	e048      	b.n	8007284 <_malloc_r+0xb4>
 80071f2:	0030      	movs	r0, r6
 80071f4:	f000 f884 	bl	8007300 <__malloc_lock>
 80071f8:	4b23      	ldr	r3, [pc, #140]	; (8007288 <_malloc_r+0xb8>)
 80071fa:	681c      	ldr	r4, [r3, #0]
 80071fc:	001a      	movs	r2, r3
 80071fe:	0021      	movs	r1, r4
 8007200:	2900      	cmp	r1, #0
 8007202:	d013      	beq.n	800722c <_malloc_r+0x5c>
 8007204:	680b      	ldr	r3, [r1, #0]
 8007206:	1b5b      	subs	r3, r3, r5
 8007208:	d40d      	bmi.n	8007226 <_malloc_r+0x56>
 800720a:	2b0b      	cmp	r3, #11
 800720c:	d902      	bls.n	8007214 <_malloc_r+0x44>
 800720e:	600b      	str	r3, [r1, #0]
 8007210:	18cc      	adds	r4, r1, r3
 8007212:	e01e      	b.n	8007252 <_malloc_r+0x82>
 8007214:	428c      	cmp	r4, r1
 8007216:	d102      	bne.n	800721e <_malloc_r+0x4e>
 8007218:	6863      	ldr	r3, [r4, #4]
 800721a:	6013      	str	r3, [r2, #0]
 800721c:	e01a      	b.n	8007254 <_malloc_r+0x84>
 800721e:	684b      	ldr	r3, [r1, #4]
 8007220:	6063      	str	r3, [r4, #4]
 8007222:	000c      	movs	r4, r1
 8007224:	e016      	b.n	8007254 <_malloc_r+0x84>
 8007226:	000c      	movs	r4, r1
 8007228:	6849      	ldr	r1, [r1, #4]
 800722a:	e7e9      	b.n	8007200 <_malloc_r+0x30>
 800722c:	4c17      	ldr	r4, [pc, #92]	; (800728c <_malloc_r+0xbc>)
 800722e:	6823      	ldr	r3, [r4, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d103      	bne.n	800723c <_malloc_r+0x6c>
 8007234:	0030      	movs	r0, r6
 8007236:	f000 f851 	bl	80072dc <_sbrk_r>
 800723a:	6020      	str	r0, [r4, #0]
 800723c:	0029      	movs	r1, r5
 800723e:	0030      	movs	r0, r6
 8007240:	f000 f84c 	bl	80072dc <_sbrk_r>
 8007244:	1c43      	adds	r3, r0, #1
 8007246:	d018      	beq.n	800727a <_malloc_r+0xaa>
 8007248:	2303      	movs	r3, #3
 800724a:	1cc4      	adds	r4, r0, #3
 800724c:	439c      	bics	r4, r3
 800724e:	42a0      	cmp	r0, r4
 8007250:	d10d      	bne.n	800726e <_malloc_r+0x9e>
 8007252:	6025      	str	r5, [r4, #0]
 8007254:	0030      	movs	r0, r6
 8007256:	f000 f854 	bl	8007302 <__malloc_unlock>
 800725a:	0020      	movs	r0, r4
 800725c:	2207      	movs	r2, #7
 800725e:	300b      	adds	r0, #11
 8007260:	1d23      	adds	r3, r4, #4
 8007262:	4390      	bics	r0, r2
 8007264:	1ac3      	subs	r3, r0, r3
 8007266:	d00e      	beq.n	8007286 <_malloc_r+0xb6>
 8007268:	425a      	negs	r2, r3
 800726a:	50e2      	str	r2, [r4, r3]
 800726c:	e00b      	b.n	8007286 <_malloc_r+0xb6>
 800726e:	1a21      	subs	r1, r4, r0
 8007270:	0030      	movs	r0, r6
 8007272:	f000 f833 	bl	80072dc <_sbrk_r>
 8007276:	1c43      	adds	r3, r0, #1
 8007278:	d1eb      	bne.n	8007252 <_malloc_r+0x82>
 800727a:	230c      	movs	r3, #12
 800727c:	0030      	movs	r0, r6
 800727e:	6033      	str	r3, [r6, #0]
 8007280:	f000 f83f 	bl	8007302 <__malloc_unlock>
 8007284:	2000      	movs	r0, #0
 8007286:	bd70      	pop	{r4, r5, r6, pc}
 8007288:	2000017c 	.word	0x2000017c
 800728c:	20000178 	.word	0x20000178

08007290 <_realloc_r>:
 8007290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007292:	0006      	movs	r6, r0
 8007294:	000c      	movs	r4, r1
 8007296:	0015      	movs	r5, r2
 8007298:	2900      	cmp	r1, #0
 800729a:	d104      	bne.n	80072a6 <_realloc_r+0x16>
 800729c:	0011      	movs	r1, r2
 800729e:	f7ff ff97 	bl	80071d0 <_malloc_r>
 80072a2:	0004      	movs	r4, r0
 80072a4:	e018      	b.n	80072d8 <_realloc_r+0x48>
 80072a6:	2a00      	cmp	r2, #0
 80072a8:	d103      	bne.n	80072b2 <_realloc_r+0x22>
 80072aa:	f7ff ff45 	bl	8007138 <_free_r>
 80072ae:	002c      	movs	r4, r5
 80072b0:	e012      	b.n	80072d8 <_realloc_r+0x48>
 80072b2:	f000 f827 	bl	8007304 <_malloc_usable_size_r>
 80072b6:	4285      	cmp	r5, r0
 80072b8:	d90e      	bls.n	80072d8 <_realloc_r+0x48>
 80072ba:	0029      	movs	r1, r5
 80072bc:	0030      	movs	r0, r6
 80072be:	f7ff ff87 	bl	80071d0 <_malloc_r>
 80072c2:	1e07      	subs	r7, r0, #0
 80072c4:	d007      	beq.n	80072d6 <_realloc_r+0x46>
 80072c6:	0021      	movs	r1, r4
 80072c8:	002a      	movs	r2, r5
 80072ca:	f7ff fbf9 	bl	8006ac0 <memcpy>
 80072ce:	0021      	movs	r1, r4
 80072d0:	0030      	movs	r0, r6
 80072d2:	f7ff ff31 	bl	8007138 <_free_r>
 80072d6:	003c      	movs	r4, r7
 80072d8:	0020      	movs	r0, r4
 80072da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080072dc <_sbrk_r>:
 80072dc:	2300      	movs	r3, #0
 80072de:	b570      	push	{r4, r5, r6, lr}
 80072e0:	4c06      	ldr	r4, [pc, #24]	; (80072fc <_sbrk_r+0x20>)
 80072e2:	0005      	movs	r5, r0
 80072e4:	0008      	movs	r0, r1
 80072e6:	6023      	str	r3, [r4, #0]
 80072e8:	f000 f818 	bl	800731c <_sbrk>
 80072ec:	1c43      	adds	r3, r0, #1
 80072ee:	d103      	bne.n	80072f8 <_sbrk_r+0x1c>
 80072f0:	6823      	ldr	r3, [r4, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d000      	beq.n	80072f8 <_sbrk_r+0x1c>
 80072f6:	602b      	str	r3, [r5, #0]
 80072f8:	bd70      	pop	{r4, r5, r6, pc}
 80072fa:	46c0      	nop			; (mov r8, r8)
 80072fc:	20000ee0 	.word	0x20000ee0

08007300 <__malloc_lock>:
 8007300:	4770      	bx	lr

08007302 <__malloc_unlock>:
 8007302:	4770      	bx	lr

08007304 <_malloc_usable_size_r>:
 8007304:	1f0b      	subs	r3, r1, #4
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	1f10      	subs	r0, r2, #4
 800730a:	2a00      	cmp	r2, #0
 800730c:	da04      	bge.n	8007318 <_malloc_usable_size_r+0x14>
 800730e:	1889      	adds	r1, r1, r2
 8007310:	3904      	subs	r1, #4
 8007312:	680b      	ldr	r3, [r1, #0]
 8007314:	18d0      	adds	r0, r2, r3
 8007316:	3804      	subs	r0, #4
 8007318:	4770      	bx	lr
	...

0800731c <_sbrk>:
 800731c:	4b05      	ldr	r3, [pc, #20]	; (8007334 <_sbrk+0x18>)
 800731e:	0002      	movs	r2, r0
 8007320:	6819      	ldr	r1, [r3, #0]
 8007322:	2900      	cmp	r1, #0
 8007324:	d101      	bne.n	800732a <_sbrk+0xe>
 8007326:	4904      	ldr	r1, [pc, #16]	; (8007338 <_sbrk+0x1c>)
 8007328:	6019      	str	r1, [r3, #0]
 800732a:	6818      	ldr	r0, [r3, #0]
 800732c:	1882      	adds	r2, r0, r2
 800732e:	601a      	str	r2, [r3, #0]
 8007330:	4770      	bx	lr
 8007332:	46c0      	nop			; (mov r8, r8)
 8007334:	20000180 	.word	0x20000180
 8007338:	20000ee4 	.word	0x20000ee4

0800733c <_init>:
 800733c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800733e:	46c0      	nop			; (mov r8, r8)
 8007340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007342:	bc08      	pop	{r3}
 8007344:	469e      	mov	lr, r3
 8007346:	4770      	bx	lr

08007348 <_fini>:
 8007348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800734a:	46c0      	nop			; (mov r8, r8)
 800734c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800734e:	bc08      	pop	{r3}
 8007350:	469e      	mov	lr, r3
 8007352:	4770      	bx	lr
