
POV_Level.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001708  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080017c8  080017c8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080017c8  080017c8  000117c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080017cc  080017cc  000117cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  080017d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000b4  20000014  080017e4  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  200000c8  080017e4  000200c8  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000447a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000ef2  00000000  00000000  000244b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000670  00000000  00000000  000253a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005c8  00000000  00000000  00025a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000020d6  00000000  00000000  00025fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001cd7  00000000  00000000  000280b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  00029d8d  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001614  00000000  00000000  00029e0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0002b420  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080017b0 	.word	0x080017b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	080017b0 	.word	0x080017b0

08000108 <__aeabi_uidiv>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__aeabi_uidiv+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__aeabi_uidiv+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__aeabi_uidiv+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__aeabi_uidiv+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__aeabi_uidiv+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__aeabi_uidiv+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__aeabi_uidiv+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__aeabi_uidiv+0x6c>
 8000140:	e000      	b.n	8000144 <__aeabi_uidiv+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__aeabi_uidiv+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__aeabi_uidiv+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__aeabi_uidiv+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__aeabi_uidiv+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__aeabi_uidiv+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__aeabi_uidiv+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__aeabi_uidiv+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__aeabi_uidiv+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__aeabi_uidiv+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__aeabi_uidiv+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__aeabi_uidiv+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__aeabi_uidiv+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__aeabi_uidiv+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__aeabi_uidiv+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__aeabi_uidiv+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__aeabi_uidiv+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__aeabi_uidiv+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__aeabi_uidiv+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__aeabi_uidiv+0x100>
 8000218:	e776      	b.n	8000108 <__aeabi_uidiv>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000224:	4b1b      	ldr	r3, [pc, #108]	; (8000294 <SystemInit+0x74>)
 8000226:	4a1b      	ldr	r2, [pc, #108]	; (8000294 <SystemInit+0x74>)
 8000228:	6812      	ldr	r2, [r2, #0]
 800022a:	2101      	movs	r1, #1
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]

#if defined (STM32F031) || defined (STM32F072) || defined (STM32F042) 
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
 8000230:	4b18      	ldr	r3, [pc, #96]	; (8000294 <SystemInit+0x74>)
 8000232:	4a18      	ldr	r2, [pc, #96]	; (8000294 <SystemInit+0x74>)
 8000234:	6852      	ldr	r2, [r2, #4]
 8000236:	4918      	ldr	r1, [pc, #96]	; (8000298 <SystemInit+0x78>)
 8000238:	400a      	ands	r2, r1
 800023a:	605a      	str	r2, [r3, #4]
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
#endif /* STM32F031*/
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800023c:	4b15      	ldr	r3, [pc, #84]	; (8000294 <SystemInit+0x74>)
 800023e:	4a15      	ldr	r2, [pc, #84]	; (8000294 <SystemInit+0x74>)
 8000240:	6812      	ldr	r2, [r2, #0]
 8000242:	4916      	ldr	r1, [pc, #88]	; (800029c <SystemInit+0x7c>)
 8000244:	400a      	ands	r2, r1
 8000246:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000248:	4b12      	ldr	r3, [pc, #72]	; (8000294 <SystemInit+0x74>)
 800024a:	4a12      	ldr	r2, [pc, #72]	; (8000294 <SystemInit+0x74>)
 800024c:	6812      	ldr	r2, [r2, #0]
 800024e:	4914      	ldr	r1, [pc, #80]	; (80002a0 <SystemInit+0x80>)
 8000250:	400a      	ands	r2, r1
 8000252:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 8000254:	4b0f      	ldr	r3, [pc, #60]	; (8000294 <SystemInit+0x74>)
 8000256:	4a0f      	ldr	r2, [pc, #60]	; (8000294 <SystemInit+0x74>)
 8000258:	6852      	ldr	r2, [r2, #4]
 800025a:	4912      	ldr	r1, [pc, #72]	; (80002a4 <SystemInit+0x84>)
 800025c:	400a      	ands	r2, r1
 800025e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000260:	4b0c      	ldr	r3, [pc, #48]	; (8000294 <SystemInit+0x74>)
 8000262:	4a0c      	ldr	r2, [pc, #48]	; (8000294 <SystemInit+0x74>)
 8000264:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000266:	210f      	movs	r1, #15
 8000268:	438a      	bics	r2, r1
 800026a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 800026c:	4b09      	ldr	r3, [pc, #36]	; (8000294 <SystemInit+0x74>)
 800026e:	4a09      	ldr	r2, [pc, #36]	; (8000294 <SystemInit+0x74>)
 8000270:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000272:	490d      	ldr	r1, [pc, #52]	; (80002a8 <SystemInit+0x88>)
 8000274:	400a      	ands	r2, r1
 8000276:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8000278:	4b06      	ldr	r3, [pc, #24]	; (8000294 <SystemInit+0x74>)
 800027a:	4a06      	ldr	r2, [pc, #24]	; (8000294 <SystemInit+0x74>)
 800027c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800027e:	2101      	movs	r1, #1
 8000280:	438a      	bics	r2, r1
 8000282:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <SystemInit+0x74>)
 8000286:	2200      	movs	r2, #0
 8000288:	609a      	str	r2, [r3, #8]

  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 800028a:	f000 f879 	bl	8000380 <SetSysClock>
}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	40021000 	.word	0x40021000
 8000298:	f8ffb80c 	.word	0xf8ffb80c
 800029c:	fef6ffff 	.word	0xfef6ffff
 80002a0:	fffbffff 	.word	0xfffbffff
 80002a4:	ffc0ffff 	.word	0xffc0ffff
 80002a8:	fffffeac 	.word	0xfffffeac

080002ac <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0;
 80002b2:	2300      	movs	r3, #0
 80002b4:	60fb      	str	r3, [r7, #12]
 80002b6:	2300      	movs	r3, #0
 80002b8:	60bb      	str	r3, [r7, #8]
 80002ba:	2300      	movs	r3, #0
 80002bc:	607b      	str	r3, [r7, #4]
 80002be:	2300      	movs	r3, #0
 80002c0:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80002c2:	4b2a      	ldr	r3, [pc, #168]	; (800036c <SystemCoreClockUpdate+0xc0>)
 80002c4:	685b      	ldr	r3, [r3, #4]
 80002c6:	220c      	movs	r2, #12
 80002c8:	4013      	ands	r3, r2
 80002ca:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	2b04      	cmp	r3, #4
 80002d0:	d007      	beq.n	80002e2 <SystemCoreClockUpdate+0x36>
 80002d2:	2b08      	cmp	r3, #8
 80002d4:	d009      	beq.n	80002ea <SystemCoreClockUpdate+0x3e>
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d131      	bne.n	800033e <SystemCoreClockUpdate+0x92>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80002da:	4b25      	ldr	r3, [pc, #148]	; (8000370 <SystemCoreClockUpdate+0xc4>)
 80002dc:	4a25      	ldr	r2, [pc, #148]	; (8000374 <SystemCoreClockUpdate+0xc8>)
 80002de:	601a      	str	r2, [r3, #0]
      break;
 80002e0:	e031      	b.n	8000346 <SystemCoreClockUpdate+0x9a>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80002e2:	4b23      	ldr	r3, [pc, #140]	; (8000370 <SystemCoreClockUpdate+0xc4>)
 80002e4:	4a23      	ldr	r2, [pc, #140]	; (8000374 <SystemCoreClockUpdate+0xc8>)
 80002e6:	601a      	str	r2, [r3, #0]
      break;
 80002e8:	e02d      	b.n	8000346 <SystemCoreClockUpdate+0x9a>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80002ea:	4b20      	ldr	r3, [pc, #128]	; (800036c <SystemCoreClockUpdate+0xc0>)
 80002ec:	685a      	ldr	r2, [r3, #4]
 80002ee:	23f0      	movs	r3, #240	; 0xf0
 80002f0:	039b      	lsls	r3, r3, #14
 80002f2:	4013      	ands	r3, r2
 80002f4:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80002f6:	4b1d      	ldr	r3, [pc, #116]	; (800036c <SystemCoreClockUpdate+0xc0>)
 80002f8:	685a      	ldr	r2, [r3, #4]
 80002fa:	23c0      	movs	r3, #192	; 0xc0
 80002fc:	025b      	lsls	r3, r3, #9
 80002fe:	4013      	ands	r3, r2
 8000300:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 8000302:	68bb      	ldr	r3, [r7, #8]
 8000304:	0c9b      	lsrs	r3, r3, #18
 8000306:	3302      	adds	r3, #2
 8000308:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d105      	bne.n	800031c <SystemCoreClockUpdate+0x70>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8000310:	68bb      	ldr	r3, [r7, #8]
 8000312:	4a19      	ldr	r2, [pc, #100]	; (8000378 <SystemCoreClockUpdate+0xcc>)
 8000314:	435a      	muls	r2, r3
 8000316:	4b16      	ldr	r3, [pc, #88]	; (8000370 <SystemCoreClockUpdate+0xc4>)
 8000318:	601a      	str	r2, [r3, #0]
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
      }      
      break;
 800031a:	e014      	b.n	8000346 <SystemCoreClockUpdate+0x9a>
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 800031c:	4b13      	ldr	r3, [pc, #76]	; (800036c <SystemCoreClockUpdate+0xc0>)
 800031e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000320:	220f      	movs	r2, #15
 8000322:	4013      	ands	r3, r2
 8000324:	3301      	adds	r3, #1
 8000326:	603b      	str	r3, [r7, #0]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 8000328:	6839      	ldr	r1, [r7, #0]
 800032a:	4812      	ldr	r0, [pc, #72]	; (8000374 <SystemCoreClockUpdate+0xc8>)
 800032c:	f7ff feec 	bl	8000108 <__aeabi_uidiv>
 8000330:	0003      	movs	r3, r0
 8000332:	001a      	movs	r2, r3
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	435a      	muls	r2, r3
 8000338:	4b0d      	ldr	r3, [pc, #52]	; (8000370 <SystemCoreClockUpdate+0xc4>)
 800033a:	601a      	str	r2, [r3, #0]
      }      
      break;
 800033c:	e003      	b.n	8000346 <SystemCoreClockUpdate+0x9a>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 800033e:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <SystemCoreClockUpdate+0xc4>)
 8000340:	4a0c      	ldr	r2, [pc, #48]	; (8000374 <SystemCoreClockUpdate+0xc8>)
 8000342:	601a      	str	r2, [r3, #0]
      break;
 8000344:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000346:	4b09      	ldr	r3, [pc, #36]	; (800036c <SystemCoreClockUpdate+0xc0>)
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	22f0      	movs	r2, #240	; 0xf0
 800034c:	4013      	ands	r3, r2
 800034e:	091b      	lsrs	r3, r3, #4
 8000350:	4a0a      	ldr	r2, [pc, #40]	; (800037c <SystemCoreClockUpdate+0xd0>)
 8000352:	5cd3      	ldrb	r3, [r2, r3]
 8000354:	b2db      	uxtb	r3, r3
 8000356:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8000358:	4b05      	ldr	r3, [pc, #20]	; (8000370 <SystemCoreClockUpdate+0xc4>)
 800035a:	681a      	ldr	r2, [r3, #0]
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	40da      	lsrs	r2, r3
 8000360:	4b03      	ldr	r3, [pc, #12]	; (8000370 <SystemCoreClockUpdate+0xc4>)
 8000362:	601a      	str	r2, [r3, #0]
}
 8000364:	46c0      	nop			; (mov r8, r8)
 8000366:	46bd      	mov	sp, r7
 8000368:	b004      	add	sp, #16
 800036a:	bd80      	pop	{r7, pc}
 800036c:	40021000 	.word	0x40021000
 8000370:	20000000 	.word	0x20000000
 8000374:	007a1200 	.word	0x007a1200
 8000378:	003d0900 	.word	0x003d0900
 800037c:	20000004 	.word	0x20000004

08000380 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSIStatus = 0;
 8000386:	2300      	movs	r3, #0
 8000388:	607b      	str	r3, [r7, #4]
 800038a:	2300      	movs	r3, #0
 800038c:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
  /* Enable HSI */
  RCC->CR |= ((uint32_t)RCC_CR_HSION);
 800038e:	4b26      	ldr	r3, [pc, #152]	; (8000428 <SetSysClock+0xa8>)
 8000390:	4a25      	ldr	r2, [pc, #148]	; (8000428 <SetSysClock+0xa8>)
 8000392:	6812      	ldr	r2, [r2, #0]
 8000394:	2101      	movs	r1, #1
 8000396:	430a      	orrs	r2, r1
 8000398:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSI is ready and if Time out is reached exit */
  do
  {
    HSIStatus = RCC->CR & RCC_CR_HSIRDY;
 800039a:	4b23      	ldr	r3, [pc, #140]	; (8000428 <SetSysClock+0xa8>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	2202      	movs	r2, #2
 80003a0:	4013      	ands	r3, r2
 80003a2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	3301      	adds	r3, #1
 80003a8:	607b      	str	r3, [r7, #4]
  } while((HSIStatus == 0) && (StartUpCounter != HSI_STARTUP_TIMEOUT));
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d104      	bne.n	80003ba <SetSysClock+0x3a>
 80003b0:	687a      	ldr	r2, [r7, #4]
 80003b2:	23a0      	movs	r3, #160	; 0xa0
 80003b4:	01db      	lsls	r3, r3, #7
 80003b6:	429a      	cmp	r2, r3
 80003b8:	d1ef      	bne.n	800039a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSIRDY) != RESET)
 80003ba:	4b1b      	ldr	r3, [pc, #108]	; (8000428 <SetSysClock+0xa8>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	2202      	movs	r2, #2
 80003c0:	4013      	ands	r3, r2
 80003c2:	d002      	beq.n	80003ca <SetSysClock+0x4a>
  {
    HSIStatus = (uint32_t)0x01;
 80003c4:	2301      	movs	r3, #1
 80003c6:	603b      	str	r3, [r7, #0]
 80003c8:	e001      	b.n	80003ce <SetSysClock+0x4e>
  }
  else
  {
    HSIStatus = (uint32_t)0x00;
 80003ca:	2300      	movs	r3, #0
 80003cc:	603b      	str	r3, [r7, #0]
  }  

  if (HSIStatus == (uint32_t)0x01)
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	2b01      	cmp	r3, #1
 80003d2:	d125      	bne.n	8000420 <SetSysClock+0xa0>
  {
    /* Enable Prefetch Buffer and set Flash Latency */
    FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 80003d4:	4b15      	ldr	r3, [pc, #84]	; (800042c <SetSysClock+0xac>)
 80003d6:	2211      	movs	r2, #17
 80003d8:	601a      	str	r2, [r3, #0]
 
    /* PLL configuration = HSI * 6 = 48 MHz */
    RCC->CFGR == (uint32_t)(RCC_CFGR_PLLSRC_HSI_PREDIV | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL6);
 80003da:	4b13      	ldr	r3, [pc, #76]	; (8000428 <SetSysClock+0xa8>)
 80003dc:	685b      	ldr	r3, [r3, #4]
            
    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80003de:	4b12      	ldr	r3, [pc, #72]	; (8000428 <SetSysClock+0xa8>)
 80003e0:	4a11      	ldr	r2, [pc, #68]	; (8000428 <SetSysClock+0xa8>)
 80003e2:	6812      	ldr	r2, [r2, #0]
 80003e4:	2180      	movs	r1, #128	; 0x80
 80003e6:	0449      	lsls	r1, r1, #17
 80003e8:	430a      	orrs	r2, r1
 80003ea:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80003ec:	46c0      	nop			; (mov r8, r8)
 80003ee:	4b0e      	ldr	r3, [pc, #56]	; (8000428 <SetSysClock+0xa8>)
 80003f0:	681a      	ldr	r2, [r3, #0]
 80003f2:	2380      	movs	r3, #128	; 0x80
 80003f4:	049b      	lsls	r3, r3, #18
 80003f6:	4013      	ands	r3, r2
 80003f8:	d0f9      	beq.n	80003ee <SetSysClock+0x6e>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80003fa:	4b0b      	ldr	r3, [pc, #44]	; (8000428 <SetSysClock+0xa8>)
 80003fc:	4a0a      	ldr	r2, [pc, #40]	; (8000428 <SetSysClock+0xa8>)
 80003fe:	6852      	ldr	r2, [r2, #4]
 8000400:	2103      	movs	r1, #3
 8000402:	438a      	bics	r2, r1
 8000404:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000406:	4b08      	ldr	r3, [pc, #32]	; (8000428 <SetSysClock+0xa8>)
 8000408:	4a07      	ldr	r2, [pc, #28]	; (8000428 <SetSysClock+0xa8>)
 800040a:	6852      	ldr	r2, [r2, #4]
 800040c:	2102      	movs	r1, #2
 800040e:	430a      	orrs	r2, r1
 8000410:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	4b04      	ldr	r3, [pc, #16]	; (8000428 <SetSysClock+0xa8>)
 8000416:	685b      	ldr	r3, [r3, #4]
 8000418:	220c      	movs	r2, #12
 800041a:	4013      	ands	r3, r2
 800041c:	2b08      	cmp	r3, #8
 800041e:	d1f9      	bne.n	8000414 <SetSysClock+0x94>
  }
  else
  { /* If HSI fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }  
}
 8000420:	46c0      	nop			; (mov r8, r8)
 8000422:	46bd      	mov	sp, r7
 8000424:	b002      	add	sp, #8
 8000426:	bd80      	pop	{r7, pc}
 8000428:	40021000 	.word	0x40021000
 800042c:	40022000 	.word	0x40022000

08000430 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
}
 8000434:	46c0      	nop			; (mov r8, r8)
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000440:	e7fe      	b.n	8000440 <HardFault_Handler+0x4>
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
}
 8000448:	46c0      	nop			; (mov r8, r8)
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
}
 8000454:	46c0      	nop			; (mov r8, r8)
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800045c:	480d      	ldr	r0, [pc, #52]	; (8000494 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800045e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000460:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000462:	e003      	b.n	800046c <LoopCopyDataInit>

08000464 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000464:	4b0c      	ldr	r3, [pc, #48]	; (8000498 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000466:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000468:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800046a:	3104      	adds	r1, #4

0800046c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800046c:	480b      	ldr	r0, [pc, #44]	; (800049c <LoopForever+0xa>)
  ldr r3, =_edata
 800046e:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <LoopForever+0xe>)
  adds r2, r0, r1
 8000470:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000472:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000474:	d3f6      	bcc.n	8000464 <CopyDataInit>
  ldr r2, =_sbss
 8000476:	4a0b      	ldr	r2, [pc, #44]	; (80004a4 <LoopForever+0x12>)
  b LoopFillZerobss
 8000478:	e002      	b.n	8000480 <LoopFillZerobss>

0800047a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800047a:	2300      	movs	r3, #0
  str  r3, [r2]
 800047c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800047e:	3204      	adds	r2, #4

08000480 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000480:	4b09      	ldr	r3, [pc, #36]	; (80004a8 <LoopForever+0x16>)
  cmp r2, r3
 8000482:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000484:	d3f9      	bcc.n	800047a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000486:	f7ff fecb 	bl	8000220 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800048a:	f001 f96b 	bl	8001764 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800048e:	f000 f8d7 	bl	8000640 <main>

08000492 <LoopForever>:
  
LoopForever:
    b LoopForever
 8000492:	e7fe      	b.n	8000492 <LoopForever>

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000494:	20001800 	.word	0x20001800
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8000498:	080017d0 	.word	0x080017d0
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 800049c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80004a0:	20000014 	.word	0x20000014
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 80004a4:	20000014 	.word	0x20000014
  str  r3, [r2]
  adds r2, r2, #4


LoopFillZerobss:
  ldr r3, = _ebss
 80004a8:	200000c8 	.word	0x200000c8

080004ac <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004ac:	e7fe      	b.n	80004ac <ADC1_COMP_IRQHandler>
	...

080004b0 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004b0:	b5b0      	push	{r4, r5, r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	0002      	movs	r2, r0
 80004b8:	6039      	str	r1, [r7, #0]
 80004ba:	1dfb      	adds	r3, r7, #7
 80004bc:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
 80004be:	1dfb      	adds	r3, r7, #7
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	2b7f      	cmp	r3, #127	; 0x7f
 80004c4:	d932      	bls.n	800052c <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 80004c6:	4c2f      	ldr	r4, [pc, #188]	; (8000584 <NVIC_SetPriority+0xd4>)
 80004c8:	1dfb      	adds	r3, r7, #7
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	001a      	movs	r2, r3
 80004ce:	230f      	movs	r3, #15
 80004d0:	4013      	ands	r3, r2
 80004d2:	3b08      	subs	r3, #8
 80004d4:	0899      	lsrs	r1, r3, #2
 80004d6:	4a2b      	ldr	r2, [pc, #172]	; (8000584 <NVIC_SetPriority+0xd4>)
 80004d8:	1dfb      	adds	r3, r7, #7
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	0018      	movs	r0, r3
 80004de:	230f      	movs	r3, #15
 80004e0:	4003      	ands	r3, r0
 80004e2:	3b08      	subs	r3, #8
 80004e4:	089b      	lsrs	r3, r3, #2
 80004e6:	3306      	adds	r3, #6
 80004e8:	009b      	lsls	r3, r3, #2
 80004ea:	18d3      	adds	r3, r2, r3
 80004ec:	3304      	adds	r3, #4
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	1dfa      	adds	r2, r7, #7
 80004f2:	7812      	ldrb	r2, [r2, #0]
 80004f4:	0010      	movs	r0, r2
 80004f6:	2203      	movs	r2, #3
 80004f8:	4002      	ands	r2, r0
 80004fa:	00d2      	lsls	r2, r2, #3
 80004fc:	20ff      	movs	r0, #255	; 0xff
 80004fe:	4090      	lsls	r0, r2
 8000500:	0002      	movs	r2, r0
 8000502:	43d2      	mvns	r2, r2
 8000504:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	019b      	lsls	r3, r3, #6
 800050a:	20ff      	movs	r0, #255	; 0xff
 800050c:	4018      	ands	r0, r3
 800050e:	1dfb      	adds	r3, r7, #7
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	001d      	movs	r5, r3
 8000514:	2303      	movs	r3, #3
 8000516:	402b      	ands	r3, r5
 8000518:	00db      	lsls	r3, r3, #3
 800051a:	4098      	lsls	r0, r3
 800051c:	0003      	movs	r3, r0
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 800051e:	431a      	orrs	r2, r3
 8000520:	1d8b      	adds	r3, r1, #6
 8000522:	009b      	lsls	r3, r3, #2
 8000524:	18e3      	adds	r3, r4, r3
 8000526:	3304      	adds	r3, #4
 8000528:	601a      	str	r2, [r3, #0]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
 800052a:	e027      	b.n	800057c <NVIC_SetPriority+0xcc>
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 800052c:	4c16      	ldr	r4, [pc, #88]	; (8000588 <NVIC_SetPriority+0xd8>)
 800052e:	1dfb      	adds	r3, r7, #7
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	b25b      	sxtb	r3, r3
 8000534:	089b      	lsrs	r3, r3, #2
 8000536:	4914      	ldr	r1, [pc, #80]	; (8000588 <NVIC_SetPriority+0xd8>)
 8000538:	1dfa      	adds	r2, r7, #7
 800053a:	7812      	ldrb	r2, [r2, #0]
 800053c:	b252      	sxtb	r2, r2
 800053e:	0892      	lsrs	r2, r2, #2
 8000540:	32c0      	adds	r2, #192	; 0xc0
 8000542:	0092      	lsls	r2, r2, #2
 8000544:	5852      	ldr	r2, [r2, r1]
 8000546:	1df9      	adds	r1, r7, #7
 8000548:	7809      	ldrb	r1, [r1, #0]
 800054a:	0008      	movs	r0, r1
 800054c:	2103      	movs	r1, #3
 800054e:	4001      	ands	r1, r0
 8000550:	00c9      	lsls	r1, r1, #3
 8000552:	20ff      	movs	r0, #255	; 0xff
 8000554:	4088      	lsls	r0, r1
 8000556:	0001      	movs	r1, r0
 8000558:	43c9      	mvns	r1, r1
 800055a:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 800055c:	683a      	ldr	r2, [r7, #0]
 800055e:	0192      	lsls	r2, r2, #6
 8000560:	20ff      	movs	r0, #255	; 0xff
 8000562:	4010      	ands	r0, r2
 8000564:	1dfa      	adds	r2, r7, #7
 8000566:	7812      	ldrb	r2, [r2, #0]
 8000568:	0015      	movs	r5, r2
 800056a:	2203      	movs	r2, #3
 800056c:	402a      	ands	r2, r5
 800056e:	00d2      	lsls	r2, r2, #3
 8000570:	4090      	lsls	r0, r2
 8000572:	0002      	movs	r2, r0
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8000574:	430a      	orrs	r2, r1
 8000576:	33c0      	adds	r3, #192	; 0xc0
 8000578:	009b      	lsls	r3, r3, #2
 800057a:	511a      	str	r2, [r3, r4]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
 800057c:	46c0      	nop			; (mov r8, r8)
 800057e:	46bd      	mov	sp, r7
 8000580:	b002      	add	sp, #8
 8000582:	bdb0      	pop	{r4, r5, r7, pc}
 8000584:	e000ed00 	.word	0xe000ed00
 8000588:	e000e100 	.word	0xe000e100

0800058c <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	3b01      	subs	r3, #1
 8000598:	4a0c      	ldr	r2, [pc, #48]	; (80005cc <SysTick_Config+0x40>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d901      	bls.n	80005a2 <SysTick_Config+0x16>
 800059e:	2301      	movs	r3, #1
 80005a0:	e010      	b.n	80005c4 <SysTick_Config+0x38>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 80005a2:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <SysTick_Config+0x44>)
 80005a4:	687a      	ldr	r2, [r7, #4]
 80005a6:	3a01      	subs	r2, #1
 80005a8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 80005aa:	2301      	movs	r3, #1
 80005ac:	425b      	negs	r3, r3
 80005ae:	2103      	movs	r1, #3
 80005b0:	0018      	movs	r0, r3
 80005b2:	f7ff ff7d 	bl	80004b0 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80005b6:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <SysTick_Config+0x44>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005bc:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <SysTick_Config+0x44>)
 80005be:	2207      	movs	r2, #7
 80005c0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80005c2:	2300      	movs	r3, #0
}
 80005c4:	0018      	movs	r0, r3
 80005c6:	46bd      	mov	sp, r7
 80005c8:	b002      	add	sp, #8
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	00ffffff 	.word	0x00ffffff
 80005d0:	e000e010 	.word	0xe000e010

080005d4 <SysTick_Handler>:
**  Abstract: SysTick interrupt handler
**
**===========================================================================
*/
void SysTick_Handler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	if(delayTimer)
 80005d8:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <SysTick_Handler+0x3c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d004      	beq.n	80005ea <SysTick_Handler+0x16>
	{
		delayTimer--;
 80005e0:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <SysTick_Handler+0x3c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	1e5a      	subs	r2, r3, #1
 80005e6:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <SysTick_Handler+0x3c>)
 80005e8:	601a      	str	r2, [r3, #0]
	}
	timer++;
 80005ea:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <SysTick_Handler+0x40>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	1c5a      	adds	r2, r3, #1
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <SysTick_Handler+0x40>)
 80005f2:	601a      	str	r2, [r3, #0]

	if  (timer>100)
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <SysTick_Handler+0x40>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2b64      	cmp	r3, #100	; 0x64
 80005fa:	d905      	bls.n	8000608 <SysTick_Handler+0x34>
	{
		timerFlag = 1;
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <SysTick_Handler+0x44>)
 80005fe:	2201      	movs	r2, #1
 8000600:	701a      	strb	r2, [r3, #0]
		timer = 0;
 8000602:	4b04      	ldr	r3, [pc, #16]	; (8000614 <SysTick_Handler+0x40>)
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
	}
}
 8000608:	46c0      	nop			; (mov r8, r8)
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	20000038 	.word	0x20000038
 8000614:	20000030 	.word	0x20000030
 8000618:	20000034 	.word	0x20000034

0800061c <delay>:


void delay(uint32_t ticks)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	delayTimer = ticks;
 8000624:	4b05      	ldr	r3, [pc, #20]	; (800063c <delay+0x20>)
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	601a      	str	r2, [r3, #0]
	while(delayTimer > 0);
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	4b03      	ldr	r3, [pc, #12]	; (800063c <delay+0x20>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d1fb      	bne.n	800062c <delay+0x10>
}
 8000634:	46c0      	nop			; (mov r8, r8)
 8000636:	46bd      	mov	sp, r7
 8000638:	b002      	add	sp, #8
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000038 	.word	0x20000038

08000640 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
	uint8_t led_pos;
	int16_t levelResult;
	SystemInit();
 8000646:	f7ff fdeb 	bl	8000220 <SystemInit>
	SystemCoreClockUpdate();
 800064a:	f7ff fe2f 	bl	80002ac <SystemCoreClockUpdate>
	//the systick timer runs with 6MHz
	//config the timer for 1ms interval
	SysTick_Config(6000);
 800064e:	4b3c      	ldr	r3, [pc, #240]	; (8000740 <main+0x100>)
 8000650:	0018      	movs	r0, r3
 8000652:	f7ff ff9b 	bl	800058c <SysTick_Config>

	//init the drivers
//	dbgLed_init();
//	dbgLed_on();
	apa102_init();
 8000656:	f000 fb3d 	bl	8000cd4 <apa102_init>
	mma8653_init();
 800065a:	f000 f9f9 	bl	8000a50 <mma8653_init>
	mma8653_setDataWidth(MMA8653_DATAWIDTH_8);
 800065e:	2000      	movs	r0, #0
 8000660:	f000 fac4 	bl	8000bec <mma8653_setDataWidth>
	mma8653_setDataRate(RATE_12Hz5);
 8000664:	2005      	movs	r0, #5
 8000666:	f000 fa9b 	bl	8000ba0 <mma8653_setDataRate>


	//LED-Test
	for(uint8_t i = 0; i<16; i++)
 800066a:	1dbb      	adds	r3, r7, #6
 800066c:	2200      	movs	r2, #0
 800066e:	701a      	strb	r2, [r3, #0]
 8000670:	e00d      	b.n	800068e <main+0x4e>
	{
		apa102_setSingle(i,10);
 8000672:	1dbb      	adds	r3, r7, #6
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	210a      	movs	r1, #10
 8000678:	0018      	movs	r0, r3
 800067a:	f000 fcad 	bl	8000fd8 <apa102_setSingle>
		delay(20);
 800067e:	2014      	movs	r0, #20
 8000680:	f7ff ffcc 	bl	800061c <delay>
	mma8653_setDataWidth(MMA8653_DATAWIDTH_8);
	mma8653_setDataRate(RATE_12Hz5);


	//LED-Test
	for(uint8_t i = 0; i<16; i++)
 8000684:	1dbb      	adds	r3, r7, #6
 8000686:	781a      	ldrb	r2, [r3, #0]
 8000688:	1dbb      	adds	r3, r7, #6
 800068a:	3201      	adds	r2, #1
 800068c:	701a      	strb	r2, [r3, #0]
 800068e:	1dbb      	adds	r3, r7, #6
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b0f      	cmp	r3, #15
 8000694:	d9ed      	bls.n	8000672 <main+0x32>
	{
		apa102_setSingle(i,10);
		delay(20);
	}
	apa102_allOff();
 8000696:	f000 fcb9 	bl	800100c <apa102_allOff>



	while(1)
	{
		if(timerFlag)
 800069a:	4b2a      	ldr	r3, [pc, #168]	; (8000744 <main+0x104>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d0fb      	beq.n	800069a <main+0x5a>
		{
			timerFlag = 0;
 80006a2:	4b28      	ldr	r3, [pc, #160]	; (8000744 <main+0x104>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	701a      	strb	r2, [r3, #0]
			levelResult = mma8653_read8().y;
 80006a8:	f000 fad2 	bl	8000c50 <mma8653_read8>
 80006ac:	0003      	movs	r3, r0
 80006ae:	001a      	movs	r2, r3
 80006b0:	003b      	movs	r3, r7
 80006b2:	1c11      	adds	r1, r2, #0
 80006b4:	7019      	strb	r1, [r3, #0]
 80006b6:	0411      	lsls	r1, r2, #16
 80006b8:	0e09      	lsrs	r1, r1, #24
 80006ba:	7059      	strb	r1, [r3, #1]
 80006bc:	0212      	lsls	r2, r2, #8
 80006be:	0e12      	lsrs	r2, r2, #24
 80006c0:	709a      	strb	r2, [r3, #2]
 80006c2:	003b      	movs	r3, r7
 80006c4:	2201      	movs	r2, #1
 80006c6:	569a      	ldrsb	r2, [r3, r2]
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	801a      	strh	r2, [r3, #0]
			if(levelResult == 0)
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2200      	movs	r2, #0
 80006d0:	5e9b      	ldrsh	r3, [r3, r2]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d106      	bne.n	80006e4 <main+0xa4>
			{
				apa102_setPattern(0b0000000110000000,2);
 80006d6:	23c0      	movs	r3, #192	; 0xc0
 80006d8:	005b      	lsls	r3, r3, #1
 80006da:	2102      	movs	r1, #2
 80006dc:	0018      	movs	r0, r3
 80006de:	f000 fbff 	bl	8000ee0 <apa102_setPattern>
 80006e2:	e7da      	b.n	800069a <main+0x5a>
			}
			else if(levelResult < 0)
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2200      	movs	r2, #0
 80006e8:	5e9b      	ldrsh	r3, [r3, r2]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	da13      	bge.n	8000716 <main+0xd6>
			{
				led_pos = levelResult + 8;
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	881b      	ldrh	r3, [r3, #0]
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	1dfb      	adds	r3, r7, #7
 80006f6:	3208      	adds	r2, #8
 80006f8:	701a      	strb	r2, [r3, #0]
				//lower limit
				if(led_pos > 250)
 80006fa:	1dfb      	adds	r3, r7, #7
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2bfa      	cmp	r3, #250	; 0xfa
 8000700:	d902      	bls.n	8000708 <main+0xc8>
				{
					led_pos = 0;
 8000702:	1dfb      	adds	r3, r7, #7
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]
				}
				apa102_setSingle(led_pos,2);
 8000708:	1dfb      	adds	r3, r7, #7
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2102      	movs	r1, #2
 800070e:	0018      	movs	r0, r3
 8000710:	f000 fc62 	bl	8000fd8 <apa102_setSingle>
 8000714:	e7c1      	b.n	800069a <main+0x5a>
			}
			else	//levelPos > 0
			{
				led_pos = levelResult + 7;
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	881b      	ldrh	r3, [r3, #0]
 800071a:	b2da      	uxtb	r2, r3
 800071c:	1dfb      	adds	r3, r7, #7
 800071e:	3207      	adds	r2, #7
 8000720:	701a      	strb	r2, [r3, #0]
				//upper limit
				if(led_pos > 15)
 8000722:	1dfb      	adds	r3, r7, #7
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2b0f      	cmp	r3, #15
 8000728:	d902      	bls.n	8000730 <main+0xf0>
				{
					led_pos = 15;
 800072a:	1dfb      	adds	r3, r7, #7
 800072c:	220f      	movs	r2, #15
 800072e:	701a      	strb	r2, [r3, #0]
				}
				apa102_setSingle(led_pos,2);
 8000730:	1dfb      	adds	r3, r7, #7
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2102      	movs	r1, #2
 8000736:	0018      	movs	r0, r3
 8000738:	f000 fc4e 	bl	8000fd8 <apa102_setSingle>
			}
		}
	}
 800073c:	e7ad      	b.n	800069a <main+0x5a>
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	00001770 	.word	0x00001770
 8000744:	20000034 	.word	0x20000034

08000748 <I2C_RdReg>:

uint8_t rxBuf[4];


uint8_t I2C_RdReg(uint8_t Reg, uint8_t *Data, uint8_t DCnt)
{
 8000748:	b590      	push	{r4, r7, lr}
 800074a:	b087      	sub	sp, #28
 800074c:	af02      	add	r7, sp, #8
 800074e:	6039      	str	r1, [r7, #0]
 8000750:	0011      	movs	r1, r2
 8000752:	1dfb      	adds	r3, r7, #7
 8000754:	1c02      	adds	r2, r0, #0
 8000756:	701a      	strb	r2, [r3, #0]
 8000758:	1dbb      	adds	r3, r7, #6
 800075a:	1c0a      	adds	r2, r1, #0
 800075c:	701a      	strb	r2, [r3, #0]
	uint8_t Cnt, SingleData = 0;
 800075e:	230e      	movs	r3, #14
 8000760:	18fb      	adds	r3, r7, r3
 8000762:	2200      	movs	r2, #0
 8000764:	701a      	strb	r2, [r3, #0]

	//Wait until I2C isn't busy
	while(I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_BUSY) == SET);
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	2380      	movs	r3, #128	; 0x80
 800076a:	021b      	lsls	r3, r3, #8
 800076c:	4a3d      	ldr	r2, [pc, #244]	; (8000864 <I2C_RdReg+0x11c>)
 800076e:	0019      	movs	r1, r3
 8000770:	0010      	movs	r0, r2
 8000772:	f000 fe6f 	bl	8001454 <I2C_GetFlagStatus>
 8000776:	1e03      	subs	r3, r0, #0
 8000778:	2b01      	cmp	r3, #1
 800077a:	d0f5      	beq.n	8000768 <I2C_RdReg+0x20>

	//first communication (try reading the status register)
	/* Configure slave address, nbytes, reload, end mode and start or stop generation */
	I2C_TransferHandling(I2C_MMA8653,ADDR_MMA8653,1,I2C_SoftEnd_Mode,I2C_Generate_Start_Write);
 800077c:	4839      	ldr	r0, [pc, #228]	; (8000864 <I2C_RdReg+0x11c>)
 800077e:	2380      	movs	r3, #128	; 0x80
 8000780:	019b      	lsls	r3, r3, #6
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	2300      	movs	r3, #0
 8000786:	2201      	movs	r2, #1
 8000788:	213a      	movs	r1, #58	; 0x3a
 800078a:	f000 fe11 	bl	80013b0 <I2C_TransferHandling>
	//Ensure the transmit interrupted flag is set
	while(I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_TXIS) == RESET);
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	4b34      	ldr	r3, [pc, #208]	; (8000864 <I2C_RdReg+0x11c>)
 8000792:	2102      	movs	r1, #2
 8000794:	0018      	movs	r0, r3
 8000796:	f000 fe5d 	bl	8001454 <I2C_GetFlagStatus>
 800079a:	1e03      	subs	r3, r0, #0
 800079c:	d0f8      	beq.n	8000790 <I2C_RdReg+0x48>
	//send reg address
	I2C_SendData(I2C_MMA8653, (uint8_t)Reg);
 800079e:	1dfb      	adds	r3, r7, #7
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	4a30      	ldr	r2, [pc, #192]	; (8000864 <I2C_RdReg+0x11c>)
 80007a4:	0019      	movs	r1, r3
 80007a6:	0010      	movs	r0, r2
 80007a8:	f000 fe38 	bl	800141c <I2C_SendData>
	//Wait until transfer is complete!
	while(I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_TC) == RESET);
 80007ac:	46c0      	nop			; (mov r8, r8)
 80007ae:	4b2d      	ldr	r3, [pc, #180]	; (8000864 <I2C_RdReg+0x11c>)
 80007b0:	2140      	movs	r1, #64	; 0x40
 80007b2:	0018      	movs	r0, r3
 80007b4:	f000 fe4e 	bl	8001454 <I2C_GetFlagStatus>
 80007b8:	1e03      	subs	r3, r0, #0
 80007ba:	d0f8      	beq.n	80007ae <I2C_RdReg+0x66>
	//initiate read
	I2C_TransferHandling(I2C_MMA8653, ADDR_MMA8653, DCnt, I2C_AutoEnd_Mode, I2C_Generate_Start_Read);
 80007bc:	2380      	movs	r3, #128	; 0x80
 80007be:	0499      	lsls	r1, r3, #18
 80007c0:	1dbb      	adds	r3, r7, #6
 80007c2:	781a      	ldrb	r2, [r3, #0]
 80007c4:	4827      	ldr	r0, [pc, #156]	; (8000864 <I2C_RdReg+0x11c>)
 80007c6:	2390      	movs	r3, #144	; 0x90
 80007c8:	019b      	lsls	r3, r3, #6
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	000b      	movs	r3, r1
 80007ce:	213a      	movs	r1, #58	; 0x3a
 80007d0:	f000 fdee 	bl	80013b0 <I2C_TransferHandling>


	//Read in DCnt pieces of data
	for(Cnt = 0; Cnt<DCnt; Cnt++)
 80007d4:	230f      	movs	r3, #15
 80007d6:	18fb      	adds	r3, r7, r3
 80007d8:	2200      	movs	r2, #0
 80007da:	701a      	strb	r2, [r3, #0]
 80007dc:	e026      	b.n	800082c <I2C_RdReg+0xe4>
	{
        //Wait until the RX register is full of luscious data!
        while(I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_RXNE) == RESET);
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	4b20      	ldr	r3, [pc, #128]	; (8000864 <I2C_RdReg+0x11c>)
 80007e2:	2104      	movs	r1, #4
 80007e4:	0018      	movs	r0, r3
 80007e6:	f000 fe35 	bl	8001454 <I2C_GetFlagStatus>
 80007ea:	1e03      	subs	r3, r0, #0
 80007ec:	d0f8      	beq.n	80007e0 <I2C_RdReg+0x98>
        //If we're only reading one byte, place that data direct into the
        //SingleData variable. If we're reading more than 1 piece of data
        //store in the array "Data" (a pointer from main)
        if(DCnt > 1)
 80007ee:	1dbb      	adds	r3, r7, #6
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d90b      	bls.n	800080e <I2C_RdReg+0xc6>
        {
        	Data[Cnt] = I2C_ReceiveData(I2C_MMA8653);
 80007f6:	230f      	movs	r3, #15
 80007f8:	18fb      	adds	r3, r7, r3
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	683a      	ldr	r2, [r7, #0]
 80007fe:	18d4      	adds	r4, r2, r3
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <I2C_RdReg+0x11c>)
 8000802:	0018      	movs	r0, r3
 8000804:	f000 fe1a 	bl	800143c <I2C_ReceiveData>
 8000808:	0003      	movs	r3, r0
 800080a:	7023      	strb	r3, [r4, #0]
 800080c:	e007      	b.n	800081e <I2C_RdReg+0xd6>
        }
        else SingleData = I2C_ReceiveData(I2C_MMA8653);
 800080e:	230e      	movs	r3, #14
 8000810:	18fc      	adds	r4, r7, r3
 8000812:	4b14      	ldr	r3, [pc, #80]	; (8000864 <I2C_RdReg+0x11c>)
 8000814:	0018      	movs	r0, r3
 8000816:	f000 fe11 	bl	800143c <I2C_ReceiveData>
 800081a:	0003      	movs	r3, r0
 800081c:	7023      	strb	r3, [r4, #0]
	//initiate read
	I2C_TransferHandling(I2C_MMA8653, ADDR_MMA8653, DCnt, I2C_AutoEnd_Mode, I2C_Generate_Start_Read);


	//Read in DCnt pieces of data
	for(Cnt = 0; Cnt<DCnt; Cnt++)
 800081e:	230f      	movs	r3, #15
 8000820:	18fb      	adds	r3, r7, r3
 8000822:	781a      	ldrb	r2, [r3, #0]
 8000824:	230f      	movs	r3, #15
 8000826:	18fb      	adds	r3, r7, r3
 8000828:	3201      	adds	r2, #1
 800082a:	701a      	strb	r2, [r3, #0]
 800082c:	230f      	movs	r3, #15
 800082e:	18fa      	adds	r2, r7, r3
 8000830:	1dbb      	adds	r3, r7, #6
 8000832:	7812      	ldrb	r2, [r2, #0]
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	429a      	cmp	r2, r3
 8000838:	d3d1      	bcc.n	80007de <I2C_RdReg+0x96>
        }
        else SingleData = I2C_ReceiveData(I2C_MMA8653);
     }

    //Wait for the stop condition to be sent
    while(I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_STOPF) == RESET);
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <I2C_RdReg+0x11c>)
 800083e:	2120      	movs	r1, #32
 8000840:	0018      	movs	r0, r3
 8000842:	f000 fe07 	bl	8001454 <I2C_GetFlagStatus>
 8000846:	1e03      	subs	r3, r0, #0
 8000848:	d0f8      	beq.n	800083c <I2C_RdReg+0xf4>

    //Clear the stop flag for next transfers
    I2C_ClearFlag(I2C_MMA8653, I2C_FLAG_STOPF);
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <I2C_RdReg+0x11c>)
 800084c:	2120      	movs	r1, #32
 800084e:	0018      	movs	r0, r3
 8000850:	f000 fe26 	bl	80014a0 <I2C_ClearFlag>

    //Return a single piece of data if DCnt was
    //less than 1, otherwise 0 will be returned.
	return SingleData;
 8000854:	230e      	movs	r3, #14
 8000856:	18fb      	adds	r3, r7, r3
 8000858:	781b      	ldrb	r3, [r3, #0]
}
 800085a:	0018      	movs	r0, r3
 800085c:	46bd      	mov	sp, r7
 800085e:	b005      	add	sp, #20
 8000860:	bd90      	pop	{r4, r7, pc}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	40005400 	.word	0x40005400

08000868 <I2C_WrReg>:

void I2C_WrReg(uint8_t Reg, uint8_t Val){
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af02      	add	r7, sp, #8
 800086e:	0002      	movs	r2, r0
 8000870:	1dfb      	adds	r3, r7, #7
 8000872:	701a      	strb	r2, [r3, #0]
 8000874:	1dbb      	adds	r3, r7, #6
 8000876:	1c0a      	adds	r2, r1, #0
 8000878:	701a      	strb	r2, [r3, #0]

	//Wait until I2C isn't busy
	while(I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_BUSY) == SET);
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	2380      	movs	r3, #128	; 0x80
 800087e:	021b      	lsls	r3, r3, #8
 8000880:	4a29      	ldr	r2, [pc, #164]	; (8000928 <I2C_WrReg+0xc0>)
 8000882:	0019      	movs	r1, r3
 8000884:	0010      	movs	r0, r2
 8000886:	f000 fde5 	bl	8001454 <I2C_GetFlagStatus>
 800088a:	1e03      	subs	r3, r0, #0
 800088c:	2b01      	cmp	r3, #1
 800088e:	d0f5      	beq.n	800087c <I2C_WrReg+0x14>
	//I2C interface... Regardless! Send the address of the HMC
	//sensor down the I2C Bus and generate a start saying we're
	//going to write one byte. I'll be completely honest,
	//the I2C peripheral doesn't make too much sense to me
	//and a lot of the code is from the Std peripheral library
	I2C_TransferHandling(I2C_MMA8653, ADDR_MMA8653, 1, I2C_Reload_Mode, I2C_Generate_Start_Write);
 8000890:	2380      	movs	r3, #128	; 0x80
 8000892:	045a      	lsls	r2, r3, #17
 8000894:	4824      	ldr	r0, [pc, #144]	; (8000928 <I2C_WrReg+0xc0>)
 8000896:	2380      	movs	r3, #128	; 0x80
 8000898:	019b      	lsls	r3, r3, #6
 800089a:	9300      	str	r3, [sp, #0]
 800089c:	0013      	movs	r3, r2
 800089e:	2201      	movs	r2, #1
 80008a0:	213a      	movs	r1, #58	; 0x3a
 80008a2:	f000 fd85 	bl	80013b0 <I2C_TransferHandling>

	//Ensure the transmit interrupted flag is set
	while(I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_TXIS) == RESET);
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <I2C_WrReg+0xc0>)
 80008aa:	2102      	movs	r1, #2
 80008ac:	0018      	movs	r0, r3
 80008ae:	f000 fdd1 	bl	8001454 <I2C_GetFlagStatus>
 80008b2:	1e03      	subs	r3, r0, #0
 80008b4:	d0f8      	beq.n	80008a8 <I2C_WrReg+0x40>

	//Send the address of the register we wish to write to
	I2C_SendData(I2C_MMA8653, Reg);
 80008b6:	1dfb      	adds	r3, r7, #7
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	4a1b      	ldr	r2, [pc, #108]	; (8000928 <I2C_WrReg+0xc0>)
 80008bc:	0019      	movs	r1, r3
 80008be:	0010      	movs	r0, r2
 80008c0:	f000 fdac 	bl	800141c <I2C_SendData>

	//Ensure that the transfer complete reload flag is
	//set, essentially a standard TC flag
	while(I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_TCR) == RESET);
 80008c4:	46c0      	nop			; (mov r8, r8)
 80008c6:	4b18      	ldr	r3, [pc, #96]	; (8000928 <I2C_WrReg+0xc0>)
 80008c8:	2180      	movs	r1, #128	; 0x80
 80008ca:	0018      	movs	r0, r3
 80008cc:	f000 fdc2 	bl	8001454 <I2C_GetFlagStatus>
 80008d0:	1e03      	subs	r3, r0, #0
 80008d2:	d0f8      	beq.n	80008c6 <I2C_WrReg+0x5e>

	//Now that the HMC5883L knows which register
	//we want to write to, send the address again
	//and ensure the I2C peripheral doesn't add
	//any start or stop conditions
	I2C_TransferHandling(I2C_MMA8653, ADDR_MMA8653, 1, I2C_AutoEnd_Mode, I2C_No_StartStop);
 80008d4:	2380      	movs	r3, #128	; 0x80
 80008d6:	049a      	lsls	r2, r3, #18
 80008d8:	4813      	ldr	r0, [pc, #76]	; (8000928 <I2C_WrReg+0xc0>)
 80008da:	2300      	movs	r3, #0
 80008dc:	9300      	str	r3, [sp, #0]
 80008de:	0013      	movs	r3, r2
 80008e0:	2201      	movs	r2, #1
 80008e2:	213a      	movs	r1, #58	; 0x3a
 80008e4:	f000 fd64 	bl	80013b0 <I2C_TransferHandling>

	//Again, wait until the transmit interrupted flag is set
	while(I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_TXIS) == RESET);
 80008e8:	46c0      	nop			; (mov r8, r8)
 80008ea:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <I2C_WrReg+0xc0>)
 80008ec:	2102      	movs	r1, #2
 80008ee:	0018      	movs	r0, r3
 80008f0:	f000 fdb0 	bl	8001454 <I2C_GetFlagStatus>
 80008f4:	1e03      	subs	r3, r0, #0
 80008f6:	d0f8      	beq.n	80008ea <I2C_WrReg+0x82>

	//Send the value you wish you write to the register
	I2C_SendData(I2C_MMA8653, Val);
 80008f8:	1dbb      	adds	r3, r7, #6
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	4a0a      	ldr	r2, [pc, #40]	; (8000928 <I2C_WrReg+0xc0>)
 80008fe:	0019      	movs	r1, r3
 8000900:	0010      	movs	r0, r2
 8000902:	f000 fd8b 	bl	800141c <I2C_SendData>

	//Wait for the stop flag to be set indicating
	//a stop condition has been sent
	while(I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_STOPF) == RESET);
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	4b07      	ldr	r3, [pc, #28]	; (8000928 <I2C_WrReg+0xc0>)
 800090a:	2120      	movs	r1, #32
 800090c:	0018      	movs	r0, r3
 800090e:	f000 fda1 	bl	8001454 <I2C_GetFlagStatus>
 8000912:	1e03      	subs	r3, r0, #0
 8000914:	d0f8      	beq.n	8000908 <I2C_WrReg+0xa0>

	//Clear the stop flag for the next potential transfer
	I2C_ClearFlag(I2C_MMA8653, I2C_FLAG_STOPF);
 8000916:	4b04      	ldr	r3, [pc, #16]	; (8000928 <I2C_WrReg+0xc0>)
 8000918:	2120      	movs	r1, #32
 800091a:	0018      	movs	r0, r3
 800091c:	f000 fdc0 	bl	80014a0 <I2C_ClearFlag>
}
 8000920:	46c0      	nop			; (mov r8, r8)
 8000922:	46bd      	mov	sp, r7
 8000924:	b002      	add	sp, #8
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40005400 	.word	0x40005400

0800092c <I2C_BitHandling>:

void I2C_BitHandling(uint8_t reg, uint8_t bitmask, uint8_t set)
{
 800092c:	b590      	push	{r4, r7, lr}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	0004      	movs	r4, r0
 8000934:	0008      	movs	r0, r1
 8000936:	0011      	movs	r1, r2
 8000938:	1dfb      	adds	r3, r7, #7
 800093a:	1c22      	adds	r2, r4, #0
 800093c:	701a      	strb	r2, [r3, #0]
 800093e:	1dbb      	adds	r3, r7, #6
 8000940:	1c02      	adds	r2, r0, #0
 8000942:	701a      	strb	r2, [r3, #0]
 8000944:	1d7b      	adds	r3, r7, #5
 8000946:	1c0a      	adds	r2, r1, #0
 8000948:	701a      	strb	r2, [r3, #0]
	uint8_t tempReg = I2C_RdReg(reg,rxBuf,1u);
 800094a:	230f      	movs	r3, #15
 800094c:	18fc      	adds	r4, r7, r3
 800094e:	4919      	ldr	r1, [pc, #100]	; (80009b4 <I2C_BitHandling+0x88>)
 8000950:	1dfb      	adds	r3, r7, #7
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2201      	movs	r2, #1
 8000956:	0018      	movs	r0, r3
 8000958:	f7ff fef6 	bl	8000748 <I2C_RdReg>
 800095c:	0003      	movs	r3, r0
 800095e:	7023      	strb	r3, [r4, #0]
	if(set)
 8000960:	1d7b      	adds	r3, r7, #5
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d009      	beq.n	800097c <I2C_BitHandling+0x50>
	{
		//set bits
		tempReg |= bitmask;
 8000968:	230f      	movs	r3, #15
 800096a:	18fb      	adds	r3, r7, r3
 800096c:	220f      	movs	r2, #15
 800096e:	18b9      	adds	r1, r7, r2
 8000970:	1dba      	adds	r2, r7, #6
 8000972:	7809      	ldrb	r1, [r1, #0]
 8000974:	7812      	ldrb	r2, [r2, #0]
 8000976:	430a      	orrs	r2, r1
 8000978:	701a      	strb	r2, [r3, #0]
 800097a:	e00d      	b.n	8000998 <I2C_BitHandling+0x6c>
	}
	else
	{
		//reset bits
		tempReg &= ~bitmask;
 800097c:	1dbb      	adds	r3, r7, #6
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	b25b      	sxtb	r3, r3
 8000982:	43db      	mvns	r3, r3
 8000984:	b25b      	sxtb	r3, r3
 8000986:	220f      	movs	r2, #15
 8000988:	18ba      	adds	r2, r7, r2
 800098a:	7812      	ldrb	r2, [r2, #0]
 800098c:	b252      	sxtb	r2, r2
 800098e:	4013      	ands	r3, r2
 8000990:	b25a      	sxtb	r2, r3
 8000992:	230f      	movs	r3, #15
 8000994:	18fb      	adds	r3, r7, r3
 8000996:	701a      	strb	r2, [r3, #0]
	}
	//write back the register
	I2C_WrReg(reg,tempReg);
 8000998:	230f      	movs	r3, #15
 800099a:	18fb      	adds	r3, r7, r3
 800099c:	781a      	ldrb	r2, [r3, #0]
 800099e:	1dfb      	adds	r3, r7, #7
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	0011      	movs	r1, r2
 80009a4:	0018      	movs	r0, r3
 80009a6:	f7ff ff5f 	bl	8000868 <I2C_WrReg>
}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	46bd      	mov	sp, r7
 80009ae:	b005      	add	sp, #20
 80009b0:	bd90      	pop	{r4, r7, pc}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	2000003c 	.word	0x2000003c

080009b8 <mma8653_goStandby>:

uint8_t mma8653_goStandby()
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	if(!isActive)
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <mma8653_goStandby+0x44>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d101      	bne.n	80009c8 <mma8653_goStandby+0x10>
	{
		return 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	e015      	b.n	80009f4 <mma8653_goStandby+0x3c>
	}
	//reset the Active-bit
	I2C_BitHandling(REG_CTRL_REG_1, 1<<0, 0);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2101      	movs	r1, #1
 80009cc:	202a      	movs	r0, #42	; 0x2a
 80009ce:	f7ff ffad 	bl	800092c <I2C_BitHandling>
	delay(100);
 80009d2:	2064      	movs	r0, #100	; 0x64
 80009d4:	f7ff fe22 	bl	800061c <delay>
	//check, if the sensor is inactive
	if(I2C_RdReg(REG_SYSMOD,rxBuf,1) != 0)
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <mma8653_goStandby+0x48>)
 80009da:	2201      	movs	r2, #1
 80009dc:	0019      	movs	r1, r3
 80009de:	200b      	movs	r0, #11
 80009e0:	f7ff feb2 	bl	8000748 <I2C_RdReg>
 80009e4:	1e03      	subs	r3, r0, #0
 80009e6:	d001      	beq.n	80009ec <mma8653_goStandby+0x34>
	{
		return 1;
 80009e8:	2301      	movs	r3, #1
 80009ea:	e003      	b.n	80009f4 <mma8653_goStandby+0x3c>
	}
	isActive = 0;
 80009ec:	4b03      	ldr	r3, [pc, #12]	; (80009fc <mma8653_goStandby+0x44>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
	return 0;
 80009f2:	2300      	movs	r3, #0
}
 80009f4:	0018      	movs	r0, r3
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	20000035 	.word	0x20000035
 8000a00:	2000003c 	.word	0x2000003c

08000a04 <mma8653_goActive>:
uint8_t mma8653_goActive()
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0

	if(isActive)
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <mma8653_goActive+0x44>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <mma8653_goActive+0x10>
	{
		return 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	e016      	b.n	8000a42 <mma8653_goActive+0x3e>
	}
	//set the Active-bit
	I2C_BitHandling(REG_CTRL_REG_1, 1<<0, 1);
 8000a14:	2201      	movs	r2, #1
 8000a16:	2101      	movs	r1, #1
 8000a18:	202a      	movs	r0, #42	; 0x2a
 8000a1a:	f7ff ff87 	bl	800092c <I2C_BitHandling>
	delay(100);
 8000a1e:	2064      	movs	r0, #100	; 0x64
 8000a20:	f7ff fdfc 	bl	800061c <delay>
	//check, if the sensor is active
	if(I2C_RdReg(REG_SYSMOD,rxBuf,1) != 1)
 8000a24:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <mma8653_goActive+0x48>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	0019      	movs	r1, r3
 8000a2a:	200b      	movs	r0, #11
 8000a2c:	f7ff fe8c 	bl	8000748 <I2C_RdReg>
 8000a30:	1e03      	subs	r3, r0, #0
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d001      	beq.n	8000a3a <mma8653_goActive+0x36>
	{

		return 1;
 8000a36:	2301      	movs	r3, #1
 8000a38:	e003      	b.n	8000a42 <mma8653_goActive+0x3e>
	}
	isActive = 1;
 8000a3a:	4b03      	ldr	r3, [pc, #12]	; (8000a48 <mma8653_goActive+0x44>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	701a      	strb	r2, [r3, #0]
	return 0;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	0018      	movs	r0, r3
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000035 	.word	0x20000035
 8000a4c:	2000003c 	.word	0x2000003c

08000a50 <mma8653_init>:

uint8_t mma8653_init()
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	; 0x28
 8000a54:	af00      	add	r7, sp, #0

	//enable clock for periphery modules
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8000a56:	2380      	movs	r3, #128	; 0x80
 8000a58:	029b      	lsls	r3, r3, #10
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f000 fbc1 	bl	80011e4 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 8000a62:	2380      	movs	r3, #128	; 0x80
 8000a64:	03db      	lsls	r3, r3, #15
 8000a66:	2101      	movs	r1, #1
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f000 fbbb 	bl	80011e4 <RCC_AHBPeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 8000a6e:	2380      	movs	r3, #128	; 0x80
 8000a70:	039b      	lsls	r3, r3, #14
 8000a72:	2101      	movs	r1, #1
 8000a74:	0018      	movs	r0, r3
 8000a76:	f000 fbf5 	bl	8001264 <RCC_APB1PeriphClockCmd>

	//gpio init
	GPIO_InitTypeDef GPIO_InitStruct;
	//configure PINs PF0 and PF1 as AF OD out
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
 8000a7a:	2320      	movs	r3, #32
 8000a7c:	18fb      	adds	r3, r7, r3
 8000a7e:	2203      	movs	r2, #3
 8000a80:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8000a82:	2320      	movs	r3, #32
 8000a84:	18fb      	adds	r3, r7, r3
 8000a86:	2202      	movs	r2, #2
 8000a88:	711a      	strb	r2, [r3, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;
 8000a8a:	2320      	movs	r3, #32
 8000a8c:	18fb      	adds	r3, r7, r3
 8000a8e:	2201      	movs	r2, #1
 8000a90:	719a      	strb	r2, [r3, #6]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_Level_1;
 8000a92:	2320      	movs	r3, #32
 8000a94:	18fb      	adds	r3, r7, r3
 8000a96:	2200      	movs	r2, #0
 8000a98:	715a      	strb	r2, [r3, #5]
	GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a9a:	2320      	movs	r3, #32
 8000a9c:	18fb      	adds	r3, r7, r3
 8000a9e:	4a3b      	ldr	r2, [pc, #236]	; (8000b8c <mma8653_init+0x13c>)
 8000aa0:	0019      	movs	r1, r3
 8000aa2:	0010      	movs	r0, r2
 8000aa4:	f000 fd08 	bl	80014b8 <GPIO_Init>

	//remap
	GPIO_PinAFConfig(GPIOF,GPIO_PinSource0,GPIO_AF_1);
 8000aa8:	4b38      	ldr	r3, [pc, #224]	; (8000b8c <mma8653_init+0x13c>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	2100      	movs	r1, #0
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f000 fd9a 	bl	80015e8 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOF,GPIO_PinSource1,GPIO_AF_1);
 8000ab4:	4b35      	ldr	r3, [pc, #212]	; (8000b8c <mma8653_init+0x13c>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	2101      	movs	r1, #1
 8000aba:	0018      	movs	r0, r3
 8000abc:	f000 fd94 	bl	80015e8 <GPIO_PinAFConfig>

	//configure PINs PA2 and PA3 as inputs for the interrupt lines
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 8000ac0:	2320      	movs	r3, #32
 8000ac2:	18fb      	adds	r3, r7, r3
 8000ac4:	220c      	movs	r2, #12
 8000ac6:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 8000ac8:	2320      	movs	r3, #32
 8000aca:	18fb      	adds	r3, r7, r3
 8000acc:	2200      	movs	r2, #0
 8000ace:	711a      	strb	r2, [r3, #4]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000ad0:	2320      	movs	r3, #32
 8000ad2:	18fb      	adds	r3, r7, r3
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	71da      	strb	r2, [r3, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8000ad8:	2320      	movs	r3, #32
 8000ada:	18fb      	adds	r3, r7, r3
 8000adc:	2203      	movs	r2, #3
 8000ade:	715a      	strb	r2, [r3, #5]
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae0:	2320      	movs	r3, #32
 8000ae2:	18fa      	adds	r2, r7, r3
 8000ae4:	2390      	movs	r3, #144	; 0x90
 8000ae6:	05db      	lsls	r3, r3, #23
 8000ae8:	0011      	movs	r1, r2
 8000aea:	0018      	movs	r0, r3
 8000aec:	f000 fce4 	bl	80014b8 <GPIO_Init>


	//i2c init
	//I2C_DeInit(I2C1);
	I2C_InitTypeDef I2C_InitStruct;
	I2C_InitStruct.I2C_Ack = I2C_Ack_Enable;
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	2200      	movs	r2, #0
 8000af4:	615a      	str	r2, [r3, #20]
	I2C_InitStruct.I2C_AnalogFilter = I2C_AnalogFilter_Enable;
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	2200      	movs	r2, #0
 8000afa:	605a      	str	r2, [r3, #4]
	I2C_InitStruct.I2C_OwnAddress1 = 0xAB;
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	22ab      	movs	r2, #171	; 0xab
 8000b00:	611a      	str	r2, [r3, #16]
	I2C_InitStruct.I2C_DigitalFilter = 0;
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
	I2C_InitStruct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	619a      	str	r2, [r3, #24]
	I2C_InitStruct.I2C_Mode = I2C_Mode_I2C;
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	2200      	movs	r2, #0
 8000b12:	60da      	str	r2, [r3, #12]
	I2C_InitStruct.I2C_Timing = 0x0010020A; //should be 400kHz for the 8Mhz HSI
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	4a1e      	ldr	r2, [pc, #120]	; (8000b90 <mma8653_init+0x140>)
 8000b18:	601a      	str	r2, [r3, #0]
	I2C_Init(I2C_MMA8653,&I2C_InitStruct);
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	4a1d      	ldr	r2, [pc, #116]	; (8000b94 <mma8653_init+0x144>)
 8000b1e:	0019      	movs	r1, r3
 8000b20:	0010      	movs	r0, r2
 8000b22:	f000 fbbf 	bl	80012a4 <I2C_Init>

	I2C_Cmd(I2C_MMA8653, ENABLE);
 8000b26:	4b1b      	ldr	r3, [pc, #108]	; (8000b94 <mma8653_init+0x144>)
 8000b28:	2101      	movs	r1, #1
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f000 fc22 	bl	8001374 <I2C_Cmd>

	delay(50);
 8000b30:	2032      	movs	r0, #50	; 0x32
 8000b32:	f7ff fd73 	bl	800061c <delay>

	if(I2C_RdReg(REG_WHO_AM_I,rxBuf, 1) != 0x5A)	//read the device ID to verify communication
 8000b36:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <mma8653_init+0x148>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	0019      	movs	r1, r3
 8000b3c:	200d      	movs	r0, #13
 8000b3e:	f7ff fe03 	bl	8000748 <I2C_RdReg>
 8000b42:	1e03      	subs	r3, r0, #0
 8000b44:	2b5a      	cmp	r3, #90	; 0x5a
 8000b46:	d001      	beq.n	8000b4c <mma8653_init+0xfc>
	{
		return 1;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	e01b      	b.n	8000b84 <mma8653_init+0x134>
	}

	//set to highres mode
	I2C_BitHandling(REG_CTRL_REG_2,1<<1,SET);
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	2102      	movs	r1, #2
 8000b50:	202b      	movs	r0, #43	; 0x2b
 8000b52:	f7ff feeb 	bl	800092c <I2C_BitHandling>

	//set the sensor as always active (disable auto sleep) <- default
	//set to active and 10 bit mode, DataRate to 12.5Hz
	I2C_BitHandling(REG_CTRL_REG_1,(1<<0 | 1<<3 | 1<<5),SET);
 8000b56:	2201      	movs	r2, #1
 8000b58:	2129      	movs	r1, #41	; 0x29
 8000b5a:	202a      	movs	r0, #42	; 0x2a
 8000b5c:	f7ff fee6 	bl	800092c <I2C_BitHandling>

	//check, if the sensor is active
	if(I2C_RdReg(REG_SYSMOD,rxBuf,1) != 1)
 8000b60:	4b0d      	ldr	r3, [pc, #52]	; (8000b98 <mma8653_init+0x148>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	0019      	movs	r1, r3
 8000b66:	200b      	movs	r0, #11
 8000b68:	f7ff fdee 	bl	8000748 <I2C_RdReg>
 8000b6c:	1e03      	subs	r3, r0, #0
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d004      	beq.n	8000b7c <mma8653_init+0x12c>
	{
		isActive = 0;
 8000b72:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <mma8653_init+0x14c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	701a      	strb	r2, [r3, #0]
		return 2;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	e003      	b.n	8000b84 <mma8653_init+0x134>
	}
	isActive = 1;
 8000b7c:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <mma8653_init+0x14c>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	701a      	strb	r2, [r3, #0]
	return 0;
 8000b82:	2300      	movs	r3, #0
}
 8000b84:	0018      	movs	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	b00a      	add	sp, #40	; 0x28
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	48001400 	.word	0x48001400
 8000b90:	0010020a 	.word	0x0010020a
 8000b94:	40005400 	.word	0x40005400
 8000b98:	2000003c 	.word	0x2000003c
 8000b9c:	20000035 	.word	0x20000035

08000ba0 <mma8653_setDataRate>:
	}
	return 0;
}

uint8_t mma8653_setDataRate(mma8653_dataRates dataRate)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	0002      	movs	r2, r0
 8000ba8:	1dfb      	adds	r3, r7, #7
 8000baa:	701a      	strb	r2, [r3, #0]
	//deactivate the sensor
	if(mma8653_goStandby())
 8000bac:	f7ff ff04 	bl	80009b8 <mma8653_goStandby>
 8000bb0:	1e03      	subs	r3, r0, #0
 8000bb2:	d001      	beq.n	8000bb8 <mma8653_setDataRate+0x18>
	{
		return 1;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	e014      	b.n	8000be2 <mma8653_setDataRate+0x42>
	}
	//clear bits in register to change
	I2C_BitHandling(REG_CTRL_REG_1, 0x38, Bit_RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2138      	movs	r1, #56	; 0x38
 8000bbc:	202a      	movs	r0, #42	; 0x2a
 8000bbe:	f7ff feb5 	bl	800092c <I2C_BitHandling>
	//set range
	I2C_BitHandling(REG_CTRL_REG_1, dataRate<<3, Bit_SET);
 8000bc2:	1dfb      	adds	r3, r7, #7
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	00db      	lsls	r3, r3, #3
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	2201      	movs	r2, #1
 8000bcc:	0019      	movs	r1, r3
 8000bce:	202a      	movs	r0, #42	; 0x2a
 8000bd0:	f7ff feac 	bl	800092c <I2C_BitHandling>

	if(mma8653_goActive())
 8000bd4:	f7ff ff16 	bl	8000a04 <mma8653_goActive>
 8000bd8:	1e03      	subs	r3, r0, #0
 8000bda:	d001      	beq.n	8000be0 <mma8653_setDataRate+0x40>
	{
		return 3;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	e000      	b.n	8000be2 <mma8653_setDataRate+0x42>
	}
	return 0;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	0018      	movs	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b002      	add	sp, #8
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	46c0      	nop			; (mov r8, r8)

08000bec <mma8653_setDataWidth>:

uint8_t mma8653_setDataWidth(uint8_t DataWidth)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	0002      	movs	r2, r0
 8000bf4:	1dfb      	adds	r3, r7, #7
 8000bf6:	701a      	strb	r2, [r3, #0]
	//deactivate the sensor
	if(mma8653_goStandby())
 8000bf8:	f7ff fede 	bl	80009b8 <mma8653_goStandby>
 8000bfc:	1e03      	subs	r3, r0, #0
 8000bfe:	d001      	beq.n	8000c04 <mma8653_setDataWidth+0x18>
	{
		return 1;
 8000c00:	2301      	movs	r3, #1
 8000c02:	e020      	b.n	8000c46 <mma8653_setDataWidth+0x5a>
	}
	//clear bits in register to change
	I2C_BitHandling(REG_CTRL_REG_1, 0x3E, Bit_RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	213e      	movs	r1, #62	; 0x3e
 8000c08:	202a      	movs	r0, #42	; 0x2a
 8000c0a:	f7ff fe8f 	bl	800092c <I2C_BitHandling>

	//decide what to do
	switch(DataWidth)
 8000c0e:	1dfb      	adds	r3, r7, #7
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d002      	beq.n	8000c1c <mma8653_setDataWidth+0x30>
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d006      	beq.n	8000c28 <mma8653_setDataWidth+0x3c>
 8000c1a:	e00b      	b.n	8000c34 <mma8653_setDataWidth+0x48>
	{
	case MMA8653_DATAWIDTH_8:
		//set F_READ and leave highest data rate
		I2C_BitHandling(REG_CTRL_REG_1, 1<<1, Bit_SET);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	2102      	movs	r1, #2
 8000c20:	202a      	movs	r0, #42	; 0x2a
 8000c22:	f7ff fe83 	bl	800092c <I2C_BitHandling>
		break;
 8000c26:	e007      	b.n	8000c38 <mma8653_setDataWidth+0x4c>
	case MMA8653_DATAWIDTH_10:
		//limit output data rate to 12.5Hz and leave F_READ reset
		I2C_BitHandling(REG_CTRL_REG_1,(1<<3 | 1<<5), Bit_SET);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	2128      	movs	r1, #40	; 0x28
 8000c2c:	202a      	movs	r0, #42	; 0x2a
 8000c2e:	f7ff fe7d 	bl	800092c <I2C_BitHandling>
		break;
 8000c32:	e001      	b.n	8000c38 <mma8653_setDataWidth+0x4c>
	default:
		return 2;
 8000c34:	2302      	movs	r3, #2
 8000c36:	e006      	b.n	8000c46 <mma8653_setDataWidth+0x5a>
		break;
	}
	if(mma8653_goActive())
 8000c38:	f7ff fee4 	bl	8000a04 <mma8653_goActive>
 8000c3c:	1e03      	subs	r3, r0, #0
 8000c3e:	d001      	beq.n	8000c44 <mma8653_setDataWidth+0x58>
	{
		return 3;
 8000c40:	2303      	movs	r3, #3
 8000c42:	e000      	b.n	8000c46 <mma8653_setDataWidth+0x5a>
	}
	return 0;
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	0018      	movs	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	b002      	add	sp, #8
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	46c0      	nop			; (mov r8, r8)

08000c50 <mma8653_read8>:

//read when in fast (8-bit) mode
//needs the fast-read mode enabled as well
//max. sample frequency (because of communication) ~ 7kHz
acc8_t mma8653_read8()
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
	uint8_t rxBuf[3];
	acc8_t acc_result;

	I2C_RdReg(REG_OUT_X_MSB,rxBuf,3);
 8000c56:	2308      	movs	r3, #8
 8000c58:	18fb      	adds	r3, r7, r3
 8000c5a:	2203      	movs	r2, #3
 8000c5c:	0019      	movs	r1, r3
 8000c5e:	2001      	movs	r0, #1
 8000c60:	f7ff fd72 	bl	8000748 <I2C_RdReg>
	//rxbuf[0] contains full 8 bit of data.
	//the first bit defines the sign!
	acc_result.x = rxBuf[0];
 8000c64:	2308      	movs	r3, #8
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	b25a      	sxtb	r2, r3
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	701a      	strb	r2, [r3, #0]
	acc_result.y = rxBuf[1];
 8000c70:	2308      	movs	r3, #8
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	785b      	ldrb	r3, [r3, #1]
 8000c76:	b25a      	sxtb	r2, r3
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	705a      	strb	r2, [r3, #1]
	acc_result.z = rxBuf[2];
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	18fb      	adds	r3, r7, r3
 8000c80:	789b      	ldrb	r3, [r3, #2]
 8000c82:	b25a      	sxtb	r2, r3
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	709a      	strb	r2, [r3, #2]
	return acc_result;
 8000c88:	230c      	movs	r3, #12
 8000c8a:	18fb      	adds	r3, r7, r3
 8000c8c:	1d3a      	adds	r2, r7, #4
 8000c8e:	8811      	ldrh	r1, [r2, #0]
 8000c90:	8019      	strh	r1, [r3, #0]
 8000c92:	7892      	ldrb	r2, [r2, #2]
 8000c94:	709a      	strb	r2, [r3, #2]
 8000c96:	230c      	movs	r3, #12
 8000c98:	18fa      	adds	r2, r7, r3
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	7811      	ldrb	r1, [r2, #0]
 8000c9e:	20ff      	movs	r0, #255	; 0xff
 8000ca0:	4001      	ands	r1, r0
 8000ca2:	20ff      	movs	r0, #255	; 0xff
 8000ca4:	4383      	bics	r3, r0
 8000ca6:	430b      	orrs	r3, r1
 8000ca8:	7851      	ldrb	r1, [r2, #1]
 8000caa:	20ff      	movs	r0, #255	; 0xff
 8000cac:	4001      	ands	r1, r0
 8000cae:	0209      	lsls	r1, r1, #8
 8000cb0:	4806      	ldr	r0, [pc, #24]	; (8000ccc <mma8653_read8+0x7c>)
 8000cb2:	4003      	ands	r3, r0
 8000cb4:	430b      	orrs	r3, r1
 8000cb6:	7892      	ldrb	r2, [r2, #2]
 8000cb8:	21ff      	movs	r1, #255	; 0xff
 8000cba:	400a      	ands	r2, r1
 8000cbc:	0412      	lsls	r2, r2, #16
 8000cbe:	4904      	ldr	r1, [pc, #16]	; (8000cd0 <mma8653_read8+0x80>)
 8000cc0:	400b      	ands	r3, r1
 8000cc2:	4313      	orrs	r3, r2
}
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	b004      	add	sp, #16
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	ffff00ff 	.word	0xffff00ff
 8000cd0:	ff00ffff 	.word	0xff00ffff

08000cd4 <apa102_init>:
colorRgbi leds[LED_CNT];

uint8_t spiSendData[8+4*LED_CNT];

void apa102_init()
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b092      	sub	sp, #72	; 0x48
 8000cd8:	af00      	add	r7, sp, #0

	//enable clock for periphery modules
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8000cda:	2380      	movs	r3, #128	; 0x80
 8000cdc:	029b      	lsls	r3, r3, #10
 8000cde:	2101      	movs	r1, #1
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f000 fa7f 	bl	80011e4 <RCC_AHBPeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 8000ce6:	2380      	movs	r3, #128	; 0x80
 8000ce8:	015b      	lsls	r3, r3, #5
 8000cea:	2101      	movs	r1, #1
 8000cec:	0018      	movs	r0, r3
 8000cee:	f000 fa99 	bl	8001224 <RCC_APB2PeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1,ENABLE);
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	f000 fa75 	bl	80011e4 <RCC_AHBPeriphClockCmd>

	//gpio
	GPIO_InitTypeDef GPIO_InitStructure;
	//configure PINs PA7 and PA5 as AF out
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_7;
 8000cfa:	2340      	movs	r3, #64	; 0x40
 8000cfc:	18fb      	adds	r3, r7, r3
 8000cfe:	22a0      	movs	r2, #160	; 0xa0
 8000d00:	601a      	str	r2, [r3, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000d02:	2340      	movs	r3, #64	; 0x40
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	2202      	movs	r2, #2
 8000d08:	711a      	strb	r2, [r3, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000d0a:	2340      	movs	r3, #64	; 0x40
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	2200      	movs	r2, #0
 8000d10:	719a      	strb	r2, [r3, #6]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000d12:	2340      	movs	r3, #64	; 0x40
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	2203      	movs	r2, #3
 8000d18:	715a      	strb	r2, [r3, #5]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000d1a:	2340      	movs	r3, #64	; 0x40
 8000d1c:	18fa      	adds	r2, r7, r3
 8000d1e:	2390      	movs	r3, #144	; 0x90
 8000d20:	05db      	lsls	r3, r3, #23
 8000d22:	0011      	movs	r1, r2
 8000d24:	0018      	movs	r0, r3
 8000d26:	f000 fbc7 	bl	80014b8 <GPIO_Init>

	//init the SPI module
	SPI_InitTypeDef SPI_InitStruct;
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
 8000d2a:	232c      	movs	r3, #44	; 0x2c
 8000d2c:	18fb      	adds	r3, r7, r3
 8000d2e:	2210      	movs	r2, #16
 8000d30:	819a      	strh	r2, [r3, #12]
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_2Edge;
 8000d32:	232c      	movs	r3, #44	; 0x2c
 8000d34:	18fb      	adds	r3, r7, r3
 8000d36:	2201      	movs	r2, #1
 8000d38:	811a      	strh	r2, [r3, #8]
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_High;
 8000d3a:	232c      	movs	r3, #44	; 0x2c
 8000d3c:	18fb      	adds	r3, r7, r3
 8000d3e:	2202      	movs	r2, #2
 8000d40:	80da      	strh	r2, [r3, #6]
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
 8000d42:	232c      	movs	r3, #44	; 0x2c
 8000d44:	18fb      	adds	r3, r7, r3
 8000d46:	22e0      	movs	r2, #224	; 0xe0
 8000d48:	00d2      	lsls	r2, r2, #3
 8000d4a:	809a      	strh	r2, [r3, #4]
	SPI_InitStruct.SPI_Direction = SPI_Direction_Tx;
 8000d4c:	232c      	movs	r3, #44	; 0x2c
 8000d4e:	18fb      	adds	r3, r7, r3
 8000d50:	2280      	movs	r2, #128	; 0x80
 8000d52:	01d2      	lsls	r2, r2, #7
 8000d54:	801a      	strh	r2, [r3, #0]
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
 8000d56:	232c      	movs	r3, #44	; 0x2c
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	81da      	strh	r2, [r3, #14]
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
 8000d5e:	232c      	movs	r3, #44	; 0x2c
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	2282      	movs	r2, #130	; 0x82
 8000d64:	0052      	lsls	r2, r2, #1
 8000d66:	805a      	strh	r2, [r3, #2]
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 8000d68:	232c      	movs	r3, #44	; 0x2c
 8000d6a:	18fb      	adds	r3, r7, r3
 8000d6c:	2280      	movs	r2, #128	; 0x80
 8000d6e:	0092      	lsls	r2, r2, #2
 8000d70:	815a      	strh	r2, [r3, #10]
	SPI_Init(SPI1, &SPI_InitStruct);
 8000d72:	232c      	movs	r3, #44	; 0x2c
 8000d74:	18fb      	adds	r3, r7, r3
 8000d76:	4a1d      	ldr	r2, [pc, #116]	; (8000dec <apa102_init+0x118>)
 8000d78:	0019      	movs	r1, r3
 8000d7a:	0010      	movs	r0, r2
 8000d7c:	f000 f964 	bl	8001048 <SPI_Init>

	SPI_I2S_DMACmd(SPI1,SPI_I2S_DMAReq_Tx,ENABLE);
 8000d80:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <apa102_init+0x118>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	2102      	movs	r1, #2
 8000d86:	0018      	movs	r0, r3
 8000d88:	f000 fa02 	bl	8001190 <SPI_I2S_DMACmd>
	//start the SPI module:
	SPI_Cmd(SPI1,ENABLE);
 8000d8c:	4b17      	ldr	r3, [pc, #92]	; (8000dec <apa102_init+0x118>)
 8000d8e:	2101      	movs	r1, #1
 8000d90:	0018      	movs	r0, r3
 8000d92:	f000 f9dd 	bl	8001150 <SPI_Cmd>

	DMA_InitTypeDef DMA_InitStruct;
	DMA_InitStruct.DMA_DIR = DMA_DIR_PeripheralDST;
 8000d96:	003b      	movs	r3, r7
 8000d98:	2210      	movs	r2, #16
 8000d9a:	609a      	str	r2, [r3, #8]
	DMA_InitStruct.DMA_M2M = DMA_M2M_Disable;
 8000d9c:	003b      	movs	r3, r7
 8000d9e:	2200      	movs	r2, #0
 8000da0:	629a      	str	r2, [r3, #40]	; 0x28
	DMA_InitStruct.DMA_MemoryBaseAddr = (uint32_t)spiSendData;
 8000da2:	4a13      	ldr	r2, [pc, #76]	; (8000df0 <apa102_init+0x11c>)
 8000da4:	003b      	movs	r3, r7
 8000da6:	605a      	str	r2, [r3, #4]
	DMA_InitStruct.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8000da8:	003b      	movs	r3, r7
 8000daa:	2200      	movs	r2, #0
 8000dac:	61da      	str	r2, [r3, #28]
	DMA_InitStruct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8000dae:	003b      	movs	r3, r7
 8000db0:	2280      	movs	r2, #128	; 0x80
 8000db2:	615a      	str	r2, [r3, #20]
	DMA_InitStruct.DMA_Mode = DMA_Mode_Normal;
 8000db4:	003b      	movs	r3, r7
 8000db6:	2200      	movs	r2, #0
 8000db8:	621a      	str	r2, [r3, #32]
	DMA_InitStruct.DMA_PeripheralBaseAddr = (uint32_t)&(SPI1->DR);
 8000dba:	003b      	movs	r3, r7
 8000dbc:	4a0d      	ldr	r2, [pc, #52]	; (8000df4 <apa102_init+0x120>)
 8000dbe:	601a      	str	r2, [r3, #0]
	DMA_InitStruct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8000dc0:	003b      	movs	r3, r7
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	619a      	str	r2, [r3, #24]
	DMA_InitStruct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8000dc6:	003b      	movs	r3, r7
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
	DMA_InitStruct.DMA_Priority = DMA_Priority_High;
 8000dcc:	003b      	movs	r3, r7
 8000dce:	2280      	movs	r2, #128	; 0x80
 8000dd0:	0192      	lsls	r2, r2, #6
 8000dd2:	625a      	str	r2, [r3, #36]	; 0x24
	DMA_Init(DMA1_Channel3, &DMA_InitStruct);
 8000dd4:	003b      	movs	r3, r7
 8000dd6:	4a08      	ldr	r2, [pc, #32]	; (8000df8 <apa102_init+0x124>)
 8000dd8:	0019      	movs	r1, r3
 8000dda:	0010      	movs	r0, r2
 8000ddc:	f000 fc56 	bl	800168c <DMA_Init>

	apa102_allOff();
 8000de0:	f000 f914 	bl	800100c <apa102_allOff>
}
 8000de4:	46c0      	nop			; (mov r8, r8)
 8000de6:	46bd      	mov	sp, r7
 8000de8:	b012      	add	sp, #72	; 0x48
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40013000 	.word	0x40013000
 8000df0:	20000080 	.word	0x20000080
 8000df4:	4001300c 	.word	0x4001300c
 8000df8:	40020030 	.word	0x40020030

08000dfc <updateStripe>:

void updateStripe()
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
	int ledIdx = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
	DMA_Cmd(DMA1_Channel3, DISABLE);
 8000e06:	4b33      	ldr	r3, [pc, #204]	; (8000ed4 <updateStripe+0xd8>)
 8000e08:	2100      	movs	r1, #0
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f000 fc7c 	bl	8001708 <DMA_Cmd>
	//start frame
	for(int i = 0; i < 4; i++)
 8000e10:	2300      	movs	r3, #0
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	e007      	b.n	8000e26 <updateStripe+0x2a>
	{
		spiSendData[i] = 0x00;
 8000e16:	4a30      	ldr	r2, [pc, #192]	; (8000ed8 <updateStripe+0xdc>)
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	18d3      	adds	r3, r2, r3
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	701a      	strb	r2, [r3, #0]
void updateStripe()
{
	int ledIdx = 0;
	DMA_Cmd(DMA1_Channel3, DISABLE);
	//start frame
	for(int i = 0; i < 4; i++)
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	3301      	adds	r3, #1
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	2b03      	cmp	r3, #3
 8000e2a:	ddf4      	ble.n	8000e16 <updateStripe+0x1a>
	{
		spiSendData[i] = 0x00;
	}
	for(int i = 4; i < 4 * (LED_CNT + 1); i+= 4)
 8000e2c:	2304      	movs	r3, #4
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	e030      	b.n	8000e94 <updateStripe+0x98>
	{
		spiSendData[i] = 0xE0 |(leds[ledIdx].global & 0x1F); //global
 8000e32:	4b2a      	ldr	r3, [pc, #168]	; (8000edc <updateStripe+0xe0>)
 8000e34:	68fa      	ldr	r2, [r7, #12]
 8000e36:	0092      	lsls	r2, r2, #2
 8000e38:	5cd3      	ldrb	r3, [r2, r3]
 8000e3a:	2220      	movs	r2, #32
 8000e3c:	4252      	negs	r2, r2
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	b2d9      	uxtb	r1, r3
 8000e42:	4a25      	ldr	r2, [pc, #148]	; (8000ed8 <updateStripe+0xdc>)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	18d3      	adds	r3, r2, r3
 8000e48:	1c0a      	adds	r2, r1, #0
 8000e4a:	701a      	strb	r2, [r3, #0]
		spiSendData[i+1] = leds[ledIdx].blue;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	4922      	ldr	r1, [pc, #136]	; (8000edc <updateStripe+0xe0>)
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	0092      	lsls	r2, r2, #2
 8000e56:	188a      	adds	r2, r1, r2
 8000e58:	3201      	adds	r2, #1
 8000e5a:	7811      	ldrb	r1, [r2, #0]
 8000e5c:	4a1e      	ldr	r2, [pc, #120]	; (8000ed8 <updateStripe+0xdc>)
 8000e5e:	54d1      	strb	r1, [r2, r3]
		spiSendData[i+2] = leds[ledIdx].green;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3302      	adds	r3, #2
 8000e64:	491d      	ldr	r1, [pc, #116]	; (8000edc <updateStripe+0xe0>)
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	0092      	lsls	r2, r2, #2
 8000e6a:	188a      	adds	r2, r1, r2
 8000e6c:	3202      	adds	r2, #2
 8000e6e:	7811      	ldrb	r1, [r2, #0]
 8000e70:	4a19      	ldr	r2, [pc, #100]	; (8000ed8 <updateStripe+0xdc>)
 8000e72:	54d1      	strb	r1, [r2, r3]
		spiSendData[i+3] = leds[ledIdx].red;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3303      	adds	r3, #3
 8000e78:	4918      	ldr	r1, [pc, #96]	; (8000edc <updateStripe+0xe0>)
 8000e7a:	68fa      	ldr	r2, [r7, #12]
 8000e7c:	0092      	lsls	r2, r2, #2
 8000e7e:	188a      	adds	r2, r1, r2
 8000e80:	3203      	adds	r2, #3
 8000e82:	7811      	ldrb	r1, [r2, #0]
 8000e84:	4a14      	ldr	r2, [pc, #80]	; (8000ed8 <updateStripe+0xdc>)
 8000e86:	54d1      	strb	r1, [r2, r3]
		ledIdx++;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	60fb      	str	r3, [r7, #12]
	//start frame
	for(int i = 0; i < 4; i++)
	{
		spiSendData[i] = 0x00;
	}
	for(int i = 4; i < 4 * (LED_CNT + 1); i+= 4)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	3304      	adds	r3, #4
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b43      	cmp	r3, #67	; 0x43
 8000e98:	ddcb      	ble.n	8000e32 <updateStripe+0x36>
		spiSendData[i+1] = leds[ledIdx].blue;
		spiSendData[i+2] = leds[ledIdx].green;
		spiSendData[i+3] = leds[ledIdx].red;
		ledIdx++;
	}
	for(int i = 4 * (LED_CNT +1); i < 4 * (LED_CNT+2); i++)
 8000e9a:	2344      	movs	r3, #68	; 0x44
 8000e9c:	603b      	str	r3, [r7, #0]
 8000e9e:	e007      	b.n	8000eb0 <updateStripe+0xb4>
	{
		spiSendData[i] = 0xFF;
 8000ea0:	4a0d      	ldr	r2, [pc, #52]	; (8000ed8 <updateStripe+0xdc>)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	18d3      	adds	r3, r2, r3
 8000ea6:	22ff      	movs	r2, #255	; 0xff
 8000ea8:	701a      	strb	r2, [r3, #0]
		spiSendData[i+1] = leds[ledIdx].blue;
		spiSendData[i+2] = leds[ledIdx].green;
		spiSendData[i+3] = leds[ledIdx].red;
		ledIdx++;
	}
	for(int i = 4 * (LED_CNT +1); i < 4 * (LED_CNT+2); i++)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	3301      	adds	r3, #1
 8000eae:	603b      	str	r3, [r7, #0]
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	2b47      	cmp	r3, #71	; 0x47
 8000eb4:	ddf4      	ble.n	8000ea0 <updateStripe+0xa4>
	{
		spiSendData[i] = 0xFF;
	}
	//now the DMA would only have to send the spiSendData to the SPI tx fifo :)
	DMA_SetCurrDataCounter(DMA1_Channel3,8+4*LED_CNT);
 8000eb6:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <updateStripe+0xd8>)
 8000eb8:	2148      	movs	r1, #72	; 0x48
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f000 fc42 	bl	8001744 <DMA_SetCurrDataCounter>
	DMA_Cmd(DMA1_Channel3, ENABLE);
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <updateStripe+0xd8>)
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f000 fc1f 	bl	8001708 <DMA_Cmd>
}
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	b004      	add	sp, #16
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	40020030 	.word	0x40020030
 8000ed8:	20000080 	.word	0x20000080
 8000edc:	20000040 	.word	0x20000040

08000ee0 <apa102_setPattern>:

//white only (so far)
//global is only 5 bit (max.31)!
void apa102_setPattern(uint16_t mask, uint8_t global)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	0002      	movs	r2, r0
 8000ee8:	1dbb      	adds	r3, r7, #6
 8000eea:	801a      	strh	r2, [r3, #0]
 8000eec:	1d7b      	adds	r3, r7, #5
 8000eee:	1c0a      	adds	r2, r1, #0
 8000ef0:	701a      	strb	r2, [r3, #0]
	//limit the global value to 5 bits
	if(global > 0x1F)
 8000ef2:	1d7b      	adds	r3, r7, #5
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b1f      	cmp	r3, #31
 8000ef8:	d902      	bls.n	8000f00 <apa102_setPattern+0x20>
	{
		global = 0x1F;
 8000efa:	1d7b      	adds	r3, r7, #5
 8000efc:	221f      	movs	r2, #31
 8000efe:	701a      	strb	r2, [r3, #0]
	}
	for(uint16_t i = 0; i< 16; i++)
 8000f00:	230e      	movs	r3, #14
 8000f02:	18fb      	adds	r3, r7, r3
 8000f04:	2200      	movs	r2, #0
 8000f06:	801a      	strh	r2, [r3, #0]
 8000f08:	e059      	b.n	8000fbe <apa102_setPattern+0xde>
	{
		if(mask & (1<<i))
 8000f0a:	1dbb      	adds	r3, r7, #6
 8000f0c:	881a      	ldrh	r2, [r3, #0]
 8000f0e:	230e      	movs	r3, #14
 8000f10:	18fb      	adds	r3, r7, r3
 8000f12:	881b      	ldrh	r3, [r3, #0]
 8000f14:	411a      	asrs	r2, r3
 8000f16:	0013      	movs	r3, r2
 8000f18:	2201      	movs	r2, #1
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	d026      	beq.n	8000f6c <apa102_setPattern+0x8c>
		{
			leds[i].global = global & 0x1F;
 8000f1e:	230e      	movs	r3, #14
 8000f20:	18fb      	adds	r3, r7, r3
 8000f22:	881a      	ldrh	r2, [r3, #0]
 8000f24:	1d7b      	adds	r3, r7, #5
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	211f      	movs	r1, #31
 8000f2a:	400b      	ands	r3, r1
 8000f2c:	b2d9      	uxtb	r1, r3
 8000f2e:	4b29      	ldr	r3, [pc, #164]	; (8000fd4 <apa102_setPattern+0xf4>)
 8000f30:	0092      	lsls	r2, r2, #2
 8000f32:	54d1      	strb	r1, [r2, r3]
			leds[i].blue = 255;
 8000f34:	230e      	movs	r3, #14
 8000f36:	18fb      	adds	r3, r7, r3
 8000f38:	881b      	ldrh	r3, [r3, #0]
 8000f3a:	4a26      	ldr	r2, [pc, #152]	; (8000fd4 <apa102_setPattern+0xf4>)
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	18d3      	adds	r3, r2, r3
 8000f40:	3301      	adds	r3, #1
 8000f42:	22ff      	movs	r2, #255	; 0xff
 8000f44:	701a      	strb	r2, [r3, #0]
			leds[i].green = 255;
 8000f46:	230e      	movs	r3, #14
 8000f48:	18fb      	adds	r3, r7, r3
 8000f4a:	881b      	ldrh	r3, [r3, #0]
 8000f4c:	4a21      	ldr	r2, [pc, #132]	; (8000fd4 <apa102_setPattern+0xf4>)
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	18d3      	adds	r3, r2, r3
 8000f52:	3302      	adds	r3, #2
 8000f54:	22ff      	movs	r2, #255	; 0xff
 8000f56:	701a      	strb	r2, [r3, #0]
			leds[i].red = 255;
 8000f58:	230e      	movs	r3, #14
 8000f5a:	18fb      	adds	r3, r7, r3
 8000f5c:	881b      	ldrh	r3, [r3, #0]
 8000f5e:	4a1d      	ldr	r2, [pc, #116]	; (8000fd4 <apa102_setPattern+0xf4>)
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	18d3      	adds	r3, r2, r3
 8000f64:	3303      	adds	r3, #3
 8000f66:	22ff      	movs	r2, #255	; 0xff
 8000f68:	701a      	strb	r2, [r3, #0]
 8000f6a:	e021      	b.n	8000fb0 <apa102_setPattern+0xd0>
		}
		else
		{
			leds[i].global = 0;
 8000f6c:	230e      	movs	r3, #14
 8000f6e:	18fb      	adds	r3, r7, r3
 8000f70:	881a      	ldrh	r2, [r3, #0]
 8000f72:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <apa102_setPattern+0xf4>)
 8000f74:	0092      	lsls	r2, r2, #2
 8000f76:	2100      	movs	r1, #0
 8000f78:	54d1      	strb	r1, [r2, r3]
			leds[i].blue = 0;
 8000f7a:	230e      	movs	r3, #14
 8000f7c:	18fb      	adds	r3, r7, r3
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	4a14      	ldr	r2, [pc, #80]	; (8000fd4 <apa102_setPattern+0xf4>)
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	18d3      	adds	r3, r2, r3
 8000f86:	3301      	adds	r3, #1
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
			leds[i].green = 0;
 8000f8c:	230e      	movs	r3, #14
 8000f8e:	18fb      	adds	r3, r7, r3
 8000f90:	881b      	ldrh	r3, [r3, #0]
 8000f92:	4a10      	ldr	r2, [pc, #64]	; (8000fd4 <apa102_setPattern+0xf4>)
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	18d3      	adds	r3, r2, r3
 8000f98:	3302      	adds	r3, #2
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
			leds[i].red = 0;
 8000f9e:	230e      	movs	r3, #14
 8000fa0:	18fb      	adds	r3, r7, r3
 8000fa2:	881b      	ldrh	r3, [r3, #0]
 8000fa4:	4a0b      	ldr	r2, [pc, #44]	; (8000fd4 <apa102_setPattern+0xf4>)
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	18d3      	adds	r3, r2, r3
 8000faa:	3303      	adds	r3, #3
 8000fac:	2200      	movs	r2, #0
 8000fae:	701a      	strb	r2, [r3, #0]
	//limit the global value to 5 bits
	if(global > 0x1F)
	{
		global = 0x1F;
	}
	for(uint16_t i = 0; i< 16; i++)
 8000fb0:	230e      	movs	r3, #14
 8000fb2:	18fb      	adds	r3, r7, r3
 8000fb4:	881a      	ldrh	r2, [r3, #0]
 8000fb6:	230e      	movs	r3, #14
 8000fb8:	18fb      	adds	r3, r7, r3
 8000fba:	3201      	adds	r2, #1
 8000fbc:	801a      	strh	r2, [r3, #0]
 8000fbe:	230e      	movs	r3, #14
 8000fc0:	18fb      	adds	r3, r7, r3
 8000fc2:	881b      	ldrh	r3, [r3, #0]
 8000fc4:	2b0f      	cmp	r3, #15
 8000fc6:	d9a0      	bls.n	8000f0a <apa102_setPattern+0x2a>
			leds[i].blue = 0;
			leds[i].green = 0;
			leds[i].red = 0;
		}
	}
	updateStripe();
 8000fc8:	f7ff ff18 	bl	8000dfc <updateStripe>
}
 8000fcc:	46c0      	nop			; (mov r8, r8)
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	b004      	add	sp, #16
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000040 	.word	0x20000040

08000fd8 <apa102_setSingle>:

void apa102_setSingle(uint8_t index, uint8_t global)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	0002      	movs	r2, r0
 8000fe0:	1dfb      	adds	r3, r7, #7
 8000fe2:	701a      	strb	r2, [r3, #0]
 8000fe4:	1dbb      	adds	r3, r7, #6
 8000fe6:	1c0a      	adds	r2, r1, #0
 8000fe8:	701a      	strb	r2, [r3, #0]
	apa102_setPattern(1<<index,global);
 8000fea:	1dfb      	adds	r3, r7, #7
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2201      	movs	r2, #1
 8000ff0:	409a      	lsls	r2, r3
 8000ff2:	0013      	movs	r3, r2
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	1dbb      	adds	r3, r7, #6
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	0019      	movs	r1, r3
 8000ffc:	0010      	movs	r0, r2
 8000ffe:	f7ff ff6f 	bl	8000ee0 <apa102_setPattern>
}
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	46bd      	mov	sp, r7
 8001006:	b002      	add	sp, #8
 8001008:	bd80      	pop	{r7, pc}
 800100a:	46c0      	nop			; (mov r8, r8)

0800100c <apa102_allOff>:

void apa102_allOff()
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
	for(uint16_t i = 0; i< 16; i++)
 8001012:	1dbb      	adds	r3, r7, #6
 8001014:	2200      	movs	r2, #0
 8001016:	801a      	strh	r2, [r3, #0]
 8001018:	e00a      	b.n	8001030 <apa102_allOff+0x24>
	{

		leds[i].global = 0;
 800101a:	1dbb      	adds	r3, r7, #6
 800101c:	881a      	ldrh	r2, [r3, #0]
 800101e:	4b09      	ldr	r3, [pc, #36]	; (8001044 <apa102_allOff+0x38>)
 8001020:	0092      	lsls	r2, r2, #2
 8001022:	2100      	movs	r1, #0
 8001024:	54d1      	strb	r1, [r2, r3]
	apa102_setPattern(1<<index,global);
}

void apa102_allOff()
{
	for(uint16_t i = 0; i< 16; i++)
 8001026:	1dbb      	adds	r3, r7, #6
 8001028:	881a      	ldrh	r2, [r3, #0]
 800102a:	1dbb      	adds	r3, r7, #6
 800102c:	3201      	adds	r2, #1
 800102e:	801a      	strh	r2, [r3, #0]
 8001030:	1dbb      	adds	r3, r7, #6
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	2b0f      	cmp	r3, #15
 8001036:	d9f0      	bls.n	800101a <apa102_allOff+0xe>
	{

		leds[i].global = 0;

	}
	updateStripe();
 8001038:	f7ff fee0 	bl	8000dfc <updateStripe>
}
 800103c:	46c0      	nop			; (mov r8, r8)
 800103e:	46bd      	mov	sp, r7
 8001040:	b002      	add	sp, #8
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000040 	.word	0x20000040

08001048 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8001052:	230e      	movs	r3, #14
 8001054:	18fb      	adds	r3, r7, r3
 8001056:	2200      	movs	r2, #0
 8001058:	801a      	strh	r2, [r3, #0]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 800105a:	230e      	movs	r3, #14
 800105c:	18fb      	adds	r3, r7, r3
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	8812      	ldrh	r2, [r2, #0]
 8001062:	801a      	strh	r2, [r3, #0]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8001064:	230e      	movs	r3, #14
 8001066:	18fb      	adds	r3, r7, r3
 8001068:	220e      	movs	r2, #14
 800106a:	18ba      	adds	r2, r7, r2
 800106c:	8811      	ldrh	r1, [r2, #0]
 800106e:	22c1      	movs	r2, #193	; 0xc1
 8001070:	0192      	lsls	r2, r2, #6
 8001072:	400a      	ands	r2, r1
 8001074:	801a      	strh	r2, [r3, #0]
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	881a      	ldrh	r2, [r3, #0]
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	89db      	ldrh	r3, [r3, #14]
 800107e:	4313      	orrs	r3, r2
 8001080:	b29a      	uxth	r2, r3
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8001086:	4313      	orrs	r3, r2
 8001088:	b29a      	uxth	r2, r3
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 800108e:	4313      	orrs	r3, r2
 8001090:	b29a      	uxth	r2, r3
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
                      SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8001096:	4313      	orrs	r3, r2
 8001098:	b29a      	uxth	r2, r3
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
                      SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 800109e:	4313      	orrs	r3, r2
 80010a0:	b299      	uxth	r1, r3
 80010a2:	230e      	movs	r3, #14
 80010a4:	18fb      	adds	r3, r7, r3
 80010a6:	220e      	movs	r2, #14
 80010a8:	18ba      	adds	r2, r7, r2
 80010aa:	8812      	ldrh	r2, [r2, #0]
 80010ac:	430a      	orrs	r2, r1
 80010ae:	801a      	strh	r2, [r3, #0]
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
                      SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	220e      	movs	r2, #14
 80010b4:	18ba      	adds	r2, r7, r2
 80010b6:	8812      	ldrh	r2, [r2, #0]
 80010b8:	801a      	strh	r2, [r3, #0]
  /*-------------------------Data Size Configuration -----------------------*/
  /* Get the SPIx CR2 value */
  tmpreg = SPIx->CR2;
 80010ba:	230e      	movs	r3, #14
 80010bc:	18fb      	adds	r3, r7, r3
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	8892      	ldrh	r2, [r2, #4]
 80010c2:	801a      	strh	r2, [r3, #0]
  /* Clear DS[3:0] bits */
  tmpreg &=(uint16_t)~SPI_CR2_DS;
 80010c4:	230e      	movs	r3, #14
 80010c6:	18fb      	adds	r3, r7, r3
 80010c8:	220e      	movs	r2, #14
 80010ca:	18ba      	adds	r2, r7, r2
 80010cc:	8812      	ldrh	r2, [r2, #0]
 80010ce:	491e      	ldr	r1, [pc, #120]	; (8001148 <SPI_Init+0x100>)
 80010d0:	400a      	ands	r2, r1
 80010d2:	801a      	strh	r2, [r3, #0]
  /* Configure SPIx: Data Size */
  tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	8899      	ldrh	r1, [r3, #4]
 80010d8:	230e      	movs	r3, #14
 80010da:	18fb      	adds	r3, r7, r3
 80010dc:	220e      	movs	r2, #14
 80010de:	18ba      	adds	r2, r7, r2
 80010e0:	8812      	ldrh	r2, [r2, #0]
 80010e2:	430a      	orrs	r2, r1
 80010e4:	801a      	strh	r2, [r3, #0]
  /* Write to SPIx CR2 */
  SPIx->CR2 = tmpreg;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	220e      	movs	r2, #14
 80010ea:	18ba      	adds	r2, r7, r2
 80010ec:	8812      	ldrh	r2, [r2, #0]
 80010ee:	809a      	strh	r2, [r3, #4]
  
  /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	8a1a      	ldrh	r2, [r3, #16]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	821a      	strh	r2, [r3, #16]
  
  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 80010f8:	230e      	movs	r3, #14
 80010fa:	18fb      	adds	r3, r7, r3
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	8812      	ldrh	r2, [r2, #0]
 8001100:	801a      	strh	r2, [r3, #0]
  /* Clear MSTR bit */
  tmpreg &= CR1_CLEAR_MASK2;
 8001102:	230e      	movs	r3, #14
 8001104:	18fb      	adds	r3, r7, r3
 8001106:	220e      	movs	r2, #14
 8001108:	18ba      	adds	r2, r7, r2
 800110a:	8812      	ldrh	r2, [r2, #0]
 800110c:	2104      	movs	r1, #4
 800110e:	438a      	bics	r2, r1
 8001110:	801a      	strh	r2, [r3, #0]
  /* Configure SPIx: master/slave mode */  
  /* Set MSTR bit according to SPI_Mode */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Mode);  
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	8859      	ldrh	r1, [r3, #2]
 8001116:	230e      	movs	r3, #14
 8001118:	18fb      	adds	r3, r7, r3
 800111a:	220e      	movs	r2, #14
 800111c:	18ba      	adds	r2, r7, r2
 800111e:	8812      	ldrh	r2, [r2, #0]
 8001120:	430a      	orrs	r2, r1
 8001122:	801a      	strh	r2, [r3, #0]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;  
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	220e      	movs	r2, #14
 8001128:	18ba      	adds	r2, r7, r2
 800112a:	8812      	ldrh	r2, [r2, #0]
 800112c:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	8b9b      	ldrh	r3, [r3, #28]
 8001132:	b29b      	uxth	r3, r3
 8001134:	4a05      	ldr	r2, [pc, #20]	; (800114c <SPI_Init+0x104>)
 8001136:	4013      	ands	r3, r2
 8001138:	b29a      	uxth	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	839a      	strh	r2, [r3, #28]
}
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	46bd      	mov	sp, r7
 8001142:	b004      	add	sp, #16
 8001144:	bd80      	pop	{r7, pc}
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	fffff0ff 	.word	0xfffff0ff
 800114c:	fffff7ff 	.word	0xfffff7ff

08001150 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	000a      	movs	r2, r1
 800115a:	1cfb      	adds	r3, r7, #3
 800115c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800115e:	1cfb      	adds	r3, r7, #3
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d008      	beq.n	8001178 <SPI_Cmd+0x28>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	881b      	ldrh	r3, [r3, #0]
 800116a:	b29b      	uxth	r3, r3
 800116c:	2240      	movs	r2, #64	; 0x40
 800116e:	4313      	orrs	r3, r2
 8001170:	b29a      	uxth	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 8001176:	e007      	b.n	8001188 <SPI_Cmd+0x38>
    SPIx->CR1 |= SPI_CR1_SPE;
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	b29b      	uxth	r3, r3
 800117e:	2240      	movs	r2, #64	; 0x40
 8001180:	4393      	bics	r3, r2
 8001182:	b29a      	uxth	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	801a      	strh	r2, [r3, #0]
  }
}
 8001188:	46c0      	nop			; (mov r8, r8)
 800118a:	46bd      	mov	sp, r7
 800118c:	b002      	add	sp, #8
 800118e:	bd80      	pop	{r7, pc}

08001190 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	0008      	movs	r0, r1
 800119a:	0011      	movs	r1, r2
 800119c:	1cbb      	adds	r3, r7, #2
 800119e:	1c02      	adds	r2, r0, #0
 80011a0:	801a      	strh	r2, [r3, #0]
 80011a2:	1c7b      	adds	r3, r7, #1
 80011a4:	1c0a      	adds	r2, r1, #0
 80011a6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMA_REQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 80011a8:	1c7b      	adds	r3, r7, #1
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d009      	beq.n	80011c4 <SPI_I2S_DMACmd+0x34>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	889b      	ldrh	r3, [r3, #4]
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	1cbb      	adds	r3, r7, #2
 80011b8:	881b      	ldrh	r3, [r3, #0]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	b29a      	uxth	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
  }
}
 80011c2:	e00a      	b.n	80011da <SPI_I2S_DMACmd+0x4a>
    SPIx->CR2 |= SPI_I2S_DMAReq;
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	889b      	ldrh	r3, [r3, #4]
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	1cba      	adds	r2, r7, #2
 80011cc:	8812      	ldrh	r2, [r2, #0]
 80011ce:	43d2      	mvns	r2, r2
 80011d0:	b292      	uxth	r2, r2
 80011d2:	4013      	ands	r3, r2
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	809a      	strh	r2, [r3, #4]
  }
}
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	46bd      	mov	sp, r7
 80011de:	b002      	add	sp, #8
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	46c0      	nop			; (mov r8, r8)

080011e4 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	000a      	movs	r2, r1
 80011ee:	1cfb      	adds	r3, r7, #3
 80011f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80011f2:	1cfb      	adds	r3, r7, #3
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d006      	beq.n	8001208 <RCC_AHBPeriphClockCmd+0x24>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <RCC_AHBPeriphClockCmd+0x3c>)
 80011fc:	4a08      	ldr	r2, [pc, #32]	; (8001220 <RCC_AHBPeriphClockCmd+0x3c>)
 80011fe:	6951      	ldr	r1, [r2, #20]
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	430a      	orrs	r2, r1
 8001204:	615a      	str	r2, [r3, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8001206:	e006      	b.n	8001216 <RCC_AHBPeriphClockCmd+0x32>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <RCC_AHBPeriphClockCmd+0x3c>)
 800120a:	4a05      	ldr	r2, [pc, #20]	; (8001220 <RCC_AHBPeriphClockCmd+0x3c>)
 800120c:	6952      	ldr	r2, [r2, #20]
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	43c9      	mvns	r1, r1
 8001212:	400a      	ands	r2, r1
 8001214:	615a      	str	r2, [r3, #20]
  }
}
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	46bd      	mov	sp, r7
 800121a:	b002      	add	sp, #8
 800121c:	bd80      	pop	{r7, pc}
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	40021000 	.word	0x40021000

08001224 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	000a      	movs	r2, r1
 800122e:	1cfb      	adds	r3, r7, #3
 8001230:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001232:	1cfb      	adds	r3, r7, #3
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d006      	beq.n	8001248 <RCC_APB2PeriphClockCmd+0x24>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <RCC_APB2PeriphClockCmd+0x3c>)
 800123c:	4a08      	ldr	r2, [pc, #32]	; (8001260 <RCC_APB2PeriphClockCmd+0x3c>)
 800123e:	6991      	ldr	r1, [r2, #24]
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	430a      	orrs	r2, r1
 8001244:	619a      	str	r2, [r3, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001246:	e006      	b.n	8001256 <RCC_APB2PeriphClockCmd+0x32>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001248:	4b05      	ldr	r3, [pc, #20]	; (8001260 <RCC_APB2PeriphClockCmd+0x3c>)
 800124a:	4a05      	ldr	r2, [pc, #20]	; (8001260 <RCC_APB2PeriphClockCmd+0x3c>)
 800124c:	6992      	ldr	r2, [r2, #24]
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	43c9      	mvns	r1, r1
 8001252:	400a      	ands	r2, r1
 8001254:	619a      	str	r2, [r3, #24]
  }
}
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	46bd      	mov	sp, r7
 800125a:	b002      	add	sp, #8
 800125c:	bd80      	pop	{r7, pc}
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	40021000 	.word	0x40021000

08001264 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	000a      	movs	r2, r1
 800126e:	1cfb      	adds	r3, r7, #3
 8001270:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001272:	1cfb      	adds	r3, r7, #3
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d006      	beq.n	8001288 <RCC_APB1PeriphClockCmd+0x24>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <RCC_APB1PeriphClockCmd+0x3c>)
 800127c:	4a08      	ldr	r2, [pc, #32]	; (80012a0 <RCC_APB1PeriphClockCmd+0x3c>)
 800127e:	69d1      	ldr	r1, [r2, #28]
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	430a      	orrs	r2, r1
 8001284:	61da      	str	r2, [r3, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001286:	e006      	b.n	8001296 <RCC_APB1PeriphClockCmd+0x32>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <RCC_APB1PeriphClockCmd+0x3c>)
 800128a:	4a05      	ldr	r2, [pc, #20]	; (80012a0 <RCC_APB1PeriphClockCmd+0x3c>)
 800128c:	69d2      	ldr	r2, [r2, #28]
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	43c9      	mvns	r1, r1
 8001292:	400a      	ands	r2, r1
 8001294:	61da      	str	r2, [r3, #28]
  }
}
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	46bd      	mov	sp, r7
 800129a:	b002      	add	sp, #8
 800129c:	bd80      	pop	{r7, pc}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	40021000 	.word	0x40021000

080012a4 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *         contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_I2C_OWN_ADDRESS1(I2C_InitStruct->I2C_OwnAddress1));
  assert_param(IS_I2C_ACK(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

  /* Disable I2Cx Peripheral */
  I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2201      	movs	r2, #1
 80012b8:	4393      	bics	r3, r2
 80012ba:	001a      	movs	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx FILTERS Configuration ------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	60fb      	str	r3, [r7, #12]
  /* Clear I2Cx CR1 register */
  tmpreg &= CR1_CLEAR_MASK;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	4a27      	ldr	r2, [pc, #156]	; (8001368 <I2C_Init+0xc4>)
 80012ca:	4013      	ands	r3, r2
 80012cc:	60fb      	str	r3, [r7, #12]
  /* Configure I2Cx: analog and digital filter */
  /* Set ANFOFF bit according to I2C_AnalogFilter value */
  /* Set DFN bits according to I2C_DigitalFilter value */
  tmpreg |= (uint32_t)I2C_InitStruct->I2C_AnalogFilter |(I2C_InitStruct->I2C_DigitalFilter << 8);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685a      	ldr	r2, [r3, #4]
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	021b      	lsls	r3, r3, #8
 80012d8:	4313      	orrs	r3, r2
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	4313      	orrs	r3, r2
 80012de:	60fb      	str	r3, [r7, #12]

  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMING Configuration -------------------*/
  /* Configure I2Cx: Timing */
  /* Set TIMINGR bits according to I2C_Timing */
  /* Write to I2Cx TIMING */
  I2Cx->TIMINGR = I2C_InitStruct->I2C_Timing & TIMING_CLEAR_MASK;
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a20      	ldr	r2, [pc, #128]	; (800136c <I2C_Init+0xc8>)
 80012ec:	401a      	ands	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	611a      	str	r2, [r3, #16]

  /* Enable I2Cx Peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2201      	movs	r2, #1
 80012f8:	431a      	orrs	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Clear tmpreg local variable */
  tmpreg = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
  /* Clear OAR1 register */
  I2Cx->OAR1 = (uint32_t)tmpreg;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	68fa      	ldr	r2, [r7, #12]
 8001306:	609a      	str	r2, [r3, #8]
  /* Clear OAR2 register */
  I2Cx->OAR2 = (uint32_t)tmpreg;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	60da      	str	r2, [r3, #12]
  /* Configure I2Cx: Own Address1 and acknowledged address */
  /* Set OA1MODE bit according to I2C_AcknowledgedAddress value */
  /* Set OA1 bits according to I2C_OwnAddress1 value */
  tmpreg = (uint32_t)((uint32_t)I2C_InitStruct->I2C_AcknowledgedAddress | \
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	699a      	ldr	r2, [r3, #24]
                      (uint32_t)I2C_InitStruct->I2C_OwnAddress1);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	691b      	ldr	r3, [r3, #16]
  /* Clear OAR2 register */
  I2Cx->OAR2 = (uint32_t)tmpreg;
  /* Configure I2Cx: Own Address1 and acknowledged address */
  /* Set OA1MODE bit according to I2C_AcknowledgedAddress value */
  /* Set OA1 bits according to I2C_OwnAddress1 value */
  tmpreg = (uint32_t)((uint32_t)I2C_InitStruct->I2C_AcknowledgedAddress | \
 8001316:	4313      	orrs	r3, r2
 8001318:	60fb      	str	r3, [r7, #12]
                      (uint32_t)I2C_InitStruct->I2C_OwnAddress1);
  /* Write to I2Cx OAR1 */
  I2Cx->OAR1 = tmpreg;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	609a      	str	r2, [r3, #8]
  /* Enable Own Address1 acknowledgement */
  I2Cx->OAR1 |= I2C_OAR1_OA1EN;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	2280      	movs	r2, #128	; 0x80
 8001326:	0212      	lsls	r2, r2, #8
 8001328:	431a      	orrs	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx MODE Configuration ---------------------*/
  /* Configure I2Cx: mode */
  /* Set SMBDEN and SMBHEN bits according to I2C_Mode value */
  tmpreg = I2C_InitStruct->I2C_Mode;
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	60fb      	str	r3, [r7, #12]
  /* Write to I2Cx CR1 */
  I2Cx->CR1 |= tmpreg;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	431a      	orrs	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx ACK Configuration ----------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	60fb      	str	r3, [r7, #12]
  /* Clear I2Cx CR2 register */
  tmpreg &= CR2_CLEAR_MASK;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	4a09      	ldr	r2, [pc, #36]	; (8001370 <I2C_Init+0xcc>)
 800134a:	4013      	ands	r3, r2
 800134c:	60fb      	str	r3, [r7, #12]
  /* Configure I2Cx: acknowledgement */
  /* Set NACK bit according to I2C_Ack value */
  tmpreg |= I2C_InitStruct->I2C_Ack;
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	4313      	orrs	r3, r2
 8001356:	60fb      	str	r3, [r7, #12]
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	68fa      	ldr	r2, [r7, #12]
 800135c:	605a      	str	r2, [r3, #4]
}
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	46bd      	mov	sp, r7
 8001362:	b004      	add	sp, #16
 8001364:	bd80      	pop	{r7, pc}
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	00cfe0ff 	.word	0x00cfe0ff
 800136c:	f0ffffff 	.word	0xf0ffffff
 8001370:	07ff7fff 	.word	0x07ff7fff

08001374 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	000a      	movs	r2, r1
 800137e:	1cfb      	adds	r3, r7, #3
 8001380:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001382:	1cfb      	adds	r3, r7, #3
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d006      	beq.n	8001398 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2201      	movs	r2, #1
 8001390:	431a      	orrs	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
  }
}
 8001396:	e006      	b.n	80013a6 <I2C_Cmd+0x32>
    I2Cx->CR1 |= I2C_CR1_PE;
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2201      	movs	r2, #1
 800139e:	4393      	bics	r3, r2
 80013a0:	001a      	movs	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	601a      	str	r2, [r3, #0]
  }
}
 80013a6:	46c0      	nop			; (mov r8, r8)
 80013a8:	46bd      	mov	sp, r7
 80013aa:	b002      	add	sp, #8
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	46c0      	nop			; (mov r8, r8)

080013b0 <I2C_TransferHandling>:
  *            @arg I2C_Generate_Start_Read: Generate Restart for read request.
  *            @arg I2C_Generate_Start_Write: Generate Restart for write request.
  * @retval None
  */
void I2C_TransferHandling(I2C_TypeDef* I2Cx, uint16_t Address, uint8_t Number_Bytes, uint32_t ReloadEndMode, uint32_t StartStopMode)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	0008      	movs	r0, r1
 80013ba:	0011      	movs	r1, r2
 80013bc:	607b      	str	r3, [r7, #4]
 80013be:	230a      	movs	r3, #10
 80013c0:	18fb      	adds	r3, r7, r3
 80013c2:	1c02      	adds	r2, r0, #0
 80013c4:	801a      	strh	r2, [r3, #0]
 80013c6:	2309      	movs	r3, #9
 80013c8:	18fb      	adds	r3, r7, r3
 80013ca:	1c0a      	adds	r2, r1, #0
 80013cc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_SLAVE_ADDRESS(Address));  
  assert_param(IS_RELOAD_END_MODE(ReloadEndMode));
  assert_param(IS_START_STOP_MODE(StartStopMode));
    
  /* Get the CR2 register value */
  tmpreg = I2Cx->CR2;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	617b      	str	r3, [r7, #20]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	4a0f      	ldr	r2, [pc, #60]	; (8001418 <I2C_TransferHandling+0x68>)
 80013dc:	4013      	ands	r3, r2
 80013de:	617b      	str	r3, [r7, #20]
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_CR2_SADD) | (((uint32_t)Number_Bytes << 16 ) & I2C_CR2_NBYTES) | \
 80013e0:	230a      	movs	r3, #10
 80013e2:	18fb      	adds	r3, r7, r3
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	059b      	lsls	r3, r3, #22
 80013e8:	0d9a      	lsrs	r2, r3, #22
 80013ea:	2309      	movs	r3, #9
 80013ec:	18fb      	adds	r3, r7, r3
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	0419      	lsls	r1, r3, #16
 80013f2:	23ff      	movs	r3, #255	; 0xff
 80013f4:	041b      	lsls	r3, r3, #16
 80013f6:	400b      	ands	r3, r1
 80013f8:	431a      	orrs	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	431a      	orrs	r2, r3
 80013fe:	6a3b      	ldr	r3, [r7, #32]
 8001400:	4313      	orrs	r3, r2
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	4313      	orrs	r3, r2
 8001406:	617b      	str	r3, [r7, #20]
            (uint32_t)ReloadEndMode | (uint32_t)StartStopMode);
  
  /* update CR2 register */
  I2Cx->CR2 = tmpreg;  
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	605a      	str	r2, [r3, #4]
}
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	46bd      	mov	sp, r7
 8001412:	b006      	add	sp, #24
 8001414:	bd80      	pop	{r7, pc}
 8001416:	46c0      	nop			; (mov r8, r8)
 8001418:	fc009800 	.word	0xfc009800

0800141c <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	000a      	movs	r2, r1
 8001426:	1cfb      	adds	r3, r7, #3
 8001428:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Write in the DR register the data to be sent */
  I2Cx->TXDR = (uint8_t)Data;
 800142a:	1cfb      	adds	r3, r7, #3
 800142c:	781a      	ldrb	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001432:	46c0      	nop			; (mov r8, r8)
 8001434:	46bd      	mov	sp, r7
 8001436:	b002      	add	sp, #8
 8001438:	bd80      	pop	{r7, pc}
 800143a:	46c0      	nop			; (mov r8, r8)

0800143c <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->RXDR;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001448:	b2db      	uxtb	r3, r3
}  
 800144a:	0018      	movs	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	b002      	add	sp, #8
 8001450:	bd80      	pop	{r7, pc}
 8001452:	46c0      	nop			; (mov r8, r8)

08001454 <I2C_GetFlagStatus>:
  *            @arg I2C_FLAG_ALERT: SMBus Alert
  *            @arg I2C_FLAG_BUSY: Bus busy
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
  FlagStatus bitstatus = RESET;
 8001462:	230f      	movs	r3, #15
 8001464:	18fb      	adds	r3, r7, r3
 8001466:	2200      	movs	r2, #0
 8001468:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));
  
  /* Get the ISR register value */
  tmpreg = I2Cx->ISR;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	60bb      	str	r3, [r7, #8]
  
  /* Get flag status */
  tmpreg &= I2C_FLAG;
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	4013      	ands	r3, r2
 8001476:	60bb      	str	r3, [r7, #8]
  
  if(tmpreg != 0)
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d004      	beq.n	8001488 <I2C_GetFlagStatus+0x34>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 800147e:	230f      	movs	r3, #15
 8001480:	18fb      	adds	r3, r7, r3
 8001482:	2201      	movs	r2, #1
 8001484:	701a      	strb	r2, [r3, #0]
 8001486:	e003      	b.n	8001490 <I2C_GetFlagStatus+0x3c>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8001488:	230f      	movs	r3, #15
 800148a:	18fb      	adds	r3, r7, r3
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001490:	230f      	movs	r3, #15
 8001492:	18fb      	adds	r3, r7, r3
 8001494:	781b      	ldrb	r3, [r3, #0]
} 
 8001496:	0018      	movs	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	b004      	add	sp, #16
 800149c:	bd80      	pop	{r7, pc}
 800149e:	46c0      	nop			; (mov r8, r8)

080014a0 <I2C_ClearFlag>:
  *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow detection flag
  *            @arg I2C_FLAG_ALERT: SMBus Alert
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{ 
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));

  /* Clear the selected flag */
  I2Cx->ICR = I2C_FLAG;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	61da      	str	r2, [r3, #28]
  }
 80014b0:	46c0      	nop			; (mov r8, r8)
 80014b2:	46bd      	mov	sp, r7
 80014b4:	b002      	add	sp, #8
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80014ce:	2300      	movs	r3, #0
 80014d0:	617b      	str	r3, [r7, #20]
 80014d2:	e081      	b.n	80015d8 <GPIO_Init+0x120>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80014d4:	2201      	movs	r2, #1
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	409a      	lsls	r2, r3
 80014da:	0013      	movs	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	4013      	ands	r3, r2
 80014e6:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80014e8:	68fa      	ldr	r2, [r7, #12]
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d170      	bne.n	80015d2 <GPIO_Init+0x11a>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	791b      	ldrb	r3, [r3, #4]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d003      	beq.n	8001500 <GPIO_Init+0x48>
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	791b      	ldrb	r3, [r3, #4]
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d138      	bne.n	8001572 <GPIO_Init+0xba>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	0052      	lsls	r2, r2, #1
 8001508:	2103      	movs	r1, #3
 800150a:	4091      	lsls	r1, r2
 800150c:	000a      	movs	r2, r1
 800150e:	43d2      	mvns	r2, r2
 8001510:	401a      	ands	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689a      	ldr	r2, [r3, #8]
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	795b      	ldrb	r3, [r3, #5]
 800151e:	0019      	movs	r1, r3
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	4099      	lsls	r1, r3
 8001526:	000b      	movs	r3, r1
 8001528:	431a      	orrs	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	889b      	ldrh	r3, [r3, #4]
 8001532:	b29b      	uxth	r3, r3
 8001534:	697a      	ldr	r2, [r7, #20]
 8001536:	0412      	lsls	r2, r2, #16
 8001538:	0c12      	lsrs	r2, r2, #16
 800153a:	2101      	movs	r1, #1
 800153c:	4091      	lsls	r1, r2
 800153e:	000a      	movs	r2, r1
 8001540:	b292      	uxth	r2, r2
 8001542:	43d2      	mvns	r2, r2
 8001544:	b292      	uxth	r2, r2
 8001546:	4013      	ands	r3, r2
 8001548:	b29a      	uxth	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	889b      	ldrh	r3, [r3, #4]
 8001552:	b29b      	uxth	r3, r3
 8001554:	b21a      	sxth	r2, r3
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	799b      	ldrb	r3, [r3, #6]
 800155a:	0019      	movs	r1, r3
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	041b      	lsls	r3, r3, #16
 8001560:	0c1b      	lsrs	r3, r3, #16
 8001562:	4099      	lsls	r1, r3
 8001564:	000b      	movs	r3, r1
 8001566:	b21b      	sxth	r3, r3
 8001568:	4313      	orrs	r3, r2
 800156a:	b21b      	sxth	r3, r3
 800156c:	b29a      	uxth	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	809a      	strh	r2, [r3, #4]
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	697a      	ldr	r2, [r7, #20]
 8001578:	0052      	lsls	r2, r2, #1
 800157a:	2103      	movs	r1, #3
 800157c:	4091      	lsls	r1, r2
 800157e:	000a      	movs	r2, r1
 8001580:	43d2      	mvns	r2, r2
 8001582:	401a      	ands	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	791b      	ldrb	r3, [r3, #4]
 8001590:	0019      	movs	r1, r3
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	4099      	lsls	r1, r3
 8001598:	000b      	movs	r3, r1
 800159a:	431a      	orrs	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	697a      	ldr	r2, [r7, #20]
 80015a6:	0412      	lsls	r2, r2, #16
 80015a8:	0c12      	lsrs	r2, r2, #16
 80015aa:	0052      	lsls	r2, r2, #1
 80015ac:	2103      	movs	r1, #3
 80015ae:	4091      	lsls	r1, r2
 80015b0:	000a      	movs	r2, r1
 80015b2:	43d2      	mvns	r2, r2
 80015b4:	401a      	ands	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68da      	ldr	r2, [r3, #12]
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	79db      	ldrb	r3, [r3, #7]
 80015c2:	0019      	movs	r1, r3
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	4099      	lsls	r1, r3
 80015ca:	000b      	movs	r3, r1
 80015cc:	431a      	orrs	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	3301      	adds	r3, #1
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	2b0f      	cmp	r3, #15
 80015dc:	d800      	bhi.n	80015e0 <GPIO_Init+0x128>
 80015de:	e779      	b.n	80014d4 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80015e0:	46c0      	nop			; (mov r8, r8)
 80015e2:	46bd      	mov	sp, r7
 80015e4:	b006      	add	sp, #24
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <GPIO_PinAFConfig>:
  *         for the detailed mapping of the system and peripherals'alternate 
  *         function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	0008      	movs	r0, r1
 80015f2:	0011      	movs	r1, r2
 80015f4:	1cbb      	adds	r3, r7, #2
 80015f6:	1c02      	adds	r2, r0, #0
 80015f8:	801a      	strh	r2, [r3, #0]
 80015fa:	1c7b      	adds	r3, r7, #1
 80015fc:	1c0a      	adds	r2, r1, #0
 80015fe:	701a      	strb	r2, [r3, #0]
  uint32_t temp = 0x00;
 8001600:	2300      	movs	r3, #0
 8001602:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8001604:	2300      	movs	r3, #0
 8001606:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8001608:	1c7b      	adds	r3, r7, #1
 800160a:	781a      	ldrb	r2, [r3, #0]
 800160c:	1cbb      	adds	r3, r7, #2
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	2107      	movs	r1, #7
 8001612:	400b      	ands	r3, r1
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	409a      	lsls	r2, r3
 8001618:	0013      	movs	r3, r2
 800161a:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 800161c:	1cbb      	adds	r3, r7, #2
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	08db      	lsrs	r3, r3, #3
 8001622:	b29b      	uxth	r3, r3
 8001624:	0018      	movs	r0, r3
 8001626:	1cbb      	adds	r3, r7, #2
 8001628:	881b      	ldrh	r3, [r3, #0]
 800162a:	08db      	lsrs	r3, r3, #3
 800162c:	b29b      	uxth	r3, r3
 800162e:	001a      	movs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3208      	adds	r2, #8
 8001634:	0092      	lsls	r2, r2, #2
 8001636:	58d3      	ldr	r3, [r2, r3]
 8001638:	1cba      	adds	r2, r7, #2
 800163a:	8812      	ldrh	r2, [r2, #0]
 800163c:	2107      	movs	r1, #7
 800163e:	400a      	ands	r2, r1
 8001640:	0092      	lsls	r2, r2, #2
 8001642:	210f      	movs	r1, #15
 8001644:	4091      	lsls	r1, r2
 8001646:	000a      	movs	r2, r1
 8001648:	43d2      	mvns	r2, r2
 800164a:	401a      	ands	r2, r3
 800164c:	0011      	movs	r1, r2
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	0002      	movs	r2, r0
 8001652:	3208      	adds	r2, #8
 8001654:	0092      	lsls	r2, r2, #2
 8001656:	50d1      	str	r1, [r2, r3]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8001658:	1cbb      	adds	r3, r7, #2
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	08db      	lsrs	r3, r3, #3
 800165e:	b29b      	uxth	r3, r3
 8001660:	001a      	movs	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	3208      	adds	r2, #8
 8001666:	0092      	lsls	r2, r2, #2
 8001668:	58d2      	ldr	r2, [r2, r3]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4313      	orrs	r3, r2
 800166e:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001670:	1cbb      	adds	r3, r7, #2
 8001672:	881b      	ldrh	r3, [r3, #0]
 8001674:	08db      	lsrs	r3, r3, #3
 8001676:	b29b      	uxth	r3, r3
 8001678:	001a      	movs	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	3208      	adds	r2, #8
 800167e:	0092      	lsls	r2, r2, #2
 8001680:	68b9      	ldr	r1, [r7, #8]
 8001682:	50d1      	str	r1, [r2, r3]
}
 8001684:	46c0      	nop			; (mov r8, r8)
 8001686:	46bd      	mov	sp, r7
 8001688:	b004      	add	sp, #16
 800168a:	bd80      	pop	{r7, pc}

0800168c <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration ----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	60fb      	str	r3, [r7, #12]

  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_MASK;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	4a18      	ldr	r2, [pc, #96]	; (8001704 <DMA_Init+0x78>)
 80016a4:	4013      	ands	r3, r2
 80016a6:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	691b      	ldr	r3, [r3, #16]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80016b6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	699b      	ldr	r3, [r3, #24]
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80016c2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	69db      	ldr	r3, [r3, #28]
 80016c8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80016ce:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d4:	4313      	orrs	r3, r2
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	4313      	orrs	r3, r2
 80016da:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	68da      	ldr	r2, [r3, #12]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ---------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ---------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	60da      	str	r2, [r3, #12]
}
 80016fa:	46c0      	nop			; (mov r8, r8)
 80016fc:	46bd      	mov	sp, r7
 80016fe:	b004      	add	sp, #16
 8001700:	bd80      	pop	{r7, pc}
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	ffff800f 	.word	0xffff800f

08001708 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	000a      	movs	r2, r1
 8001712:	1cfb      	adds	r3, r7, #3
 8001714:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001716:	1cfb      	adds	r3, r7, #3
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d006      	beq.n	800172c <DMA_Cmd+0x24>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR_EN;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2201      	movs	r2, #1
 8001724:	431a      	orrs	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
  }
}
 800172a:	e005      	b.n	8001738 <DMA_Cmd+0x30>
    DMAy_Channelx->CCR |= DMA_CCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a03      	ldr	r2, [pc, #12]	; (8001740 <DMA_Cmd+0x38>)
 8001732:	401a      	ands	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	601a      	str	r2, [r3, #0]
  }
}
 8001738:	46c0      	nop			; (mov r8, r8)
 800173a:	46bd      	mov	sp, r7
 800173c:	b002      	add	sp, #8
 800173e:	bd80      	pop	{r7, pc}
 8001740:	0000fffe 	.word	0x0000fffe

08001744 <DMA_SetCurrDataCounter>:
  *         transfer.
  * @note   This function can only be used when the DMAy_Channelx is disabled.
  * @retval None.
  */
void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	000a      	movs	r2, r1
 800174e:	1cbb      	adds	r3, r7, #2
 8001750:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));

/*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DataNumber;
 8001752:	1cbb      	adds	r3, r7, #2
 8001754:	881a      	ldrh	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	605a      	str	r2, [r3, #4]
}
 800175a:	46c0      	nop			; (mov r8, r8)
 800175c:	46bd      	mov	sp, r7
 800175e:	b002      	add	sp, #8
 8001760:	bd80      	pop	{r7, pc}
 8001762:	46c0      	nop			; (mov r8, r8)

08001764 <__libc_init_array>:
 8001764:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <__libc_init_array+0x3c>)
 8001766:	b570      	push	{r4, r5, r6, lr}
 8001768:	2500      	movs	r5, #0
 800176a:	001e      	movs	r6, r3
 800176c:	4c0d      	ldr	r4, [pc, #52]	; (80017a4 <__libc_init_array+0x40>)
 800176e:	1ae4      	subs	r4, r4, r3
 8001770:	10a4      	asrs	r4, r4, #2
 8001772:	42a5      	cmp	r5, r4
 8001774:	d004      	beq.n	8001780 <__libc_init_array+0x1c>
 8001776:	00ab      	lsls	r3, r5, #2
 8001778:	58f3      	ldr	r3, [r6, r3]
 800177a:	4798      	blx	r3
 800177c:	3501      	adds	r5, #1
 800177e:	e7f8      	b.n	8001772 <__libc_init_array+0xe>
 8001780:	f000 f816 	bl	80017b0 <_init>
 8001784:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <__libc_init_array+0x44>)
 8001786:	2500      	movs	r5, #0
 8001788:	001e      	movs	r6, r3
 800178a:	4c08      	ldr	r4, [pc, #32]	; (80017ac <__libc_init_array+0x48>)
 800178c:	1ae4      	subs	r4, r4, r3
 800178e:	10a4      	asrs	r4, r4, #2
 8001790:	42a5      	cmp	r5, r4
 8001792:	d004      	beq.n	800179e <__libc_init_array+0x3a>
 8001794:	00ab      	lsls	r3, r5, #2
 8001796:	58f3      	ldr	r3, [r6, r3]
 8001798:	4798      	blx	r3
 800179a:	3501      	adds	r5, #1
 800179c:	e7f8      	b.n	8001790 <__libc_init_array+0x2c>
 800179e:	bd70      	pop	{r4, r5, r6, pc}
 80017a0:	080017c8 	.word	0x080017c8
 80017a4:	080017c8 	.word	0x080017c8
 80017a8:	080017c8 	.word	0x080017c8
 80017ac:	080017cc 	.word	0x080017cc

080017b0 <_init>:
 80017b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017b2:	46c0      	nop			; (mov r8, r8)
 80017b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017b6:	bc08      	pop	{r3}
 80017b8:	469e      	mov	lr, r3
 80017ba:	4770      	bx	lr

080017bc <_fini>:
 80017bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017c2:	bc08      	pop	{r3}
 80017c4:	469e      	mov	lr, r3
 80017c6:	4770      	bx	lr
