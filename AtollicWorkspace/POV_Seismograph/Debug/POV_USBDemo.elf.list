
POV_USBDemo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c70  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08003d30  08003d30  00013d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003e80  08003e80  00013e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003e84  08003e84  00013e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000bc  20000000  08003e88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000bf8  200000bc  08003f44  000200bc  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  20000cb4  08003f44  00020cb4  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
  9 .debug_info   00007098  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001b19  00000000  00000000  0002717c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000930  00000000  00000000  00028c98  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008c0  00000000  00000000  000295c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000035b4  00000000  00000000  00029e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002188  00000000  00000000  0002d43c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  0002f5c4  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001da4  00000000  00000000  0002f644  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  000313e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000bc 	.word	0x200000bc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003d18 	.word	0x08003d18

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000c0 	.word	0x200000c0
 8000104:	08003d18 	.word	0x08003d18

08000108 <__aeabi_uidiv>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__aeabi_uidiv+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__aeabi_uidiv+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__aeabi_uidiv+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__aeabi_uidiv+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__aeabi_uidiv+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__aeabi_uidiv+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__aeabi_uidiv+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__aeabi_uidiv+0x6c>
 8000140:	e000      	b.n	8000144 <__aeabi_uidiv+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__aeabi_uidiv+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__aeabi_uidiv+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__aeabi_uidiv+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__aeabi_uidiv+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__aeabi_uidiv+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__aeabi_uidiv+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__aeabi_uidiv+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__aeabi_uidiv+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__aeabi_uidiv+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__aeabi_uidiv+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__aeabi_uidiv+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__aeabi_uidiv+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__aeabi_uidiv+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__aeabi_uidiv+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__aeabi_uidiv+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__aeabi_uidiv+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__aeabi_uidiv+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__aeabi_uidiv+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__aeabi_uidiv+0x100>
 8000218:	e776      	b.n	8000108 <__aeabi_uidiv>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <FifoIn>:
// Returns:
//     FIFO_FAIL       der Ringbuffer ist voll. Es kann kein weiteres Byte gespeichert werden
//     FIFO_SUCCESS    das Byte wurde gespeichert
//
uint8_t FifoIn(FifoBuffer *buf, uint8_t byte)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	000a      	movs	r2, r1
 800022a:	1cfb      	adds	r3, r7, #3
 800022c:	701a      	strb	r2, [r3, #0]
  uint32_t next = ((buf->write + 1) & FIFO_MASK);
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	2284      	movs	r2, #132	; 0x84
 8000232:	589b      	ldr	r3, [r3, r2]
 8000234:	3301      	adds	r3, #1
 8000236:	227f      	movs	r2, #127	; 0x7f
 8000238:	4013      	ands	r3, r2
 800023a:	60fb      	str	r3, [r7, #12]

  if (buf->read == next)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	2280      	movs	r2, #128	; 0x80
 8000240:	589a      	ldr	r2, [r3, r2]
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d101      	bne.n	800024c <FifoIn+0x2c>
    return FIFO_FAIL; // voll
 8000248:	2301      	movs	r3, #1
 800024a:	e00b      	b.n	8000264 <FifoIn+0x44>

  buf->data[buf->write] = byte;
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	2284      	movs	r2, #132	; 0x84
 8000250:	589b      	ldr	r3, [r3, r2]
 8000252:	687a      	ldr	r2, [r7, #4]
 8000254:	1cf9      	adds	r1, r7, #3
 8000256:	7809      	ldrb	r1, [r1, #0]
 8000258:	54d1      	strb	r1, [r2, r3]
  // buffer.data[buffer.write & BUFFER_MASK] = byte; // absolut Sicher
  buf->write = next;
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	2184      	movs	r1, #132	; 0x84
 800025e:	68fa      	ldr	r2, [r7, #12]
 8000260:	505a      	str	r2, [r3, r1]

  return FIFO_SUCCESS;
 8000262:	2300      	movs	r3, #0
}
 8000264:	0018      	movs	r0, r3
 8000266:	46bd      	mov	sp, r7
 8000268:	b004      	add	sp, #16
 800026a:	bd80      	pop	{r7, pc}

0800026c <FifoOut>:
// Returns:
//     FIFO_FAIL       der Ringbuffer ist leer. Es kann kein Byte geliefert werden.
//     FIFO_SUCCESS    1 Byte wurde geliefert
//
uint8_t FifoOut(FifoBuffer *buf, uint8_t *pByte)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	6039      	str	r1, [r7, #0]
  if (buf->read == buf->write)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	2280      	movs	r2, #128	; 0x80
 800027a:	589a      	ldr	r2, [r3, r2]
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2184      	movs	r1, #132	; 0x84
 8000280:	585b      	ldr	r3, [r3, r1]
 8000282:	429a      	cmp	r2, r3
 8000284:	d101      	bne.n	800028a <FifoOut+0x1e>
    return FIFO_FAIL;
 8000286:	2301      	movs	r3, #1
 8000288:	e010      	b.n	80002ac <FifoOut+0x40>

  *pByte = buf->data[buf->read];
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	2280      	movs	r2, #128	; 0x80
 800028e:	589b      	ldr	r3, [r3, r2]
 8000290:	687a      	ldr	r2, [r7, #4]
 8000292:	5cd2      	ldrb	r2, [r2, r3]
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	701a      	strb	r2, [r3, #0]

  buf->read = (buf->read+1) & FIFO_MASK;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2280      	movs	r2, #128	; 0x80
 800029c:	589b      	ldr	r3, [r3, r2]
 800029e:	3301      	adds	r3, #1
 80002a0:	227f      	movs	r2, #127	; 0x7f
 80002a2:	401a      	ands	r2, r3
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	2180      	movs	r1, #128	; 0x80
 80002a8:	505a      	str	r2, [r3, r1]

  return FIFO_SUCCESS;
 80002aa:	2300      	movs	r3, #0
}
 80002ac:	0018      	movs	r0, r3
 80002ae:	46bd      	mov	sp, r7
 80002b0:	b002      	add	sp, #8
 80002b2:	bd80      	pop	{r7, pc}

080002b4 <FifoCount>:

uint32_t FifoCount(FifoBuffer *buf)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
	//TODO: doesn't work across the border!!
	if(buf->write >= buf->read)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2284      	movs	r2, #132	; 0x84
 80002c0:	589a      	ldr	r2, [r3, r2]
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	2180      	movs	r1, #128	; 0x80
 80002c6:	585b      	ldr	r3, [r3, r1]
 80002c8:	429a      	cmp	r2, r3
 80002ca:	d307      	bcc.n	80002dc <FifoCount+0x28>
	{
		return buf->write - buf->read;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	2284      	movs	r2, #132	; 0x84
 80002d0:	589a      	ldr	r2, [r3, r2]
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	2180      	movs	r1, #128	; 0x80
 80002d6:	585b      	ldr	r3, [r3, r1]
 80002d8:	1ad3      	subs	r3, r2, r3
 80002da:	e007      	b.n	80002ec <FifoCount+0x38>
	}
	else
	{
		return FIFO_SIZE - buf->read + buf->write;
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	2284      	movs	r2, #132	; 0x84
 80002e0:	589a      	ldr	r2, [r3, r2]
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	2180      	movs	r1, #128	; 0x80
 80002e6:	585b      	ldr	r3, [r3, r1]
 80002e8:	1ad3      	subs	r3, r2, r3
 80002ea:	3380      	adds	r3, #128	; 0x80
	}
}
 80002ec:	0018      	movs	r0, r3
 80002ee:	46bd      	mov	sp, r7
 80002f0:	b002      	add	sp, #8
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <USBD_USR_Init>:
  * @brief  Device lib initialization
  * @param  None
  * @retval None
  */
void USBD_USR_Init(void)
{   
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
}
 80002f8:	46c0      	nop			; (mov r8, r8)
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	46c0      	nop			; (mov r8, r8)

08000300 <USBD_USR_DeviceReset>:
  * @brief  Reset Event
  * @param  speed : device speed
  * @retval None
  */
void USBD_USR_DeviceReset(uint8_t speed )
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	0002      	movs	r2, r0
 8000308:	1dfb      	adds	r3, r7, #7
 800030a:	701a      	strb	r2, [r3, #0]

}
 800030c:	46c0      	nop			; (mov r8, r8)
 800030e:	46bd      	mov	sp, r7
 8000310:	b002      	add	sp, #8
 8000312:	bd80      	pop	{r7, pc}

08000314 <USBD_USR_DeviceConfigured>:
  * @brief  Configuration Event
  * @param  None
  * @retval Status
*/
void USBD_USR_DeviceConfigured (void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0

}
 8000318:	46c0      	nop			; (mov r8, r8)
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	46c0      	nop			; (mov r8, r8)

08000320 <USBD_USR_DeviceSuspended>:
  * @brief  Device suspend Event
  * @param  None
  * @retval None
  */
void USBD_USR_DeviceSuspended(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
}
 8000324:	46c0      	nop			; (mov r8, r8)
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	46c0      	nop			; (mov r8, r8)

0800032c <USBD_USR_DeviceResumed>:
  * @brief  Device resume Event
  * @param  None
  * @retval None
  */
void USBD_USR_DeviceResumed(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
}
 8000330:	46c0      	nop			; (mov r8, r8)
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	46c0      	nop			; (mov r8, r8)

08000338 <Suspend>:
  * @brief  Sets suspend mode operating conditions
  * @param  None
  * @retval USB_SUCCESS
  */
void Suspend(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
  uint16_t wCNTR;

  /*Store CNTR value */
  wCNTR = _GetCNTR();   
 800033e:	4b10      	ldr	r3, [pc, #64]	; (8000380 <Suspend+0x48>)
 8000340:	681a      	ldr	r2, [r3, #0]
 8000342:	1dbb      	adds	r3, r7, #6
 8000344:	801a      	strh	r2, [r3, #0]
  /* Set FSUSP bit in USB_CNTR register*/
  wCNTR |= CNTR_FSUSP;
 8000346:	1dbb      	adds	r3, r7, #6
 8000348:	1dba      	adds	r2, r7, #6
 800034a:	8812      	ldrh	r2, [r2, #0]
 800034c:	2108      	movs	r1, #8
 800034e:	430a      	orrs	r2, r1
 8000350:	801a      	strh	r2, [r3, #0]
  _SetCNTR(wCNTR);
 8000352:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <Suspend+0x48>)
 8000354:	1dba      	adds	r2, r7, #6
 8000356:	8812      	ldrh	r2, [r2, #0]
 8000358:	601a      	str	r2, [r3, #0]
  
  /* force low-power mode in the macrocell */
  wCNTR = _GetCNTR();
 800035a:	4b09      	ldr	r3, [pc, #36]	; (8000380 <Suspend+0x48>)
 800035c:	681a      	ldr	r2, [r3, #0]
 800035e:	1dbb      	adds	r3, r7, #6
 8000360:	801a      	strh	r2, [r3, #0]
  wCNTR |= CNTR_LPMODE;
 8000362:	1dbb      	adds	r3, r7, #6
 8000364:	1dba      	adds	r2, r7, #6
 8000366:	8812      	ldrh	r2, [r2, #0]
 8000368:	2104      	movs	r1, #4
 800036a:	430a      	orrs	r2, r1
 800036c:	801a      	strh	r2, [r3, #0]
  _SetCNTR(wCNTR);
 800036e:	4b04      	ldr	r3, [pc, #16]	; (8000380 <Suspend+0x48>)
 8000370:	1dba      	adds	r2, r7, #6
 8000372:	8812      	ldrh	r2, [r2, #0]
 8000374:	601a      	str	r2, [r3, #0]
    wCNTR = _GetCNTR();
    wCNTR&=~CNTR_FSUSP;
    _SetCNTR(wCNTR);
  }
#endif
}
 8000376:	46c0      	nop			; (mov r8, r8)
 8000378:	46bd      	mov	sp, r7
 800037a:	b002      	add	sp, #8
 800037c:	bd80      	pop	{r7, pc}
 800037e:	46c0      	nop			; (mov r8, r8)
 8000380:	40005c40 	.word	0x40005c40

08000384 <Resume_Init>:
  * @brief  Handles wake-up restoring normal operations
  * @param  None
  * @retval USB_SUCCESS
  */
void Resume_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
  /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
  /* restart the clocks */
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 800038a:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <Resume_Init+0x34>)
 800038c:	681a      	ldr	r2, [r3, #0]
 800038e:	1dbb      	adds	r3, r7, #6
 8000390:	801a      	strh	r2, [r3, #0]
  wCNTR &= (~CNTR_LPMODE);
 8000392:	1dbb      	adds	r3, r7, #6
 8000394:	1dba      	adds	r2, r7, #6
 8000396:	8812      	ldrh	r2, [r2, #0]
 8000398:	2104      	movs	r1, #4
 800039a:	438a      	bics	r2, r1
 800039c:	801a      	strh	r2, [r3, #0]
  _SetCNTR(wCNTR);    
 800039e:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <Resume_Init+0x34>)
 80003a0:	1dba      	adds	r2, r7, #6
 80003a2:	8812      	ldrh	r2, [r2, #0]
 80003a4:	601a      	str	r2, [r3, #0]
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
#endif
  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 80003a6:	4b04      	ldr	r3, [pc, #16]	; (80003b8 <Resume_Init+0x34>)
 80003a8:	22bf      	movs	r2, #191	; 0xbf
 80003aa:	0212      	lsls	r2, r2, #8
 80003ac:	601a      	str	r2, [r3, #0]

}
 80003ae:	46c0      	nop			; (mov r8, r8)
 80003b0:	46bd      	mov	sp, r7
 80003b2:	b002      	add	sp, #8
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	46c0      	nop			; (mov r8, r8)
 80003b8:	40005c40 	.word	0x40005c40

080003bc <Resume>:
  *         RESUME_ESOF doesn't change ResumeS.eState allowing
  *         decrementing of the ESOF counter in different states.
  * @retval Status
  */
void Resume(RESUME_STATE eResumeSetVal)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b084      	sub	sp, #16
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	0002      	movs	r2, r0
 80003c4:	1dfb      	adds	r3, r7, #7
 80003c6:	701a      	strb	r2, [r3, #0]
 uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
 80003c8:	1dfb      	adds	r3, r7, #7
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	2b07      	cmp	r3, #7
 80003ce:	d003      	beq.n	80003d8 <Resume+0x1c>
    ResumeS.eState = eResumeSetVal;
 80003d0:	4b42      	ldr	r3, [pc, #264]	; (80004dc <Resume+0x120>)
 80003d2:	1dfa      	adds	r2, r7, #7
 80003d4:	7812      	ldrb	r2, [r2, #0]
 80003d6:	701a      	strb	r2, [r3, #0]
  switch (ResumeS.eState)
 80003d8:	4b40      	ldr	r3, [pc, #256]	; (80004dc <Resume+0x120>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	b2db      	uxtb	r3, r3
 80003de:	2b05      	cmp	r3, #5
 80003e0:	d900      	bls.n	80003e4 <Resume+0x28>
 80003e2:	e070      	b.n	80004c6 <Resume+0x10a>
 80003e4:	009a      	lsls	r2, r3, #2
 80003e6:	4b3e      	ldr	r3, [pc, #248]	; (80004e0 <Resume+0x124>)
 80003e8:	18d3      	adds	r3, r2, r3
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	469f      	mov	pc, r3
  {
    case RESUME_EXTERNAL:
      
if (remotewakeupon ==0)
 80003ee:	4b3d      	ldr	r3, [pc, #244]	; (80004e4 <Resume+0x128>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d105      	bne.n	8000402 <Resume+0x46>
      {
        Resume_Init();
 80003f6:	f7ff ffc5 	bl	8000384 <Resume_Init>
        ResumeS.eState = RESUME_OFF;
 80003fa:	4b38      	ldr	r3, [pc, #224]	; (80004dc <Resume+0x120>)
 80003fc:	2206      	movs	r2, #6
 80003fe:	701a      	strb	r2, [r3, #0]
      }
      else /* RESUME detected during the RemoteWAkeup signalling => keep RemoteWakeup handling*/
      {
        ResumeS.eState = RESUME_ON;
      }
      break;
 8000400:	e068      	b.n	80004d4 <Resume+0x118>
        Resume_Init();
        ResumeS.eState = RESUME_OFF;
      }
      else /* RESUME detected during the RemoteWAkeup signalling => keep RemoteWakeup handling*/
      {
        ResumeS.eState = RESUME_ON;
 8000402:	4b36      	ldr	r3, [pc, #216]	; (80004dc <Resume+0x120>)
 8000404:	2205      	movs	r2, #5
 8000406:	701a      	strb	r2, [r3, #0]
      }
      break;
 8000408:	e064      	b.n	80004d4 <Resume+0x118>
    case RESUME_INTERNAL:
      Resume_Init();
 800040a:	f7ff ffbb 	bl	8000384 <Resume_Init>
      ResumeS.eState = RESUME_START;
 800040e:	4b33      	ldr	r3, [pc, #204]	; (80004dc <Resume+0x120>)
 8000410:	2204      	movs	r2, #4
 8000412:	701a      	strb	r2, [r3, #0]
      remotewakeupon = 1;
 8000414:	4b33      	ldr	r3, [pc, #204]	; (80004e4 <Resume+0x128>)
 8000416:	2201      	movs	r2, #1
 8000418:	601a      	str	r2, [r3, #0]
      break;
 800041a:	e05b      	b.n	80004d4 <Resume+0x118>
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 800041c:	4b2f      	ldr	r3, [pc, #188]	; (80004dc <Resume+0x120>)
 800041e:	2202      	movs	r2, #2
 8000420:	705a      	strb	r2, [r3, #1]
      ResumeS.eState = RESUME_WAIT;
 8000422:	4b2e      	ldr	r3, [pc, #184]	; (80004dc <Resume+0x120>)
 8000424:	2203      	movs	r2, #3
 8000426:	701a      	strb	r2, [r3, #0]
      break;
 8000428:	e054      	b.n	80004d4 <Resume+0x118>
    case RESUME_WAIT:
      ResumeS.bESOFcnt--;
 800042a:	4b2c      	ldr	r3, [pc, #176]	; (80004dc <Resume+0x120>)
 800042c:	785b      	ldrb	r3, [r3, #1]
 800042e:	b2db      	uxtb	r3, r3
 8000430:	3b01      	subs	r3, #1
 8000432:	b2da      	uxtb	r2, r3
 8000434:	4b29      	ldr	r3, [pc, #164]	; (80004dc <Resume+0x120>)
 8000436:	705a      	strb	r2, [r3, #1]
      if (ResumeS.bESOFcnt == 0)
 8000438:	4b28      	ldr	r3, [pc, #160]	; (80004dc <Resume+0x120>)
 800043a:	785b      	ldrb	r3, [r3, #1]
 800043c:	b2db      	uxtb	r3, r3
 800043e:	2b00      	cmp	r3, #0
 8000440:	d145      	bne.n	80004ce <Resume+0x112>
        ResumeS.eState = RESUME_START;
 8000442:	4b26      	ldr	r3, [pc, #152]	; (80004dc <Resume+0x120>)
 8000444:	2204      	movs	r2, #4
 8000446:	701a      	strb	r2, [r3, #0]
      break;
 8000448:	e041      	b.n	80004ce <Resume+0x112>
    case RESUME_START:
      wCNTR = _GetCNTR();
 800044a:	4b27      	ldr	r3, [pc, #156]	; (80004e8 <Resume+0x12c>)
 800044c:	681a      	ldr	r2, [r3, #0]
 800044e:	230e      	movs	r3, #14
 8000450:	18fb      	adds	r3, r7, r3
 8000452:	801a      	strh	r2, [r3, #0]
      wCNTR |= CNTR_RESUME;
 8000454:	230e      	movs	r3, #14
 8000456:	18fb      	adds	r3, r7, r3
 8000458:	220e      	movs	r2, #14
 800045a:	18ba      	adds	r2, r7, r2
 800045c:	8812      	ldrh	r2, [r2, #0]
 800045e:	2110      	movs	r1, #16
 8000460:	430a      	orrs	r2, r1
 8000462:	801a      	strh	r2, [r3, #0]
      _SetCNTR(wCNTR);
 8000464:	4b20      	ldr	r3, [pc, #128]	; (80004e8 <Resume+0x12c>)
 8000466:	220e      	movs	r2, #14
 8000468:	18ba      	adds	r2, r7, r2
 800046a:	8812      	ldrh	r2, [r2, #0]
 800046c:	601a      	str	r2, [r3, #0]
      ResumeS.eState = RESUME_ON;
 800046e:	4b1b      	ldr	r3, [pc, #108]	; (80004dc <Resume+0x120>)
 8000470:	2205      	movs	r2, #5
 8000472:	701a      	strb	r2, [r3, #0]
      ResumeS.bESOFcnt = 10;
 8000474:	4b19      	ldr	r3, [pc, #100]	; (80004dc <Resume+0x120>)
 8000476:	220a      	movs	r2, #10
 8000478:	705a      	strb	r2, [r3, #1]
      break;
 800047a:	e02b      	b.n	80004d4 <Resume+0x118>
    case RESUME_ON:    
      ResumeS.bESOFcnt--;
 800047c:	4b17      	ldr	r3, [pc, #92]	; (80004dc <Resume+0x120>)
 800047e:	785b      	ldrb	r3, [r3, #1]
 8000480:	b2db      	uxtb	r3, r3
 8000482:	3b01      	subs	r3, #1
 8000484:	b2da      	uxtb	r2, r3
 8000486:	4b15      	ldr	r3, [pc, #84]	; (80004dc <Resume+0x120>)
 8000488:	705a      	strb	r2, [r3, #1]
      if (ResumeS.bESOFcnt == 0)
 800048a:	4b14      	ldr	r3, [pc, #80]	; (80004dc <Resume+0x120>)
 800048c:	785b      	ldrb	r3, [r3, #1]
 800048e:	b2db      	uxtb	r3, r3
 8000490:	2b00      	cmp	r3, #0
 8000492:	d11e      	bne.n	80004d2 <Resume+0x116>
      {
        wCNTR = _GetCNTR();
 8000494:	4b14      	ldr	r3, [pc, #80]	; (80004e8 <Resume+0x12c>)
 8000496:	681a      	ldr	r2, [r3, #0]
 8000498:	230e      	movs	r3, #14
 800049a:	18fb      	adds	r3, r7, r3
 800049c:	801a      	strh	r2, [r3, #0]
        wCNTR &= (~CNTR_RESUME);
 800049e:	230e      	movs	r3, #14
 80004a0:	18fb      	adds	r3, r7, r3
 80004a2:	220e      	movs	r2, #14
 80004a4:	18ba      	adds	r2, r7, r2
 80004a6:	8812      	ldrh	r2, [r2, #0]
 80004a8:	2110      	movs	r1, #16
 80004aa:	438a      	bics	r2, r1
 80004ac:	801a      	strh	r2, [r3, #0]
        _SetCNTR(wCNTR);
 80004ae:	4b0e      	ldr	r3, [pc, #56]	; (80004e8 <Resume+0x12c>)
 80004b0:	220e      	movs	r2, #14
 80004b2:	18ba      	adds	r2, r7, r2
 80004b4:	8812      	ldrh	r2, [r2, #0]
 80004b6:	601a      	str	r2, [r3, #0]
        ResumeS.eState = RESUME_OFF;
 80004b8:	4b08      	ldr	r3, [pc, #32]	; (80004dc <Resume+0x120>)
 80004ba:	2206      	movs	r2, #6
 80004bc:	701a      	strb	r2, [r3, #0]
        remotewakeupon = 0;
 80004be:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <Resume+0x128>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
      }
      break;
 80004c4:	e005      	b.n	80004d2 <Resume+0x116>
    case RESUME_OFF:
    case RESUME_ESOF:
    default:
      ResumeS.eState = RESUME_OFF;
 80004c6:	4b05      	ldr	r3, [pc, #20]	; (80004dc <Resume+0x120>)
 80004c8:	2206      	movs	r2, #6
 80004ca:	701a      	strb	r2, [r3, #0]
      break;
 80004cc:	e002      	b.n	80004d4 <Resume+0x118>
      break;
    case RESUME_WAIT:
      ResumeS.bESOFcnt--;
      if (ResumeS.bESOFcnt == 0)
        ResumeS.eState = RESUME_START;
      break;
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	e000      	b.n	80004d4 <Resume+0x118>
        wCNTR &= (~CNTR_RESUME);
        _SetCNTR(wCNTR);
        ResumeS.eState = RESUME_OFF;
        remotewakeupon = 0;
      }
      break;
 80004d2:	46c0      	nop			; (mov r8, r8)
    case RESUME_ESOF:
    default:
      ResumeS.eState = RESUME_OFF;
      break;
  }
}
 80004d4:	46c0      	nop			; (mov r8, r8)
 80004d6:	46bd      	mov	sp, r7
 80004d8:	b004      	add	sp, #16
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	20000110 	.word	0x20000110
 80004e0:	08003dac 	.word	0x08003dac
 80004e4:	200000d8 	.word	0x200000d8
 80004e8:	40005c40 	.word	0x40005c40

080004ec <USBD_USR_DeviceDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t *  USBD_USR_DeviceDescriptor( uint8_t speed , uint16_t *length)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	0002      	movs	r2, r0
 80004f4:	6039      	str	r1, [r7, #0]
 80004f6:	1dfb      	adds	r3, r7, #7
 80004f8:	701a      	strb	r2, [r3, #0]
  *length = sizeof(USBD_DeviceDesc);
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	2212      	movs	r2, #18
 80004fe:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_DeviceDesc;
 8000500:	4b02      	ldr	r3, [pc, #8]	; (800050c <USBD_USR_DeviceDescriptor+0x20>)
}
 8000502:	0018      	movs	r0, r3
 8000504:	46bd      	mov	sp, r7
 8000506:	b002      	add	sp, #8
 8000508:	bd80      	pop	{r7, pc}
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	08003dc4 	.word	0x08003dc4

08000510 <USBD_USR_LangIDStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t *  USBD_USR_LangIDStrDescriptor( uint8_t speed , uint16_t *length)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	0002      	movs	r2, r0
 8000518:	6039      	str	r1, [r7, #0]
 800051a:	1dfb      	adds	r3, r7, #7
 800051c:	701a      	strb	r2, [r3, #0]
  *length =  sizeof(USBD_LangIDDesc);  
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	2204      	movs	r2, #4
 8000522:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_LangIDDesc;
 8000524:	4b02      	ldr	r3, [pc, #8]	; (8000530 <USBD_USR_LangIDStrDescriptor+0x20>)
}
 8000526:	0018      	movs	r0, r3
 8000528:	46bd      	mov	sp, r7
 800052a:	b002      	add	sp, #8
 800052c:	bd80      	pop	{r7, pc}
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	08003dd8 	.word	0x08003dd8

08000534 <USBD_USR_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t *  USBD_USR_ProductStrDescriptor( uint8_t speed , uint16_t *length)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	0002      	movs	r2, r0
 800053c:	6039      	str	r1, [r7, #0]
 800053e:	1dfb      	adds	r3, r7, #7
 8000540:	701a      	strb	r2, [r3, #0]
  USBD_GetString ( (uint8_t*)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 8000542:	683a      	ldr	r2, [r7, #0]
 8000544:	4904      	ldr	r1, [pc, #16]	; (8000558 <USBD_USR_ProductStrDescriptor+0x24>)
 8000546:	4b05      	ldr	r3, [pc, #20]	; (800055c <USBD_USR_ProductStrDescriptor+0x28>)
 8000548:	0018      	movs	r0, r3
 800054a:	f001 f8cd 	bl	80016e8 <USBD_GetString>
  return USBD_StrDesc;
 800054e:	4b02      	ldr	r3, [pc, #8]	; (8000558 <USBD_USR_ProductStrDescriptor+0x24>)
}
 8000550:	0018      	movs	r0, r3
 8000552:	46bd      	mov	sp, r7
 8000554:	b002      	add	sp, #8
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000328 	.word	0x20000328
 800055c:	08003d30 	.word	0x08003d30

08000560 <USBD_USR_ManufacturerStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t *  USBD_USR_ManufacturerStrDescriptor( uint8_t speed , uint16_t *length)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	0002      	movs	r2, r0
 8000568:	6039      	str	r1, [r7, #0]
 800056a:	1dfb      	adds	r3, r7, #7
 800056c:	701a      	strb	r2, [r3, #0]
  USBD_GetString ( (uint8_t*)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800056e:	683a      	ldr	r2, [r7, #0]
 8000570:	4904      	ldr	r1, [pc, #16]	; (8000584 <USBD_USR_ManufacturerStrDescriptor+0x24>)
 8000572:	4b05      	ldr	r3, [pc, #20]	; (8000588 <USBD_USR_ManufacturerStrDescriptor+0x28>)
 8000574:	0018      	movs	r0, r3
 8000576:	f001 f8b7 	bl	80016e8 <USBD_GetString>
  return USBD_StrDesc;
 800057a:	4b02      	ldr	r3, [pc, #8]	; (8000584 <USBD_USR_ManufacturerStrDescriptor+0x24>)
}
 800057c:	0018      	movs	r0, r3
 800057e:	46bd      	mov	sp, r7
 8000580:	b002      	add	sp, #8
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20000328 	.word	0x20000328
 8000588:	08003d54 	.word	0x08003d54

0800058c <USBD_USR_SerialStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t *  USBD_USR_SerialStrDescriptor( uint8_t speed , uint16_t *length)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	0002      	movs	r2, r0
 8000594:	6039      	str	r1, [r7, #0]
 8000596:	1dfb      	adds	r3, r7, #7
 8000598:	701a      	strb	r2, [r3, #0]
  *length = USB_SIZ_STRING_SERIAL; 
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	221a      	movs	r2, #26
 800059e:	801a      	strh	r2, [r3, #0]
  return USBD_StringSerial;
 80005a0:	4b02      	ldr	r3, [pc, #8]	; (80005ac <USBD_USR_SerialStrDescriptor+0x20>)
}
 80005a2:	0018      	movs	r0, r3
 80005a4:	46bd      	mov	sp, r7
 80005a6:	b002      	add	sp, #8
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	20000030 	.word	0x20000030

080005b0 <USBD_USR_ConfigStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t *  USBD_USR_ConfigStrDescriptor( uint8_t speed , uint16_t *length)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	0002      	movs	r2, r0
 80005b8:	6039      	str	r1, [r7, #0]
 80005ba:	1dfb      	adds	r3, r7, #7
 80005bc:	701a      	strb	r2, [r3, #0]
  USBD_GetString ( (uint8_t*)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 80005be:	683a      	ldr	r2, [r7, #0]
 80005c0:	4904      	ldr	r1, [pc, #16]	; (80005d4 <USBD_USR_ConfigStrDescriptor+0x24>)
 80005c2:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <USBD_USR_ConfigStrDescriptor+0x28>)
 80005c4:	0018      	movs	r0, r3
 80005c6:	f001 f88f 	bl	80016e8 <USBD_GetString>
  return USBD_StrDesc;  
 80005ca:	4b02      	ldr	r3, [pc, #8]	; (80005d4 <USBD_USR_ConfigStrDescriptor+0x24>)
}
 80005cc:	0018      	movs	r0, r3
 80005ce:	46bd      	mov	sp, r7
 80005d0:	b002      	add	sp, #8
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000328 	.word	0x20000328
 80005d8:	08003d68 	.word	0x08003d68

080005dc <USBD_USR_InterfaceStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t *  USBD_USR_InterfaceStrDescriptor( uint8_t speed , uint16_t *length)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	0002      	movs	r2, r0
 80005e4:	6039      	str	r1, [r7, #0]
 80005e6:	1dfb      	adds	r3, r7, #7
 80005e8:	701a      	strb	r2, [r3, #0]
  USBD_GetString ( (uint8_t*)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 80005ea:	683a      	ldr	r2, [r7, #0]
 80005ec:	4904      	ldr	r1, [pc, #16]	; (8000600 <USBD_USR_InterfaceStrDescriptor+0x24>)
 80005ee:	4b05      	ldr	r3, [pc, #20]	; (8000604 <USBD_USR_InterfaceStrDescriptor+0x28>)
 80005f0:	0018      	movs	r0, r3
 80005f2:	f001 f879 	bl	80016e8 <USBD_GetString>
  return USBD_StrDesc;  
 80005f6:	4b02      	ldr	r3, [pc, #8]	; (8000600 <USBD_USR_InterfaceStrDescriptor+0x24>)
}
 80005f8:	0018      	movs	r0, r3
 80005fa:	46bd      	mov	sp, r7
 80005fc:	b002      	add	sp, #8
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000328 	.word	0x20000328
 8000604:	08003d74 	.word	0x08003d74

08000608 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
void Get_SerialNum(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;
  
  Device_Serial0 = *(uint32_t*)Device1_Identifier;
 800060e:	4b10      	ldr	r3, [pc, #64]	; (8000650 <Get_SerialNum+0x48>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	60fb      	str	r3, [r7, #12]
  Device_Serial1 = *(uint32_t*)Device2_Identifier;
 8000614:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <Get_SerialNum+0x4c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	60bb      	str	r3, [r7, #8]
  Device_Serial2 = *(uint32_t*)Device3_Identifier;
 800061a:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <Get_SerialNum+0x50>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	607b      	str	r3, [r7, #4]
  
  Device_Serial0 += Device_Serial2;
 8000620:	68fa      	ldr	r2, [r7, #12]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	18d3      	adds	r3, r2, r3
 8000626:	60fb      	str	r3, [r7, #12]
  
  if (Device_Serial0 != 0)
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d00b      	beq.n	8000646 <Get_SerialNum+0x3e>
  {
    IntToUnicode (Device_Serial0, &USBD_StringSerial[2] ,8);
 800062e:	490b      	ldr	r1, [pc, #44]	; (800065c <Get_SerialNum+0x54>)
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	2208      	movs	r2, #8
 8000634:	0018      	movs	r0, r3
 8000636:	f000 f815 	bl	8000664 <IntToUnicode>
    IntToUnicode (Device_Serial1, &USBD_StringSerial[18] ,4);
 800063a:	4909      	ldr	r1, [pc, #36]	; (8000660 <Get_SerialNum+0x58>)
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	2204      	movs	r2, #4
 8000640:	0018      	movs	r0, r3
 8000642:	f000 f80f 	bl	8000664 <IntToUnicode>
  }
}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	46bd      	mov	sp, r7
 800064a:	b004      	add	sp, #16
 800064c:	bd80      	pop	{r7, pc}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	1ffff7ac 	.word	0x1ffff7ac
 8000654:	1ffff7b0 	.word	0x1ffff7b0
 8000658:	1ffff7b4 	.word	0x1ffff7b4
 800065c:	20000032 	.word	0x20000032
 8000660:	20000042 	.word	0x20000042

08000664 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	1dfb      	adds	r3, r7, #7
 8000670:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8000672:	2317      	movs	r3, #23
 8000674:	18fb      	adds	r3, r7, r3
 8000676:	2200      	movs	r2, #0
 8000678:	701a      	strb	r2, [r3, #0]
  
  for( idx = 0 ; idx < len ; idx ++)
 800067a:	2317      	movs	r3, #23
 800067c:	18fb      	adds	r3, r7, r3
 800067e:	2200      	movs	r2, #0
 8000680:	701a      	strb	r2, [r3, #0]
 8000682:	e031      	b.n	80006e8 <IntToUnicode+0x84>
  {
    if( ((value >> 28)) < 0xA )
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	0f1b      	lsrs	r3, r3, #28
 8000688:	2b09      	cmp	r3, #9
 800068a:	d80d      	bhi.n	80006a8 <IntToUnicode+0x44>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 800068c:	2317      	movs	r3, #23
 800068e:	18fb      	adds	r3, r7, r3
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	005b      	lsls	r3, r3, #1
 8000694:	001a      	movs	r2, r3
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	189b      	adds	r3, r3, r2
 800069a:	68fa      	ldr	r2, [r7, #12]
 800069c:	0f12      	lsrs	r2, r2, #28
 800069e:	b2d2      	uxtb	r2, r2
 80006a0:	3230      	adds	r2, #48	; 0x30
 80006a2:	b2d2      	uxtb	r2, r2
 80006a4:	701a      	strb	r2, [r3, #0]
 80006a6:	e00c      	b.n	80006c2 <IntToUnicode+0x5e>
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 80006a8:	2317      	movs	r3, #23
 80006aa:	18fb      	adds	r3, r7, r3
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	001a      	movs	r2, r3
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	189b      	adds	r3, r3, r2
 80006b6:	68fa      	ldr	r2, [r7, #12]
 80006b8:	0f12      	lsrs	r2, r2, #28
 80006ba:	b2d2      	uxtb	r2, r2
 80006bc:	3237      	adds	r2, #55	; 0x37
 80006be:	b2d2      	uxtb	r2, r2
 80006c0:	701a      	strb	r2, [r3, #0]
    }
    
    value = value << 4;
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	011b      	lsls	r3, r3, #4
 80006c6:	60fb      	str	r3, [r7, #12]
    
    pbuf[ 2* idx + 1] = 0;
 80006c8:	2317      	movs	r3, #23
 80006ca:	18fb      	adds	r3, r7, r3
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	3301      	adds	r3, #1
 80006d2:	68ba      	ldr	r2, [r7, #8]
 80006d4:	18d3      	adds	r3, r2, r3
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 80006da:	2317      	movs	r3, #23
 80006dc:	18fb      	adds	r3, r7, r3
 80006de:	781a      	ldrb	r2, [r3, #0]
 80006e0:	2317      	movs	r3, #23
 80006e2:	18fb      	adds	r3, r7, r3
 80006e4:	3201      	adds	r2, #1
 80006e6:	701a      	strb	r2, [r3, #0]
 80006e8:	2317      	movs	r3, #23
 80006ea:	18fa      	adds	r2, r7, r3
 80006ec:	1dfb      	adds	r3, r7, #7
 80006ee:	7812      	ldrb	r2, [r2, #0]
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	429a      	cmp	r2, r3
 80006f4:	d3c6      	bcc.n	8000684 <IntToUnicode+0x20>
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
  }
}
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	46bd      	mov	sp, r7
 80006fa:	b006      	add	sp, #24
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	46c0      	nop			; (mov r8, r8)

08000700 <USB_BSP_Init>:
  * @param  None
  * @retval None
  */

void USB_BSP_Init(USB_CORE_HANDLE *pdev)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
#ifdef USB_DEVICE_LOW_PWR_MGMT_SUPPORT 
  EXTI_InitTypeDef EXTI_InitStructure;
#endif /*USB_DEVICE_LOW_PWR_MGMT_SUPPORT */  

  /* Enable USB clock */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB, ENABLE);
 8000708:	2380      	movs	r3, #128	; 0x80
 800070a:	041b      	lsls	r3, r3, #16
 800070c:	2101      	movs	r1, #1
 800070e:	0018      	movs	r0, r3
 8000710:	f003 f9f8 	bl	8003b04 <RCC_APB1PeriphClockCmd>
  - Set AUTOTRIMEN
  - Set CEN
  */
  
  /* Select HSI48 as USB clock */
  RCC_USBCLKConfig(RCC_USBCLK_HSI48);
 8000714:	2000      	movs	r0, #0
 8000716:	f003 f9bf 	bl	8003a98 <RCC_USBCLKConfig>
  
  /* Configure the Clock Recovery System */
  CRS_Config();  
 800071a:	f000 f81f 	bl	800075c <CRS_Config>
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
  EXTI_Init(&EXTI_InitStructure);
#endif /*USB_DEVICE_LOW_PWR_MGMT_SUPPORT */
  
}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	46bd      	mov	sp, r7
 8000722:	b002      	add	sp, #8
 8000724:	bd80      	pop	{r7, pc}
 8000726:	46c0      	nop			; (mov r8, r8)

08000728 <USB_BSP_EnableInterrupt>:
  * @brief  Enable USB Global interrupt
  * @param  None
  * @retval None
  */
void USB_BSP_EnableInterrupt(USB_CORE_HANDLE *pdev)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  NVIC_InitTypeDef NVIC_InitStructure;
  
  /* Enable the USB interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = USB_IRQn;
 8000730:	230c      	movs	r3, #12
 8000732:	18fb      	adds	r3, r7, r3
 8000734:	221f      	movs	r2, #31
 8000736:	701a      	strb	r2, [r3, #0]
  NVIC_InitStructure.NVIC_IRQChannelPriority = USB_IT_PRIO;
 8000738:	230c      	movs	r3, #12
 800073a:	18fb      	adds	r3, r7, r3
 800073c:	2201      	movs	r2, #1
 800073e:	705a      	strb	r2, [r3, #1]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000740:	230c      	movs	r3, #12
 8000742:	18fb      	adds	r3, r7, r3
 8000744:	2201      	movs	r2, #1
 8000746:	709a      	strb	r2, [r3, #2]
  NVIC_Init(&NVIC_InitStructure);
 8000748:	230c      	movs	r3, #12
 800074a:	18fb      	adds	r3, r7, r3
 800074c:	0018      	movs	r0, r3
 800074e:	f003 f9f9 	bl	8003b44 <NVIC_Init>
}
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	46bd      	mov	sp, r7
 8000756:	b004      	add	sp, #16
 8000758:	bd80      	pop	{r7, pc}
 800075a:	46c0      	nop			; (mov r8, r8)

0800075c <CRS_Config>:
  *         oscillator according to USB SOF
  * @param  None
  * @retval None
  */
static void CRS_Config(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /*Enable CRS Clock*/
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_CRS, ENABLE);
 8000760:	2380      	movs	r3, #128	; 0x80
 8000762:	051b      	lsls	r3, r3, #20
 8000764:	2101      	movs	r1, #1
 8000766:	0018      	movs	r0, r3
 8000768:	f003 f9cc 	bl	8003b04 <RCC_APB1PeriphClockCmd>
  
  /* Select USB SOF as synchronization source */
  CRS_SynchronizationSourceConfig(CRS_SYNCSource_USB);
 800076c:	2380      	movs	r3, #128	; 0x80
 800076e:	059b      	lsls	r3, r3, #22
 8000770:	0018      	movs	r0, r3
 8000772:	f003 fa93 	bl	8003c9c <CRS_SynchronizationSourceConfig>
  
  /*Enables the automatic hardware adjustment of TRIM bits: AUTOTRIMEN:*/
  CRS_AutomaticCalibrationCmd(ENABLE);
 8000776:	2001      	movs	r0, #1
 8000778:	f003 fa72 	bl	8003c60 <CRS_AutomaticCalibrationCmd>
  
  /*Enables the oscillator clock for frequency error counter CEN*/
  CRS_FrequencyErrorCounterCmd(ENABLE);
 800077c:	2001      	movs	r0, #1
 800077e:	f003 fa51 	bl	8003c24 <CRS_FrequencyErrorCounterCmd>
}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800078c:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <SystemInit+0x74>)
 800078e:	4a1b      	ldr	r2, [pc, #108]	; (80007fc <SystemInit+0x74>)
 8000790:	6812      	ldr	r2, [r2, #0]
 8000792:	2101      	movs	r1, #1
 8000794:	430a      	orrs	r2, r1
 8000796:	601a      	str	r2, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[3:0] bits MCOPRE[2:0] */
  RCC->CFGR &= (uint32_t)0x80FFB80C;
 8000798:	4b18      	ldr	r3, [pc, #96]	; (80007fc <SystemInit+0x74>)
 800079a:	4a18      	ldr	r2, [pc, #96]	; (80007fc <SystemInit+0x74>)
 800079c:	6852      	ldr	r2, [r2, #4]
 800079e:	4918      	ldr	r1, [pc, #96]	; (8000800 <SystemInit+0x78>)
 80007a0:	400a      	ands	r2, r1
 80007a2:	605a      	str	r2, [r3, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80007a4:	4b15      	ldr	r3, [pc, #84]	; (80007fc <SystemInit+0x74>)
 80007a6:	4a15      	ldr	r2, [pc, #84]	; (80007fc <SystemInit+0x74>)
 80007a8:	6812      	ldr	r2, [r2, #0]
 80007aa:	4916      	ldr	r1, [pc, #88]	; (8000804 <SystemInit+0x7c>)
 80007ac:	400a      	ands	r2, r1
 80007ae:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <SystemInit+0x74>)
 80007b2:	4a12      	ldr	r2, [pc, #72]	; (80007fc <SystemInit+0x74>)
 80007b4:	6812      	ldr	r2, [r2, #0]
 80007b6:	4914      	ldr	r1, [pc, #80]	; (8000808 <SystemInit+0x80>)
 80007b8:	400a      	ands	r2, r1
 80007ba:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC07FFF;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <SystemInit+0x74>)
 80007be:	4a0f      	ldr	r2, [pc, #60]	; (80007fc <SystemInit+0x74>)
 80007c0:	6852      	ldr	r2, [r2, #4]
 80007c2:	4912      	ldr	r1, [pc, #72]	; (800080c <SystemInit+0x84>)
 80007c4:	400a      	ands	r2, r1
 80007c6:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <SystemInit+0x74>)
 80007ca:	4a0c      	ldr	r2, [pc, #48]	; (80007fc <SystemInit+0x74>)
 80007cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80007ce:	210f      	movs	r1, #15
 80007d0:	438a      	bics	r2, r1
 80007d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <SystemInit+0x74>)
 80007d6:	4a09      	ldr	r2, [pc, #36]	; (80007fc <SystemInit+0x74>)
 80007d8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80007da:	490d      	ldr	r1, [pc, #52]	; (8000810 <SystemInit+0x88>)
 80007dc:	400a      	ands	r2, r1
 80007de:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset HSI14 & HSI48 bit */
  RCC->CR2 &= (uint32_t)0xFFFEFFFE;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <SystemInit+0x74>)
 80007e2:	4a06      	ldr	r2, [pc, #24]	; (80007fc <SystemInit+0x74>)
 80007e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80007e6:	490b      	ldr	r1, [pc, #44]	; (8000814 <SystemInit+0x8c>)
 80007e8:	400a      	ands	r2, r1
 80007ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80007ec:	4b03      	ldr	r3, [pc, #12]	; (80007fc <SystemInit+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]

  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 80007f2:	f000 f887 	bl	8000904 <SetSysClock>
}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40021000 	.word	0x40021000
 8000800:	80ffb80c 	.word	0x80ffb80c
 8000804:	fef6ffff 	.word	0xfef6ffff
 8000808:	fffbffff 	.word	0xfffbffff
 800080c:	ffc07fff 	.word	0xffc07fff
 8000810:	fffffeac 	.word	0xfffffeac
 8000814:	fffefffe 	.word	0xfffefffe

08000818 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	2300      	movs	r3, #0
 800082c:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800082e:	4b2f      	ldr	r3, [pc, #188]	; (80008ec <SystemCoreClockUpdate+0xd4>)
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	220c      	movs	r2, #12
 8000834:	4013      	ands	r3, r2
 8000836:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	2b04      	cmp	r3, #4
 800083c:	d00c      	beq.n	8000858 <SystemCoreClockUpdate+0x40>
 800083e:	d802      	bhi.n	8000846 <SystemCoreClockUpdate+0x2e>
 8000840:	2b00      	cmp	r3, #0
 8000842:	d005      	beq.n	8000850 <SystemCoreClockUpdate+0x38>
 8000844:	e03a      	b.n	80008bc <SystemCoreClockUpdate+0xa4>
 8000846:	2b08      	cmp	r3, #8
 8000848:	d00a      	beq.n	8000860 <SystemCoreClockUpdate+0x48>
 800084a:	2b0c      	cmp	r3, #12
 800084c:	d032      	beq.n	80008b4 <SystemCoreClockUpdate+0x9c>
 800084e:	e035      	b.n	80008bc <SystemCoreClockUpdate+0xa4>
  {
  case 0x00:  /* HSI used as system clock */
    SystemCoreClock = HSI_VALUE;
 8000850:	4b27      	ldr	r3, [pc, #156]	; (80008f0 <SystemCoreClockUpdate+0xd8>)
 8000852:	4a28      	ldr	r2, [pc, #160]	; (80008f4 <SystemCoreClockUpdate+0xdc>)
 8000854:	601a      	str	r2, [r3, #0]
    break;
 8000856:	e035      	b.n	80008c4 <SystemCoreClockUpdate+0xac>
  case 0x04:  /* HSE used as system clock */
    SystemCoreClock = HSE_VALUE;
 8000858:	4b25      	ldr	r3, [pc, #148]	; (80008f0 <SystemCoreClockUpdate+0xd8>)
 800085a:	4a26      	ldr	r2, [pc, #152]	; (80008f4 <SystemCoreClockUpdate+0xdc>)
 800085c:	601a      	str	r2, [r3, #0]
    break;
 800085e:	e031      	b.n	80008c4 <SystemCoreClockUpdate+0xac>
  case 0x08:  /* PLL used as system clock */
    /* Get PLL clock source and multiplication factor ----------------------*/
    pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000860:	4b22      	ldr	r3, [pc, #136]	; (80008ec <SystemCoreClockUpdate+0xd4>)
 8000862:	685a      	ldr	r2, [r3, #4]
 8000864:	23f0      	movs	r3, #240	; 0xf0
 8000866:	039b      	lsls	r3, r3, #14
 8000868:	4013      	ands	r3, r2
 800086a:	60bb      	str	r3, [r7, #8]
    pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800086c:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <SystemCoreClockUpdate+0xd4>)
 800086e:	685a      	ldr	r2, [r3, #4]
 8000870:	23c0      	movs	r3, #192	; 0xc0
 8000872:	025b      	lsls	r3, r3, #9
 8000874:	4013      	ands	r3, r2
 8000876:	607b      	str	r3, [r7, #4]
    pllmull = ( pllmull >> 18) + 2;
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	0c9b      	lsrs	r3, r3, #18
 800087c:	3302      	adds	r3, #2
 800087e:	60bb      	str	r3, [r7, #8]

    if (pllsource == 0x00)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d105      	bne.n	8000892 <SystemCoreClockUpdate+0x7a>
    {
      /* HSI oscillator clock divided by 2 selected as PLL clock entry */
      SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	4a1b      	ldr	r2, [pc, #108]	; (80008f8 <SystemCoreClockUpdate+0xe0>)
 800088a:	435a      	muls	r2, r3
 800088c:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <SystemCoreClockUpdate+0xd8>)
 800088e:	601a      	str	r2, [r3, #0]
    {
      prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
      /* HSE oscillator clock selected as PREDIV1 clock entry */
      SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
    }
    break;
 8000890:	e018      	b.n	80008c4 <SystemCoreClockUpdate+0xac>
      /* HSI oscillator clock divided by 2 selected as PLL clock entry */
      SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
    }
    else
    {
      prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000892:	4b16      	ldr	r3, [pc, #88]	; (80008ec <SystemCoreClockUpdate+0xd4>)
 8000894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000896:	220f      	movs	r2, #15
 8000898:	4013      	ands	r3, r2
 800089a:	3301      	adds	r3, #1
 800089c:	603b      	str	r3, [r7, #0]
      /* HSE oscillator clock selected as PREDIV1 clock entry */
      SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 800089e:	6839      	ldr	r1, [r7, #0]
 80008a0:	4814      	ldr	r0, [pc, #80]	; (80008f4 <SystemCoreClockUpdate+0xdc>)
 80008a2:	f7ff fc31 	bl	8000108 <__aeabi_uidiv>
 80008a6:	0003      	movs	r3, r0
 80008a8:	001a      	movs	r2, r3
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	435a      	muls	r2, r3
 80008ae:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <SystemCoreClockUpdate+0xd8>)
 80008b0:	601a      	str	r2, [r3, #0]
    }
    break;
 80008b2:	e007      	b.n	80008c4 <SystemCoreClockUpdate+0xac>
  case 0x0C:  /* HSI48 used as system clock */
    SystemCoreClock = HSI48_VALUE;
 80008b4:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <SystemCoreClockUpdate+0xd8>)
 80008b6:	4a11      	ldr	r2, [pc, #68]	; (80008fc <SystemCoreClockUpdate+0xe4>)
 80008b8:	601a      	str	r2, [r3, #0]
    break;
 80008ba:	e003      	b.n	80008c4 <SystemCoreClockUpdate+0xac>
  default: /* HSI used as system clock */
    SystemCoreClock = HSI_VALUE;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <SystemCoreClockUpdate+0xd8>)
 80008be:	4a0d      	ldr	r2, [pc, #52]	; (80008f4 <SystemCoreClockUpdate+0xdc>)
 80008c0:	601a      	str	r2, [r3, #0]
    break;
 80008c2:	46c0      	nop			; (mov r8, r8)

  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80008c4:	4b09      	ldr	r3, [pc, #36]	; (80008ec <SystemCoreClockUpdate+0xd4>)
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	22f0      	movs	r2, #240	; 0xf0
 80008ca:	4013      	ands	r3, r2
 80008cc:	091b      	lsrs	r3, r3, #4
 80008ce:	4a0c      	ldr	r2, [pc, #48]	; (8000900 <SystemCoreClockUpdate+0xe8>)
 80008d0:	5cd3      	ldrb	r3, [r2, r3]
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <SystemCoreClockUpdate+0xd8>)
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	40da      	lsrs	r2, r3
 80008de:	4b04      	ldr	r3, [pc, #16]	; (80008f0 <SystemCoreClockUpdate+0xd8>)
 80008e0:	601a      	str	r2, [r3, #0]
}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	46bd      	mov	sp, r7
 80008e6:	b004      	add	sp, #16
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	40021000 	.word	0x40021000
 80008f0:	2000004c 	.word	0x2000004c
 80008f4:	007a1200 	.word	0x007a1200
 80008f8:	003d0900 	.word	0x003d0900
 80008fc:	02dc6c00 	.word	0x02dc6c00
 8000900:	20000050 	.word	0x20000050

08000904 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
   /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
    /* At this stage the HSI is already enabled */
 
    /* Enable Prefetch Buffer and set Flash Latency */
    FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8000908:	4b13      	ldr	r3, [pc, #76]	; (8000958 <SetSysClock+0x54>)
 800090a:	2211      	movs	r2, #17
 800090c:	601a      	str	r2, [r3, #0]
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800090e:	4b13      	ldr	r3, [pc, #76]	; (800095c <SetSysClock+0x58>)
 8000910:	4a12      	ldr	r2, [pc, #72]	; (800095c <SetSysClock+0x58>)
 8000912:	6852      	ldr	r2, [r2, #4]
 8000914:	605a      	str	r2, [r3, #4]

    /* PCLK = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <SetSysClock+0x58>)
 8000918:	4a10      	ldr	r2, [pc, #64]	; (800095c <SetSysClock+0x58>)
 800091a:	6852      	ldr	r2, [r2, #4]
 800091c:	605a      	str	r2, [r3, #4]

   /* Enable HSI48 */
    RCC->CR2 |= RCC_CR2_HSI48ON;
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <SetSysClock+0x58>)
 8000920:	4a0e      	ldr	r2, [pc, #56]	; (800095c <SetSysClock+0x58>)
 8000922:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000924:	2180      	movs	r1, #128	; 0x80
 8000926:	0249      	lsls	r1, r1, #9
 8000928:	430a      	orrs	r2, r1
 800092a:	635a      	str	r2, [r3, #52]	; 0x34
  /* Wait till HSI48RDY is set */
    while((RCC->CR2 & RCC_CR2_HSI48RDY) == 0)
 800092c:	46c0      	nop			; (mov r8, r8)
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <SetSysClock+0x58>)
 8000930:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000932:	2380      	movs	r3, #128	; 0x80
 8000934:	029b      	lsls	r3, r3, #10
 8000936:	4013      	ands	r3, r2
 8000938:	d0f9      	beq.n	800092e <SetSysClock+0x2a>
    { }
  /* Select HSI48 as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <SetSysClock+0x58>)
 800093c:	4a07      	ldr	r2, [pc, #28]	; (800095c <SetSysClock+0x58>)
 800093e:	6852      	ldr	r2, [r2, #4]
 8000940:	2103      	movs	r1, #3
 8000942:	438a      	bics	r2, r1
 8000944:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_HSI48;
 8000946:	4b05      	ldr	r3, [pc, #20]	; (800095c <SetSysClock+0x58>)
 8000948:	4a04      	ldr	r2, [pc, #16]	; (800095c <SetSysClock+0x58>)
 800094a:	6852      	ldr	r2, [r2, #4]
 800094c:	2103      	movs	r1, #3
 800094e:	430a      	orrs	r2, r1
 8000950:	605a      	str	r2, [r3, #4]

}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40022000 	.word	0x40022000
 800095c:	40021000 	.word	0x40021000

08000960 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
}
 8000964:	46c0      	nop			; (mov r8, r8)
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	46c0      	nop			; (mov r8, r8)

0800096c <HardFault_Handler>:
  * @param  None
  * @retval None
  */

void HardFault_Handler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000970:	e7fe      	b.n	8000970 <HardFault_Handler+0x4>
 8000972:	46c0      	nop			; (mov r8, r8)

08000974 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	46c0      	nop			; (mov r8, r8)

08000980 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
}
 8000984:	46c0      	nop			; (mov r8, r8)
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	46c0      	nop			; (mov r8, r8)

0800098c <USB_IRQHandler>:
  * @brief  This function handles USB FS Handler.
  * @param  None
  * @retval None
  */
void USB_IRQHandler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
	USB_Istr();
 8000990:	f001 fee8 	bl	8002764 <USB_Istr>
}
 8000994:	46c0      	nop			; (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	46c0      	nop			; (mov r8, r8)

0800099c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800099c:	480d      	ldr	r0, [pc, #52]	; (80009d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800099e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80009a0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80009a2:	e003      	b.n	80009ac <LoopCopyDataInit>

080009a4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80009a6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80009a8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80009aa:	3104      	adds	r1, #4

080009ac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80009ac:	480b      	ldr	r0, [pc, #44]	; (80009dc <LoopForever+0xa>)
  ldr r3, =_edata
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <LoopForever+0xe>)
  adds r2, r0, r1
 80009b0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80009b2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80009b4:	d3f6      	bcc.n	80009a4 <CopyDataInit>
  ldr r2, =_sbss
 80009b6:	4a0b      	ldr	r2, [pc, #44]	; (80009e4 <LoopForever+0x12>)
  b LoopFillZerobss
 80009b8:	e002      	b.n	80009c0 <LoopFillZerobss>

080009ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  str  r3, [r2]
 80009bc:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009be:	3204      	adds	r2, #4

080009c0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80009c0:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <LoopForever+0x16>)
  cmp r2, r3
 80009c2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80009c4:	d3f9      	bcc.n	80009ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009c6:	f7ff fedf 	bl	8000788 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ca:	f003 f97f 	bl	8003ccc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ce:	f000 f8d7 	bl	8000b80 <main>

080009d2 <LoopForever>:
  
LoopForever:
    b LoopForever
 80009d2:	e7fe      	b.n	80009d2 <LoopForever>

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009d4:	20001800 	.word	0x20001800
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 80009d8:	08003e88 	.word	0x08003e88
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 80009dc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80009e0:	200000bc 	.word	0x200000bc
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 80009e4:	200000bc 	.word	0x200000bc
  str  r3, [r2]
  adds r2, r2, #4


LoopFillZerobss:
  ldr r3, = _ebss
 80009e8:	20000cb4 	.word	0x20000cb4

080009ec <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009ec:	e7fe      	b.n	80009ec <ADC1_COMP_IRQHandler>
	...

080009f0 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f0:	b5b0      	push	{r4, r5, r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	0002      	movs	r2, r0
 80009f8:	6039      	str	r1, [r7, #0]
 80009fa:	1dfb      	adds	r3, r7, #7
 80009fc:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
 80009fe:	1dfb      	adds	r3, r7, #7
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b7f      	cmp	r3, #127	; 0x7f
 8000a04:	d932      	bls.n	8000a6c <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8000a06:	4c2f      	ldr	r4, [pc, #188]	; (8000ac4 <NVIC_SetPriority+0xd4>)
 8000a08:	1dfb      	adds	r3, r7, #7
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	001a      	movs	r2, r3
 8000a0e:	230f      	movs	r3, #15
 8000a10:	4013      	ands	r3, r2
 8000a12:	3b08      	subs	r3, #8
 8000a14:	0899      	lsrs	r1, r3, #2
 8000a16:	4a2b      	ldr	r2, [pc, #172]	; (8000ac4 <NVIC_SetPriority+0xd4>)
 8000a18:	1dfb      	adds	r3, r7, #7
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	230f      	movs	r3, #15
 8000a20:	4003      	ands	r3, r0
 8000a22:	3b08      	subs	r3, #8
 8000a24:	089b      	lsrs	r3, r3, #2
 8000a26:	3306      	adds	r3, #6
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	18d3      	adds	r3, r2, r3
 8000a2c:	3304      	adds	r3, #4
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	1dfa      	adds	r2, r7, #7
 8000a32:	7812      	ldrb	r2, [r2, #0]
 8000a34:	0010      	movs	r0, r2
 8000a36:	2203      	movs	r2, #3
 8000a38:	4002      	ands	r2, r0
 8000a3a:	00d2      	lsls	r2, r2, #3
 8000a3c:	20ff      	movs	r0, #255	; 0xff
 8000a3e:	4090      	lsls	r0, r2
 8000a40:	0002      	movs	r2, r0
 8000a42:	43d2      	mvns	r2, r2
 8000a44:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	019b      	lsls	r3, r3, #6
 8000a4a:	20ff      	movs	r0, #255	; 0xff
 8000a4c:	4018      	ands	r0, r3
 8000a4e:	1dfb      	adds	r3, r7, #7
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	001d      	movs	r5, r3
 8000a54:	2303      	movs	r3, #3
 8000a56:	402b      	ands	r3, r5
 8000a58:	00db      	lsls	r3, r3, #3
 8000a5a:	4098      	lsls	r0, r3
 8000a5c:	0003      	movs	r3, r0
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8000a5e:	431a      	orrs	r2, r3
 8000a60:	1d8b      	adds	r3, r1, #6
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	18e3      	adds	r3, r4, r3
 8000a66:	3304      	adds	r3, #4
 8000a68:	601a      	str	r2, [r3, #0]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
 8000a6a:	e027      	b.n	8000abc <NVIC_SetPriority+0xcc>
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8000a6c:	4c16      	ldr	r4, [pc, #88]	; (8000ac8 <NVIC_SetPriority+0xd8>)
 8000a6e:	1dfb      	adds	r3, r7, #7
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	b25b      	sxtb	r3, r3
 8000a74:	089b      	lsrs	r3, r3, #2
 8000a76:	4914      	ldr	r1, [pc, #80]	; (8000ac8 <NVIC_SetPriority+0xd8>)
 8000a78:	1dfa      	adds	r2, r7, #7
 8000a7a:	7812      	ldrb	r2, [r2, #0]
 8000a7c:	b252      	sxtb	r2, r2
 8000a7e:	0892      	lsrs	r2, r2, #2
 8000a80:	32c0      	adds	r2, #192	; 0xc0
 8000a82:	0092      	lsls	r2, r2, #2
 8000a84:	5852      	ldr	r2, [r2, r1]
 8000a86:	1df9      	adds	r1, r7, #7
 8000a88:	7809      	ldrb	r1, [r1, #0]
 8000a8a:	0008      	movs	r0, r1
 8000a8c:	2103      	movs	r1, #3
 8000a8e:	4001      	ands	r1, r0
 8000a90:	00c9      	lsls	r1, r1, #3
 8000a92:	20ff      	movs	r0, #255	; 0xff
 8000a94:	4088      	lsls	r0, r1
 8000a96:	0001      	movs	r1, r0
 8000a98:	43c9      	mvns	r1, r1
 8000a9a:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 8000a9c:	683a      	ldr	r2, [r7, #0]
 8000a9e:	0192      	lsls	r2, r2, #6
 8000aa0:	20ff      	movs	r0, #255	; 0xff
 8000aa2:	4010      	ands	r0, r2
 8000aa4:	1dfa      	adds	r2, r7, #7
 8000aa6:	7812      	ldrb	r2, [r2, #0]
 8000aa8:	0015      	movs	r5, r2
 8000aaa:	2203      	movs	r2, #3
 8000aac:	402a      	ands	r2, r5
 8000aae:	00d2      	lsls	r2, r2, #3
 8000ab0:	4090      	lsls	r0, r2
 8000ab2:	0002      	movs	r2, r0
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	33c0      	adds	r3, #192	; 0xc0
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	511a      	str	r2, [r3, r4]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
 8000abc:	46c0      	nop			; (mov r8, r8)
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	b002      	add	sp, #8
 8000ac2:	bdb0      	pop	{r4, r5, r7, pc}
 8000ac4:	e000ed00 	.word	0xe000ed00
 8000ac8:	e000e100 	.word	0xe000e100

08000acc <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	4a0c      	ldr	r2, [pc, #48]	; (8000b0c <SysTick_Config+0x40>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d901      	bls.n	8000ae2 <SysTick_Config+0x16>
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e010      	b.n	8000b04 <SysTick_Config+0x38>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <SysTick_Config+0x44>)
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	3a01      	subs	r2, #1
 8000ae8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8000aea:	2301      	movs	r3, #1
 8000aec:	425b      	negs	r3, r3
 8000aee:	2103      	movs	r1, #3
 8000af0:	0018      	movs	r0, r3
 8000af2:	f7ff ff7d 	bl	80009f0 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <SysTick_Config+0x44>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000afc:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <SysTick_Config+0x44>)
 8000afe:	2207      	movs	r2, #7
 8000b00:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000b02:	2300      	movs	r3, #0
}
 8000b04:	0018      	movs	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	b002      	add	sp, #8
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	00ffffff 	.word	0x00ffffff
 8000b10:	e000e010 	.word	0xe000e010

08000b14 <SysTick_Handler>:
**  Abstract: SysTick interrupt handler
**
**===========================================================================
*/
void SysTick_Handler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
	if(delayTimer)
 8000b18:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <SysTick_Handler+0x3c>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d004      	beq.n	8000b2a <SysTick_Handler+0x16>
	{
		delayTimer--;
 8000b20:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <SysTick_Handler+0x3c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	1e5a      	subs	r2, r3, #1
 8000b26:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <SysTick_Handler+0x3c>)
 8000b28:	601a      	str	r2, [r3, #0]
	}
	timer++;
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <SysTick_Handler+0x40>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	1c5a      	adds	r2, r3, #1
 8000b30:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <SysTick_Handler+0x40>)
 8000b32:	601a      	str	r2, [r3, #0]

	if  (timer>100)
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <SysTick_Handler+0x40>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b64      	cmp	r3, #100	; 0x64
 8000b3a:	d905      	bls.n	8000b48 <SysTick_Handler+0x34>
	{
		timerFlag = 1;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <SysTick_Handler+0x44>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	701a      	strb	r2, [r3, #0]
		timer = 0;
 8000b42:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <SysTick_Handler+0x40>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
	}
}
 8000b48:	46c0      	nop			; (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	20000114 	.word	0x20000114
 8000b54:	200000dc 	.word	0x200000dc
 8000b58:	200000e0 	.word	0x200000e0

08000b5c <delay>:


void delay(uint32_t ticks)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	delayTimer = ticks;
 8000b64:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <delay+0x20>)
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	601a      	str	r2, [r3, #0]
	while(delayTimer > 0);
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	4b03      	ldr	r3, [pc, #12]	; (8000b7c <delay+0x20>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d1fb      	bne.n	8000b6c <delay+0x10>
}
 8000b74:	46c0      	nop			; (mov r8, r8)
 8000b76:	46bd      	mov	sp, r7
 8000b78:	b002      	add	sp, #8
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000114 	.word	0x20000114

08000b80 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
	SystemInit();
 8000b86:	f7ff fdff 	bl	8000788 <SystemInit>
	SystemCoreClockUpdate();
 8000b8a:	f7ff fe45 	bl	8000818 <SystemCoreClockUpdate>
	//the systick timer runs with 6MHz
	//config the timer for 1ms interval
	SysTick_Config(SystemCoreClock / 8 / 1000);
 8000b8e:	4b2f      	ldr	r3, [pc, #188]	; (8000c4c <main+0xcc>)
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	23fa      	movs	r3, #250	; 0xfa
 8000b94:	0159      	lsls	r1, r3, #5
 8000b96:	0010      	movs	r0, r2
 8000b98:	f7ff fab6 	bl	8000108 <__aeabi_uidiv>
 8000b9c:	0003      	movs	r3, r0
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f7ff ff94 	bl	8000acc <SysTick_Config>
	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8);
 8000ba4:	2305      	movs	r3, #5
 8000ba6:	425b      	negs	r3, r3
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f003 f821 	bl	8003bf0 <SysTick_CLKSourceConfig>



	//init the drivers
	//TODO: the dbgLed kills the USB!!
	dbgLED_init();
 8000bae:	f000 f941 	bl	8000e34 <dbgLED_init>
	dbgLED_on();
 8000bb2:	f000 f945 	bl	8000e40 <dbgLED_on>
	delay(500);
 8000bb6:	23fa      	movs	r3, #250	; 0xfa
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f7ff ffce 	bl	8000b5c <delay>
	dbgLED_off();
 8000bc0:	f000 f944 	bl	8000e4c <dbgLED_off>
	delay(500);
 8000bc4:	23fa      	movs	r3, #250	; 0xfa
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f7ff ffc7 	bl	8000b5c <delay>
	USB_Init();
 8000bce:	f000 f84b 	bl	8000c68 <USB_Init>
	delay(1000);
 8000bd2:	23fa      	movs	r3, #250	; 0xfa
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f7ff ffc0 	bl	8000b5c <delay>

	while(1)
	{
		if(timerFlag)
 8000bdc:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <main+0xd0>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d0fb      	beq.n	8000bdc <main+0x5c>
		{
			timerFlag = 0;
 8000be4:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <main+0xd0>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	701a      	strb	r2, [r3, #0]
			if(USB_Flags & USB_FLAG_FIRST_CONTACT)
 8000bea:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <main+0xd4>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	001a      	movs	r2, r3
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	d00b      	beq.n	8000c0e <main+0x8e>
			{
				USB_Flags &= ~USB_FLAG_FIRST_CONTACT;
 8000bf6:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <main+0xd4>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	2204      	movs	r2, #4
 8000bfc:	4393      	bics	r3, r2
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <main+0xd4>)
 8000c02:	701a      	strb	r2, [r3, #0]
				USB_VCP_DataTx((uint8_t*)"----POV_USBDemo----\n",20);
 8000c04:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <main+0xd8>)
 8000c06:	2114      	movs	r1, #20
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f000 f891 	bl	8000d30 <USB_VCP_DataTx>
			}

			if(USB_Flags & USB_FLAG_NEW_DATA)
 8000c0e:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <main+0xd4>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	001a      	movs	r2, r3
 8000c14:	2301      	movs	r3, #1
 8000c16:	4013      	ands	r3, r2
 8000c18:	d0e0      	beq.n	8000bdc <main+0x5c>
			{
				USB_VCP_DataTx((uint8_t*)"you typed: ",11);
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <main+0xdc>)
 8000c1c:	210b      	movs	r1, #11
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f000 f886 	bl	8000d30 <USB_VCP_DataTx>
				uint8_t count = USB_ReadAvailable((uint8_t*)tempstring);
 8000c24:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <main+0xe0>)
 8000c26:	0018      	movs	r0, r3
 8000c28:	f000 f8d8 	bl	8000ddc <USB_ReadAvailable>
 8000c2c:	0002      	movs	r2, r0
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	701a      	strb	r2, [r3, #0]

				USB_VCP_DataTx((uint8_t*)tempstring,count);
 8000c32:	1dfb      	adds	r3, r7, #7
 8000c34:	781a      	ldrb	r2, [r3, #0]
 8000c36:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <main+0xe0>)
 8000c38:	0011      	movs	r1, r2
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f000 f878 	bl	8000d30 <USB_VCP_DataTx>
				USB_VCP_DataTx((uint8_t*)"\n",1);
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <main+0xe4>)
 8000c42:	2101      	movs	r1, #1
 8000c44:	0018      	movs	r0, r3
 8000c46:	f000 f873 	bl	8000d30 <USB_VCP_DataTx>
			}

		}
	}
 8000c4a:	e7c7      	b.n	8000bdc <main+0x5c>
 8000c4c:	2000004c 	.word	0x2000004c
 8000c50:	200000e0 	.word	0x200000e0
 8000c54:	20000112 	.word	0x20000112
 8000c58:	08003d84 	.word	0x08003d84
 8000c5c:	08003d9c 	.word	0x08003d9c
 8000c60:	20000118 	.word	0x20000118
 8000c64:	08003da8 	.word	0x08003da8

08000c68 <USB_Init>:
};

/* Private functions ---------------------------------------------------------*/

void USB_Init()
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0


	//remap Pins PA11/12
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	2001      	movs	r0, #1
 8000c70:	f002 ff28 	bl	8003ac4 <RCC_APB2PeriphClockCmd>
	SYSCFG->CFGR1 |= SYSCFG_CFGR1_PA11_PA12_RMP;
 8000c74:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <USB_Init+0x48>)
 8000c76:	4a0e      	ldr	r2, [pc, #56]	; (8000cb0 <USB_Init+0x48>)
 8000c78:	6812      	ldr	r2, [r2, #0]
 8000c7a:	2110      	movs	r1, #16
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	601a      	str	r2, [r3, #0]

	USBD_Init(&USB_Device_dev,
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <USB_Init+0x4c>)
 8000c82:	4a0d      	ldr	r2, [pc, #52]	; (8000cb8 <USB_Init+0x50>)
 8000c84:	490d      	ldr	r1, [pc, #52]	; (8000cbc <USB_Init+0x54>)
 8000c86:	480e      	ldr	r0, [pc, #56]	; (8000cc0 <USB_Init+0x58>)
 8000c88:	f000 fe50 	bl	800192c <USBD_Init>
				&USR_desc,
				&USBD_CDC_cb,
				&USR_cb);
	USB_Flags &= ~USB_FLAG_NEW_DATA;
 8000c8c:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <USB_Init+0x5c>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2201      	movs	r2, #1
 8000c92:	4393      	bics	r3, r2
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <USB_Init+0x5c>)
 8000c98:	701a      	strb	r2, [r3, #0]
	UsbPcSendBuf.read = 0;
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <USB_Init+0x60>)
 8000c9c:	2280      	movs	r2, #128	; 0x80
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	5099      	str	r1, [r3, r2]
	UsbPcSendBuf.write = 0;
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <USB_Init+0x60>)
 8000ca4:	2284      	movs	r2, #132	; 0x84
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	5099      	str	r1, [r3, r2]
}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40010000 	.word	0x40010000
 8000cb4:	20000000 	.word	0x20000000
 8000cb8:	20000098 	.word	0x20000098
 8000cbc:	20000014 	.word	0x20000014
 8000cc0:	200001c0 	.word	0x200001c0
 8000cc4:	20000112 	.word	0x20000112
 8000cc8:	20000138 	.word	0x20000138

08000ccc <USB_VCP_Init>:
  *         Initializes the Media on the STM32
  * @param  None
  * @retval Result of the operation (USBD_OK in all cases)
  */
uint16_t USB_VCP_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0

  return USBD_OK;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <USB_VCP_DeInit>:
  *         DeInitializes the Media on the STM32
  * @param  None
  * @retval Result of the opeartion (USBD_OK in all cases)
  */
uint16_t USB_VCP_DeInit(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0

  return USBD_OK;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	0018      	movs	r0, r3
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <USB_VCP_Ctrl>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation (USBD_OK in all cases)
  */
uint16_t USB_VCP_Ctrl (uint32_t Cmd, uint8_t* Buf, uint32_t Len)
{ 
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]

	switch(Cmd)
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	2b20      	cmp	r3, #32
 8000cf4:	d114      	bne.n	8000d20 <USB_VCP_Ctrl+0x3c>
	{
	//if we receive this command, we know that a terminal connection is being opened!
	case SET_LINE_CODING:
		if(!(USB_Flags & USB_FLAG_CDC_OPEN))
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <USB_VCP_Ctrl+0x48>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	001a      	movs	r2, r3
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	4013      	ands	r3, r2
 8000d00:	d10d      	bne.n	8000d1e <USB_VCP_Ctrl+0x3a>
		{
			USB_Flags |= USB_FLAG_CDC_OPEN;
 8000d02:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <USB_VCP_Ctrl+0x48>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2202      	movs	r2, #2
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	4b07      	ldr	r3, [pc, #28]	; (8000d2c <USB_VCP_Ctrl+0x48>)
 8000d0e:	701a      	strb	r2, [r3, #0]
			USB_Flags |= USB_FLAG_FIRST_CONTACT;
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <USB_VCP_Ctrl+0x48>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2204      	movs	r2, #4
 8000d16:	4313      	orrs	r3, r2
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <USB_VCP_Ctrl+0x48>)
 8000d1c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000d1e:	46c0      	nop			; (mov r8, r8)
	}
	return USBD_OK;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	0018      	movs	r0, r3
 8000d24:	46bd      	mov	sp, r7
 8000d26:	b004      	add	sp, #16
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	20000112 	.word	0x20000112

08000d30 <USB_VCP_DataTx>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else VCP_FAIL
  */
uint16_t USB_VCP_DataTx (uint8_t* Buf, uint32_t Len)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]

	for(uint32_t i = 0; i < Len; i++)
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	e018      	b.n	8000d72 <USB_VCP_DataTx+0x42>
	{
		APP_Rx_Buffer[APP_Rx_ptr_in] = Buf[i];
 8000d40:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <USB_VCP_DataTx+0x54>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	6879      	ldr	r1, [r7, #4]
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	188a      	adds	r2, r1, r2
 8000d4a:	7811      	ldrb	r1, [r2, #0]
 8000d4c:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <USB_VCP_DataTx+0x58>)
 8000d4e:	54d1      	strb	r1, [r2, r3]
		APP_Rx_ptr_in++;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <USB_VCP_DataTx+0x54>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	1c5a      	adds	r2, r3, #1
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <USB_VCP_DataTx+0x54>)
 8000d58:	601a      	str	r2, [r3, #0]

		/* To avoid buffer overflow */
		if(APP_Rx_ptr_in == APP_RX_DATA_SIZE)
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <USB_VCP_DataTx+0x54>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	2380      	movs	r3, #128	; 0x80
 8000d60:	011b      	lsls	r3, r3, #4
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d102      	bne.n	8000d6c <USB_VCP_DataTx+0x3c>
		{
			APP_Rx_ptr_in = 0;
 8000d66:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <USB_VCP_DataTx+0x54>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
  * @retval Result of the operation: USBD_OK if all operations are OK else VCP_FAIL
  */
uint16_t USB_VCP_DataTx (uint8_t* Buf, uint32_t Len)
{

	for(uint32_t i = 0; i < Len; i++)
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d3e2      	bcc.n	8000d40 <USB_VCP_DataTx+0x10>
		{
			APP_Rx_ptr_in = 0;
		}
	}

  return USBD_OK;
 8000d7a:	2300      	movs	r3, #0
}
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	b004      	add	sp, #16
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	200000f4 	.word	0x200000f4
 8000d88:	200004b4 	.word	0x200004b4

08000d8c <USB_VCP_DataRx>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else VCP_FAIL
  */
uint16_t USB_VCP_DataRx (uint8_t* Buf, uint32_t Len)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
	USB_Flags |= USB_FLAG_NEW_DATA;
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <USB_VCP_DataRx+0x48>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <USB_VCP_DataRx+0x48>)
 8000da2:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = 0; i < Len; i++)
 8000da4:	2300      	movs	r3, #0
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	e00b      	b.n	8000dc2 <USB_VCP_DataRx+0x36>
	{
		FifoIn(&UsbPcSendBuf, Buf[i]);
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	18d3      	adds	r3, r2, r3
 8000db0:	781a      	ldrb	r2, [r3, #0]
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <USB_VCP_DataRx+0x4c>)
 8000db4:	0011      	movs	r1, r2
 8000db6:	0018      	movs	r0, r3
 8000db8:	f7ff fa32 	bl	8000220 <FifoIn>
  * @retval Result of the operation: USBD_OK if all operations are OK else VCP_FAIL
  */
uint16_t USB_VCP_DataRx (uint8_t* Buf, uint32_t Len)
{
	USB_Flags |= USB_FLAG_NEW_DATA;
	for(uint32_t i = 0; i < Len; i++)
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	68fa      	ldr	r2, [r7, #12]
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d3ef      	bcc.n	8000daa <USB_VCP_DataRx+0x1e>
	{
		FifoIn(&UsbPcSendBuf, Buf[i]);
	}
	return USBD_OK;
 8000dca:	2300      	movs	r3, #0
}
 8000dcc:	0018      	movs	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	b004      	add	sp, #16
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000112 	.word	0x20000112
 8000dd8:	20000138 	.word	0x20000138

08000ddc <USB_ReadAvailable>:
	}
	return (char)tempByte;
}

uint32_t USB_ReadAvailable(uint8_t* string)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	USB_Flags &= ~USB_FLAG_NEW_DATA;
 8000de4:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <USB_ReadAvailable+0x50>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2201      	movs	r2, #1
 8000dea:	4393      	bics	r3, r2
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <USB_ReadAvailable+0x50>)
 8000df0:	701a      	strb	r2, [r3, #0]
	uint32_t count = FifoCount(&UsbPcSendBuf);
 8000df2:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <USB_ReadAvailable+0x54>)
 8000df4:	0018      	movs	r0, r3
 8000df6:	f7ff fa5d 	bl	80002b4 <FifoCount>
 8000dfa:	0003      	movs	r3, r0
 8000dfc:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < count; i++)
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	e00a      	b.n	8000e1a <USB_ReadAvailable+0x3e>
	{
		FifoOut(&UsbPcSendBuf,(uint8_t*)string+i);
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	18d2      	adds	r2, r2, r3
 8000e0a:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <USB_ReadAvailable+0x54>)
 8000e0c:	0011      	movs	r1, r2
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f7ff fa2c 	bl	800026c <FifoOut>

uint32_t USB_ReadAvailable(uint8_t* string)
{
	USB_Flags &= ~USB_FLAG_NEW_DATA;
	uint32_t count = FifoCount(&UsbPcSendBuf);
	for (uint32_t i = 0; i < count; i++)
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	3301      	adds	r3, #1
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d3f0      	bcc.n	8000e04 <USB_ReadAvailable+0x28>
	{
		FifoOut(&UsbPcSendBuf,(uint8_t*)string+i);
	}
	return count;
 8000e22:	68bb      	ldr	r3, [r7, #8]
}
 8000e24:	0018      	movs	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	b004      	add	sp, #16
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000112 	.word	0x20000112
 8000e30:	20000138 	.word	0x20000138

08000e34 <dbgLED_init>:
#include "dbgLED.h"
#include "stm32f0xx_gpio.h"
#include "stm32f0xx_rcc.h"

void dbgLED_init()
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
#endif
}
 8000e38:	46c0      	nop			; (mov r8, r8)
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	46c0      	nop			; (mov r8, r8)

08000e40 <dbgLED_on>:

void dbgLED_on()
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
#ifdef	DBG_LED_ENABLED
	GPIO_WriteBit(GPIOA,GPIO_Pin_14,Bit_SET);
#endif
}
 8000e44:	46c0      	nop			; (mov r8, r8)
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	46c0      	nop			; (mov r8, r8)

08000e4c <dbgLED_off>:
void dbgLED_off()
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
#ifdef	DBG_LED_ENABLED
	GPIO_WriteBit(GPIOA,GPIO_Pin_14,Bit_RESET);
#endif
}
 8000e50:	46c0      	nop			; (mov r8, r8)
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	46c0      	nop			; (mov r8, r8)

08000e58 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_Status  USBD_StdDevReq (USB_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
  USBD_Status ret = USBD_OK;  
 8000e62:	230f      	movs	r3, #15
 8000e64:	18fb      	adds	r3, r7, r3
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]
  
  switch (req->bRequest) 
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	785b      	ldrb	r3, [r3, #1]
 8000e6e:	2b09      	cmp	r3, #9
 8000e70:	d835      	bhi.n	8000ede <USBD_StdDevReq+0x86>
 8000e72:	009a      	lsls	r2, r3, #2
 8000e74:	4b21      	ldr	r3, [pc, #132]	; (8000efc <USBD_StdDevReq+0xa4>)
 8000e76:	18d3      	adds	r3, r2, r3
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	469f      	mov	pc, r3
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8000e7c:	683a      	ldr	r2, [r7, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	0011      	movs	r1, r2
 8000e82:	0018      	movs	r0, r3
 8000e84:	f000 f98e 	bl	80011a4 <USBD_GetDescriptor>
    break;
 8000e88:	e030      	b.n	8000eec <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8000e8a:	683a      	ldr	r2, [r7, #0]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	0011      	movs	r1, r2
 8000e90:	0018      	movs	r0, r3
 8000e92:	f000 fa6f 	bl	8001374 <USBD_SetAddress>
    break;
 8000e96:	e029      	b.n	8000eec <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8000e98:	683a      	ldr	r2, [r7, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	0011      	movs	r1, r2
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f000 fab0 	bl	8001404 <USBD_SetConfig>
    break;
 8000ea4:	e022      	b.n	8000eec <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 8000ea6:	683a      	ldr	r2, [r7, #0]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	0011      	movs	r1, r2
 8000eac:	0018      	movs	r0, r3
 8000eae:	f000 fb27 	bl	8001500 <USBD_GetConfig>
    break;
 8000eb2:	e01b      	b.n	8000eec <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8000eb4:	683a      	ldr	r2, [r7, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	0011      	movs	r1, r2
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f000 fb54 	bl	8001568 <USBD_GetStatus>
    break;
 8000ec0:	e014      	b.n	8000eec <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 8000ec2:	683a      	ldr	r2, [r7, #0]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	0011      	movs	r1, r2
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f000 fb77 	bl	80015bc <USBD_SetFeature>
    break;
 8000ece:	e00d      	b.n	8000eec <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8000ed0:	683a      	ldr	r2, [r7, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	0011      	movs	r1, r2
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f000 fb8e 	bl	80015f8 <USBD_ClrFeature>
    break;
 8000edc:	e006      	b.n	8000eec <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 8000ede:	683a      	ldr	r2, [r7, #0]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	0011      	movs	r1, r2
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f000 fbf1 	bl	80016cc <USBD_CtlError>
    break;
 8000eea:	46c0      	nop			; (mov r8, r8)
  }
  
  return ret;
 8000eec:	230f      	movs	r3, #15
 8000eee:	18fb      	adds	r3, r7, r3
 8000ef0:	781b      	ldrb	r3, [r3, #0]
}
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	b004      	add	sp, #16
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	08003ddc 	.word	0x08003ddc

08000f00 <USBD_StdItfReq>:
  * @param  pdev: USB device instance
  * @param  req: usb request
  * @retval status
  */
USBD_Status  USBD_StdItfReq (USB_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  USBD_Status ret = USBD_OK; 
 8000f0a:	230f      	movs	r3, #15
 8000f0c:	18fb      	adds	r3, r7, r3
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
  
  switch (pdev->dev.device_status) 
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	789b      	ldrb	r3, [r3, #2]
 8000f16:	2b03      	cmp	r3, #3
 8000f18:	d126      	bne.n	8000f68 <USBD_StdItfReq+0x68>
  {
  case USB_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_ITF_MAX_NUM) 
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	889b      	ldrh	r3, [r3, #4]
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d81a      	bhi.n	8000f5a <USBD_StdItfReq+0x5a>
    {
      ret = (USBD_Status) (pdev->dev.class_cb->Setup (pdev, req)); 
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	23ac      	movs	r3, #172	; 0xac
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	58d3      	ldr	r3, [r2, r3]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	220f      	movs	r2, #15
 8000f30:	18bc      	adds	r4, r7, r2
 8000f32:	6839      	ldr	r1, [r7, #0]
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	0010      	movs	r0, r2
 8000f38:	4798      	blx	r3
 8000f3a:	0003      	movs	r3, r0
 8000f3c:	7023      	strb	r3, [r4, #0]
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	88db      	ldrh	r3, [r3, #6]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d117      	bne.n	8000f76 <USBD_StdItfReq+0x76>
 8000f46:	230f      	movs	r3, #15
 8000f48:	18fb      	adds	r3, r7, r3
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d112      	bne.n	8000f76 <USBD_StdItfReq+0x76>
      {
         USBD_CtlSendStatus(pdev);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	0018      	movs	r0, r3
 8000f54:	f000 fcba 	bl	80018cc <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8000f58:	e00d      	b.n	8000f76 <USBD_StdItfReq+0x76>
         USBD_CtlSendStatus(pdev);
      }
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
 8000f5a:	683a      	ldr	r2, [r7, #0]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	0011      	movs	r1, r2
 8000f60:	0018      	movs	r0, r3
 8000f62:	f000 fbb3 	bl	80016cc <USBD_CtlError>
    }
    break;
 8000f66:	e006      	b.n	8000f76 <USBD_StdItfReq+0x76>
    
  default:
     USBD_CtlError(pdev , req);
 8000f68:	683a      	ldr	r2, [r7, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	0011      	movs	r1, r2
 8000f6e:	0018      	movs	r0, r3
 8000f70:	f000 fbac 	bl	80016cc <USBD_CtlError>
    break;
 8000f74:	e000      	b.n	8000f78 <USBD_StdItfReq+0x78>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8000f76:	46c0      	nop			; (mov r8, r8)
    
  default:
     USBD_CtlError(pdev , req);
    break;
  }
  return ret;
 8000f78:	230f      	movs	r3, #15
 8000f7a:	18fb      	adds	r3, r7, r3
 8000f7c:	781b      	ldrb	r3, [r3, #0]
}
 8000f7e:	0018      	movs	r0, r3
 8000f80:	46bd      	mov	sp, r7
 8000f82:	b005      	add	sp, #20
 8000f84:	bd90      	pop	{r4, r7, pc}
 8000f86:	46c0      	nop			; (mov r8, r8)

08000f88 <USBD_StdEPReq>:
  * @param  pdev: USB device instance
  * @param  req: usb request
  * @retval status
  */
USBD_Status  USBD_StdEPReq (USB_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  uint32_t USBD_ep_status  = 0; 
 8000f92:	2300      	movs	r3, #0
 8000f94:	60bb      	str	r3, [r7, #8]
  USBD_Status ret = USBD_OK; 
 8000f96:	230f      	movs	r3, #15
 8000f98:	18fb      	adds	r3, r7, r3
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
  
  ep_addr  = LOBYTE(req->wIndex);   
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	889a      	ldrh	r2, [r3, #4]
 8000fa2:	230e      	movs	r3, #14
 8000fa4:	18fb      	adds	r3, r7, r3
 8000fa6:	701a      	strb	r2, [r3, #0]
  
  switch (req->bRequest) 
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	785b      	ldrb	r3, [r3, #1]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d04c      	beq.n	800104a <USBD_StdEPReq+0xc2>
 8000fb0:	2b03      	cmp	r3, #3
 8000fb2:	d003      	beq.n	8000fbc <USBD_StdEPReq+0x34>
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d100      	bne.n	8000fba <USBD_StdEPReq+0x32>
 8000fb8:	e08e      	b.n	80010d8 <USBD_StdEPReq+0x150>
      break;
    }
    break;
    
  default:
    break;
 8000fba:	e0ec      	b.n	8001196 <USBD_StdEPReq+0x20e>
  
  switch (req->bRequest) 
  {  
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev.device_status) 
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	789b      	ldrb	r3, [r3, #2]
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d002      	beq.n	8000fca <USBD_StdEPReq+0x42>
 8000fc4:	2b03      	cmp	r3, #3
 8000fc6:	d013      	beq.n	8000ff0 <USBD_StdEPReq+0x68>
 8000fc8:	e036      	b.n	8001038 <USBD_StdEPReq+0xb0>
    {
    case USB_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8000fca:	230e      	movs	r3, #14
 8000fcc:	18fb      	adds	r3, r7, r3
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d038      	beq.n	8001046 <USBD_StdEPReq+0xbe>
 8000fd4:	230e      	movs	r3, #14
 8000fd6:	18fb      	adds	r3, r7, r3
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b80      	cmp	r3, #128	; 0x80
 8000fdc:	d033      	beq.n	8001046 <USBD_StdEPReq+0xbe>
      {
        DCD_EP_Stall(pdev , ep_addr);
 8000fde:	230e      	movs	r3, #14
 8000fe0:	18fb      	adds	r3, r7, r3
 8000fe2:	781a      	ldrb	r2, [r3, #0]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	0011      	movs	r1, r2
 8000fe8:	0018      	movs	r0, r3
 8000fea:	f001 ff7b 	bl	8002ee4 <DCD_EP_Stall>
      }
      break;	
 8000fee:	e02a      	b.n	8001046 <USBD_StdEPReq+0xbe>
      
    case USB_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	885b      	ldrh	r3, [r3, #2]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d111      	bne.n	800101c <USBD_StdEPReq+0x94>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8000ff8:	230e      	movs	r3, #14
 8000ffa:	18fb      	adds	r3, r7, r3
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d00c      	beq.n	800101c <USBD_StdEPReq+0x94>
 8001002:	230e      	movs	r3, #14
 8001004:	18fb      	adds	r3, r7, r3
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b80      	cmp	r3, #128	; 0x80
 800100a:	d007      	beq.n	800101c <USBD_StdEPReq+0x94>
        { 
          DCD_EP_Stall(pdev , ep_addr);
 800100c:	230e      	movs	r3, #14
 800100e:	18fb      	adds	r3, r7, r3
 8001010:	781a      	ldrb	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	0011      	movs	r1, r2
 8001016:	0018      	movs	r0, r3
 8001018:	f001 ff64 	bl	8002ee4 <DCD_EP_Stall>
          
        }
      }
      pdev->dev.class_cb->Setup (pdev, req);   
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	23ac      	movs	r3, #172	; 0xac
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	58d3      	ldr	r3, [r2, r3]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	6839      	ldr	r1, [r7, #0]
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	0010      	movs	r0, r2
 800102c:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	0018      	movs	r0, r3
 8001032:	f000 fc4b 	bl	80018cc <USBD_CtlSendStatus>
      
      break;
 8001036:	e007      	b.n	8001048 <USBD_StdEPReq+0xc0>
      
    default:                         
      USBD_CtlError(pdev , req);
 8001038:	683a      	ldr	r2, [r7, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	0011      	movs	r1, r2
 800103e:	0018      	movs	r0, r3
 8001040:	f000 fb44 	bl	80016cc <USBD_CtlError>
      break;    
 8001044:	e000      	b.n	8001048 <USBD_StdEPReq+0xc0>
    case USB_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
      {
        DCD_EP_Stall(pdev , ep_addr);
      }
      break;	
 8001046:	46c0      	nop			; (mov r8, r8)
      
    default:                         
      USBD_CtlError(pdev , req);
      break;    
    }
    break;
 8001048:	e0a5      	b.n	8001196 <USBD_StdEPReq+0x20e>
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev.device_status) 
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	789b      	ldrb	r3, [r3, #2]
 800104e:	2b02      	cmp	r3, #2
 8001050:	d002      	beq.n	8001058 <USBD_StdEPReq+0xd0>
 8001052:	2b03      	cmp	r3, #3
 8001054:	d013      	beq.n	800107e <USBD_StdEPReq+0xf6>
 8001056:	e036      	b.n	80010c6 <USBD_StdEPReq+0x13e>
    {
    case USB_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8001058:	230e      	movs	r3, #14
 800105a:	18fb      	adds	r3, r7, r3
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d038      	beq.n	80010d4 <USBD_StdEPReq+0x14c>
 8001062:	230e      	movs	r3, #14
 8001064:	18fb      	adds	r3, r7, r3
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b80      	cmp	r3, #128	; 0x80
 800106a:	d033      	beq.n	80010d4 <USBD_StdEPReq+0x14c>
      {
        DCD_EP_Stall(pdev , ep_addr);
 800106c:	230e      	movs	r3, #14
 800106e:	18fb      	adds	r3, r7, r3
 8001070:	781a      	ldrb	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	0011      	movs	r1, r2
 8001076:	0018      	movs	r0, r3
 8001078:	f001 ff34 	bl	8002ee4 <DCD_EP_Stall>
      }
      break;	
 800107c:	e02a      	b.n	80010d4 <USBD_StdEPReq+0x14c>
      
    case USB_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	885b      	ldrh	r3, [r3, #2]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d111      	bne.n	80010aa <USBD_StdEPReq+0x122>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8001086:	230e      	movs	r3, #14
 8001088:	18fb      	adds	r3, r7, r3
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d00c      	beq.n	80010aa <USBD_StdEPReq+0x122>
 8001090:	230e      	movs	r3, #14
 8001092:	18fb      	adds	r3, r7, r3
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b80      	cmp	r3, #128	; 0x80
 8001098:	d007      	beq.n	80010aa <USBD_StdEPReq+0x122>
        {        
          DCD_EP_ClrStall(pdev , ep_addr);
 800109a:	230e      	movs	r3, #14
 800109c:	18fb      	adds	r3, r7, r3
 800109e:	781a      	ldrb	r2, [r3, #0]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	0011      	movs	r1, r2
 80010a4:	0018      	movs	r0, r3
 80010a6:	f001 ff8b 	bl	8002fc0 <DCD_EP_ClrStall>
        }
      }
      pdev->dev.class_cb->Setup (pdev, req);
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	23ac      	movs	r3, #172	; 0xac
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	58d3      	ldr	r3, [r2, r3]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	6839      	ldr	r1, [r7, #0]
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	0010      	movs	r0, r2
 80010ba:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	0018      	movs	r0, r3
 80010c0:	f000 fc04 	bl	80018cc <USBD_CtlSendStatus>
      break;
 80010c4:	e007      	b.n	80010d6 <USBD_StdEPReq+0x14e>
      
    default:                         
       USBD_CtlError(pdev , req);
 80010c6:	683a      	ldr	r2, [r7, #0]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	0011      	movs	r1, r2
 80010cc:	0018      	movs	r0, r3
 80010ce:	f000 fafd 	bl	80016cc <USBD_CtlError>
      break;    
 80010d2:	e000      	b.n	80010d6 <USBD_StdEPReq+0x14e>
    case USB_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
      {
        DCD_EP_Stall(pdev , ep_addr);
      }
      break;	
 80010d4:	46c0      	nop			; (mov r8, r8)
      
    default:                         
       USBD_CtlError(pdev , req);
      break;    
    }
    break;
 80010d6:	e05e      	b.n	8001196 <USBD_StdEPReq+0x20e>
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev.device_status) 
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	789b      	ldrb	r3, [r3, #2]
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d002      	beq.n	80010e6 <USBD_StdEPReq+0x15e>
 80010e0:	2b03      	cmp	r3, #3
 80010e2:	d013      	beq.n	800110c <USBD_StdEPReq+0x184>
 80010e4:	e04e      	b.n	8001184 <USBD_StdEPReq+0x1fc>
    {
    case USB_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80010e6:	230e      	movs	r3, #14
 80010e8:	18fb      	adds	r3, r7, r3
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d050      	beq.n	8001192 <USBD_StdEPReq+0x20a>
 80010f0:	230e      	movs	r3, #14
 80010f2:	18fb      	adds	r3, r7, r3
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b80      	cmp	r3, #128	; 0x80
 80010f8:	d04b      	beq.n	8001192 <USBD_StdEPReq+0x20a>
      {
        DCD_EP_Stall(pdev , ep_addr);
 80010fa:	230e      	movs	r3, #14
 80010fc:	18fb      	adds	r3, r7, r3
 80010fe:	781a      	ldrb	r2, [r3, #0]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	0011      	movs	r1, r2
 8001104:	0018      	movs	r0, r3
 8001106:	f001 feed 	bl	8002ee4 <DCD_EP_Stall>
      }
      break;	
 800110a:	e042      	b.n	8001192 <USBD_StdEPReq+0x20a>
      
    case USB_CONFIGURED:         
      
      if ((ep_addr & 0x80)== 0x80)
 800110c:	230e      	movs	r3, #14
 800110e:	18fb      	adds	r3, r7, r3
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	b25b      	sxtb	r3, r3
 8001114:	2b00      	cmp	r3, #0
 8001116:	da14      	bge.n	8001142 <USBD_StdEPReq+0x1ba>
      {
        if(pdev->dev.in_ep[ep_addr & 0x7F].is_stall)
 8001118:	230e      	movs	r3, #14
 800111a:	18fb      	adds	r3, r7, r3
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	227f      	movs	r2, #127	; 0x7f
 8001120:	401a      	ands	r2, r3
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	0013      	movs	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	189b      	adds	r3, r3, r2
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	18cb      	adds	r3, r1, r3
 800112e:	331a      	adds	r3, #26
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d002      	beq.n	800113c <USBD_StdEPReq+0x1b4>
        {
          USBD_ep_status = 0x0001;     
 8001136:	2301      	movs	r3, #1
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	e01b      	b.n	8001174 <USBD_StdEPReq+0x1ec>
        }
        else
        {
          USBD_ep_status = 0x0000;  
 800113c:	2300      	movs	r3, #0
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	e018      	b.n	8001174 <USBD_StdEPReq+0x1ec>
        }
      }
      else if ((ep_addr & 0x80)== 0x00)
 8001142:	230e      	movs	r3, #14
 8001144:	18fb      	adds	r3, r7, r3
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	b25b      	sxtb	r3, r3
 800114a:	2b00      	cmp	r3, #0
 800114c:	db12      	blt.n	8001174 <USBD_StdEPReq+0x1ec>
      {
        if(pdev->dev.out_ep[ep_addr].is_stall)
 800114e:	230e      	movs	r3, #14
 8001150:	18fb      	adds	r3, r7, r3
 8001152:	781a      	ldrb	r2, [r3, #0]
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	20ba      	movs	r0, #186	; 0xba
 8001158:	0013      	movs	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	189b      	adds	r3, r3, r2
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	18cb      	adds	r3, r1, r3
 8001162:	181b      	adds	r3, r3, r0
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d002      	beq.n	8001170 <USBD_StdEPReq+0x1e8>
        {
          USBD_ep_status = 0x0001;     
 800116a:	2301      	movs	r3, #1
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	e001      	b.n	8001174 <USBD_StdEPReq+0x1ec>
        }
        
        else 
        {
          USBD_ep_status = 0x0000;     
 8001170:	2300      	movs	r3, #0
 8001172:	60bb      	str	r3, [r7, #8]
        }      
      }
      USBD_CtlSendData (pdev,
 8001174:	2308      	movs	r3, #8
 8001176:	18f9      	adds	r1, r7, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2202      	movs	r2, #2
 800117c:	0018      	movs	r0, r3
 800117e:	f000 fb27 	bl	80017d0 <USBD_CtlSendData>
                        (uint8_t *)&USBD_ep_status,
                        2);
      break;
 8001182:	e007      	b.n	8001194 <USBD_StdEPReq+0x20c>
      
    default:                         
       USBD_CtlError(pdev , req);
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	0011      	movs	r1, r2
 800118a:	0018      	movs	r0, r3
 800118c:	f000 fa9e 	bl	80016cc <USBD_CtlError>
      break;
 8001190:	e000      	b.n	8001194 <USBD_StdEPReq+0x20c>
    case USB_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
      {
        DCD_EP_Stall(pdev , ep_addr);
      }
      break;	
 8001192:	46c0      	nop			; (mov r8, r8)
      
    default:                         
       USBD_CtlError(pdev , req);
      break;
    }
    break;
 8001194:	46c0      	nop			; (mov r8, r8)
    
  default:
    break;
  }
  return ret;
 8001196:	230f      	movs	r3, #15
 8001198:	18fb      	adds	r3, r7, r3
 800119a:	781b      	ldrb	r3, [r3, #0]
}
 800119c:	0018      	movs	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	b004      	add	sp, #16
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <USBD_GetDescriptor>:
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USB_CORE_HANDLE  *pdev, 
                               USB_SETUP_REQ *req)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
  switch (req->wValue >> 8)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	885b      	ldrh	r3, [r3, #2]
 80011b2:	0a1b      	lsrs	r3, r3, #8
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	2b07      	cmp	r3, #7
 80011b8:	d900      	bls.n	80011bc <USBD_GetDescriptor+0x18>
 80011ba:	e0aa      	b.n	8001312 <USBD_GetDescriptor+0x16e>
 80011bc:	009a      	lsls	r2, r3, #2
 80011be:	4b6b      	ldr	r3, [pc, #428]	; (800136c <USBD_GetDescriptor+0x1c8>)
 80011c0:	18d3      	adds	r3, r2, r3
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	469f      	mov	pc, r3
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->dev.usr_device->GetBOSDescriptor(pdev->dev.speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->dev.usr_device->GetDeviceDescriptor(pdev->dev.speed, &len);
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	23b0      	movs	r3, #176	; 0xb0
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	58d3      	ldr	r3, [r2, r3]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	210a      	movs	r1, #10
 80011d8:	1879      	adds	r1, r7, r1
 80011da:	0018      	movs	r0, r3
 80011dc:	4790      	blx	r2
 80011de:	0003      	movs	r3, r0
 80011e0:	60fb      	str	r3, [r7, #12]
    if (req->wLength == 64)   
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	88db      	ldrh	r3, [r3, #6]
 80011e6:	2b40      	cmp	r3, #64	; 0x40
 80011e8:	d000      	beq.n	80011ec <USBD_GetDescriptor+0x48>
 80011ea:	e099      	b.n	8001320 <USBD_GetDescriptor+0x17c>
    {                  
      len = 8;
 80011ec:	230a      	movs	r3, #10
 80011ee:	18fb      	adds	r3, r7, r3
 80011f0:	2208      	movs	r2, #8
 80011f2:	801a      	strh	r2, [r3, #0]
    }
    break;
 80011f4:	e094      	b.n	8001320 <USBD_GetDescriptor+0x17c>
    
  case USB_DESC_TYPE_CONFIGURATION:
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetConfigDescriptor(pdev->dev.speed, &len);  
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	23ac      	movs	r3, #172	; 0xac
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	58d3      	ldr	r3, [r2, r3]
 80011fe:	6a1a      	ldr	r2, [r3, #32]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	210a      	movs	r1, #10
 8001208:	1879      	adds	r1, r7, r1
 800120a:	0018      	movs	r0, r3
 800120c:	4790      	blx	r2
 800120e:	0003      	movs	r3, r0
 8001210:	60fb      	str	r3, [r7, #12]
      pdev->dev.pConfig_descriptor = pbuf;    
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	23b2      	movs	r3, #178	; 0xb2
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	68f9      	ldr	r1, [r7, #12]
 800121a:	50d1      	str	r1, [r2, r3]
    break;
 800121c:	e081      	b.n	8001322 <USBD_GetDescriptor+0x17e>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	885b      	ldrh	r3, [r3, #2]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b05      	cmp	r3, #5
 8001226:	d85e      	bhi.n	80012e6 <USBD_GetDescriptor+0x142>
 8001228:	009a      	lsls	r2, r3, #2
 800122a:	4b51      	ldr	r3, [pc, #324]	; (8001370 <USBD_GetDescriptor+0x1cc>)
 800122c:	18d3      	adds	r3, r2, r3
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	469f      	mov	pc, r3
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->dev.usr_device->GetLangIDStrDescriptor(pdev->dev.speed, &len);        
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	23b0      	movs	r3, #176	; 0xb0
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	58d3      	ldr	r3, [r2, r3]
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	210a      	movs	r1, #10
 8001244:	1879      	adds	r1, r7, r1
 8001246:	0018      	movs	r0, r3
 8001248:	4790      	blx	r2
 800124a:	0003      	movs	r3, r0
 800124c:	60fb      	str	r3, [r7, #12]
      break;
 800124e:	e051      	b.n	80012f4 <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->dev.usr_device->GetManufacturerStrDescriptor(pdev->dev.speed, &len);
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	23b0      	movs	r3, #176	; 0xb0
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	58d3      	ldr	r3, [r2, r3]
 8001258:	689a      	ldr	r2, [r3, #8]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	b2db      	uxtb	r3, r3
 8001260:	210a      	movs	r1, #10
 8001262:	1879      	adds	r1, r7, r1
 8001264:	0018      	movs	r0, r3
 8001266:	4790      	blx	r2
 8001268:	0003      	movs	r3, r0
 800126a:	60fb      	str	r3, [r7, #12]
      break;
 800126c:	e042      	b.n	80012f4 <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->dev.usr_device->GetProductStrDescriptor(pdev->dev.speed, &len);
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	23b0      	movs	r3, #176	; 0xb0
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	58d3      	ldr	r3, [r2, r3]
 8001276:	68da      	ldr	r2, [r3, #12]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	210a      	movs	r1, #10
 8001280:	1879      	adds	r1, r7, r1
 8001282:	0018      	movs	r0, r3
 8001284:	4790      	blx	r2
 8001286:	0003      	movs	r3, r0
 8001288:	60fb      	str	r3, [r7, #12]
      break;
 800128a:	e033      	b.n	80012f4 <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->dev.usr_device->GetSerialStrDescriptor(pdev->dev.speed, &len);
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	23b0      	movs	r3, #176	; 0xb0
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	58d3      	ldr	r3, [r2, r3]
 8001294:	691a      	ldr	r2, [r3, #16]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	b2db      	uxtb	r3, r3
 800129c:	210a      	movs	r1, #10
 800129e:	1879      	adds	r1, r7, r1
 80012a0:	0018      	movs	r0, r3
 80012a2:	4790      	blx	r2
 80012a4:	0003      	movs	r3, r0
 80012a6:	60fb      	str	r3, [r7, #12]
      break;
 80012a8:	e024      	b.n	80012f4 <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->dev.usr_device->GetConfigurationStrDescriptor(pdev->dev.speed, &len);
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	23b0      	movs	r3, #176	; 0xb0
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	58d3      	ldr	r3, [r2, r3]
 80012b2:	695a      	ldr	r2, [r3, #20]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	210a      	movs	r1, #10
 80012bc:	1879      	adds	r1, r7, r1
 80012be:	0018      	movs	r0, r3
 80012c0:	4790      	blx	r2
 80012c2:	0003      	movs	r3, r0
 80012c4:	60fb      	str	r3, [r7, #12]
      break;
 80012c6:	e015      	b.n	80012f4 <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->dev.usr_device->GetInterfaceStrDescriptor(pdev->dev.speed, &len);
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	23b0      	movs	r3, #176	; 0xb0
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	58d3      	ldr	r3, [r2, r3]
 80012d0:	699a      	ldr	r2, [r3, #24]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	210a      	movs	r1, #10
 80012da:	1879      	adds	r1, r7, r1
 80012dc:	0018      	movs	r0, r3
 80012de:	4790      	blx	r2
 80012e0:	0003      	movs	r3, r0
 80012e2:	60fb      	str	r3, [r7, #12]
      break;
 80012e4:	e006      	b.n	80012f4 <USBD_GetDescriptor+0x150>
    default:
#ifdef USB_SUPPORT_USER_STRING_DESC
      pbuf = pdev->dev.class_cb->GetUsrStrDescriptor(pdev->dev.speed, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 80012e6:	683a      	ldr	r2, [r7, #0]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	0011      	movs	r1, r2
 80012ec:	0018      	movs	r0, r3
 80012ee:	f000 f9ed 	bl	80016cc <USBD_CtlError>
      return;
 80012f2:	e037      	b.n	8001364 <USBD_GetDescriptor+0x1c0>
#endif /* USBD_CtlError(pdev , req); */      
    }
    break;
 80012f4:	e015      	b.n	8001322 <USBD_GetDescriptor+0x17e>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   
       USBD_CtlError(pdev , req);
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	0011      	movs	r1, r2
 80012fc:	0018      	movs	r0, r3
 80012fe:	f000 f9e5 	bl	80016cc <USBD_CtlError>
      return;  
 8001302:	e02f      	b.n	8001364 <USBD_GetDescriptor+0x1c0>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      USBD_CtlError(pdev , req);
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	0011      	movs	r1, r2
 800130a:	0018      	movs	r0, r3
 800130c:	f000 f9de 	bl	80016cc <USBD_CtlError>
      return;  
 8001310:	e028      	b.n	8001364 <USBD_GetDescriptor+0x1c0>
  default: 
     USBD_CtlError(pdev , req);
 8001312:	683a      	ldr	r2, [r7, #0]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	0011      	movs	r1, r2
 8001318:	0018      	movs	r0, r3
 800131a:	f000 f9d7 	bl	80016cc <USBD_CtlError>
    return;
 800131e:	e021      	b.n	8001364 <USBD_GetDescriptor+0x1c0>
    pbuf = pdev->dev.usr_device->GetDeviceDescriptor(pdev->dev.speed, &len);
    if (req->wLength == 64)   
    {                  
      len = 8;
    }
    break;
 8001320:	46c0      	nop			; (mov r8, r8)
  default: 
     USBD_CtlError(pdev , req);
    return;
  }
  
  if((len != 0)&& (req->wLength != 0))
 8001322:	230a      	movs	r3, #10
 8001324:	18fb      	adds	r3, r7, r3
 8001326:	881b      	ldrh	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d01b      	beq.n	8001364 <USBD_GetDescriptor+0x1c0>
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	88db      	ldrh	r3, [r3, #6]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d017      	beq.n	8001364 <USBD_GetDescriptor+0x1c0>
  {
    
    len = MIN(len , req->wLength);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	88da      	ldrh	r2, [r3, #6]
 8001338:	230a      	movs	r3, #10
 800133a:	18fb      	adds	r3, r7, r3
 800133c:	881b      	ldrh	r3, [r3, #0]
 800133e:	1c18      	adds	r0, r3, #0
 8001340:	1c11      	adds	r1, r2, #0
 8001342:	b28a      	uxth	r2, r1
 8001344:	b283      	uxth	r3, r0
 8001346:	429a      	cmp	r2, r3
 8001348:	d900      	bls.n	800134c <USBD_GetDescriptor+0x1a8>
 800134a:	1c01      	adds	r1, r0, #0
 800134c:	b28a      	uxth	r2, r1
 800134e:	230a      	movs	r3, #10
 8001350:	18fb      	adds	r3, r7, r3
 8001352:	801a      	strh	r2, [r3, #0]
    
    USBD_CtlSendData (pdev, 
 8001354:	230a      	movs	r3, #10
 8001356:	18fb      	adds	r3, r7, r3
 8001358:	881a      	ldrh	r2, [r3, #0]
 800135a:	68f9      	ldr	r1, [r7, #12]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	0018      	movs	r0, r3
 8001360:	f000 fa36 	bl	80017d0 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8001364:	46bd      	mov	sp, r7
 8001366:	b004      	add	sp, #16
 8001368:	bd80      	pop	{r7, pc}
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	08003e04 	.word	0x08003e04
 8001370:	08003e24 	.word	0x08003e24

08001374 <USBD_SetAddress>:
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USB_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	889b      	ldrh	r3, [r3, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d131      	bne.n	80013ea <USBD_SetAddress+0x76>
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	88db      	ldrh	r3, [r3, #6]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d12d      	bne.n	80013ea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	885b      	ldrh	r3, [r3, #2]
 8001392:	b2da      	uxtb	r2, r3
 8001394:	230f      	movs	r3, #15
 8001396:	18fb      	adds	r3, r7, r3
 8001398:	217f      	movs	r1, #127	; 0x7f
 800139a:	400a      	ands	r2, r1
 800139c:	701a      	strb	r2, [r3, #0]
    
    if (pdev->dev.device_status == USB_CONFIGURED) 
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	789b      	ldrb	r3, [r3, #2]
 80013a2:	2b03      	cmp	r3, #3
 80013a4:	d106      	bne.n	80013b4 <USBD_SetAddress+0x40>
    {
      USBD_CtlError(pdev , req);
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	0011      	movs	r1, r2
 80013ac:	0018      	movs	r0, r3
 80013ae:	f000 f98d 	bl	80016cc <USBD_CtlError>
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev.device_status == USB_CONFIGURED) 
 80013b2:	e020      	b.n	80013f6 <USBD_SetAddress+0x82>
    {
      USBD_CtlError(pdev , req);
    } 
    else 
    {
      pdev->dev.device_address = dev_addr;              
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	220f      	movs	r2, #15
 80013b8:	18ba      	adds	r2, r7, r2
 80013ba:	7812      	ldrb	r2, [r2, #0]
 80013bc:	711a      	strb	r2, [r3, #4]
      ADDRESS = dev_addr;
 80013be:	230f      	movs	r3, #15
 80013c0:	18fb      	adds	r3, r7, r3
 80013c2:	781a      	ldrb	r2, [r3, #0]
 80013c4:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <USBD_SetAddress+0x8c>)
 80013c6:	601a      	str	r2, [r3, #0]
      USBD_CtlSendStatus(pdev);                         
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	0018      	movs	r0, r3
 80013cc:	f000 fa7e 	bl	80018cc <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 80013d0:	230f      	movs	r3, #15
 80013d2:	18fb      	adds	r3, r7, r3
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <USBD_SetAddress+0x6e>
      {
        pdev->dev.device_status  = USB_ADDRESSED;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2202      	movs	r2, #2
 80013de:	709a      	strb	r2, [r3, #2]
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev.device_status == USB_CONFIGURED) 
 80013e0:	e009      	b.n	80013f6 <USBD_SetAddress+0x82>
      {
        pdev->dev.device_status  = USB_ADDRESSED;
      } 
      else 
      {
        pdev->dev.device_status  = USB_DEFAULT; 
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2201      	movs	r2, #1
 80013e6:	709a      	strb	r2, [r3, #2]
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev.device_status == USB_CONFIGURED) 
 80013e8:	e005      	b.n	80013f6 <USBD_SetAddress+0x82>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 80013ea:	683a      	ldr	r2, [r7, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	0011      	movs	r1, r2
 80013f0:	0018      	movs	r0, r3
 80013f2:	f000 f96b 	bl	80016cc <USBD_CtlError>
  } 
}
 80013f6:	46c0      	nop			; (mov r8, r8)
 80013f8:	46bd      	mov	sp, r7
 80013fa:	b004      	add	sp, #16
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	200000e4 	.word	0x200000e4

08001404 <USBD_SetConfig>:
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetConfig(USB_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	885b      	ldrh	r3, [r3, #2]
 8001412:	b2da      	uxtb	r2, r3
 8001414:	4b39      	ldr	r3, [pc, #228]	; (80014fc <USBD_SetConfig+0xf8>)
 8001416:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_CFG_MAX_NUM ) 
 8001418:	4b38      	ldr	r3, [pc, #224]	; (80014fc <USBD_SetConfig+0xf8>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d906      	bls.n	800142e <USBD_SetConfig+0x2a>
  {            
     USBD_CtlError(pdev , req);                              
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	0011      	movs	r1, r2
 8001426:	0018      	movs	r0, r3
 8001428:	f000 f950 	bl	80016cc <USBD_CtlError>
    default:					
       USBD_CtlError(pdev , req);                     
      break;
    }
  }
}
 800142c:	e062      	b.n	80014f4 <USBD_SetConfig+0xf0>
  {            
     USBD_CtlError(pdev , req);                              
  } 
  else 
  {
    switch (pdev->dev.device_status) 
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	789b      	ldrb	r3, [r3, #2]
 8001432:	2b02      	cmp	r3, #2
 8001434:	d002      	beq.n	800143c <USBD_SetConfig+0x38>
 8001436:	2b03      	cmp	r3, #3
 8001438:	d01c      	beq.n	8001474 <USBD_SetConfig+0x70>
 800143a:	e054      	b.n	80014e6 <USBD_SetConfig+0xe2>
    {
    case USB_ADDRESSED:
      if (cfgidx) 
 800143c:	4b2f      	ldr	r3, [pc, #188]	; (80014fc <USBD_SetConfig+0xf8>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d012      	beq.n	800146a <USBD_SetConfig+0x66>
      {                                			   							   							   				
        pdev->dev.device_config = cfgidx;
 8001444:	4b2d      	ldr	r3, [pc, #180]	; (80014fc <USBD_SetConfig+0xf8>)
 8001446:	781a      	ldrb	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	701a      	strb	r2, [r3, #0]
        pdev->dev.device_status = USB_CONFIGURED;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2203      	movs	r2, #3
 8001450:	709a      	strb	r2, [r3, #2]
        USBD_SetCfg(pdev , cfgidx);
 8001452:	4b2a      	ldr	r3, [pc, #168]	; (80014fc <USBD_SetConfig+0xf8>)
 8001454:	781a      	ldrb	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	0011      	movs	r1, r2
 800145a:	0018      	movs	r0, r3
 800145c:	f000 fc48 	bl	8001cf0 <USBD_SetCfg>
        USBD_CtlSendStatus(pdev);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	0018      	movs	r0, r3
 8001464:	f000 fa32 	bl	80018cc <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 8001468:	e044      	b.n	80014f4 <USBD_SetConfig+0xf0>
        USBD_SetCfg(pdev , cfgidx);
        USBD_CtlSendStatus(pdev);
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	0018      	movs	r0, r3
 800146e:	f000 fa2d 	bl	80018cc <USBD_CtlSendStatus>
      }
      break;
 8001472:	e03f      	b.n	80014f4 <USBD_SetConfig+0xf0>
      
    case USB_CONFIGURED:
      if (cfgidx == 0) 
 8001474:	4b21      	ldr	r3, [pc, #132]	; (80014fc <USBD_SetConfig+0xf8>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d112      	bne.n	80014a2 <USBD_SetConfig+0x9e>
      {                           
        pdev->dev.device_status = USB_ADDRESSED;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2202      	movs	r2, #2
 8001480:	709a      	strb	r2, [r3, #2]
        pdev->dev.device_config = cfgidx;          
 8001482:	4b1e      	ldr	r3, [pc, #120]	; (80014fc <USBD_SetConfig+0xf8>)
 8001484:	781a      	ldrb	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	701a      	strb	r2, [r3, #0]
        USBD_ClrCfg(pdev , cfgidx);
 800148a:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <USBD_SetConfig+0xf8>)
 800148c:	781a      	ldrb	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	0011      	movs	r1, r2
 8001492:	0018      	movs	r0, r3
 8001494:	f000 fc48 	bl	8001d28 <USBD_ClrCfg>
        USBD_CtlSendStatus(pdev);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	0018      	movs	r0, r3
 800149c:	f000 fa16 	bl	80018cc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80014a0:	e028      	b.n	80014f4 <USBD_SetConfig+0xf0>
        pdev->dev.device_status = USB_ADDRESSED;
        pdev->dev.device_config = cfgidx;          
        USBD_ClrCfg(pdev , cfgidx);
        USBD_CtlSendStatus(pdev);
      } 
      else  if (cfgidx != pdev->dev.device_config) 
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	781a      	ldrb	r2, [r3, #0]
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <USBD_SetConfig+0xf8>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d016      	beq.n	80014dc <USBD_SetConfig+0xd8>
      {
        /* Clear old configuration */
        USBD_ClrCfg(pdev , pdev->dev.device_config);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	781a      	ldrb	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	0011      	movs	r1, r2
 80014b6:	0018      	movs	r0, r3
 80014b8:	f000 fc36 	bl	8001d28 <USBD_ClrCfg>
        
        /* set new configuration */
        pdev->dev.device_config = cfgidx;
 80014bc:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <USBD_SetConfig+0xf8>)
 80014be:	781a      	ldrb	r2, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	701a      	strb	r2, [r3, #0]
        USBD_SetCfg(pdev , cfgidx);
 80014c4:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <USBD_SetConfig+0xf8>)
 80014c6:	781a      	ldrb	r2, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	0011      	movs	r1, r2
 80014cc:	0018      	movs	r0, r3
 80014ce:	f000 fc0f 	bl	8001cf0 <USBD_SetCfg>
        USBD_CtlSendStatus(pdev);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	0018      	movs	r0, r3
 80014d6:	f000 f9f9 	bl	80018cc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80014da:	e00b      	b.n	80014f4 <USBD_SetConfig+0xf0>
        USBD_SetCfg(pdev , cfgidx);
        USBD_CtlSendStatus(pdev);
      }
      else
      {
        USBD_CtlSendStatus(pdev);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	0018      	movs	r0, r3
 80014e0:	f000 f9f4 	bl	80018cc <USBD_CtlSendStatus>
      }
      break;
 80014e4:	e006      	b.n	80014f4 <USBD_SetConfig+0xf0>
      
    default:					
       USBD_CtlError(pdev , req);                     
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	0011      	movs	r1, r2
 80014ec:	0018      	movs	r0, r3
 80014ee:	f000 f8ed 	bl	80016cc <USBD_CtlError>
      break;
 80014f2:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 80014f4:	46c0      	nop			; (mov r8, r8)
 80014f6:	46bd      	mov	sp, r7
 80014f8:	b002      	add	sp, #8
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	200000e8 	.word	0x200000e8

08001500 <USBD_GetConfig>:
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USB_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  uint32_t  USBD_default_cfg  = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
 
  if (req->wLength != 1) 
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	88db      	ldrh	r3, [r3, #6]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d006      	beq.n	8001524 <USBD_GetConfig+0x24>
  {                   
     USBD_CtlError(pdev , req);
 8001516:	683a      	ldr	r2, [r7, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	0011      	movs	r1, r2
 800151c:	0018      	movs	r0, r3
 800151e:	f000 f8d5 	bl	80016cc <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8001522:	e01c      	b.n	800155e <USBD_GetConfig+0x5e>
  {                   
     USBD_CtlError(pdev , req);
  }
  else 
  {
    switch (pdev->dev.device_status )  
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	789b      	ldrb	r3, [r3, #2]
 8001528:	2b02      	cmp	r3, #2
 800152a:	d002      	beq.n	8001532 <USBD_GetConfig+0x32>
 800152c:	2b03      	cmp	r3, #3
 800152e:	d008      	beq.n	8001542 <USBD_GetConfig+0x42>
 8001530:	e00e      	b.n	8001550 <USBD_GetConfig+0x50>
    {
    case USB_ADDRESSED:                     
      
      USBD_CtlSendData (pdev, 
 8001532:	230c      	movs	r3, #12
 8001534:	18f9      	adds	r1, r7, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2201      	movs	r2, #1
 800153a:	0018      	movs	r0, r3
 800153c:	f000 f948 	bl	80017d0 <USBD_CtlSendData>
                        (uint8_t *)&USBD_default_cfg,
                        1);
      break;
 8001540:	e00d      	b.n	800155e <USBD_GetConfig+0x5e>
      
    case USB_CONFIGURED:                   
      
      USBD_CtlSendData (pdev, 
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2201      	movs	r2, #1
 8001548:	0018      	movs	r0, r3
 800154a:	f000 f941 	bl	80017d0 <USBD_CtlSendData>
                        &pdev->dev.device_config,
                        1);
      break;
 800154e:	e006      	b.n	800155e <USBD_GetConfig+0x5e>
      
    default:
       USBD_CtlError(pdev , req);
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	0011      	movs	r1, r2
 8001556:	0018      	movs	r0, r3
 8001558:	f000 f8b8 	bl	80016cc <USBD_CtlError>
      break;
 800155c:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800155e:	46c0      	nop			; (mov r8, r8)
 8001560:	46bd      	mov	sp, r7
 8001562:	b004      	add	sp, #16
 8001564:	bd80      	pop	{r7, pc}
 8001566:	46c0      	nop			; (mov r8, r8)

08001568 <USBD_GetStatus>:
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USB_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  uint32_t  USBD_cfg_status = 0;  
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
  switch (pdev->dev.device_status) 
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	789b      	ldrb	r3, [r3, #2]
 800157a:	3b02      	subs	r3, #2
 800157c:	2b01      	cmp	r3, #1
 800157e:	d811      	bhi.n	80015a4 <USBD_GetStatus+0x3c>
  {
  case USB_ADDRESSED:
  case USB_CONFIGURED:
    
#ifdef USBD_SELF_POWERED
    USBD_cfg_status = USB_CONFIG_SELF_POWERED;                                    
 8001580:	2301      	movs	r3, #1
 8001582:	60fb      	str	r3, [r7, #12]
#else
    USBD_cfg_status = 0x00;                                    
#endif
                      
    if (pdev->dev.DevRemoteWakeup) 
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <USBD_GetStatus+0x2c>
    {
      USBD_cfg_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2202      	movs	r2, #2
 8001590:	4313      	orrs	r3, r2
 8001592:	60fb      	str	r3, [r7, #12]
    }
    
    USBD_CtlSendData (pdev, 
 8001594:	230c      	movs	r3, #12
 8001596:	18f9      	adds	r1, r7, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2202      	movs	r2, #2
 800159c:	0018      	movs	r0, r3
 800159e:	f000 f917 	bl	80017d0 <USBD_CtlSendData>
                      (uint8_t *)&USBD_cfg_status,
                      2);
    break;
 80015a2:	e006      	b.n	80015b2 <USBD_GetStatus+0x4a>
    
  default :
    USBD_CtlError(pdev , req);                        
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	0011      	movs	r1, r2
 80015aa:	0018      	movs	r0, r3
 80015ac:	f000 f88e 	bl	80016cc <USBD_CtlError>
    break;
 80015b0:	46c0      	nop			; (mov r8, r8)
  }
}
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	46bd      	mov	sp, r7
 80015b6:	b004      	add	sp, #16
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	46c0      	nop			; (mov r8, r8)

080015bc <USBD_SetFeature>:
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USB_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
 
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	885b      	ldrh	r3, [r3, #2]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d10f      	bne.n	80015ee <USBD_SetFeature+0x32>
  {
    pdev->dev.DevRemoteWakeup = 1;  
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2201      	movs	r2, #1
 80015d2:	609a      	str	r2, [r3, #8]
    pdev->dev.class_cb->Setup (pdev, req);   
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	23ac      	movs	r3, #172	; 0xac
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	58d3      	ldr	r3, [r2, r3]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	6839      	ldr	r1, [r7, #0]
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	0010      	movs	r0, r2
 80015e4:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	0018      	movs	r0, r3
 80015ea:	f000 f96f 	bl	80018cc <USBD_CtlSendStatus>
  }
}
 80015ee:	46c0      	nop			; (mov r8, r8)
 80015f0:	46bd      	mov	sp, r7
 80015f2:	b002      	add	sp, #8
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	46c0      	nop			; (mov r8, r8)

080015f8 <USBD_ClrFeature>:
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USB_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  switch (pdev->dev.device_status)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	789b      	ldrb	r3, [r3, #2]
 8001606:	3b02      	subs	r3, #2
 8001608:	2b01      	cmp	r3, #1
 800160a:	d814      	bhi.n	8001636 <USBD_ClrFeature+0x3e>
  {
  case USB_ADDRESSED:
  case USB_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	885b      	ldrh	r3, [r3, #2]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d117      	bne.n	8001644 <USBD_ClrFeature+0x4c>
    {
      pdev->dev.DevRemoteWakeup = 0; 
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
      pdev->dev.class_cb->Setup (pdev, req);   
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	23ac      	movs	r3, #172	; 0xac
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	58d3      	ldr	r3, [r2, r3]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	6839      	ldr	r1, [r7, #0]
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	0010      	movs	r0, r2
 800162a:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	0018      	movs	r0, r3
 8001630:	f000 f94c 	bl	80018cc <USBD_CtlSendStatus>
    }
    break;
 8001634:	e006      	b.n	8001644 <USBD_ClrFeature+0x4c>
    
  default :
     USBD_CtlError(pdev , req);
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	0011      	movs	r1, r2
 800163c:	0018      	movs	r0, r3
 800163e:	f000 f845 	bl	80016cc <USBD_CtlError>
    break;
 8001642:	e000      	b.n	8001646 <USBD_ClrFeature+0x4e>
    {
      pdev->dev.DevRemoteWakeup = 0; 
      pdev->dev.class_cb->Setup (pdev, req);   
      USBD_CtlSendStatus(pdev);
    }
    break;
 8001644:	46c0      	nop			; (mov r8, r8)
    
  default :
     USBD_CtlError(pdev , req);
    break;
  }
}
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	46bd      	mov	sp, r7
 800164a:	b002      	add	sp, #8
 800164c:	bd80      	pop	{r7, pc}
 800164e:	46c0      	nop			; (mov r8, r8)

08001650 <USBD_ParseSetupRequest>:
  * @retval None
  */

void USBD_ParseSetupRequest( USB_CORE_HANDLE  *pdev,
                            USB_SETUP_REQ *req)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdev->dev.setup_packet);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	7c1a      	ldrb	r2, [r3, #16]
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdev->dev.setup_packet +  1);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	7c5a      	ldrb	r2, [r3, #17]
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdev->dev.setup_packet +  2);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	7c9b      	ldrb	r3, [r3, #18]
 800166e:	b29a      	uxth	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	7cdb      	ldrb	r3, [r3, #19]
 8001674:	b29b      	uxth	r3, r3
 8001676:	021b      	lsls	r3, r3, #8
 8001678:	b29b      	uxth	r3, r3
 800167a:	18d3      	adds	r3, r2, r3
 800167c:	b29a      	uxth	r2, r3
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdev->dev.setup_packet +  4);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	7d1b      	ldrb	r3, [r3, #20]
 8001686:	b29a      	uxth	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	7d5b      	ldrb	r3, [r3, #21]
 800168c:	b29b      	uxth	r3, r3
 800168e:	021b      	lsls	r3, r3, #8
 8001690:	b29b      	uxth	r3, r3
 8001692:	18d3      	adds	r3, r2, r3
 8001694:	b29a      	uxth	r2, r3
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdev->dev.setup_packet +  6);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	7d9b      	ldrb	r3, [r3, #22]
 800169e:	b29a      	uxth	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	7ddb      	ldrb	r3, [r3, #23]
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	021b      	lsls	r3, r3, #8
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	18d3      	adds	r3, r2, r3
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	80da      	strh	r2, [r3, #6]
  
  pdev->dev.in_ep[0].ctl_data_len = req->wLength  ;
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	88db      	ldrh	r3, [r3, #6]
 80016b6:	001a      	movs	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	63da      	str	r2, [r3, #60]	; 0x3c
  pdev->dev.device_state = USB_EP0_SETUP;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2201      	movs	r2, #1
 80016c0:	705a      	strb	r2, [r3, #1]
}
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	46bd      	mov	sp, r7
 80016c6:	b002      	add	sp, #8
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	46c0      	nop			; (mov r8, r8)

080016cc <USBD_CtlError>:
  * @retval None
  */

void USBD_CtlError( USB_CORE_HANDLE  *pdev,
                            USB_SETUP_REQ *req)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  DCD_EP_Stall(pdev , 0);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2100      	movs	r1, #0
 80016da:	0018      	movs	r0, r3
 80016dc:	f001 fc02 	bl	8002ee4 <DCD_EP_Stall>
}
 80016e0:	46c0      	nop			; (mov r8, r8)
 80016e2:	46bd      	mov	sp, r7
 80016e4:	b002      	add	sp, #8
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 80016f4:	2317      	movs	r3, #23
 80016f6:	18fb      	adds	r3, r7, r3
 80016f8:	2200      	movs	r2, #0
 80016fa:	701a      	strb	r2, [r3, #0]
  
  if (desc != NULL) 
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d044      	beq.n	800178c <USBD_GetString+0xa4>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	0018      	movs	r0, r3
 8001706:	f000 f845 	bl	8001794 <USBD_GetLen>
 800170a:	0003      	movs	r3, r0
 800170c:	3301      	adds	r3, #1
 800170e:	b29b      	uxth	r3, r3
 8001710:	18db      	adds	r3, r3, r3
 8001712:	b29a      	uxth	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 8001718:	2317      	movs	r3, #23
 800171a:	18fb      	adds	r3, r7, r3
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2217      	movs	r2, #23
 8001720:	18ba      	adds	r2, r7, r2
 8001722:	1c59      	adds	r1, r3, #1
 8001724:	7011      	strb	r1, [r2, #0]
 8001726:	001a      	movs	r2, r3
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	189b      	adds	r3, r3, r2
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	8812      	ldrh	r2, [r2, #0]
 8001730:	b2d2      	uxtb	r2, r2
 8001732:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8001734:	2317      	movs	r3, #23
 8001736:	18fb      	adds	r3, r7, r3
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2217      	movs	r2, #23
 800173c:	18ba      	adds	r2, r7, r2
 800173e:	1c59      	adds	r1, r3, #1
 8001740:	7011      	strb	r1, [r2, #0]
 8001742:	001a      	movs	r2, r3
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	189b      	adds	r3, r3, r2
 8001748:	2203      	movs	r2, #3
 800174a:	701a      	strb	r2, [r3, #0]
    
    while (*desc != NULL) 
 800174c:	e01a      	b.n	8001784 <USBD_GetString+0x9c>
    {
      unicode[idx++] = *desc++;
 800174e:	2317      	movs	r3, #23
 8001750:	18fb      	adds	r3, r7, r3
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2217      	movs	r2, #23
 8001756:	18ba      	adds	r2, r7, r2
 8001758:	1c59      	adds	r1, r3, #1
 800175a:	7011      	strb	r1, [r2, #0]
 800175c:	001a      	movs	r2, r3
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	189a      	adds	r2, r3, r2
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	1c59      	adds	r1, r3, #1
 8001766:	60f9      	str	r1, [r7, #12]
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 800176c:	2317      	movs	r3, #23
 800176e:	18fb      	adds	r3, r7, r3
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2217      	movs	r2, #23
 8001774:	18ba      	adds	r2, r7, r2
 8001776:	1c59      	adds	r1, r3, #1
 8001778:	7011      	strb	r1, [r2, #0]
 800177a:	001a      	movs	r2, r3
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	189b      	adds	r3, r3, r2
 8001780:	2200      	movs	r2, #0
 8001782:	701a      	strb	r2, [r3, #0]
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
    unicode[idx++] = *len;
    unicode[idx++] =  USB_DESC_TYPE_STRING;
    
    while (*desc != NULL) 
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1e0      	bne.n	800174e <USBD_GetString+0x66>
    {
      unicode[idx++] = *desc++;
      unicode[idx++] =  0x00;
    }
  } 
}
 800178c:	46c0      	nop			; (mov r8, r8)
 800178e:	46bd      	mov	sp, r7
 8001790:	b006      	add	sp, #24
 8001792:	bd80      	pop	{r7, pc}

08001794 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 800179c:	230f      	movs	r3, #15
 800179e:	18fb      	adds	r3, r7, r3
 80017a0:	2200      	movs	r2, #0
 80017a2:	701a      	strb	r2, [r3, #0]

    while (*buf != NULL) 
 80017a4:	e009      	b.n	80017ba <USBD_GetLen+0x26>
    {
        len++;
 80017a6:	230f      	movs	r3, #15
 80017a8:	18fb      	adds	r3, r7, r3
 80017aa:	781a      	ldrb	r2, [r3, #0]
 80017ac:	230f      	movs	r3, #15
 80017ae:	18fb      	adds	r3, r7, r3
 80017b0:	3201      	adds	r2, #1
 80017b2:	701a      	strb	r2, [r3, #0]
        buf++;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3301      	adds	r3, #1
 80017b8:	607b      	str	r3, [r7, #4]
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != NULL) 
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1f1      	bne.n	80017a6 <USBD_GetLen+0x12>
    {
        len++;
        buf++;
    }

    return len;
 80017c2:	230f      	movs	r3, #15
 80017c4:	18fb      	adds	r3, r7, r3
 80017c6:	781b      	ldrb	r3, [r3, #0]
}
 80017c8:	0018      	movs	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	b004      	add	sp, #16
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <USBD_CtlSendData>:
  * @retval status
  */
USBD_Status  USBD_CtlSendData (USB_CORE_HANDLE  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	1dbb      	adds	r3, r7, #6
 80017dc:	801a      	strh	r2, [r3, #0]
  USBD_Status ret = USBD_OK;
 80017de:	2317      	movs	r3, #23
 80017e0:	18fb      	adds	r3, r7, r3
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
  
  pdev->dev.in_ep[0].total_data_len = len;
 80017e6:	1dbb      	adds	r3, r7, #6
 80017e8:	881a      	ldrh	r2, [r3, #0]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	639a      	str	r2, [r3, #56]	; 0x38
  pdev->dev.in_ep[0].rem_data_len   = len;
 80017ee:	1dbb      	adds	r3, r7, #6
 80017f0:	881a      	ldrh	r2, [r3, #0]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	635a      	str	r2, [r3, #52]	; 0x34
  pdev->dev.device_state = USB_EP0_DATA_IN;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2202      	movs	r2, #2
 80017fa:	705a      	strb	r2, [r3, #1]

  DCD_EP_Tx (pdev, 0, pbuf, len);
 80017fc:	1dbb      	adds	r3, r7, #6
 80017fe:	881b      	ldrh	r3, [r3, #0]
 8001800:	68ba      	ldr	r2, [r7, #8]
 8001802:	68f8      	ldr	r0, [r7, #12]
 8001804:	2100      	movs	r1, #0
 8001806:	f001 fad7 	bl	8002db8 <DCD_EP_Tx>
 
  return ret;
 800180a:	2317      	movs	r3, #23
 800180c:	18fb      	adds	r3, r7, r3
 800180e:	781b      	ldrb	r3, [r3, #0]
}
 8001810:	0018      	movs	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	b006      	add	sp, #24
 8001816:	bd80      	pop	{r7, pc}

08001818 <USBD_CtlContinueSendData>:
  * @retval status
  */
USBD_Status  USBD_CtlContinueSendData (USB_CORE_HANDLE  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	1dbb      	adds	r3, r7, #6
 8001824:	801a      	strh	r2, [r3, #0]
  USBD_Status ret = USBD_OK;
 8001826:	2317      	movs	r3, #23
 8001828:	18fb      	adds	r3, r7, r3
 800182a:	2200      	movs	r2, #0
 800182c:	701a      	strb	r2, [r3, #0]
  
  DCD_EP_Tx (pdev, 0, pbuf, len);
 800182e:	1dbb      	adds	r3, r7, #6
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	68f8      	ldr	r0, [r7, #12]
 8001836:	2100      	movs	r1, #0
 8001838:	f001 fabe 	bl	8002db8 <DCD_EP_Tx>
  
  
  return ret;
 800183c:	2317      	movs	r3, #23
 800183e:	18fb      	adds	r3, r7, r3
 8001840:	781b      	ldrb	r3, [r3, #0]
}
 8001842:	0018      	movs	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	b006      	add	sp, #24
 8001848:	bd80      	pop	{r7, pc}
 800184a:	46c0      	nop			; (mov r8, r8)

0800184c <USBD_CtlPrepareRx>:
  * @retval status
  */
USBD_Status  USBD_CtlPrepareRx (USB_CORE_HANDLE  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	1dbb      	adds	r3, r7, #6
 8001858:	801a      	strh	r2, [r3, #0]
  USBD_Status ret = USBD_OK;
 800185a:	2317      	movs	r3, #23
 800185c:	18fb      	adds	r3, r7, r3
 800185e:	2200      	movs	r2, #0
 8001860:	701a      	strb	r2, [r3, #0]
  
  pdev->dev.out_ep[0].total_data_len = len;
 8001862:	1dbb      	adds	r3, r7, #6
 8001864:	881a      	ldrh	r2, [r3, #0]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	21d8      	movs	r1, #216	; 0xd8
 800186a:	505a      	str	r2, [r3, r1]
  pdev->dev.out_ep[0].rem_data_len   = len;
 800186c:	1dbb      	adds	r3, r7, #6
 800186e:	881a      	ldrh	r2, [r3, #0]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	21d4      	movs	r1, #212	; 0xd4
 8001874:	505a      	str	r2, [r3, r1]
  pdev->dev.device_state = USB_EP0_DATA_OUT;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2203      	movs	r2, #3
 800187a:	705a      	strb	r2, [r3, #1]
  
  DCD_EP_PrepareRx (pdev,
 800187c:	1dbb      	adds	r3, r7, #6
 800187e:	881b      	ldrh	r3, [r3, #0]
 8001880:	68ba      	ldr	r2, [r7, #8]
 8001882:	68f8      	ldr	r0, [r7, #12]
 8001884:	2100      	movs	r1, #0
 8001886:	f001 fa35 	bl	8002cf4 <DCD_EP_PrepareRx>
                    0,
                    pbuf,
                    len);
  

  return ret;
 800188a:	2317      	movs	r3, #23
 800188c:	18fb      	adds	r3, r7, r3
 800188e:	781b      	ldrb	r3, [r3, #0]
}
 8001890:	0018      	movs	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	b006      	add	sp, #24
 8001896:	bd80      	pop	{r7, pc}

08001898 <USBD_CtlContinueRx>:
  * @retval status
  */
USBD_Status  USBD_CtlContinueRx (USB_CORE_HANDLE  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	1dbb      	adds	r3, r7, #6
 80018a4:	801a      	strh	r2, [r3, #0]
  USBD_Status ret = USBD_OK;
 80018a6:	2317      	movs	r3, #23
 80018a8:	18fb      	adds	r3, r7, r3
 80018aa:	2200      	movs	r2, #0
 80018ac:	701a      	strb	r2, [r3, #0]
  
  DCD_EP_PrepareRx (pdev,
 80018ae:	1dbb      	adds	r3, r7, #6
 80018b0:	881b      	ldrh	r3, [r3, #0]
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	68f8      	ldr	r0, [r7, #12]
 80018b6:	2100      	movs	r1, #0
 80018b8:	f001 fa1c 	bl	8002cf4 <DCD_EP_PrepareRx>
                    0,                     
                    pbuf,                         
                    len);
  return ret;
 80018bc:	2317      	movs	r3, #23
 80018be:	18fb      	adds	r3, r7, r3
 80018c0:	781b      	ldrb	r3, [r3, #0]
}
 80018c2:	0018      	movs	r0, r3
 80018c4:	46bd      	mov	sp, r7
 80018c6:	b006      	add	sp, #24
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	46c0      	nop			; (mov r8, r8)

080018cc <USBD_CtlSendStatus>:
  *         send zero length packet on the ctl pipe
  * @param  pdev: USB device instance
  * @retval status
  */
USBD_Status  USBD_CtlSendStatus (USB_CORE_HANDLE  *pdev)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  USBD_Status ret = USBD_OK;
 80018d4:	230f      	movs	r3, #15
 80018d6:	18fb      	adds	r3, r7, r3
 80018d8:	2200      	movs	r2, #0
 80018da:	701a      	strb	r2, [r3, #0]
  pdev->dev.device_state = USB_EP0_STATUS_IN;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2204      	movs	r2, #4
 80018e0:	705a      	strb	r2, [r3, #1]
  DCD_EP_Tx (pdev,
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	2300      	movs	r3, #0
 80018e6:	2200      	movs	r2, #0
 80018e8:	2100      	movs	r1, #0
 80018ea:	f001 fa65 	bl	8002db8 <DCD_EP_Tx>
             0,
             NULL, 
             0); 
  return ret;
 80018ee:	230f      	movs	r3, #15
 80018f0:	18fb      	adds	r3, r7, r3
 80018f2:	781b      	ldrb	r3, [r3, #0]
}
 80018f4:	0018      	movs	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	b004      	add	sp, #16
 80018fa:	bd80      	pop	{r7, pc}

080018fc <USBD_CtlReceiveStatus>:
  *         receive zero length packet on the ctl pipe
  * @param  pdev: USB device instance
  * @retval status
  */
USBD_Status  USBD_CtlReceiveStatus (USB_CORE_HANDLE  *pdev)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  USBD_Status ret = USBD_OK;
 8001904:	230f      	movs	r3, #15
 8001906:	18fb      	adds	r3, r7, r3
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]
  pdev->dev.device_state = USB_EP0_STATUS_OUT;  
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2205      	movs	r2, #5
 8001910:	705a      	strb	r2, [r3, #1]
  DCD_EP_PrepareRx ( pdev,
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	2300      	movs	r3, #0
 8001916:	2200      	movs	r2, #0
 8001918:	2100      	movs	r1, #0
 800191a:	f001 f9eb 	bl	8002cf4 <DCD_EP_PrepareRx>
                    0,
                    NULL,
                    0); 
  
  return ret;
 800191e:	230f      	movs	r3, #15
 8001920:	18fb      	adds	r3, r7, r3
 8001922:	781b      	ldrb	r3, [r3, #0]
}
 8001924:	0018      	movs	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	b004      	add	sp, #16
 800192a:	bd80      	pop	{r7, pc}

0800192c <USBD_Init>:
  */
void USBD_Init(USB_CORE_HANDLE *pdev,
               USBD_DEVICE *pDevice,                  
               USBD_Class_cb_TypeDef *class_cb, 
               USBD_Usr_cb_TypeDef *usr_cb)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
 8001938:	603b      	str	r3, [r7, #0]
  /* Hardware Init */
  USB_BSP_Init(pdev);  
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	0018      	movs	r0, r3
 800193e:	f7fe fedf 	bl	8000700 <USB_BSP_Init>
  
  USBD_DeInit(pdev);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	0018      	movs	r0, r3
 8001946:	f000 f827 	bl	8001998 <USBD_DeInit>
  
  /*Register class and user callbacks */
  pdev->dev.class_cb = class_cb;
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	23ac      	movs	r3, #172	; 0xac
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	50d1      	str	r1, [r2, r3]
  pdev->dev.usr_cb = usr_cb;  
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	23ae      	movs	r3, #174	; 0xae
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	6839      	ldr	r1, [r7, #0]
 800195c:	50d1      	str	r1, [r2, r3]
  pdev->dev.usr_device = pDevice;    
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	23b0      	movs	r3, #176	; 0xb0
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	68b9      	ldr	r1, [r7, #8]
 8001966:	50d1      	str	r1, [r2, r3]
  
  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 8001968:	f7fe fe4e 	bl	8000608 <Get_SerialNum>
  
  /* set USB DEVICE core params */
  DCD_Init(pdev);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	0018      	movs	r0, r3
 8001970:	f000 ffa2 	bl	80028b8 <DCD_Init>
  
  /* Upon Init call usr callback */
  pdev->dev.usr_cb->Init();
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	23ae      	movs	r3, #174	; 0xae
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	58d3      	ldr	r3, [r2, r3]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4798      	blx	r3
//  dbgLED_off();
//  delay(500);


  /* Enable Interrupts */
  USB_BSP_EnableInterrupt(pdev);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	0018      	movs	r0, r3
 8001984:	f7fe fed0 	bl	8000728 <USB_BSP_EnableInterrupt>
//  delay(500);
  //TODO: Program flow works till here!

  /* Enable the pull-up */
//#ifdef INTERNAL_PULLUP
  DCD_DevConnect(pdev);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	0018      	movs	r0, r3
 800198c:	f001 fba8 	bl	80030e0 <DCD_DevConnect>
//  dbgLED_on();
//#else
// USB_BSP_DevConnect(pdev);
//#endif
  //TODO: but it's already stuck here!
}
 8001990:	46c0      	nop			; (mov r8, r8)
 8001992:	46bd      	mov	sp, r7
 8001994:	b004      	add	sp, #16
 8001996:	bd80      	pop	{r7, pc}

08001998 <USBD_DeInit>:
  *         Re-Initialize th device library
  * @param  pdev: device instance
  * @retval status: status
  */
USBD_Status USBD_DeInit(USB_CORE_HANDLE *pdev)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Software Init */
  
  return USBD_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	0018      	movs	r0, r3
 80019a4:	46bd      	mov	sp, r7
 80019a6:	b002      	add	sp, #8
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	46c0      	nop			; (mov r8, r8)

080019ac <USBD_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_SetupStage(USB_CORE_HANDLE *pdev)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  USB_SETUP_REQ req;
  
  USBD_ParseSetupRequest(pdev , &req);
 80019b4:	2308      	movs	r3, #8
 80019b6:	18fa      	adds	r2, r7, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	0011      	movs	r1, r2
 80019bc:	0018      	movs	r0, r3
 80019be:	f7ff fe47 	bl	8001650 <USBD_ParseSetupRequest>
  
  switch (req.bmRequest & 0x1F) 
 80019c2:	2308      	movs	r3, #8
 80019c4:	18fb      	adds	r3, r7, r3
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	001a      	movs	r2, r3
 80019ca:	231f      	movs	r3, #31
 80019cc:	4013      	ands	r3, r2
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d00b      	beq.n	80019ea <USBD_SetupStage+0x3e>
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d011      	beq.n	80019fa <USBD_SetupStage+0x4e>
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d117      	bne.n	8001a0a <USBD_SetupStage+0x5e>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &req);
 80019da:	2308      	movs	r3, #8
 80019dc:	18fa      	adds	r2, r7, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	0011      	movs	r1, r2
 80019e2:	0018      	movs	r0, r3
 80019e4:	f7ff fa38 	bl	8000e58 <USBD_StdDevReq>
    break;
 80019e8:	e01b      	b.n	8001a22 <USBD_SetupStage+0x76>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &req);
 80019ea:	2308      	movs	r3, #8
 80019ec:	18fa      	adds	r2, r7, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	0011      	movs	r1, r2
 80019f2:	0018      	movs	r0, r3
 80019f4:	f7ff fa84 	bl	8000f00 <USBD_StdItfReq>
    break;
 80019f8:	e013      	b.n	8001a22 <USBD_SetupStage+0x76>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &req);   
 80019fa:	2308      	movs	r3, #8
 80019fc:	18fa      	adds	r2, r7, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	0011      	movs	r1, r2
 8001a02:	0018      	movs	r0, r3
 8001a04:	f7ff fac0 	bl	8000f88 <USBD_StdEPReq>
    break;
 8001a08:	e00b      	b.n	8001a22 <USBD_SetupStage+0x76>
    
  default:           
    DCD_EP_Stall(pdev , req.bmRequest & 0x80);
 8001a0a:	2308      	movs	r3, #8
 8001a0c:	18fb      	adds	r3, r7, r3
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	227f      	movs	r2, #127	; 0x7f
 8001a12:	4393      	bics	r3, r2
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	0011      	movs	r1, r2
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	f001 fa62 	bl	8002ee4 <DCD_EP_Stall>
    break;
 8001a20:	46c0      	nop			; (mov r8, r8)
  }  
  return USBD_OK;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	0018      	movs	r0, r3
 8001a26:	46bd      	mov	sp, r7
 8001a28:	b004      	add	sp, #16
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <USBD_DataOutStage>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_DataOutStage(USB_CORE_HANDLE *pdev , uint8_t epnum)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	000a      	movs	r2, r1
 8001a36:	1cfb      	adds	r3, r7, #3
 8001a38:	701a      	strb	r2, [r3, #0]
  USB_EP *ep;
  
  if(epnum == 0) 
 8001a3a:	1cfb      	adds	r3, r7, #3
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d13a      	bne.n	8001ab8 <USBD_DataOutStage+0x8c>
  {
    ep = &pdev->dev.out_ep[0];
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	33b8      	adds	r3, #184	; 0xb8
 8001a46:	60fb      	str	r3, [r7, #12]
    if ( pdev->dev.device_state == USB_EP0_DATA_OUT)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	785b      	ldrb	r3, [r3, #1]
 8001a4c:	2b03      	cmp	r3, #3
 8001a4e:	d148      	bne.n	8001ae2 <USBD_DataOutStage+0xb6>
    {
      if(ep->rem_data_len > ep->maxpacket)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	69da      	ldr	r2, [r3, #28]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d915      	bls.n	8001a88 <USBD_DataOutStage+0x5c>
      {
        ep->rem_data_len -=  ep->maxpacket;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	69da      	ldr	r2, [r3, #28]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	1ad2      	subs	r2, r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	61da      	str	r2, [r3, #28]
                
        USBD_CtlContinueRx (pdev, 
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6919      	ldr	r1, [r3, #16]
                            ep->xfer_buff,
                            MIN(ep->rem_data_len ,ep->maxpacket));
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	68da      	ldr	r2, [r3, #12]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d900      	bls.n	8001a7c <USBD_DataOutStage+0x50>
 8001a7a:	001a      	movs	r2, r3
    {
      if(ep->rem_data_len > ep->maxpacket)
      {
        ep->rem_data_len -=  ep->maxpacket;
                
        USBD_CtlContinueRx (pdev, 
 8001a7c:	b292      	uxth	r2, r2
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	0018      	movs	r0, r3
 8001a82:	f7ff ff09 	bl	8001898 <USBD_CtlContinueRx>
 8001a86:	e02c      	b.n	8001ae2 <USBD_DataOutStage+0xb6>
                            ep->xfer_buff,
                            MIN(ep->rem_data_len ,ep->maxpacket));
      }
      else
      {
        if((pdev->dev.class_cb->EP0_RxReady != NULL)&&
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	23ac      	movs	r3, #172	; 0xac
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	58d3      	ldr	r3, [r2, r3]
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d00b      	beq.n	8001aae <USBD_DataOutStage+0x82>
           (pdev->dev.device_status == USB_CONFIGURED))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	789b      	ldrb	r3, [r3, #2]
                            ep->xfer_buff,
                            MIN(ep->rem_data_len ,ep->maxpacket));
      }
      else
      {
        if((pdev->dev.class_cb->EP0_RxReady != NULL)&&
 8001a9a:	2b03      	cmp	r3, #3
 8001a9c:	d107      	bne.n	8001aae <USBD_DataOutStage+0x82>
           (pdev->dev.device_status == USB_CONFIGURED))
        {
          pdev->dev.class_cb->EP0_RxReady(pdev); 
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	23ac      	movs	r3, #172	; 0xac
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	58d3      	ldr	r3, [r2, r3]
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	0010      	movs	r0, r2
 8001aac:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f7ff ff0b 	bl	80018cc <USBD_CtlSendStatus>
 8001ab6:	e014      	b.n	8001ae2 <USBD_DataOutStage+0xb6>
      }
    }
  }
  else if((pdev->dev.class_cb->DataOut != NULL)&&
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	23ac      	movs	r3, #172	; 0xac
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	58d3      	ldr	r3, [r2, r3]
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d00d      	beq.n	8001ae2 <USBD_DataOutStage+0xb6>
          (pdev->dev.device_status == USB_CONFIGURED))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	789b      	ldrb	r3, [r3, #2]
        }
        USBD_CtlSendStatus(pdev);
      }
    }
  }
  else if((pdev->dev.class_cb->DataOut != NULL)&&
 8001aca:	2b03      	cmp	r3, #3
 8001acc:	d109      	bne.n	8001ae2 <USBD_DataOutStage+0xb6>
          (pdev->dev.device_status == USB_CONFIGURED))
  {
    pdev->dev.class_cb->DataOut(pdev, epnum); 
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	23ac      	movs	r3, #172	; 0xac
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	58d3      	ldr	r3, [r2, r3]
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	1cfa      	adds	r2, r7, #3
 8001ada:	7811      	ldrb	r1, [r2, #0]
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	0010      	movs	r0, r2
 8001ae0:	4798      	blx	r3
  }  
  return USBD_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	b004      	add	sp, #16
 8001aea:	bd80      	pop	{r7, pc}

08001aec <USBD_DataInStage>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_DataInStage(USB_CORE_HANDLE *pdev , uint8_t epnum)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	000a      	movs	r2, r1
 8001af6:	1cfb      	adds	r3, r7, #3
 8001af8:	701a      	strb	r2, [r3, #0]
  USB_EP *ep;
  
  if(epnum == 0) 
 8001afa:	1cfb      	adds	r3, r7, #3
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d000      	beq.n	8001b04 <USBD_DataInStage+0x18>
 8001b02:	e069      	b.n	8001bd8 <USBD_DataInStage+0xec>
  {
    ep = &pdev->dev.in_ep[0];
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3318      	adds	r3, #24
 8001b08:	60fb      	str	r3, [r7, #12]
    if ( pdev->dev.device_state == USB_EP0_DATA_IN)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	785b      	ldrb	r3, [r3, #1]
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d14e      	bne.n	8001bb0 <USBD_DataInStage+0xc4>
    {
      if(ep->rem_data_len > ep->maxpacket)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	69da      	ldr	r2, [r3, #28]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d910      	bls.n	8001b40 <USBD_DataInStage+0x54>
      {
        ep->rem_data_len -=  ep->maxpacket;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	69da      	ldr	r2, [r3, #28]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	1ad2      	subs	r2, r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	61da      	str	r2, [r3, #28]
        USBD_CtlContinueSendData (pdev, 
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6919      	ldr	r1, [r3, #16]
                                  ep->xfer_buff, 
                                  ep->rem_data_len);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	69db      	ldr	r3, [r3, #28]
    if ( pdev->dev.device_state == USB_EP0_DATA_IN)
    {
      if(ep->rem_data_len > ep->maxpacket)
      {
        ep->rem_data_len -=  ep->maxpacket;
        USBD_CtlContinueSendData (pdev, 
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	0018      	movs	r0, r3
 8001b3a:	f7ff fe6d 	bl	8001818 <USBD_CtlContinueSendData>
 8001b3e:	e060      	b.n	8001c02 <USBD_DataInStage+0x116>
                                  ep->xfer_buff, 
                                  ep->rem_data_len);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((ep->total_data_len % ep->maxpacket == 0) &&
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6a1a      	ldr	r2, [r3, #32]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	0019      	movs	r1, r3
 8001b4a:	0010      	movs	r0, r2
 8001b4c:	f7fe fb62 	bl	8000214 <__aeabi_uidivmod>
 8001b50:	1e0b      	subs	r3, r1, #0
 8001b52:	d115      	bne.n	8001b80 <USBD_DataInStage+0x94>
           (ep->total_data_len >= ep->maxpacket) &&
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6a1a      	ldr	r2, [r3, #32]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	68db      	ldr	r3, [r3, #12]
                                  ep->xfer_buff, 
                                  ep->rem_data_len);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((ep->total_data_len % ep->maxpacket == 0) &&
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d30f      	bcc.n	8001b80 <USBD_DataInStage+0x94>
           (ep->total_data_len >= ep->maxpacket) &&
             (ep->total_data_len < ep->ctl_data_len ))
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6a1a      	ldr	r2, [r3, #32]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                  ep->rem_data_len);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((ep->total_data_len % ep->maxpacket == 0) &&
           (ep->total_data_len >= ep->maxpacket) &&
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d209      	bcs.n	8001b80 <USBD_DataInStage+0x94>
             (ep->total_data_len < ep->ctl_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2100      	movs	r1, #0
 8001b72:	0018      	movs	r0, r3
 8001b74:	f7ff fe50 	bl	8001818 <USBD_CtlContinueSendData>
          ep->ctl_data_len = 0;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	625a      	str	r2, [r3, #36]	; 0x24
 8001b7e:	e040      	b.n	8001c02 <USBD_DataInStage+0x116>
        }
        else
        {
          if((pdev->dev.class_cb->EP0_TxSent != NULL)&&
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	23ac      	movs	r3, #172	; 0xac
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	58d3      	ldr	r3, [r2, r3]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d00b      	beq.n	8001ba6 <USBD_DataInStage+0xba>
             (pdev->dev.device_status == USB_CONFIGURED))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	789b      	ldrb	r3, [r3, #2]
          USBD_CtlContinueSendData(pdev , NULL, 0);
          ep->ctl_data_len = 0;
        }
        else
        {
          if((pdev->dev.class_cb->EP0_TxSent != NULL)&&
 8001b92:	2b03      	cmp	r3, #3
 8001b94:	d107      	bne.n	8001ba6 <USBD_DataInStage+0xba>
             (pdev->dev.device_status == USB_CONFIGURED))
          {
            pdev->dev.class_cb->EP0_TxSent(pdev); 
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	23ac      	movs	r3, #172	; 0xac
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	58d3      	ldr	r3, [r2, r3]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	0010      	movs	r0, r2
 8001ba4:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	0018      	movs	r0, r3
 8001baa:	f7ff fea7 	bl	80018fc <USBD_CtlReceiveStatus>
 8001bae:	e028      	b.n	8001c02 <USBD_DataInStage+0x116>
        }
      }
    }
    else  if ((pdev->dev.device_state == USB_EP0_STATUS_IN)&& (ADDRESS!=0))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	785b      	ldrb	r3, [r3, #1]
 8001bb4:	2b04      	cmp	r3, #4
 8001bb6:	d124      	bne.n	8001c02 <USBD_DataInStage+0x116>
 8001bb8:	4b14      	ldr	r3, [pc, #80]	; (8001c0c <USBD_DataInStage+0x120>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d020      	beq.n	8001c02 <USBD_DataInStage+0x116>
    {
      
      DCD_EP_SetAddress(pdev, ADDRESS); 
 8001bc0:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <USBD_DataInStage+0x120>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	0011      	movs	r1, r2
 8001bca:	0018      	movs	r0, r3
 8001bcc:	f001 fa44 	bl	8003058 <DCD_EP_SetAddress>
      ADDRESS = 0;
 8001bd0:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <USBD_DataInStage+0x120>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	e014      	b.n	8001c02 <USBD_DataInStage+0x116>
    }
  }
  else if((pdev->dev.class_cb->DataIn != NULL)&& 
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	23ac      	movs	r3, #172	; 0xac
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	58d3      	ldr	r3, [r2, r3]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00d      	beq.n	8001c02 <USBD_DataInStage+0x116>
          (pdev->dev.device_status == USB_CONFIGURED))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	789b      	ldrb	r3, [r3, #2]
      
      DCD_EP_SetAddress(pdev, ADDRESS); 
      ADDRESS = 0;
    }
  }
  else if((pdev->dev.class_cb->DataIn != NULL)&& 
 8001bea:	2b03      	cmp	r3, #3
 8001bec:	d109      	bne.n	8001c02 <USBD_DataInStage+0x116>
          (pdev->dev.device_status == USB_CONFIGURED))
  {
    pdev->dev.class_cb->DataIn(pdev, epnum); 
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	23ac      	movs	r3, #172	; 0xac
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	58d3      	ldr	r3, [r2, r3]
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	1cfa      	adds	r2, r7, #3
 8001bfa:	7811      	ldrb	r1, [r2, #0]
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	0010      	movs	r0, r2
 8001c00:	4798      	blx	r3
  }  
  return USBD_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	0018      	movs	r0, r3
 8001c06:	46bd      	mov	sp, r7
 8001c08:	b004      	add	sp, #16
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	200000e4 	.word	0x200000e4

08001c10 <USBD_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

static uint8_t USBD_Reset(USB_CORE_HANDLE  *pdev)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]

  DCD_PMA_Config(pdev , 0x00 ,USB_SNG_BUF, ENDP0_RX_ADDRESS);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	2340      	movs	r3, #64	; 0x40
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2100      	movs	r1, #0
 8001c20:	f000 fe76 	bl	8002910 <DCD_PMA_Config>
  DCD_PMA_Config(pdev , 0x80 ,USB_SNG_BUF, ENDP0_TX_ADDRESS);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	2380      	movs	r3, #128	; 0x80
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2180      	movs	r1, #128	; 0x80
 8001c2c:	f000 fe70 	bl	8002910 <DCD_PMA_Config>

  /* Open EP0 OUT */
  DCD_EP_Open(pdev,
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	2300      	movs	r3, #0
 8001c34:	2240      	movs	r2, #64	; 0x40
 8001c36:	2100      	movs	r1, #0
 8001c38:	f000 feb8 	bl	80029ac <DCD_EP_Open>
              0x00,
              USB_MAX_EP0_SIZE,
              EP_TYPE_CTRL);
  
  /* Open EP0 IN */
  DCD_EP_Open(pdev,
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	2300      	movs	r3, #0
 8001c40:	2240      	movs	r2, #64	; 0x40
 8001c42:	2180      	movs	r1, #128	; 0x80
 8001c44:	f000 feb2 	bl	80029ac <DCD_EP_Open>
              0x80,
              USB_MAX_EP0_SIZE,
              EP_TYPE_CTRL);
  
  /* Upon Reset call user call back */
  pdev->dev.device_status = USB_DEFAULT;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	709a      	strb	r2, [r3, #2]
  pdev->dev.usr_cb->DeviceReset(pdev->dev.speed);
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	23ae      	movs	r3, #174	; 0xae
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	58d3      	ldr	r3, [r2, r3]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	0018      	movs	r0, r3
 8001c60:	4790      	blx	r2
  
  return USBD_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	0018      	movs	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	b002      	add	sp, #8
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <USBD_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

static uint8_t USBD_Resume(USB_CORE_HANDLE  *pdev)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Upon Resume call user call back */
  pdev->dev.usr_cb->DeviceResumed(); 
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	23ae      	movs	r3, #174	; 0xae
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	58d3      	ldr	r3, [r2, r3]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	4798      	blx	r3
  pdev->dev.device_status = pdev->dev.device_old_status;   
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	78da      	ldrb	r2, [r3, #3]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	709a      	strb	r2, [r3, #2]
  return USBD_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	b002      	add	sp, #8
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	46c0      	nop			; (mov r8, r8)

08001c94 <USBD_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

static uint8_t USBD_Suspend(USB_CORE_HANDLE  *pdev)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  pdev->dev.device_old_status = pdev->dev.device_status;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	789a      	ldrb	r2, [r3, #2]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	70da      	strb	r2, [r3, #3]
  /*Device is in Suspended State*/
  pdev->dev.device_status  = USB_SUSPENDED;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2204      	movs	r2, #4
 8001ca8:	709a      	strb	r2, [r3, #2]
  /* Upon Resume call user call back */
  pdev->dev.usr_cb->DeviceSuspended(); 
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	23ae      	movs	r3, #174	; 0xae
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	58d3      	ldr	r3, [r2, r3]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	4798      	blx	r3
  return USBD_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	0018      	movs	r0, r3
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	b002      	add	sp, #8
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <USBD_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

static uint8_t USBD_SOF(USB_CORE_HANDLE  *pdev)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  if(pdev->dev.class_cb->SOF)
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	23ac      	movs	r3, #172	; 0xac
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	58d3      	ldr	r3, [r2, r3]
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d007      	beq.n	8001ce6 <USBD_SOF+0x26>
  {
    pdev->dev.class_cb->SOF(pdev); 
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	23ac      	movs	r3, #172	; 0xac
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	58d3      	ldr	r3, [r2, r3]
 8001cde:	69db      	ldr	r3, [r3, #28]
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	0010      	movs	r0, r2
 8001ce4:	4798      	blx	r3
  }
  return USBD_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	0018      	movs	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	b002      	add	sp, #8
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <USBD_SetCfg>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_Status USBD_SetCfg(USB_CORE_HANDLE  *pdev, uint8_t cfgidx)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	000a      	movs	r2, r1
 8001cfa:	1cfb      	adds	r3, r7, #3
 8001cfc:	701a      	strb	r2, [r3, #0]
  pdev->dev.class_cb->Init(pdev, cfgidx); 
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	23ac      	movs	r3, #172	; 0xac
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	58d3      	ldr	r3, [r2, r3]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	1cfa      	adds	r2, r7, #3
 8001d0a:	7811      	ldrb	r1, [r2, #0]
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	0010      	movs	r0, r2
 8001d10:	4798      	blx	r3
  
  /* Upon set config call user call back */
  pdev->dev.usr_cb->DeviceConfigured();
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	23ae      	movs	r3, #174	; 0xae
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	58d3      	ldr	r3, [r2, r3]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	4798      	blx	r3
  return USBD_OK; 
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	0018      	movs	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	b002      	add	sp, #8
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <USBD_ClrCfg>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_Status
  */
USBD_Status USBD_ClrCfg(USB_CORE_HANDLE  *pdev, uint8_t cfgidx)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	000a      	movs	r2, r1
 8001d32:	1cfb      	adds	r3, r7, #3
 8001d34:	701a      	strb	r2, [r3, #0]
  pdev->dev.class_cb->DeInit(pdev, cfgidx);   
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	23ac      	movs	r3, #172	; 0xac
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	58d3      	ldr	r3, [r2, r3]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	1cfa      	adds	r2, r7, #3
 8001d42:	7811      	ldrb	r1, [r2, #0]
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	0010      	movs	r0, r2
 8001d48:	4798      	blx	r3
  return USBD_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	b002      	add	sp, #8
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <usbd_cdc_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
uint8_t  usbd_cdc_Init (void  *pdev, 
                               uint8_t cfgidx)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	000a      	movs	r2, r1
 8001d5e:	1cfb      	adds	r3, r7, #3
 8001d60:	701a      	strb	r2, [r3, #0]
  DCD_PMA_Config(pdev , CDC_IN_EP,USB_SNG_BUF,BULK_IN_TX_ADDRESS);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	23c0      	movs	r3, #192	; 0xc0
 8001d66:	2200      	movs	r2, #0
 8001d68:	2181      	movs	r1, #129	; 0x81
 8001d6a:	f000 fdd1 	bl	8002910 <DCD_PMA_Config>
  DCD_PMA_Config(pdev , CDC_CMD_EP,USB_SNG_BUF,INT_IN_TX_ADDRESS);
 8001d6e:	2380      	movs	r3, #128	; 0x80
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	2182      	movs	r1, #130	; 0x82
 8001d78:	f000 fdca 	bl	8002910 <DCD_PMA_Config>
  DCD_PMA_Config(pdev , CDC_OUT_EP,USB_SNG_BUF,BULK_OUT_RX_ADDRESS);
 8001d7c:	2388      	movs	r3, #136	; 0x88
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	2103      	movs	r1, #3
 8001d86:	f000 fdc3 	bl	8002910 <DCD_PMA_Config>

  /* Open EP IN */
  DCD_EP_Open(pdev,
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	2240      	movs	r2, #64	; 0x40
 8001d90:	2181      	movs	r1, #129	; 0x81
 8001d92:	f000 fe0b 	bl	80029ac <DCD_EP_Open>
              CDC_IN_EP,
              CDC_DATA_IN_PACKET_SIZE,
              USB_EP_BULK);
  
  /* Open EP OUT */
  DCD_EP_Open(pdev,
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	2302      	movs	r3, #2
 8001d9a:	2240      	movs	r2, #64	; 0x40
 8001d9c:	2103      	movs	r1, #3
 8001d9e:	f000 fe05 	bl	80029ac <DCD_EP_Open>
              CDC_OUT_EP,
              CDC_DATA_OUT_PACKET_SIZE,
              USB_EP_BULK);
  
  /* Open Command IN EP */
  DCD_EP_Open(pdev,
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	2303      	movs	r3, #3
 8001da6:	2208      	movs	r2, #8
 8001da8:	2182      	movs	r1, #130	; 0x82
 8001daa:	f000 fdff 	bl	80029ac <DCD_EP_Open>
              USB_EP_INT);
  

  
  /* Initialize the Interface physical components */
  APP_FOPS.pIf_Init();
 8001dae:	4b07      	ldr	r3, [pc, #28]	; (8001dcc <usbd_cdc_Init+0x78>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4798      	blx	r3

  /* Prepare Out endpoint to receive next packet */
  DCD_EP_PrepareRx(pdev,
 8001db4:	4a06      	ldr	r2, [pc, #24]	; (8001dd0 <usbd_cdc_Init+0x7c>)
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	2340      	movs	r3, #64	; 0x40
 8001dba:	2103      	movs	r1, #3
 8001dbc:	f000 ff9a 	bl	8002cf4 <DCD_EP_PrepareRx>
                   CDC_OUT_EP,
                   (uint8_t*)(USB_Rx_Buffer),
                   CDC_DATA_OUT_PACKET_SIZE);
  
  return USBD_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	b002      	add	sp, #8
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	46c0      	nop			; (mov r8, r8)
 8001dcc:	20000060 	.word	0x20000060
 8001dd0:	2000046c 	.word	0x2000046c

08001dd4 <usbd_cdc_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
uint8_t  usbd_cdc_DeInit (void  *pdev, 
                                 uint8_t cfgidx)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	000a      	movs	r2, r1
 8001dde:	1cfb      	adds	r3, r7, #3
 8001de0:	701a      	strb	r2, [r3, #0]
  /* Open EP IN */
  DCD_EP_Close(pdev,
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2181      	movs	r1, #129	; 0x81
 8001de6:	0018      	movs	r0, r3
 8001de8:	f000 fefe 	bl	8002be8 <DCD_EP_Close>
              CDC_IN_EP);
  
  /* Open EP OUT */
  DCD_EP_Close(pdev,
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2103      	movs	r1, #3
 8001df0:	0018      	movs	r0, r3
 8001df2:	f000 fef9 	bl	8002be8 <DCD_EP_Close>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  DCD_EP_Close(pdev,
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2182      	movs	r1, #130	; 0x82
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	f000 fef4 	bl	8002be8 <DCD_EP_Close>
              CDC_CMD_EP);

  /* Restore default state of the Interface physical components */
  APP_FOPS.pIf_DeInit();
 8001e00:	4b03      	ldr	r3, [pc, #12]	; (8001e10 <usbd_cdc_DeInit+0x3c>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	4798      	blx	r3
  
  return USBD_OK;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	0018      	movs	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	b002      	add	sp, #8
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20000060 	.word	0x20000060

08001e14 <usbd_cdc_Setup>:
  * @param  req: usb requests
  * @retval status
  */
uint8_t  usbd_cdc_Setup (void  *pdev, 
                                USB_SETUP_REQ *req)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  uint16_t len=USB_CDC_DESC_SIZ;
 8001e1e:	230e      	movs	r3, #14
 8001e20:	18fb      	adds	r3, r7, r3
 8001e22:	223a      	movs	r2, #58	; 0x3a
 8001e24:	801a      	strh	r2, [r3, #0]
  uint8_t  *pbuf= (uint8_t*)usbd_cdc_CfgDesc + 9;
 8001e26:	4b44      	ldr	r3, [pc, #272]	; (8001f38 <usbd_cdc_Setup+0x124>)
 8001e28:	60bb      	str	r3, [r7, #8]
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	001a      	movs	r2, r3
 8001e30:	2360      	movs	r3, #96	; 0x60
 8001e32:	4013      	ands	r3, r2
 8001e34:	d03f      	beq.n	8001eb6 <usbd_cdc_Setup+0xa2>
 8001e36:	2b20      	cmp	r3, #32
 8001e38:	d135      	bne.n	8001ea6 <usbd_cdc_Setup+0x92>
  {
    /* CDC Class Requests -------------------------------*/
  case USB_REQ_TYPE_CLASS :
      /* Check if the request is a data setup packet */
      if (req->wLength)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	88db      	ldrh	r3, [r3, #6]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d027      	beq.n	8001e92 <usbd_cdc_Setup+0x7e>
      {
        /* Check if the request is Device-to-Host */
        if (req->bmRequest & 0x80)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	b25b      	sxtb	r3, r3
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	da10      	bge.n	8001e6e <usbd_cdc_Setup+0x5a>
        {
          /* Get the data to be sent to Host from interface layer */
          APP_FOPS.pIf_Ctrl(req->bRequest, CmdBuff, req->wLength);
 8001e4c:	4b3b      	ldr	r3, [pc, #236]	; (8001f3c <usbd_cdc_Setup+0x128>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	7852      	ldrb	r2, [r2, #1]
 8001e54:	0010      	movs	r0, r2
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	88d2      	ldrh	r2, [r2, #6]
 8001e5a:	4939      	ldr	r1, [pc, #228]	; (8001f40 <usbd_cdc_Setup+0x12c>)
 8001e5c:	4798      	blx	r3
          
          /* Send the data to the host */
          USBD_CtlSendData (pdev, 
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	88da      	ldrh	r2, [r3, #6]
 8001e62:	4937      	ldr	r1, [pc, #220]	; (8001f40 <usbd_cdc_Setup+0x12c>)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	0018      	movs	r0, r3
 8001e68:	f7ff fcb2 	bl	80017d0 <USBD_CtlSendData>
 8001e6c:	e019      	b.n	8001ea2 <usbd_cdc_Setup+0x8e>
                            req->wLength);          
        }
        else /* Host-to-Device requeset */
        {
          /* Set the value of the current command to be processed */
          cdcCmd = req->bRequest;
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	785b      	ldrb	r3, [r3, #1]
 8001e72:	001a      	movs	r2, r3
 8001e74:	4b33      	ldr	r3, [pc, #204]	; (8001f44 <usbd_cdc_Setup+0x130>)
 8001e76:	601a      	str	r2, [r3, #0]
          cdcLen = req->wLength;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	88db      	ldrh	r3, [r3, #6]
 8001e7c:	001a      	movs	r2, r3
 8001e7e:	4b32      	ldr	r3, [pc, #200]	; (8001f48 <usbd_cdc_Setup+0x134>)
 8001e80:	601a      	str	r2, [r3, #0]
          
          /* Prepare the reception of the buffer over EP0
          Next step: the received data will be managed in usbd_cdc_EP0_TxSent() 
          function. */
          USBD_CtlPrepareRx (pdev,
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	88da      	ldrh	r2, [r3, #6]
 8001e86:	492e      	ldr	r1, [pc, #184]	; (8001f40 <usbd_cdc_Setup+0x12c>)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	f7ff fcde 	bl	800184c <USBD_CtlPrepareRx>
 8001e90:	e007      	b.n	8001ea2 <usbd_cdc_Setup+0x8e>
        }
      }
      else /* No Data request */
      {
        /* Transfer the command to the interface layer */
        APP_FOPS.pIf_Ctrl(req->bRequest, NULL, 0);
 8001e92:	4b2a      	ldr	r3, [pc, #168]	; (8001f3c <usbd_cdc_Setup+0x128>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	7852      	ldrb	r2, [r2, #1]
 8001e9a:	0010      	movs	r0, r2
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	4798      	blx	r3
      }
      
      return USBD_OK;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	e044      	b.n	8001f30 <usbd_cdc_Setup+0x11c>
      
    default:
      USBD_CtlError (pdev, req);
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	0011      	movs	r1, r2
 8001eac:	0018      	movs	r0, r3
 8001eae:	f7ff fc0d 	bl	80016cc <USBD_CtlError>
      return USBD_FAIL;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	e03c      	b.n	8001f30 <usbd_cdc_Setup+0x11c>
    
      
      
    /* Standard Requests -------------------------------*/
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	785b      	ldrb	r3, [r3, #1]
 8001eba:	2b0a      	cmp	r3, #10
 8001ebc:	d01d      	beq.n	8001efa <usbd_cdc_Setup+0xe6>
 8001ebe:	2b0b      	cmp	r3, #11
 8001ec0:	d022      	beq.n	8001f08 <usbd_cdc_Setup+0xf4>
 8001ec2:	2b06      	cmp	r3, #6
 8001ec4:	d133      	bne.n	8001f2e <usbd_cdc_Setup+0x11a>
    {
    case USB_REQ_GET_DESCRIPTOR: 
      if( (req->wValue >> 8) == CDC_DESCRIPTOR_TYPE)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	885b      	ldrh	r3, [r3, #2]
 8001eca:	0a1b      	lsrs	r3, r3, #8
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	2b21      	cmp	r3, #33	; 0x21
 8001ed0:	d10a      	bne.n	8001ee8 <usbd_cdc_Setup+0xd4>
      {
        pbuf = (uint8_t*)usbd_cdc_CfgDesc + 9 + (9 * USBD_ITF_MAX_NUM);
 8001ed2:	4b1e      	ldr	r3, [pc, #120]	; (8001f4c <usbd_cdc_Setup+0x138>)
 8001ed4:	60bb      	str	r3, [r7, #8]
        len = MIN(USB_CDC_DESC_SIZ , req->wLength);
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	88db      	ldrh	r3, [r3, #6]
 8001eda:	220e      	movs	r2, #14
 8001edc:	18ba      	adds	r2, r7, r2
 8001ede:	b299      	uxth	r1, r3
 8001ee0:	293a      	cmp	r1, #58	; 0x3a
 8001ee2:	d900      	bls.n	8001ee6 <usbd_cdc_Setup+0xd2>
 8001ee4:	233a      	movs	r3, #58	; 0x3a
 8001ee6:	8013      	strh	r3, [r2, #0]
      }
      
      USBD_CtlSendData (pdev, 
 8001ee8:	230e      	movs	r3, #14
 8001eea:	18fb      	adds	r3, r7, r3
 8001eec:	881a      	ldrh	r2, [r3, #0]
 8001eee:	68b9      	ldr	r1, [r7, #8]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	f7ff fc6c 	bl	80017d0 <USBD_CtlSendData>
                        pbuf,
                        len);
      break;
 8001ef8:	e019      	b.n	8001f2e <usbd_cdc_Setup+0x11a>
      
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
 8001efa:	4915      	ldr	r1, [pc, #84]	; (8001f50 <usbd_cdc_Setup+0x13c>)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	0018      	movs	r0, r3
 8001f02:	f7ff fc65 	bl	80017d0 <USBD_CtlSendData>
                        (uint8_t *)&usbd_cdc_AltSet,
                        1);
      break;
 8001f06:	e012      	b.n	8001f2e <usbd_cdc_Setup+0x11a>
      
    case USB_REQ_SET_INTERFACE :
      if ((uint8_t)(req->wValue) < USBD_ITF_MAX_NUM)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	885b      	ldrh	r3, [r3, #2]
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d106      	bne.n	8001f20 <usbd_cdc_Setup+0x10c>
      {
        usbd_cdc_AltSet = (uint8_t)(req->wValue);
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	885b      	ldrh	r3, [r3, #2]
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	001a      	movs	r2, r3
 8001f1a:	4b0d      	ldr	r3, [pc, #52]	; (8001f50 <usbd_cdc_Setup+0x13c>)
 8001f1c:	601a      	str	r2, [r3, #0]
      else
      {
        /* Call the error management function (command will be nacked */
        USBD_CtlError (pdev, req);
      }
      break;
 8001f1e:	e005      	b.n	8001f2c <usbd_cdc_Setup+0x118>
        usbd_cdc_AltSet = (uint8_t)(req->wValue);
      }
      else
      {
        /* Call the error management function (command will be nacked */
        USBD_CtlError (pdev, req);
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	0011      	movs	r1, r2
 8001f26:	0018      	movs	r0, r3
 8001f28:	f7ff fbd0 	bl	80016cc <USBD_CtlError>
      }
      break;
 8001f2c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return USBD_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	0018      	movs	r0, r3
 8001f32:	46bd      	mov	sp, r7
 8001f34:	b004      	add	sp, #16
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	08003e45 	.word	0x08003e45
 8001f3c:	20000060 	.word	0x20000060
 8001f40:	200004ac 	.word	0x200004ac
 8001f44:	20000094 	.word	0x20000094
 8001f48:	20000104 	.word	0x20000104
 8001f4c:	08003e4e 	.word	0x08003e4e
 8001f50:	200000ec 	.word	0x200000ec

08001f54 <usbd_cdc_EP0_RxReady>:
  *         Data received on control endpoint
  * @param  pdev: device device instance
  * @retval status
  */
uint8_t  usbd_cdc_EP0_RxReady (void  *pdev)
{ 
 8001f54:	b590      	push	{r4, r7, lr}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  if (cdcCmd != NO_CMD)
 8001f5c:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <usbd_cdc_EP0_RxReady+0x34>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2bff      	cmp	r3, #255	; 0xff
 8001f62:	d00b      	beq.n	8001f7c <usbd_cdc_EP0_RxReady+0x28>
  {
    /* Process the data */
    APP_FOPS.pIf_Ctrl(cdcCmd, CmdBuff, cdcLen);
 8001f64:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <usbd_cdc_EP0_RxReady+0x38>)
 8001f66:	689c      	ldr	r4, [r3, #8]
 8001f68:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <usbd_cdc_EP0_RxReady+0x34>)
 8001f6a:	6818      	ldr	r0, [r3, #0]
 8001f6c:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <usbd_cdc_EP0_RxReady+0x3c>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <usbd_cdc_EP0_RxReady+0x40>)
 8001f72:	0019      	movs	r1, r3
 8001f74:	47a0      	blx	r4
    
    /* Reset the command variable to default value */
    cdcCmd = NO_CMD;
 8001f76:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <usbd_cdc_EP0_RxReady+0x34>)
 8001f78:	22ff      	movs	r2, #255	; 0xff
 8001f7a:	601a      	str	r2, [r3, #0]
  }
  
  return USBD_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	0018      	movs	r0, r3
 8001f80:	46bd      	mov	sp, r7
 8001f82:	b003      	add	sp, #12
 8001f84:	bd90      	pop	{r4, r7, pc}
 8001f86:	46c0      	nop			; (mov r8, r8)
 8001f88:	20000094 	.word	0x20000094
 8001f8c:	20000060 	.word	0x20000060
 8001f90:	20000104 	.word	0x20000104
 8001f94:	200004ac 	.word	0x200004ac

08001f98 <usbd_cdc_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  usbd_cdc_DataIn (void *pdev, uint8_t epnum)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	000a      	movs	r2, r1
 8001fa2:	1cfb      	adds	r3, r7, #3
 8001fa4:	701a      	strb	r2, [r3, #0]
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if (USB_Tx_State == 1)
 8001fa6:	4b30      	ldr	r3, [pc, #192]	; (8002068 <usbd_cdc_DataIn+0xd0>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d156      	bne.n	800205c <usbd_cdc_DataIn+0xc4>
  {
    if (APP_Rx_length == 0) 
 8001fae:	4b2f      	ldr	r3, [pc, #188]	; (800206c <usbd_cdc_DataIn+0xd4>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d111      	bne.n	8001fda <usbd_cdc_DataIn+0x42>
    {
      if (last_packet ==1)
 8001fb6:	4b2e      	ldr	r3, [pc, #184]	; (8002070 <usbd_cdc_DataIn+0xd8>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d109      	bne.n	8001fd2 <usbd_cdc_DataIn+0x3a>
      {
        last_packet =0;
 8001fbe:	4b2c      	ldr	r3, [pc, #176]	; (8002070 <usbd_cdc_DataIn+0xd8>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
        
        /*Send zero-length packet*/
        DCD_EP_Tx (pdev, CDC_IN_EP, 0, 0);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2181      	movs	r1, #129	; 0x81
 8001fcc:	f000 fef4 	bl	8002db8 <DCD_EP_Tx>
 8001fd0:	e044      	b.n	800205c <usbd_cdc_DataIn+0xc4>
      }
      else
      {
        USB_Tx_State = 0;
 8001fd2:	4b25      	ldr	r3, [pc, #148]	; (8002068 <usbd_cdc_DataIn+0xd0>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	701a      	strb	r2, [r3, #0]
 8001fd8:	e040      	b.n	800205c <usbd_cdc_DataIn+0xc4>
      }
    }
    else 
    {
      if (APP_Rx_length > CDC_DATA_IN_PACKET_SIZE){
 8001fda:	4b24      	ldr	r3, [pc, #144]	; (800206c <usbd_cdc_DataIn+0xd4>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2b40      	cmp	r3, #64	; 0x40
 8001fe0:	d915      	bls.n	800200e <usbd_cdc_DataIn+0x76>
        USB_Tx_ptr = APP_Rx_ptr_out;
 8001fe2:	4b24      	ldr	r3, [pc, #144]	; (8002074 <usbd_cdc_DataIn+0xdc>)
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	230e      	movs	r3, #14
 8001fe8:	18fb      	adds	r3, r7, r3
 8001fea:	801a      	strh	r2, [r3, #0]
        USB_Tx_length = CDC_DATA_IN_PACKET_SIZE;
 8001fec:	230c      	movs	r3, #12
 8001fee:	18fb      	adds	r3, r7, r3
 8001ff0:	2240      	movs	r2, #64	; 0x40
 8001ff2:	801a      	strh	r2, [r3, #0]
        
        APP_Rx_ptr_out += CDC_DATA_IN_PACKET_SIZE;
 8001ff4:	4b1f      	ldr	r3, [pc, #124]	; (8002074 <usbd_cdc_DataIn+0xdc>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	3340      	adds	r3, #64	; 0x40
 8001ffa:	001a      	movs	r2, r3
 8001ffc:	4b1d      	ldr	r3, [pc, #116]	; (8002074 <usbd_cdc_DataIn+0xdc>)
 8001ffe:	601a      	str	r2, [r3, #0]
        APP_Rx_length -= CDC_DATA_IN_PACKET_SIZE;    
 8002000:	4b1a      	ldr	r3, [pc, #104]	; (800206c <usbd_cdc_DataIn+0xd4>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	3b40      	subs	r3, #64	; 0x40
 8002006:	001a      	movs	r2, r3
 8002008:	4b18      	ldr	r3, [pc, #96]	; (800206c <usbd_cdc_DataIn+0xd4>)
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	e01a      	b.n	8002044 <usbd_cdc_DataIn+0xac>
      }
      else 
      {
        USB_Tx_ptr = APP_Rx_ptr_out;
 800200e:	4b19      	ldr	r3, [pc, #100]	; (8002074 <usbd_cdc_DataIn+0xdc>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	230e      	movs	r3, #14
 8002014:	18fb      	adds	r3, r7, r3
 8002016:	801a      	strh	r2, [r3, #0]
        USB_Tx_length = APP_Rx_length;
 8002018:	4b14      	ldr	r3, [pc, #80]	; (800206c <usbd_cdc_DataIn+0xd4>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	230c      	movs	r3, #12
 800201e:	18fb      	adds	r3, r7, r3
 8002020:	801a      	strh	r2, [r3, #0]
        
        APP_Rx_ptr_out += APP_Rx_length;
 8002022:	4b14      	ldr	r3, [pc, #80]	; (8002074 <usbd_cdc_DataIn+0xdc>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	4b11      	ldr	r3, [pc, #68]	; (800206c <usbd_cdc_DataIn+0xd4>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	18d2      	adds	r2, r2, r3
 800202c:	4b11      	ldr	r3, [pc, #68]	; (8002074 <usbd_cdc_DataIn+0xdc>)
 800202e:	601a      	str	r2, [r3, #0]
        APP_Rx_length = 0;
 8002030:	4b0e      	ldr	r3, [pc, #56]	; (800206c <usbd_cdc_DataIn+0xd4>)
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
        if (APP_Rx_length == CDC_DATA_IN_PACKET_SIZE) last_packet = 1;
 8002036:	4b0d      	ldr	r3, [pc, #52]	; (800206c <usbd_cdc_DataIn+0xd4>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2b40      	cmp	r3, #64	; 0x40
 800203c:	d102      	bne.n	8002044 <usbd_cdc_DataIn+0xac>
 800203e:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <usbd_cdc_DataIn+0xd8>)
 8002040:	2201      	movs	r2, #1
 8002042:	601a      	str	r2, [r3, #0]
      }
      
      /* Prepare the available data buffer to be sent on IN endpoint */
      DCD_EP_Tx (pdev,
                 CDC_IN_EP,
                 (uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],
 8002044:	230e      	movs	r3, #14
 8002046:	18fb      	adds	r3, r7, r3
 8002048:	881a      	ldrh	r2, [r3, #0]
        APP_Rx_length = 0;
        if (APP_Rx_length == CDC_DATA_IN_PACKET_SIZE) last_packet = 1;
      }
      
      /* Prepare the available data buffer to be sent on IN endpoint */
      DCD_EP_Tx (pdev,
 800204a:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <usbd_cdc_DataIn+0xe0>)
 800204c:	18d2      	adds	r2, r2, r3
 800204e:	230c      	movs	r3, #12
 8002050:	18fb      	adds	r3, r7, r3
 8002052:	881b      	ldrh	r3, [r3, #0]
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	2181      	movs	r1, #129	; 0x81
 8002058:	f000 feae 	bl	8002db8 <DCD_EP_Tx>
                 (uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],
                 USB_Tx_length);
    }
  }  
  
  return USBD_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	0018      	movs	r0, r3
 8002060:	46bd      	mov	sp, r7
 8002062:	b004      	add	sp, #16
 8002064:	bd80      	pop	{r7, pc}
 8002066:	46c0      	nop			; (mov r8, r8)
 8002068:	20000100 	.word	0x20000100
 800206c:	200000fc 	.word	0x200000fc
 8002070:	200000f0 	.word	0x200000f0
 8002074:	200000f8 	.word	0x200000f8
 8002078:	200004b4 	.word	0x200004b4

0800207c <usbd_cdc_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  usbd_cdc_DataOut (void *pdev, uint8_t epnum)
{      
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	000a      	movs	r2, r1
 8002086:	1cfb      	adds	r3, r7, #3
 8002088:	701a      	strb	r2, [r3, #0]
  uint16_t USB_Rx_Cnt;
  
  /* Get the received data buffer and update the counter */
  USB_Rx_Cnt = ((USB_CORE_HANDLE*)pdev)->dev.out_ep[epnum].xfer_count;
 800208a:	1cfb      	adds	r3, r7, #3
 800208c:	781a      	ldrb	r2, [r3, #0]
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	20d0      	movs	r0, #208	; 0xd0
 8002092:	0013      	movs	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	189b      	adds	r3, r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	18cb      	adds	r3, r1, r3
 800209c:	181b      	adds	r3, r3, r0
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	230e      	movs	r3, #14
 80020a2:	18fb      	adds	r3, r7, r3
 80020a4:	801a      	strh	r2, [r3, #0]
  
  /* USB data will be immediately processed, this allow next USB traffic being 
     NAKed till the end of the application Xfer */
  APP_FOPS.pIf_DataRx(USB_Rx_Buffer, USB_Rx_Cnt);
 80020a6:	4b09      	ldr	r3, [pc, #36]	; (80020cc <usbd_cdc_DataOut+0x50>)
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	220e      	movs	r2, #14
 80020ac:	18ba      	adds	r2, r7, r2
 80020ae:	8811      	ldrh	r1, [r2, #0]
 80020b0:	4a07      	ldr	r2, [pc, #28]	; (80020d0 <usbd_cdc_DataOut+0x54>)
 80020b2:	0010      	movs	r0, r2
 80020b4:	4798      	blx	r3
  
  /* Prepare Out endpoint to receive next packet */
  DCD_EP_PrepareRx(pdev,
 80020b6:	4a06      	ldr	r2, [pc, #24]	; (80020d0 <usbd_cdc_DataOut+0x54>)
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	2340      	movs	r3, #64	; 0x40
 80020bc:	2103      	movs	r1, #3
 80020be:	f000 fe19 	bl	8002cf4 <DCD_EP_PrepareRx>
                   CDC_OUT_EP,
                   (uint8_t*)(USB_Rx_Buffer),
                   CDC_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	0018      	movs	r0, r3
 80020c6:	46bd      	mov	sp, r7
 80020c8:	b004      	add	sp, #16
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	20000060 	.word	0x20000060
 80020d0:	2000046c 	.word	0x2000046c

080020d4 <usbd_cdc_SOF>:
  * @param  pdev: instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  usbd_cdc_SOF (void *pdev)
{      
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  static uint32_t FrameCount = 0;
  
  if (FrameCount++ == CDC_IN_FRAME_INTERVAL)
 80020dc:	4b09      	ldr	r3, [pc, #36]	; (8002104 <usbd_cdc_SOF+0x30>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	1c59      	adds	r1, r3, #1
 80020e2:	4a08      	ldr	r2, [pc, #32]	; (8002104 <usbd_cdc_SOF+0x30>)
 80020e4:	6011      	str	r1, [r2, #0]
 80020e6:	2b05      	cmp	r3, #5
 80020e8:	d106      	bne.n	80020f8 <usbd_cdc_SOF+0x24>
  {
    /* Reset the frame counter */
    FrameCount = 0;
 80020ea:	4b06      	ldr	r3, [pc, #24]	; (8002104 <usbd_cdc_SOF+0x30>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
    
    /* Check the data to be sent through IN pipe */
    Handle_USBAsynchXfer(pdev);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	0018      	movs	r0, r3
 80020f4:	f000 f808 	bl	8002108 <Handle_USBAsynchXfer>
  }
  
  return USBD_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	0018      	movs	r0, r3
 80020fc:	46bd      	mov	sp, r7
 80020fe:	b002      	add	sp, #8
 8002100:	bd80      	pop	{r7, pc}
 8002102:	46c0      	nop			; (mov r8, r8)
 8002104:	20000108 	.word	0x20000108

08002108 <Handle_USBAsynchXfer>:
  *         Send data to USB
  * @param  pdev: instance
  * @retval None
  */
static void Handle_USBAsynchXfer (void *pdev)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if(USB_Tx_State != 1)
 8002110:	4b3d      	ldr	r3, [pc, #244]	; (8002208 <Handle_USBAsynchXfer+0x100>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d100      	bne.n	800211a <Handle_USBAsynchXfer+0x12>
 8002118:	e073      	b.n	8002202 <Handle_USBAsynchXfer+0xfa>
  {
    if (APP_Rx_ptr_out == APP_RX_DATA_SIZE)
 800211a:	4b3c      	ldr	r3, [pc, #240]	; (800220c <Handle_USBAsynchXfer+0x104>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	2380      	movs	r3, #128	; 0x80
 8002120:	011b      	lsls	r3, r3, #4
 8002122:	429a      	cmp	r2, r3
 8002124:	d102      	bne.n	800212c <Handle_USBAsynchXfer+0x24>
    {
      APP_Rx_ptr_out = 0;
 8002126:	4b39      	ldr	r3, [pc, #228]	; (800220c <Handle_USBAsynchXfer+0x104>)
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
    }
    
    if(APP_Rx_ptr_out == APP_Rx_ptr_in) 
 800212c:	4b37      	ldr	r3, [pc, #220]	; (800220c <Handle_USBAsynchXfer+0x104>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	4b37      	ldr	r3, [pc, #220]	; (8002210 <Handle_USBAsynchXfer+0x108>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	429a      	cmp	r2, r3
 8002136:	d103      	bne.n	8002140 <Handle_USBAsynchXfer+0x38>
    {
      USB_Tx_State = 0; 
 8002138:	4b33      	ldr	r3, [pc, #204]	; (8002208 <Handle_USBAsynchXfer+0x100>)
 800213a:	2200      	movs	r2, #0
 800213c:	701a      	strb	r2, [r3, #0]
      return;
 800213e:	e060      	b.n	8002202 <Handle_USBAsynchXfer+0xfa>
    }
    
    if(APP_Rx_ptr_out > APP_Rx_ptr_in) /* rollback */
 8002140:	4b32      	ldr	r3, [pc, #200]	; (800220c <Handle_USBAsynchXfer+0x104>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	4b32      	ldr	r3, [pc, #200]	; (8002210 <Handle_USBAsynchXfer+0x108>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d907      	bls.n	800215c <Handle_USBAsynchXfer+0x54>
    { 
      APP_Rx_length = APP_RX_DATA_SIZE - APP_Rx_ptr_out;
 800214c:	4b2f      	ldr	r3, [pc, #188]	; (800220c <Handle_USBAsynchXfer+0x104>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2280      	movs	r2, #128	; 0x80
 8002152:	0112      	lsls	r2, r2, #4
 8002154:	1ad2      	subs	r2, r2, r3
 8002156:	4b2f      	ldr	r3, [pc, #188]	; (8002214 <Handle_USBAsynchXfer+0x10c>)
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	e006      	b.n	800216a <Handle_USBAsynchXfer+0x62>
      
    }
    else 
    {
      APP_Rx_length = APP_Rx_ptr_in - APP_Rx_ptr_out;
 800215c:	4b2c      	ldr	r3, [pc, #176]	; (8002210 <Handle_USBAsynchXfer+0x108>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4b2a      	ldr	r3, [pc, #168]	; (800220c <Handle_USBAsynchXfer+0x104>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	1ad2      	subs	r2, r2, r3
 8002166:	4b2b      	ldr	r3, [pc, #172]	; (8002214 <Handle_USBAsynchXfer+0x10c>)
 8002168:	601a      	str	r2, [r3, #0]
      
    }
    
    if (APP_Rx_length > CDC_DATA_IN_PACKET_SIZE)
 800216a:	4b2a      	ldr	r3, [pc, #168]	; (8002214 <Handle_USBAsynchXfer+0x10c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2b40      	cmp	r3, #64	; 0x40
 8002170:	d915      	bls.n	800219e <Handle_USBAsynchXfer+0x96>
    {
      USB_Tx_ptr = APP_Rx_ptr_out;
 8002172:	4b26      	ldr	r3, [pc, #152]	; (800220c <Handle_USBAsynchXfer+0x104>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	230e      	movs	r3, #14
 8002178:	18fb      	adds	r3, r7, r3
 800217a:	801a      	strh	r2, [r3, #0]
      USB_Tx_length = CDC_DATA_IN_PACKET_SIZE;
 800217c:	230c      	movs	r3, #12
 800217e:	18fb      	adds	r3, r7, r3
 8002180:	2240      	movs	r2, #64	; 0x40
 8002182:	801a      	strh	r2, [r3, #0]
      
      APP_Rx_ptr_out += CDC_DATA_IN_PACKET_SIZE;	
 8002184:	4b21      	ldr	r3, [pc, #132]	; (800220c <Handle_USBAsynchXfer+0x104>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	3340      	adds	r3, #64	; 0x40
 800218a:	001a      	movs	r2, r3
 800218c:	4b1f      	ldr	r3, [pc, #124]	; (800220c <Handle_USBAsynchXfer+0x104>)
 800218e:	601a      	str	r2, [r3, #0]
      APP_Rx_length -= CDC_DATA_IN_PACKET_SIZE;
 8002190:	4b20      	ldr	r3, [pc, #128]	; (8002214 <Handle_USBAsynchXfer+0x10c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	3b40      	subs	r3, #64	; 0x40
 8002196:	001a      	movs	r2, r3
 8002198:	4b1e      	ldr	r3, [pc, #120]	; (8002214 <Handle_USBAsynchXfer+0x10c>)
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	e022      	b.n	80021e4 <Handle_USBAsynchXfer+0xdc>
    }
    else
    {
      USB_Tx_ptr = APP_Rx_ptr_out;
 800219e:	4b1b      	ldr	r3, [pc, #108]	; (800220c <Handle_USBAsynchXfer+0x104>)
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	230e      	movs	r3, #14
 80021a4:	18fb      	adds	r3, r7, r3
 80021a6:	801a      	strh	r2, [r3, #0]
      USB_Tx_length = APP_Rx_length;
 80021a8:	4b1a      	ldr	r3, [pc, #104]	; (8002214 <Handle_USBAsynchXfer+0x10c>)
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	230c      	movs	r3, #12
 80021ae:	18fb      	adds	r3, r7, r3
 80021b0:	801a      	strh	r2, [r3, #0]
      
      APP_Rx_ptr_out += APP_Rx_length;
 80021b2:	4b16      	ldr	r3, [pc, #88]	; (800220c <Handle_USBAsynchXfer+0x104>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	4b17      	ldr	r3, [pc, #92]	; (8002214 <Handle_USBAsynchXfer+0x10c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	18d2      	adds	r2, r2, r3
 80021bc:	4b13      	ldr	r3, [pc, #76]	; (800220c <Handle_USBAsynchXfer+0x104>)
 80021be:	601a      	str	r2, [r3, #0]
      APP_Rx_length = 0;
 80021c0:	4b14      	ldr	r3, [pc, #80]	; (8002214 <Handle_USBAsynchXfer+0x10c>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]
      if (USB_Tx_length == CDC_DATA_IN_PACKET_SIZE) last_packet = 1; //IBA
 80021c6:	230c      	movs	r3, #12
 80021c8:	18fb      	adds	r3, r7, r3
 80021ca:	881b      	ldrh	r3, [r3, #0]
 80021cc:	2b40      	cmp	r3, #64	; 0x40
 80021ce:	d102      	bne.n	80021d6 <Handle_USBAsynchXfer+0xce>
 80021d0:	4b11      	ldr	r3, [pc, #68]	; (8002218 <Handle_USBAsynchXfer+0x110>)
 80021d2:	2201      	movs	r2, #1
 80021d4:	601a      	str	r2, [r3, #0]
      if (APP_Rx_ptr_in == 64) APP_Rx_ptr_in=0;
 80021d6:	4b0e      	ldr	r3, [pc, #56]	; (8002210 <Handle_USBAsynchXfer+0x108>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2b40      	cmp	r3, #64	; 0x40
 80021dc:	d102      	bne.n	80021e4 <Handle_USBAsynchXfer+0xdc>
 80021de:	4b0c      	ldr	r3, [pc, #48]	; (8002210 <Handle_USBAsynchXfer+0x108>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
    }
    USB_Tx_State = 1; 
 80021e4:	4b08      	ldr	r3, [pc, #32]	; (8002208 <Handle_USBAsynchXfer+0x100>)
 80021e6:	2201      	movs	r2, #1
 80021e8:	701a      	strb	r2, [r3, #0]
    
    DCD_EP_Tx (pdev,
               CDC_IN_EP,
               (uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],
 80021ea:	230e      	movs	r3, #14
 80021ec:	18fb      	adds	r3, r7, r3
 80021ee:	881a      	ldrh	r2, [r3, #0]
      if (USB_Tx_length == CDC_DATA_IN_PACKET_SIZE) last_packet = 1; //IBA
      if (APP_Rx_ptr_in == 64) APP_Rx_ptr_in=0;
    }
    USB_Tx_State = 1; 
    
    DCD_EP_Tx (pdev,
 80021f0:	4b0a      	ldr	r3, [pc, #40]	; (800221c <Handle_USBAsynchXfer+0x114>)
 80021f2:	18d2      	adds	r2, r2, r3
 80021f4:	230c      	movs	r3, #12
 80021f6:	18fb      	adds	r3, r7, r3
 80021f8:	881b      	ldrh	r3, [r3, #0]
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	2181      	movs	r1, #129	; 0x81
 80021fe:	f000 fddb 	bl	8002db8 <DCD_EP_Tx>
               CDC_IN_EP,
               (uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],
               USB_Tx_length);
  }  
  
}
 8002202:	46bd      	mov	sp, r7
 8002204:	b004      	add	sp, #16
 8002206:	bd80      	pop	{r7, pc}
 8002208:	20000100 	.word	0x20000100
 800220c:	200000f8 	.word	0x200000f8
 8002210:	200000f4 	.word	0x200000f4
 8002214:	200000fc 	.word	0x200000fc
 8002218:	200000f0 	.word	0x200000f0
 800221c:	200004b4 	.word	0x200004b4

08002220 <USBD_cdc_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_cdc_GetCfgDesc (uint8_t speed, uint16_t *length)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	0002      	movs	r2, r0
 8002228:	6039      	str	r1, [r7, #0]
 800222a:	1dfb      	adds	r3, r7, #7
 800222c:	701a      	strb	r2, [r3, #0]
  *length = sizeof (usbd_cdc_CfgDesc);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	2243      	movs	r2, #67	; 0x43
 8002232:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)usbd_cdc_CfgDesc;
 8002234:	4b02      	ldr	r3, [pc, #8]	; (8002240 <USBD_cdc_GetCfgDesc+0x20>)
}
 8002236:	0018      	movs	r0, r3
 8002238:	46bd      	mov	sp, r7
 800223a:	b002      	add	sp, #8
 800223c:	bd80      	pop	{r7, pc}
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	08003e3c 	.word	0x08003e3c

08002244 <CTR>:
  * @brief  Correct Transfer interrupt's service
  * @param  None
  * @retval None
  */
void CTR(void)
{
 8002244:	b590      	push	{r4, r7, lr}
 8002246:	b087      	sub	sp, #28
 8002248:	af00      	add	r7, sp, #0
  USB_EP *ep;
  uint16_t count=0;
 800224a:	2316      	movs	r3, #22
 800224c:	18fb      	adds	r3, r7, r3
 800224e:	2200      	movs	r2, #0
 8002250:	801a      	strh	r2, [r3, #0]
  uint8_t EPindex;
  volatile uint16_t wIstr;
  volatile uint16_t wEPVal = 0;
 8002252:	1d3b      	adds	r3, r7, #4
 8002254:	2200      	movs	r2, #0
 8002256:	801a      	strh	r2, [r3, #0]
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8002258:	e26b      	b.n	8002732 <CTR+0x4ee>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 800225a:	1dbb      	adds	r3, r7, #6
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	b29b      	uxth	r3, r3
 8002260:	b2da      	uxtb	r2, r3
 8002262:	2313      	movs	r3, #19
 8002264:	18fb      	adds	r3, r7, r3
 8002266:	210f      	movs	r1, #15
 8002268:	400a      	ands	r2, r1
 800226a:	701a      	strb	r2, [r3, #0]
    
    if (EPindex == 0)
 800226c:	2313      	movs	r3, #19
 800226e:	18fb      	adds	r3, r7, r3
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d000      	beq.n	8002278 <CTR+0x34>
 8002276:	e0dd      	b.n	8002434 <CTR+0x1f0>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & ISTR_DIR) == 0)
 8002278:	1dbb      	adds	r3, r7, #6
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	b29b      	uxth	r3, r3
 800227e:	001a      	movs	r2, r3
 8002280:	2310      	movs	r3, #16
 8002282:	4013      	ands	r3, r2
 8002284:	d11f      	bne.n	80022c6 <CTR+0x82>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        _ClearEP_CTR_TX(ENDP0);
 8002286:	4bc5      	ldr	r3, [pc, #788]	; (800259c <CTR+0x358>)
 8002288:	4ac4      	ldr	r2, [pc, #784]	; (800259c <CTR+0x358>)
 800228a:	6812      	ldr	r2, [r2, #0]
 800228c:	49c4      	ldr	r1, [pc, #784]	; (80025a0 <CTR+0x35c>)
 800228e:	400a      	ands	r2, r1
 8002290:	601a      	str	r2, [r3, #0]
        ep = &((&USB_Device_dev)->dev.in_ep[0]);
 8002292:	4bc4      	ldr	r3, [pc, #784]	; (80025a4 <CTR+0x360>)
 8002294:	60fb      	str	r3, [r7, #12]
        
        ep->xfer_count = GetEPTxCount(ep->num);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	0018      	movs	r0, r3
 800229c:	f001 f9b0 	bl	8003600 <GetEPTxCount>
 80022a0:	0003      	movs	r3, r0
 80022a2:	001a      	movs	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	619a      	str	r2, [r3, #24]
        ep->xfer_buff += ep->xfer_count;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	691a      	ldr	r2, [r3, #16]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	18d2      	adds	r2, r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	611a      	str	r2, [r3, #16]
 
        /* TX COMPLETE */
        USBD_DCD_INT_fops->DataInStage(&USB_Device_dev, 0x00);
 80022b6:	4bbc      	ldr	r3, [pc, #752]	; (80025a8 <CTR+0x364>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	4abb      	ldr	r2, [pc, #748]	; (80025ac <CTR+0x368>)
 80022be:	2100      	movs	r1, #0
 80022c0:	0010      	movs	r0, r2
 80022c2:	4798      	blx	r3
 80022c4:	e235      	b.n	8002732 <CTR+0x4ee>
      {
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &((&USB_Device_dev)->dev.out_ep[0]);
 80022c6:	4bba      	ldr	r3, [pc, #744]	; (80025b0 <CTR+0x36c>)
 80022c8:	60fb      	str	r3, [r7, #12]
        wEPVal = _GetENDPOINT(ENDP0);
 80022ca:	4bb4      	ldr	r3, [pc, #720]	; (800259c <CTR+0x358>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	1d3b      	adds	r3, r7, #4
 80022d2:	801a      	strh	r2, [r3, #0]
        
        if ((wEPVal &EP_SETUP) != 0)
 80022d4:	1d3b      	adds	r3, r7, #4
 80022d6:	881b      	ldrh	r3, [r3, #0]
 80022d8:	b29b      	uxth	r3, r3
 80022da:	001a      	movs	r2, r3
 80022dc:	2380      	movs	r3, #128	; 0x80
 80022de:	011b      	lsls	r3, r3, #4
 80022e0:	4013      	ands	r3, r2
 80022e2:	d01e      	beq.n	8002322 <CTR+0xde>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = GetEPRxCount(ep->num);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	0018      	movs	r0, r3
 80022ea:	f001 f9a7 	bl	800363c <GetEPRxCount>
 80022ee:	0003      	movs	r3, r0
 80022f0:	001a      	movs	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	619a      	str	r2, [r3, #24]
          PMAToUserBufferCopy(&((&USB_Device_dev)->dev.setup_packet[0]),ep->pmaadress , ep->xfer_count);       
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8899      	ldrh	r1, [r3, #4]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	b29a      	uxth	r2, r3
 8002300:	4bac      	ldr	r3, [pc, #688]	; (80025b4 <CTR+0x370>)
 8002302:	0018      	movs	r0, r3
 8002304:	f001 fb96 	bl	8003a34 <PMAToUserBufferCopy>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          _ClearEP_CTR_RX(ENDP0); 
 8002308:	4ba4      	ldr	r3, [pc, #656]	; (800259c <CTR+0x358>)
 800230a:	4aa4      	ldr	r2, [pc, #656]	; (800259c <CTR+0x358>)
 800230c:	6812      	ldr	r2, [r2, #0]
 800230e:	49aa      	ldr	r1, [pc, #680]	; (80025b8 <CTR+0x374>)
 8002310:	400a      	ands	r2, r1
 8002312:	601a      	str	r2, [r3, #0]
          
          /* Process SETUP Packet*/
          USBD_DCD_INT_fops->SetupStage(&USB_Device_dev);
 8002314:	4ba4      	ldr	r3, [pc, #656]	; (80025a8 <CTR+0x364>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	4aa4      	ldr	r2, [pc, #656]	; (80025ac <CTR+0x368>)
 800231c:	0010      	movs	r0, r2
 800231e:	4798      	blx	r3
 8002320:	e207      	b.n	8002732 <CTR+0x4ee>
        }
        
        else if ((wEPVal & EP_CTR_RX) != 0)
 8002322:	1d3b      	adds	r3, r7, #4
 8002324:	881b      	ldrh	r3, [r3, #0]
 8002326:	b29b      	uxth	r3, r3
 8002328:	b21b      	sxth	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	db00      	blt.n	8002330 <CTR+0xec>
 800232e:	e200      	b.n	8002732 <CTR+0x4ee>
        {
          _ClearEP_CTR_RX(ENDP0);
 8002330:	4b9a      	ldr	r3, [pc, #616]	; (800259c <CTR+0x358>)
 8002332:	4a9a      	ldr	r2, [pc, #616]	; (800259c <CTR+0x358>)
 8002334:	6812      	ldr	r2, [r2, #0]
 8002336:	49a0      	ldr	r1, [pc, #640]	; (80025b8 <CTR+0x374>)
 8002338:	400a      	ands	r2, r1
 800233a:	601a      	str	r2, [r3, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = GetEPRxCount(ep->num);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	0018      	movs	r0, r3
 8002342:	f001 f97b 	bl	800363c <GetEPRxCount>
 8002346:	0003      	movs	r3, r0
 8002348:	001a      	movs	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	619a      	str	r2, [r3, #24]
          
          if (ep->xfer_count != 0)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d010      	beq.n	8002378 <CTR+0x134>
          {
            PMAToUserBufferCopy(ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6918      	ldr	r0, [r3, #16]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	8899      	ldrh	r1, [r3, #4]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	b29b      	uxth	r3, r3
 8002364:	001a      	movs	r2, r3
 8002366:	f001 fb65 	bl	8003a34 <PMAToUserBufferCopy>
            ep->xfer_buff+=ep->xfer_count;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	691a      	ldr	r2, [r3, #16]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	18d2      	adds	r2, r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	611a      	str	r2, [r3, #16]
          }
          
          /* Process Control Data OUT Packet*/
          USBD_DCD_INT_fops->DataOutStage(&USB_Device_dev, 0x00);
 8002378:	4b8b      	ldr	r3, [pc, #556]	; (80025a8 <CTR+0x364>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a8b      	ldr	r2, [pc, #556]	; (80025ac <CTR+0x368>)
 8002380:	2100      	movs	r1, #0
 8002382:	0010      	movs	r0, r2
 8002384:	4798      	blx	r3
          
          _SetEPRxCount(ENDP0, ep->maxpacket);
 8002386:	4b8d      	ldr	r3, [pc, #564]	; (80025bc <CTR+0x378>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	041b      	lsls	r3, r3, #16
 800238c:	0c1b      	lsrs	r3, r3, #16
 800238e:	4a8c      	ldr	r2, [pc, #560]	; (80025c0 <CTR+0x37c>)
 8002390:	4694      	mov	ip, r2
 8002392:	4463      	add	r3, ip
 8002394:	60bb      	str	r3, [r7, #8]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	2b3e      	cmp	r3, #62	; 0x3e
 800239c:	d91d      	bls.n	80023da <CTR+0x196>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	095a      	lsrs	r2, r3, #5
 80023a4:	2314      	movs	r3, #20
 80023a6:	18fb      	adds	r3, r7, r3
 80023a8:	801a      	strh	r2, [r3, #0]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	221f      	movs	r2, #31
 80023b0:	4013      	ands	r3, r2
 80023b2:	d106      	bne.n	80023c2 <CTR+0x17e>
 80023b4:	2314      	movs	r3, #20
 80023b6:	18fb      	adds	r3, r7, r3
 80023b8:	881a      	ldrh	r2, [r3, #0]
 80023ba:	2314      	movs	r3, #20
 80023bc:	18fb      	adds	r3, r7, r3
 80023be:	3a01      	subs	r2, #1
 80023c0:	801a      	strh	r2, [r3, #0]
 80023c2:	2314      	movs	r3, #20
 80023c4:	18fb      	adds	r3, r7, r3
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	029b      	lsls	r3, r3, #10
 80023ca:	b21b      	sxth	r3, r3
 80023cc:	4a7d      	ldr	r2, [pc, #500]	; (80025c4 <CTR+0x380>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	b21b      	sxth	r3, r3
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	801a      	strh	r2, [r3, #0]
 80023d8:	e018      	b.n	800240c <CTR+0x1c8>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	085a      	lsrs	r2, r3, #1
 80023e0:	2314      	movs	r3, #20
 80023e2:	18fb      	adds	r3, r7, r3
 80023e4:	801a      	strh	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	2201      	movs	r2, #1
 80023ec:	4013      	ands	r3, r2
 80023ee:	d006      	beq.n	80023fe <CTR+0x1ba>
 80023f0:	2314      	movs	r3, #20
 80023f2:	18fb      	adds	r3, r7, r3
 80023f4:	881a      	ldrh	r2, [r3, #0]
 80023f6:	2314      	movs	r3, #20
 80023f8:	18fb      	adds	r3, r7, r3
 80023fa:	3201      	adds	r2, #1
 80023fc:	801a      	strh	r2, [r3, #0]
 80023fe:	2314      	movs	r3, #20
 8002400:	18fb      	adds	r3, r7, r3
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	029b      	lsls	r3, r3, #10
 8002406:	b29a      	uxth	r2, r3
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	801a      	strh	r2, [r3, #0]
          _SetEPRxStatus(ENDP0,EP_RX_VALID);
 800240c:	4b63      	ldr	r3, [pc, #396]	; (800259c <CTR+0x358>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	b29b      	uxth	r3, r3
 8002412:	4a6d      	ldr	r2, [pc, #436]	; (80025c8 <CTR+0x384>)
 8002414:	4013      	ands	r3, r2
 8002416:	b29c      	uxth	r4, r3
 8002418:	2380      	movs	r3, #128	; 0x80
 800241a:	015b      	lsls	r3, r3, #5
 800241c:	4063      	eors	r3, r4
 800241e:	b29c      	uxth	r4, r3
 8002420:	2380      	movs	r3, #128	; 0x80
 8002422:	019b      	lsls	r3, r3, #6
 8002424:	4063      	eors	r3, r4
 8002426:	b29c      	uxth	r4, r3
 8002428:	4b5c      	ldr	r3, [pc, #368]	; (800259c <CTR+0x358>)
 800242a:	4a68      	ldr	r2, [pc, #416]	; (80025cc <CTR+0x388>)
 800242c:	4322      	orrs	r2, r4
 800242e:	b292      	uxth	r2, r2
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	e17e      	b.n	8002732 <CTR+0x4ee>
    {
      
      /* Decode and service non control endpoints interrupt  */
      
      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8002434:	2313      	movs	r3, #19
 8002436:	18fb      	adds	r3, r7, r3
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4a57      	ldr	r2, [pc, #348]	; (800259c <CTR+0x358>)
 800243e:	4694      	mov	ip, r2
 8002440:	4463      	add	r3, ip
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	b29a      	uxth	r2, r3
 8002446:	1d3b      	adds	r3, r7, #4
 8002448:	801a      	strh	r2, [r3, #0]
      if ((wEPVal & EP_CTR_RX) != 0)
 800244a:	1d3b      	adds	r3, r7, #4
 800244c:	881b      	ldrh	r3, [r3, #0]
 800244e:	b29b      	uxth	r3, r3
 8002450:	b21b      	sxth	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	db00      	blt.n	8002458 <CTR+0x214>
 8002456:	e0c5      	b.n	80025e4 <CTR+0x3a0>
      {  
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 8002458:	2313      	movs	r3, #19
 800245a:	18fb      	adds	r3, r7, r3
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4a4e      	ldr	r2, [pc, #312]	; (800259c <CTR+0x358>)
 8002462:	4694      	mov	ip, r2
 8002464:	4463      	add	r3, ip
 8002466:	2213      	movs	r2, #19
 8002468:	18ba      	adds	r2, r7, r2
 800246a:	7812      	ldrb	r2, [r2, #0]
 800246c:	0092      	lsls	r2, r2, #2
 800246e:	494b      	ldr	r1, [pc, #300]	; (800259c <CTR+0x358>)
 8002470:	468c      	mov	ip, r1
 8002472:	4462      	add	r2, ip
 8002474:	6812      	ldr	r2, [r2, #0]
 8002476:	4950      	ldr	r1, [pc, #320]	; (80025b8 <CTR+0x374>)
 8002478:	400a      	ands	r2, r1
 800247a:	601a      	str	r2, [r3, #0]
        ep = &((&USB_Device_dev)->dev.out_ep[EPindex]);
 800247c:	2313      	movs	r3, #19
 800247e:	18fb      	adds	r3, r7, r3
 8002480:	781a      	ldrb	r2, [r3, #0]
 8002482:	0013      	movs	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	189b      	adds	r3, r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	33b8      	adds	r3, #184	; 0xb8
 800248c:	001a      	movs	r2, r3
 800248e:	4b47      	ldr	r3, [pc, #284]	; (80025ac <CTR+0x368>)
 8002490:	18d3      	adds	r3, r2, r3
 8002492:	60fb      	str	r3, [r7, #12]
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	7a9b      	ldrb	r3, [r3, #10]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d118      	bne.n	80024ce <CTR+0x28a>
        {
          count = GetEPRxCount(ep->num);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2216      	movs	r2, #22
 80024a2:	18bc      	adds	r4, r7, r2
 80024a4:	0018      	movs	r0, r3
 80024a6:	f001 f8c9 	bl	800363c <GetEPRxCount>
 80024aa:	0003      	movs	r3, r0
 80024ac:	8023      	strh	r3, [r4, #0]
          if (count != 0)
 80024ae:	2316      	movs	r3, #22
 80024b0:	18fb      	adds	r3, r7, r3
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d04c      	beq.n	8002552 <CTR+0x30e>
          {
            PMAToUserBufferCopy(ep->xfer_buff, ep->pmaadress, count);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6918      	ldr	r0, [r3, #16]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8899      	ldrh	r1, [r3, #4]
 80024c0:	2316      	movs	r3, #22
 80024c2:	18fb      	adds	r3, r7, r3
 80024c4:	881b      	ldrh	r3, [r3, #0]
 80024c6:	001a      	movs	r2, r3
 80024c8:	f001 fab4 	bl	8003a34 <PMAToUserBufferCopy>
 80024cc:	e041      	b.n	8002552 <CTR+0x30e>
          }
        }
        else
        {
          if (GetENDPOINT(ep->num) & EP_DTOG_RX)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	0018      	movs	r0, r3
 80024d4:	f000 fe4c 	bl	8003170 <GetENDPOINT>
 80024d8:	0003      	movs	r3, r0
 80024da:	001a      	movs	r2, r3
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	01db      	lsls	r3, r3, #7
 80024e0:	4013      	ands	r3, r2
 80024e2:	d018      	beq.n	8002516 <CTR+0x2d2>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = GetEPDblBuf0Count(ep->num);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2216      	movs	r2, #22
 80024ea:	18bc      	adds	r4, r7, r2
 80024ec:	0018      	movs	r0, r3
 80024ee:	f001 f9db 	bl	80038a8 <GetEPDblBuf0Count>
 80024f2:	0003      	movs	r3, r0
 80024f4:	8023      	strh	r3, [r4, #0]
            if (count != 0)
 80024f6:	2316      	movs	r3, #22
 80024f8:	18fb      	adds	r3, r7, r3
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d022      	beq.n	8002546 <CTR+0x302>
            {
              PMAToUserBufferCopy(ep->xfer_buff, ep->pmaaddr0, count);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6918      	ldr	r0, [r3, #16]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	88d9      	ldrh	r1, [r3, #6]
 8002508:	2316      	movs	r3, #22
 800250a:	18fb      	adds	r3, r7, r3
 800250c:	881b      	ldrh	r3, [r3, #0]
 800250e:	001a      	movs	r2, r3
 8002510:	f001 fa90 	bl	8003a34 <PMAToUserBufferCopy>
 8002514:	e017      	b.n	8002546 <CTR+0x302>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = GetEPDblBuf1Count(ep->num);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2216      	movs	r2, #22
 800251c:	18bc      	adds	r4, r7, r2
 800251e:	0018      	movs	r0, r3
 8002520:	f001 f9e0 	bl	80038e4 <GetEPDblBuf1Count>
 8002524:	0003      	movs	r3, r0
 8002526:	8023      	strh	r3, [r4, #0]
            if (count != 0)
 8002528:	2316      	movs	r3, #22
 800252a:	18fb      	adds	r3, r7, r3
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d009      	beq.n	8002546 <CTR+0x302>
            {
              PMAToUserBufferCopy(ep->xfer_buff, ep->pmaaddr1, count);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6918      	ldr	r0, [r3, #16]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8919      	ldrh	r1, [r3, #8]
 800253a:	2316      	movs	r3, #22
 800253c:	18fb      	adds	r3, r7, r3
 800253e:	881b      	ldrh	r3, [r3, #0]
 8002540:	001a      	movs	r2, r3
 8002542:	f001 fa77 	bl	8003a34 <PMAToUserBufferCopy>
            }
          }
          FreeUserBuffer(ep->num, EP_DBUF_OUT);  
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	2100      	movs	r1, #0
 800254c:	0018      	movs	r0, r3
 800254e:	f001 f9e7 	bl	8003920 <FreeUserBuffer>
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	699a      	ldr	r2, [r3, #24]
 8002556:	2316      	movs	r3, #22
 8002558:	18fb      	adds	r3, r7, r3
 800255a:	881b      	ldrh	r3, [r3, #0]
 800255c:	18d2      	adds	r2, r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	619a      	str	r2, [r3, #24]
        ep->xfer_buff+=count;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	691a      	ldr	r2, [r3, #16]
 8002566:	2316      	movs	r3, #22
 8002568:	18fb      	adds	r3, r7, r3
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	18d2      	adds	r2, r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	611a      	str	r2, [r3, #16]
       
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d006      	beq.n	8002588 <CTR+0x344>
 800257a:	2316      	movs	r3, #22
 800257c:	18fb      	adds	r3, r7, r3
 800257e:	881a      	ldrh	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	429a      	cmp	r2, r3
 8002586:	d223      	bcs.n	80025d0 <CTR+0x38c>
        {
          /* RX COMPLETE */
          USBD_DCD_INT_fops->DataOutStage(&USB_Device_dev, ep->num);
 8002588:	4b07      	ldr	r3, [pc, #28]	; (80025a8 <CTR+0x364>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	7811      	ldrb	r1, [r2, #0]
 8002592:	4a06      	ldr	r2, [pc, #24]	; (80025ac <CTR+0x368>)
 8002594:	0010      	movs	r0, r2
 8002596:	4798      	blx	r3
 8002598:	e024      	b.n	80025e4 <CTR+0x3a0>
 800259a:	46c0      	nop			; (mov r8, r8)
 800259c:	40005c00 	.word	0x40005c00
 80025a0:	00008f0f 	.word	0x00008f0f
 80025a4:	200001d8 	.word	0x200001d8
 80025a8:	20000090 	.word	0x20000090
 80025ac:	200001c0 	.word	0x200001c0
 80025b0:	20000278 	.word	0x20000278
 80025b4:	200001d0 	.word	0x200001d0
 80025b8:	00000f8f 	.word	0x00000f8f
 80025bc:	40005c50 	.word	0x40005c50
 80025c0:	40006006 	.word	0x40006006
 80025c4:	ffff8000 	.word	0xffff8000
 80025c8:	ffffbf8f 	.word	0xffffbf8f
 80025cc:	ffff8080 	.word	0xffff8080
        }
        else
        {
          DCD_EP_PrepareRx (&USB_Device_dev,ep->num, ep->xfer_buff, ep->xfer_len);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	7819      	ldrb	r1, [r3, #0]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	691a      	ldr	r2, [r3, #16]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	b29b      	uxth	r3, r3
 80025de:	485c      	ldr	r0, [pc, #368]	; (8002750 <CTR+0x50c>)
 80025e0:	f000 fb88 	bl	8002cf4 <DCD_EP_PrepareRx>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & EP_CTR_TX) != 0)
 80025e4:	1d3b      	adds	r3, r7, #4
 80025e6:	881b      	ldrh	r3, [r3, #0]
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	001a      	movs	r2, r3
 80025ec:	2380      	movs	r3, #128	; 0x80
 80025ee:	4013      	ands	r3, r2
 80025f0:	d100      	bne.n	80025f4 <CTR+0x3b0>
 80025f2:	e09e      	b.n	8002732 <CTR+0x4ee>
      {
        ep = &((&USB_Device_dev)->dev.in_ep[EPindex]);
 80025f4:	2313      	movs	r3, #19
 80025f6:	18fb      	adds	r3, r7, r3
 80025f8:	781a      	ldrb	r2, [r3, #0]
 80025fa:	0013      	movs	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	189b      	adds	r3, r3, r2
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	3318      	adds	r3, #24
 8002604:	001a      	movs	r2, r3
 8002606:	4b52      	ldr	r3, [pc, #328]	; (8002750 <CTR+0x50c>)
 8002608:	18d3      	adds	r3, r2, r3
 800260a:	60fb      	str	r3, [r7, #12]
        
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 800260c:	2313      	movs	r3, #19
 800260e:	18fb      	adds	r3, r7, r3
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4a4f      	ldr	r2, [pc, #316]	; (8002754 <CTR+0x510>)
 8002616:	4694      	mov	ip, r2
 8002618:	4463      	add	r3, ip
 800261a:	2213      	movs	r2, #19
 800261c:	18ba      	adds	r2, r7, r2
 800261e:	7812      	ldrb	r2, [r2, #0]
 8002620:	0092      	lsls	r2, r2, #2
 8002622:	494c      	ldr	r1, [pc, #304]	; (8002754 <CTR+0x510>)
 8002624:	468c      	mov	ip, r1
 8002626:	4462      	add	r2, ip
 8002628:	6812      	ldr	r2, [r2, #0]
 800262a:	494b      	ldr	r1, [pc, #300]	; (8002758 <CTR+0x514>)
 800262c:	400a      	ands	r2, r1
 800262e:	601a      	str	r2, [r3, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	7a9b      	ldrb	r3, [r3, #10]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d117      	bne.n	8002668 <CTR+0x424>
        {
          ep->xfer_count = GetEPTxCount(ep->num);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	0018      	movs	r0, r3
 800263e:	f000 ffdf 	bl	8003600 <GetEPTxCount>
 8002642:	0003      	movs	r3, r0
 8002644:	001a      	movs	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	619a      	str	r2, [r3, #24]
          if (ep->xfer_count != 0)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d049      	beq.n	80026e6 <CTR+0x4a2>
          {
            UserToPMABufferCopy(ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6918      	ldr	r0, [r3, #16]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8899      	ldrh	r1, [r3, #4]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	b29b      	uxth	r3, r3
 8002660:	001a      	movs	r2, r3
 8002662:	f001 f9a1 	bl	80039a8 <UserToPMABufferCopy>
 8002666:	e03e      	b.n	80026e6 <CTR+0x4a2>
          }
        }
        else
        {
          if (GetENDPOINT(ep->num) & EP_DTOG_TX)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	0018      	movs	r0, r3
 800266e:	f000 fd7f 	bl	8003170 <GetENDPOINT>
 8002672:	0003      	movs	r3, r0
 8002674:	001a      	movs	r2, r3
 8002676:	2340      	movs	r3, #64	; 0x40
 8002678:	4013      	ands	r3, r2
 800267a:	d017      	beq.n	80026ac <CTR+0x468>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = GetEPDblBuf0Count(ep->num);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	0018      	movs	r0, r3
 8002682:	f001 f911 	bl	80038a8 <GetEPDblBuf0Count>
 8002686:	0003      	movs	r3, r0
 8002688:	001a      	movs	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	619a      	str	r2, [r3, #24]
            if (ep->xfer_count != 0)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d021      	beq.n	80026da <CTR+0x496>
            {
              UserToPMABufferCopy(ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6918      	ldr	r0, [r3, #16]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	88d9      	ldrh	r1, [r3, #6]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	001a      	movs	r2, r3
 80026a6:	f001 f97f 	bl	80039a8 <UserToPMABufferCopy>
 80026aa:	e016      	b.n	80026da <CTR+0x496>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = GetEPDblBuf1Count(ep->num);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	0018      	movs	r0, r3
 80026b2:	f001 f917 	bl	80038e4 <GetEPDblBuf1Count>
 80026b6:	0003      	movs	r3, r0
 80026b8:	001a      	movs	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	619a      	str	r2, [r3, #24]
            if (ep->xfer_count != 0)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d009      	beq.n	80026da <CTR+0x496>
            {
              UserToPMABufferCopy(ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6918      	ldr	r0, [r3, #16]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8919      	ldrh	r1, [r3, #8]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	001a      	movs	r2, r3
 80026d6:	f001 f967 	bl	80039a8 <UserToPMABufferCopy>
            }
          }
          FreeUserBuffer(ep->num, EP_DBUF_IN);  
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2101      	movs	r1, #1
 80026e0:	0018      	movs	r0, r3
 80026e2:	f001 f91d 	bl	8003920 <FreeUserBuffer>
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count =GetEPTxCount(ep->num);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	0018      	movs	r0, r3
 80026ec:	f000 ff88 	bl	8003600 <GetEPTxCount>
 80026f0:	0003      	movs	r3, r0
 80026f2:	001a      	movs	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	619a      	str	r2, [r3, #24]
        ep->xfer_buff+=ep->xfer_count;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	691a      	ldr	r2, [r3, #16]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	18d2      	adds	r2, r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	611a      	str	r2, [r3, #16]
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d108      	bne.n	8002720 <CTR+0x4dc>
        {
          /* TX COMPLETE */
          USBD_DCD_INT_fops->DataInStage(&USB_Device_dev, ep->num);
 800270e:	4b13      	ldr	r3, [pc, #76]	; (800275c <CTR+0x518>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	7811      	ldrb	r1, [r2, #0]
 8002718:	4a0d      	ldr	r2, [pc, #52]	; (8002750 <CTR+0x50c>)
 800271a:	0010      	movs	r0, r2
 800271c:	4798      	blx	r3
 800271e:	e008      	b.n	8002732 <CTR+0x4ee>
        }
        else
        {
          DCD_EP_Tx  (&USB_Device_dev,ep->num, ep->xfer_buff, ep->xfer_len);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	7819      	ldrb	r1, [r3, #0]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	691a      	ldr	r2, [r3, #16]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	4808      	ldr	r0, [pc, #32]	; (8002750 <CTR+0x50c>)
 800272e:	f000 fb43 	bl	8002db8 <DCD_EP_Tx>
  uint16_t count=0;
  uint8_t EPindex;
  volatile uint16_t wIstr;
  volatile uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8002732:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <CTR+0x51c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	b29a      	uxth	r2, r3
 8002738:	1dbb      	adds	r3, r7, #6
 800273a:	1c11      	adds	r1, r2, #0
 800273c:	8019      	strh	r1, [r3, #0]
 800273e:	b213      	sxth	r3, r2
 8002740:	2b00      	cmp	r3, #0
 8002742:	da00      	bge.n	8002746 <CTR+0x502>
 8002744:	e589      	b.n	800225a <CTR+0x16>
      } /* if((wEPVal & EP_CTR_TX) != 0) */
      
    }/* if(EPindex == 0) else */
    
  }/* while(...) */
}
 8002746:	46c0      	nop			; (mov r8, r8)
 8002748:	46bd      	mov	sp, r7
 800274a:	b007      	add	sp, #28
 800274c:	bd90      	pop	{r4, r7, pc}
 800274e:	46c0      	nop			; (mov r8, r8)
 8002750:	200001c0 	.word	0x200001c0
 8002754:	40005c00 	.word	0x40005c00
 8002758:	00008f0f 	.word	0x00008f0f
 800275c:	20000090 	.word	0x20000090
 8002760:	40005c44 	.word	0x40005c44

08002764 <USB_Istr>:
  * @brief ISTR events interrupt service routine
  * @param  None
  * @retval None
  */
void USB_Istr(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
  volatile uint16_t wIstr = 0;
 800276a:	1dbb      	adds	r3, r7, #6
 800276c:	2200      	movs	r2, #0
 800276e:	801a      	strh	r2, [r3, #0]
  
  wIstr = _GetISTR();
 8002770:	4b47      	ldr	r3, [pc, #284]	; (8002890 <USB_Istr+0x12c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	b29a      	uxth	r2, r3
 8002776:	1dbb      	adds	r3, r7, #6
 8002778:	801a      	strh	r2, [r3, #0]
  
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 800277a:	1dbb      	adds	r3, r7, #6
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	b29b      	uxth	r3, r3
 8002780:	001a      	movs	r2, r3
 8002782:	4b44      	ldr	r3, [pc, #272]	; (8002894 <USB_Istr+0x130>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	401a      	ands	r2, r3
 8002788:	2380      	movs	r3, #128	; 0x80
 800278a:	021b      	lsls	r3, r3, #8
 800278c:	4013      	ands	r3, r2
 800278e:	d001      	beq.n	8002794 <USB_Istr+0x30>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    CTR();
 8002790:	f7ff fd58 	bl	8002244 <CTR>
  }
#endif  
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 8002794:	1dbb      	adds	r3, r7, #6
 8002796:	881b      	ldrh	r3, [r3, #0]
 8002798:	b29b      	uxth	r3, r3
 800279a:	001a      	movs	r2, r3
 800279c:	4b3d      	ldr	r3, [pc, #244]	; (8002894 <USB_Istr+0x130>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	401a      	ands	r2, r3
 80027a2:	2380      	movs	r3, #128	; 0x80
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	4013      	ands	r3, r2
 80027a8:	d00d      	beq.n	80027c6 <USB_Istr+0x62>
  {
    _SetISTR((uint16_t)CLR_RESET);
 80027aa:	4b39      	ldr	r3, [pc, #228]	; (8002890 <USB_Istr+0x12c>)
 80027ac:	4a3a      	ldr	r2, [pc, #232]	; (8002898 <USB_Istr+0x134>)
 80027ae:	601a      	str	r2, [r3, #0]
    USBD_DCD_INT_fops->Reset(&USB_Device_dev);
 80027b0:	4b3a      	ldr	r3, [pc, #232]	; (800289c <USB_Istr+0x138>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	4a3a      	ldr	r2, [pc, #232]	; (80028a0 <USB_Istr+0x13c>)
 80027b8:	0010      	movs	r0, r2
 80027ba:	4798      	blx	r3
    DCD_EP_SetAddress(&USB_Device_dev, 0);
 80027bc:	4b38      	ldr	r3, [pc, #224]	; (80028a0 <USB_Istr+0x13c>)
 80027be:	2100      	movs	r1, #0
 80027c0:	0018      	movs	r0, r3
 80027c2:	f000 fc49 	bl	8003058 <DCD_EP_SetAddress>
    _SetISTR((uint16_t)CLR_DOVR);
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_ERR)
  if (wIstr & ISTR_ERR & wInterrupt_Mask)
 80027c6:	1dbb      	adds	r3, r7, #6
 80027c8:	881b      	ldrh	r3, [r3, #0]
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	001a      	movs	r2, r3
 80027ce:	4b31      	ldr	r3, [pc, #196]	; (8002894 <USB_Istr+0x130>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	401a      	ands	r2, r3
 80027d4:	2380      	movs	r3, #128	; 0x80
 80027d6:	019b      	lsls	r3, r3, #6
 80027d8:	4013      	ands	r3, r2
 80027da:	d002      	beq.n	80027e2 <USB_Istr+0x7e>
  {
    _SetISTR((uint16_t)CLR_ERR);
 80027dc:	4b2c      	ldr	r3, [pc, #176]	; (8002890 <USB_Istr+0x12c>)
 80027de:	4a31      	ldr	r2, [pc, #196]	; (80028a4 <USB_Istr+0x140>)
 80027e0:	601a      	str	r2, [r3, #0]
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
 80027e2:	1dbb      	adds	r3, r7, #6
 80027e4:	881b      	ldrh	r3, [r3, #0]
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	001a      	movs	r2, r3
 80027ea:	4b2a      	ldr	r3, [pc, #168]	; (8002894 <USB_Istr+0x130>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	401a      	ands	r2, r3
 80027f0:	2380      	movs	r3, #128	; 0x80
 80027f2:	015b      	lsls	r3, r3, #5
 80027f4:	4013      	ands	r3, r2
 80027f6:	d00b      	beq.n	8002810 <USB_Istr+0xac>
  {
    _SetISTR((uint16_t)CLR_WKUP);
 80027f8:	4b25      	ldr	r3, [pc, #148]	; (8002890 <USB_Istr+0x12c>)
 80027fa:	4a2b      	ldr	r2, [pc, #172]	; (80028a8 <USB_Istr+0x144>)
 80027fc:	601a      	str	r2, [r3, #0]
    
    USBD_DCD_INT_fops->Resume(&USB_Device_dev);
 80027fe:	4b27      	ldr	r3, [pc, #156]	; (800289c <USB_Istr+0x138>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	4a26      	ldr	r2, [pc, #152]	; (80028a0 <USB_Istr+0x13c>)
 8002806:	0010      	movs	r0, r2
 8002808:	4798      	blx	r3
     
    /* Handle Resume state machine */  
    Resume(RESUME_EXTERNAL);
 800280a:	2000      	movs	r0, #0
 800280c:	f7fd fdd6 	bl	80003bc <Resume>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_SUSP)
  if (wIstr & ISTR_SUSP & wInterrupt_Mask)
 8002810:	1dbb      	adds	r3, r7, #6
 8002812:	881b      	ldrh	r3, [r3, #0]
 8002814:	b29b      	uxth	r3, r3
 8002816:	001a      	movs	r2, r3
 8002818:	4b1e      	ldr	r3, [pc, #120]	; (8002894 <USB_Istr+0x130>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	401a      	ands	r2, r3
 800281e:	2380      	movs	r3, #128	; 0x80
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	4013      	ands	r3, r2
 8002824:	d00a      	beq.n	800283c <USB_Istr+0xd8>
  {
   /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    _SetISTR((uint16_t)CLR_SUSP);
 8002826:	4b1a      	ldr	r3, [pc, #104]	; (8002890 <USB_Istr+0x12c>)
 8002828:	4a20      	ldr	r2, [pc, #128]	; (80028ac <USB_Istr+0x148>)
 800282a:	601a      	str	r2, [r3, #0]
    
    /* process library core layer suspend routine*/
    USBD_DCD_INT_fops->Suspend(&USB_Device_dev); 
 800282c:	4b1b      	ldr	r3, [pc, #108]	; (800289c <USB_Istr+0x138>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	4a1b      	ldr	r2, [pc, #108]	; (80028a0 <USB_Istr+0x13c>)
 8002834:	0010      	movs	r0, r2
 8002836:	4798      	blx	r3
    
    /* enter macrocell in suspend and system in low power mode when 
       USB_DEVICE_LOW_PWR_MGMT_SUPPORT defined in usb_conf.h */
    Suspend();   
 8002838:	f7fd fd7e 	bl	8000338 <Suspend>
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 800283c:	1dbb      	adds	r3, r7, #6
 800283e:	881b      	ldrh	r3, [r3, #0]
 8002840:	b29b      	uxth	r3, r3
 8002842:	001a      	movs	r2, r3
 8002844:	4b13      	ldr	r3, [pc, #76]	; (8002894 <USB_Istr+0x130>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	401a      	ands	r2, r3
 800284a:	2380      	movs	r3, #128	; 0x80
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4013      	ands	r3, r2
 8002850:	d008      	beq.n	8002864 <USB_Istr+0x100>
  {
    _SetISTR((uint16_t)CLR_SOF);
 8002852:	4b0f      	ldr	r3, [pc, #60]	; (8002890 <USB_Istr+0x12c>)
 8002854:	4a16      	ldr	r2, [pc, #88]	; (80028b0 <USB_Istr+0x14c>)
 8002856:	601a      	str	r2, [r3, #0]
    USBD_DCD_INT_fops->SOF(&USB_Device_dev);
 8002858:	4b10      	ldr	r3, [pc, #64]	; (800289c <USB_Istr+0x138>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	4a10      	ldr	r2, [pc, #64]	; (80028a0 <USB_Istr+0x13c>)
 8002860:	0010      	movs	r0, r2
 8002862:	4798      	blx	r3
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
 8002864:	1dbb      	adds	r3, r7, #6
 8002866:	881b      	ldrh	r3, [r3, #0]
 8002868:	b29b      	uxth	r3, r3
 800286a:	001a      	movs	r2, r3
 800286c:	4b09      	ldr	r3, [pc, #36]	; (8002894 <USB_Istr+0x130>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	401a      	ands	r2, r3
 8002872:	2380      	movs	r3, #128	; 0x80
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	4013      	ands	r3, r2
 8002878:	d005      	beq.n	8002886 <USB_Istr+0x122>
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 800287a:	4b05      	ldr	r3, [pc, #20]	; (8002890 <USB_Istr+0x12c>)
 800287c:	4a0d      	ldr	r2, [pc, #52]	; (80028b4 <USB_Istr+0x150>)
 800287e:	601a      	str	r2, [r3, #0]
    
    /* resume handling timing is made with ESOFs */
    Resume(RESUME_ESOF); /* request without change of the machine state */
 8002880:	2007      	movs	r0, #7
 8002882:	f7fd fd9b 	bl	80003bc <Resume>
    STM32F072 can wakeup system from STOP mode in less than 50 us */
    Suspend();
  }
#endif
#endif
} /* USB_Istr */
 8002886:	46c0      	nop			; (mov r8, r8)
 8002888:	46bd      	mov	sp, r7
 800288a:	b002      	add	sp, #8
 800288c:	bd80      	pop	{r7, pc}
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	40005c44 	.word	0x40005c44
 8002894:	2000010c 	.word	0x2000010c
 8002898:	0000fbff 	.word	0x0000fbff
 800289c:	20000090 	.word	0x20000090
 80028a0:	200001c0 	.word	0x200001c0
 80028a4:	0000dfff 	.word	0x0000dfff
 80028a8:	0000efff 	.word	0x0000efff
 80028ac:	0000f7ff 	.word	0x0000f7ff
 80028b0:	0000fdff 	.word	0x0000fdff
 80028b4:	0000feff 	.word	0x0000feff

080028b8 <DCD_Init>:
  * @brief Device Initialization
  * @param  pdev: device instance
  * @retval : None
  */
void DCD_Init(USB_CORE_HANDLE *pdev)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /*Device is in Default State*/
  pdev->dev.device_status = USB_DEFAULT;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	709a      	strb	r2, [r3, #2]
  pdev->dev.device_address = 0;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	711a      	strb	r2, [r3, #4]
  pdev->dev.DevRemoteWakeup = 0;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	609a      	str	r2, [r3, #8]
  
  pdev->dev.speed = USB_SPEED_FULL; /*kept for API compatibility reason*/
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	60da      	str	r2, [r3, #12]
  
  /*CNTR_FRES = 1*/
  SetCNTR(CNTR_FRES);
 80028d8:	2001      	movs	r0, #1
 80028da:	f000 fc15 	bl	8003108 <SetCNTR>
  
  /*CNTR_FRES = 0*/
  SetCNTR(0);
 80028de:	2000      	movs	r0, #0
 80028e0:	f000 fc12 	bl	8003108 <SetCNTR>
  
  /*Clear pending interrupts*/
  SetISTR(0);
 80028e4:	2000      	movs	r0, #0
 80028e6:	f000 fc1f 	bl	8003128 <SetISTR>
  
  /*Set Btable Address*/
  SetBTABLE(BTABLE_ADDRESS);
 80028ea:	2000      	movs	r0, #0
 80028ec:	f000 fc2c 	bl	8003148 <SetBTABLE>
  
  /*set wInterrupt_Mask global variable*/
  wInterrupt_Mask = CNTR_CTRM  | CNTR_WKUPM | CNTR_SUSPM | CNTR_ERRM  | CNTR_SOFM \
 80028f0:	4b06      	ldr	r3, [pc, #24]	; (800290c <DCD_Init+0x54>)
 80028f2:	22bf      	movs	r2, #191	; 0xbf
 80028f4:	0212      	lsls	r2, r2, #8
 80028f6:	601a      	str	r2, [r3, #0]
  /* Enable LPM support and enable ACK answer to LPM request*/
  _SetLPMCSR(LPMCSR_LMPEN | LPMCSR_LPMACK);
#endif
 
  /*Set interrupt mask*/
  SetCNTR(wInterrupt_Mask); 
 80028f8:	4b04      	ldr	r3, [pc, #16]	; (800290c <DCD_Init+0x54>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	0018      	movs	r0, r3
 8002900:	f000 fc02 	bl	8003108 <SetCNTR>
}
 8002904:	46c0      	nop			; (mov r8, r8)
 8002906:	46bd      	mov	sp, r7
 8002908:	b002      	add	sp, #8
 800290a:	bd80      	pop	{r7, pc}
 800290c:	2000010c 	.word	0x2000010c

08002910 <DCD_PMA_Config>:
uint32_t DCD_PMA_Config(USB_CORE_HANDLE *pdev , 
                        uint16_t ep_addr,
                        uint16_t ep_kind,
                        uint32_t pmaadress)

{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	0008      	movs	r0, r1
 800291a:	0011      	movs	r1, r2
 800291c:	607b      	str	r3, [r7, #4]
 800291e:	230a      	movs	r3, #10
 8002920:	18fb      	adds	r3, r7, r3
 8002922:	1c02      	adds	r2, r0, #0
 8002924:	801a      	strh	r2, [r3, #0]
 8002926:	2308      	movs	r3, #8
 8002928:	18fb      	adds	r3, r7, r3
 800292a:	1c0a      	adds	r2, r1, #0
 800292c:	801a      	strh	r2, [r3, #0]
  USB_EP *ep;
  /* initialize ep structure*/
  if ((ep_addr & 0x80) == 0x80)
 800292e:	230a      	movs	r3, #10
 8002930:	18fb      	adds	r3, r7, r3
 8002932:	881b      	ldrh	r3, [r3, #0]
 8002934:	2280      	movs	r2, #128	; 0x80
 8002936:	4013      	ands	r3, r2
 8002938:	d00d      	beq.n	8002956 <DCD_PMA_Config+0x46>
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 800293a:	230a      	movs	r3, #10
 800293c:	18fb      	adds	r3, r7, r3
 800293e:	881b      	ldrh	r3, [r3, #0]
 8002940:	227f      	movs	r2, #127	; 0x7f
 8002942:	401a      	ands	r2, r3
 8002944:	0013      	movs	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	189b      	adds	r3, r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	3318      	adds	r3, #24
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	18d3      	adds	r3, r2, r3
 8002952:	617b      	str	r3, [r7, #20]
 8002954:	e00c      	b.n	8002970 <DCD_PMA_Config+0x60>
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 8002956:	230a      	movs	r3, #10
 8002958:	18fb      	adds	r3, r7, r3
 800295a:	881b      	ldrh	r3, [r3, #0]
 800295c:	227f      	movs	r2, #127	; 0x7f
 800295e:	401a      	ands	r2, r3
 8002960:	0013      	movs	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	189b      	adds	r3, r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	33b8      	adds	r3, #184	; 0xb8
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	18d3      	adds	r3, r2, r3
 800296e:	617b      	str	r3, [r7, #20]
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == USB_SNG_BUF)
 8002970:	2308      	movs	r3, #8
 8002972:	18fb      	adds	r3, r7, r3
 8002974:	881b      	ldrh	r3, [r3, #0]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d107      	bne.n	800298a <DCD_PMA_Config+0x7a>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0;
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	2200      	movs	r2, #0
 800297e:	729a      	strb	r2, [r3, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	b29a      	uxth	r2, r3
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	809a      	strh	r2, [r3, #4]
 8002988:	e00b      	b.n	80029a2 <DCD_PMA_Config+0x92>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1;
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	2201      	movs	r2, #1
 800298e:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	b29a      	uxth	r2, r3
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	0c1b      	lsrs	r3, r3, #16
 800299c:	b29a      	uxth	r2, r3
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	811a      	strh	r2, [r3, #8]
  }
  
  return USB_OK; 
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	0018      	movs	r0, r3
 80029a6:	46bd      	mov	sp, r7
 80029a8:	b006      	add	sp, #24
 80029aa:	bd80      	pop	{r7, pc}

080029ac <DCD_EP_Open>:
  */
uint32_t DCD_EP_Open(USB_CORE_HANDLE *pdev , 
                     uint16_t ep_addr,
                     uint16_t ep_mps,
                     uint8_t ep_type)
{
 80029ac:	b590      	push	{r4, r7, lr}
 80029ae:	b087      	sub	sp, #28
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	000c      	movs	r4, r1
 80029b6:	0010      	movs	r0, r2
 80029b8:	0019      	movs	r1, r3
 80029ba:	230a      	movs	r3, #10
 80029bc:	18fb      	adds	r3, r7, r3
 80029be:	1c22      	adds	r2, r4, #0
 80029c0:	801a      	strh	r2, [r3, #0]
 80029c2:	2308      	movs	r3, #8
 80029c4:	18fb      	adds	r3, r7, r3
 80029c6:	1c02      	adds	r2, r0, #0
 80029c8:	801a      	strh	r2, [r3, #0]
 80029ca:	1dfb      	adds	r3, r7, #7
 80029cc:	1c0a      	adds	r2, r1, #0
 80029ce:	701a      	strb	r2, [r3, #0]
  
  USB_EP *ep;
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80) == 0x80)
 80029d0:	230a      	movs	r3, #10
 80029d2:	18fb      	adds	r3, r7, r3
 80029d4:	881b      	ldrh	r3, [r3, #0]
 80029d6:	2280      	movs	r2, #128	; 0x80
 80029d8:	4013      	ands	r3, r2
 80029da:	d010      	beq.n	80029fe <DCD_EP_Open+0x52>
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 80029dc:	230a      	movs	r3, #10
 80029de:	18fb      	adds	r3, r7, r3
 80029e0:	881b      	ldrh	r3, [r3, #0]
 80029e2:	227f      	movs	r2, #127	; 0x7f
 80029e4:	401a      	ands	r2, r3
 80029e6:	0013      	movs	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	189b      	adds	r3, r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	3318      	adds	r3, #24
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	18d3      	adds	r3, r2, r3
 80029f4:	617b      	str	r3, [r7, #20]
    ep->is_in = 1;
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	2201      	movs	r2, #1
 80029fa:	705a      	strb	r2, [r3, #1]
 80029fc:	e00f      	b.n	8002a1e <DCD_EP_Open+0x72>
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 80029fe:	230a      	movs	r3, #10
 8002a00:	18fb      	adds	r3, r7, r3
 8002a02:	881b      	ldrh	r3, [r3, #0]
 8002a04:	227f      	movs	r2, #127	; 0x7f
 8002a06:	401a      	ands	r2, r3
 8002a08:	0013      	movs	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	189b      	adds	r3, r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	33b8      	adds	r3, #184	; 0xb8
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	18d3      	adds	r3, r2, r3
 8002a16:	617b      	str	r3, [r7, #20]
    ep->is_in = 0;
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	705a      	strb	r2, [r3, #1]
  }
  
  ep->maxpacket = ep_mps;
 8002a1e:	2308      	movs	r3, #8
 8002a20:	18fb      	adds	r3, r7, r3
 8002a22:	881a      	ldrh	r2, [r3, #0]
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	1dfa      	adds	r2, r7, #7
 8002a2c:	7812      	ldrb	r2, [r2, #0]
 8002a2e:	70da      	strb	r2, [r3, #3]
  ep->num   = ep_addr & 0x7F;
 8002a30:	230a      	movs	r3, #10
 8002a32:	18fb      	adds	r3, r7, r3
 8002a34:	881b      	ldrh	r3, [r3, #0]
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	227f      	movs	r2, #127	; 0x7f
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	701a      	strb	r2, [r3, #0]
  
  if (ep->num == 0)
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d108      	bne.n	8002a5c <DCD_EP_Open+0xb0>
  {
    /* Initialize the control transfer variables*/ 
    ep->ctl_data_len =0;
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	625a      	str	r2, [r3, #36]	; 0x24
    ep->rem_data_len = 0;
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	2200      	movs	r2, #0
 8002a54:	61da      	str	r2, [r3, #28]
    ep->total_data_len = 0;
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	621a      	str	r2, [r3, #32]
  }
  
  /* Initialize the transaction level variables */
  ep->xfer_buff = 0;
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	611a      	str	r2, [r3, #16]
  ep->xfer_len = 0;
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	2200      	movs	r2, #0
 8002a66:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0;
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	619a      	str	r2, [r3, #24]
  ep->is_stall = 0;
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	2200      	movs	r2, #0
 8002a72:	709a      	strb	r2, [r3, #2]
  
  /* initialize HW */
  switch (ep->type)
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	78db      	ldrb	r3, [r3, #3]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d021      	beq.n	8002ac0 <DCD_EP_Open+0x114>
 8002a7c:	dc02      	bgt.n	8002a84 <DCD_EP_Open+0xd8>
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d005      	beq.n	8002a8e <DCD_EP_Open+0xe2>
 8002a82:	e026      	b.n	8002ad2 <DCD_EP_Open+0x126>
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d00b      	beq.n	8002aa0 <DCD_EP_Open+0xf4>
 8002a88:	2b03      	cmp	r3, #3
 8002a8a:	d010      	beq.n	8002aae <DCD_EP_Open+0x102>
 8002a8c:	e021      	b.n	8002ad2 <DCD_EP_Open+0x126>
  {
  case USB_EP_CONTROL:
    SetEPType(ep->num, EP_CONTROL);
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	781a      	ldrb	r2, [r3, #0]
 8002a92:	2380      	movs	r3, #128	; 0x80
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	0019      	movs	r1, r3
 8002a98:	0010      	movs	r0, r2
 8002a9a:	f000 fb7d 	bl	8003198 <SetEPType>
    break;
 8002a9e:	e018      	b.n	8002ad2 <DCD_EP_Open+0x126>
  case USB_EP_BULK:
    SetEPType(ep->num, EP_BULK);
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f000 fb76 	bl	8003198 <SetEPType>
    break;
 8002aac:	e011      	b.n	8002ad2 <DCD_EP_Open+0x126>
  case USB_EP_INT:
    SetEPType(ep->num, EP_INTERRUPT);
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	781a      	ldrb	r2, [r3, #0]
 8002ab2:	23c0      	movs	r3, #192	; 0xc0
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	0019      	movs	r1, r3
 8002ab8:	0010      	movs	r0, r2
 8002aba:	f000 fb6d 	bl	8003198 <SetEPType>
    break;
 8002abe:	e008      	b.n	8002ad2 <DCD_EP_Open+0x126>
  case USB_EP_ISOC:
    SetEPType(ep->num, EP_ISOCHRONOUS);
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	781a      	ldrb	r2, [r3, #0]
 8002ac4:	2380      	movs	r3, #128	; 0x80
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	0019      	movs	r1, r3
 8002aca:	0010      	movs	r0, r2
 8002acc:	f000 fb64 	bl	8003198 <SetEPType>
    break;
 8002ad0:	46c0      	nop			; (mov r8, r8)
  } 
  
  if (ep->doublebuffer == 0) 
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	7a9b      	ldrb	r3, [r3, #10]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d136      	bne.n	8002b48 <DCD_EP_Open+0x19c>
  {
    if (ep->is_in)
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	785b      	ldrb	r3, [r3, #1]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d013      	beq.n	8002b0a <DCD_EP_Open+0x15e>
    {
      /*Set the endpoint Transmit buffer address */
      SetEPTxAddr(ep->num, ep->pmaadress);
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	781a      	ldrb	r2, [r3, #0]
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	889b      	ldrh	r3, [r3, #4]
 8002aea:	0019      	movs	r1, r3
 8002aec:	0010      	movs	r0, r2
 8002aee:	f000 fcc5 	bl	800347c <SetEPTxAddr>
      ClearDTOG_TX(ep->num);
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	0018      	movs	r0, r3
 8002af8:	f000 fc92 	bl	8003420 <ClearDTOG_TX>
      /* Configure NAK status for the Endpoint*/
      SetEPTxStatus(ep->num, EP_TX_NAK); 
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2120      	movs	r1, #32
 8002b02:	0018      	movs	r0, r3
 8002b04:	f000 fb72 	bl	80031ec <SetEPTxStatus>
 8002b08:	e069      	b.n	8002bde <DCD_EP_Open+0x232>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      SetEPRxAddr(ep->num, ep->pmaadress);
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	781a      	ldrb	r2, [r3, #0]
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	889b      	ldrh	r3, [r3, #4]
 8002b12:	0019      	movs	r1, r3
 8002b14:	0010      	movs	r0, r2
 8002b16:	f000 fcd5 	bl	80034c4 <SetEPRxAddr>
      /*Set the endpoint Receive buffer counter*/
      SetEPRxCount(ep->num, ep->maxpacket);
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	781a      	ldrb	r2, [r3, #0]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	0019      	movs	r1, r3
 8002b26:	0010      	movs	r0, r2
 8002b28:	f000 fd10 	bl	800354c <SetEPRxCount>
      ClearDTOG_RX(ep->num);
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	0018      	movs	r0, r3
 8002b32:	f000 fc45 	bl	80033c0 <ClearDTOG_RX>
      /* Configure VALID status for the Endpoint*/
      SetEPRxStatus(ep->num, EP_RX_VALID);
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	781a      	ldrb	r2, [r3, #0]
 8002b3a:	23c0      	movs	r3, #192	; 0xc0
 8002b3c:	019b      	lsls	r3, r3, #6
 8002b3e:	0019      	movs	r1, r3
 8002b40:	0010      	movs	r0, r2
 8002b42:	f000 fb8f 	bl	8003264 <SetEPRxStatus>
 8002b46:	e04a      	b.n	8002bde <DCD_EP_Open+0x232>
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    SetEPDoubleBuff(ep->num);
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f000 fbc9 	bl	80032e4 <SetEPDoubleBuff>
    /*Set buffer address for double buffered mode*/
    SetEPDblBuffAddr(ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	7818      	ldrb	r0, [r3, #0]
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	88d9      	ldrh	r1, [r3, #6]
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	891b      	ldrh	r3, [r3, #8]
 8002b5e:	001a      	movs	r2, r3
 8002b60:	f000 fd8a 	bl	8003678 <SetEPDblBuffAddr>
    
    if (ep->is_in==0)
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	785b      	ldrb	r3, [r3, #1]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d11d      	bne.n	8002ba8 <DCD_EP_Open+0x1fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      ClearDTOG_RX(ep->num);
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	0018      	movs	r0, r3
 8002b72:	f000 fc25 	bl	80033c0 <ClearDTOG_RX>
      ClearDTOG_TX(ep->num);
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	f000 fc50 	bl	8003420 <ClearDTOG_TX>
      
      /* Reset value of the data toggle bits for the endpoint out*/
      ToggleDTOG_TX(ep->num);
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	0018      	movs	r0, r3
 8002b86:	f000 fbf7 	bl	8003378 <ToggleDTOG_TX>
      
      SetEPRxStatus(ep->num, EP_RX_VALID);
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	781a      	ldrb	r2, [r3, #0]
 8002b8e:	23c0      	movs	r3, #192	; 0xc0
 8002b90:	019b      	lsls	r3, r3, #6
 8002b92:	0019      	movs	r1, r3
 8002b94:	0010      	movs	r0, r2
 8002b96:	f000 fb65 	bl	8003264 <SetEPRxStatus>
      SetEPTxStatus(ep->num, EP_TX_DIS);
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	f000 fb23 	bl	80031ec <SetEPTxStatus>
 8002ba6:	e01a      	b.n	8002bde <DCD_EP_Open+0x232>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      ClearDTOG_RX(ep->num);
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	0018      	movs	r0, r3
 8002bae:	f000 fc07 	bl	80033c0 <ClearDTOG_RX>
      ClearDTOG_TX(ep->num);
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	f000 fc32 	bl	8003420 <ClearDTOG_TX>
      ToggleDTOG_RX(ep->num);
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	f000 fbb5 	bl	8003330 <ToggleDTOG_RX>
      /* Configure DISABLE status for the Endpoint*/
      SetEPTxStatus(ep->num, EP_TX_DIS);
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	2100      	movs	r1, #0
 8002bcc:	0018      	movs	r0, r3
 8002bce:	f000 fb0d 	bl	80031ec <SetEPTxStatus>
      SetEPRxStatus(ep->num, EP_RX_DIS);
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	0018      	movs	r0, r3
 8002bda:	f000 fb43 	bl	8003264 <SetEPRxStatus>
    }
  } 
  return USB_OK; 
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	0018      	movs	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	b007      	add	sp, #28
 8002be6:	bd90      	pop	{r4, r7, pc}

08002be8 <DCD_EP_Close>:
  * @param  pdev: device instance
  * @param  ep_addr: endpoint address
  * @retval : status
  */
uint32_t DCD_EP_Close(USB_CORE_HANDLE *pdev , uint8_t  ep_addr)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	000a      	movs	r2, r1
 8002bf2:	1cfb      	adds	r3, r7, #3
 8002bf4:	701a      	strb	r2, [r3, #0]
  USB_EP *ep;
  
  if ((ep_addr&0x80) == 0x80)
 8002bf6:	1cfb      	adds	r3, r7, #3
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	b25b      	sxtb	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	da0c      	bge.n	8002c1a <DCD_EP_Close+0x32>
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8002c00:	1cfb      	adds	r3, r7, #3
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	227f      	movs	r2, #127	; 0x7f
 8002c06:	401a      	ands	r2, r3
 8002c08:	0013      	movs	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	189b      	adds	r3, r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	3318      	adds	r3, #24
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	18d3      	adds	r3, r2, r3
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	e00b      	b.n	8002c32 <DCD_EP_Close+0x4a>
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 8002c1a:	1cfb      	adds	r3, r7, #3
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	227f      	movs	r2, #127	; 0x7f
 8002c20:	401a      	ands	r2, r3
 8002c22:	0013      	movs	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	189b      	adds	r3, r3, r2
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	33b8      	adds	r3, #184	; 0xb8
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	18d3      	adds	r3, r2, r3
 8002c30:	60fb      	str	r3, [r7, #12]
  }
  
  if (ep->doublebuffer == 0) 
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	7a9b      	ldrb	r3, [r3, #10]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d11b      	bne.n	8002c72 <DCD_EP_Close+0x8a>
  {
    if (ep->is_in)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	785b      	ldrb	r3, [r3, #1]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00b      	beq.n	8002c5a <DCD_EP_Close+0x72>
    {
      ClearDTOG_TX(ep->num);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	0018      	movs	r0, r3
 8002c48:	f000 fbea 	bl	8003420 <ClearDTOG_TX>
      /* Configure DISABLE status for the Endpoint*/
      SetEPTxStatus(ep->num, EP_TX_DIS); 
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2100      	movs	r1, #0
 8002c52:	0018      	movs	r0, r3
 8002c54:	f000 faca 	bl	80031ec <SetEPTxStatus>
 8002c58:	e046      	b.n	8002ce8 <DCD_EP_Close+0x100>
    }
    else
    {
      ClearDTOG_RX(ep->num);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f000 fbae 	bl	80033c0 <ClearDTOG_RX>
      /* Configure DISABLE status for the Endpoint*/
      SetEPRxStatus(ep->num, EP_RX_DIS);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2100      	movs	r1, #0
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	f000 fafa 	bl	8003264 <SetEPRxStatus>
 8002c70:	e03a      	b.n	8002ce8 <DCD_EP_Close+0x100>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	785b      	ldrb	r3, [r3, #1]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d11b      	bne.n	8002cb2 <DCD_EP_Close+0xca>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      ClearDTOG_RX(ep->num);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	0018      	movs	r0, r3
 8002c80:	f000 fb9e 	bl	80033c0 <ClearDTOG_RX>
      ClearDTOG_TX(ep->num);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	0018      	movs	r0, r3
 8002c8a:	f000 fbc9 	bl	8003420 <ClearDTOG_TX>
      
      /* Reset value of the data toggle bits for the endpoint out*/
      ToggleDTOG_TX(ep->num);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	0018      	movs	r0, r3
 8002c94:	f000 fb70 	bl	8003378 <ToggleDTOG_TX>
      
      SetEPRxStatus(ep->num, EP_RX_DIS);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	f000 fae0 	bl	8003264 <SetEPRxStatus>
      SetEPTxStatus(ep->num, EP_TX_DIS);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	2100      	movs	r1, #0
 8002caa:	0018      	movs	r0, r3
 8002cac:	f000 fa9e 	bl	80031ec <SetEPTxStatus>
 8002cb0:	e01a      	b.n	8002ce8 <DCD_EP_Close+0x100>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      ClearDTOG_RX(ep->num);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	f000 fb82 	bl	80033c0 <ClearDTOG_RX>
      ClearDTOG_TX(ep->num);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f000 fbad 	bl	8003420 <ClearDTOG_TX>
      ToggleDTOG_RX(ep->num);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	0018      	movs	r0, r3
 8002ccc:	f000 fb30 	bl	8003330 <ToggleDTOG_RX>
      /* Configure DISABLE status for the Endpoint*/
      SetEPTxStatus(ep->num, EP_TX_DIS);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	f000 fa88 	bl	80031ec <SetEPTxStatus>
      SetEPRxStatus(ep->num, EP_RX_DIS);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	f000 fabe 	bl	8003264 <SetEPRxStatus>
    }
  } 
  return USB_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	0018      	movs	r0, r3
 8002cec:	46bd      	mov	sp, r7
 8002cee:	b004      	add	sp, #16
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	46c0      	nop			; (mov r8, r8)

08002cf4 <DCD_EP_PrepareRx>:
  */
uint32_t DCD_EP_PrepareRx( USB_CORE_HANDLE *pdev,
                          uint8_t   ep_addr,
                          uint8_t *pbuf,                        
                          uint16_t  buf_len)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	0008      	movs	r0, r1
 8002cfe:	607a      	str	r2, [r7, #4]
 8002d00:	0019      	movs	r1, r3
 8002d02:	230b      	movs	r3, #11
 8002d04:	18fb      	adds	r3, r7, r3
 8002d06:	1c02      	adds	r2, r0, #0
 8002d08:	701a      	strb	r2, [r3, #0]
 8002d0a:	2308      	movs	r3, #8
 8002d0c:	18fb      	adds	r3, r7, r3
 8002d0e:	1c0a      	adds	r2, r1, #0
 8002d10:	801a      	strh	r2, [r3, #0]
  volatile uint32_t len = 0;
 8002d12:	2300      	movs	r3, #0
 8002d14:	613b      	str	r3, [r7, #16]
  USB_EP *ep;
  
  ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 8002d16:	230b      	movs	r3, #11
 8002d18:	18fb      	adds	r3, r7, r3
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	227f      	movs	r2, #127	; 0x7f
 8002d1e:	401a      	ands	r2, r3
 8002d20:	0013      	movs	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	189b      	adds	r3, r3, r2
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	33b8      	adds	r3, #184	; 0xb8
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	18d3      	adds	r3, r2, r3
 8002d2e:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pbuf;  
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	611a      	str	r2, [r3, #16]
  ep->xfer_len = buf_len;
 8002d36:	2308      	movs	r3, #8
 8002d38:	18fb      	adds	r3, r7, r3
 8002d3a:	881a      	ldrh	r2, [r3, #0]
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0; 
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	2200      	movs	r2, #0
 8002d44:	619a      	str	r2, [r3, #24]
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	695a      	ldr	r2, [r3, #20]
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d909      	bls.n	8002d66 <DCD_EP_PrepareRx+0x72>
  {
    len=ep->maxpacket;
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	613b      	str	r3, [r7, #16]
    ep->xfer_len-=len; 
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	1a9a      	subs	r2, r3, r2
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	615a      	str	r2, [r3, #20]
 8002d64:	e005      	b.n	8002d72 <DCD_EP_PrepareRx+0x7e>
  }
  else
  {
    len=ep->xfer_len;
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	613b      	str	r3, [r7, #16]
    ep->xfer_len =0;
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	615a      	str	r2, [r3, #20]
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	7a9b      	ldrb	r3, [r3, #10]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d108      	bne.n	8002d8c <DCD_EP_PrepareRx+0x98>
  {
    /*Set RX buffer count*/
    SetEPRxCount(ep->num, len);
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	b292      	uxth	r2, r2
 8002d82:	0011      	movs	r1, r2
 8002d84:	0018      	movs	r0, r3
 8002d86:	f000 fbe1 	bl	800354c <SetEPRxCount>
 8002d8a:	e008      	b.n	8002d9e <DCD_EP_PrepareRx+0xaa>
  }
  else
  {
    /*Set the Double buffer counter*/
    SetEPDblBuffCount(ep->num, ep->is_in, len);
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	7818      	ldrb	r0, [r3, #0]
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	785b      	ldrb	r3, [r3, #1]
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	b292      	uxth	r2, r2
 8002d98:	0019      	movs	r1, r3
 8002d9a:	f000 fcab 	bl	80036f4 <SetEPDblBuffCount>
  } 
  
  SetEPRxStatus(ep->num, EP_RX_VALID);
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	781a      	ldrb	r2, [r3, #0]
 8002da2:	23c0      	movs	r3, #192	; 0xc0
 8002da4:	019b      	lsls	r3, r3, #6
 8002da6:	0019      	movs	r1, r3
 8002da8:	0010      	movs	r0, r2
 8002daa:	f000 fa5b 	bl	8003264 <SetEPRxStatus>
  
  return USB_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	0018      	movs	r0, r3
 8002db2:	46bd      	mov	sp, r7
 8002db4:	b006      	add	sp, #24
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <DCD_EP_Tx>:
  */
uint32_t  DCD_EP_Tx ( USB_CORE_HANDLE *pdev,
                     uint8_t   ep_addr,
                     uint8_t   *pbuf,
                     uint32_t   buf_len)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b088      	sub	sp, #32
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	607a      	str	r2, [r7, #4]
 8002dc2:	603b      	str	r3, [r7, #0]
 8002dc4:	230b      	movs	r3, #11
 8002dc6:	18fb      	adds	r3, r7, r3
 8002dc8:	1c0a      	adds	r2, r1, #0
 8002dca:	701a      	strb	r2, [r3, #0]
  volatile uint32_t len = 0;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	617b      	str	r3, [r7, #20]
  USB_EP *ep;
  
  ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8002dd0:	230b      	movs	r3, #11
 8002dd2:	18fb      	adds	r3, r7, r3
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	227f      	movs	r2, #127	; 0x7f
 8002dd8:	401a      	ands	r2, r3
 8002dda:	0013      	movs	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	189b      	adds	r3, r3, r2
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	3318      	adds	r3, #24
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	18d3      	adds	r3, r2, r3
 8002de8:	61bb      	str	r3, [r7, #24]
  
  /*setup and start the Xfer */
  ep->num = ep_addr & 0x7F; 
 8002dea:	230b      	movs	r3, #11
 8002dec:	18fb      	adds	r3, r7, r3
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	227f      	movs	r2, #127	; 0x7f
 8002df2:	4013      	ands	r3, r2
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	701a      	strb	r2, [r3, #0]
  ep->xfer_buff = pbuf;  
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	611a      	str	r2, [r3, #16]
  ep->xfer_len = buf_len;
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0; 
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	619a      	str	r2, [r3, #24]
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	695a      	ldr	r2, [r3, #20]
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d909      	bls.n	8002e2c <DCD_EP_Tx+0x74>
  {
    len=ep->maxpacket;
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	617b      	str	r3, [r7, #20]
    ep->xfer_len-=len; 
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	1a9a      	subs	r2, r3, r2
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	615a      	str	r2, [r3, #20]
 8002e2a:	e005      	b.n	8002e38 <DCD_EP_Tx+0x80>
  }
  else
  {
    len=ep->xfer_len;
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	617b      	str	r3, [r7, #20]
    ep->xfer_len =0;
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	2200      	movs	r2, #0
 8002e36:	615a      	str	r2, [r3, #20]
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0) 
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	7a9b      	ldrb	r3, [r3, #10]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d111      	bne.n	8002e64 <DCD_EP_Tx+0xac>
  {
    UserToPMABufferCopy(ep->xfer_buff, ep->pmaadress, len);
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	6918      	ldr	r0, [r3, #16]
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	889b      	ldrh	r3, [r3, #4]
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	b292      	uxth	r2, r2
 8002e4c:	0019      	movs	r1, r3
 8002e4e:	f000 fdab 	bl	80039a8 <UserToPMABufferCopy>
    SetEPTxCount(ep->num, len);
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	b292      	uxth	r2, r2
 8002e5a:	0011      	movs	r1, r2
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	f000 fb55 	bl	800350c <SetEPTxCount>
 8002e62:	e033      	b.n	8002ecc <DCD_EP_Tx+0x114>
  }
  else
  {
    uint16_t pmabuffer=0;
 8002e64:	231e      	movs	r3, #30
 8002e66:	18fb      	adds	r3, r7, r3
 8002e68:	2200      	movs	r2, #0
 8002e6a:	801a      	strh	r2, [r3, #0]
    /*Set the Double buffer counter*/
    SetEPDblBuffCount(ep->num, ep->is_in, len);
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	7818      	ldrb	r0, [r3, #0]
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	785b      	ldrb	r3, [r3, #1]
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	b292      	uxth	r2, r2
 8002e78:	0019      	movs	r1, r3
 8002e7a:	f000 fc3b 	bl	80036f4 <SetEPDblBuffCount>
    
    /*Write the data to the USB endpoint*/
    if (GetENDPOINT(ep->num)&EP_DTOG_TX)
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	0018      	movs	r0, r3
 8002e84:	f000 f974 	bl	8003170 <GetENDPOINT>
 8002e88:	0003      	movs	r3, r0
 8002e8a:	001a      	movs	r2, r3
 8002e8c:	2340      	movs	r3, #64	; 0x40
 8002e8e:	4013      	ands	r3, r2
 8002e90:	d005      	beq.n	8002e9e <DCD_EP_Tx+0xe6>
    {
      pmabuffer = ep->pmaaddr1;
 8002e92:	231e      	movs	r3, #30
 8002e94:	18fb      	adds	r3, r7, r3
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	8912      	ldrh	r2, [r2, #8]
 8002e9a:	801a      	strh	r2, [r3, #0]
 8002e9c:	e004      	b.n	8002ea8 <DCD_EP_Tx+0xf0>
    }
    else
    {
      pmabuffer = ep->pmaaddr0;
 8002e9e:	231e      	movs	r3, #30
 8002ea0:	18fb      	adds	r3, r7, r3
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	88d2      	ldrh	r2, [r2, #6]
 8002ea6:	801a      	strh	r2, [r3, #0]
    }
    UserToPMABufferCopy(ep->xfer_buff, pmabuffer, len);
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	6918      	ldr	r0, [r3, #16]
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	231e      	movs	r3, #30
 8002eb2:	18fb      	adds	r3, r7, r3
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	0019      	movs	r1, r3
 8002eb8:	f000 fd76 	bl	80039a8 <UserToPMABufferCopy>
    FreeUserBuffer(ep->num, ep->is_in);
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	781a      	ldrb	r2, [r3, #0]
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	785b      	ldrb	r3, [r3, #1]
 8002ec4:	0019      	movs	r1, r3
 8002ec6:	0010      	movs	r0, r2
 8002ec8:	f000 fd2a 	bl	8003920 <FreeUserBuffer>
  }
  
  SetEPTxStatus(ep->num, EP_TX_VALID);
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2130      	movs	r1, #48	; 0x30
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	f000 f98a 	bl	80031ec <SetEPTxStatus>
  
  return USB_OK; 
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	0018      	movs	r0, r3
 8002edc:	46bd      	mov	sp, r7
 8002ede:	b008      	add	sp, #32
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	46c0      	nop			; (mov r8, r8)

08002ee4 <DCD_EP_Stall>:
  * @param  pdev: device instance
  * @param  epnum: endpoint address
  * @retval : status
  */
uint32_t  DCD_EP_Stall (USB_CORE_HANDLE *pdev, uint8_t   epnum)
{
 8002ee4:	b590      	push	{r4, r7, lr}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	000a      	movs	r2, r1
 8002eee:	1cfb      	adds	r3, r7, #3
 8002ef0:	701a      	strb	r2, [r3, #0]
  USB_EP *ep;
  if ((0x80 & epnum) == 0x80)
 8002ef2:	1cfb      	adds	r3, r7, #3
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	b25b      	sxtb	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	da0c      	bge.n	8002f16 <DCD_EP_Stall+0x32>
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];    
 8002efc:	1cfb      	adds	r3, r7, #3
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	227f      	movs	r2, #127	; 0x7f
 8002f02:	401a      	ands	r2, r3
 8002f04:	0013      	movs	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	189b      	adds	r3, r3, r2
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	3318      	adds	r3, #24
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	18d3      	adds	r3, r2, r3
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	e009      	b.n	8002f2a <DCD_EP_Stall+0x46>
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 8002f16:	1cfb      	adds	r3, r7, #3
 8002f18:	781a      	ldrb	r2, [r3, #0]
 8002f1a:	0013      	movs	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	189b      	adds	r3, r3, r2
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	33b8      	adds	r3, #184	; 0xb8
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	18d3      	adds	r3, r2, r3
 8002f28:	60fb      	str	r3, [r7, #12]
  }
  
  if (ep->num ==0)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d121      	bne.n	8002f76 <DCD_EP_Stall+0x92>
  {
    /* This macro sets STALL status for RX & TX*/ 
    _SetEPRxTxStatus(ep->num,EP_RX_STALL,EP_TX_STALL); 
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4a1e      	ldr	r2, [pc, #120]	; (8002fb4 <DCD_EP_Stall+0xd0>)
 8002f3a:	4694      	mov	ip, r2
 8002f3c:	4463      	add	r3, ip
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a1d      	ldr	r2, [pc, #116]	; (8002fb8 <DCD_EP_Stall+0xd4>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	001c      	movs	r4, r3
 8002f46:	2380      	movs	r3, #128	; 0x80
 8002f48:	015b      	lsls	r3, r3, #5
 8002f4a:	4063      	eors	r3, r4
 8002f4c:	001c      	movs	r4, r3
 8002f4e:	2310      	movs	r3, #16
 8002f50:	4063      	eors	r3, r4
 8002f52:	001c      	movs	r4, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4a16      	ldr	r2, [pc, #88]	; (8002fb4 <DCD_EP_Stall+0xd0>)
 8002f5c:	4694      	mov	ip, r2
 8002f5e:	4463      	add	r3, ip
 8002f60:	0022      	movs	r2, r4
 8002f62:	0412      	lsls	r2, r2, #16
 8002f64:	0c12      	lsrs	r2, r2, #16
 8002f66:	4915      	ldr	r1, [pc, #84]	; (8002fbc <DCD_EP_Stall+0xd8>)
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	601a      	str	r2, [r3, #0]
    /*Endpoint is stalled */
    ep->is_stall = 1;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	709a      	strb	r2, [r3, #2]
    return USB_OK;
 8002f72:	2300      	movs	r3, #0
 8002f74:	e019      	b.n	8002faa <DCD_EP_Stall+0xc6>
  }
  if (ep->is_in)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	785b      	ldrb	r3, [r3, #1]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d009      	beq.n	8002f92 <DCD_EP_Stall+0xae>
  {  
    /* IN endpoint */
    ep->is_stall = 1;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2201      	movs	r2, #1
 8002f82:	709a      	strb	r2, [r3, #2]
    /* IN Endpoint stalled */
   SetEPTxStatus(ep->num , EP_TX_STALL); 
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	2110      	movs	r1, #16
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	f000 f92e 	bl	80031ec <SetEPTxStatus>
 8002f90:	e00a      	b.n	8002fa8 <DCD_EP_Stall+0xc4>
  }
  else
  { 
    ep->is_stall = 1;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2201      	movs	r2, #1
 8002f96:	709a      	strb	r2, [r3, #2]
    /* OUT Endpoint stalled */
    SetEPRxStatus(ep->num , EP_RX_STALL);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	781a      	ldrb	r2, [r3, #0]
 8002f9c:	2380      	movs	r3, #128	; 0x80
 8002f9e:	015b      	lsls	r3, r3, #5
 8002fa0:	0019      	movs	r1, r3
 8002fa2:	0010      	movs	r0, r2
 8002fa4:	f000 f95e 	bl	8003264 <SetEPRxStatus>
  }
  
  return USB_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	0018      	movs	r0, r3
 8002fac:	46bd      	mov	sp, r7
 8002fae:	b005      	add	sp, #20
 8002fb0:	bd90      	pop	{r4, r7, pc}
 8002fb2:	46c0      	nop			; (mov r8, r8)
 8002fb4:	40005c00 	.word	0x40005c00
 8002fb8:	0000bfbf 	.word	0x0000bfbf
 8002fbc:	00008080 	.word	0x00008080

08002fc0 <DCD_EP_ClrStall>:
  * @param  pdev: device instance
  * @param  epnum: endpoint address
  * @retval : status
  */
uint32_t  DCD_EP_ClrStall (USB_CORE_HANDLE *pdev, uint8_t epnum)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	000a      	movs	r2, r1
 8002fca:	1cfb      	adds	r3, r7, #3
 8002fcc:	701a      	strb	r2, [r3, #0]
  USB_EP *ep;
  if ((0x80 & epnum) == 0x80)
 8002fce:	1cfb      	adds	r3, r7, #3
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	b25b      	sxtb	r3, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	da0c      	bge.n	8002ff2 <DCD_EP_ClrStall+0x32>
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];    
 8002fd8:	1cfb      	adds	r3, r7, #3
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	227f      	movs	r2, #127	; 0x7f
 8002fde:	401a      	ands	r2, r3
 8002fe0:	0013      	movs	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	189b      	adds	r3, r3, r2
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	3318      	adds	r3, #24
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	18d3      	adds	r3, r2, r3
 8002fee:	60fb      	str	r3, [r7, #12]
 8002ff0:	e009      	b.n	8003006 <DCD_EP_ClrStall+0x46>
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 8002ff2:	1cfb      	adds	r3, r7, #3
 8002ff4:	781a      	ldrb	r2, [r3, #0]
 8002ff6:	0013      	movs	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	189b      	adds	r3, r3, r2
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	33b8      	adds	r3, #184	; 0xb8
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	18d3      	adds	r3, r2, r3
 8003004:	60fb      	str	r3, [r7, #12]
  } 
  
  if (ep->is_in)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	785b      	ldrb	r3, [r3, #1]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00e      	beq.n	800302c <DCD_EP_ClrStall+0x6c>
  {
    ClearDTOG_TX(ep->num);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	0018      	movs	r0, r3
 8003014:	f000 fa04 	bl	8003420 <ClearDTOG_TX>
    SetEPTxStatus(ep->num, EP_TX_VALID);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	2130      	movs	r1, #48	; 0x30
 800301e:	0018      	movs	r0, r3
 8003020:	f000 f8e4 	bl	80031ec <SetEPTxStatus>
    ep->is_stall = 0;  
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	709a      	strb	r2, [r3, #2]
 800302a:	e00f      	b.n	800304c <DCD_EP_ClrStall+0x8c>
  }
  else
  {
    ClearDTOG_RX(ep->num);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	0018      	movs	r0, r3
 8003032:	f000 f9c5 	bl	80033c0 <ClearDTOG_RX>
    SetEPRxStatus(ep->num, EP_RX_VALID);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	781a      	ldrb	r2, [r3, #0]
 800303a:	23c0      	movs	r3, #192	; 0xc0
 800303c:	019b      	lsls	r3, r3, #6
 800303e:	0019      	movs	r1, r3
 8003040:	0010      	movs	r0, r2
 8003042:	f000 f90f 	bl	8003264 <SetEPRxStatus>
    ep->is_stall = 0;  
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	709a      	strb	r2, [r3, #2]
  }
  
  return USB_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	0018      	movs	r0, r3
 8003050:	46bd      	mov	sp, r7
 8003052:	b004      	add	sp, #16
 8003054:	bd80      	pop	{r7, pc}
 8003056:	46c0      	nop			; (mov r8, r8)

08003058 <DCD_EP_SetAddress>:
  * @brief This Function set USB device address
  * @param  pdev: device instance
  * @param  address: new device address
  */
void  DCD_EP_SetAddress (USB_CORE_HANDLE *pdev, uint8_t address)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	000a      	movs	r2, r1
 8003062:	1cfb      	adds	r3, r7, #3
 8003064:	701a      	strb	r2, [r3, #0]
  uint32_t i=0;
 8003066:	2300      	movs	r3, #0
 8003068:	60fb      	str	r3, [r7, #12]
  pdev->dev.device_address = address;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	1cfa      	adds	r2, r7, #3
 800306e:	7812      	ldrb	r2, [r2, #0]
 8003070:	711a      	strb	r2, [r3, #4]
  
  /* set address in every used endpoint */
  for (i = 0; i < EP_NUM; i++)
 8003072:	2300      	movs	r3, #0
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	e01b      	b.n	80030b0 <DCD_EP_SetAddress+0x58>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	22ff      	movs	r2, #255	; 0xff
 800307c:	4013      	ands	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4a13      	ldr	r2, [pc, #76]	; (80030d0 <DCD_EP_SetAddress+0x78>)
 8003082:	4694      	mov	ip, r2
 8003084:	4463      	add	r3, ip
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	21ff      	movs	r1, #255	; 0xff
 800308a:	400a      	ands	r2, r1
 800308c:	0092      	lsls	r2, r2, #2
 800308e:	4910      	ldr	r1, [pc, #64]	; (80030d0 <DCD_EP_SetAddress+0x78>)
 8003090:	468c      	mov	ip, r1
 8003092:	4462      	add	r2, ip
 8003094:	6812      	ldr	r2, [r2, #0]
 8003096:	0011      	movs	r1, r2
 8003098:	4a0e      	ldr	r2, [pc, #56]	; (80030d4 <DCD_EP_SetAddress+0x7c>)
 800309a:	400a      	ands	r2, r1
 800309c:	490e      	ldr	r1, [pc, #56]	; (80030d8 <DCD_EP_SetAddress+0x80>)
 800309e:	4311      	orrs	r1, r2
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	20ff      	movs	r0, #255	; 0xff
 80030a4:	4002      	ands	r2, r0
 80030a6:	430a      	orrs	r2, r1
 80030a8:	601a      	str	r2, [r3, #0]
{
  uint32_t i=0;
  pdev->dev.device_address = address;
  
  /* set address in every used endpoint */
  for (i = 0; i < EP_NUM; i++)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	3301      	adds	r3, #1
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2b03      	cmp	r3, #3
 80030b4:	d9e0      	bls.n	8003078 <DCD_EP_SetAddress+0x20>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
  } /* set device address and enable function */
  _SetDADDR(address | DADDR_EF); 
 80030b6:	4b09      	ldr	r3, [pc, #36]	; (80030dc <DCD_EP_SetAddress+0x84>)
 80030b8:	1cfa      	adds	r2, r7, #3
 80030ba:	7812      	ldrb	r2, [r2, #0]
 80030bc:	2180      	movs	r1, #128	; 0x80
 80030be:	4249      	negs	r1, r1
 80030c0:	430a      	orrs	r2, r1
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	601a      	str	r2, [r3, #0]
}
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	46bd      	mov	sp, r7
 80030ca:	b004      	add	sp, #16
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	46c0      	nop			; (mov r8, r8)
 80030d0:	40005c00 	.word	0x40005c00
 80030d4:	00000f0f 	.word	0x00000f0f
 80030d8:	00008080 	.word	0x00008080
 80030dc:	40005c4c 	.word	0x40005c4c

080030e0 <DCD_DevConnect>:
  * @brief Connect device (enable internal pull-up)
  * @param  pdev: device instance
  * @retval : None
  */
void  DCD_DevConnect (USB_CORE_HANDLE *pdev)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-Down bit to Connect internal pull-up on USB DP line */
  *BCDR |= BCDR_DPPU;
 80030e8:	4b06      	ldr	r3, [pc, #24]	; (8003104 <DCD_DevConnect+0x24>)
 80030ea:	4a06      	ldr	r2, [pc, #24]	; (8003104 <DCD_DevConnect+0x24>)
 80030ec:	6812      	ldr	r2, [r2, #0]
 80030ee:	2180      	movs	r1, #128	; 0x80
 80030f0:	0209      	lsls	r1, r1, #8
 80030f2:	430a      	orrs	r2, r1
 80030f4:	601a      	str	r2, [r3, #0]
  /*Device is in default state*/
  pdev->dev.device_status  = USB_DEFAULT;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	709a      	strb	r2, [r3, #2]
}
 80030fc:	46c0      	nop			; (mov r8, r8)
 80030fe:	46bd      	mov	sp, r7
 8003100:	b002      	add	sp, #8
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40005c58 	.word	0x40005c58

08003108 <SetCNTR>:
  * @brief Set the CNTR register value 
  * @param   wRegValue: new register value
  * @retval None
  */
void SetCNTR(uint16_t wRegValue)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	0002      	movs	r2, r0
 8003110:	1dbb      	adds	r3, r7, #6
 8003112:	801a      	strh	r2, [r3, #0]
  _SetCNTR(wRegValue);
 8003114:	4b03      	ldr	r3, [pc, #12]	; (8003124 <SetCNTR+0x1c>)
 8003116:	1dba      	adds	r2, r7, #6
 8003118:	8812      	ldrh	r2, [r2, #0]
 800311a:	601a      	str	r2, [r3, #0]
}
 800311c:	46c0      	nop			; (mov r8, r8)
 800311e:	46bd      	mov	sp, r7
 8003120:	b002      	add	sp, #8
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40005c40 	.word	0x40005c40

08003128 <SetISTR>:
  * @brief Set the ISTR register value 
  * @param   wRegValue: new register value
  * @retval None
  */
void SetISTR(uint16_t wRegValue)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	0002      	movs	r2, r0
 8003130:	1dbb      	adds	r3, r7, #6
 8003132:	801a      	strh	r2, [r3, #0]
  _SetISTR(wRegValue);
 8003134:	4b03      	ldr	r3, [pc, #12]	; (8003144 <SetISTR+0x1c>)
 8003136:	1dba      	adds	r2, r7, #6
 8003138:	8812      	ldrh	r2, [r2, #0]
 800313a:	601a      	str	r2, [r3, #0]
}
 800313c:	46c0      	nop			; (mov r8, r8)
 800313e:	46bd      	mov	sp, r7
 8003140:	b002      	add	sp, #8
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40005c44 	.word	0x40005c44

08003148 <SetBTABLE>:
  * @brief Set the BTABLE.
  * @param   wRegValue: New register value
  * @retval None
  */
void SetBTABLE(uint16_t wRegValue)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	0002      	movs	r2, r0
 8003150:	1dbb      	adds	r3, r7, #6
 8003152:	801a      	strh	r2, [r3, #0]
  _SetBTABLE(wRegValue);
 8003154:	4b04      	ldr	r3, [pc, #16]	; (8003168 <SetBTABLE+0x20>)
 8003156:	1dba      	adds	r2, r7, #6
 8003158:	8812      	ldrh	r2, [r2, #0]
 800315a:	4904      	ldr	r1, [pc, #16]	; (800316c <SetBTABLE+0x24>)
 800315c:	400a      	ands	r2, r1
 800315e:	601a      	str	r2, [r3, #0]
}
 8003160:	46c0      	nop			; (mov r8, r8)
 8003162:	46bd      	mov	sp, r7
 8003164:	b002      	add	sp, #8
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40005c50 	.word	0x40005c50
 800316c:	0000fff8 	.word	0x0000fff8

08003170 <GetENDPOINT>:
  * @brief Return the Endpoint register value.
  * @param   bEpNum: Endpoint Number
  * @retval Endpoint register value.
  */
uint16_t GetENDPOINT(uint8_t bEpNum)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	0002      	movs	r2, r0
 8003178:	1dfb      	adds	r3, r7, #7
 800317a:	701a      	strb	r2, [r3, #0]
  return(_GetENDPOINT(bEpNum));
 800317c:	1dfb      	adds	r3, r7, #7
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4a04      	ldr	r2, [pc, #16]	; (8003194 <GetENDPOINT+0x24>)
 8003184:	4694      	mov	ip, r2
 8003186:	4463      	add	r3, ip
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	b29b      	uxth	r3, r3
}
 800318c:	0018      	movs	r0, r3
 800318e:	46bd      	mov	sp, r7
 8003190:	b002      	add	sp, #8
 8003192:	bd80      	pop	{r7, pc}
 8003194:	40005c00 	.word	0x40005c00

08003198 <SetEPType>:
  * @param   bEpNum: Endpoint Number
  * @param   wType: type definition
  * @retval None.
  */
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	0002      	movs	r2, r0
 80031a0:	1dfb      	adds	r3, r7, #7
 80031a2:	701a      	strb	r2, [r3, #0]
 80031a4:	1d3b      	adds	r3, r7, #4
 80031a6:	1c0a      	adds	r2, r1, #0
 80031a8:	801a      	strh	r2, [r3, #0]
  _SetEPType(bEpNum, wType);
 80031aa:	1dfb      	adds	r3, r7, #7
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4a0c      	ldr	r2, [pc, #48]	; (80031e4 <SetEPType+0x4c>)
 80031b2:	4694      	mov	ip, r2
 80031b4:	4463      	add	r3, ip
 80031b6:	1dfa      	adds	r2, r7, #7
 80031b8:	7812      	ldrb	r2, [r2, #0]
 80031ba:	0092      	lsls	r2, r2, #2
 80031bc:	4909      	ldr	r1, [pc, #36]	; (80031e4 <SetEPType+0x4c>)
 80031be:	468c      	mov	ip, r1
 80031c0:	4462      	add	r2, ip
 80031c2:	6812      	ldr	r2, [r2, #0]
 80031c4:	b212      	sxth	r2, r2
 80031c6:	4908      	ldr	r1, [pc, #32]	; (80031e8 <SetEPType+0x50>)
 80031c8:	400a      	ands	r2, r1
 80031ca:	b211      	sxth	r1, r2
 80031cc:	1d3a      	adds	r2, r7, #4
 80031ce:	2000      	movs	r0, #0
 80031d0:	5e12      	ldrsh	r2, [r2, r0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	b212      	sxth	r2, r2
 80031d6:	b292      	uxth	r2, r2
 80031d8:	601a      	str	r2, [r3, #0]
}
 80031da:	46c0      	nop			; (mov r8, r8)
 80031dc:	46bd      	mov	sp, r7
 80031de:	b002      	add	sp, #8
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	46c0      	nop			; (mov r8, r8)
 80031e4:	40005c00 	.word	0x40005c00
 80031e8:	ffff898f 	.word	0xffff898f

080031ec <SetEPTxStatus>:
  * @param   bEpNum: Endpoint Number
  * @param   wState: new state.
  * @retval None
  */
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
 80031ec:	b590      	push	{r4, r7, lr}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	0002      	movs	r2, r0
 80031f4:	1dfb      	adds	r3, r7, #7
 80031f6:	701a      	strb	r2, [r3, #0]
 80031f8:	1d3b      	adds	r3, r7, #4
 80031fa:	1c0a      	adds	r2, r1, #0
 80031fc:	801a      	strh	r2, [r3, #0]
  _SetEPTxStatus(bEpNum, wState);   
 80031fe:	1dfb      	adds	r3, r7, #7
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4a14      	ldr	r2, [pc, #80]	; (8003258 <SetEPTxStatus+0x6c>)
 8003206:	4694      	mov	ip, r2
 8003208:	4463      	add	r3, ip
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	b29b      	uxth	r3, r3
 800320e:	4a13      	ldr	r2, [pc, #76]	; (800325c <SetEPTxStatus+0x70>)
 8003210:	4013      	ands	r3, r2
 8003212:	b29c      	uxth	r4, r3
 8003214:	1d3b      	adds	r3, r7, #4
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	2210      	movs	r2, #16
 800321a:	4013      	ands	r3, r2
 800321c:	b29b      	uxth	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d002      	beq.n	8003228 <SetEPTxStatus+0x3c>
 8003222:	2310      	movs	r3, #16
 8003224:	4063      	eors	r3, r4
 8003226:	b29c      	uxth	r4, r3
 8003228:	1d3b      	adds	r3, r7, #4
 800322a:	881b      	ldrh	r3, [r3, #0]
 800322c:	2220      	movs	r2, #32
 800322e:	4013      	ands	r3, r2
 8003230:	b29b      	uxth	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d002      	beq.n	800323c <SetEPTxStatus+0x50>
 8003236:	2320      	movs	r3, #32
 8003238:	4063      	eors	r3, r4
 800323a:	b29c      	uxth	r4, r3
 800323c:	1dfb      	adds	r3, r7, #7
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4a05      	ldr	r2, [pc, #20]	; (8003258 <SetEPTxStatus+0x6c>)
 8003244:	4694      	mov	ip, r2
 8003246:	4463      	add	r3, ip
 8003248:	4a05      	ldr	r2, [pc, #20]	; (8003260 <SetEPTxStatus+0x74>)
 800324a:	4322      	orrs	r2, r4
 800324c:	b292      	uxth	r2, r2
 800324e:	601a      	str	r2, [r3, #0]
}
 8003250:	46c0      	nop			; (mov r8, r8)
 8003252:	46bd      	mov	sp, r7
 8003254:	b003      	add	sp, #12
 8003256:	bd90      	pop	{r4, r7, pc}
 8003258:	40005c00 	.word	0x40005c00
 800325c:	ffff8fbf 	.word	0xffff8fbf
 8003260:	ffff8080 	.word	0xffff8080

08003264 <SetEPRxStatus>:
  * @param   bEpNum: Endpoint Number
  * @param   wState: new state.
  * @retval None
  */
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
 8003264:	b590      	push	{r4, r7, lr}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	0002      	movs	r2, r0
 800326c:	1dfb      	adds	r3, r7, #7
 800326e:	701a      	strb	r2, [r3, #0]
 8003270:	1d3b      	adds	r3, r7, #4
 8003272:	1c0a      	adds	r2, r1, #0
 8003274:	801a      	strh	r2, [r3, #0]
  _SetEPRxStatus(bEpNum, wState);
 8003276:	1dfb      	adds	r3, r7, #7
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4a16      	ldr	r2, [pc, #88]	; (80032d8 <SetEPRxStatus+0x74>)
 800327e:	4694      	mov	ip, r2
 8003280:	4463      	add	r3, ip
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	b29b      	uxth	r3, r3
 8003286:	4a15      	ldr	r2, [pc, #84]	; (80032dc <SetEPRxStatus+0x78>)
 8003288:	4013      	ands	r3, r2
 800328a:	b29c      	uxth	r4, r3
 800328c:	1d3b      	adds	r3, r7, #4
 800328e:	881a      	ldrh	r2, [r3, #0]
 8003290:	2380      	movs	r3, #128	; 0x80
 8003292:	015b      	lsls	r3, r3, #5
 8003294:	4013      	ands	r3, r2
 8003296:	b29b      	uxth	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d003      	beq.n	80032a4 <SetEPRxStatus+0x40>
 800329c:	2380      	movs	r3, #128	; 0x80
 800329e:	015b      	lsls	r3, r3, #5
 80032a0:	4063      	eors	r3, r4
 80032a2:	b29c      	uxth	r4, r3
 80032a4:	1d3b      	adds	r3, r7, #4
 80032a6:	881a      	ldrh	r2, [r3, #0]
 80032a8:	2380      	movs	r3, #128	; 0x80
 80032aa:	019b      	lsls	r3, r3, #6
 80032ac:	4013      	ands	r3, r2
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <SetEPRxStatus+0x58>
 80032b4:	2380      	movs	r3, #128	; 0x80
 80032b6:	019b      	lsls	r3, r3, #6
 80032b8:	4063      	eors	r3, r4
 80032ba:	b29c      	uxth	r4, r3
 80032bc:	1dfb      	adds	r3, r7, #7
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4a05      	ldr	r2, [pc, #20]	; (80032d8 <SetEPRxStatus+0x74>)
 80032c4:	4694      	mov	ip, r2
 80032c6:	4463      	add	r3, ip
 80032c8:	4a05      	ldr	r2, [pc, #20]	; (80032e0 <SetEPRxStatus+0x7c>)
 80032ca:	4322      	orrs	r2, r4
 80032cc:	b292      	uxth	r2, r2
 80032ce:	601a      	str	r2, [r3, #0]
}
 80032d0:	46c0      	nop			; (mov r8, r8)
 80032d2:	46bd      	mov	sp, r7
 80032d4:	b003      	add	sp, #12
 80032d6:	bd90      	pop	{r4, r7, pc}
 80032d8:	40005c00 	.word	0x40005c00
 80032dc:	ffffbf8f 	.word	0xffffbf8f
 80032e0:	ffff8080 	.word	0xffff8080

080032e4 <SetEPDoubleBuff>:
  * @brief Enable the double buffer feature for the endpoint.
  * @param   bEpNum: Endpoint Number
  * @retval None
  */
void SetEPDoubleBuff(uint8_t bEpNum)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	0002      	movs	r2, r0
 80032ec:	1dfb      	adds	r3, r7, #7
 80032ee:	701a      	strb	r2, [r3, #0]
  _SetEP_KIND(bEpNum);
 80032f0:	1dfb      	adds	r3, r7, #7
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4a0b      	ldr	r2, [pc, #44]	; (8003324 <SetEPDoubleBuff+0x40>)
 80032f8:	4694      	mov	ip, r2
 80032fa:	4463      	add	r3, ip
 80032fc:	1dfa      	adds	r2, r7, #7
 80032fe:	7812      	ldrb	r2, [r2, #0]
 8003300:	0092      	lsls	r2, r2, #2
 8003302:	4908      	ldr	r1, [pc, #32]	; (8003324 <SetEPDoubleBuff+0x40>)
 8003304:	468c      	mov	ip, r1
 8003306:	4462      	add	r2, ip
 8003308:	6812      	ldr	r2, [r2, #0]
 800330a:	b212      	sxth	r2, r2
 800330c:	4906      	ldr	r1, [pc, #24]	; (8003328 <SetEPDoubleBuff+0x44>)
 800330e:	400a      	ands	r2, r1
 8003310:	b212      	sxth	r2, r2
 8003312:	4906      	ldr	r1, [pc, #24]	; (800332c <SetEPDoubleBuff+0x48>)
 8003314:	430a      	orrs	r2, r1
 8003316:	b212      	sxth	r2, r2
 8003318:	b292      	uxth	r2, r2
 800331a:	601a      	str	r2, [r3, #0]
}
 800331c:	46c0      	nop			; (mov r8, r8)
 800331e:	46bd      	mov	sp, r7
 8003320:	b002      	add	sp, #8
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40005c00 	.word	0x40005c00
 8003328:	00000e0f 	.word	0x00000e0f
 800332c:	ffff8180 	.word	0xffff8180

08003330 <ToggleDTOG_RX>:
  * @brief Toggle the DTOG_RX bit.
  * @param   bEpNum: Endpoint Number
  * @retval None
  */
void ToggleDTOG_RX(uint8_t bEpNum)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	0002      	movs	r2, r0
 8003338:	1dfb      	adds	r3, r7, #7
 800333a:	701a      	strb	r2, [r3, #0]
  _ToggleDTOG_RX(bEpNum);
 800333c:	1dfb      	adds	r3, r7, #7
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4a0a      	ldr	r2, [pc, #40]	; (800336c <ToggleDTOG_RX+0x3c>)
 8003344:	4694      	mov	ip, r2
 8003346:	4463      	add	r3, ip
 8003348:	1dfa      	adds	r2, r7, #7
 800334a:	7812      	ldrb	r2, [r2, #0]
 800334c:	0092      	lsls	r2, r2, #2
 800334e:	4907      	ldr	r1, [pc, #28]	; (800336c <ToggleDTOG_RX+0x3c>)
 8003350:	468c      	mov	ip, r1
 8003352:	4462      	add	r2, ip
 8003354:	6812      	ldr	r2, [r2, #0]
 8003356:	0011      	movs	r1, r2
 8003358:	4a05      	ldr	r2, [pc, #20]	; (8003370 <ToggleDTOG_RX+0x40>)
 800335a:	400a      	ands	r2, r1
 800335c:	4905      	ldr	r1, [pc, #20]	; (8003374 <ToggleDTOG_RX+0x44>)
 800335e:	430a      	orrs	r2, r1
 8003360:	601a      	str	r2, [r3, #0]
}
 8003362:	46c0      	nop			; (mov r8, r8)
 8003364:	46bd      	mov	sp, r7
 8003366:	b002      	add	sp, #8
 8003368:	bd80      	pop	{r7, pc}
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	40005c00 	.word	0x40005c00
 8003370:	00000f0f 	.word	0x00000f0f
 8003374:	0000c080 	.word	0x0000c080

08003378 <ToggleDTOG_TX>:
  * @brief Toggle the DTOG_TX bit.
  * @param   bEpNum: Endpoint Number
  * @retval None
  */
void ToggleDTOG_TX(uint8_t bEpNum)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	0002      	movs	r2, r0
 8003380:	1dfb      	adds	r3, r7, #7
 8003382:	701a      	strb	r2, [r3, #0]
  _ToggleDTOG_TX(bEpNum);
 8003384:	1dfb      	adds	r3, r7, #7
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4a0a      	ldr	r2, [pc, #40]	; (80033b4 <ToggleDTOG_TX+0x3c>)
 800338c:	4694      	mov	ip, r2
 800338e:	4463      	add	r3, ip
 8003390:	1dfa      	adds	r2, r7, #7
 8003392:	7812      	ldrb	r2, [r2, #0]
 8003394:	0092      	lsls	r2, r2, #2
 8003396:	4907      	ldr	r1, [pc, #28]	; (80033b4 <ToggleDTOG_TX+0x3c>)
 8003398:	468c      	mov	ip, r1
 800339a:	4462      	add	r2, ip
 800339c:	6812      	ldr	r2, [r2, #0]
 800339e:	0011      	movs	r1, r2
 80033a0:	4a05      	ldr	r2, [pc, #20]	; (80033b8 <ToggleDTOG_TX+0x40>)
 80033a2:	400a      	ands	r2, r1
 80033a4:	4905      	ldr	r1, [pc, #20]	; (80033bc <ToggleDTOG_TX+0x44>)
 80033a6:	430a      	orrs	r2, r1
 80033a8:	601a      	str	r2, [r3, #0]
}
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	46bd      	mov	sp, r7
 80033ae:	b002      	add	sp, #8
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	40005c00 	.word	0x40005c00
 80033b8:	00000f0f 	.word	0x00000f0f
 80033bc:	000080c0 	.word	0x000080c0

080033c0 <ClearDTOG_RX>:
  * @brief Clear the DTOG_RX bit.
  * @param   bEpNum: Endpoint Number
  * @retval None
  */
void ClearDTOG_RX(uint8_t bEpNum)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	0002      	movs	r2, r0
 80033c8:	1dfb      	adds	r3, r7, #7
 80033ca:	701a      	strb	r2, [r3, #0]
  _ClearDTOG_RX(bEpNum);
 80033cc:	1dfb      	adds	r3, r7, #7
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4a10      	ldr	r2, [pc, #64]	; (8003414 <ClearDTOG_RX+0x54>)
 80033d4:	4694      	mov	ip, r2
 80033d6:	4463      	add	r3, ip
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	001a      	movs	r2, r3
 80033dc:	2380      	movs	r3, #128	; 0x80
 80033de:	01db      	lsls	r3, r3, #7
 80033e0:	4013      	ands	r3, r2
 80033e2:	d012      	beq.n	800340a <ClearDTOG_RX+0x4a>
 80033e4:	1dfb      	adds	r3, r7, #7
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4a0a      	ldr	r2, [pc, #40]	; (8003414 <ClearDTOG_RX+0x54>)
 80033ec:	4694      	mov	ip, r2
 80033ee:	4463      	add	r3, ip
 80033f0:	1dfa      	adds	r2, r7, #7
 80033f2:	7812      	ldrb	r2, [r2, #0]
 80033f4:	0092      	lsls	r2, r2, #2
 80033f6:	4907      	ldr	r1, [pc, #28]	; (8003414 <ClearDTOG_RX+0x54>)
 80033f8:	468c      	mov	ip, r1
 80033fa:	4462      	add	r2, ip
 80033fc:	6812      	ldr	r2, [r2, #0]
 80033fe:	0011      	movs	r1, r2
 8003400:	4a05      	ldr	r2, [pc, #20]	; (8003418 <ClearDTOG_RX+0x58>)
 8003402:	400a      	ands	r2, r1
 8003404:	4905      	ldr	r1, [pc, #20]	; (800341c <ClearDTOG_RX+0x5c>)
 8003406:	430a      	orrs	r2, r1
 8003408:	601a      	str	r2, [r3, #0]
}
 800340a:	46c0      	nop			; (mov r8, r8)
 800340c:	46bd      	mov	sp, r7
 800340e:	b002      	add	sp, #8
 8003410:	bd80      	pop	{r7, pc}
 8003412:	46c0      	nop			; (mov r8, r8)
 8003414:	40005c00 	.word	0x40005c00
 8003418:	00000f0f 	.word	0x00000f0f
 800341c:	0000c080 	.word	0x0000c080

08003420 <ClearDTOG_TX>:
  * @brief Clear the DTOG_TX bit.
  * @param   bEpNum: Endpoint Number
  * @retval None
  */
void ClearDTOG_TX(uint8_t bEpNum)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	0002      	movs	r2, r0
 8003428:	1dfb      	adds	r3, r7, #7
 800342a:	701a      	strb	r2, [r3, #0]
  _ClearDTOG_TX(bEpNum);
 800342c:	1dfb      	adds	r3, r7, #7
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4a0f      	ldr	r2, [pc, #60]	; (8003470 <ClearDTOG_TX+0x50>)
 8003434:	4694      	mov	ip, r2
 8003436:	4463      	add	r3, ip
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	001a      	movs	r2, r3
 800343c:	2340      	movs	r3, #64	; 0x40
 800343e:	4013      	ands	r3, r2
 8003440:	d012      	beq.n	8003468 <ClearDTOG_TX+0x48>
 8003442:	1dfb      	adds	r3, r7, #7
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4a09      	ldr	r2, [pc, #36]	; (8003470 <ClearDTOG_TX+0x50>)
 800344a:	4694      	mov	ip, r2
 800344c:	4463      	add	r3, ip
 800344e:	1dfa      	adds	r2, r7, #7
 8003450:	7812      	ldrb	r2, [r2, #0]
 8003452:	0092      	lsls	r2, r2, #2
 8003454:	4906      	ldr	r1, [pc, #24]	; (8003470 <ClearDTOG_TX+0x50>)
 8003456:	468c      	mov	ip, r1
 8003458:	4462      	add	r2, ip
 800345a:	6812      	ldr	r2, [r2, #0]
 800345c:	0011      	movs	r1, r2
 800345e:	4a05      	ldr	r2, [pc, #20]	; (8003474 <ClearDTOG_TX+0x54>)
 8003460:	400a      	ands	r2, r1
 8003462:	4905      	ldr	r1, [pc, #20]	; (8003478 <ClearDTOG_TX+0x58>)
 8003464:	430a      	orrs	r2, r1
 8003466:	601a      	str	r2, [r3, #0]
}
 8003468:	46c0      	nop			; (mov r8, r8)
 800346a:	46bd      	mov	sp, r7
 800346c:	b002      	add	sp, #8
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40005c00 	.word	0x40005c00
 8003474:	00000f0f 	.word	0x00000f0f
 8003478:	000080c0 	.word	0x000080c0

0800347c <SetEPTxAddr>:
  * @param   bEpNum: Endpoint Number
  * @param   wAddr: new address.
  * @retval Endpoint address.
  */
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	0002      	movs	r2, r0
 8003484:	1dfb      	adds	r3, r7, #7
 8003486:	701a      	strb	r2, [r3, #0]
 8003488:	1d3b      	adds	r3, r7, #4
 800348a:	1c0a      	adds	r2, r1, #0
 800348c:	801a      	strh	r2, [r3, #0]
  _SetEPTxAddr(bEpNum, wAddr);
 800348e:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <SetEPTxAddr+0x40>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	041b      	lsls	r3, r3, #16
 8003494:	0c1a      	lsrs	r2, r3, #16
 8003496:	1dfb      	adds	r3, r7, #7
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	18d3      	adds	r3, r2, r3
 800349e:	4a08      	ldr	r2, [pc, #32]	; (80034c0 <SetEPTxAddr+0x44>)
 80034a0:	4694      	mov	ip, r2
 80034a2:	4463      	add	r3, ip
 80034a4:	0019      	movs	r1, r3
 80034a6:	1d3b      	adds	r3, r7, #4
 80034a8:	881b      	ldrh	r3, [r3, #0]
 80034aa:	2201      	movs	r2, #1
 80034ac:	4393      	bics	r3, r2
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	800b      	strh	r3, [r1, #0]
}
 80034b2:	46c0      	nop			; (mov r8, r8)
 80034b4:	46bd      	mov	sp, r7
 80034b6:	b002      	add	sp, #8
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	46c0      	nop			; (mov r8, r8)
 80034bc:	40005c50 	.word	0x40005c50
 80034c0:	40006000 	.word	0x40006000

080034c4 <SetEPRxAddr>:
  * @param   bEpNum: Endpoint Number
  * @param   wAddr: new address.
  * @retval Endpoint address.
  */
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	0002      	movs	r2, r0
 80034cc:	1dfb      	adds	r3, r7, #7
 80034ce:	701a      	strb	r2, [r3, #0]
 80034d0:	1d3b      	adds	r3, r7, #4
 80034d2:	1c0a      	adds	r2, r1, #0
 80034d4:	801a      	strh	r2, [r3, #0]
  _SetEPRxAddr(bEpNum, wAddr);
 80034d6:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <SetEPRxAddr+0x40>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	041b      	lsls	r3, r3, #16
 80034dc:	0c1a      	lsrs	r2, r3, #16
 80034de:	1dfb      	adds	r3, r7, #7
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	18d3      	adds	r3, r2, r3
 80034e6:	4a08      	ldr	r2, [pc, #32]	; (8003508 <SetEPRxAddr+0x44>)
 80034e8:	4694      	mov	ip, r2
 80034ea:	4463      	add	r3, ip
 80034ec:	0019      	movs	r1, r3
 80034ee:	1d3b      	adds	r3, r7, #4
 80034f0:	881b      	ldrh	r3, [r3, #0]
 80034f2:	2201      	movs	r2, #1
 80034f4:	4393      	bics	r3, r2
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	800b      	strh	r3, [r1, #0]
}
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	46bd      	mov	sp, r7
 80034fe:	b002      	add	sp, #8
 8003500:	bd80      	pop	{r7, pc}
 8003502:	46c0      	nop			; (mov r8, r8)
 8003504:	40005c50 	.word	0x40005c50
 8003508:	40006004 	.word	0x40006004

0800350c <SetEPTxCount>:
  * @param   bEpNum: Endpoint Number
  * @param   wCount: new count value.
  * @retval Rx buffer address.
  */
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	0002      	movs	r2, r0
 8003514:	1dfb      	adds	r3, r7, #7
 8003516:	701a      	strb	r2, [r3, #0]
 8003518:	1d3b      	adds	r3, r7, #4
 800351a:	1c0a      	adds	r2, r1, #0
 800351c:	801a      	strh	r2, [r3, #0]
  _SetEPTxCount(bEpNum, wCount);
 800351e:	4b09      	ldr	r3, [pc, #36]	; (8003544 <SetEPTxCount+0x38>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	041b      	lsls	r3, r3, #16
 8003524:	0c1a      	lsrs	r2, r3, #16
 8003526:	1dfb      	adds	r3, r7, #7
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	18d3      	adds	r3, r2, r3
 800352e:	4a06      	ldr	r2, [pc, #24]	; (8003548 <SetEPTxCount+0x3c>)
 8003530:	4694      	mov	ip, r2
 8003532:	4463      	add	r3, ip
 8003534:	001a      	movs	r2, r3
 8003536:	1d3b      	adds	r3, r7, #4
 8003538:	881b      	ldrh	r3, [r3, #0]
 800353a:	8013      	strh	r3, [r2, #0]
}
 800353c:	46c0      	nop			; (mov r8, r8)
 800353e:	46bd      	mov	sp, r7
 8003540:	b002      	add	sp, #8
 8003542:	bd80      	pop	{r7, pc}
 8003544:	40005c50 	.word	0x40005c50
 8003548:	40006002 	.word	0x40006002

0800354c <SetEPRxCount>:
  * @param   bEpNum: Endpoint Number.
  * @param   wCount: the new register value.
  * @retval None
  */
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	0002      	movs	r2, r0
 8003554:	1dfb      	adds	r3, r7, #7
 8003556:	701a      	strb	r2, [r3, #0]
 8003558:	1d3b      	adds	r3, r7, #4
 800355a:	1c0a      	adds	r2, r1, #0
 800355c:	801a      	strh	r2, [r3, #0]
  _SetEPRxCount(bEpNum, wCount);
 800355e:	4b25      	ldr	r3, [pc, #148]	; (80035f4 <SetEPRxCount+0xa8>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	041b      	lsls	r3, r3, #16
 8003564:	0c1a      	lsrs	r2, r3, #16
 8003566:	1dfb      	adds	r3, r7, #7
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	18d3      	adds	r3, r2, r3
 800356e:	4a22      	ldr	r2, [pc, #136]	; (80035f8 <SetEPRxCount+0xac>)
 8003570:	4694      	mov	ip, r2
 8003572:	4463      	add	r3, ip
 8003574:	60bb      	str	r3, [r7, #8]
 8003576:	1d3b      	adds	r3, r7, #4
 8003578:	881b      	ldrh	r3, [r3, #0]
 800357a:	2b3e      	cmp	r3, #62	; 0x3e
 800357c:	d91d      	bls.n	80035ba <SetEPRxCount+0x6e>
 800357e:	230e      	movs	r3, #14
 8003580:	18fb      	adds	r3, r7, r3
 8003582:	1d3a      	adds	r2, r7, #4
 8003584:	8812      	ldrh	r2, [r2, #0]
 8003586:	0952      	lsrs	r2, r2, #5
 8003588:	801a      	strh	r2, [r3, #0]
 800358a:	1d3b      	adds	r3, r7, #4
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	221f      	movs	r2, #31
 8003590:	4013      	ands	r3, r2
 8003592:	d106      	bne.n	80035a2 <SetEPRxCount+0x56>
 8003594:	230e      	movs	r3, #14
 8003596:	18fb      	adds	r3, r7, r3
 8003598:	881a      	ldrh	r2, [r3, #0]
 800359a:	230e      	movs	r3, #14
 800359c:	18fb      	adds	r3, r7, r3
 800359e:	3a01      	subs	r2, #1
 80035a0:	801a      	strh	r2, [r3, #0]
 80035a2:	230e      	movs	r3, #14
 80035a4:	18fb      	adds	r3, r7, r3
 80035a6:	881b      	ldrh	r3, [r3, #0]
 80035a8:	029b      	lsls	r3, r3, #10
 80035aa:	b21b      	sxth	r3, r3
 80035ac:	4a13      	ldr	r2, [pc, #76]	; (80035fc <SetEPRxCount+0xb0>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	b21b      	sxth	r3, r3
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	801a      	strh	r2, [r3, #0]
}
 80035b8:	e018      	b.n	80035ec <SetEPRxCount+0xa0>
  * @param   wCount: the new register value.
  * @retval None
  */
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 80035ba:	230e      	movs	r3, #14
 80035bc:	18fb      	adds	r3, r7, r3
 80035be:	1d3a      	adds	r2, r7, #4
 80035c0:	8812      	ldrh	r2, [r2, #0]
 80035c2:	0852      	lsrs	r2, r2, #1
 80035c4:	801a      	strh	r2, [r3, #0]
 80035c6:	1d3b      	adds	r3, r7, #4
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	2201      	movs	r2, #1
 80035cc:	4013      	ands	r3, r2
 80035ce:	d006      	beq.n	80035de <SetEPRxCount+0x92>
 80035d0:	230e      	movs	r3, #14
 80035d2:	18fb      	adds	r3, r7, r3
 80035d4:	881a      	ldrh	r2, [r3, #0]
 80035d6:	230e      	movs	r3, #14
 80035d8:	18fb      	adds	r3, r7, r3
 80035da:	3201      	adds	r2, #1
 80035dc:	801a      	strh	r2, [r3, #0]
 80035de:	230e      	movs	r3, #14
 80035e0:	18fb      	adds	r3, r7, r3
 80035e2:	881b      	ldrh	r3, [r3, #0]
 80035e4:	029b      	lsls	r3, r3, #10
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	801a      	strh	r2, [r3, #0]
}
 80035ec:	46c0      	nop			; (mov r8, r8)
 80035ee:	46bd      	mov	sp, r7
 80035f0:	b004      	add	sp, #16
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	40005c50 	.word	0x40005c50
 80035f8:	40006006 	.word	0x40006006
 80035fc:	ffff8000 	.word	0xffff8000

08003600 <GetEPTxCount>:
  * @brief Get the Tx count.
  * @param   bEpNum: Endpoint Number.
  * @retval Tx count value.
  */
uint16_t GetEPTxCount(uint8_t bEpNum)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	0002      	movs	r2, r0
 8003608:	1dfb      	adds	r3, r7, #7
 800360a:	701a      	strb	r2, [r3, #0]
  return(_GetEPTxCount(bEpNum));
 800360c:	4b09      	ldr	r3, [pc, #36]	; (8003634 <GetEPTxCount+0x34>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	041b      	lsls	r3, r3, #16
 8003612:	0c1a      	lsrs	r2, r3, #16
 8003614:	1dfb      	adds	r3, r7, #7
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	18d3      	adds	r3, r2, r3
 800361c:	4a06      	ldr	r2, [pc, #24]	; (8003638 <GetEPTxCount+0x38>)
 800361e:	4694      	mov	ip, r2
 8003620:	4463      	add	r3, ip
 8003622:	881b      	ldrh	r3, [r3, #0]
 8003624:	059b      	lsls	r3, r3, #22
 8003626:	0d9b      	lsrs	r3, r3, #22
 8003628:	b29b      	uxth	r3, r3
}
 800362a:	0018      	movs	r0, r3
 800362c:	46bd      	mov	sp, r7
 800362e:	b002      	add	sp, #8
 8003630:	bd80      	pop	{r7, pc}
 8003632:	46c0      	nop			; (mov r8, r8)
 8003634:	40005c50 	.word	0x40005c50
 8003638:	40006002 	.word	0x40006002

0800363c <GetEPRxCount>:
  * @brief Get the Rx count.
  * @param   bEpNum: Endpoint Number.
  * @retval Rx count value.
  */
uint16_t GetEPRxCount(uint8_t bEpNum)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	0002      	movs	r2, r0
 8003644:	1dfb      	adds	r3, r7, #7
 8003646:	701a      	strb	r2, [r3, #0]
  return(_GetEPRxCount(bEpNum));
 8003648:	4b09      	ldr	r3, [pc, #36]	; (8003670 <GetEPRxCount+0x34>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	041b      	lsls	r3, r3, #16
 800364e:	0c1a      	lsrs	r2, r3, #16
 8003650:	1dfb      	adds	r3, r7, #7
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	18d3      	adds	r3, r2, r3
 8003658:	4a06      	ldr	r2, [pc, #24]	; (8003674 <GetEPRxCount+0x38>)
 800365a:	4694      	mov	ip, r2
 800365c:	4463      	add	r3, ip
 800365e:	881b      	ldrh	r3, [r3, #0]
 8003660:	059b      	lsls	r3, r3, #22
 8003662:	0d9b      	lsrs	r3, r3, #22
 8003664:	b29b      	uxth	r3, r3
}
 8003666:	0018      	movs	r0, r3
 8003668:	46bd      	mov	sp, r7
 800366a:	b002      	add	sp, #8
 800366c:	bd80      	pop	{r7, pc}
 800366e:	46c0      	nop			; (mov r8, r8)
 8003670:	40005c50 	.word	0x40005c50
 8003674:	40006006 	.word	0x40006006

08003678 <SetEPDblBuffAddr>:
  * @param   wBuf0Addr: new address of buffer 0.
  * @param   wBuf1Addr: new address of buffer 1.
  * @retval None
  */
void SetEPDblBuffAddr(uint8_t bEpNum, uint16_t wBuf0Addr, uint16_t wBuf1Addr)
{
 8003678:	b590      	push	{r4, r7, lr}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	0004      	movs	r4, r0
 8003680:	0008      	movs	r0, r1
 8003682:	0011      	movs	r1, r2
 8003684:	1dfb      	adds	r3, r7, #7
 8003686:	1c22      	adds	r2, r4, #0
 8003688:	701a      	strb	r2, [r3, #0]
 800368a:	1d3b      	adds	r3, r7, #4
 800368c:	1c02      	adds	r2, r0, #0
 800368e:	801a      	strh	r2, [r3, #0]
 8003690:	1cbb      	adds	r3, r7, #2
 8003692:	1c0a      	adds	r2, r1, #0
 8003694:	801a      	strh	r2, [r3, #0]
  _SetEPDblBuffAddr(bEpNum, wBuf0Addr, wBuf1Addr);
 8003696:	4b14      	ldr	r3, [pc, #80]	; (80036e8 <SetEPDblBuffAddr+0x70>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	041b      	lsls	r3, r3, #16
 800369c:	0c1a      	lsrs	r2, r3, #16
 800369e:	1dfb      	adds	r3, r7, #7
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	18d3      	adds	r3, r2, r3
 80036a6:	4a11      	ldr	r2, [pc, #68]	; (80036ec <SetEPDblBuffAddr+0x74>)
 80036a8:	4694      	mov	ip, r2
 80036aa:	4463      	add	r3, ip
 80036ac:	0019      	movs	r1, r3
 80036ae:	1d3b      	adds	r3, r7, #4
 80036b0:	881b      	ldrh	r3, [r3, #0]
 80036b2:	2201      	movs	r2, #1
 80036b4:	4393      	bics	r3, r2
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	800b      	strh	r3, [r1, #0]
 80036ba:	4b0b      	ldr	r3, [pc, #44]	; (80036e8 <SetEPDblBuffAddr+0x70>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	041b      	lsls	r3, r3, #16
 80036c0:	0c1a      	lsrs	r2, r3, #16
 80036c2:	1dfb      	adds	r3, r7, #7
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	18d3      	adds	r3, r2, r3
 80036ca:	4a09      	ldr	r2, [pc, #36]	; (80036f0 <SetEPDblBuffAddr+0x78>)
 80036cc:	4694      	mov	ip, r2
 80036ce:	4463      	add	r3, ip
 80036d0:	0019      	movs	r1, r3
 80036d2:	1cbb      	adds	r3, r7, #2
 80036d4:	881b      	ldrh	r3, [r3, #0]
 80036d6:	2201      	movs	r2, #1
 80036d8:	4393      	bics	r3, r2
 80036da:	b29b      	uxth	r3, r3
 80036dc:	800b      	strh	r3, [r1, #0]
}
 80036de:	46c0      	nop			; (mov r8, r8)
 80036e0:	46bd      	mov	sp, r7
 80036e2:	b003      	add	sp, #12
 80036e4:	bd90      	pop	{r4, r7, pc}
 80036e6:	46c0      	nop			; (mov r8, r8)
 80036e8:	40005c50 	.word	0x40005c50
 80036ec:	40006000 	.word	0x40006000
 80036f0:	40006004 	.word	0x40006004

080036f4 <SetEPDblBuffCount>:
  * @brief Set the number of bytes for a double Buffer
  * @param   bEpNum,bDir, wCount
  * @retval Address of the Buffer 1.
  */
void SetEPDblBuffCount(uint8_t bEpNum, uint8_t bDir, uint16_t wCount)
{
 80036f4:	b590      	push	{r4, r7, lr}
 80036f6:	b087      	sub	sp, #28
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	0004      	movs	r4, r0
 80036fc:	0008      	movs	r0, r1
 80036fe:	0011      	movs	r1, r2
 8003700:	1dfb      	adds	r3, r7, #7
 8003702:	1c22      	adds	r2, r4, #0
 8003704:	701a      	strb	r2, [r3, #0]
 8003706:	1dbb      	adds	r3, r7, #6
 8003708:	1c02      	adds	r2, r0, #0
 800370a:	701a      	strb	r2, [r3, #0]
 800370c:	1d3b      	adds	r3, r7, #4
 800370e:	1c0a      	adds	r2, r1, #0
 8003710:	801a      	strh	r2, [r3, #0]
  _SetEPDblBuffCount(bEpNum, bDir, wCount);
 8003712:	1dbb      	adds	r3, r7, #6
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d147      	bne.n	80037aa <SetEPDblBuffCount+0xb6>
 800371a:	4b5f      	ldr	r3, [pc, #380]	; (8003898 <SetEPDblBuffCount+0x1a4>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	041b      	lsls	r3, r3, #16
 8003720:	0c1a      	lsrs	r2, r3, #16
 8003722:	1dfb      	adds	r3, r7, #7
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	18d3      	adds	r3, r2, r3
 800372a:	4a5c      	ldr	r2, [pc, #368]	; (800389c <SetEPDblBuffCount+0x1a8>)
 800372c:	4694      	mov	ip, r2
 800372e:	4463      	add	r3, ip
 8003730:	613b      	str	r3, [r7, #16]
 8003732:	1d3b      	adds	r3, r7, #4
 8003734:	881b      	ldrh	r3, [r3, #0]
 8003736:	2b3e      	cmp	r3, #62	; 0x3e
 8003738:	d91d      	bls.n	8003776 <SetEPDblBuffCount+0x82>
 800373a:	2316      	movs	r3, #22
 800373c:	18fb      	adds	r3, r7, r3
 800373e:	1d3a      	adds	r2, r7, #4
 8003740:	8812      	ldrh	r2, [r2, #0]
 8003742:	0952      	lsrs	r2, r2, #5
 8003744:	801a      	strh	r2, [r3, #0]
 8003746:	1d3b      	adds	r3, r7, #4
 8003748:	881b      	ldrh	r3, [r3, #0]
 800374a:	221f      	movs	r2, #31
 800374c:	4013      	ands	r3, r2
 800374e:	d106      	bne.n	800375e <SetEPDblBuffCount+0x6a>
 8003750:	2316      	movs	r3, #22
 8003752:	18fb      	adds	r3, r7, r3
 8003754:	881a      	ldrh	r2, [r3, #0]
 8003756:	2316      	movs	r3, #22
 8003758:	18fb      	adds	r3, r7, r3
 800375a:	3a01      	subs	r2, #1
 800375c:	801a      	strh	r2, [r3, #0]
 800375e:	2316      	movs	r3, #22
 8003760:	18fb      	adds	r3, r7, r3
 8003762:	881b      	ldrh	r3, [r3, #0]
 8003764:	029b      	lsls	r3, r3, #10
 8003766:	b21b      	sxth	r3, r3
 8003768:	4a4d      	ldr	r2, [pc, #308]	; (80038a0 <SetEPDblBuffCount+0x1ac>)
 800376a:	4313      	orrs	r3, r2
 800376c:	b21b      	sxth	r3, r3
 800376e:	b29a      	uxth	r2, r3
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	801a      	strh	r2, [r3, #0]
 8003774:	e02c      	b.n	80037d0 <SetEPDblBuffCount+0xdc>
 8003776:	2316      	movs	r3, #22
 8003778:	18fb      	adds	r3, r7, r3
 800377a:	1d3a      	adds	r2, r7, #4
 800377c:	8812      	ldrh	r2, [r2, #0]
 800377e:	0852      	lsrs	r2, r2, #1
 8003780:	801a      	strh	r2, [r3, #0]
 8003782:	1d3b      	adds	r3, r7, #4
 8003784:	881b      	ldrh	r3, [r3, #0]
 8003786:	2201      	movs	r2, #1
 8003788:	4013      	ands	r3, r2
 800378a:	d006      	beq.n	800379a <SetEPDblBuffCount+0xa6>
 800378c:	2316      	movs	r3, #22
 800378e:	18fb      	adds	r3, r7, r3
 8003790:	881a      	ldrh	r2, [r3, #0]
 8003792:	2316      	movs	r3, #22
 8003794:	18fb      	adds	r3, r7, r3
 8003796:	3201      	adds	r2, #1
 8003798:	801a      	strh	r2, [r3, #0]
 800379a:	2316      	movs	r3, #22
 800379c:	18fb      	adds	r3, r7, r3
 800379e:	881b      	ldrh	r3, [r3, #0]
 80037a0:	029b      	lsls	r3, r3, #10
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	801a      	strh	r2, [r3, #0]
 80037a8:	e012      	b.n	80037d0 <SetEPDblBuffCount+0xdc>
 80037aa:	1dbb      	adds	r3, r7, #6
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d10e      	bne.n	80037d0 <SetEPDblBuffCount+0xdc>
 80037b2:	4b39      	ldr	r3, [pc, #228]	; (8003898 <SetEPDblBuffCount+0x1a4>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	041b      	lsls	r3, r3, #16
 80037b8:	0c1a      	lsrs	r2, r3, #16
 80037ba:	1dfb      	adds	r3, r7, #7
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	18d3      	adds	r3, r2, r3
 80037c2:	4a36      	ldr	r2, [pc, #216]	; (800389c <SetEPDblBuffCount+0x1a8>)
 80037c4:	4694      	mov	ip, r2
 80037c6:	4463      	add	r3, ip
 80037c8:	001a      	movs	r2, r3
 80037ca:	1d3b      	adds	r3, r7, #4
 80037cc:	881b      	ldrh	r3, [r3, #0]
 80037ce:	8013      	strh	r3, [r2, #0]
 80037d0:	1dbb      	adds	r3, r7, #6
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d147      	bne.n	8003868 <SetEPDblBuffCount+0x174>
 80037d8:	4b2f      	ldr	r3, [pc, #188]	; (8003898 <SetEPDblBuffCount+0x1a4>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	041b      	lsls	r3, r3, #16
 80037de:	0c1a      	lsrs	r2, r3, #16
 80037e0:	1dfb      	adds	r3, r7, #7
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	18d3      	adds	r3, r2, r3
 80037e8:	4a2e      	ldr	r2, [pc, #184]	; (80038a4 <SetEPDblBuffCount+0x1b0>)
 80037ea:	4694      	mov	ip, r2
 80037ec:	4463      	add	r3, ip
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	1d3b      	adds	r3, r7, #4
 80037f2:	881b      	ldrh	r3, [r3, #0]
 80037f4:	2b3e      	cmp	r3, #62	; 0x3e
 80037f6:	d91d      	bls.n	8003834 <SetEPDblBuffCount+0x140>
 80037f8:	2314      	movs	r3, #20
 80037fa:	18fb      	adds	r3, r7, r3
 80037fc:	1d3a      	adds	r2, r7, #4
 80037fe:	8812      	ldrh	r2, [r2, #0]
 8003800:	0952      	lsrs	r2, r2, #5
 8003802:	801a      	strh	r2, [r3, #0]
 8003804:	1d3b      	adds	r3, r7, #4
 8003806:	881b      	ldrh	r3, [r3, #0]
 8003808:	221f      	movs	r2, #31
 800380a:	4013      	ands	r3, r2
 800380c:	d106      	bne.n	800381c <SetEPDblBuffCount+0x128>
 800380e:	2314      	movs	r3, #20
 8003810:	18fb      	adds	r3, r7, r3
 8003812:	881a      	ldrh	r2, [r3, #0]
 8003814:	2314      	movs	r3, #20
 8003816:	18fb      	adds	r3, r7, r3
 8003818:	3a01      	subs	r2, #1
 800381a:	801a      	strh	r2, [r3, #0]
 800381c:	2314      	movs	r3, #20
 800381e:	18fb      	adds	r3, r7, r3
 8003820:	881b      	ldrh	r3, [r3, #0]
 8003822:	029b      	lsls	r3, r3, #10
 8003824:	b21b      	sxth	r3, r3
 8003826:	4a1e      	ldr	r2, [pc, #120]	; (80038a0 <SetEPDblBuffCount+0x1ac>)
 8003828:	4313      	orrs	r3, r2
 800382a:	b21b      	sxth	r3, r3
 800382c:	b29a      	uxth	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	801a      	strh	r2, [r3, #0]
}
 8003832:	e02c      	b.n	800388e <SetEPDblBuffCount+0x19a>
  * @param   bEpNum,bDir, wCount
  * @retval Address of the Buffer 1.
  */
void SetEPDblBuffCount(uint8_t bEpNum, uint8_t bDir, uint16_t wCount)
{
  _SetEPDblBuffCount(bEpNum, bDir, wCount);
 8003834:	2314      	movs	r3, #20
 8003836:	18fb      	adds	r3, r7, r3
 8003838:	1d3a      	adds	r2, r7, #4
 800383a:	8812      	ldrh	r2, [r2, #0]
 800383c:	0852      	lsrs	r2, r2, #1
 800383e:	801a      	strh	r2, [r3, #0]
 8003840:	1d3b      	adds	r3, r7, #4
 8003842:	881b      	ldrh	r3, [r3, #0]
 8003844:	2201      	movs	r2, #1
 8003846:	4013      	ands	r3, r2
 8003848:	d006      	beq.n	8003858 <SetEPDblBuffCount+0x164>
 800384a:	2314      	movs	r3, #20
 800384c:	18fb      	adds	r3, r7, r3
 800384e:	881a      	ldrh	r2, [r3, #0]
 8003850:	2314      	movs	r3, #20
 8003852:	18fb      	adds	r3, r7, r3
 8003854:	3201      	adds	r2, #1
 8003856:	801a      	strh	r2, [r3, #0]
 8003858:	2314      	movs	r3, #20
 800385a:	18fb      	adds	r3, r7, r3
 800385c:	881b      	ldrh	r3, [r3, #0]
 800385e:	029b      	lsls	r3, r3, #10
 8003860:	b29a      	uxth	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	801a      	strh	r2, [r3, #0]
}
 8003866:	e012      	b.n	800388e <SetEPDblBuffCount+0x19a>
  * @param   bEpNum,bDir, wCount
  * @retval Address of the Buffer 1.
  */
void SetEPDblBuffCount(uint8_t bEpNum, uint8_t bDir, uint16_t wCount)
{
  _SetEPDblBuffCount(bEpNum, bDir, wCount);
 8003868:	1dbb      	adds	r3, r7, #6
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d10e      	bne.n	800388e <SetEPDblBuffCount+0x19a>
 8003870:	4b09      	ldr	r3, [pc, #36]	; (8003898 <SetEPDblBuffCount+0x1a4>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	041b      	lsls	r3, r3, #16
 8003876:	0c1a      	lsrs	r2, r3, #16
 8003878:	1dfb      	adds	r3, r7, #7
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	18d3      	adds	r3, r2, r3
 8003880:	4a08      	ldr	r2, [pc, #32]	; (80038a4 <SetEPDblBuffCount+0x1b0>)
 8003882:	4694      	mov	ip, r2
 8003884:	4463      	add	r3, ip
 8003886:	001a      	movs	r2, r3
 8003888:	1d3b      	adds	r3, r7, #4
 800388a:	881b      	ldrh	r3, [r3, #0]
 800388c:	8013      	strh	r3, [r2, #0]
}
 800388e:	46c0      	nop			; (mov r8, r8)
 8003890:	46bd      	mov	sp, r7
 8003892:	b007      	add	sp, #28
 8003894:	bd90      	pop	{r4, r7, pc}
 8003896:	46c0      	nop			; (mov r8, r8)
 8003898:	40005c50 	.word	0x40005c50
 800389c:	40006002 	.word	0x40006002
 80038a0:	ffff8000 	.word	0xffff8000
 80038a4:	40006006 	.word	0x40006006

080038a8 <GetEPDblBuf0Count>:
  *         Buffer endpoint.
  * @param   bEpNum: Endpoint Number.
  * @retval Endpoint Buffer 0 count
  */
uint16_t GetEPDblBuf0Count(uint8_t bEpNum)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	0002      	movs	r2, r0
 80038b0:	1dfb      	adds	r3, r7, #7
 80038b2:	701a      	strb	r2, [r3, #0]
  return(_GetEPDblBuf0Count(bEpNum));
 80038b4:	4b09      	ldr	r3, [pc, #36]	; (80038dc <GetEPDblBuf0Count+0x34>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	041b      	lsls	r3, r3, #16
 80038ba:	0c1a      	lsrs	r2, r3, #16
 80038bc:	1dfb      	adds	r3, r7, #7
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	18d3      	adds	r3, r2, r3
 80038c4:	4a06      	ldr	r2, [pc, #24]	; (80038e0 <GetEPDblBuf0Count+0x38>)
 80038c6:	4694      	mov	ip, r2
 80038c8:	4463      	add	r3, ip
 80038ca:	881b      	ldrh	r3, [r3, #0]
 80038cc:	059b      	lsls	r3, r3, #22
 80038ce:	0d9b      	lsrs	r3, r3, #22
 80038d0:	b29b      	uxth	r3, r3
}
 80038d2:	0018      	movs	r0, r3
 80038d4:	46bd      	mov	sp, r7
 80038d6:	b002      	add	sp, #8
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	46c0      	nop			; (mov r8, r8)
 80038dc:	40005c50 	.word	0x40005c50
 80038e0:	40006002 	.word	0x40006002

080038e4 <GetEPDblBuf1Count>:
  * @brief Returns the number of data received in the buffer 1 of a double
  * @param   bEpNum: Endpoint Number.
  * @retval Endpoint Buffer 1 count
  */
uint16_t GetEPDblBuf1Count(uint8_t bEpNum)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	0002      	movs	r2, r0
 80038ec:	1dfb      	adds	r3, r7, #7
 80038ee:	701a      	strb	r2, [r3, #0]
  return(_GetEPDblBuf1Count(bEpNum));
 80038f0:	4b09      	ldr	r3, [pc, #36]	; (8003918 <GetEPDblBuf1Count+0x34>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	041b      	lsls	r3, r3, #16
 80038f6:	0c1a      	lsrs	r2, r3, #16
 80038f8:	1dfb      	adds	r3, r7, #7
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	18d3      	adds	r3, r2, r3
 8003900:	4a06      	ldr	r2, [pc, #24]	; (800391c <GetEPDblBuf1Count+0x38>)
 8003902:	4694      	mov	ip, r2
 8003904:	4463      	add	r3, ip
 8003906:	881b      	ldrh	r3, [r3, #0]
 8003908:	059b      	lsls	r3, r3, #22
 800390a:	0d9b      	lsrs	r3, r3, #22
 800390c:	b29b      	uxth	r3, r3
}
 800390e:	0018      	movs	r0, r3
 8003910:	46bd      	mov	sp, r7
 8003912:	b002      	add	sp, #8
 8003914:	bd80      	pop	{r7, pc}
 8003916:	46c0      	nop			; (mov r8, r8)
 8003918:	40005c50 	.word	0x40005c50
 800391c:	40006006 	.word	0x40006006

08003920 <FreeUserBuffer>:
          toggles bit SW_BUF in the double buffered endpoint register
  * @param   bEpNum, bDir
  * @retval None
  */
void FreeUserBuffer(uint8_t bEpNum, uint8_t bDir)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	0002      	movs	r2, r0
 8003928:	1dfb      	adds	r3, r7, #7
 800392a:	701a      	strb	r2, [r3, #0]
 800392c:	1dbb      	adds	r3, r7, #6
 800392e:	1c0a      	adds	r2, r1, #0
 8003930:	701a      	strb	r2, [r3, #0]
  if (bDir == EP_DBUF_OUT)
 8003932:	1dbb      	adds	r3, r7, #6
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d113      	bne.n	8003962 <FreeUserBuffer+0x42>
  { /* OUT double buffered endpoint */
    _ToggleDTOG_TX(bEpNum);
 800393a:	1dfb      	adds	r3, r7, #7
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4a15      	ldr	r2, [pc, #84]	; (8003998 <FreeUserBuffer+0x78>)
 8003942:	4694      	mov	ip, r2
 8003944:	4463      	add	r3, ip
 8003946:	1dfa      	adds	r2, r7, #7
 8003948:	7812      	ldrb	r2, [r2, #0]
 800394a:	0092      	lsls	r2, r2, #2
 800394c:	4912      	ldr	r1, [pc, #72]	; (8003998 <FreeUserBuffer+0x78>)
 800394e:	468c      	mov	ip, r1
 8003950:	4462      	add	r2, ip
 8003952:	6812      	ldr	r2, [r2, #0]
 8003954:	0011      	movs	r1, r2
 8003956:	4a11      	ldr	r2, [pc, #68]	; (800399c <FreeUserBuffer+0x7c>)
 8003958:	400a      	ands	r2, r1
 800395a:	4911      	ldr	r1, [pc, #68]	; (80039a0 <FreeUserBuffer+0x80>)
 800395c:	430a      	orrs	r2, r1
 800395e:	601a      	str	r2, [r3, #0]
  }
  else if (bDir == EP_DBUF_IN)
  { /* IN double buffered endpoint */
    _ToggleDTOG_RX(bEpNum);
  }
}
 8003960:	e016      	b.n	8003990 <FreeUserBuffer+0x70>
{
  if (bDir == EP_DBUF_OUT)
  { /* OUT double buffered endpoint */
    _ToggleDTOG_TX(bEpNum);
  }
  else if (bDir == EP_DBUF_IN)
 8003962:	1dbb      	adds	r3, r7, #6
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d112      	bne.n	8003990 <FreeUserBuffer+0x70>
  { /* IN double buffered endpoint */
    _ToggleDTOG_RX(bEpNum);
 800396a:	1dfb      	adds	r3, r7, #7
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	4a09      	ldr	r2, [pc, #36]	; (8003998 <FreeUserBuffer+0x78>)
 8003972:	4694      	mov	ip, r2
 8003974:	4463      	add	r3, ip
 8003976:	1dfa      	adds	r2, r7, #7
 8003978:	7812      	ldrb	r2, [r2, #0]
 800397a:	0092      	lsls	r2, r2, #2
 800397c:	4906      	ldr	r1, [pc, #24]	; (8003998 <FreeUserBuffer+0x78>)
 800397e:	468c      	mov	ip, r1
 8003980:	4462      	add	r2, ip
 8003982:	6812      	ldr	r2, [r2, #0]
 8003984:	0011      	movs	r1, r2
 8003986:	4a05      	ldr	r2, [pc, #20]	; (800399c <FreeUserBuffer+0x7c>)
 8003988:	400a      	ands	r2, r1
 800398a:	4906      	ldr	r1, [pc, #24]	; (80039a4 <FreeUserBuffer+0x84>)
 800398c:	430a      	orrs	r2, r1
 800398e:	601a      	str	r2, [r3, #0]
  }
}
 8003990:	46c0      	nop			; (mov r8, r8)
 8003992:	46bd      	mov	sp, r7
 8003994:	b002      	add	sp, #8
 8003996:	bd80      	pop	{r7, pc}
 8003998:	40005c00 	.word	0x40005c00
 800399c:	00000f0f 	.word	0x00000f0f
 80039a0:	000080c0 	.word	0x000080c0
 80039a4:	0000c080 	.word	0x0000c080

080039a8 <UserToPMABufferCopy>:
  * @param   wPMABufAddr: address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	0008      	movs	r0, r1
 80039b2:	0011      	movs	r1, r2
 80039b4:	1cbb      	adds	r3, r7, #2
 80039b6:	1c02      	adds	r2, r0, #0
 80039b8:	801a      	strh	r2, [r3, #0]
 80039ba:	003b      	movs	r3, r7
 80039bc:	1c0a      	adds	r2, r1, #0
 80039be:	801a      	strh	r2, [r3, #0]
  uint32_t n = (wNBytes + 1) >> 1; 
 80039c0:	003b      	movs	r3, r7
 80039c2:	881b      	ldrh	r3, [r3, #0]
 80039c4:	3301      	adds	r3, #1
 80039c6:	105b      	asrs	r3, r3, #1
 80039c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint16_t temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr + PMAAddr);
 80039ca:	1cbb      	adds	r3, r7, #2
 80039cc:	881b      	ldrh	r3, [r3, #0]
 80039ce:	4a18      	ldr	r2, [pc, #96]	; (8003a30 <UserToPMABufferCopy+0x88>)
 80039d0:	4694      	mov	ip, r2
 80039d2:	4463      	add	r3, ip
 80039d4:	613b      	str	r3, [r7, #16]
  
  for (i = n; i != 0; i--)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	617b      	str	r3, [r7, #20]
 80039da:	e021      	b.n	8003a20 <UserToPMABufferCopy+0x78>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	781a      	ldrb	r2, [r3, #0]
 80039e0:	230a      	movs	r3, #10
 80039e2:	18fb      	adds	r3, r7, r3
 80039e4:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	3301      	adds	r3, #1
 80039ea:	607b      	str	r3, [r7, #4]
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	021b      	lsls	r3, r3, #8
 80039f2:	b21a      	sxth	r2, r3
 80039f4:	230a      	movs	r3, #10
 80039f6:	18fb      	adds	r3, r7, r3
 80039f8:	2100      	movs	r1, #0
 80039fa:	5e5b      	ldrsh	r3, [r3, r1]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	b21a      	sxth	r2, r3
 8003a00:	2308      	movs	r3, #8
 8003a02:	18fb      	adds	r3, r7, r3
 8003a04:	801a      	strh	r2, [r3, #0]
    *pdwVal++ = temp2;
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1c9a      	adds	r2, r3, #2
 8003a0a:	613a      	str	r2, [r7, #16]
 8003a0c:	2208      	movs	r2, #8
 8003a0e:	18ba      	adds	r2, r7, r2
 8003a10:	8812      	ldrh	r2, [r2, #0]
 8003a12:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3301      	adds	r3, #1
 8003a18:	607b      	str	r3, [r7, #4]
  uint32_t i;
  uint16_t temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr + PMAAddr);
  
  for (i = n; i != 0; i--)
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	617b      	str	r3, [r7, #20]
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1da      	bne.n	80039dc <UserToPMABufferCopy+0x34>
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pbUsrBuf++;
  }
}
 8003a26:	46c0      	nop			; (mov r8, r8)
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	b006      	add	sp, #24
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	40006000 	.word	0x40006000

08003a34 <PMAToUserBufferCopy>:
  * @param   wPMABufAddr: address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	0008      	movs	r0, r1
 8003a3e:	0011      	movs	r1, r2
 8003a40:	1cbb      	adds	r3, r7, #2
 8003a42:	1c02      	adds	r2, r0, #0
 8003a44:	801a      	strh	r2, [r3, #0]
 8003a46:	003b      	movs	r3, r7
 8003a48:	1c0a      	adds	r2, r1, #0
 8003a4a:	801a      	strh	r2, [r3, #0]
  uint32_t n = (wNBytes + 1) >> 1;
 8003a4c:	003b      	movs	r3, r7
 8003a4e:	881b      	ldrh	r3, [r3, #0]
 8003a50:	3301      	adds	r3, #1
 8003a52:	105b      	asrs	r3, r3, #1
 8003a54:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr + PMAAddr);
 8003a56:	1cbb      	adds	r3, r7, #2
 8003a58:	881b      	ldrh	r3, [r3, #0]
 8003a5a:	4a0e      	ldr	r2, [pc, #56]	; (8003a94 <PMAToUserBufferCopy+0x60>)
 8003a5c:	4694      	mov	ip, r2
 8003a5e:	4463      	add	r3, ip
 8003a60:	613b      	str	r3, [r7, #16]
  for (i = n; i != 0; i--)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	617b      	str	r3, [r7, #20]
 8003a66:	e00d      	b.n	8003a84 <PMAToUserBufferCopy+0x50>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	1c5a      	adds	r2, r3, #1
 8003a6c:	607a      	str	r2, [r7, #4]
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	1c91      	adds	r1, r2, #2
 8003a72:	6139      	str	r1, [r7, #16]
 8003a74:	8812      	ldrh	r2, [r2, #0]
 8003a76:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	607b      	str	r3, [r7, #4]
{
  uint32_t n = (wNBytes + 1) >> 1;
  uint32_t i;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr + PMAAddr);
  for (i = n; i != 0; i--)
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	3b01      	subs	r3, #1
 8003a82:	617b      	str	r3, [r7, #20]
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1ee      	bne.n	8003a68 <PMAToUserBufferCopy+0x34>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 8003a8a:	46c0      	nop			; (mov r8, r8)
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	b006      	add	sp, #24
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	40006000 	.word	0x40006000

08003a98 <RCC_USBCLKConfig>:
  *             @arg RCC_USBCLK_HSI48: USB clock = HSI48
  *             @arg RCC_USBCLK_PLLCLK: USB clock = PLL clock
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLK)
{ 
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK(RCC_USBCLK));

  /* Clear USBSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_USBSW;
 8003aa0:	4b07      	ldr	r3, [pc, #28]	; (8003ac0 <RCC_USBCLKConfig+0x28>)
 8003aa2:	4a07      	ldr	r2, [pc, #28]	; (8003ac0 <RCC_USBCLKConfig+0x28>)
 8003aa4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003aa6:	2180      	movs	r1, #128	; 0x80
 8003aa8:	438a      	bics	r2, r1
 8003aaa:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set USBSW bits according to RCC_USBCLK value */
  RCC->CFGR3 |= RCC_USBCLK;
 8003aac:	4b04      	ldr	r3, [pc, #16]	; (8003ac0 <RCC_USBCLKConfig+0x28>)
 8003aae:	4a04      	ldr	r2, [pc, #16]	; (8003ac0 <RCC_USBCLKConfig+0x28>)
 8003ab0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003ab8:	46c0      	nop			; (mov r8, r8)
 8003aba:	46bd      	mov	sp, r7
 8003abc:	b002      	add	sp, #8
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	40021000 	.word	0x40021000

08003ac4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	000a      	movs	r2, r1
 8003ace:	1cfb      	adds	r3, r7, #3
 8003ad0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003ad2:	1cfb      	adds	r3, r7, #3
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d006      	beq.n	8003ae8 <RCC_APB2PeriphClockCmd+0x24>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8003ada:	4b09      	ldr	r3, [pc, #36]	; (8003b00 <RCC_APB2PeriphClockCmd+0x3c>)
 8003adc:	4a08      	ldr	r2, [pc, #32]	; (8003b00 <RCC_APB2PeriphClockCmd+0x3c>)
 8003ade:	6991      	ldr	r1, [r2, #24]
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8003ae6:	e006      	b.n	8003af6 <RCC_APB2PeriphClockCmd+0x32>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8003ae8:	4b05      	ldr	r3, [pc, #20]	; (8003b00 <RCC_APB2PeriphClockCmd+0x3c>)
 8003aea:	4a05      	ldr	r2, [pc, #20]	; (8003b00 <RCC_APB2PeriphClockCmd+0x3c>)
 8003aec:	6992      	ldr	r2, [r2, #24]
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	43c9      	mvns	r1, r1
 8003af2:	400a      	ands	r2, r1
 8003af4:	619a      	str	r2, [r3, #24]
  }
}
 8003af6:	46c0      	nop			; (mov r8, r8)
 8003af8:	46bd      	mov	sp, r7
 8003afa:	b002      	add	sp, #8
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	46c0      	nop			; (mov r8, r8)
 8003b00:	40021000 	.word	0x40021000

08003b04 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	000a      	movs	r2, r1
 8003b0e:	1cfb      	adds	r3, r7, #3
 8003b10:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003b12:	1cfb      	adds	r3, r7, #3
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d006      	beq.n	8003b28 <RCC_APB1PeriphClockCmd+0x24>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8003b1a:	4b09      	ldr	r3, [pc, #36]	; (8003b40 <RCC_APB1PeriphClockCmd+0x3c>)
 8003b1c:	4a08      	ldr	r2, [pc, #32]	; (8003b40 <RCC_APB1PeriphClockCmd+0x3c>)
 8003b1e:	69d1      	ldr	r1, [r2, #28]
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	61da      	str	r2, [r3, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8003b26:	e006      	b.n	8003b36 <RCC_APB1PeriphClockCmd+0x32>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8003b28:	4b05      	ldr	r3, [pc, #20]	; (8003b40 <RCC_APB1PeriphClockCmd+0x3c>)
 8003b2a:	4a05      	ldr	r2, [pc, #20]	; (8003b40 <RCC_APB1PeriphClockCmd+0x3c>)
 8003b2c:	69d2      	ldr	r2, [r2, #28]
 8003b2e:	6879      	ldr	r1, [r7, #4]
 8003b30:	43c9      	mvns	r1, r1
 8003b32:	400a      	ands	r2, r1
 8003b34:	61da      	str	r2, [r3, #28]
  }
}
 8003b36:	46c0      	nop			; (mov r8, r8)
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	b002      	add	sp, #8
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	46c0      	nop			; (mov r8, r8)
 8003b40:	40021000 	.word	0x40021000

08003b44 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	789b      	ldrb	r3, [r3, #2]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d039      	beq.n	8003bcc <NVIC_Init+0x88>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 8003b58:	4a24      	ldr	r2, [pc, #144]	; (8003bec <NVIC_Init+0xa8>)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	089b      	lsrs	r3, r3, #2
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	33c0      	adds	r3, #192	; 0xc0
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	589b      	ldr	r3, [r3, r2]
 8003b68:	60fb      	str	r3, [r7, #12]
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	001a      	movs	r2, r3
 8003b70:	2303      	movs	r3, #3
 8003b72:	4013      	ands	r3, r2
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	22ff      	movs	r2, #255	; 0xff
 8003b78:	409a      	lsls	r2, r3
 8003b7a:	0013      	movs	r3, r2
 8003b7c:	43da      	mvns	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	4013      	ands	r3, r2
 8003b82:	60fb      	str	r3, [r7, #12]
    tmppriority |= (uint32_t)((((uint32_t)NVIC_InitStruct->NVIC_IRQChannelPriority << 6) & 0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8));    
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	785b      	ldrb	r3, [r3, #1]
 8003b88:	019b      	lsls	r3, r3, #6
 8003b8a:	22ff      	movs	r2, #255	; 0xff
 8003b8c:	401a      	ands	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	0019      	movs	r1, r3
 8003b94:	2303      	movs	r3, #3
 8003b96:	400b      	ands	r3, r1
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	409a      	lsls	r2, r3
 8003b9c:	0013      	movs	r3, r2
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	60fb      	str	r3, [r7, #12]
    
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02] = tmppriority;
 8003ba4:	4911      	ldr	r1, [pc, #68]	; (8003bec <NVIC_Init+0xa8>)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	089b      	lsrs	r3, r3, #2
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	33c0      	adds	r3, #192	; 0xc0
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	505a      	str	r2, [r3, r1]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003bb6:	4b0d      	ldr	r3, [pc, #52]	; (8003bec <NVIC_Init+0xa8>)
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	7812      	ldrb	r2, [r2, #0]
 8003bbc:	0011      	movs	r1, r2
 8003bbe:	221f      	movs	r2, #31
 8003bc0:	400a      	ands	r2, r1
 8003bc2:	2101      	movs	r1, #1
 8003bc4:	4091      	lsls	r1, r2
 8003bc6:	000a      	movs	r2, r1
 8003bc8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8003bca:	e00a      	b.n	8003be2 <NVIC_Init+0x9e>
    NVIC->ISER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003bcc:	4907      	ldr	r1, [pc, #28]	; (8003bec <NVIC_Init+0xa8>)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	001a      	movs	r2, r3
 8003bd4:	231f      	movs	r3, #31
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	2201      	movs	r2, #1
 8003bda:	409a      	lsls	r2, r3
 8003bdc:	0013      	movs	r3, r2
 8003bde:	2280      	movs	r2, #128	; 0x80
 8003be0:	508b      	str	r3, [r1, r2]
  }
}
 8003be2:	46c0      	nop			; (mov r8, r8)
 8003be4:	46bd      	mov	sp, r7
 8003be6:	b004      	add	sp, #16
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	46c0      	nop			; (mov r8, r8)
 8003bec:	e000e100 	.word	0xe000e100

08003bf0 <SysTick_CLKSourceConfig>:
  *            @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *            @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d106      	bne.n	8003c0c <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8003bfe:	4b08      	ldr	r3, [pc, #32]	; (8003c20 <SysTick_CLKSourceConfig+0x30>)
 8003c00:	4a07      	ldr	r2, [pc, #28]	; (8003c20 <SysTick_CLKSourceConfig+0x30>)
 8003c02:	6812      	ldr	r2, [r2, #0]
 8003c04:	2104      	movs	r1, #4
 8003c06:	430a      	orrs	r2, r1
 8003c08:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
  }
}
 8003c0a:	e005      	b.n	8003c18 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8003c0c:	4b04      	ldr	r3, [pc, #16]	; (8003c20 <SysTick_CLKSourceConfig+0x30>)
 8003c0e:	4a04      	ldr	r2, [pc, #16]	; (8003c20 <SysTick_CLKSourceConfig+0x30>)
 8003c10:	6812      	ldr	r2, [r2, #0]
 8003c12:	2104      	movs	r1, #4
 8003c14:	438a      	bics	r2, r1
 8003c16:	601a      	str	r2, [r3, #0]
  }
}
 8003c18:	46c0      	nop			; (mov r8, r8)
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	b002      	add	sp, #8
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	e000e010 	.word	0xe000e010

08003c24 <CRS_FrequencyErrorCounterCmd>:
  * @param  NewState: new state of the frequency error counter.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRS_FrequencyErrorCounterCmd(FunctionalState NewState)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	0002      	movs	r2, r0
 8003c2c:	1dfb      	adds	r3, r7, #7
 8003c2e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003c30:	1dfb      	adds	r3, r7, #7
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d006      	beq.n	8003c46 <CRS_FrequencyErrorCounterCmd+0x22>
  {
     CRS->CR |= CRS_CR_CEN;
 8003c38:	4b08      	ldr	r3, [pc, #32]	; (8003c5c <CRS_FrequencyErrorCounterCmd+0x38>)
 8003c3a:	4a08      	ldr	r2, [pc, #32]	; (8003c5c <CRS_FrequencyErrorCounterCmd+0x38>)
 8003c3c:	6812      	ldr	r2, [r2, #0]
 8003c3e:	2120      	movs	r1, #32
 8003c40:	430a      	orrs	r2, r1
 8003c42:	601a      	str	r2, [r3, #0]
  }
  else
  {
    CRS->CR &= ~CRS_CR_CEN;
  }
}
 8003c44:	e005      	b.n	8003c52 <CRS_FrequencyErrorCounterCmd+0x2e>
  {
     CRS->CR |= CRS_CR_CEN;
  }
  else
  {
    CRS->CR &= ~CRS_CR_CEN;
 8003c46:	4b05      	ldr	r3, [pc, #20]	; (8003c5c <CRS_FrequencyErrorCounterCmd+0x38>)
 8003c48:	4a04      	ldr	r2, [pc, #16]	; (8003c5c <CRS_FrequencyErrorCounterCmd+0x38>)
 8003c4a:	6812      	ldr	r2, [r2, #0]
 8003c4c:	2120      	movs	r1, #32
 8003c4e:	438a      	bics	r2, r1
 8003c50:	601a      	str	r2, [r3, #0]
  }
}
 8003c52:	46c0      	nop			; (mov r8, r8)
 8003c54:	46bd      	mov	sp, r7
 8003c56:	b002      	add	sp, #8
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	46c0      	nop			; (mov r8, r8)
 8003c5c:	40006c00 	.word	0x40006c00

08003c60 <CRS_AutomaticCalibrationCmd>:
  * @param  NewState: new state of the automatic trimming.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRS_AutomaticCalibrationCmd(FunctionalState NewState)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	0002      	movs	r2, r0
 8003c68:	1dfb      	adds	r3, r7, #7
 8003c6a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003c6c:	1dfb      	adds	r3, r7, #7
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d006      	beq.n	8003c82 <CRS_AutomaticCalibrationCmd+0x22>
  {
    CRS->CR |= CRS_CR_AUTOTRIMEN;
 8003c74:	4b08      	ldr	r3, [pc, #32]	; (8003c98 <CRS_AutomaticCalibrationCmd+0x38>)
 8003c76:	4a08      	ldr	r2, [pc, #32]	; (8003c98 <CRS_AutomaticCalibrationCmd+0x38>)
 8003c78:	6812      	ldr	r2, [r2, #0]
 8003c7a:	2140      	movs	r1, #64	; 0x40
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	601a      	str	r2, [r3, #0]
  }
else
  {
    CRS->CR &= ~CRS_CR_AUTOTRIMEN;
  }
}
 8003c80:	e005      	b.n	8003c8e <CRS_AutomaticCalibrationCmd+0x2e>
  {
    CRS->CR |= CRS_CR_AUTOTRIMEN;
  }
else
  {
    CRS->CR &= ~CRS_CR_AUTOTRIMEN;
 8003c82:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <CRS_AutomaticCalibrationCmd+0x38>)
 8003c84:	4a04      	ldr	r2, [pc, #16]	; (8003c98 <CRS_AutomaticCalibrationCmd+0x38>)
 8003c86:	6812      	ldr	r2, [r2, #0]
 8003c88:	2140      	movs	r1, #64	; 0x40
 8003c8a:	438a      	bics	r2, r1
 8003c8c:	601a      	str	r2, [r3, #0]
  }
}
 8003c8e:	46c0      	nop			; (mov r8, r8)
 8003c90:	46bd      	mov	sp, r7
 8003c92:	b002      	add	sp, #8
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	46c0      	nop			; (mov r8, r8)
 8003c98:	40006c00 	.word	0x40006c00

08003c9c <CRS_SynchronizationSourceConfig>:
  *            @arg CRS_SYNCSource_LSE:   
  *            @arg CRS_SYNCSource_USB:   
  * @retval None
  */
void CRS_SynchronizationSourceConfig(uint32_t CRS_Source)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_CRS_SYNC_SOURCE(CRS_Source));
  
  /* Clear SYNCSRC[1:0] bits */
  CRS->CFGR &= ~CRS_CFGR_SYNCSRC;
 8003ca4:	4b07      	ldr	r3, [pc, #28]	; (8003cc4 <CRS_SynchronizationSourceConfig+0x28>)
 8003ca6:	4a07      	ldr	r2, [pc, #28]	; (8003cc4 <CRS_SynchronizationSourceConfig+0x28>)
 8003ca8:	6852      	ldr	r2, [r2, #4]
 8003caa:	4907      	ldr	r1, [pc, #28]	; (8003cc8 <CRS_SynchronizationSourceConfig+0x2c>)
 8003cac:	400a      	ands	r2, r1
 8003cae:	605a      	str	r2, [r3, #4]
  
  /* Set the SYNCSRC[1:0] bits according to CRS_Source value */
  CRS->CFGR |= CRS_Source;
 8003cb0:	4b04      	ldr	r3, [pc, #16]	; (8003cc4 <CRS_SynchronizationSourceConfig+0x28>)
 8003cb2:	4a04      	ldr	r2, [pc, #16]	; (8003cc4 <CRS_SynchronizationSourceConfig+0x28>)
 8003cb4:	6851      	ldr	r1, [r2, #4]
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	605a      	str	r2, [r3, #4]
}
 8003cbc:	46c0      	nop			; (mov r8, r8)
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	b002      	add	sp, #8
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	40006c00 	.word	0x40006c00
 8003cc8:	cfffffff 	.word	0xcfffffff

08003ccc <__libc_init_array>:
 8003ccc:	4b0e      	ldr	r3, [pc, #56]	; (8003d08 <__libc_init_array+0x3c>)
 8003cce:	b570      	push	{r4, r5, r6, lr}
 8003cd0:	2500      	movs	r5, #0
 8003cd2:	001e      	movs	r6, r3
 8003cd4:	4c0d      	ldr	r4, [pc, #52]	; (8003d0c <__libc_init_array+0x40>)
 8003cd6:	1ae4      	subs	r4, r4, r3
 8003cd8:	10a4      	asrs	r4, r4, #2
 8003cda:	42a5      	cmp	r5, r4
 8003cdc:	d004      	beq.n	8003ce8 <__libc_init_array+0x1c>
 8003cde:	00ab      	lsls	r3, r5, #2
 8003ce0:	58f3      	ldr	r3, [r6, r3]
 8003ce2:	4798      	blx	r3
 8003ce4:	3501      	adds	r5, #1
 8003ce6:	e7f8      	b.n	8003cda <__libc_init_array+0xe>
 8003ce8:	f000 f816 	bl	8003d18 <_init>
 8003cec:	4b08      	ldr	r3, [pc, #32]	; (8003d10 <__libc_init_array+0x44>)
 8003cee:	2500      	movs	r5, #0
 8003cf0:	001e      	movs	r6, r3
 8003cf2:	4c08      	ldr	r4, [pc, #32]	; (8003d14 <__libc_init_array+0x48>)
 8003cf4:	1ae4      	subs	r4, r4, r3
 8003cf6:	10a4      	asrs	r4, r4, #2
 8003cf8:	42a5      	cmp	r5, r4
 8003cfa:	d004      	beq.n	8003d06 <__libc_init_array+0x3a>
 8003cfc:	00ab      	lsls	r3, r5, #2
 8003cfe:	58f3      	ldr	r3, [r6, r3]
 8003d00:	4798      	blx	r3
 8003d02:	3501      	adds	r5, #1
 8003d04:	e7f8      	b.n	8003cf8 <__libc_init_array+0x2c>
 8003d06:	bd70      	pop	{r4, r5, r6, pc}
 8003d08:	08003e80 	.word	0x08003e80
 8003d0c:	08003e80 	.word	0x08003e80
 8003d10:	08003e80 	.word	0x08003e80
 8003d14:	08003e84 	.word	0x08003e84

08003d18 <_init>:
 8003d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d1a:	46c0      	nop			; (mov r8, r8)
 8003d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d1e:	bc08      	pop	{r3}
 8003d20:	469e      	mov	lr, r3
 8003d22:	4770      	bx	lr

08003d24 <_fini>:
 8003d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d26:	46c0      	nop			; (mov r8, r8)
 8003d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d2a:	bc08      	pop	{r3}
 8003d2c:	469e      	mov	lr, r3
 8003d2e:	4770      	bx	lr
