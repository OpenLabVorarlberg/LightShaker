
Seismograph.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073f8  080000c0  080000c0  000080c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  080074b8  080074b8  0000f4b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080076d8  080076d8  0000f6d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080076dc  080076dc  0000f6dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000124  20000000  080076e0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000ce8  20000124  08007804  00010124  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  20000e0c  08007804  00010e0c  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00010124  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000ab8a  00000000  00000000  0001014c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002719  00000000  00000000  0001acd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000da0  00000000  00000000  0001d3f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000be8  00000000  00000000  0001e190  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004eeb  00000000  00000000  0001ed78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003556  00000000  00000000  00023c63  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000082  00000000  00000000  000271b9  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00003444  00000000  00000000  0002723c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000124 	.word	0x20000124
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080074a0 	.word	0x080074a0

080000e8 <frame_dummy>:
 80000e8:	b508      	push	{r3, lr}
 80000ea:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4803      	ldr	r0, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4904      	ldr	r1, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd08      	pop	{r3, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	080074a0 	.word	0x080074a0
 8000104:	20000128 	.word	0x20000128

08000108 <__aeabi_uidiv>:
 8000108:	2900      	cmp	r1, #0
 800010a:	d034      	beq.n	8000176 <.udivsi3_skip_div0_test+0x6a>

0800010c <.udivsi3_skip_div0_test>:
 800010c:	2301      	movs	r3, #1
 800010e:	2200      	movs	r2, #0
 8000110:	b410      	push	{r4}
 8000112:	4288      	cmp	r0, r1
 8000114:	d32c      	bcc.n	8000170 <.udivsi3_skip_div0_test+0x64>
 8000116:	2401      	movs	r4, #1
 8000118:	0724      	lsls	r4, r4, #28
 800011a:	42a1      	cmp	r1, r4
 800011c:	d204      	bcs.n	8000128 <.udivsi3_skip_div0_test+0x1c>
 800011e:	4281      	cmp	r1, r0
 8000120:	d202      	bcs.n	8000128 <.udivsi3_skip_div0_test+0x1c>
 8000122:	0109      	lsls	r1, r1, #4
 8000124:	011b      	lsls	r3, r3, #4
 8000126:	e7f8      	b.n	800011a <.udivsi3_skip_div0_test+0xe>
 8000128:	00e4      	lsls	r4, r4, #3
 800012a:	42a1      	cmp	r1, r4
 800012c:	d204      	bcs.n	8000138 <.udivsi3_skip_div0_test+0x2c>
 800012e:	4281      	cmp	r1, r0
 8000130:	d202      	bcs.n	8000138 <.udivsi3_skip_div0_test+0x2c>
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	005b      	lsls	r3, r3, #1
 8000136:	e7f8      	b.n	800012a <.udivsi3_skip_div0_test+0x1e>
 8000138:	4288      	cmp	r0, r1
 800013a:	d301      	bcc.n	8000140 <.udivsi3_skip_div0_test+0x34>
 800013c:	1a40      	subs	r0, r0, r1
 800013e:	431a      	orrs	r2, r3
 8000140:	084c      	lsrs	r4, r1, #1
 8000142:	42a0      	cmp	r0, r4
 8000144:	d302      	bcc.n	800014c <.udivsi3_skip_div0_test+0x40>
 8000146:	1b00      	subs	r0, r0, r4
 8000148:	085c      	lsrs	r4, r3, #1
 800014a:	4322      	orrs	r2, r4
 800014c:	088c      	lsrs	r4, r1, #2
 800014e:	42a0      	cmp	r0, r4
 8000150:	d302      	bcc.n	8000158 <.udivsi3_skip_div0_test+0x4c>
 8000152:	1b00      	subs	r0, r0, r4
 8000154:	089c      	lsrs	r4, r3, #2
 8000156:	4322      	orrs	r2, r4
 8000158:	08cc      	lsrs	r4, r1, #3
 800015a:	42a0      	cmp	r0, r4
 800015c:	d302      	bcc.n	8000164 <.udivsi3_skip_div0_test+0x58>
 800015e:	1b00      	subs	r0, r0, r4
 8000160:	08dc      	lsrs	r4, r3, #3
 8000162:	4322      	orrs	r2, r4
 8000164:	2800      	cmp	r0, #0
 8000166:	d003      	beq.n	8000170 <.udivsi3_skip_div0_test+0x64>
 8000168:	091b      	lsrs	r3, r3, #4
 800016a:	d001      	beq.n	8000170 <.udivsi3_skip_div0_test+0x64>
 800016c:	0909      	lsrs	r1, r1, #4
 800016e:	e7e3      	b.n	8000138 <.udivsi3_skip_div0_test+0x2c>
 8000170:	1c10      	adds	r0, r2, #0
 8000172:	bc10      	pop	{r4}
 8000174:	4770      	bx	lr
 8000176:	2800      	cmp	r0, #0
 8000178:	d001      	beq.n	800017e <.udivsi3_skip_div0_test+0x72>
 800017a:	2000      	movs	r0, #0
 800017c:	43c0      	mvns	r0, r0
 800017e:	b407      	push	{r0, r1, r2}
 8000180:	4802      	ldr	r0, [pc, #8]	; (800018c <.udivsi3_skip_div0_test+0x80>)
 8000182:	a102      	add	r1, pc, #8	; (adr r1, 800018c <.udivsi3_skip_div0_test+0x80>)
 8000184:	1840      	adds	r0, r0, r1
 8000186:	9002      	str	r0, [sp, #8]
 8000188:	bd03      	pop	{r0, r1, pc}
 800018a:	46c0      	nop			; (mov r8, r8)
 800018c:	00000019 	.word	0x00000019

08000190 <__aeabi_uidivmod>:
 8000190:	2900      	cmp	r1, #0
 8000192:	d0f0      	beq.n	8000176 <.udivsi3_skip_div0_test+0x6a>
 8000194:	b503      	push	{r0, r1, lr}
 8000196:	f7ff ffb9 	bl	800010c <.udivsi3_skip_div0_test>
 800019a:	bc0e      	pop	{r1, r2, r3}
 800019c:	4342      	muls	r2, r0
 800019e:	1a89      	subs	r1, r1, r2
 80001a0:	4718      	bx	r3
 80001a2:	46c0      	nop			; (mov r8, r8)

080001a4 <__aeabi_idiv0>:
 80001a4:	4770      	bx	lr
 80001a6:	46c0      	nop			; (mov r8, r8)

080001a8 <__aeabi_cdrcmple>:
 80001a8:	4684      	mov	ip, r0
 80001aa:	1c10      	adds	r0, r2, #0
 80001ac:	4662      	mov	r2, ip
 80001ae:	468c      	mov	ip, r1
 80001b0:	1c19      	adds	r1, r3, #0
 80001b2:	4663      	mov	r3, ip
 80001b4:	e000      	b.n	80001b8 <__aeabi_cdcmpeq>
 80001b6:	46c0      	nop			; (mov r8, r8)

080001b8 <__aeabi_cdcmpeq>:
 80001b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80001ba:	f000 ff5d 	bl	8001078 <__ledf2>
 80001be:	2800      	cmp	r0, #0
 80001c0:	d401      	bmi.n	80001c6 <__aeabi_cdcmpeq+0xe>
 80001c2:	2100      	movs	r1, #0
 80001c4:	42c8      	cmn	r0, r1
 80001c6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080001c8 <__aeabi_dcmpeq>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	f000 fe8d 	bl	8000ee8 <__eqdf2>
 80001ce:	4240      	negs	r0, r0
 80001d0:	3001      	adds	r0, #1
 80001d2:	bd10      	pop	{r4, pc}

080001d4 <__aeabi_dcmplt>:
 80001d4:	b510      	push	{r4, lr}
 80001d6:	f000 ff4f 	bl	8001078 <__ledf2>
 80001da:	2800      	cmp	r0, #0
 80001dc:	db01      	blt.n	80001e2 <__aeabi_dcmplt+0xe>
 80001de:	2000      	movs	r0, #0
 80001e0:	bd10      	pop	{r4, pc}
 80001e2:	2001      	movs	r0, #1
 80001e4:	bd10      	pop	{r4, pc}
 80001e6:	46c0      	nop			; (mov r8, r8)

080001e8 <__aeabi_dcmple>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	f000 ff45 	bl	8001078 <__ledf2>
 80001ee:	2800      	cmp	r0, #0
 80001f0:	dd01      	ble.n	80001f6 <__aeabi_dcmple+0xe>
 80001f2:	2000      	movs	r0, #0
 80001f4:	bd10      	pop	{r4, pc}
 80001f6:	2001      	movs	r0, #1
 80001f8:	bd10      	pop	{r4, pc}
 80001fa:	46c0      	nop			; (mov r8, r8)

080001fc <__aeabi_dcmpgt>:
 80001fc:	b510      	push	{r4, lr}
 80001fe:	f000 febd 	bl	8000f7c <__gedf2>
 8000202:	2800      	cmp	r0, #0
 8000204:	dc01      	bgt.n	800020a <__aeabi_dcmpgt+0xe>
 8000206:	2000      	movs	r0, #0
 8000208:	bd10      	pop	{r4, pc}
 800020a:	2001      	movs	r0, #1
 800020c:	bd10      	pop	{r4, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_dcmpge>:
 8000210:	b510      	push	{r4, lr}
 8000212:	f000 feb3 	bl	8000f7c <__gedf2>
 8000216:	2800      	cmp	r0, #0
 8000218:	da01      	bge.n	800021e <__aeabi_dcmpge+0xe>
 800021a:	2000      	movs	r0, #0
 800021c:	bd10      	pop	{r4, pc}
 800021e:	2001      	movs	r0, #1
 8000220:	bd10      	pop	{r4, pc}
 8000222:	46c0      	nop			; (mov r8, r8)
 8000224:	0000      	movs	r0, r0
	...

08000228 <__aeabi_d2uiz>:
 8000228:	b538      	push	{r3, r4, r5, lr}
 800022a:	4b0e      	ldr	r3, [pc, #56]	; (8000264 <__aeabi_d2uiz+0x3c>)
 800022c:	4a0c      	ldr	r2, [pc, #48]	; (8000260 <__aeabi_d2uiz+0x38>)
 800022e:	1c04      	adds	r4, r0, #0
 8000230:	1c0d      	adds	r5, r1, #0
 8000232:	f7ff ffed 	bl	8000210 <__aeabi_dcmpge>
 8000236:	2800      	cmp	r0, #0
 8000238:	d104      	bne.n	8000244 <__aeabi_d2uiz+0x1c>
 800023a:	1c20      	adds	r0, r4, #0
 800023c:	1c29      	adds	r1, r5, #0
 800023e:	f001 fd53 	bl	8001ce8 <__aeabi_d2iz>
 8000242:	bd38      	pop	{r3, r4, r5, pc}
 8000244:	4b07      	ldr	r3, [pc, #28]	; (8000264 <__aeabi_d2uiz+0x3c>)
 8000246:	4a06      	ldr	r2, [pc, #24]	; (8000260 <__aeabi_d2uiz+0x38>)
 8000248:	1c20      	adds	r0, r4, #0
 800024a:	1c29      	adds	r1, r5, #0
 800024c:	f001 fa22 	bl	8001694 <__aeabi_dsub>
 8000250:	f001 fd4a 	bl	8001ce8 <__aeabi_d2iz>
 8000254:	2380      	movs	r3, #128	; 0x80
 8000256:	061b      	lsls	r3, r3, #24
 8000258:	18c0      	adds	r0, r0, r3
 800025a:	e7f2      	b.n	8000242 <__aeabi_d2uiz+0x1a>
 800025c:	46c0      	nop			; (mov r8, r8)
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	00000000 	.word	0x00000000
 8000264:	41e00000 	.word	0x41e00000

08000268 <__aeabi_dadd>:
 8000268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800026a:	465f      	mov	r7, fp
 800026c:	4656      	mov	r6, sl
 800026e:	4644      	mov	r4, r8
 8000270:	464d      	mov	r5, r9
 8000272:	b4f0      	push	{r4, r5, r6, r7}
 8000274:	030c      	lsls	r4, r1, #12
 8000276:	004d      	lsls	r5, r1, #1
 8000278:	0fce      	lsrs	r6, r1, #31
 800027a:	0a61      	lsrs	r1, r4, #9
 800027c:	0f44      	lsrs	r4, r0, #29
 800027e:	4321      	orrs	r1, r4
 8000280:	00c4      	lsls	r4, r0, #3
 8000282:	0318      	lsls	r0, r3, #12
 8000284:	4680      	mov	r8, r0
 8000286:	0058      	lsls	r0, r3, #1
 8000288:	0d40      	lsrs	r0, r0, #21
 800028a:	4682      	mov	sl, r0
 800028c:	0fd8      	lsrs	r0, r3, #31
 800028e:	4684      	mov	ip, r0
 8000290:	4640      	mov	r0, r8
 8000292:	0a40      	lsrs	r0, r0, #9
 8000294:	0f53      	lsrs	r3, r2, #29
 8000296:	4303      	orrs	r3, r0
 8000298:	00d0      	lsls	r0, r2, #3
 800029a:	0d6d      	lsrs	r5, r5, #21
 800029c:	1c37      	adds	r7, r6, #0
 800029e:	4683      	mov	fp, r0
 80002a0:	4652      	mov	r2, sl
 80002a2:	4566      	cmp	r6, ip
 80002a4:	d100      	bne.n	80002a8 <__aeabi_dadd+0x40>
 80002a6:	e09d      	b.n	80003e4 <__aeabi_dadd+0x17c>
 80002a8:	1aaf      	subs	r7, r5, r2
 80002aa:	2f00      	cmp	r7, #0
 80002ac:	dc00      	bgt.n	80002b0 <__aeabi_dadd+0x48>
 80002ae:	e103      	b.n	80004b8 <__aeabi_dadd+0x250>
 80002b0:	2a00      	cmp	r2, #0
 80002b2:	d138      	bne.n	8000326 <__aeabi_dadd+0xbe>
 80002b4:	4318      	orrs	r0, r3
 80002b6:	d000      	beq.n	80002ba <__aeabi_dadd+0x52>
 80002b8:	e0e4      	b.n	8000484 <__aeabi_dadd+0x21c>
 80002ba:	0763      	lsls	r3, r4, #29
 80002bc:	d009      	beq.n	80002d2 <__aeabi_dadd+0x6a>
 80002be:	230f      	movs	r3, #15
 80002c0:	4023      	ands	r3, r4
 80002c2:	2b04      	cmp	r3, #4
 80002c4:	d005      	beq.n	80002d2 <__aeabi_dadd+0x6a>
 80002c6:	1d23      	adds	r3, r4, #4
 80002c8:	42a3      	cmp	r3, r4
 80002ca:	41a4      	sbcs	r4, r4
 80002cc:	4264      	negs	r4, r4
 80002ce:	1909      	adds	r1, r1, r4
 80002d0:	1c1c      	adds	r4, r3, #0
 80002d2:	0208      	lsls	r0, r1, #8
 80002d4:	d400      	bmi.n	80002d8 <__aeabi_dadd+0x70>
 80002d6:	e078      	b.n	80003ca <__aeabi_dadd+0x162>
 80002d8:	4bce      	ldr	r3, [pc, #824]	; (8000614 <__aeabi_dadd+0x3ac>)
 80002da:	1c6a      	adds	r2, r5, #1
 80002dc:	429a      	cmp	r2, r3
 80002de:	d100      	bne.n	80002e2 <__aeabi_dadd+0x7a>
 80002e0:	e105      	b.n	80004ee <__aeabi_dadd+0x286>
 80002e2:	4bcd      	ldr	r3, [pc, #820]	; (8000618 <__aeabi_dadd+0x3b0>)
 80002e4:	08e4      	lsrs	r4, r4, #3
 80002e6:	4019      	ands	r1, r3
 80002e8:	0748      	lsls	r0, r1, #29
 80002ea:	0552      	lsls	r2, r2, #21
 80002ec:	0249      	lsls	r1, r1, #9
 80002ee:	4304      	orrs	r4, r0
 80002f0:	0b0b      	lsrs	r3, r1, #12
 80002f2:	0d52      	lsrs	r2, r2, #21
 80002f4:	1c37      	adds	r7, r6, #0
 80002f6:	2000      	movs	r0, #0
 80002f8:	2100      	movs	r1, #0
 80002fa:	031b      	lsls	r3, r3, #12
 80002fc:	1c20      	adds	r0, r4, #0
 80002fe:	0b1c      	lsrs	r4, r3, #12
 8000300:	0d0b      	lsrs	r3, r1, #20
 8000302:	051b      	lsls	r3, r3, #20
 8000304:	4dc5      	ldr	r5, [pc, #788]	; (800061c <__aeabi_dadd+0x3b4>)
 8000306:	4323      	orrs	r3, r4
 8000308:	0552      	lsls	r2, r2, #21
 800030a:	0852      	lsrs	r2, r2, #1
 800030c:	401d      	ands	r5, r3
 800030e:	4315      	orrs	r5, r2
 8000310:	006d      	lsls	r5, r5, #1
 8000312:	086d      	lsrs	r5, r5, #1
 8000314:	07ff      	lsls	r7, r7, #31
 8000316:	1c29      	adds	r1, r5, #0
 8000318:	4339      	orrs	r1, r7
 800031a:	bc3c      	pop	{r2, r3, r4, r5}
 800031c:	4690      	mov	r8, r2
 800031e:	4699      	mov	r9, r3
 8000320:	46a2      	mov	sl, r4
 8000322:	46ab      	mov	fp, r5
 8000324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000326:	48bb      	ldr	r0, [pc, #748]	; (8000614 <__aeabi_dadd+0x3ac>)
 8000328:	4285      	cmp	r5, r0
 800032a:	d0c6      	beq.n	80002ba <__aeabi_dadd+0x52>
 800032c:	2080      	movs	r0, #128	; 0x80
 800032e:	0400      	lsls	r0, r0, #16
 8000330:	4303      	orrs	r3, r0
 8000332:	2f38      	cmp	r7, #56	; 0x38
 8000334:	dd00      	ble.n	8000338 <__aeabi_dadd+0xd0>
 8000336:	e0ec      	b.n	8000512 <__aeabi_dadd+0x2aa>
 8000338:	2f1f      	cmp	r7, #31
 800033a:	dd00      	ble.n	800033e <__aeabi_dadd+0xd6>
 800033c:	e120      	b.n	8000580 <__aeabi_dadd+0x318>
 800033e:	2020      	movs	r0, #32
 8000340:	1bc0      	subs	r0, r0, r7
 8000342:	1c1a      	adds	r2, r3, #0
 8000344:	4681      	mov	r9, r0
 8000346:	4082      	lsls	r2, r0
 8000348:	4658      	mov	r0, fp
 800034a:	40f8      	lsrs	r0, r7
 800034c:	4302      	orrs	r2, r0
 800034e:	4694      	mov	ip, r2
 8000350:	4658      	mov	r0, fp
 8000352:	464a      	mov	r2, r9
 8000354:	4090      	lsls	r0, r2
 8000356:	1e42      	subs	r2, r0, #1
 8000358:	4190      	sbcs	r0, r2
 800035a:	40fb      	lsrs	r3, r7
 800035c:	4662      	mov	r2, ip
 800035e:	4302      	orrs	r2, r0
 8000360:	1c1f      	adds	r7, r3, #0
 8000362:	1aa2      	subs	r2, r4, r2
 8000364:	4294      	cmp	r4, r2
 8000366:	41a4      	sbcs	r4, r4
 8000368:	4264      	negs	r4, r4
 800036a:	1bc9      	subs	r1, r1, r7
 800036c:	1b09      	subs	r1, r1, r4
 800036e:	1c14      	adds	r4, r2, #0
 8000370:	020b      	lsls	r3, r1, #8
 8000372:	d5a2      	bpl.n	80002ba <__aeabi_dadd+0x52>
 8000374:	0249      	lsls	r1, r1, #9
 8000376:	0a4f      	lsrs	r7, r1, #9
 8000378:	2f00      	cmp	r7, #0
 800037a:	d100      	bne.n	800037e <__aeabi_dadd+0x116>
 800037c:	e0c4      	b.n	8000508 <__aeabi_dadd+0x2a0>
 800037e:	1c38      	adds	r0, r7, #0
 8000380:	f001 fd58 	bl	8001e34 <__clzsi2>
 8000384:	1c02      	adds	r2, r0, #0
 8000386:	3a08      	subs	r2, #8
 8000388:	2a1f      	cmp	r2, #31
 800038a:	dd00      	ble.n	800038e <__aeabi_dadd+0x126>
 800038c:	e0b7      	b.n	80004fe <__aeabi_dadd+0x296>
 800038e:	2128      	movs	r1, #40	; 0x28
 8000390:	1a09      	subs	r1, r1, r0
 8000392:	1c20      	adds	r0, r4, #0
 8000394:	4097      	lsls	r7, r2
 8000396:	40c8      	lsrs	r0, r1
 8000398:	4307      	orrs	r7, r0
 800039a:	4094      	lsls	r4, r2
 800039c:	4295      	cmp	r5, r2
 800039e:	dd00      	ble.n	80003a2 <__aeabi_dadd+0x13a>
 80003a0:	e0a9      	b.n	80004f6 <__aeabi_dadd+0x28e>
 80003a2:	1b55      	subs	r5, r2, r5
 80003a4:	1c69      	adds	r1, r5, #1
 80003a6:	291f      	cmp	r1, #31
 80003a8:	dd00      	ble.n	80003ac <__aeabi_dadd+0x144>
 80003aa:	e0d8      	b.n	800055e <__aeabi_dadd+0x2f6>
 80003ac:	221f      	movs	r2, #31
 80003ae:	1b55      	subs	r5, r2, r5
 80003b0:	1c3b      	adds	r3, r7, #0
 80003b2:	1c22      	adds	r2, r4, #0
 80003b4:	40ab      	lsls	r3, r5
 80003b6:	40ca      	lsrs	r2, r1
 80003b8:	40ac      	lsls	r4, r5
 80003ba:	1e65      	subs	r5, r4, #1
 80003bc:	41ac      	sbcs	r4, r5
 80003be:	4313      	orrs	r3, r2
 80003c0:	40cf      	lsrs	r7, r1
 80003c2:	431c      	orrs	r4, r3
 80003c4:	1c39      	adds	r1, r7, #0
 80003c6:	2500      	movs	r5, #0
 80003c8:	e777      	b.n	80002ba <__aeabi_dadd+0x52>
 80003ca:	0748      	lsls	r0, r1, #29
 80003cc:	08e4      	lsrs	r4, r4, #3
 80003ce:	056a      	lsls	r2, r5, #21
 80003d0:	08c9      	lsrs	r1, r1, #3
 80003d2:	0d52      	lsrs	r2, r2, #21
 80003d4:	1c37      	adds	r7, r6, #0
 80003d6:	4304      	orrs	r4, r0
 80003d8:	4b8e      	ldr	r3, [pc, #568]	; (8000614 <__aeabi_dadd+0x3ac>)
 80003da:	429d      	cmp	r5, r3
 80003dc:	d048      	beq.n	8000470 <__aeabi_dadd+0x208>
 80003de:	0309      	lsls	r1, r1, #12
 80003e0:	0b0b      	lsrs	r3, r1, #12
 80003e2:	e788      	b.n	80002f6 <__aeabi_dadd+0x8e>
 80003e4:	1aaa      	subs	r2, r5, r2
 80003e6:	4694      	mov	ip, r2
 80003e8:	2a00      	cmp	r2, #0
 80003ea:	dc00      	bgt.n	80003ee <__aeabi_dadd+0x186>
 80003ec:	e098      	b.n	8000520 <__aeabi_dadd+0x2b8>
 80003ee:	4650      	mov	r0, sl
 80003f0:	2800      	cmp	r0, #0
 80003f2:	d053      	beq.n	800049c <__aeabi_dadd+0x234>
 80003f4:	4887      	ldr	r0, [pc, #540]	; (8000614 <__aeabi_dadd+0x3ac>)
 80003f6:	4285      	cmp	r5, r0
 80003f8:	d100      	bne.n	80003fc <__aeabi_dadd+0x194>
 80003fa:	e75e      	b.n	80002ba <__aeabi_dadd+0x52>
 80003fc:	2080      	movs	r0, #128	; 0x80
 80003fe:	0400      	lsls	r0, r0, #16
 8000400:	4303      	orrs	r3, r0
 8000402:	4662      	mov	r2, ip
 8000404:	2a38      	cmp	r2, #56	; 0x38
 8000406:	dd00      	ble.n	800040a <__aeabi_dadd+0x1a2>
 8000408:	e0fd      	b.n	8000606 <__aeabi_dadd+0x39e>
 800040a:	2a1f      	cmp	r2, #31
 800040c:	dd00      	ble.n	8000410 <__aeabi_dadd+0x1a8>
 800040e:	e14b      	b.n	80006a8 <__aeabi_dadd+0x440>
 8000410:	2220      	movs	r2, #32
 8000412:	4660      	mov	r0, ip
 8000414:	1a10      	subs	r0, r2, r0
 8000416:	1c1a      	adds	r2, r3, #0
 8000418:	4082      	lsls	r2, r0
 800041a:	4682      	mov	sl, r0
 800041c:	4691      	mov	r9, r2
 800041e:	4658      	mov	r0, fp
 8000420:	4662      	mov	r2, ip
 8000422:	40d0      	lsrs	r0, r2
 8000424:	464a      	mov	r2, r9
 8000426:	4302      	orrs	r2, r0
 8000428:	4690      	mov	r8, r2
 800042a:	4658      	mov	r0, fp
 800042c:	4652      	mov	r2, sl
 800042e:	4090      	lsls	r0, r2
 8000430:	1e42      	subs	r2, r0, #1
 8000432:	4190      	sbcs	r0, r2
 8000434:	4642      	mov	r2, r8
 8000436:	4302      	orrs	r2, r0
 8000438:	4660      	mov	r0, ip
 800043a:	40c3      	lsrs	r3, r0
 800043c:	1912      	adds	r2, r2, r4
 800043e:	42a2      	cmp	r2, r4
 8000440:	41a4      	sbcs	r4, r4
 8000442:	4264      	negs	r4, r4
 8000444:	1859      	adds	r1, r3, r1
 8000446:	1909      	adds	r1, r1, r4
 8000448:	1c14      	adds	r4, r2, #0
 800044a:	0208      	lsls	r0, r1, #8
 800044c:	d400      	bmi.n	8000450 <__aeabi_dadd+0x1e8>
 800044e:	e734      	b.n	80002ba <__aeabi_dadd+0x52>
 8000450:	4b70      	ldr	r3, [pc, #448]	; (8000614 <__aeabi_dadd+0x3ac>)
 8000452:	3501      	adds	r5, #1
 8000454:	429d      	cmp	r5, r3
 8000456:	d100      	bne.n	800045a <__aeabi_dadd+0x1f2>
 8000458:	e124      	b.n	80006a4 <__aeabi_dadd+0x43c>
 800045a:	4b6f      	ldr	r3, [pc, #444]	; (8000618 <__aeabi_dadd+0x3b0>)
 800045c:	0860      	lsrs	r0, r4, #1
 800045e:	4019      	ands	r1, r3
 8000460:	2301      	movs	r3, #1
 8000462:	4023      	ands	r3, r4
 8000464:	1c1c      	adds	r4, r3, #0
 8000466:	4304      	orrs	r4, r0
 8000468:	07cb      	lsls	r3, r1, #31
 800046a:	431c      	orrs	r4, r3
 800046c:	0849      	lsrs	r1, r1, #1
 800046e:	e724      	b.n	80002ba <__aeabi_dadd+0x52>
 8000470:	1c0b      	adds	r3, r1, #0
 8000472:	4323      	orrs	r3, r4
 8000474:	d100      	bne.n	8000478 <__aeabi_dadd+0x210>
 8000476:	e1c7      	b.n	8000808 <__aeabi_dadd+0x5a0>
 8000478:	2380      	movs	r3, #128	; 0x80
 800047a:	031b      	lsls	r3, r3, #12
 800047c:	430b      	orrs	r3, r1
 800047e:	031b      	lsls	r3, r3, #12
 8000480:	0b1b      	lsrs	r3, r3, #12
 8000482:	e738      	b.n	80002f6 <__aeabi_dadd+0x8e>
 8000484:	3f01      	subs	r7, #1
 8000486:	2f00      	cmp	r7, #0
 8000488:	d164      	bne.n	8000554 <__aeabi_dadd+0x2ec>
 800048a:	4658      	mov	r0, fp
 800048c:	1a22      	subs	r2, r4, r0
 800048e:	4294      	cmp	r4, r2
 8000490:	41a4      	sbcs	r4, r4
 8000492:	4264      	negs	r4, r4
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	1b09      	subs	r1, r1, r4
 8000498:	1c14      	adds	r4, r2, #0
 800049a:	e769      	b.n	8000370 <__aeabi_dadd+0x108>
 800049c:	4658      	mov	r0, fp
 800049e:	4318      	orrs	r0, r3
 80004a0:	d100      	bne.n	80004a4 <__aeabi_dadd+0x23c>
 80004a2:	e70a      	b.n	80002ba <__aeabi_dadd+0x52>
 80004a4:	2201      	movs	r2, #1
 80004a6:	4252      	negs	r2, r2
 80004a8:	4494      	add	ip, r2
 80004aa:	4660      	mov	r0, ip
 80004ac:	2800      	cmp	r0, #0
 80004ae:	d000      	beq.n	80004b2 <__aeabi_dadd+0x24a>
 80004b0:	e0c5      	b.n	800063e <__aeabi_dadd+0x3d6>
 80004b2:	4658      	mov	r0, fp
 80004b4:	1902      	adds	r2, r0, r4
 80004b6:	e7c2      	b.n	800043e <__aeabi_dadd+0x1d6>
 80004b8:	2f00      	cmp	r7, #0
 80004ba:	d172      	bne.n	80005a2 <__aeabi_dadd+0x33a>
 80004bc:	1c68      	adds	r0, r5, #1
 80004be:	0540      	lsls	r0, r0, #21
 80004c0:	0d40      	lsrs	r0, r0, #21
 80004c2:	2801      	cmp	r0, #1
 80004c4:	dc00      	bgt.n	80004c8 <__aeabi_dadd+0x260>
 80004c6:	e0de      	b.n	8000686 <__aeabi_dadd+0x41e>
 80004c8:	465a      	mov	r2, fp
 80004ca:	1aa2      	subs	r2, r4, r2
 80004cc:	4294      	cmp	r4, r2
 80004ce:	41bf      	sbcs	r7, r7
 80004d0:	1ac8      	subs	r0, r1, r3
 80004d2:	427f      	negs	r7, r7
 80004d4:	1bc7      	subs	r7, r0, r7
 80004d6:	0238      	lsls	r0, r7, #8
 80004d8:	d400      	bmi.n	80004dc <__aeabi_dadd+0x274>
 80004da:	e088      	b.n	80005ee <__aeabi_dadd+0x386>
 80004dc:	465a      	mov	r2, fp
 80004de:	1b14      	subs	r4, r2, r4
 80004e0:	45a3      	cmp	fp, r4
 80004e2:	4192      	sbcs	r2, r2
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	4252      	negs	r2, r2
 80004e8:	1a8f      	subs	r7, r1, r2
 80004ea:	4666      	mov	r6, ip
 80004ec:	e744      	b.n	8000378 <__aeabi_dadd+0x110>
 80004ee:	1c37      	adds	r7, r6, #0
 80004f0:	2300      	movs	r3, #0
 80004f2:	2400      	movs	r4, #0
 80004f4:	e6ff      	b.n	80002f6 <__aeabi_dadd+0x8e>
 80004f6:	4948      	ldr	r1, [pc, #288]	; (8000618 <__aeabi_dadd+0x3b0>)
 80004f8:	1aad      	subs	r5, r5, r2
 80004fa:	4039      	ands	r1, r7
 80004fc:	e6dd      	b.n	80002ba <__aeabi_dadd+0x52>
 80004fe:	1c27      	adds	r7, r4, #0
 8000500:	3828      	subs	r0, #40	; 0x28
 8000502:	4087      	lsls	r7, r0
 8000504:	2400      	movs	r4, #0
 8000506:	e749      	b.n	800039c <__aeabi_dadd+0x134>
 8000508:	1c20      	adds	r0, r4, #0
 800050a:	f001 fc93 	bl	8001e34 <__clzsi2>
 800050e:	3020      	adds	r0, #32
 8000510:	e738      	b.n	8000384 <__aeabi_dadd+0x11c>
 8000512:	465a      	mov	r2, fp
 8000514:	431a      	orrs	r2, r3
 8000516:	1e53      	subs	r3, r2, #1
 8000518:	419a      	sbcs	r2, r3
 800051a:	b2d2      	uxtb	r2, r2
 800051c:	2700      	movs	r7, #0
 800051e:	e720      	b.n	8000362 <__aeabi_dadd+0xfa>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d000      	beq.n	8000526 <__aeabi_dadd+0x2be>
 8000524:	e0dd      	b.n	80006e2 <__aeabi_dadd+0x47a>
 8000526:	1c68      	adds	r0, r5, #1
 8000528:	0542      	lsls	r2, r0, #21
 800052a:	0d52      	lsrs	r2, r2, #21
 800052c:	2a01      	cmp	r2, #1
 800052e:	dc00      	bgt.n	8000532 <__aeabi_dadd+0x2ca>
 8000530:	e08e      	b.n	8000650 <__aeabi_dadd+0x3e8>
 8000532:	4d38      	ldr	r5, [pc, #224]	; (8000614 <__aeabi_dadd+0x3ac>)
 8000534:	42a8      	cmp	r0, r5
 8000536:	d100      	bne.n	800053a <__aeabi_dadd+0x2d2>
 8000538:	e0b3      	b.n	80006a2 <__aeabi_dadd+0x43a>
 800053a:	465d      	mov	r5, fp
 800053c:	192a      	adds	r2, r5, r4
 800053e:	42a2      	cmp	r2, r4
 8000540:	41a4      	sbcs	r4, r4
 8000542:	4264      	negs	r4, r4
 8000544:	1859      	adds	r1, r3, r1
 8000546:	1909      	adds	r1, r1, r4
 8000548:	07cc      	lsls	r4, r1, #31
 800054a:	0852      	lsrs	r2, r2, #1
 800054c:	4314      	orrs	r4, r2
 800054e:	0849      	lsrs	r1, r1, #1
 8000550:	1c05      	adds	r5, r0, #0
 8000552:	e6b2      	b.n	80002ba <__aeabi_dadd+0x52>
 8000554:	482f      	ldr	r0, [pc, #188]	; (8000614 <__aeabi_dadd+0x3ac>)
 8000556:	4285      	cmp	r5, r0
 8000558:	d000      	beq.n	800055c <__aeabi_dadd+0x2f4>
 800055a:	e6ea      	b.n	8000332 <__aeabi_dadd+0xca>
 800055c:	e6ad      	b.n	80002ba <__aeabi_dadd+0x52>
 800055e:	1c2b      	adds	r3, r5, #0
 8000560:	3b1f      	subs	r3, #31
 8000562:	1c3a      	adds	r2, r7, #0
 8000564:	40da      	lsrs	r2, r3
 8000566:	1c13      	adds	r3, r2, #0
 8000568:	2920      	cmp	r1, #32
 800056a:	d06d      	beq.n	8000648 <__aeabi_dadd+0x3e0>
 800056c:	223f      	movs	r2, #63	; 0x3f
 800056e:	1b55      	subs	r5, r2, r5
 8000570:	40af      	lsls	r7, r5
 8000572:	433c      	orrs	r4, r7
 8000574:	1e60      	subs	r0, r4, #1
 8000576:	4184      	sbcs	r4, r0
 8000578:	431c      	orrs	r4, r3
 800057a:	2100      	movs	r1, #0
 800057c:	2500      	movs	r5, #0
 800057e:	e69c      	b.n	80002ba <__aeabi_dadd+0x52>
 8000580:	1c38      	adds	r0, r7, #0
 8000582:	3820      	subs	r0, #32
 8000584:	1c1a      	adds	r2, r3, #0
 8000586:	40c2      	lsrs	r2, r0
 8000588:	1c10      	adds	r0, r2, #0
 800058a:	2f20      	cmp	r7, #32
 800058c:	d05e      	beq.n	800064c <__aeabi_dadd+0x3e4>
 800058e:	2240      	movs	r2, #64	; 0x40
 8000590:	1bd7      	subs	r7, r2, r7
 8000592:	40bb      	lsls	r3, r7
 8000594:	465a      	mov	r2, fp
 8000596:	431a      	orrs	r2, r3
 8000598:	1e53      	subs	r3, r2, #1
 800059a:	419a      	sbcs	r2, r3
 800059c:	4302      	orrs	r2, r0
 800059e:	2700      	movs	r7, #0
 80005a0:	e6df      	b.n	8000362 <__aeabi_dadd+0xfa>
 80005a2:	2d00      	cmp	r5, #0
 80005a4:	d03c      	beq.n	8000620 <__aeabi_dadd+0x3b8>
 80005a6:	4d1b      	ldr	r5, [pc, #108]	; (8000614 <__aeabi_dadd+0x3ac>)
 80005a8:	45aa      	cmp	sl, r5
 80005aa:	d100      	bne.n	80005ae <__aeabi_dadd+0x346>
 80005ac:	e094      	b.n	80006d8 <__aeabi_dadd+0x470>
 80005ae:	2580      	movs	r5, #128	; 0x80
 80005b0:	042d      	lsls	r5, r5, #16
 80005b2:	427f      	negs	r7, r7
 80005b4:	4329      	orrs	r1, r5
 80005b6:	2f38      	cmp	r7, #56	; 0x38
 80005b8:	dd00      	ble.n	80005bc <__aeabi_dadd+0x354>
 80005ba:	e0ad      	b.n	8000718 <__aeabi_dadd+0x4b0>
 80005bc:	2f1f      	cmp	r7, #31
 80005be:	dd00      	ble.n	80005c2 <__aeabi_dadd+0x35a>
 80005c0:	e12c      	b.n	800081c <__aeabi_dadd+0x5b4>
 80005c2:	2520      	movs	r5, #32
 80005c4:	1bed      	subs	r5, r5, r7
 80005c6:	1c08      	adds	r0, r1, #0
 80005c8:	1c26      	adds	r6, r4, #0
 80005ca:	40a8      	lsls	r0, r5
 80005cc:	40fe      	lsrs	r6, r7
 80005ce:	40ac      	lsls	r4, r5
 80005d0:	4306      	orrs	r6, r0
 80005d2:	1e65      	subs	r5, r4, #1
 80005d4:	41ac      	sbcs	r4, r5
 80005d6:	4334      	orrs	r4, r6
 80005d8:	40f9      	lsrs	r1, r7
 80005da:	465d      	mov	r5, fp
 80005dc:	1b2c      	subs	r4, r5, r4
 80005de:	45a3      	cmp	fp, r4
 80005e0:	4192      	sbcs	r2, r2
 80005e2:	1a5b      	subs	r3, r3, r1
 80005e4:	4252      	negs	r2, r2
 80005e6:	1a99      	subs	r1, r3, r2
 80005e8:	4655      	mov	r5, sl
 80005ea:	4666      	mov	r6, ip
 80005ec:	e6c0      	b.n	8000370 <__aeabi_dadd+0x108>
 80005ee:	1c13      	adds	r3, r2, #0
 80005f0:	433b      	orrs	r3, r7
 80005f2:	1c14      	adds	r4, r2, #0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d000      	beq.n	80005fa <__aeabi_dadd+0x392>
 80005f8:	e6be      	b.n	8000378 <__aeabi_dadd+0x110>
 80005fa:	2700      	movs	r7, #0
 80005fc:	2200      	movs	r2, #0
 80005fe:	2500      	movs	r5, #0
 8000600:	2100      	movs	r1, #0
 8000602:	2400      	movs	r4, #0
 8000604:	e6e8      	b.n	80003d8 <__aeabi_dadd+0x170>
 8000606:	465a      	mov	r2, fp
 8000608:	431a      	orrs	r2, r3
 800060a:	1e53      	subs	r3, r2, #1
 800060c:	419a      	sbcs	r2, r3
 800060e:	b2d2      	uxtb	r2, r2
 8000610:	2300      	movs	r3, #0
 8000612:	e713      	b.n	800043c <__aeabi_dadd+0x1d4>
 8000614:	000007ff 	.word	0x000007ff
 8000618:	ff7fffff 	.word	0xff7fffff
 800061c:	800fffff 	.word	0x800fffff
 8000620:	1c0d      	adds	r5, r1, #0
 8000622:	4325      	orrs	r5, r4
 8000624:	d058      	beq.n	80006d8 <__aeabi_dadd+0x470>
 8000626:	43ff      	mvns	r7, r7
 8000628:	2f00      	cmp	r7, #0
 800062a:	d151      	bne.n	80006d0 <__aeabi_dadd+0x468>
 800062c:	1b04      	subs	r4, r0, r4
 800062e:	45a3      	cmp	fp, r4
 8000630:	4192      	sbcs	r2, r2
 8000632:	1a59      	subs	r1, r3, r1
 8000634:	4252      	negs	r2, r2
 8000636:	1a89      	subs	r1, r1, r2
 8000638:	4655      	mov	r5, sl
 800063a:	4666      	mov	r6, ip
 800063c:	e698      	b.n	8000370 <__aeabi_dadd+0x108>
 800063e:	4896      	ldr	r0, [pc, #600]	; (8000898 <__aeabi_dadd+0x630>)
 8000640:	4285      	cmp	r5, r0
 8000642:	d000      	beq.n	8000646 <__aeabi_dadd+0x3de>
 8000644:	e6dd      	b.n	8000402 <__aeabi_dadd+0x19a>
 8000646:	e638      	b.n	80002ba <__aeabi_dadd+0x52>
 8000648:	2700      	movs	r7, #0
 800064a:	e792      	b.n	8000572 <__aeabi_dadd+0x30a>
 800064c:	2300      	movs	r3, #0
 800064e:	e7a1      	b.n	8000594 <__aeabi_dadd+0x32c>
 8000650:	1c08      	adds	r0, r1, #0
 8000652:	4320      	orrs	r0, r4
 8000654:	2d00      	cmp	r5, #0
 8000656:	d000      	beq.n	800065a <__aeabi_dadd+0x3f2>
 8000658:	e0c0      	b.n	80007dc <__aeabi_dadd+0x574>
 800065a:	2800      	cmp	r0, #0
 800065c:	d100      	bne.n	8000660 <__aeabi_dadd+0x3f8>
 800065e:	e0fb      	b.n	8000858 <__aeabi_dadd+0x5f0>
 8000660:	4658      	mov	r0, fp
 8000662:	4318      	orrs	r0, r3
 8000664:	d100      	bne.n	8000668 <__aeabi_dadd+0x400>
 8000666:	e628      	b.n	80002ba <__aeabi_dadd+0x52>
 8000668:	4658      	mov	r0, fp
 800066a:	1902      	adds	r2, r0, r4
 800066c:	42a2      	cmp	r2, r4
 800066e:	41a4      	sbcs	r4, r4
 8000670:	4264      	negs	r4, r4
 8000672:	1859      	adds	r1, r3, r1
 8000674:	1909      	adds	r1, r1, r4
 8000676:	1c14      	adds	r4, r2, #0
 8000678:	020a      	lsls	r2, r1, #8
 800067a:	d400      	bmi.n	800067e <__aeabi_dadd+0x416>
 800067c:	e61d      	b.n	80002ba <__aeabi_dadd+0x52>
 800067e:	4b87      	ldr	r3, [pc, #540]	; (800089c <__aeabi_dadd+0x634>)
 8000680:	2501      	movs	r5, #1
 8000682:	4019      	ands	r1, r3
 8000684:	e619      	b.n	80002ba <__aeabi_dadd+0x52>
 8000686:	1c08      	adds	r0, r1, #0
 8000688:	4320      	orrs	r0, r4
 800068a:	2d00      	cmp	r5, #0
 800068c:	d139      	bne.n	8000702 <__aeabi_dadd+0x49a>
 800068e:	2800      	cmp	r0, #0
 8000690:	d16d      	bne.n	800076e <__aeabi_dadd+0x506>
 8000692:	4659      	mov	r1, fp
 8000694:	4319      	orrs	r1, r3
 8000696:	d100      	bne.n	800069a <__aeabi_dadd+0x432>
 8000698:	e0bd      	b.n	8000816 <__aeabi_dadd+0x5ae>
 800069a:	1c19      	adds	r1, r3, #0
 800069c:	465c      	mov	r4, fp
 800069e:	4666      	mov	r6, ip
 80006a0:	e60b      	b.n	80002ba <__aeabi_dadd+0x52>
 80006a2:	1c05      	adds	r5, r0, #0
 80006a4:	1c2a      	adds	r2, r5, #0
 80006a6:	e7ab      	b.n	8000600 <__aeabi_dadd+0x398>
 80006a8:	4660      	mov	r0, ip
 80006aa:	3820      	subs	r0, #32
 80006ac:	1c1a      	adds	r2, r3, #0
 80006ae:	40c2      	lsrs	r2, r0
 80006b0:	4660      	mov	r0, ip
 80006b2:	4691      	mov	r9, r2
 80006b4:	2820      	cmp	r0, #32
 80006b6:	d100      	bne.n	80006ba <__aeabi_dadd+0x452>
 80006b8:	e0ab      	b.n	8000812 <__aeabi_dadd+0x5aa>
 80006ba:	2240      	movs	r2, #64	; 0x40
 80006bc:	1a12      	subs	r2, r2, r0
 80006be:	4093      	lsls	r3, r2
 80006c0:	465a      	mov	r2, fp
 80006c2:	431a      	orrs	r2, r3
 80006c4:	1e53      	subs	r3, r2, #1
 80006c6:	419a      	sbcs	r2, r3
 80006c8:	464b      	mov	r3, r9
 80006ca:	431a      	orrs	r2, r3
 80006cc:	2300      	movs	r3, #0
 80006ce:	e6b5      	b.n	800043c <__aeabi_dadd+0x1d4>
 80006d0:	4d71      	ldr	r5, [pc, #452]	; (8000898 <__aeabi_dadd+0x630>)
 80006d2:	45aa      	cmp	sl, r5
 80006d4:	d000      	beq.n	80006d8 <__aeabi_dadd+0x470>
 80006d6:	e76e      	b.n	80005b6 <__aeabi_dadd+0x34e>
 80006d8:	1c19      	adds	r1, r3, #0
 80006da:	465c      	mov	r4, fp
 80006dc:	4655      	mov	r5, sl
 80006de:	4666      	mov	r6, ip
 80006e0:	e5eb      	b.n	80002ba <__aeabi_dadd+0x52>
 80006e2:	2d00      	cmp	r5, #0
 80006e4:	d11e      	bne.n	8000724 <__aeabi_dadd+0x4bc>
 80006e6:	1c0d      	adds	r5, r1, #0
 80006e8:	4325      	orrs	r5, r4
 80006ea:	d073      	beq.n	80007d4 <__aeabi_dadd+0x56c>
 80006ec:	43d5      	mvns	r5, r2
 80006ee:	2d00      	cmp	r5, #0
 80006f0:	d16d      	bne.n	80007ce <__aeabi_dadd+0x566>
 80006f2:	445c      	add	r4, fp
 80006f4:	455c      	cmp	r4, fp
 80006f6:	4192      	sbcs	r2, r2
 80006f8:	1859      	adds	r1, r3, r1
 80006fa:	4252      	negs	r2, r2
 80006fc:	1889      	adds	r1, r1, r2
 80006fe:	4655      	mov	r5, sl
 8000700:	e6a3      	b.n	800044a <__aeabi_dadd+0x1e2>
 8000702:	2800      	cmp	r0, #0
 8000704:	d149      	bne.n	800079a <__aeabi_dadd+0x532>
 8000706:	4659      	mov	r1, fp
 8000708:	4319      	orrs	r1, r3
 800070a:	d100      	bne.n	800070e <__aeabi_dadd+0x4a6>
 800070c:	e096      	b.n	800083c <__aeabi_dadd+0x5d4>
 800070e:	1c19      	adds	r1, r3, #0
 8000710:	465c      	mov	r4, fp
 8000712:	4666      	mov	r6, ip
 8000714:	4d60      	ldr	r5, [pc, #384]	; (8000898 <__aeabi_dadd+0x630>)
 8000716:	e5d0      	b.n	80002ba <__aeabi_dadd+0x52>
 8000718:	430c      	orrs	r4, r1
 800071a:	1e61      	subs	r1, r4, #1
 800071c:	418c      	sbcs	r4, r1
 800071e:	b2e4      	uxtb	r4, r4
 8000720:	2100      	movs	r1, #0
 8000722:	e75a      	b.n	80005da <__aeabi_dadd+0x372>
 8000724:	4d5c      	ldr	r5, [pc, #368]	; (8000898 <__aeabi_dadd+0x630>)
 8000726:	45aa      	cmp	sl, r5
 8000728:	d054      	beq.n	80007d4 <__aeabi_dadd+0x56c>
 800072a:	4255      	negs	r5, r2
 800072c:	2280      	movs	r2, #128	; 0x80
 800072e:	0410      	lsls	r0, r2, #16
 8000730:	4301      	orrs	r1, r0
 8000732:	2d38      	cmp	r5, #56	; 0x38
 8000734:	dd00      	ble.n	8000738 <__aeabi_dadd+0x4d0>
 8000736:	e085      	b.n	8000844 <__aeabi_dadd+0x5dc>
 8000738:	2d1f      	cmp	r5, #31
 800073a:	dd00      	ble.n	800073e <__aeabi_dadd+0x4d6>
 800073c:	e095      	b.n	800086a <__aeabi_dadd+0x602>
 800073e:	2220      	movs	r2, #32
 8000740:	1b50      	subs	r0, r2, r5
 8000742:	1c0a      	adds	r2, r1, #0
 8000744:	4684      	mov	ip, r0
 8000746:	4082      	lsls	r2, r0
 8000748:	1c20      	adds	r0, r4, #0
 800074a:	40e8      	lsrs	r0, r5
 800074c:	4302      	orrs	r2, r0
 800074e:	4690      	mov	r8, r2
 8000750:	4662      	mov	r2, ip
 8000752:	4094      	lsls	r4, r2
 8000754:	1e60      	subs	r0, r4, #1
 8000756:	4184      	sbcs	r4, r0
 8000758:	4642      	mov	r2, r8
 800075a:	4314      	orrs	r4, r2
 800075c:	40e9      	lsrs	r1, r5
 800075e:	445c      	add	r4, fp
 8000760:	455c      	cmp	r4, fp
 8000762:	4192      	sbcs	r2, r2
 8000764:	18cb      	adds	r3, r1, r3
 8000766:	4252      	negs	r2, r2
 8000768:	1899      	adds	r1, r3, r2
 800076a:	4655      	mov	r5, sl
 800076c:	e66d      	b.n	800044a <__aeabi_dadd+0x1e2>
 800076e:	4658      	mov	r0, fp
 8000770:	4318      	orrs	r0, r3
 8000772:	d100      	bne.n	8000776 <__aeabi_dadd+0x50e>
 8000774:	e5a1      	b.n	80002ba <__aeabi_dadd+0x52>
 8000776:	4658      	mov	r0, fp
 8000778:	1a27      	subs	r7, r4, r0
 800077a:	42bc      	cmp	r4, r7
 800077c:	4192      	sbcs	r2, r2
 800077e:	1ac8      	subs	r0, r1, r3
 8000780:	4252      	negs	r2, r2
 8000782:	1a80      	subs	r0, r0, r2
 8000784:	0202      	lsls	r2, r0, #8
 8000786:	d56a      	bpl.n	800085e <__aeabi_dadd+0x5f6>
 8000788:	4658      	mov	r0, fp
 800078a:	1b04      	subs	r4, r0, r4
 800078c:	45a3      	cmp	fp, r4
 800078e:	4192      	sbcs	r2, r2
 8000790:	1a59      	subs	r1, r3, r1
 8000792:	4252      	negs	r2, r2
 8000794:	1a89      	subs	r1, r1, r2
 8000796:	4666      	mov	r6, ip
 8000798:	e58f      	b.n	80002ba <__aeabi_dadd+0x52>
 800079a:	4658      	mov	r0, fp
 800079c:	4318      	orrs	r0, r3
 800079e:	d036      	beq.n	800080e <__aeabi_dadd+0x5a6>
 80007a0:	0748      	lsls	r0, r1, #29
 80007a2:	08e4      	lsrs	r4, r4, #3
 80007a4:	4304      	orrs	r4, r0
 80007a6:	2080      	movs	r0, #128	; 0x80
 80007a8:	08c9      	lsrs	r1, r1, #3
 80007aa:	0300      	lsls	r0, r0, #12
 80007ac:	4201      	tst	r1, r0
 80007ae:	d008      	beq.n	80007c2 <__aeabi_dadd+0x55a>
 80007b0:	08dd      	lsrs	r5, r3, #3
 80007b2:	4205      	tst	r5, r0
 80007b4:	d105      	bne.n	80007c2 <__aeabi_dadd+0x55a>
 80007b6:	4659      	mov	r1, fp
 80007b8:	08ca      	lsrs	r2, r1, #3
 80007ba:	075c      	lsls	r4, r3, #29
 80007bc:	4314      	orrs	r4, r2
 80007be:	1c29      	adds	r1, r5, #0
 80007c0:	4666      	mov	r6, ip
 80007c2:	0f63      	lsrs	r3, r4, #29
 80007c4:	00c9      	lsls	r1, r1, #3
 80007c6:	4319      	orrs	r1, r3
 80007c8:	00e4      	lsls	r4, r4, #3
 80007ca:	4d33      	ldr	r5, [pc, #204]	; (8000898 <__aeabi_dadd+0x630>)
 80007cc:	e575      	b.n	80002ba <__aeabi_dadd+0x52>
 80007ce:	4a32      	ldr	r2, [pc, #200]	; (8000898 <__aeabi_dadd+0x630>)
 80007d0:	4592      	cmp	sl, r2
 80007d2:	d1ae      	bne.n	8000732 <__aeabi_dadd+0x4ca>
 80007d4:	1c19      	adds	r1, r3, #0
 80007d6:	465c      	mov	r4, fp
 80007d8:	4655      	mov	r5, sl
 80007da:	e56e      	b.n	80002ba <__aeabi_dadd+0x52>
 80007dc:	2800      	cmp	r0, #0
 80007de:	d037      	beq.n	8000850 <__aeabi_dadd+0x5e8>
 80007e0:	4658      	mov	r0, fp
 80007e2:	4318      	orrs	r0, r3
 80007e4:	d013      	beq.n	800080e <__aeabi_dadd+0x5a6>
 80007e6:	2580      	movs	r5, #128	; 0x80
 80007e8:	0748      	lsls	r0, r1, #29
 80007ea:	08e4      	lsrs	r4, r4, #3
 80007ec:	08c9      	lsrs	r1, r1, #3
 80007ee:	032d      	lsls	r5, r5, #12
 80007f0:	4304      	orrs	r4, r0
 80007f2:	4229      	tst	r1, r5
 80007f4:	d0e5      	beq.n	80007c2 <__aeabi_dadd+0x55a>
 80007f6:	08d8      	lsrs	r0, r3, #3
 80007f8:	4228      	tst	r0, r5
 80007fa:	d1e2      	bne.n	80007c2 <__aeabi_dadd+0x55a>
 80007fc:	465d      	mov	r5, fp
 80007fe:	08ea      	lsrs	r2, r5, #3
 8000800:	075c      	lsls	r4, r3, #29
 8000802:	4314      	orrs	r4, r2
 8000804:	1c01      	adds	r1, r0, #0
 8000806:	e7dc      	b.n	80007c2 <__aeabi_dadd+0x55a>
 8000808:	2300      	movs	r3, #0
 800080a:	2400      	movs	r4, #0
 800080c:	e573      	b.n	80002f6 <__aeabi_dadd+0x8e>
 800080e:	4d22      	ldr	r5, [pc, #136]	; (8000898 <__aeabi_dadd+0x630>)
 8000810:	e553      	b.n	80002ba <__aeabi_dadd+0x52>
 8000812:	2300      	movs	r3, #0
 8000814:	e754      	b.n	80006c0 <__aeabi_dadd+0x458>
 8000816:	2700      	movs	r7, #0
 8000818:	2200      	movs	r2, #0
 800081a:	e6f1      	b.n	8000600 <__aeabi_dadd+0x398>
 800081c:	1c3d      	adds	r5, r7, #0
 800081e:	3d20      	subs	r5, #32
 8000820:	1c0a      	adds	r2, r1, #0
 8000822:	40ea      	lsrs	r2, r5
 8000824:	1c15      	adds	r5, r2, #0
 8000826:	2f20      	cmp	r7, #32
 8000828:	d031      	beq.n	800088e <__aeabi_dadd+0x626>
 800082a:	2640      	movs	r6, #64	; 0x40
 800082c:	1bf7      	subs	r7, r6, r7
 800082e:	40b9      	lsls	r1, r7
 8000830:	430c      	orrs	r4, r1
 8000832:	1e61      	subs	r1, r4, #1
 8000834:	418c      	sbcs	r4, r1
 8000836:	432c      	orrs	r4, r5
 8000838:	2100      	movs	r1, #0
 800083a:	e6ce      	b.n	80005da <__aeabi_dadd+0x372>
 800083c:	4a16      	ldr	r2, [pc, #88]	; (8000898 <__aeabi_dadd+0x630>)
 800083e:	2700      	movs	r7, #0
 8000840:	1c15      	adds	r5, r2, #0
 8000842:	e6dd      	b.n	8000600 <__aeabi_dadd+0x398>
 8000844:	430c      	orrs	r4, r1
 8000846:	1e61      	subs	r1, r4, #1
 8000848:	418c      	sbcs	r4, r1
 800084a:	b2e4      	uxtb	r4, r4
 800084c:	2100      	movs	r1, #0
 800084e:	e786      	b.n	800075e <__aeabi_dadd+0x4f6>
 8000850:	1c19      	adds	r1, r3, #0
 8000852:	465c      	mov	r4, fp
 8000854:	4d10      	ldr	r5, [pc, #64]	; (8000898 <__aeabi_dadd+0x630>)
 8000856:	e530      	b.n	80002ba <__aeabi_dadd+0x52>
 8000858:	1c19      	adds	r1, r3, #0
 800085a:	465c      	mov	r4, fp
 800085c:	e52d      	b.n	80002ba <__aeabi_dadd+0x52>
 800085e:	1c03      	adds	r3, r0, #0
 8000860:	433b      	orrs	r3, r7
 8000862:	d0d8      	beq.n	8000816 <__aeabi_dadd+0x5ae>
 8000864:	1c01      	adds	r1, r0, #0
 8000866:	1c3c      	adds	r4, r7, #0
 8000868:	e527      	b.n	80002ba <__aeabi_dadd+0x52>
 800086a:	2020      	movs	r0, #32
 800086c:	4240      	negs	r0, r0
 800086e:	1940      	adds	r0, r0, r5
 8000870:	1c0a      	adds	r2, r1, #0
 8000872:	40c2      	lsrs	r2, r0
 8000874:	4690      	mov	r8, r2
 8000876:	2d20      	cmp	r5, #32
 8000878:	d00b      	beq.n	8000892 <__aeabi_dadd+0x62a>
 800087a:	2040      	movs	r0, #64	; 0x40
 800087c:	1b45      	subs	r5, r0, r5
 800087e:	40a9      	lsls	r1, r5
 8000880:	430c      	orrs	r4, r1
 8000882:	1e61      	subs	r1, r4, #1
 8000884:	418c      	sbcs	r4, r1
 8000886:	4645      	mov	r5, r8
 8000888:	432c      	orrs	r4, r5
 800088a:	2100      	movs	r1, #0
 800088c:	e767      	b.n	800075e <__aeabi_dadd+0x4f6>
 800088e:	2100      	movs	r1, #0
 8000890:	e7ce      	b.n	8000830 <__aeabi_dadd+0x5c8>
 8000892:	2100      	movs	r1, #0
 8000894:	e7f4      	b.n	8000880 <__aeabi_dadd+0x618>
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	000007ff 	.word	0x000007ff
 800089c:	ff7fffff 	.word	0xff7fffff

080008a0 <__aeabi_ddiv>:
 80008a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008a2:	4656      	mov	r6, sl
 80008a4:	4644      	mov	r4, r8
 80008a6:	465f      	mov	r7, fp
 80008a8:	464d      	mov	r5, r9
 80008aa:	b4f0      	push	{r4, r5, r6, r7}
 80008ac:	1c1f      	adds	r7, r3, #0
 80008ae:	030b      	lsls	r3, r1, #12
 80008b0:	0b1b      	lsrs	r3, r3, #12
 80008b2:	4698      	mov	r8, r3
 80008b4:	004b      	lsls	r3, r1, #1
 80008b6:	b087      	sub	sp, #28
 80008b8:	1c04      	adds	r4, r0, #0
 80008ba:	4681      	mov	r9, r0
 80008bc:	0d5b      	lsrs	r3, r3, #21
 80008be:	0fc8      	lsrs	r0, r1, #31
 80008c0:	1c16      	adds	r6, r2, #0
 80008c2:	469a      	mov	sl, r3
 80008c4:	9000      	str	r0, [sp, #0]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d051      	beq.n	800096e <__aeabi_ddiv+0xce>
 80008ca:	4b6a      	ldr	r3, [pc, #424]	; (8000a74 <__aeabi_ddiv+0x1d4>)
 80008cc:	459a      	cmp	sl, r3
 80008ce:	d031      	beq.n	8000934 <__aeabi_ddiv+0x94>
 80008d0:	2280      	movs	r2, #128	; 0x80
 80008d2:	4641      	mov	r1, r8
 80008d4:	0352      	lsls	r2, r2, #13
 80008d6:	430a      	orrs	r2, r1
 80008d8:	0f63      	lsrs	r3, r4, #29
 80008da:	00d2      	lsls	r2, r2, #3
 80008dc:	431a      	orrs	r2, r3
 80008de:	4b66      	ldr	r3, [pc, #408]	; (8000a78 <__aeabi_ddiv+0x1d8>)
 80008e0:	4690      	mov	r8, r2
 80008e2:	2500      	movs	r5, #0
 80008e4:	00e2      	lsls	r2, r4, #3
 80008e6:	4691      	mov	r9, r2
 80008e8:	449a      	add	sl, r3
 80008ea:	2400      	movs	r4, #0
 80008ec:	9502      	str	r5, [sp, #8]
 80008ee:	033b      	lsls	r3, r7, #12
 80008f0:	0b1b      	lsrs	r3, r3, #12
 80008f2:	469b      	mov	fp, r3
 80008f4:	0ffd      	lsrs	r5, r7, #31
 80008f6:	007b      	lsls	r3, r7, #1
 80008f8:	1c31      	adds	r1, r6, #0
 80008fa:	0d5b      	lsrs	r3, r3, #21
 80008fc:	9501      	str	r5, [sp, #4]
 80008fe:	d060      	beq.n	80009c2 <__aeabi_ddiv+0x122>
 8000900:	4a5c      	ldr	r2, [pc, #368]	; (8000a74 <__aeabi_ddiv+0x1d4>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d054      	beq.n	80009b0 <__aeabi_ddiv+0x110>
 8000906:	2180      	movs	r1, #128	; 0x80
 8000908:	4658      	mov	r0, fp
 800090a:	0349      	lsls	r1, r1, #13
 800090c:	4301      	orrs	r1, r0
 800090e:	0f72      	lsrs	r2, r6, #29
 8000910:	00c9      	lsls	r1, r1, #3
 8000912:	4311      	orrs	r1, r2
 8000914:	4a58      	ldr	r2, [pc, #352]	; (8000a78 <__aeabi_ddiv+0x1d8>)
 8000916:	468b      	mov	fp, r1
 8000918:	189b      	adds	r3, r3, r2
 800091a:	00f1      	lsls	r1, r6, #3
 800091c:	2000      	movs	r0, #0
 800091e:	9a00      	ldr	r2, [sp, #0]
 8000920:	4304      	orrs	r4, r0
 8000922:	406a      	eors	r2, r5
 8000924:	9203      	str	r2, [sp, #12]
 8000926:	2c0f      	cmp	r4, #15
 8000928:	d900      	bls.n	800092c <__aeabi_ddiv+0x8c>
 800092a:	e0ad      	b.n	8000a88 <__aeabi_ddiv+0x1e8>
 800092c:	4e53      	ldr	r6, [pc, #332]	; (8000a7c <__aeabi_ddiv+0x1dc>)
 800092e:	00a4      	lsls	r4, r4, #2
 8000930:	5934      	ldr	r4, [r6, r4]
 8000932:	46a7      	mov	pc, r4
 8000934:	4640      	mov	r0, r8
 8000936:	4304      	orrs	r4, r0
 8000938:	d16e      	bne.n	8000a18 <__aeabi_ddiv+0x178>
 800093a:	2100      	movs	r1, #0
 800093c:	2502      	movs	r5, #2
 800093e:	2408      	movs	r4, #8
 8000940:	4688      	mov	r8, r1
 8000942:	4689      	mov	r9, r1
 8000944:	9502      	str	r5, [sp, #8]
 8000946:	e7d2      	b.n	80008ee <__aeabi_ddiv+0x4e>
 8000948:	9c00      	ldr	r4, [sp, #0]
 800094a:	9802      	ldr	r0, [sp, #8]
 800094c:	46c3      	mov	fp, r8
 800094e:	4649      	mov	r1, r9
 8000950:	9401      	str	r4, [sp, #4]
 8000952:	2802      	cmp	r0, #2
 8000954:	d064      	beq.n	8000a20 <__aeabi_ddiv+0x180>
 8000956:	2803      	cmp	r0, #3
 8000958:	d100      	bne.n	800095c <__aeabi_ddiv+0xbc>
 800095a:	e2ab      	b.n	8000eb4 <__aeabi_ddiv+0x614>
 800095c:	2801      	cmp	r0, #1
 800095e:	d000      	beq.n	8000962 <__aeabi_ddiv+0xc2>
 8000960:	e238      	b.n	8000dd4 <__aeabi_ddiv+0x534>
 8000962:	9a01      	ldr	r2, [sp, #4]
 8000964:	2400      	movs	r4, #0
 8000966:	4002      	ands	r2, r0
 8000968:	2500      	movs	r5, #0
 800096a:	46a1      	mov	r9, r4
 800096c:	e060      	b.n	8000a30 <__aeabi_ddiv+0x190>
 800096e:	4643      	mov	r3, r8
 8000970:	4323      	orrs	r3, r4
 8000972:	d04a      	beq.n	8000a0a <__aeabi_ddiv+0x16a>
 8000974:	4640      	mov	r0, r8
 8000976:	2800      	cmp	r0, #0
 8000978:	d100      	bne.n	800097c <__aeabi_ddiv+0xdc>
 800097a:	e1c0      	b.n	8000cfe <__aeabi_ddiv+0x45e>
 800097c:	f001 fa5a 	bl	8001e34 <__clzsi2>
 8000980:	1e03      	subs	r3, r0, #0
 8000982:	2b27      	cmp	r3, #39	; 0x27
 8000984:	dd00      	ble.n	8000988 <__aeabi_ddiv+0xe8>
 8000986:	e1b3      	b.n	8000cf0 <__aeabi_ddiv+0x450>
 8000988:	2128      	movs	r1, #40	; 0x28
 800098a:	1a0d      	subs	r5, r1, r0
 800098c:	1c21      	adds	r1, r4, #0
 800098e:	3b08      	subs	r3, #8
 8000990:	4642      	mov	r2, r8
 8000992:	40e9      	lsrs	r1, r5
 8000994:	409a      	lsls	r2, r3
 8000996:	1c0d      	adds	r5, r1, #0
 8000998:	4315      	orrs	r5, r2
 800099a:	1c22      	adds	r2, r4, #0
 800099c:	409a      	lsls	r2, r3
 800099e:	46a8      	mov	r8, r5
 80009a0:	4691      	mov	r9, r2
 80009a2:	4b37      	ldr	r3, [pc, #220]	; (8000a80 <__aeabi_ddiv+0x1e0>)
 80009a4:	2500      	movs	r5, #0
 80009a6:	1a1b      	subs	r3, r3, r0
 80009a8:	469a      	mov	sl, r3
 80009aa:	2400      	movs	r4, #0
 80009ac:	9502      	str	r5, [sp, #8]
 80009ae:	e79e      	b.n	80008ee <__aeabi_ddiv+0x4e>
 80009b0:	465a      	mov	r2, fp
 80009b2:	4316      	orrs	r6, r2
 80009b4:	2003      	movs	r0, #3
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d1b1      	bne.n	800091e <__aeabi_ddiv+0x7e>
 80009ba:	46b3      	mov	fp, r6
 80009bc:	2100      	movs	r1, #0
 80009be:	2002      	movs	r0, #2
 80009c0:	e7ad      	b.n	800091e <__aeabi_ddiv+0x7e>
 80009c2:	465a      	mov	r2, fp
 80009c4:	4332      	orrs	r2, r6
 80009c6:	d01b      	beq.n	8000a00 <__aeabi_ddiv+0x160>
 80009c8:	465b      	mov	r3, fp
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_ddiv+0x130>
 80009ce:	e18a      	b.n	8000ce6 <__aeabi_ddiv+0x446>
 80009d0:	4658      	mov	r0, fp
 80009d2:	f001 fa2f 	bl	8001e34 <__clzsi2>
 80009d6:	2827      	cmp	r0, #39	; 0x27
 80009d8:	dd00      	ble.n	80009dc <__aeabi_ddiv+0x13c>
 80009da:	e17d      	b.n	8000cd8 <__aeabi_ddiv+0x438>
 80009dc:	2228      	movs	r2, #40	; 0x28
 80009de:	1a17      	subs	r7, r2, r0
 80009e0:	1c01      	adds	r1, r0, #0
 80009e2:	1c32      	adds	r2, r6, #0
 80009e4:	3908      	subs	r1, #8
 80009e6:	465b      	mov	r3, fp
 80009e8:	40fa      	lsrs	r2, r7
 80009ea:	408b      	lsls	r3, r1
 80009ec:	1c17      	adds	r7, r2, #0
 80009ee:	431f      	orrs	r7, r3
 80009f0:	1c33      	adds	r3, r6, #0
 80009f2:	408b      	lsls	r3, r1
 80009f4:	46bb      	mov	fp, r7
 80009f6:	1c19      	adds	r1, r3, #0
 80009f8:	4b21      	ldr	r3, [pc, #132]	; (8000a80 <__aeabi_ddiv+0x1e0>)
 80009fa:	1a1b      	subs	r3, r3, r0
 80009fc:	2000      	movs	r0, #0
 80009fe:	e78e      	b.n	800091e <__aeabi_ddiv+0x7e>
 8000a00:	2700      	movs	r7, #0
 8000a02:	46bb      	mov	fp, r7
 8000a04:	2100      	movs	r1, #0
 8000a06:	2001      	movs	r0, #1
 8000a08:	e789      	b.n	800091e <__aeabi_ddiv+0x7e>
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	2501      	movs	r5, #1
 8000a0e:	2404      	movs	r4, #4
 8000a10:	4680      	mov	r8, r0
 8000a12:	4681      	mov	r9, r0
 8000a14:	9502      	str	r5, [sp, #8]
 8000a16:	e76a      	b.n	80008ee <__aeabi_ddiv+0x4e>
 8000a18:	2503      	movs	r5, #3
 8000a1a:	240c      	movs	r4, #12
 8000a1c:	9502      	str	r5, [sp, #8]
 8000a1e:	e766      	b.n	80008ee <__aeabi_ddiv+0x4e>
 8000a20:	9c01      	ldr	r4, [sp, #4]
 8000a22:	9403      	str	r4, [sp, #12]
 8000a24:	9d03      	ldr	r5, [sp, #12]
 8000a26:	2201      	movs	r2, #1
 8000a28:	402a      	ands	r2, r5
 8000a2a:	2400      	movs	r4, #0
 8000a2c:	4d11      	ldr	r5, [pc, #68]	; (8000a74 <__aeabi_ddiv+0x1d4>)
 8000a2e:	46a1      	mov	r9, r4
 8000a30:	2000      	movs	r0, #0
 8000a32:	2100      	movs	r1, #0
 8000a34:	0324      	lsls	r4, r4, #12
 8000a36:	0b26      	lsrs	r6, r4, #12
 8000a38:	0d0c      	lsrs	r4, r1, #20
 8000a3a:	0524      	lsls	r4, r4, #20
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <__aeabi_ddiv+0x1e4>)
 8000a3e:	4334      	orrs	r4, r6
 8000a40:	052d      	lsls	r5, r5, #20
 8000a42:	4023      	ands	r3, r4
 8000a44:	432b      	orrs	r3, r5
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	085b      	lsrs	r3, r3, #1
 8000a4a:	07d2      	lsls	r2, r2, #31
 8000a4c:	1c19      	adds	r1, r3, #0
 8000a4e:	4648      	mov	r0, r9
 8000a50:	4311      	orrs	r1, r2
 8000a52:	b007      	add	sp, #28
 8000a54:	bc3c      	pop	{r2, r3, r4, r5}
 8000a56:	4690      	mov	r8, r2
 8000a58:	4699      	mov	r9, r3
 8000a5a:	46a2      	mov	sl, r4
 8000a5c:	46ab      	mov	fp, r5
 8000a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a60:	2200      	movs	r2, #0
 8000a62:	2480      	movs	r4, #128	; 0x80
 8000a64:	0324      	lsls	r4, r4, #12
 8000a66:	4691      	mov	r9, r2
 8000a68:	4d02      	ldr	r5, [pc, #8]	; (8000a74 <__aeabi_ddiv+0x1d4>)
 8000a6a:	e7e1      	b.n	8000a30 <__aeabi_ddiv+0x190>
 8000a6c:	2400      	movs	r4, #0
 8000a6e:	2500      	movs	r5, #0
 8000a70:	46a1      	mov	r9, r4
 8000a72:	e7dd      	b.n	8000a30 <__aeabi_ddiv+0x190>
 8000a74:	000007ff 	.word	0x000007ff
 8000a78:	fffffc01 	.word	0xfffffc01
 8000a7c:	08007548 	.word	0x08007548
 8000a80:	fffffc0d 	.word	0xfffffc0d
 8000a84:	800fffff 	.word	0x800fffff
 8000a88:	4655      	mov	r5, sl
 8000a8a:	1aed      	subs	r5, r5, r3
 8000a8c:	9504      	str	r5, [sp, #16]
 8000a8e:	45d8      	cmp	r8, fp
 8000a90:	d900      	bls.n	8000a94 <__aeabi_ddiv+0x1f4>
 8000a92:	e153      	b.n	8000d3c <__aeabi_ddiv+0x49c>
 8000a94:	d100      	bne.n	8000a98 <__aeabi_ddiv+0x1f8>
 8000a96:	e14e      	b.n	8000d36 <__aeabi_ddiv+0x496>
 8000a98:	9c04      	ldr	r4, [sp, #16]
 8000a9a:	2500      	movs	r5, #0
 8000a9c:	3c01      	subs	r4, #1
 8000a9e:	464e      	mov	r6, r9
 8000aa0:	9404      	str	r4, [sp, #16]
 8000aa2:	4647      	mov	r7, r8
 8000aa4:	46a9      	mov	r9, r5
 8000aa6:	4658      	mov	r0, fp
 8000aa8:	0203      	lsls	r3, r0, #8
 8000aaa:	0e0c      	lsrs	r4, r1, #24
 8000aac:	431c      	orrs	r4, r3
 8000aae:	0209      	lsls	r1, r1, #8
 8000ab0:	0c25      	lsrs	r5, r4, #16
 8000ab2:	0423      	lsls	r3, r4, #16
 8000ab4:	0c1b      	lsrs	r3, r3, #16
 8000ab6:	9100      	str	r1, [sp, #0]
 8000ab8:	1c38      	adds	r0, r7, #0
 8000aba:	1c29      	adds	r1, r5, #0
 8000abc:	9301      	str	r3, [sp, #4]
 8000abe:	f7ff fb23 	bl	8000108 <__aeabi_uidiv>
 8000ac2:	9901      	ldr	r1, [sp, #4]
 8000ac4:	4683      	mov	fp, r0
 8000ac6:	4341      	muls	r1, r0
 8000ac8:	1c38      	adds	r0, r7, #0
 8000aca:	468a      	mov	sl, r1
 8000acc:	1c29      	adds	r1, r5, #0
 8000ace:	f7ff fb5f 	bl	8000190 <__aeabi_uidivmod>
 8000ad2:	0c33      	lsrs	r3, r6, #16
 8000ad4:	0409      	lsls	r1, r1, #16
 8000ad6:	4319      	orrs	r1, r3
 8000ad8:	458a      	cmp	sl, r1
 8000ada:	d90c      	bls.n	8000af6 <__aeabi_ddiv+0x256>
 8000adc:	465b      	mov	r3, fp
 8000ade:	1909      	adds	r1, r1, r4
 8000ae0:	3b01      	subs	r3, #1
 8000ae2:	428c      	cmp	r4, r1
 8000ae4:	d900      	bls.n	8000ae8 <__aeabi_ddiv+0x248>
 8000ae6:	e147      	b.n	8000d78 <__aeabi_ddiv+0x4d8>
 8000ae8:	458a      	cmp	sl, r1
 8000aea:	d800      	bhi.n	8000aee <__aeabi_ddiv+0x24e>
 8000aec:	e144      	b.n	8000d78 <__aeabi_ddiv+0x4d8>
 8000aee:	2202      	movs	r2, #2
 8000af0:	4252      	negs	r2, r2
 8000af2:	4493      	add	fp, r2
 8000af4:	1909      	adds	r1, r1, r4
 8000af6:	4653      	mov	r3, sl
 8000af8:	1acb      	subs	r3, r1, r3
 8000afa:	1c18      	adds	r0, r3, #0
 8000afc:	1c29      	adds	r1, r5, #0
 8000afe:	4698      	mov	r8, r3
 8000b00:	f7ff fb02 	bl	8000108 <__aeabi_uidiv>
 8000b04:	1c07      	adds	r7, r0, #0
 8000b06:	9801      	ldr	r0, [sp, #4]
 8000b08:	1c29      	adds	r1, r5, #0
 8000b0a:	4378      	muls	r0, r7
 8000b0c:	4682      	mov	sl, r0
 8000b0e:	4640      	mov	r0, r8
 8000b10:	f7ff fb3e 	bl	8000190 <__aeabi_uidivmod>
 8000b14:	0436      	lsls	r6, r6, #16
 8000b16:	040b      	lsls	r3, r1, #16
 8000b18:	0c36      	lsrs	r6, r6, #16
 8000b1a:	4333      	orrs	r3, r6
 8000b1c:	459a      	cmp	sl, r3
 8000b1e:	d909      	bls.n	8000b34 <__aeabi_ddiv+0x294>
 8000b20:	191b      	adds	r3, r3, r4
 8000b22:	1e7a      	subs	r2, r7, #1
 8000b24:	429c      	cmp	r4, r3
 8000b26:	d900      	bls.n	8000b2a <__aeabi_ddiv+0x28a>
 8000b28:	e124      	b.n	8000d74 <__aeabi_ddiv+0x4d4>
 8000b2a:	459a      	cmp	sl, r3
 8000b2c:	d800      	bhi.n	8000b30 <__aeabi_ddiv+0x290>
 8000b2e:	e121      	b.n	8000d74 <__aeabi_ddiv+0x4d4>
 8000b30:	3f02      	subs	r7, #2
 8000b32:	191b      	adds	r3, r3, r4
 8000b34:	465e      	mov	r6, fp
 8000b36:	0432      	lsls	r2, r6, #16
 8000b38:	4317      	orrs	r7, r2
 8000b3a:	0c38      	lsrs	r0, r7, #16
 8000b3c:	46bb      	mov	fp, r7
 8000b3e:	9e00      	ldr	r6, [sp, #0]
 8000b40:	9f00      	ldr	r7, [sp, #0]
 8000b42:	4651      	mov	r1, sl
 8000b44:	0c3f      	lsrs	r7, r7, #16
 8000b46:	0432      	lsls	r2, r6, #16
 8000b48:	1a5b      	subs	r3, r3, r1
 8000b4a:	4659      	mov	r1, fp
 8000b4c:	46ba      	mov	sl, r7
 8000b4e:	0c12      	lsrs	r2, r2, #16
 8000b50:	040f      	lsls	r7, r1, #16
 8000b52:	0c3f      	lsrs	r7, r7, #16
 8000b54:	4690      	mov	r8, r2
 8000b56:	4651      	mov	r1, sl
 8000b58:	437a      	muls	r2, r7
 8000b5a:	434f      	muls	r7, r1
 8000b5c:	4641      	mov	r1, r8
 8000b5e:	4341      	muls	r1, r0
 8000b60:	4656      	mov	r6, sl
 8000b62:	4370      	muls	r0, r6
 8000b64:	19cf      	adds	r7, r1, r7
 8000b66:	0c16      	lsrs	r6, r2, #16
 8000b68:	19be      	adds	r6, r7, r6
 8000b6a:	42b1      	cmp	r1, r6
 8000b6c:	d902      	bls.n	8000b74 <__aeabi_ddiv+0x2d4>
 8000b6e:	2780      	movs	r7, #128	; 0x80
 8000b70:	027f      	lsls	r7, r7, #9
 8000b72:	19c0      	adds	r0, r0, r7
 8000b74:	0c31      	lsrs	r1, r6, #16
 8000b76:	0412      	lsls	r2, r2, #16
 8000b78:	0436      	lsls	r6, r6, #16
 8000b7a:	0c12      	lsrs	r2, r2, #16
 8000b7c:	1840      	adds	r0, r0, r1
 8000b7e:	18b6      	adds	r6, r6, r2
 8000b80:	4283      	cmp	r3, r0
 8000b82:	d200      	bcs.n	8000b86 <__aeabi_ddiv+0x2e6>
 8000b84:	e0c4      	b.n	8000d10 <__aeabi_ddiv+0x470>
 8000b86:	d100      	bne.n	8000b8a <__aeabi_ddiv+0x2ea>
 8000b88:	e0be      	b.n	8000d08 <__aeabi_ddiv+0x468>
 8000b8a:	1a19      	subs	r1, r3, r0
 8000b8c:	4648      	mov	r0, r9
 8000b8e:	1b86      	subs	r6, r0, r6
 8000b90:	45b1      	cmp	r9, r6
 8000b92:	41bf      	sbcs	r7, r7
 8000b94:	427f      	negs	r7, r7
 8000b96:	1bcf      	subs	r7, r1, r7
 8000b98:	42a7      	cmp	r7, r4
 8000b9a:	d100      	bne.n	8000b9e <__aeabi_ddiv+0x2fe>
 8000b9c:	e113      	b.n	8000dc6 <__aeabi_ddiv+0x526>
 8000b9e:	1c29      	adds	r1, r5, #0
 8000ba0:	1c38      	adds	r0, r7, #0
 8000ba2:	f7ff fab1 	bl	8000108 <__aeabi_uidiv>
 8000ba6:	9901      	ldr	r1, [sp, #4]
 8000ba8:	9002      	str	r0, [sp, #8]
 8000baa:	4341      	muls	r1, r0
 8000bac:	1c38      	adds	r0, r7, #0
 8000bae:	4689      	mov	r9, r1
 8000bb0:	1c29      	adds	r1, r5, #0
 8000bb2:	f7ff faed 	bl	8000190 <__aeabi_uidivmod>
 8000bb6:	0c33      	lsrs	r3, r6, #16
 8000bb8:	0409      	lsls	r1, r1, #16
 8000bba:	4319      	orrs	r1, r3
 8000bbc:	4589      	cmp	r9, r1
 8000bbe:	d90c      	bls.n	8000bda <__aeabi_ddiv+0x33a>
 8000bc0:	9b02      	ldr	r3, [sp, #8]
 8000bc2:	1909      	adds	r1, r1, r4
 8000bc4:	3b01      	subs	r3, #1
 8000bc6:	428c      	cmp	r4, r1
 8000bc8:	d900      	bls.n	8000bcc <__aeabi_ddiv+0x32c>
 8000bca:	e0ff      	b.n	8000dcc <__aeabi_ddiv+0x52c>
 8000bcc:	4589      	cmp	r9, r1
 8000bce:	d800      	bhi.n	8000bd2 <__aeabi_ddiv+0x332>
 8000bd0:	e0fc      	b.n	8000dcc <__aeabi_ddiv+0x52c>
 8000bd2:	9f02      	ldr	r7, [sp, #8]
 8000bd4:	1909      	adds	r1, r1, r4
 8000bd6:	3f02      	subs	r7, #2
 8000bd8:	9702      	str	r7, [sp, #8]
 8000bda:	464f      	mov	r7, r9
 8000bdc:	1bcf      	subs	r7, r1, r7
 8000bde:	1c38      	adds	r0, r7, #0
 8000be0:	1c29      	adds	r1, r5, #0
 8000be2:	9705      	str	r7, [sp, #20]
 8000be4:	f7ff fa90 	bl	8000108 <__aeabi_uidiv>
 8000be8:	1c07      	adds	r7, r0, #0
 8000bea:	9801      	ldr	r0, [sp, #4]
 8000bec:	1c29      	adds	r1, r5, #0
 8000bee:	4378      	muls	r0, r7
 8000bf0:	4681      	mov	r9, r0
 8000bf2:	9805      	ldr	r0, [sp, #20]
 8000bf4:	f7ff facc 	bl	8000190 <__aeabi_uidivmod>
 8000bf8:	0436      	lsls	r6, r6, #16
 8000bfa:	0409      	lsls	r1, r1, #16
 8000bfc:	0c36      	lsrs	r6, r6, #16
 8000bfe:	430e      	orrs	r6, r1
 8000c00:	45b1      	cmp	r9, r6
 8000c02:	d909      	bls.n	8000c18 <__aeabi_ddiv+0x378>
 8000c04:	1936      	adds	r6, r6, r4
 8000c06:	1e7b      	subs	r3, r7, #1
 8000c08:	42b4      	cmp	r4, r6
 8000c0a:	d900      	bls.n	8000c0e <__aeabi_ddiv+0x36e>
 8000c0c:	e0e0      	b.n	8000dd0 <__aeabi_ddiv+0x530>
 8000c0e:	45b1      	cmp	r9, r6
 8000c10:	d800      	bhi.n	8000c14 <__aeabi_ddiv+0x374>
 8000c12:	e0dd      	b.n	8000dd0 <__aeabi_ddiv+0x530>
 8000c14:	3f02      	subs	r7, #2
 8000c16:	1936      	adds	r6, r6, r4
 8000c18:	9d02      	ldr	r5, [sp, #8]
 8000c1a:	4649      	mov	r1, r9
 8000c1c:	1a76      	subs	r6, r6, r1
 8000c1e:	0429      	lsls	r1, r5, #16
 8000c20:	4339      	orrs	r1, r7
 8000c22:	040b      	lsls	r3, r1, #16
 8000c24:	4657      	mov	r7, sl
 8000c26:	0c0a      	lsrs	r2, r1, #16
 8000c28:	0c1b      	lsrs	r3, r3, #16
 8000c2a:	4640      	mov	r0, r8
 8000c2c:	4645      	mov	r5, r8
 8000c2e:	4358      	muls	r0, r3
 8000c30:	4355      	muls	r5, r2
 8000c32:	437b      	muls	r3, r7
 8000c34:	437a      	muls	r2, r7
 8000c36:	18eb      	adds	r3, r5, r3
 8000c38:	0c07      	lsrs	r7, r0, #16
 8000c3a:	19db      	adds	r3, r3, r7
 8000c3c:	429d      	cmp	r5, r3
 8000c3e:	d902      	bls.n	8000c46 <__aeabi_ddiv+0x3a6>
 8000c40:	2580      	movs	r5, #128	; 0x80
 8000c42:	026d      	lsls	r5, r5, #9
 8000c44:	1952      	adds	r2, r2, r5
 8000c46:	0c1d      	lsrs	r5, r3, #16
 8000c48:	0400      	lsls	r0, r0, #16
 8000c4a:	041b      	lsls	r3, r3, #16
 8000c4c:	0c00      	lsrs	r0, r0, #16
 8000c4e:	1952      	adds	r2, r2, r5
 8000c50:	181b      	adds	r3, r3, r0
 8000c52:	4296      	cmp	r6, r2
 8000c54:	d335      	bcc.n	8000cc2 <__aeabi_ddiv+0x422>
 8000c56:	d100      	bne.n	8000c5a <__aeabi_ddiv+0x3ba>
 8000c58:	e0fc      	b.n	8000e54 <__aeabi_ddiv+0x5b4>
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	4319      	orrs	r1, r3
 8000c5e:	9e04      	ldr	r6, [sp, #16]
 8000c60:	4f99      	ldr	r7, [pc, #612]	; (8000ec8 <__aeabi_ddiv+0x628>)
 8000c62:	19f5      	adds	r5, r6, r7
 8000c64:	2d00      	cmp	r5, #0
 8000c66:	dc00      	bgt.n	8000c6a <__aeabi_ddiv+0x3ca>
 8000c68:	e0a1      	b.n	8000dae <__aeabi_ddiv+0x50e>
 8000c6a:	0748      	lsls	r0, r1, #29
 8000c6c:	d009      	beq.n	8000c82 <__aeabi_ddiv+0x3e2>
 8000c6e:	230f      	movs	r3, #15
 8000c70:	400b      	ands	r3, r1
 8000c72:	2b04      	cmp	r3, #4
 8000c74:	d005      	beq.n	8000c82 <__aeabi_ddiv+0x3e2>
 8000c76:	1d0b      	adds	r3, r1, #4
 8000c78:	428b      	cmp	r3, r1
 8000c7a:	4189      	sbcs	r1, r1
 8000c7c:	4249      	negs	r1, r1
 8000c7e:	448b      	add	fp, r1
 8000c80:	1c19      	adds	r1, r3, #0
 8000c82:	465a      	mov	r2, fp
 8000c84:	01d2      	lsls	r2, r2, #7
 8000c86:	d507      	bpl.n	8000c98 <__aeabi_ddiv+0x3f8>
 8000c88:	4b90      	ldr	r3, [pc, #576]	; (8000ecc <__aeabi_ddiv+0x62c>)
 8000c8a:	465c      	mov	r4, fp
 8000c8c:	9e04      	ldr	r6, [sp, #16]
 8000c8e:	2780      	movs	r7, #128	; 0x80
 8000c90:	401c      	ands	r4, r3
 8000c92:	00ff      	lsls	r7, r7, #3
 8000c94:	46a3      	mov	fp, r4
 8000c96:	19f5      	adds	r5, r6, r7
 8000c98:	4b8d      	ldr	r3, [pc, #564]	; (8000ed0 <__aeabi_ddiv+0x630>)
 8000c9a:	429d      	cmp	r5, r3
 8000c9c:	dd7a      	ble.n	8000d94 <__aeabi_ddiv+0x4f4>
 8000c9e:	9c03      	ldr	r4, [sp, #12]
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	4022      	ands	r2, r4
 8000ca4:	2400      	movs	r4, #0
 8000ca6:	4d8b      	ldr	r5, [pc, #556]	; (8000ed4 <__aeabi_ddiv+0x634>)
 8000ca8:	46a1      	mov	r9, r4
 8000caa:	e6c1      	b.n	8000a30 <__aeabi_ddiv+0x190>
 8000cac:	2480      	movs	r4, #128	; 0x80
 8000cae:	0324      	lsls	r4, r4, #12
 8000cb0:	4647      	mov	r7, r8
 8000cb2:	4227      	tst	r7, r4
 8000cb4:	d14c      	bne.n	8000d50 <__aeabi_ddiv+0x4b0>
 8000cb6:	433c      	orrs	r4, r7
 8000cb8:	0324      	lsls	r4, r4, #12
 8000cba:	0b24      	lsrs	r4, r4, #12
 8000cbc:	9a00      	ldr	r2, [sp, #0]
 8000cbe:	4d85      	ldr	r5, [pc, #532]	; (8000ed4 <__aeabi_ddiv+0x634>)
 8000cc0:	e6b6      	b.n	8000a30 <__aeabi_ddiv+0x190>
 8000cc2:	1936      	adds	r6, r6, r4
 8000cc4:	1e48      	subs	r0, r1, #1
 8000cc6:	42b4      	cmp	r4, r6
 8000cc8:	d95e      	bls.n	8000d88 <__aeabi_ddiv+0x4e8>
 8000cca:	1c01      	adds	r1, r0, #0
 8000ccc:	4296      	cmp	r6, r2
 8000cce:	d1c4      	bne.n	8000c5a <__aeabi_ddiv+0x3ba>
 8000cd0:	9e00      	ldr	r6, [sp, #0]
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	d1c1      	bne.n	8000c5a <__aeabi_ddiv+0x3ba>
 8000cd6:	e7c2      	b.n	8000c5e <__aeabi_ddiv+0x3be>
 8000cd8:	1c03      	adds	r3, r0, #0
 8000cda:	3b28      	subs	r3, #40	; 0x28
 8000cdc:	1c31      	adds	r1, r6, #0
 8000cde:	4099      	lsls	r1, r3
 8000ce0:	468b      	mov	fp, r1
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	e688      	b.n	80009f8 <__aeabi_ddiv+0x158>
 8000ce6:	1c30      	adds	r0, r6, #0
 8000ce8:	f001 f8a4 	bl	8001e34 <__clzsi2>
 8000cec:	3020      	adds	r0, #32
 8000cee:	e672      	b.n	80009d6 <__aeabi_ddiv+0x136>
 8000cf0:	3b28      	subs	r3, #40	; 0x28
 8000cf2:	1c21      	adds	r1, r4, #0
 8000cf4:	4099      	lsls	r1, r3
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	4688      	mov	r8, r1
 8000cfa:	4691      	mov	r9, r2
 8000cfc:	e651      	b.n	80009a2 <__aeabi_ddiv+0x102>
 8000cfe:	1c20      	adds	r0, r4, #0
 8000d00:	f001 f898 	bl	8001e34 <__clzsi2>
 8000d04:	3020      	adds	r0, #32
 8000d06:	e63b      	b.n	8000980 <__aeabi_ddiv+0xe0>
 8000d08:	2100      	movs	r1, #0
 8000d0a:	45b1      	cmp	r9, r6
 8000d0c:	d300      	bcc.n	8000d10 <__aeabi_ddiv+0x470>
 8000d0e:	e73d      	b.n	8000b8c <__aeabi_ddiv+0x2ec>
 8000d10:	9f00      	ldr	r7, [sp, #0]
 8000d12:	465a      	mov	r2, fp
 8000d14:	44b9      	add	r9, r7
 8000d16:	45b9      	cmp	r9, r7
 8000d18:	41bf      	sbcs	r7, r7
 8000d1a:	427f      	negs	r7, r7
 8000d1c:	193f      	adds	r7, r7, r4
 8000d1e:	18fb      	adds	r3, r7, r3
 8000d20:	3a01      	subs	r2, #1
 8000d22:	429c      	cmp	r4, r3
 8000d24:	d21e      	bcs.n	8000d64 <__aeabi_ddiv+0x4c4>
 8000d26:	4298      	cmp	r0, r3
 8000d28:	d900      	bls.n	8000d2c <__aeabi_ddiv+0x48c>
 8000d2a:	e07e      	b.n	8000e2a <__aeabi_ddiv+0x58a>
 8000d2c:	d100      	bne.n	8000d30 <__aeabi_ddiv+0x490>
 8000d2e:	e0b5      	b.n	8000e9c <__aeabi_ddiv+0x5fc>
 8000d30:	1a19      	subs	r1, r3, r0
 8000d32:	4693      	mov	fp, r2
 8000d34:	e72a      	b.n	8000b8c <__aeabi_ddiv+0x2ec>
 8000d36:	4589      	cmp	r9, r1
 8000d38:	d800      	bhi.n	8000d3c <__aeabi_ddiv+0x49c>
 8000d3a:	e6ad      	b.n	8000a98 <__aeabi_ddiv+0x1f8>
 8000d3c:	4648      	mov	r0, r9
 8000d3e:	4646      	mov	r6, r8
 8000d40:	4642      	mov	r2, r8
 8000d42:	0877      	lsrs	r7, r6, #1
 8000d44:	07d3      	lsls	r3, r2, #31
 8000d46:	0846      	lsrs	r6, r0, #1
 8000d48:	07c0      	lsls	r0, r0, #31
 8000d4a:	431e      	orrs	r6, r3
 8000d4c:	4681      	mov	r9, r0
 8000d4e:	e6aa      	b.n	8000aa6 <__aeabi_ddiv+0x206>
 8000d50:	4658      	mov	r0, fp
 8000d52:	4220      	tst	r0, r4
 8000d54:	d112      	bne.n	8000d7c <__aeabi_ddiv+0x4dc>
 8000d56:	4304      	orrs	r4, r0
 8000d58:	0324      	lsls	r4, r4, #12
 8000d5a:	1c2a      	adds	r2, r5, #0
 8000d5c:	0b24      	lsrs	r4, r4, #12
 8000d5e:	4689      	mov	r9, r1
 8000d60:	4d5c      	ldr	r5, [pc, #368]	; (8000ed4 <__aeabi_ddiv+0x634>)
 8000d62:	e665      	b.n	8000a30 <__aeabi_ddiv+0x190>
 8000d64:	42a3      	cmp	r3, r4
 8000d66:	d1e3      	bne.n	8000d30 <__aeabi_ddiv+0x490>
 8000d68:	9f00      	ldr	r7, [sp, #0]
 8000d6a:	454f      	cmp	r7, r9
 8000d6c:	d9db      	bls.n	8000d26 <__aeabi_ddiv+0x486>
 8000d6e:	1a21      	subs	r1, r4, r0
 8000d70:	4693      	mov	fp, r2
 8000d72:	e70b      	b.n	8000b8c <__aeabi_ddiv+0x2ec>
 8000d74:	1c17      	adds	r7, r2, #0
 8000d76:	e6dd      	b.n	8000b34 <__aeabi_ddiv+0x294>
 8000d78:	469b      	mov	fp, r3
 8000d7a:	e6bc      	b.n	8000af6 <__aeabi_ddiv+0x256>
 8000d7c:	433c      	orrs	r4, r7
 8000d7e:	0324      	lsls	r4, r4, #12
 8000d80:	0b24      	lsrs	r4, r4, #12
 8000d82:	9a00      	ldr	r2, [sp, #0]
 8000d84:	4d53      	ldr	r5, [pc, #332]	; (8000ed4 <__aeabi_ddiv+0x634>)
 8000d86:	e653      	b.n	8000a30 <__aeabi_ddiv+0x190>
 8000d88:	42b2      	cmp	r2, r6
 8000d8a:	d859      	bhi.n	8000e40 <__aeabi_ddiv+0x5a0>
 8000d8c:	d100      	bne.n	8000d90 <__aeabi_ddiv+0x4f0>
 8000d8e:	e08a      	b.n	8000ea6 <__aeabi_ddiv+0x606>
 8000d90:	1c01      	adds	r1, r0, #0
 8000d92:	e762      	b.n	8000c5a <__aeabi_ddiv+0x3ba>
 8000d94:	465f      	mov	r7, fp
 8000d96:	08c9      	lsrs	r1, r1, #3
 8000d98:	077b      	lsls	r3, r7, #29
 8000d9a:	9e03      	ldr	r6, [sp, #12]
 8000d9c:	430b      	orrs	r3, r1
 8000d9e:	027c      	lsls	r4, r7, #9
 8000da0:	056d      	lsls	r5, r5, #21
 8000da2:	2201      	movs	r2, #1
 8000da4:	4699      	mov	r9, r3
 8000da6:	0b24      	lsrs	r4, r4, #12
 8000da8:	0d6d      	lsrs	r5, r5, #21
 8000daa:	4032      	ands	r2, r6
 8000dac:	e640      	b.n	8000a30 <__aeabi_ddiv+0x190>
 8000dae:	4b4a      	ldr	r3, [pc, #296]	; (8000ed8 <__aeabi_ddiv+0x638>)
 8000db0:	9f04      	ldr	r7, [sp, #16]
 8000db2:	1bdb      	subs	r3, r3, r7
 8000db4:	2b38      	cmp	r3, #56	; 0x38
 8000db6:	dd10      	ble.n	8000dda <__aeabi_ddiv+0x53a>
 8000db8:	9c03      	ldr	r4, [sp, #12]
 8000dba:	2201      	movs	r2, #1
 8000dbc:	4022      	ands	r2, r4
 8000dbe:	2400      	movs	r4, #0
 8000dc0:	2500      	movs	r5, #0
 8000dc2:	46a1      	mov	r9, r4
 8000dc4:	e634      	b.n	8000a30 <__aeabi_ddiv+0x190>
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	4249      	negs	r1, r1
 8000dca:	e748      	b.n	8000c5e <__aeabi_ddiv+0x3be>
 8000dcc:	9302      	str	r3, [sp, #8]
 8000dce:	e704      	b.n	8000bda <__aeabi_ddiv+0x33a>
 8000dd0:	1c1f      	adds	r7, r3, #0
 8000dd2:	e721      	b.n	8000c18 <__aeabi_ddiv+0x378>
 8000dd4:	9c01      	ldr	r4, [sp, #4]
 8000dd6:	9403      	str	r4, [sp, #12]
 8000dd8:	e741      	b.n	8000c5e <__aeabi_ddiv+0x3be>
 8000dda:	2b1f      	cmp	r3, #31
 8000ddc:	dc40      	bgt.n	8000e60 <__aeabi_ddiv+0x5c0>
 8000dde:	483f      	ldr	r0, [pc, #252]	; (8000edc <__aeabi_ddiv+0x63c>)
 8000de0:	9f04      	ldr	r7, [sp, #16]
 8000de2:	1c0c      	adds	r4, r1, #0
 8000de4:	183a      	adds	r2, r7, r0
 8000de6:	4658      	mov	r0, fp
 8000de8:	4091      	lsls	r1, r2
 8000dea:	40dc      	lsrs	r4, r3
 8000dec:	4090      	lsls	r0, r2
 8000dee:	4320      	orrs	r0, r4
 8000df0:	1c0a      	adds	r2, r1, #0
 8000df2:	1e51      	subs	r1, r2, #1
 8000df4:	418a      	sbcs	r2, r1
 8000df6:	1c01      	adds	r1, r0, #0
 8000df8:	4311      	orrs	r1, r2
 8000dfa:	465a      	mov	r2, fp
 8000dfc:	40da      	lsrs	r2, r3
 8000dfe:	1c13      	adds	r3, r2, #0
 8000e00:	0748      	lsls	r0, r1, #29
 8000e02:	d009      	beq.n	8000e18 <__aeabi_ddiv+0x578>
 8000e04:	220f      	movs	r2, #15
 8000e06:	400a      	ands	r2, r1
 8000e08:	2a04      	cmp	r2, #4
 8000e0a:	d005      	beq.n	8000e18 <__aeabi_ddiv+0x578>
 8000e0c:	1d0a      	adds	r2, r1, #4
 8000e0e:	428a      	cmp	r2, r1
 8000e10:	4189      	sbcs	r1, r1
 8000e12:	4249      	negs	r1, r1
 8000e14:	185b      	adds	r3, r3, r1
 8000e16:	1c11      	adds	r1, r2, #0
 8000e18:	021a      	lsls	r2, r3, #8
 8000e1a:	d534      	bpl.n	8000e86 <__aeabi_ddiv+0x5e6>
 8000e1c:	9c03      	ldr	r4, [sp, #12]
 8000e1e:	2201      	movs	r2, #1
 8000e20:	4022      	ands	r2, r4
 8000e22:	2400      	movs	r4, #0
 8000e24:	2501      	movs	r5, #1
 8000e26:	46a1      	mov	r9, r4
 8000e28:	e602      	b.n	8000a30 <__aeabi_ddiv+0x190>
 8000e2a:	9f00      	ldr	r7, [sp, #0]
 8000e2c:	2102      	movs	r1, #2
 8000e2e:	4249      	negs	r1, r1
 8000e30:	44b9      	add	r9, r7
 8000e32:	448b      	add	fp, r1
 8000e34:	45b9      	cmp	r9, r7
 8000e36:	4189      	sbcs	r1, r1
 8000e38:	4249      	negs	r1, r1
 8000e3a:	1909      	adds	r1, r1, r4
 8000e3c:	18cb      	adds	r3, r1, r3
 8000e3e:	e6a4      	b.n	8000b8a <__aeabi_ddiv+0x2ea>
 8000e40:	9d00      	ldr	r5, [sp, #0]
 8000e42:	1e88      	subs	r0, r1, #2
 8000e44:	0069      	lsls	r1, r5, #1
 8000e46:	42a9      	cmp	r1, r5
 8000e48:	41ad      	sbcs	r5, r5
 8000e4a:	426d      	negs	r5, r5
 8000e4c:	192c      	adds	r4, r5, r4
 8000e4e:	1936      	adds	r6, r6, r4
 8000e50:	9100      	str	r1, [sp, #0]
 8000e52:	e73a      	b.n	8000cca <__aeabi_ddiv+0x42a>
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d000      	beq.n	8000e5a <__aeabi_ddiv+0x5ba>
 8000e58:	e733      	b.n	8000cc2 <__aeabi_ddiv+0x422>
 8000e5a:	2400      	movs	r4, #0
 8000e5c:	9400      	str	r4, [sp, #0]
 8000e5e:	e737      	b.n	8000cd0 <__aeabi_ddiv+0x430>
 8000e60:	4a1f      	ldr	r2, [pc, #124]	; (8000ee0 <__aeabi_ddiv+0x640>)
 8000e62:	9c04      	ldr	r4, [sp, #16]
 8000e64:	465d      	mov	r5, fp
 8000e66:	1b12      	subs	r2, r2, r4
 8000e68:	40d5      	lsrs	r5, r2
 8000e6a:	1c2a      	adds	r2, r5, #0
 8000e6c:	2b20      	cmp	r3, #32
 8000e6e:	d01f      	beq.n	8000eb0 <__aeabi_ddiv+0x610>
 8000e70:	4e1c      	ldr	r6, [pc, #112]	; (8000ee4 <__aeabi_ddiv+0x644>)
 8000e72:	465f      	mov	r7, fp
 8000e74:	19a3      	adds	r3, r4, r6
 8000e76:	409f      	lsls	r7, r3
 8000e78:	1c3b      	adds	r3, r7, #0
 8000e7a:	4319      	orrs	r1, r3
 8000e7c:	1e4b      	subs	r3, r1, #1
 8000e7e:	4199      	sbcs	r1, r3
 8000e80:	4311      	orrs	r1, r2
 8000e82:	2300      	movs	r3, #0
 8000e84:	e7bc      	b.n	8000e00 <__aeabi_ddiv+0x560>
 8000e86:	075a      	lsls	r2, r3, #29
 8000e88:	08c9      	lsrs	r1, r1, #3
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	9f03      	ldr	r7, [sp, #12]
 8000e8e:	4691      	mov	r9, r2
 8000e90:	025b      	lsls	r3, r3, #9
 8000e92:	2201      	movs	r2, #1
 8000e94:	0b1c      	lsrs	r4, r3, #12
 8000e96:	403a      	ands	r2, r7
 8000e98:	2500      	movs	r5, #0
 8000e9a:	e5c9      	b.n	8000a30 <__aeabi_ddiv+0x190>
 8000e9c:	454e      	cmp	r6, r9
 8000e9e:	d8c4      	bhi.n	8000e2a <__aeabi_ddiv+0x58a>
 8000ea0:	4693      	mov	fp, r2
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	e672      	b.n	8000b8c <__aeabi_ddiv+0x2ec>
 8000ea6:	9f00      	ldr	r7, [sp, #0]
 8000ea8:	429f      	cmp	r7, r3
 8000eaa:	d3c9      	bcc.n	8000e40 <__aeabi_ddiv+0x5a0>
 8000eac:	1c01      	adds	r1, r0, #0
 8000eae:	e70f      	b.n	8000cd0 <__aeabi_ddiv+0x430>
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	e7e2      	b.n	8000e7a <__aeabi_ddiv+0x5da>
 8000eb4:	2480      	movs	r4, #128	; 0x80
 8000eb6:	0324      	lsls	r4, r4, #12
 8000eb8:	465f      	mov	r7, fp
 8000eba:	433c      	orrs	r4, r7
 8000ebc:	0324      	lsls	r4, r4, #12
 8000ebe:	0b24      	lsrs	r4, r4, #12
 8000ec0:	9a01      	ldr	r2, [sp, #4]
 8000ec2:	4689      	mov	r9, r1
 8000ec4:	4d03      	ldr	r5, [pc, #12]	; (8000ed4 <__aeabi_ddiv+0x634>)
 8000ec6:	e5b3      	b.n	8000a30 <__aeabi_ddiv+0x190>
 8000ec8:	000003ff 	.word	0x000003ff
 8000ecc:	feffffff 	.word	0xfeffffff
 8000ed0:	000007fe 	.word	0x000007fe
 8000ed4:	000007ff 	.word	0x000007ff
 8000ed8:	fffffc02 	.word	0xfffffc02
 8000edc:	0000041e 	.word	0x0000041e
 8000ee0:	fffffbe2 	.word	0xfffffbe2
 8000ee4:	0000043e 	.word	0x0000043e

08000ee8 <__eqdf2>:
 8000ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eea:	465f      	mov	r7, fp
 8000eec:	4656      	mov	r6, sl
 8000eee:	464d      	mov	r5, r9
 8000ef0:	4644      	mov	r4, r8
 8000ef2:	b4f0      	push	{r4, r5, r6, r7}
 8000ef4:	1c0d      	adds	r5, r1, #0
 8000ef6:	1c04      	adds	r4, r0, #0
 8000ef8:	4680      	mov	r8, r0
 8000efa:	0fe8      	lsrs	r0, r5, #31
 8000efc:	4681      	mov	r9, r0
 8000efe:	0318      	lsls	r0, r3, #12
 8000f00:	030f      	lsls	r7, r1, #12
 8000f02:	0b00      	lsrs	r0, r0, #12
 8000f04:	0b3f      	lsrs	r7, r7, #12
 8000f06:	b083      	sub	sp, #12
 8000f08:	4684      	mov	ip, r0
 8000f0a:	481b      	ldr	r0, [pc, #108]	; (8000f78 <__eqdf2+0x90>)
 8000f0c:	9700      	str	r7, [sp, #0]
 8000f0e:	0049      	lsls	r1, r1, #1
 8000f10:	005e      	lsls	r6, r3, #1
 8000f12:	0fdf      	lsrs	r7, r3, #31
 8000f14:	0d49      	lsrs	r1, r1, #21
 8000f16:	4692      	mov	sl, r2
 8000f18:	0d76      	lsrs	r6, r6, #21
 8000f1a:	46bb      	mov	fp, r7
 8000f1c:	4281      	cmp	r1, r0
 8000f1e:	d00c      	beq.n	8000f3a <__eqdf2+0x52>
 8000f20:	4815      	ldr	r0, [pc, #84]	; (8000f78 <__eqdf2+0x90>)
 8000f22:	4286      	cmp	r6, r0
 8000f24:	d010      	beq.n	8000f48 <__eqdf2+0x60>
 8000f26:	2001      	movs	r0, #1
 8000f28:	42b1      	cmp	r1, r6
 8000f2a:	d015      	beq.n	8000f58 <__eqdf2+0x70>
 8000f2c:	b003      	add	sp, #12
 8000f2e:	bc3c      	pop	{r2, r3, r4, r5}
 8000f30:	4690      	mov	r8, r2
 8000f32:	4699      	mov	r9, r3
 8000f34:	46a2      	mov	sl, r4
 8000f36:	46ab      	mov	fp, r5
 8000f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f3a:	9f00      	ldr	r7, [sp, #0]
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	4327      	orrs	r7, r4
 8000f40:	d1f4      	bne.n	8000f2c <__eqdf2+0x44>
 8000f42:	480d      	ldr	r0, [pc, #52]	; (8000f78 <__eqdf2+0x90>)
 8000f44:	4286      	cmp	r6, r0
 8000f46:	d1ee      	bne.n	8000f26 <__eqdf2+0x3e>
 8000f48:	4660      	mov	r0, ip
 8000f4a:	4302      	orrs	r2, r0
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	2a00      	cmp	r2, #0
 8000f50:	d1ec      	bne.n	8000f2c <__eqdf2+0x44>
 8000f52:	2001      	movs	r0, #1
 8000f54:	42b1      	cmp	r1, r6
 8000f56:	d1e9      	bne.n	8000f2c <__eqdf2+0x44>
 8000f58:	9b00      	ldr	r3, [sp, #0]
 8000f5a:	4563      	cmp	r3, ip
 8000f5c:	d1e6      	bne.n	8000f2c <__eqdf2+0x44>
 8000f5e:	45d0      	cmp	r8, sl
 8000f60:	d1e4      	bne.n	8000f2c <__eqdf2+0x44>
 8000f62:	45d9      	cmp	r9, fp
 8000f64:	d006      	beq.n	8000f74 <__eqdf2+0x8c>
 8000f66:	2900      	cmp	r1, #0
 8000f68:	d1e0      	bne.n	8000f2c <__eqdf2+0x44>
 8000f6a:	431c      	orrs	r4, r3
 8000f6c:	1c20      	adds	r0, r4, #0
 8000f6e:	1e44      	subs	r4, r0, #1
 8000f70:	41a0      	sbcs	r0, r4
 8000f72:	e7db      	b.n	8000f2c <__eqdf2+0x44>
 8000f74:	2000      	movs	r0, #0
 8000f76:	e7d9      	b.n	8000f2c <__eqdf2+0x44>
 8000f78:	000007ff 	.word	0x000007ff

08000f7c <__gedf2>:
 8000f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f7e:	465f      	mov	r7, fp
 8000f80:	4656      	mov	r6, sl
 8000f82:	464d      	mov	r5, r9
 8000f84:	4644      	mov	r4, r8
 8000f86:	b4f0      	push	{r4, r5, r6, r7}
 8000f88:	0fcd      	lsrs	r5, r1, #31
 8000f8a:	0fde      	lsrs	r6, r3, #31
 8000f8c:	46ac      	mov	ip, r5
 8000f8e:	031d      	lsls	r5, r3, #12
 8000f90:	0b2d      	lsrs	r5, r5, #12
 8000f92:	46b1      	mov	r9, r6
 8000f94:	4e37      	ldr	r6, [pc, #220]	; (8001074 <__gedf2+0xf8>)
 8000f96:	030f      	lsls	r7, r1, #12
 8000f98:	004c      	lsls	r4, r1, #1
 8000f9a:	46ab      	mov	fp, r5
 8000f9c:	005d      	lsls	r5, r3, #1
 8000f9e:	4680      	mov	r8, r0
 8000fa0:	0b3f      	lsrs	r7, r7, #12
 8000fa2:	0d64      	lsrs	r4, r4, #21
 8000fa4:	4692      	mov	sl, r2
 8000fa6:	0d6d      	lsrs	r5, r5, #21
 8000fa8:	42b4      	cmp	r4, r6
 8000faa:	d032      	beq.n	8001012 <__gedf2+0x96>
 8000fac:	4e31      	ldr	r6, [pc, #196]	; (8001074 <__gedf2+0xf8>)
 8000fae:	42b5      	cmp	r5, r6
 8000fb0:	d035      	beq.n	800101e <__gedf2+0xa2>
 8000fb2:	2c00      	cmp	r4, #0
 8000fb4:	d10e      	bne.n	8000fd4 <__gedf2+0x58>
 8000fb6:	4338      	orrs	r0, r7
 8000fb8:	4241      	negs	r1, r0
 8000fba:	4141      	adcs	r1, r0
 8000fbc:	1c08      	adds	r0, r1, #0
 8000fbe:	2d00      	cmp	r5, #0
 8000fc0:	d00b      	beq.n	8000fda <__gedf2+0x5e>
 8000fc2:	2900      	cmp	r1, #0
 8000fc4:	d119      	bne.n	8000ffa <__gedf2+0x7e>
 8000fc6:	45cc      	cmp	ip, r9
 8000fc8:	d02d      	beq.n	8001026 <__gedf2+0xaa>
 8000fca:	4665      	mov	r5, ip
 8000fcc:	4268      	negs	r0, r5
 8000fce:	2301      	movs	r3, #1
 8000fd0:	4318      	orrs	r0, r3
 8000fd2:	e018      	b.n	8001006 <__gedf2+0x8a>
 8000fd4:	2d00      	cmp	r5, #0
 8000fd6:	d1f6      	bne.n	8000fc6 <__gedf2+0x4a>
 8000fd8:	1c28      	adds	r0, r5, #0
 8000fda:	4659      	mov	r1, fp
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	4253      	negs	r3, r2
 8000fe0:	4153      	adcs	r3, r2
 8000fe2:	2800      	cmp	r0, #0
 8000fe4:	d106      	bne.n	8000ff4 <__gedf2+0x78>
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d0ed      	beq.n	8000fc6 <__gedf2+0x4a>
 8000fea:	4663      	mov	r3, ip
 8000fec:	4258      	negs	r0, r3
 8000fee:	2301      	movs	r3, #1
 8000ff0:	4318      	orrs	r0, r3
 8000ff2:	e008      	b.n	8001006 <__gedf2+0x8a>
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d105      	bne.n	8001006 <__gedf2+0x8a>
 8000ffa:	464a      	mov	r2, r9
 8000ffc:	4250      	negs	r0, r2
 8000ffe:	4150      	adcs	r0, r2
 8001000:	4240      	negs	r0, r0
 8001002:	2301      	movs	r3, #1
 8001004:	4318      	orrs	r0, r3
 8001006:	bc3c      	pop	{r2, r3, r4, r5}
 8001008:	4690      	mov	r8, r2
 800100a:	4699      	mov	r9, r3
 800100c:	46a2      	mov	sl, r4
 800100e:	46ab      	mov	fp, r5
 8001010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001012:	1c3e      	adds	r6, r7, #0
 8001014:	4306      	orrs	r6, r0
 8001016:	d0c9      	beq.n	8000fac <__gedf2+0x30>
 8001018:	2002      	movs	r0, #2
 800101a:	4240      	negs	r0, r0
 800101c:	e7f3      	b.n	8001006 <__gedf2+0x8a>
 800101e:	465e      	mov	r6, fp
 8001020:	4316      	orrs	r6, r2
 8001022:	d0c6      	beq.n	8000fb2 <__gedf2+0x36>
 8001024:	e7f8      	b.n	8001018 <__gedf2+0x9c>
 8001026:	42ac      	cmp	r4, r5
 8001028:	dc07      	bgt.n	800103a <__gedf2+0xbe>
 800102a:	da0b      	bge.n	8001044 <__gedf2+0xc8>
 800102c:	4661      	mov	r1, ip
 800102e:	4248      	negs	r0, r1
 8001030:	4148      	adcs	r0, r1
 8001032:	4240      	negs	r0, r0
 8001034:	2301      	movs	r3, #1
 8001036:	4318      	orrs	r0, r3
 8001038:	e7e5      	b.n	8001006 <__gedf2+0x8a>
 800103a:	4666      	mov	r6, ip
 800103c:	4270      	negs	r0, r6
 800103e:	2301      	movs	r3, #1
 8001040:	4318      	orrs	r0, r3
 8001042:	e7e0      	b.n	8001006 <__gedf2+0x8a>
 8001044:	455f      	cmp	r7, fp
 8001046:	d80a      	bhi.n	800105e <__gedf2+0xe2>
 8001048:	d00e      	beq.n	8001068 <__gedf2+0xec>
 800104a:	2000      	movs	r0, #0
 800104c:	455f      	cmp	r7, fp
 800104e:	d2da      	bcs.n	8001006 <__gedf2+0x8a>
 8001050:	4665      	mov	r5, ip
 8001052:	4268      	negs	r0, r5
 8001054:	4168      	adcs	r0, r5
 8001056:	4240      	negs	r0, r0
 8001058:	2301      	movs	r3, #1
 800105a:	4318      	orrs	r0, r3
 800105c:	e7d3      	b.n	8001006 <__gedf2+0x8a>
 800105e:	4662      	mov	r2, ip
 8001060:	4250      	negs	r0, r2
 8001062:	2301      	movs	r3, #1
 8001064:	4318      	orrs	r0, r3
 8001066:	e7ce      	b.n	8001006 <__gedf2+0x8a>
 8001068:	45d0      	cmp	r8, sl
 800106a:	d8f8      	bhi.n	800105e <__gedf2+0xe2>
 800106c:	2000      	movs	r0, #0
 800106e:	45d0      	cmp	r8, sl
 8001070:	d3ee      	bcc.n	8001050 <__gedf2+0xd4>
 8001072:	e7c8      	b.n	8001006 <__gedf2+0x8a>
 8001074:	000007ff 	.word	0x000007ff

08001078 <__ledf2>:
 8001078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800107a:	4656      	mov	r6, sl
 800107c:	464d      	mov	r5, r9
 800107e:	4644      	mov	r4, r8
 8001080:	465f      	mov	r7, fp
 8001082:	b4f0      	push	{r4, r5, r6, r7}
 8001084:	1c0d      	adds	r5, r1, #0
 8001086:	b083      	sub	sp, #12
 8001088:	1c04      	adds	r4, r0, #0
 800108a:	9001      	str	r0, [sp, #4]
 800108c:	0fe8      	lsrs	r0, r5, #31
 800108e:	4681      	mov	r9, r0
 8001090:	0318      	lsls	r0, r3, #12
 8001092:	030f      	lsls	r7, r1, #12
 8001094:	0b00      	lsrs	r0, r0, #12
 8001096:	0b3f      	lsrs	r7, r7, #12
 8001098:	4684      	mov	ip, r0
 800109a:	4835      	ldr	r0, [pc, #212]	; (8001170 <__ledf2+0xf8>)
 800109c:	9700      	str	r7, [sp, #0]
 800109e:	0049      	lsls	r1, r1, #1
 80010a0:	005e      	lsls	r6, r3, #1
 80010a2:	0fdf      	lsrs	r7, r3, #31
 80010a4:	0d49      	lsrs	r1, r1, #21
 80010a6:	4692      	mov	sl, r2
 80010a8:	0d76      	lsrs	r6, r6, #21
 80010aa:	46b8      	mov	r8, r7
 80010ac:	4281      	cmp	r1, r0
 80010ae:	d034      	beq.n	800111a <__ledf2+0xa2>
 80010b0:	482f      	ldr	r0, [pc, #188]	; (8001170 <__ledf2+0xf8>)
 80010b2:	4286      	cmp	r6, r0
 80010b4:	d036      	beq.n	8001124 <__ledf2+0xac>
 80010b6:	2900      	cmp	r1, #0
 80010b8:	d018      	beq.n	80010ec <__ledf2+0x74>
 80010ba:	2e00      	cmp	r6, #0
 80010bc:	d11f      	bne.n	80010fe <__ledf2+0x86>
 80010be:	1c34      	adds	r4, r6, #0
 80010c0:	4667      	mov	r7, ip
 80010c2:	433a      	orrs	r2, r7
 80010c4:	4253      	negs	r3, r2
 80010c6:	4153      	adcs	r3, r2
 80010c8:	2c00      	cmp	r4, #0
 80010ca:	d01f      	beq.n	800110c <__ledf2+0x94>
 80010cc:	2000      	movs	r0, #0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d105      	bne.n	80010de <__ledf2+0x66>
 80010d2:	4642      	mov	r2, r8
 80010d4:	4250      	negs	r0, r2
 80010d6:	4150      	adcs	r0, r2
 80010d8:	4240      	negs	r0, r0
 80010da:	2301      	movs	r3, #1
 80010dc:	4318      	orrs	r0, r3
 80010de:	b003      	add	sp, #12
 80010e0:	bc3c      	pop	{r2, r3, r4, r5}
 80010e2:	4690      	mov	r8, r2
 80010e4:	4699      	mov	r9, r3
 80010e6:	46a2      	mov	sl, r4
 80010e8:	46ab      	mov	fp, r5
 80010ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010ec:	9800      	ldr	r0, [sp, #0]
 80010ee:	4304      	orrs	r4, r0
 80010f0:	4260      	negs	r0, r4
 80010f2:	4160      	adcs	r0, r4
 80010f4:	1c04      	adds	r4, r0, #0
 80010f6:	2e00      	cmp	r6, #0
 80010f8:	d0e2      	beq.n	80010c0 <__ledf2+0x48>
 80010fa:	2800      	cmp	r0, #0
 80010fc:	d1e9      	bne.n	80010d2 <__ledf2+0x5a>
 80010fe:	45c1      	cmp	r9, r8
 8001100:	d015      	beq.n	800112e <__ledf2+0xb6>
 8001102:	464f      	mov	r7, r9
 8001104:	4278      	negs	r0, r7
 8001106:	2301      	movs	r3, #1
 8001108:	4318      	orrs	r0, r3
 800110a:	e7e8      	b.n	80010de <__ledf2+0x66>
 800110c:	2b00      	cmp	r3, #0
 800110e:	d0f6      	beq.n	80010fe <__ledf2+0x86>
 8001110:	464b      	mov	r3, r9
 8001112:	4258      	negs	r0, r3
 8001114:	2301      	movs	r3, #1
 8001116:	4318      	orrs	r0, r3
 8001118:	e7e1      	b.n	80010de <__ledf2+0x66>
 800111a:	9f00      	ldr	r7, [sp, #0]
 800111c:	2002      	movs	r0, #2
 800111e:	4327      	orrs	r7, r4
 8001120:	d1dd      	bne.n	80010de <__ledf2+0x66>
 8001122:	e7c5      	b.n	80010b0 <__ledf2+0x38>
 8001124:	4667      	mov	r7, ip
 8001126:	2002      	movs	r0, #2
 8001128:	4317      	orrs	r7, r2
 800112a:	d1d8      	bne.n	80010de <__ledf2+0x66>
 800112c:	e7c3      	b.n	80010b6 <__ledf2+0x3e>
 800112e:	42b1      	cmp	r1, r6
 8001130:	dd04      	ble.n	800113c <__ledf2+0xc4>
 8001132:	464a      	mov	r2, r9
 8001134:	4250      	negs	r0, r2
 8001136:	2301      	movs	r3, #1
 8001138:	4318      	orrs	r0, r3
 800113a:	e7d0      	b.n	80010de <__ledf2+0x66>
 800113c:	42b1      	cmp	r1, r6
 800113e:	db07      	blt.n	8001150 <__ledf2+0xd8>
 8001140:	9800      	ldr	r0, [sp, #0]
 8001142:	4560      	cmp	r0, ip
 8001144:	d8e4      	bhi.n	8001110 <__ledf2+0x98>
 8001146:	d00a      	beq.n	800115e <__ledf2+0xe6>
 8001148:	9f00      	ldr	r7, [sp, #0]
 800114a:	2000      	movs	r0, #0
 800114c:	4567      	cmp	r7, ip
 800114e:	d2c6      	bcs.n	80010de <__ledf2+0x66>
 8001150:	464f      	mov	r7, r9
 8001152:	4278      	negs	r0, r7
 8001154:	4178      	adcs	r0, r7
 8001156:	4240      	negs	r0, r0
 8001158:	2301      	movs	r3, #1
 800115a:	4318      	orrs	r0, r3
 800115c:	e7bf      	b.n	80010de <__ledf2+0x66>
 800115e:	9a01      	ldr	r2, [sp, #4]
 8001160:	4552      	cmp	r2, sl
 8001162:	d8d5      	bhi.n	8001110 <__ledf2+0x98>
 8001164:	9a01      	ldr	r2, [sp, #4]
 8001166:	2000      	movs	r0, #0
 8001168:	4552      	cmp	r2, sl
 800116a:	d3f1      	bcc.n	8001150 <__ledf2+0xd8>
 800116c:	e7b7      	b.n	80010de <__ledf2+0x66>
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	000007ff 	.word	0x000007ff

08001174 <__aeabi_dmul>:
 8001174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001176:	4656      	mov	r6, sl
 8001178:	4644      	mov	r4, r8
 800117a:	465f      	mov	r7, fp
 800117c:	464d      	mov	r5, r9
 800117e:	b4f0      	push	{r4, r5, r6, r7}
 8001180:	1c1f      	adds	r7, r3, #0
 8001182:	030b      	lsls	r3, r1, #12
 8001184:	0b1b      	lsrs	r3, r3, #12
 8001186:	469a      	mov	sl, r3
 8001188:	004b      	lsls	r3, r1, #1
 800118a:	b087      	sub	sp, #28
 800118c:	1c04      	adds	r4, r0, #0
 800118e:	4680      	mov	r8, r0
 8001190:	0d5b      	lsrs	r3, r3, #21
 8001192:	0fc8      	lsrs	r0, r1, #31
 8001194:	1c16      	adds	r6, r2, #0
 8001196:	9302      	str	r3, [sp, #8]
 8001198:	4681      	mov	r9, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d068      	beq.n	8001270 <__aeabi_dmul+0xfc>
 800119e:	4b69      	ldr	r3, [pc, #420]	; (8001344 <__aeabi_dmul+0x1d0>)
 80011a0:	9902      	ldr	r1, [sp, #8]
 80011a2:	4299      	cmp	r1, r3
 80011a4:	d032      	beq.n	800120c <__aeabi_dmul+0x98>
 80011a6:	2280      	movs	r2, #128	; 0x80
 80011a8:	4653      	mov	r3, sl
 80011aa:	0352      	lsls	r2, r2, #13
 80011ac:	431a      	orrs	r2, r3
 80011ae:	00d2      	lsls	r2, r2, #3
 80011b0:	0f63      	lsrs	r3, r4, #29
 80011b2:	431a      	orrs	r2, r3
 80011b4:	4692      	mov	sl, r2
 80011b6:	4a64      	ldr	r2, [pc, #400]	; (8001348 <__aeabi_dmul+0x1d4>)
 80011b8:	00e0      	lsls	r0, r4, #3
 80011ba:	1889      	adds	r1, r1, r2
 80011bc:	4680      	mov	r8, r0
 80011be:	9102      	str	r1, [sp, #8]
 80011c0:	2400      	movs	r4, #0
 80011c2:	2500      	movs	r5, #0
 80011c4:	033b      	lsls	r3, r7, #12
 80011c6:	0b1b      	lsrs	r3, r3, #12
 80011c8:	469b      	mov	fp, r3
 80011ca:	0078      	lsls	r0, r7, #1
 80011cc:	0ffb      	lsrs	r3, r7, #31
 80011ce:	1c32      	adds	r2, r6, #0
 80011d0:	0d40      	lsrs	r0, r0, #21
 80011d2:	9303      	str	r3, [sp, #12]
 80011d4:	d100      	bne.n	80011d8 <__aeabi_dmul+0x64>
 80011d6:	e075      	b.n	80012c4 <__aeabi_dmul+0x150>
 80011d8:	4b5a      	ldr	r3, [pc, #360]	; (8001344 <__aeabi_dmul+0x1d0>)
 80011da:	4298      	cmp	r0, r3
 80011dc:	d069      	beq.n	80012b2 <__aeabi_dmul+0x13e>
 80011de:	2280      	movs	r2, #128	; 0x80
 80011e0:	4659      	mov	r1, fp
 80011e2:	0352      	lsls	r2, r2, #13
 80011e4:	430a      	orrs	r2, r1
 80011e6:	0f73      	lsrs	r3, r6, #29
 80011e8:	00d2      	lsls	r2, r2, #3
 80011ea:	431a      	orrs	r2, r3
 80011ec:	4b56      	ldr	r3, [pc, #344]	; (8001348 <__aeabi_dmul+0x1d4>)
 80011ee:	4693      	mov	fp, r2
 80011f0:	18c0      	adds	r0, r0, r3
 80011f2:	00f2      	lsls	r2, r6, #3
 80011f4:	2300      	movs	r3, #0
 80011f6:	9903      	ldr	r1, [sp, #12]
 80011f8:	464e      	mov	r6, r9
 80011fa:	4071      	eors	r1, r6
 80011fc:	431c      	orrs	r4, r3
 80011fe:	2c0f      	cmp	r4, #15
 8001200:	d900      	bls.n	8001204 <__aeabi_dmul+0x90>
 8001202:	e0a9      	b.n	8001358 <__aeabi_dmul+0x1e4>
 8001204:	4e51      	ldr	r6, [pc, #324]	; (800134c <__aeabi_dmul+0x1d8>)
 8001206:	00a4      	lsls	r4, r4, #2
 8001208:	5934      	ldr	r4, [r6, r4]
 800120a:	46a7      	mov	pc, r4
 800120c:	4653      	mov	r3, sl
 800120e:	431c      	orrs	r4, r3
 8001210:	d000      	beq.n	8001214 <__aeabi_dmul+0xa0>
 8001212:	e087      	b.n	8001324 <__aeabi_dmul+0x1b0>
 8001214:	2500      	movs	r5, #0
 8001216:	46aa      	mov	sl, r5
 8001218:	46a8      	mov	r8, r5
 800121a:	2408      	movs	r4, #8
 800121c:	2502      	movs	r5, #2
 800121e:	e7d1      	b.n	80011c4 <__aeabi_dmul+0x50>
 8001220:	4649      	mov	r1, r9
 8001222:	2d02      	cmp	r5, #2
 8001224:	d06c      	beq.n	8001300 <__aeabi_dmul+0x18c>
 8001226:	2d03      	cmp	r5, #3
 8001228:	d100      	bne.n	800122c <__aeabi_dmul+0xb8>
 800122a:	e217      	b.n	800165c <__aeabi_dmul+0x4e8>
 800122c:	2d01      	cmp	r5, #1
 800122e:	d000      	beq.n	8001232 <__aeabi_dmul+0xbe>
 8001230:	e158      	b.n	80014e4 <__aeabi_dmul+0x370>
 8001232:	400d      	ands	r5, r1
 8001234:	b2ed      	uxtb	r5, r5
 8001236:	2400      	movs	r4, #0
 8001238:	46a9      	mov	r9, r5
 800123a:	2300      	movs	r3, #0
 800123c:	46a0      	mov	r8, r4
 800123e:	2000      	movs	r0, #0
 8001240:	2100      	movs	r1, #0
 8001242:	0325      	lsls	r5, r4, #12
 8001244:	0d0a      	lsrs	r2, r1, #20
 8001246:	051c      	lsls	r4, r3, #20
 8001248:	0b2d      	lsrs	r5, r5, #12
 800124a:	0512      	lsls	r2, r2, #20
 800124c:	4b40      	ldr	r3, [pc, #256]	; (8001350 <__aeabi_dmul+0x1dc>)
 800124e:	432a      	orrs	r2, r5
 8001250:	4013      	ands	r3, r2
 8001252:	4323      	orrs	r3, r4
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	464c      	mov	r4, r9
 8001258:	085b      	lsrs	r3, r3, #1
 800125a:	07e2      	lsls	r2, r4, #31
 800125c:	1c19      	adds	r1, r3, #0
 800125e:	4640      	mov	r0, r8
 8001260:	4311      	orrs	r1, r2
 8001262:	b007      	add	sp, #28
 8001264:	bc3c      	pop	{r2, r3, r4, r5}
 8001266:	4690      	mov	r8, r2
 8001268:	4699      	mov	r9, r3
 800126a:	46a2      	mov	sl, r4
 800126c:	46ab      	mov	fp, r5
 800126e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001270:	4653      	mov	r3, sl
 8001272:	4323      	orrs	r3, r4
 8001274:	d050      	beq.n	8001318 <__aeabi_dmul+0x1a4>
 8001276:	4653      	mov	r3, sl
 8001278:	2b00      	cmp	r3, #0
 800127a:	d100      	bne.n	800127e <__aeabi_dmul+0x10a>
 800127c:	e184      	b.n	8001588 <__aeabi_dmul+0x414>
 800127e:	4650      	mov	r0, sl
 8001280:	f000 fdd8 	bl	8001e34 <__clzsi2>
 8001284:	1e03      	subs	r3, r0, #0
 8001286:	2b27      	cmp	r3, #39	; 0x27
 8001288:	dd00      	ble.n	800128c <__aeabi_dmul+0x118>
 800128a:	e176      	b.n	800157a <__aeabi_dmul+0x406>
 800128c:	2128      	movs	r1, #40	; 0x28
 800128e:	1a0d      	subs	r5, r1, r0
 8001290:	1c21      	adds	r1, r4, #0
 8001292:	3b08      	subs	r3, #8
 8001294:	4652      	mov	r2, sl
 8001296:	40e9      	lsrs	r1, r5
 8001298:	409a      	lsls	r2, r3
 800129a:	1c0d      	adds	r5, r1, #0
 800129c:	4315      	orrs	r5, r2
 800129e:	1c22      	adds	r2, r4, #0
 80012a0:	409a      	lsls	r2, r3
 80012a2:	46aa      	mov	sl, r5
 80012a4:	4690      	mov	r8, r2
 80012a6:	4b2b      	ldr	r3, [pc, #172]	; (8001354 <__aeabi_dmul+0x1e0>)
 80012a8:	2400      	movs	r4, #0
 80012aa:	1a1b      	subs	r3, r3, r0
 80012ac:	9302      	str	r3, [sp, #8]
 80012ae:	2500      	movs	r5, #0
 80012b0:	e788      	b.n	80011c4 <__aeabi_dmul+0x50>
 80012b2:	465b      	mov	r3, fp
 80012b4:	431e      	orrs	r6, r3
 80012b6:	2303      	movs	r3, #3
 80012b8:	2e00      	cmp	r6, #0
 80012ba:	d19c      	bne.n	80011f6 <__aeabi_dmul+0x82>
 80012bc:	46b3      	mov	fp, r6
 80012be:	2200      	movs	r2, #0
 80012c0:	2302      	movs	r3, #2
 80012c2:	e798      	b.n	80011f6 <__aeabi_dmul+0x82>
 80012c4:	465b      	mov	r3, fp
 80012c6:	4333      	orrs	r3, r6
 80012c8:	d021      	beq.n	800130e <__aeabi_dmul+0x19a>
 80012ca:	4658      	mov	r0, fp
 80012cc:	2800      	cmp	r0, #0
 80012ce:	d100      	bne.n	80012d2 <__aeabi_dmul+0x15e>
 80012d0:	e14e      	b.n	8001570 <__aeabi_dmul+0x3fc>
 80012d2:	f000 fdaf 	bl	8001e34 <__clzsi2>
 80012d6:	2827      	cmp	r0, #39	; 0x27
 80012d8:	dd00      	ble.n	80012dc <__aeabi_dmul+0x168>
 80012da:	e142      	b.n	8001562 <__aeabi_dmul+0x3ee>
 80012dc:	2128      	movs	r1, #40	; 0x28
 80012de:	1a0f      	subs	r7, r1, r0
 80012e0:	1c02      	adds	r2, r0, #0
 80012e2:	1c31      	adds	r1, r6, #0
 80012e4:	3a08      	subs	r2, #8
 80012e6:	465b      	mov	r3, fp
 80012e8:	40f9      	lsrs	r1, r7
 80012ea:	4093      	lsls	r3, r2
 80012ec:	1c0f      	adds	r7, r1, #0
 80012ee:	431f      	orrs	r7, r3
 80012f0:	1c33      	adds	r3, r6, #0
 80012f2:	4093      	lsls	r3, r2
 80012f4:	46bb      	mov	fp, r7
 80012f6:	1c1a      	adds	r2, r3, #0
 80012f8:	4b16      	ldr	r3, [pc, #88]	; (8001354 <__aeabi_dmul+0x1e0>)
 80012fa:	1a18      	subs	r0, r3, r0
 80012fc:	2300      	movs	r3, #0
 80012fe:	e77a      	b.n	80011f6 <__aeabi_dmul+0x82>
 8001300:	2301      	movs	r3, #1
 8001302:	400b      	ands	r3, r1
 8001304:	2400      	movs	r4, #0
 8001306:	4699      	mov	r9, r3
 8001308:	46a0      	mov	r8, r4
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <__aeabi_dmul+0x1d0>)
 800130c:	e797      	b.n	800123e <__aeabi_dmul+0xca>
 800130e:	2700      	movs	r7, #0
 8001310:	46bb      	mov	fp, r7
 8001312:	2200      	movs	r2, #0
 8001314:	2301      	movs	r3, #1
 8001316:	e76e      	b.n	80011f6 <__aeabi_dmul+0x82>
 8001318:	2100      	movs	r1, #0
 800131a:	2404      	movs	r4, #4
 800131c:	468a      	mov	sl, r1
 800131e:	4688      	mov	r8, r1
 8001320:	2501      	movs	r5, #1
 8001322:	e74f      	b.n	80011c4 <__aeabi_dmul+0x50>
 8001324:	240c      	movs	r4, #12
 8001326:	2503      	movs	r5, #3
 8001328:	e74c      	b.n	80011c4 <__aeabi_dmul+0x50>
 800132a:	2500      	movs	r5, #0
 800132c:	2480      	movs	r4, #128	; 0x80
 800132e:	46a9      	mov	r9, r5
 8001330:	0324      	lsls	r4, r4, #12
 8001332:	46a8      	mov	r8, r5
 8001334:	4b03      	ldr	r3, [pc, #12]	; (8001344 <__aeabi_dmul+0x1d0>)
 8001336:	e782      	b.n	800123e <__aeabi_dmul+0xca>
 8001338:	46da      	mov	sl, fp
 800133a:	4690      	mov	r8, r2
 800133c:	9903      	ldr	r1, [sp, #12]
 800133e:	1c1d      	adds	r5, r3, #0
 8001340:	e76f      	b.n	8001222 <__aeabi_dmul+0xae>
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	000007ff 	.word	0x000007ff
 8001348:	fffffc01 	.word	0xfffffc01
 800134c:	08007588 	.word	0x08007588
 8001350:	800fffff 	.word	0x800fffff
 8001354:	fffffc0d 	.word	0xfffffc0d
 8001358:	9f02      	ldr	r7, [sp, #8]
 800135a:	0c16      	lsrs	r6, r2, #16
 800135c:	1838      	adds	r0, r7, r0
 800135e:	9004      	str	r0, [sp, #16]
 8001360:	4640      	mov	r0, r8
 8001362:	0c07      	lsrs	r7, r0, #16
 8001364:	0400      	lsls	r0, r0, #16
 8001366:	0c00      	lsrs	r0, r0, #16
 8001368:	0412      	lsls	r2, r2, #16
 800136a:	0c12      	lsrs	r2, r2, #16
 800136c:	1c03      	adds	r3, r0, #0
 800136e:	4353      	muls	r3, r2
 8001370:	1c04      	adds	r4, r0, #0
 8001372:	1c3d      	adds	r5, r7, #0
 8001374:	4374      	muls	r4, r6
 8001376:	4355      	muls	r5, r2
 8001378:	4698      	mov	r8, r3
 800137a:	1c3b      	adds	r3, r7, #0
 800137c:	4373      	muls	r3, r6
 800137e:	1964      	adds	r4, r4, r5
 8001380:	46a4      	mov	ip, r4
 8001382:	4644      	mov	r4, r8
 8001384:	9302      	str	r3, [sp, #8]
 8001386:	0c23      	lsrs	r3, r4, #16
 8001388:	4463      	add	r3, ip
 800138a:	429d      	cmp	r5, r3
 800138c:	d904      	bls.n	8001398 <__aeabi_dmul+0x224>
 800138e:	9d02      	ldr	r5, [sp, #8]
 8001390:	2480      	movs	r4, #128	; 0x80
 8001392:	0264      	lsls	r4, r4, #9
 8001394:	192d      	adds	r5, r5, r4
 8001396:	9502      	str	r5, [sp, #8]
 8001398:	0c1d      	lsrs	r5, r3, #16
 800139a:	9503      	str	r5, [sp, #12]
 800139c:	4645      	mov	r5, r8
 800139e:	042c      	lsls	r4, r5, #16
 80013a0:	041b      	lsls	r3, r3, #16
 80013a2:	0c24      	lsrs	r4, r4, #16
 80013a4:	191c      	adds	r4, r3, r4
 80013a6:	9405      	str	r4, [sp, #20]
 80013a8:	465c      	mov	r4, fp
 80013aa:	0c23      	lsrs	r3, r4, #16
 80013ac:	1c05      	adds	r5, r0, #0
 80013ae:	4358      	muls	r0, r3
 80013b0:	0424      	lsls	r4, r4, #16
 80013b2:	0c24      	lsrs	r4, r4, #16
 80013b4:	4684      	mov	ip, r0
 80013b6:	1c38      	adds	r0, r7, #0
 80013b8:	4360      	muls	r0, r4
 80013ba:	4365      	muls	r5, r4
 80013bc:	435f      	muls	r7, r3
 80013be:	4681      	mov	r9, r0
 80013c0:	44cc      	add	ip, r9
 80013c2:	0c28      	lsrs	r0, r5, #16
 80013c4:	4460      	add	r0, ip
 80013c6:	46bb      	mov	fp, r7
 80013c8:	4581      	cmp	r9, r0
 80013ca:	d902      	bls.n	80013d2 <__aeabi_dmul+0x25e>
 80013cc:	2780      	movs	r7, #128	; 0x80
 80013ce:	027f      	lsls	r7, r7, #9
 80013d0:	44bb      	add	fp, r7
 80013d2:	042d      	lsls	r5, r5, #16
 80013d4:	0c07      	lsrs	r7, r0, #16
 80013d6:	0c2d      	lsrs	r5, r5, #16
 80013d8:	0400      	lsls	r0, r0, #16
 80013da:	1940      	adds	r0, r0, r5
 80013dc:	4655      	mov	r5, sl
 80013de:	46bc      	mov	ip, r7
 80013e0:	042f      	lsls	r7, r5, #16
 80013e2:	44e3      	add	fp, ip
 80013e4:	4684      	mov	ip, r0
 80013e6:	0c28      	lsrs	r0, r5, #16
 80013e8:	0c3d      	lsrs	r5, r7, #16
 80013ea:	1c2f      	adds	r7, r5, #0
 80013ec:	4357      	muls	r7, r2
 80013ee:	46b8      	mov	r8, r7
 80013f0:	1c2f      	adds	r7, r5, #0
 80013f2:	4377      	muls	r7, r6
 80013f4:	4342      	muls	r2, r0
 80013f6:	46b9      	mov	r9, r7
 80013f8:	4647      	mov	r7, r8
 80013fa:	0c3f      	lsrs	r7, r7, #16
 80013fc:	4491      	add	r9, r2
 80013fe:	46ba      	mov	sl, r7
 8001400:	44d1      	add	r9, sl
 8001402:	4346      	muls	r6, r0
 8001404:	454a      	cmp	r2, r9
 8001406:	d902      	bls.n	800140e <__aeabi_dmul+0x29a>
 8001408:	2280      	movs	r2, #128	; 0x80
 800140a:	0252      	lsls	r2, r2, #9
 800140c:	18b6      	adds	r6, r6, r2
 800140e:	464f      	mov	r7, r9
 8001410:	0c3a      	lsrs	r2, r7, #16
 8001412:	18b6      	adds	r6, r6, r2
 8001414:	043a      	lsls	r2, r7, #16
 8001416:	4647      	mov	r7, r8
 8001418:	043f      	lsls	r7, r7, #16
 800141a:	0c3f      	lsrs	r7, r7, #16
 800141c:	46b8      	mov	r8, r7
 800141e:	1c2f      	adds	r7, r5, #0
 8001420:	4367      	muls	r7, r4
 8001422:	435d      	muls	r5, r3
 8001424:	4344      	muls	r4, r0
 8001426:	4358      	muls	r0, r3
 8001428:	1965      	adds	r5, r4, r5
 800142a:	9001      	str	r0, [sp, #4]
 800142c:	0c38      	lsrs	r0, r7, #16
 800142e:	182d      	adds	r5, r5, r0
 8001430:	4442      	add	r2, r8
 8001432:	46b8      	mov	r8, r7
 8001434:	42ac      	cmp	r4, r5
 8001436:	d904      	bls.n	8001442 <__aeabi_dmul+0x2ce>
 8001438:	9801      	ldr	r0, [sp, #4]
 800143a:	2380      	movs	r3, #128	; 0x80
 800143c:	025b      	lsls	r3, r3, #9
 800143e:	18c0      	adds	r0, r0, r3
 8001440:	9001      	str	r0, [sp, #4]
 8001442:	9c03      	ldr	r4, [sp, #12]
 8001444:	9f02      	ldr	r7, [sp, #8]
 8001446:	1c20      	adds	r0, r4, #0
 8001448:	4460      	add	r0, ip
 800144a:	19c0      	adds	r0, r0, r7
 800144c:	4560      	cmp	r0, ip
 800144e:	41a4      	sbcs	r4, r4
 8001450:	4647      	mov	r7, r8
 8001452:	4264      	negs	r4, r4
 8001454:	46a4      	mov	ip, r4
 8001456:	042b      	lsls	r3, r5, #16
 8001458:	043c      	lsls	r4, r7, #16
 800145a:	4699      	mov	r9, r3
 800145c:	0c24      	lsrs	r4, r4, #16
 800145e:	444c      	add	r4, r9
 8001460:	46a0      	mov	r8, r4
 8001462:	44d8      	add	r8, fp
 8001464:	1880      	adds	r0, r0, r2
 8001466:	46c2      	mov	sl, r8
 8001468:	44e2      	add	sl, ip
 800146a:	4290      	cmp	r0, r2
 800146c:	4192      	sbcs	r2, r2
 800146e:	4657      	mov	r7, sl
 8001470:	4252      	negs	r2, r2
 8001472:	4691      	mov	r9, r2
 8001474:	19f2      	adds	r2, r6, r7
 8001476:	45e2      	cmp	sl, ip
 8001478:	41bf      	sbcs	r7, r7
 800147a:	427f      	negs	r7, r7
 800147c:	464b      	mov	r3, r9
 800147e:	46bc      	mov	ip, r7
 8001480:	45d8      	cmp	r8, fp
 8001482:	41bf      	sbcs	r7, r7
 8001484:	18d4      	adds	r4, r2, r3
 8001486:	427f      	negs	r7, r7
 8001488:	4663      	mov	r3, ip
 800148a:	431f      	orrs	r7, r3
 800148c:	0c2d      	lsrs	r5, r5, #16
 800148e:	197f      	adds	r7, r7, r5
 8001490:	42b2      	cmp	r2, r6
 8001492:	4192      	sbcs	r2, r2
 8001494:	454c      	cmp	r4, r9
 8001496:	41ad      	sbcs	r5, r5
 8001498:	4252      	negs	r2, r2
 800149a:	426d      	negs	r5, r5
 800149c:	4315      	orrs	r5, r2
 800149e:	9e01      	ldr	r6, [sp, #4]
 80014a0:	197d      	adds	r5, r7, r5
 80014a2:	19ab      	adds	r3, r5, r6
 80014a4:	0de2      	lsrs	r2, r4, #23
 80014a6:	025b      	lsls	r3, r3, #9
 80014a8:	9f05      	ldr	r7, [sp, #20]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	0242      	lsls	r2, r0, #9
 80014ae:	433a      	orrs	r2, r7
 80014b0:	469a      	mov	sl, r3
 80014b2:	1e53      	subs	r3, r2, #1
 80014b4:	419a      	sbcs	r2, r3
 80014b6:	0dc3      	lsrs	r3, r0, #23
 80014b8:	1c10      	adds	r0, r2, #0
 80014ba:	4318      	orrs	r0, r3
 80014bc:	0264      	lsls	r4, r4, #9
 80014be:	4320      	orrs	r0, r4
 80014c0:	4680      	mov	r8, r0
 80014c2:	4650      	mov	r0, sl
 80014c4:	01c0      	lsls	r0, r0, #7
 80014c6:	d50d      	bpl.n	80014e4 <__aeabi_dmul+0x370>
 80014c8:	4645      	mov	r5, r8
 80014ca:	2201      	movs	r2, #1
 80014cc:	4656      	mov	r6, sl
 80014ce:	9c04      	ldr	r4, [sp, #16]
 80014d0:	086b      	lsrs	r3, r5, #1
 80014d2:	402a      	ands	r2, r5
 80014d4:	431a      	orrs	r2, r3
 80014d6:	07f3      	lsls	r3, r6, #31
 80014d8:	3401      	adds	r4, #1
 80014da:	431a      	orrs	r2, r3
 80014dc:	0876      	lsrs	r6, r6, #1
 80014de:	9404      	str	r4, [sp, #16]
 80014e0:	4690      	mov	r8, r2
 80014e2:	46b2      	mov	sl, r6
 80014e4:	9e04      	ldr	r6, [sp, #16]
 80014e6:	4f63      	ldr	r7, [pc, #396]	; (8001674 <__aeabi_dmul+0x500>)
 80014e8:	19f3      	adds	r3, r6, r7
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	dd61      	ble.n	80015b2 <__aeabi_dmul+0x43e>
 80014ee:	4640      	mov	r0, r8
 80014f0:	0740      	lsls	r0, r0, #29
 80014f2:	d00b      	beq.n	800150c <__aeabi_dmul+0x398>
 80014f4:	220f      	movs	r2, #15
 80014f6:	4644      	mov	r4, r8
 80014f8:	4022      	ands	r2, r4
 80014fa:	2a04      	cmp	r2, #4
 80014fc:	d006      	beq.n	800150c <__aeabi_dmul+0x398>
 80014fe:	4642      	mov	r2, r8
 8001500:	3204      	adds	r2, #4
 8001502:	4542      	cmp	r2, r8
 8001504:	4180      	sbcs	r0, r0
 8001506:	4240      	negs	r0, r0
 8001508:	4482      	add	sl, r0
 800150a:	4690      	mov	r8, r2
 800150c:	4655      	mov	r5, sl
 800150e:	01ed      	lsls	r5, r5, #7
 8001510:	d507      	bpl.n	8001522 <__aeabi_dmul+0x3ae>
 8001512:	4b59      	ldr	r3, [pc, #356]	; (8001678 <__aeabi_dmul+0x504>)
 8001514:	4656      	mov	r6, sl
 8001516:	9f04      	ldr	r7, [sp, #16]
 8001518:	2080      	movs	r0, #128	; 0x80
 800151a:	401e      	ands	r6, r3
 800151c:	00c0      	lsls	r0, r0, #3
 800151e:	46b2      	mov	sl, r6
 8001520:	183b      	adds	r3, r7, r0
 8001522:	4a56      	ldr	r2, [pc, #344]	; (800167c <__aeabi_dmul+0x508>)
 8001524:	4293      	cmp	r3, r2
 8001526:	dd00      	ble.n	800152a <__aeabi_dmul+0x3b6>
 8001528:	e6ea      	b.n	8001300 <__aeabi_dmul+0x18c>
 800152a:	4644      	mov	r4, r8
 800152c:	4655      	mov	r5, sl
 800152e:	08e2      	lsrs	r2, r4, #3
 8001530:	0768      	lsls	r0, r5, #29
 8001532:	4310      	orrs	r0, r2
 8001534:	2201      	movs	r2, #1
 8001536:	026c      	lsls	r4, r5, #9
 8001538:	055b      	lsls	r3, r3, #21
 800153a:	400a      	ands	r2, r1
 800153c:	4680      	mov	r8, r0
 800153e:	0b24      	lsrs	r4, r4, #12
 8001540:	0d5b      	lsrs	r3, r3, #21
 8001542:	4691      	mov	r9, r2
 8001544:	e67b      	b.n	800123e <__aeabi_dmul+0xca>
 8001546:	46da      	mov	sl, fp
 8001548:	4690      	mov	r8, r2
 800154a:	1c1d      	adds	r5, r3, #0
 800154c:	e669      	b.n	8001222 <__aeabi_dmul+0xae>
 800154e:	2480      	movs	r4, #128	; 0x80
 8001550:	0324      	lsls	r4, r4, #12
 8001552:	4657      	mov	r7, sl
 8001554:	4227      	tst	r7, r4
 8001556:	d11c      	bne.n	8001592 <__aeabi_dmul+0x41e>
 8001558:	433c      	orrs	r4, r7
 800155a:	0324      	lsls	r4, r4, #12
 800155c:	0b24      	lsrs	r4, r4, #12
 800155e:	4b48      	ldr	r3, [pc, #288]	; (8001680 <__aeabi_dmul+0x50c>)
 8001560:	e66d      	b.n	800123e <__aeabi_dmul+0xca>
 8001562:	1c03      	adds	r3, r0, #0
 8001564:	3b28      	subs	r3, #40	; 0x28
 8001566:	1c31      	adds	r1, r6, #0
 8001568:	4099      	lsls	r1, r3
 800156a:	468b      	mov	fp, r1
 800156c:	2200      	movs	r2, #0
 800156e:	e6c3      	b.n	80012f8 <__aeabi_dmul+0x184>
 8001570:	1c30      	adds	r0, r6, #0
 8001572:	f000 fc5f 	bl	8001e34 <__clzsi2>
 8001576:	3020      	adds	r0, #32
 8001578:	e6ad      	b.n	80012d6 <__aeabi_dmul+0x162>
 800157a:	3b28      	subs	r3, #40	; 0x28
 800157c:	1c21      	adds	r1, r4, #0
 800157e:	4099      	lsls	r1, r3
 8001580:	2200      	movs	r2, #0
 8001582:	468a      	mov	sl, r1
 8001584:	4690      	mov	r8, r2
 8001586:	e68e      	b.n	80012a6 <__aeabi_dmul+0x132>
 8001588:	1c20      	adds	r0, r4, #0
 800158a:	f000 fc53 	bl	8001e34 <__clzsi2>
 800158e:	3020      	adds	r0, #32
 8001590:	e678      	b.n	8001284 <__aeabi_dmul+0x110>
 8001592:	4658      	mov	r0, fp
 8001594:	4220      	tst	r0, r4
 8001596:	d107      	bne.n	80015a8 <__aeabi_dmul+0x434>
 8001598:	4304      	orrs	r4, r0
 800159a:	9903      	ldr	r1, [sp, #12]
 800159c:	0324      	lsls	r4, r4, #12
 800159e:	0b24      	lsrs	r4, r4, #12
 80015a0:	4689      	mov	r9, r1
 80015a2:	4690      	mov	r8, r2
 80015a4:	4b36      	ldr	r3, [pc, #216]	; (8001680 <__aeabi_dmul+0x50c>)
 80015a6:	e64a      	b.n	800123e <__aeabi_dmul+0xca>
 80015a8:	433c      	orrs	r4, r7
 80015aa:	0324      	lsls	r4, r4, #12
 80015ac:	0b24      	lsrs	r4, r4, #12
 80015ae:	4b34      	ldr	r3, [pc, #208]	; (8001680 <__aeabi_dmul+0x50c>)
 80015b0:	e645      	b.n	800123e <__aeabi_dmul+0xca>
 80015b2:	4b34      	ldr	r3, [pc, #208]	; (8001684 <__aeabi_dmul+0x510>)
 80015b4:	9e04      	ldr	r6, [sp, #16]
 80015b6:	1b9b      	subs	r3, r3, r6
 80015b8:	2b38      	cmp	r3, #56	; 0x38
 80015ba:	dd06      	ble.n	80015ca <__aeabi_dmul+0x456>
 80015bc:	2301      	movs	r3, #1
 80015be:	400b      	ands	r3, r1
 80015c0:	2400      	movs	r4, #0
 80015c2:	4699      	mov	r9, r3
 80015c4:	46a0      	mov	r8, r4
 80015c6:	2300      	movs	r3, #0
 80015c8:	e639      	b.n	800123e <__aeabi_dmul+0xca>
 80015ca:	2b1f      	cmp	r3, #31
 80015cc:	dc25      	bgt.n	800161a <__aeabi_dmul+0x4a6>
 80015ce:	9c04      	ldr	r4, [sp, #16]
 80015d0:	4d2d      	ldr	r5, [pc, #180]	; (8001688 <__aeabi_dmul+0x514>)
 80015d2:	4646      	mov	r6, r8
 80015d4:	1960      	adds	r0, r4, r5
 80015d6:	4652      	mov	r2, sl
 80015d8:	4644      	mov	r4, r8
 80015da:	4086      	lsls	r6, r0
 80015dc:	40dc      	lsrs	r4, r3
 80015de:	4082      	lsls	r2, r0
 80015e0:	4657      	mov	r7, sl
 80015e2:	1c30      	adds	r0, r6, #0
 80015e4:	4322      	orrs	r2, r4
 80015e6:	40df      	lsrs	r7, r3
 80015e8:	1e44      	subs	r4, r0, #1
 80015ea:	41a0      	sbcs	r0, r4
 80015ec:	4302      	orrs	r2, r0
 80015ee:	1c3b      	adds	r3, r7, #0
 80015f0:	0754      	lsls	r4, r2, #29
 80015f2:	d009      	beq.n	8001608 <__aeabi_dmul+0x494>
 80015f4:	200f      	movs	r0, #15
 80015f6:	4010      	ands	r0, r2
 80015f8:	2804      	cmp	r0, #4
 80015fa:	d005      	beq.n	8001608 <__aeabi_dmul+0x494>
 80015fc:	1d10      	adds	r0, r2, #4
 80015fe:	4290      	cmp	r0, r2
 8001600:	4192      	sbcs	r2, r2
 8001602:	4252      	negs	r2, r2
 8001604:	189b      	adds	r3, r3, r2
 8001606:	1c02      	adds	r2, r0, #0
 8001608:	021d      	lsls	r5, r3, #8
 800160a:	d51a      	bpl.n	8001642 <__aeabi_dmul+0x4ce>
 800160c:	2301      	movs	r3, #1
 800160e:	400b      	ands	r3, r1
 8001610:	2400      	movs	r4, #0
 8001612:	4699      	mov	r9, r3
 8001614:	46a0      	mov	r8, r4
 8001616:	2301      	movs	r3, #1
 8001618:	e611      	b.n	800123e <__aeabi_dmul+0xca>
 800161a:	481c      	ldr	r0, [pc, #112]	; (800168c <__aeabi_dmul+0x518>)
 800161c:	9c04      	ldr	r4, [sp, #16]
 800161e:	4655      	mov	r5, sl
 8001620:	1b00      	subs	r0, r0, r4
 8001622:	40c5      	lsrs	r5, r0
 8001624:	1c28      	adds	r0, r5, #0
 8001626:	2b20      	cmp	r3, #32
 8001628:	d016      	beq.n	8001658 <__aeabi_dmul+0x4e4>
 800162a:	4e19      	ldr	r6, [pc, #100]	; (8001690 <__aeabi_dmul+0x51c>)
 800162c:	4657      	mov	r7, sl
 800162e:	19a2      	adds	r2, r4, r6
 8001630:	4097      	lsls	r7, r2
 8001632:	1c3a      	adds	r2, r7, #0
 8001634:	4643      	mov	r3, r8
 8001636:	431a      	orrs	r2, r3
 8001638:	1e53      	subs	r3, r2, #1
 800163a:	419a      	sbcs	r2, r3
 800163c:	4302      	orrs	r2, r0
 800163e:	2300      	movs	r3, #0
 8001640:	e7d6      	b.n	80015f0 <__aeabi_dmul+0x47c>
 8001642:	0758      	lsls	r0, r3, #29
 8001644:	025b      	lsls	r3, r3, #9
 8001646:	08d2      	lsrs	r2, r2, #3
 8001648:	0b1c      	lsrs	r4, r3, #12
 800164a:	2301      	movs	r3, #1
 800164c:	400b      	ands	r3, r1
 800164e:	4310      	orrs	r0, r2
 8001650:	4699      	mov	r9, r3
 8001652:	4680      	mov	r8, r0
 8001654:	2300      	movs	r3, #0
 8001656:	e5f2      	b.n	800123e <__aeabi_dmul+0xca>
 8001658:	2200      	movs	r2, #0
 800165a:	e7eb      	b.n	8001634 <__aeabi_dmul+0x4c0>
 800165c:	2480      	movs	r4, #128	; 0x80
 800165e:	0324      	lsls	r4, r4, #12
 8001660:	4650      	mov	r0, sl
 8001662:	2301      	movs	r3, #1
 8001664:	4304      	orrs	r4, r0
 8001666:	4019      	ands	r1, r3
 8001668:	0324      	lsls	r4, r4, #12
 800166a:	0b24      	lsrs	r4, r4, #12
 800166c:	4689      	mov	r9, r1
 800166e:	4b04      	ldr	r3, [pc, #16]	; (8001680 <__aeabi_dmul+0x50c>)
 8001670:	e5e5      	b.n	800123e <__aeabi_dmul+0xca>
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	000003ff 	.word	0x000003ff
 8001678:	feffffff 	.word	0xfeffffff
 800167c:	000007fe 	.word	0x000007fe
 8001680:	000007ff 	.word	0x000007ff
 8001684:	fffffc02 	.word	0xfffffc02
 8001688:	0000041e 	.word	0x0000041e
 800168c:	fffffbe2 	.word	0xfffffbe2
 8001690:	0000043e 	.word	0x0000043e

08001694 <__aeabi_dsub>:
 8001694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001696:	465f      	mov	r7, fp
 8001698:	4656      	mov	r6, sl
 800169a:	4644      	mov	r4, r8
 800169c:	464d      	mov	r5, r9
 800169e:	b4f0      	push	{r4, r5, r6, r7}
 80016a0:	030c      	lsls	r4, r1, #12
 80016a2:	004d      	lsls	r5, r1, #1
 80016a4:	0fcf      	lsrs	r7, r1, #31
 80016a6:	0a61      	lsrs	r1, r4, #9
 80016a8:	0f44      	lsrs	r4, r0, #29
 80016aa:	4321      	orrs	r1, r4
 80016ac:	00c4      	lsls	r4, r0, #3
 80016ae:	0318      	lsls	r0, r3, #12
 80016b0:	0fde      	lsrs	r6, r3, #31
 80016b2:	4680      	mov	r8, r0
 80016b4:	46b4      	mov	ip, r6
 80016b6:	4646      	mov	r6, r8
 80016b8:	0058      	lsls	r0, r3, #1
 80016ba:	0a76      	lsrs	r6, r6, #9
 80016bc:	0f53      	lsrs	r3, r2, #29
 80016be:	4333      	orrs	r3, r6
 80016c0:	00d6      	lsls	r6, r2, #3
 80016c2:	4ac9      	ldr	r2, [pc, #804]	; (80019e8 <__aeabi_dsub+0x354>)
 80016c4:	0d6d      	lsrs	r5, r5, #21
 80016c6:	46ba      	mov	sl, r7
 80016c8:	0d40      	lsrs	r0, r0, #21
 80016ca:	46b3      	mov	fp, r6
 80016cc:	4290      	cmp	r0, r2
 80016ce:	d100      	bne.n	80016d2 <__aeabi_dsub+0x3e>
 80016d0:	e0eb      	b.n	80018aa <__aeabi_dsub+0x216>
 80016d2:	4662      	mov	r2, ip
 80016d4:	2601      	movs	r6, #1
 80016d6:	4072      	eors	r2, r6
 80016d8:	4694      	mov	ip, r2
 80016da:	4567      	cmp	r7, ip
 80016dc:	d100      	bne.n	80016e0 <__aeabi_dsub+0x4c>
 80016de:	e0a1      	b.n	8001824 <__aeabi_dsub+0x190>
 80016e0:	1a2f      	subs	r7, r5, r0
 80016e2:	2f00      	cmp	r7, #0
 80016e4:	dc00      	bgt.n	80016e8 <__aeabi_dsub+0x54>
 80016e6:	e108      	b.n	80018fa <__aeabi_dsub+0x266>
 80016e8:	2800      	cmp	r0, #0
 80016ea:	d13b      	bne.n	8001764 <__aeabi_dsub+0xd0>
 80016ec:	4658      	mov	r0, fp
 80016ee:	4318      	orrs	r0, r3
 80016f0:	d000      	beq.n	80016f4 <__aeabi_dsub+0x60>
 80016f2:	e0e8      	b.n	80018c6 <__aeabi_dsub+0x232>
 80016f4:	0760      	lsls	r0, r4, #29
 80016f6:	d009      	beq.n	800170c <__aeabi_dsub+0x78>
 80016f8:	230f      	movs	r3, #15
 80016fa:	4023      	ands	r3, r4
 80016fc:	2b04      	cmp	r3, #4
 80016fe:	d005      	beq.n	800170c <__aeabi_dsub+0x78>
 8001700:	1d23      	adds	r3, r4, #4
 8001702:	42a3      	cmp	r3, r4
 8001704:	41a4      	sbcs	r4, r4
 8001706:	4264      	negs	r4, r4
 8001708:	1909      	adds	r1, r1, r4
 800170a:	1c1c      	adds	r4, r3, #0
 800170c:	020a      	lsls	r2, r1, #8
 800170e:	d400      	bmi.n	8001712 <__aeabi_dsub+0x7e>
 8001710:	e079      	b.n	8001806 <__aeabi_dsub+0x172>
 8001712:	4bb5      	ldr	r3, [pc, #724]	; (80019e8 <__aeabi_dsub+0x354>)
 8001714:	1c6a      	adds	r2, r5, #1
 8001716:	429a      	cmp	r2, r3
 8001718:	d100      	bne.n	800171c <__aeabi_dsub+0x88>
 800171a:	e109      	b.n	8001930 <__aeabi_dsub+0x29c>
 800171c:	4bb3      	ldr	r3, [pc, #716]	; (80019ec <__aeabi_dsub+0x358>)
 800171e:	08e4      	lsrs	r4, r4, #3
 8001720:	4019      	ands	r1, r3
 8001722:	0748      	lsls	r0, r1, #29
 8001724:	4304      	orrs	r4, r0
 8001726:	0249      	lsls	r1, r1, #9
 8001728:	0552      	lsls	r2, r2, #21
 800172a:	2701      	movs	r7, #1
 800172c:	4650      	mov	r0, sl
 800172e:	0b0b      	lsrs	r3, r1, #12
 8001730:	0d52      	lsrs	r2, r2, #21
 8001732:	4007      	ands	r7, r0
 8001734:	2000      	movs	r0, #0
 8001736:	2100      	movs	r1, #0
 8001738:	031b      	lsls	r3, r3, #12
 800173a:	1c20      	adds	r0, r4, #0
 800173c:	0b1c      	lsrs	r4, r3, #12
 800173e:	0d0b      	lsrs	r3, r1, #20
 8001740:	051b      	lsls	r3, r3, #20
 8001742:	4dab      	ldr	r5, [pc, #684]	; (80019f0 <__aeabi_dsub+0x35c>)
 8001744:	4323      	orrs	r3, r4
 8001746:	0552      	lsls	r2, r2, #21
 8001748:	0852      	lsrs	r2, r2, #1
 800174a:	401d      	ands	r5, r3
 800174c:	4315      	orrs	r5, r2
 800174e:	006d      	lsls	r5, r5, #1
 8001750:	086d      	lsrs	r5, r5, #1
 8001752:	07ff      	lsls	r7, r7, #31
 8001754:	1c29      	adds	r1, r5, #0
 8001756:	4339      	orrs	r1, r7
 8001758:	bc3c      	pop	{r2, r3, r4, r5}
 800175a:	4690      	mov	r8, r2
 800175c:	4699      	mov	r9, r3
 800175e:	46a2      	mov	sl, r4
 8001760:	46ab      	mov	fp, r5
 8001762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001764:	48a0      	ldr	r0, [pc, #640]	; (80019e8 <__aeabi_dsub+0x354>)
 8001766:	4285      	cmp	r5, r0
 8001768:	d0c4      	beq.n	80016f4 <__aeabi_dsub+0x60>
 800176a:	2080      	movs	r0, #128	; 0x80
 800176c:	0400      	lsls	r0, r0, #16
 800176e:	4303      	orrs	r3, r0
 8001770:	2f38      	cmp	r7, #56	; 0x38
 8001772:	dd00      	ble.n	8001776 <__aeabi_dsub+0xe2>
 8001774:	e0f0      	b.n	8001958 <__aeabi_dsub+0x2c4>
 8001776:	2f1f      	cmp	r7, #31
 8001778:	dd00      	ble.n	800177c <__aeabi_dsub+0xe8>
 800177a:	e124      	b.n	80019c6 <__aeabi_dsub+0x332>
 800177c:	2020      	movs	r0, #32
 800177e:	1bc0      	subs	r0, r0, r7
 8001780:	1c1a      	adds	r2, r3, #0
 8001782:	465e      	mov	r6, fp
 8001784:	4082      	lsls	r2, r0
 8001786:	40fe      	lsrs	r6, r7
 8001788:	4332      	orrs	r2, r6
 800178a:	4694      	mov	ip, r2
 800178c:	465a      	mov	r2, fp
 800178e:	4082      	lsls	r2, r0
 8001790:	1c10      	adds	r0, r2, #0
 8001792:	1e42      	subs	r2, r0, #1
 8001794:	4190      	sbcs	r0, r2
 8001796:	40fb      	lsrs	r3, r7
 8001798:	4662      	mov	r2, ip
 800179a:	4302      	orrs	r2, r0
 800179c:	1c1f      	adds	r7, r3, #0
 800179e:	1aa2      	subs	r2, r4, r2
 80017a0:	4294      	cmp	r4, r2
 80017a2:	41a4      	sbcs	r4, r4
 80017a4:	4264      	negs	r4, r4
 80017a6:	1bc9      	subs	r1, r1, r7
 80017a8:	1b09      	subs	r1, r1, r4
 80017aa:	1c14      	adds	r4, r2, #0
 80017ac:	020a      	lsls	r2, r1, #8
 80017ae:	d5a1      	bpl.n	80016f4 <__aeabi_dsub+0x60>
 80017b0:	0249      	lsls	r1, r1, #9
 80017b2:	0a4f      	lsrs	r7, r1, #9
 80017b4:	2f00      	cmp	r7, #0
 80017b6:	d100      	bne.n	80017ba <__aeabi_dsub+0x126>
 80017b8:	e0c9      	b.n	800194e <__aeabi_dsub+0x2ba>
 80017ba:	1c38      	adds	r0, r7, #0
 80017bc:	f000 fb3a 	bl	8001e34 <__clzsi2>
 80017c0:	1c02      	adds	r2, r0, #0
 80017c2:	3a08      	subs	r2, #8
 80017c4:	2a1f      	cmp	r2, #31
 80017c6:	dd00      	ble.n	80017ca <__aeabi_dsub+0x136>
 80017c8:	e0bc      	b.n	8001944 <__aeabi_dsub+0x2b0>
 80017ca:	2128      	movs	r1, #40	; 0x28
 80017cc:	1c23      	adds	r3, r4, #0
 80017ce:	1a09      	subs	r1, r1, r0
 80017d0:	4097      	lsls	r7, r2
 80017d2:	40cb      	lsrs	r3, r1
 80017d4:	431f      	orrs	r7, r3
 80017d6:	4094      	lsls	r4, r2
 80017d8:	4295      	cmp	r5, r2
 80017da:	dd00      	ble.n	80017de <__aeabi_dsub+0x14a>
 80017dc:	e0ae      	b.n	800193c <__aeabi_dsub+0x2a8>
 80017de:	1b55      	subs	r5, r2, r5
 80017e0:	1c69      	adds	r1, r5, #1
 80017e2:	291f      	cmp	r1, #31
 80017e4:	dd00      	ble.n	80017e8 <__aeabi_dsub+0x154>
 80017e6:	e0dd      	b.n	80019a4 <__aeabi_dsub+0x310>
 80017e8:	221f      	movs	r2, #31
 80017ea:	1b55      	subs	r5, r2, r5
 80017ec:	1c3b      	adds	r3, r7, #0
 80017ee:	1c22      	adds	r2, r4, #0
 80017f0:	40ab      	lsls	r3, r5
 80017f2:	40ca      	lsrs	r2, r1
 80017f4:	40ac      	lsls	r4, r5
 80017f6:	1e65      	subs	r5, r4, #1
 80017f8:	41ac      	sbcs	r4, r5
 80017fa:	4313      	orrs	r3, r2
 80017fc:	40cf      	lsrs	r7, r1
 80017fe:	431c      	orrs	r4, r3
 8001800:	1c39      	adds	r1, r7, #0
 8001802:	2500      	movs	r5, #0
 8001804:	e776      	b.n	80016f4 <__aeabi_dsub+0x60>
 8001806:	0748      	lsls	r0, r1, #29
 8001808:	08e4      	lsrs	r4, r4, #3
 800180a:	056a      	lsls	r2, r5, #21
 800180c:	2701      	movs	r7, #1
 800180e:	4656      	mov	r6, sl
 8001810:	08c9      	lsrs	r1, r1, #3
 8001812:	0d52      	lsrs	r2, r2, #21
 8001814:	4037      	ands	r7, r6
 8001816:	4304      	orrs	r4, r0
 8001818:	4b73      	ldr	r3, [pc, #460]	; (80019e8 <__aeabi_dsub+0x354>)
 800181a:	429d      	cmp	r5, r3
 800181c:	d049      	beq.n	80018b2 <__aeabi_dsub+0x21e>
 800181e:	0309      	lsls	r1, r1, #12
 8001820:	0b0b      	lsrs	r3, r1, #12
 8001822:	e787      	b.n	8001734 <__aeabi_dsub+0xa0>
 8001824:	1a2a      	subs	r2, r5, r0
 8001826:	4694      	mov	ip, r2
 8001828:	2a00      	cmp	r2, #0
 800182a:	dc00      	bgt.n	800182e <__aeabi_dsub+0x19a>
 800182c:	e09b      	b.n	8001966 <__aeabi_dsub+0x2d2>
 800182e:	2800      	cmp	r0, #0
 8001830:	d055      	beq.n	80018de <__aeabi_dsub+0x24a>
 8001832:	486d      	ldr	r0, [pc, #436]	; (80019e8 <__aeabi_dsub+0x354>)
 8001834:	4285      	cmp	r5, r0
 8001836:	d100      	bne.n	800183a <__aeabi_dsub+0x1a6>
 8001838:	e75c      	b.n	80016f4 <__aeabi_dsub+0x60>
 800183a:	2080      	movs	r0, #128	; 0x80
 800183c:	0400      	lsls	r0, r0, #16
 800183e:	4303      	orrs	r3, r0
 8001840:	4660      	mov	r0, ip
 8001842:	2838      	cmp	r0, #56	; 0x38
 8001844:	dd00      	ble.n	8001848 <__aeabi_dsub+0x1b4>
 8001846:	e109      	b.n	8001a5c <__aeabi_dsub+0x3c8>
 8001848:	281f      	cmp	r0, #31
 800184a:	dd00      	ble.n	800184e <__aeabi_dsub+0x1ba>
 800184c:	e150      	b.n	8001af0 <__aeabi_dsub+0x45c>
 800184e:	4662      	mov	r2, ip
 8001850:	2020      	movs	r0, #32
 8001852:	1a80      	subs	r0, r0, r2
 8001854:	1c1e      	adds	r6, r3, #0
 8001856:	4086      	lsls	r6, r0
 8001858:	46b1      	mov	r9, r6
 800185a:	465e      	mov	r6, fp
 800185c:	40d6      	lsrs	r6, r2
 800185e:	464a      	mov	r2, r9
 8001860:	4332      	orrs	r2, r6
 8001862:	465e      	mov	r6, fp
 8001864:	4086      	lsls	r6, r0
 8001866:	4690      	mov	r8, r2
 8001868:	1c30      	adds	r0, r6, #0
 800186a:	1e42      	subs	r2, r0, #1
 800186c:	4190      	sbcs	r0, r2
 800186e:	4642      	mov	r2, r8
 8001870:	4302      	orrs	r2, r0
 8001872:	4660      	mov	r0, ip
 8001874:	40c3      	lsrs	r3, r0
 8001876:	1912      	adds	r2, r2, r4
 8001878:	42a2      	cmp	r2, r4
 800187a:	41a4      	sbcs	r4, r4
 800187c:	4264      	negs	r4, r4
 800187e:	1859      	adds	r1, r3, r1
 8001880:	1909      	adds	r1, r1, r4
 8001882:	1c14      	adds	r4, r2, #0
 8001884:	0208      	lsls	r0, r1, #8
 8001886:	d400      	bmi.n	800188a <__aeabi_dsub+0x1f6>
 8001888:	e734      	b.n	80016f4 <__aeabi_dsub+0x60>
 800188a:	4b57      	ldr	r3, [pc, #348]	; (80019e8 <__aeabi_dsub+0x354>)
 800188c:	3501      	adds	r5, #1
 800188e:	429d      	cmp	r5, r3
 8001890:	d100      	bne.n	8001894 <__aeabi_dsub+0x200>
 8001892:	e142      	b.n	8001b1a <__aeabi_dsub+0x486>
 8001894:	4b55      	ldr	r3, [pc, #340]	; (80019ec <__aeabi_dsub+0x358>)
 8001896:	0860      	lsrs	r0, r4, #1
 8001898:	4019      	ands	r1, r3
 800189a:	2301      	movs	r3, #1
 800189c:	4023      	ands	r3, r4
 800189e:	1c1c      	adds	r4, r3, #0
 80018a0:	4304      	orrs	r4, r0
 80018a2:	07cb      	lsls	r3, r1, #31
 80018a4:	431c      	orrs	r4, r3
 80018a6:	0849      	lsrs	r1, r1, #1
 80018a8:	e724      	b.n	80016f4 <__aeabi_dsub+0x60>
 80018aa:	431e      	orrs	r6, r3
 80018ac:	d000      	beq.n	80018b0 <__aeabi_dsub+0x21c>
 80018ae:	e714      	b.n	80016da <__aeabi_dsub+0x46>
 80018b0:	e70f      	b.n	80016d2 <__aeabi_dsub+0x3e>
 80018b2:	1c0b      	adds	r3, r1, #0
 80018b4:	4323      	orrs	r3, r4
 80018b6:	d100      	bne.n	80018ba <__aeabi_dsub+0x226>
 80018b8:	e1cf      	b.n	8001c5a <__aeabi_dsub+0x5c6>
 80018ba:	2380      	movs	r3, #128	; 0x80
 80018bc:	031b      	lsls	r3, r3, #12
 80018be:	430b      	orrs	r3, r1
 80018c0:	031b      	lsls	r3, r3, #12
 80018c2:	0b1b      	lsrs	r3, r3, #12
 80018c4:	e736      	b.n	8001734 <__aeabi_dsub+0xa0>
 80018c6:	3f01      	subs	r7, #1
 80018c8:	2f00      	cmp	r7, #0
 80018ca:	d166      	bne.n	800199a <__aeabi_dsub+0x306>
 80018cc:	465e      	mov	r6, fp
 80018ce:	1ba2      	subs	r2, r4, r6
 80018d0:	4294      	cmp	r4, r2
 80018d2:	41a4      	sbcs	r4, r4
 80018d4:	4264      	negs	r4, r4
 80018d6:	1ac9      	subs	r1, r1, r3
 80018d8:	1b09      	subs	r1, r1, r4
 80018da:	1c14      	adds	r4, r2, #0
 80018dc:	e766      	b.n	80017ac <__aeabi_dsub+0x118>
 80018de:	4658      	mov	r0, fp
 80018e0:	4318      	orrs	r0, r3
 80018e2:	d100      	bne.n	80018e6 <__aeabi_dsub+0x252>
 80018e4:	e706      	b.n	80016f4 <__aeabi_dsub+0x60>
 80018e6:	2601      	movs	r6, #1
 80018e8:	4276      	negs	r6, r6
 80018ea:	44b4      	add	ip, r6
 80018ec:	4660      	mov	r0, ip
 80018ee:	2800      	cmp	r0, #0
 80018f0:	d000      	beq.n	80018f4 <__aeabi_dsub+0x260>
 80018f2:	e0ca      	b.n	8001a8a <__aeabi_dsub+0x3f6>
 80018f4:	465e      	mov	r6, fp
 80018f6:	1932      	adds	r2, r6, r4
 80018f8:	e7be      	b.n	8001878 <__aeabi_dsub+0x1e4>
 80018fa:	2f00      	cmp	r7, #0
 80018fc:	d17a      	bne.n	80019f4 <__aeabi_dsub+0x360>
 80018fe:	1c68      	adds	r0, r5, #1
 8001900:	0540      	lsls	r0, r0, #21
 8001902:	0d40      	lsrs	r0, r0, #21
 8001904:	2801      	cmp	r0, #1
 8001906:	dc00      	bgt.n	800190a <__aeabi_dsub+0x276>
 8001908:	e0e3      	b.n	8001ad2 <__aeabi_dsub+0x43e>
 800190a:	465a      	mov	r2, fp
 800190c:	1aa2      	subs	r2, r4, r2
 800190e:	4294      	cmp	r4, r2
 8001910:	41bf      	sbcs	r7, r7
 8001912:	1ac8      	subs	r0, r1, r3
 8001914:	427f      	negs	r7, r7
 8001916:	1bc7      	subs	r7, r0, r7
 8001918:	023e      	lsls	r6, r7, #8
 800191a:	d400      	bmi.n	800191e <__aeabi_dsub+0x28a>
 800191c:	e092      	b.n	8001a44 <__aeabi_dsub+0x3b0>
 800191e:	4658      	mov	r0, fp
 8001920:	1b04      	subs	r4, r0, r4
 8001922:	45a3      	cmp	fp, r4
 8001924:	4192      	sbcs	r2, r2
 8001926:	1a59      	subs	r1, r3, r1
 8001928:	4252      	negs	r2, r2
 800192a:	1a8f      	subs	r7, r1, r2
 800192c:	46e2      	mov	sl, ip
 800192e:	e741      	b.n	80017b4 <__aeabi_dsub+0x120>
 8001930:	4653      	mov	r3, sl
 8001932:	2701      	movs	r7, #1
 8001934:	401f      	ands	r7, r3
 8001936:	2400      	movs	r4, #0
 8001938:	2300      	movs	r3, #0
 800193a:	e6fb      	b.n	8001734 <__aeabi_dsub+0xa0>
 800193c:	492b      	ldr	r1, [pc, #172]	; (80019ec <__aeabi_dsub+0x358>)
 800193e:	1aad      	subs	r5, r5, r2
 8001940:	4039      	ands	r1, r7
 8001942:	e6d7      	b.n	80016f4 <__aeabi_dsub+0x60>
 8001944:	1c27      	adds	r7, r4, #0
 8001946:	3828      	subs	r0, #40	; 0x28
 8001948:	4087      	lsls	r7, r0
 800194a:	2400      	movs	r4, #0
 800194c:	e744      	b.n	80017d8 <__aeabi_dsub+0x144>
 800194e:	1c20      	adds	r0, r4, #0
 8001950:	f000 fa70 	bl	8001e34 <__clzsi2>
 8001954:	3020      	adds	r0, #32
 8001956:	e733      	b.n	80017c0 <__aeabi_dsub+0x12c>
 8001958:	465a      	mov	r2, fp
 800195a:	431a      	orrs	r2, r3
 800195c:	1e53      	subs	r3, r2, #1
 800195e:	419a      	sbcs	r2, r3
 8001960:	b2d2      	uxtb	r2, r2
 8001962:	2700      	movs	r7, #0
 8001964:	e71b      	b.n	800179e <__aeabi_dsub+0x10a>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d000      	beq.n	800196c <__aeabi_dsub+0x2d8>
 800196a:	e0e1      	b.n	8001b30 <__aeabi_dsub+0x49c>
 800196c:	1c68      	adds	r0, r5, #1
 800196e:	0546      	lsls	r6, r0, #21
 8001970:	0d76      	lsrs	r6, r6, #21
 8001972:	2e01      	cmp	r6, #1
 8001974:	dc00      	bgt.n	8001978 <__aeabi_dsub+0x2e4>
 8001976:	e091      	b.n	8001a9c <__aeabi_dsub+0x408>
 8001978:	4d1b      	ldr	r5, [pc, #108]	; (80019e8 <__aeabi_dsub+0x354>)
 800197a:	42a8      	cmp	r0, r5
 800197c:	d100      	bne.n	8001980 <__aeabi_dsub+0x2ec>
 800197e:	e0f7      	b.n	8001b70 <__aeabi_dsub+0x4dc>
 8001980:	465e      	mov	r6, fp
 8001982:	1932      	adds	r2, r6, r4
 8001984:	42a2      	cmp	r2, r4
 8001986:	41a4      	sbcs	r4, r4
 8001988:	4264      	negs	r4, r4
 800198a:	1859      	adds	r1, r3, r1
 800198c:	1909      	adds	r1, r1, r4
 800198e:	07cc      	lsls	r4, r1, #31
 8001990:	0852      	lsrs	r2, r2, #1
 8001992:	4314      	orrs	r4, r2
 8001994:	0849      	lsrs	r1, r1, #1
 8001996:	1c05      	adds	r5, r0, #0
 8001998:	e6ac      	b.n	80016f4 <__aeabi_dsub+0x60>
 800199a:	4813      	ldr	r0, [pc, #76]	; (80019e8 <__aeabi_dsub+0x354>)
 800199c:	4285      	cmp	r5, r0
 800199e:	d000      	beq.n	80019a2 <__aeabi_dsub+0x30e>
 80019a0:	e6e6      	b.n	8001770 <__aeabi_dsub+0xdc>
 80019a2:	e6a7      	b.n	80016f4 <__aeabi_dsub+0x60>
 80019a4:	1c2b      	adds	r3, r5, #0
 80019a6:	3b1f      	subs	r3, #31
 80019a8:	1c3e      	adds	r6, r7, #0
 80019aa:	40de      	lsrs	r6, r3
 80019ac:	1c33      	adds	r3, r6, #0
 80019ae:	2920      	cmp	r1, #32
 80019b0:	d070      	beq.n	8001a94 <__aeabi_dsub+0x400>
 80019b2:	223f      	movs	r2, #63	; 0x3f
 80019b4:	1b55      	subs	r5, r2, r5
 80019b6:	40af      	lsls	r7, r5
 80019b8:	433c      	orrs	r4, r7
 80019ba:	1e60      	subs	r0, r4, #1
 80019bc:	4184      	sbcs	r4, r0
 80019be:	431c      	orrs	r4, r3
 80019c0:	2100      	movs	r1, #0
 80019c2:	2500      	movs	r5, #0
 80019c4:	e696      	b.n	80016f4 <__aeabi_dsub+0x60>
 80019c6:	1c38      	adds	r0, r7, #0
 80019c8:	3820      	subs	r0, #32
 80019ca:	1c1e      	adds	r6, r3, #0
 80019cc:	40c6      	lsrs	r6, r0
 80019ce:	1c30      	adds	r0, r6, #0
 80019d0:	2f20      	cmp	r7, #32
 80019d2:	d061      	beq.n	8001a98 <__aeabi_dsub+0x404>
 80019d4:	2240      	movs	r2, #64	; 0x40
 80019d6:	1bd7      	subs	r7, r2, r7
 80019d8:	40bb      	lsls	r3, r7
 80019da:	465a      	mov	r2, fp
 80019dc:	431a      	orrs	r2, r3
 80019de:	1e53      	subs	r3, r2, #1
 80019e0:	419a      	sbcs	r2, r3
 80019e2:	4302      	orrs	r2, r0
 80019e4:	2700      	movs	r7, #0
 80019e6:	e6da      	b.n	800179e <__aeabi_dsub+0x10a>
 80019e8:	000007ff 	.word	0x000007ff
 80019ec:	ff7fffff 	.word	0xff7fffff
 80019f0:	800fffff 	.word	0x800fffff
 80019f4:	2d00      	cmp	r5, #0
 80019f6:	d038      	beq.n	8001a6a <__aeabi_dsub+0x3d6>
 80019f8:	4db9      	ldr	r5, [pc, #740]	; (8001ce0 <__aeabi_dsub+0x64c>)
 80019fa:	42a8      	cmp	r0, r5
 80019fc:	d100      	bne.n	8001a00 <__aeabi_dsub+0x36c>
 80019fe:	e092      	b.n	8001b26 <__aeabi_dsub+0x492>
 8001a00:	2580      	movs	r5, #128	; 0x80
 8001a02:	042d      	lsls	r5, r5, #16
 8001a04:	427f      	negs	r7, r7
 8001a06:	4329      	orrs	r1, r5
 8001a08:	2f38      	cmp	r7, #56	; 0x38
 8001a0a:	dd00      	ble.n	8001a0e <__aeabi_dsub+0x37a>
 8001a0c:	e0aa      	b.n	8001b64 <__aeabi_dsub+0x4d0>
 8001a0e:	2f1f      	cmp	r7, #31
 8001a10:	dd00      	ble.n	8001a14 <__aeabi_dsub+0x380>
 8001a12:	e12c      	b.n	8001c6e <__aeabi_dsub+0x5da>
 8001a14:	2520      	movs	r5, #32
 8001a16:	1bed      	subs	r5, r5, r7
 8001a18:	1c0e      	adds	r6, r1, #0
 8001a1a:	40ae      	lsls	r6, r5
 8001a1c:	46b0      	mov	r8, r6
 8001a1e:	1c26      	adds	r6, r4, #0
 8001a20:	40fe      	lsrs	r6, r7
 8001a22:	4642      	mov	r2, r8
 8001a24:	40ac      	lsls	r4, r5
 8001a26:	4316      	orrs	r6, r2
 8001a28:	1e65      	subs	r5, r4, #1
 8001a2a:	41ac      	sbcs	r4, r5
 8001a2c:	4334      	orrs	r4, r6
 8001a2e:	40f9      	lsrs	r1, r7
 8001a30:	465a      	mov	r2, fp
 8001a32:	1b14      	subs	r4, r2, r4
 8001a34:	45a3      	cmp	fp, r4
 8001a36:	4192      	sbcs	r2, r2
 8001a38:	1a5b      	subs	r3, r3, r1
 8001a3a:	4252      	negs	r2, r2
 8001a3c:	1a99      	subs	r1, r3, r2
 8001a3e:	1c05      	adds	r5, r0, #0
 8001a40:	46e2      	mov	sl, ip
 8001a42:	e6b3      	b.n	80017ac <__aeabi_dsub+0x118>
 8001a44:	1c13      	adds	r3, r2, #0
 8001a46:	433b      	orrs	r3, r7
 8001a48:	1c14      	adds	r4, r2, #0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d000      	beq.n	8001a50 <__aeabi_dsub+0x3bc>
 8001a4e:	e6b1      	b.n	80017b4 <__aeabi_dsub+0x120>
 8001a50:	2700      	movs	r7, #0
 8001a52:	2200      	movs	r2, #0
 8001a54:	2500      	movs	r5, #0
 8001a56:	2100      	movs	r1, #0
 8001a58:	2400      	movs	r4, #0
 8001a5a:	e6dd      	b.n	8001818 <__aeabi_dsub+0x184>
 8001a5c:	465a      	mov	r2, fp
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	1e53      	subs	r3, r2, #1
 8001a62:	419a      	sbcs	r2, r3
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	2300      	movs	r3, #0
 8001a68:	e705      	b.n	8001876 <__aeabi_dsub+0x1e2>
 8001a6a:	1c0d      	adds	r5, r1, #0
 8001a6c:	4325      	orrs	r5, r4
 8001a6e:	d05a      	beq.n	8001b26 <__aeabi_dsub+0x492>
 8001a70:	43ff      	mvns	r7, r7
 8001a72:	2f00      	cmp	r7, #0
 8001a74:	d153      	bne.n	8001b1e <__aeabi_dsub+0x48a>
 8001a76:	465a      	mov	r2, fp
 8001a78:	1b14      	subs	r4, r2, r4
 8001a7a:	45a3      	cmp	fp, r4
 8001a7c:	4192      	sbcs	r2, r2
 8001a7e:	1a59      	subs	r1, r3, r1
 8001a80:	4252      	negs	r2, r2
 8001a82:	1a89      	subs	r1, r1, r2
 8001a84:	1c05      	adds	r5, r0, #0
 8001a86:	46e2      	mov	sl, ip
 8001a88:	e690      	b.n	80017ac <__aeabi_dsub+0x118>
 8001a8a:	4895      	ldr	r0, [pc, #596]	; (8001ce0 <__aeabi_dsub+0x64c>)
 8001a8c:	4285      	cmp	r5, r0
 8001a8e:	d000      	beq.n	8001a92 <__aeabi_dsub+0x3fe>
 8001a90:	e6d6      	b.n	8001840 <__aeabi_dsub+0x1ac>
 8001a92:	e62f      	b.n	80016f4 <__aeabi_dsub+0x60>
 8001a94:	2700      	movs	r7, #0
 8001a96:	e78f      	b.n	80019b8 <__aeabi_dsub+0x324>
 8001a98:	2300      	movs	r3, #0
 8001a9a:	e79e      	b.n	80019da <__aeabi_dsub+0x346>
 8001a9c:	1c08      	adds	r0, r1, #0
 8001a9e:	4320      	orrs	r0, r4
 8001aa0:	2d00      	cmp	r5, #0
 8001aa2:	d000      	beq.n	8001aa6 <__aeabi_dsub+0x412>
 8001aa4:	e0c3      	b.n	8001c2e <__aeabi_dsub+0x59a>
 8001aa6:	2800      	cmp	r0, #0
 8001aa8:	d100      	bne.n	8001aac <__aeabi_dsub+0x418>
 8001aaa:	e0f6      	b.n	8001c9a <__aeabi_dsub+0x606>
 8001aac:	4658      	mov	r0, fp
 8001aae:	4318      	orrs	r0, r3
 8001ab0:	d100      	bne.n	8001ab4 <__aeabi_dsub+0x420>
 8001ab2:	e61f      	b.n	80016f4 <__aeabi_dsub+0x60>
 8001ab4:	4658      	mov	r0, fp
 8001ab6:	1902      	adds	r2, r0, r4
 8001ab8:	42a2      	cmp	r2, r4
 8001aba:	41a4      	sbcs	r4, r4
 8001abc:	4264      	negs	r4, r4
 8001abe:	1859      	adds	r1, r3, r1
 8001ac0:	1909      	adds	r1, r1, r4
 8001ac2:	1c14      	adds	r4, r2, #0
 8001ac4:	020a      	lsls	r2, r1, #8
 8001ac6:	d400      	bmi.n	8001aca <__aeabi_dsub+0x436>
 8001ac8:	e614      	b.n	80016f4 <__aeabi_dsub+0x60>
 8001aca:	4b86      	ldr	r3, [pc, #536]	; (8001ce4 <__aeabi_dsub+0x650>)
 8001acc:	2501      	movs	r5, #1
 8001ace:	4019      	ands	r1, r3
 8001ad0:	e610      	b.n	80016f4 <__aeabi_dsub+0x60>
 8001ad2:	1c08      	adds	r0, r1, #0
 8001ad4:	4320      	orrs	r0, r4
 8001ad6:	2d00      	cmp	r5, #0
 8001ad8:	d13a      	bne.n	8001b50 <__aeabi_dsub+0x4bc>
 8001ada:	2800      	cmp	r0, #0
 8001adc:	d000      	beq.n	8001ae0 <__aeabi_dsub+0x44c>
 8001ade:	e089      	b.n	8001bf4 <__aeabi_dsub+0x560>
 8001ae0:	4659      	mov	r1, fp
 8001ae2:	4319      	orrs	r1, r3
 8001ae4:	d100      	bne.n	8001ae8 <__aeabi_dsub+0x454>
 8001ae6:	e0bf      	b.n	8001c68 <__aeabi_dsub+0x5d4>
 8001ae8:	1c19      	adds	r1, r3, #0
 8001aea:	465c      	mov	r4, fp
 8001aec:	46e2      	mov	sl, ip
 8001aee:	e601      	b.n	80016f4 <__aeabi_dsub+0x60>
 8001af0:	4660      	mov	r0, ip
 8001af2:	3820      	subs	r0, #32
 8001af4:	1c1a      	adds	r2, r3, #0
 8001af6:	40c2      	lsrs	r2, r0
 8001af8:	4666      	mov	r6, ip
 8001afa:	1c10      	adds	r0, r2, #0
 8001afc:	2e20      	cmp	r6, #32
 8001afe:	d100      	bne.n	8001b02 <__aeabi_dsub+0x46e>
 8001b00:	e0b0      	b.n	8001c64 <__aeabi_dsub+0x5d0>
 8001b02:	2240      	movs	r2, #64	; 0x40
 8001b04:	1b92      	subs	r2, r2, r6
 8001b06:	4093      	lsls	r3, r2
 8001b08:	465a      	mov	r2, fp
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	1e53      	subs	r3, r2, #1
 8001b0e:	419a      	sbcs	r2, r3
 8001b10:	4302      	orrs	r2, r0
 8001b12:	2300      	movs	r3, #0
 8001b14:	e6af      	b.n	8001876 <__aeabi_dsub+0x1e2>
 8001b16:	4d72      	ldr	r5, [pc, #456]	; (8001ce0 <__aeabi_dsub+0x64c>)
 8001b18:	2700      	movs	r7, #0
 8001b1a:	1c2a      	adds	r2, r5, #0
 8001b1c:	e79b      	b.n	8001a56 <__aeabi_dsub+0x3c2>
 8001b1e:	4d70      	ldr	r5, [pc, #448]	; (8001ce0 <__aeabi_dsub+0x64c>)
 8001b20:	42a8      	cmp	r0, r5
 8001b22:	d000      	beq.n	8001b26 <__aeabi_dsub+0x492>
 8001b24:	e770      	b.n	8001a08 <__aeabi_dsub+0x374>
 8001b26:	1c19      	adds	r1, r3, #0
 8001b28:	465c      	mov	r4, fp
 8001b2a:	1c05      	adds	r5, r0, #0
 8001b2c:	46e2      	mov	sl, ip
 8001b2e:	e5e1      	b.n	80016f4 <__aeabi_dsub+0x60>
 8001b30:	2d00      	cmp	r5, #0
 8001b32:	d120      	bne.n	8001b76 <__aeabi_dsub+0x4e2>
 8001b34:	1c0d      	adds	r5, r1, #0
 8001b36:	4325      	orrs	r5, r4
 8001b38:	d075      	beq.n	8001c26 <__aeabi_dsub+0x592>
 8001b3a:	43d5      	mvns	r5, r2
 8001b3c:	2d00      	cmp	r5, #0
 8001b3e:	d16f      	bne.n	8001c20 <__aeabi_dsub+0x58c>
 8001b40:	445c      	add	r4, fp
 8001b42:	455c      	cmp	r4, fp
 8001b44:	4192      	sbcs	r2, r2
 8001b46:	1859      	adds	r1, r3, r1
 8001b48:	4252      	negs	r2, r2
 8001b4a:	1889      	adds	r1, r1, r2
 8001b4c:	1c05      	adds	r5, r0, #0
 8001b4e:	e699      	b.n	8001884 <__aeabi_dsub+0x1f0>
 8001b50:	2800      	cmp	r0, #0
 8001b52:	d135      	bne.n	8001bc0 <__aeabi_dsub+0x52c>
 8001b54:	4659      	mov	r1, fp
 8001b56:	4319      	orrs	r1, r3
 8001b58:	d0dd      	beq.n	8001b16 <__aeabi_dsub+0x482>
 8001b5a:	1c19      	adds	r1, r3, #0
 8001b5c:	465c      	mov	r4, fp
 8001b5e:	46e2      	mov	sl, ip
 8001b60:	4d5f      	ldr	r5, [pc, #380]	; (8001ce0 <__aeabi_dsub+0x64c>)
 8001b62:	e5c7      	b.n	80016f4 <__aeabi_dsub+0x60>
 8001b64:	430c      	orrs	r4, r1
 8001b66:	1e61      	subs	r1, r4, #1
 8001b68:	418c      	sbcs	r4, r1
 8001b6a:	b2e4      	uxtb	r4, r4
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	e75f      	b.n	8001a30 <__aeabi_dsub+0x39c>
 8001b70:	1c05      	adds	r5, r0, #0
 8001b72:	1c02      	adds	r2, r0, #0
 8001b74:	e76f      	b.n	8001a56 <__aeabi_dsub+0x3c2>
 8001b76:	4d5a      	ldr	r5, [pc, #360]	; (8001ce0 <__aeabi_dsub+0x64c>)
 8001b78:	42a8      	cmp	r0, r5
 8001b7a:	d054      	beq.n	8001c26 <__aeabi_dsub+0x592>
 8001b7c:	4255      	negs	r5, r2
 8001b7e:	2280      	movs	r2, #128	; 0x80
 8001b80:	0416      	lsls	r6, r2, #16
 8001b82:	4331      	orrs	r1, r6
 8001b84:	2d38      	cmp	r5, #56	; 0x38
 8001b86:	dd00      	ble.n	8001b8a <__aeabi_dsub+0x4f6>
 8001b88:	e081      	b.n	8001c8e <__aeabi_dsub+0x5fa>
 8001b8a:	2d1f      	cmp	r5, #31
 8001b8c:	dd00      	ble.n	8001b90 <__aeabi_dsub+0x4fc>
 8001b8e:	e091      	b.n	8001cb4 <__aeabi_dsub+0x620>
 8001b90:	2220      	movs	r2, #32
 8001b92:	1b56      	subs	r6, r2, r5
 8001b94:	1c0a      	adds	r2, r1, #0
 8001b96:	46b4      	mov	ip, r6
 8001b98:	40b2      	lsls	r2, r6
 8001b9a:	1c26      	adds	r6, r4, #0
 8001b9c:	40ee      	lsrs	r6, r5
 8001b9e:	4332      	orrs	r2, r6
 8001ba0:	4690      	mov	r8, r2
 8001ba2:	4662      	mov	r2, ip
 8001ba4:	4094      	lsls	r4, r2
 8001ba6:	1e66      	subs	r6, r4, #1
 8001ba8:	41b4      	sbcs	r4, r6
 8001baa:	4642      	mov	r2, r8
 8001bac:	4314      	orrs	r4, r2
 8001bae:	40e9      	lsrs	r1, r5
 8001bb0:	445c      	add	r4, fp
 8001bb2:	455c      	cmp	r4, fp
 8001bb4:	4192      	sbcs	r2, r2
 8001bb6:	18cb      	adds	r3, r1, r3
 8001bb8:	4252      	negs	r2, r2
 8001bba:	1899      	adds	r1, r3, r2
 8001bbc:	1c05      	adds	r5, r0, #0
 8001bbe:	e661      	b.n	8001884 <__aeabi_dsub+0x1f0>
 8001bc0:	4658      	mov	r0, fp
 8001bc2:	4318      	orrs	r0, r3
 8001bc4:	d04c      	beq.n	8001c60 <__aeabi_dsub+0x5cc>
 8001bc6:	0748      	lsls	r0, r1, #29
 8001bc8:	08e4      	lsrs	r4, r4, #3
 8001bca:	4304      	orrs	r4, r0
 8001bcc:	2080      	movs	r0, #128	; 0x80
 8001bce:	08c9      	lsrs	r1, r1, #3
 8001bd0:	0300      	lsls	r0, r0, #12
 8001bd2:	4201      	tst	r1, r0
 8001bd4:	d008      	beq.n	8001be8 <__aeabi_dsub+0x554>
 8001bd6:	08dd      	lsrs	r5, r3, #3
 8001bd8:	4205      	tst	r5, r0
 8001bda:	d105      	bne.n	8001be8 <__aeabi_dsub+0x554>
 8001bdc:	4659      	mov	r1, fp
 8001bde:	08ca      	lsrs	r2, r1, #3
 8001be0:	075c      	lsls	r4, r3, #29
 8001be2:	4314      	orrs	r4, r2
 8001be4:	1c29      	adds	r1, r5, #0
 8001be6:	46e2      	mov	sl, ip
 8001be8:	0f63      	lsrs	r3, r4, #29
 8001bea:	00c9      	lsls	r1, r1, #3
 8001bec:	4319      	orrs	r1, r3
 8001bee:	00e4      	lsls	r4, r4, #3
 8001bf0:	4d3b      	ldr	r5, [pc, #236]	; (8001ce0 <__aeabi_dsub+0x64c>)
 8001bf2:	e57f      	b.n	80016f4 <__aeabi_dsub+0x60>
 8001bf4:	4658      	mov	r0, fp
 8001bf6:	4318      	orrs	r0, r3
 8001bf8:	d100      	bne.n	8001bfc <__aeabi_dsub+0x568>
 8001bfa:	e57b      	b.n	80016f4 <__aeabi_dsub+0x60>
 8001bfc:	465e      	mov	r6, fp
 8001bfe:	1ba7      	subs	r7, r4, r6
 8001c00:	42bc      	cmp	r4, r7
 8001c02:	4192      	sbcs	r2, r2
 8001c04:	1ac8      	subs	r0, r1, r3
 8001c06:	4252      	negs	r2, r2
 8001c08:	1a80      	subs	r0, r0, r2
 8001c0a:	0206      	lsls	r6, r0, #8
 8001c0c:	d54c      	bpl.n	8001ca8 <__aeabi_dsub+0x614>
 8001c0e:	4658      	mov	r0, fp
 8001c10:	1b04      	subs	r4, r0, r4
 8001c12:	45a3      	cmp	fp, r4
 8001c14:	4192      	sbcs	r2, r2
 8001c16:	1a59      	subs	r1, r3, r1
 8001c18:	4252      	negs	r2, r2
 8001c1a:	1a89      	subs	r1, r1, r2
 8001c1c:	46e2      	mov	sl, ip
 8001c1e:	e569      	b.n	80016f4 <__aeabi_dsub+0x60>
 8001c20:	4a2f      	ldr	r2, [pc, #188]	; (8001ce0 <__aeabi_dsub+0x64c>)
 8001c22:	4290      	cmp	r0, r2
 8001c24:	d1ae      	bne.n	8001b84 <__aeabi_dsub+0x4f0>
 8001c26:	1c19      	adds	r1, r3, #0
 8001c28:	465c      	mov	r4, fp
 8001c2a:	1c05      	adds	r5, r0, #0
 8001c2c:	e562      	b.n	80016f4 <__aeabi_dsub+0x60>
 8001c2e:	2800      	cmp	r0, #0
 8001c30:	d036      	beq.n	8001ca0 <__aeabi_dsub+0x60c>
 8001c32:	4658      	mov	r0, fp
 8001c34:	4318      	orrs	r0, r3
 8001c36:	d013      	beq.n	8001c60 <__aeabi_dsub+0x5cc>
 8001c38:	2580      	movs	r5, #128	; 0x80
 8001c3a:	0748      	lsls	r0, r1, #29
 8001c3c:	08e4      	lsrs	r4, r4, #3
 8001c3e:	08c9      	lsrs	r1, r1, #3
 8001c40:	032d      	lsls	r5, r5, #12
 8001c42:	4304      	orrs	r4, r0
 8001c44:	4229      	tst	r1, r5
 8001c46:	d0cf      	beq.n	8001be8 <__aeabi_dsub+0x554>
 8001c48:	08d8      	lsrs	r0, r3, #3
 8001c4a:	4228      	tst	r0, r5
 8001c4c:	d1cc      	bne.n	8001be8 <__aeabi_dsub+0x554>
 8001c4e:	465d      	mov	r5, fp
 8001c50:	08ea      	lsrs	r2, r5, #3
 8001c52:	075c      	lsls	r4, r3, #29
 8001c54:	4314      	orrs	r4, r2
 8001c56:	1c01      	adds	r1, r0, #0
 8001c58:	e7c6      	b.n	8001be8 <__aeabi_dsub+0x554>
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	2400      	movs	r4, #0
 8001c5e:	e569      	b.n	8001734 <__aeabi_dsub+0xa0>
 8001c60:	4d1f      	ldr	r5, [pc, #124]	; (8001ce0 <__aeabi_dsub+0x64c>)
 8001c62:	e547      	b.n	80016f4 <__aeabi_dsub+0x60>
 8001c64:	2300      	movs	r3, #0
 8001c66:	e74f      	b.n	8001b08 <__aeabi_dsub+0x474>
 8001c68:	2700      	movs	r7, #0
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	e6f3      	b.n	8001a56 <__aeabi_dsub+0x3c2>
 8001c6e:	1c3d      	adds	r5, r7, #0
 8001c70:	3d20      	subs	r5, #32
 8001c72:	1c0e      	adds	r6, r1, #0
 8001c74:	40ee      	lsrs	r6, r5
 8001c76:	1c35      	adds	r5, r6, #0
 8001c78:	2f20      	cmp	r7, #32
 8001c7a:	d02d      	beq.n	8001cd8 <__aeabi_dsub+0x644>
 8001c7c:	2640      	movs	r6, #64	; 0x40
 8001c7e:	1bf7      	subs	r7, r6, r7
 8001c80:	40b9      	lsls	r1, r7
 8001c82:	430c      	orrs	r4, r1
 8001c84:	1e61      	subs	r1, r4, #1
 8001c86:	418c      	sbcs	r4, r1
 8001c88:	432c      	orrs	r4, r5
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	e6d0      	b.n	8001a30 <__aeabi_dsub+0x39c>
 8001c8e:	430c      	orrs	r4, r1
 8001c90:	1e61      	subs	r1, r4, #1
 8001c92:	418c      	sbcs	r4, r1
 8001c94:	b2e4      	uxtb	r4, r4
 8001c96:	2100      	movs	r1, #0
 8001c98:	e78a      	b.n	8001bb0 <__aeabi_dsub+0x51c>
 8001c9a:	1c19      	adds	r1, r3, #0
 8001c9c:	465c      	mov	r4, fp
 8001c9e:	e529      	b.n	80016f4 <__aeabi_dsub+0x60>
 8001ca0:	1c19      	adds	r1, r3, #0
 8001ca2:	465c      	mov	r4, fp
 8001ca4:	4d0e      	ldr	r5, [pc, #56]	; (8001ce0 <__aeabi_dsub+0x64c>)
 8001ca6:	e525      	b.n	80016f4 <__aeabi_dsub+0x60>
 8001ca8:	1c03      	adds	r3, r0, #0
 8001caa:	433b      	orrs	r3, r7
 8001cac:	d0dc      	beq.n	8001c68 <__aeabi_dsub+0x5d4>
 8001cae:	1c01      	adds	r1, r0, #0
 8001cb0:	1c3c      	adds	r4, r7, #0
 8001cb2:	e51f      	b.n	80016f4 <__aeabi_dsub+0x60>
 8001cb4:	2620      	movs	r6, #32
 8001cb6:	4276      	negs	r6, r6
 8001cb8:	1976      	adds	r6, r6, r5
 8001cba:	1c0a      	adds	r2, r1, #0
 8001cbc:	40f2      	lsrs	r2, r6
 8001cbe:	4690      	mov	r8, r2
 8001cc0:	2d20      	cmp	r5, #32
 8001cc2:	d00b      	beq.n	8001cdc <__aeabi_dsub+0x648>
 8001cc4:	2640      	movs	r6, #64	; 0x40
 8001cc6:	1b75      	subs	r5, r6, r5
 8001cc8:	40a9      	lsls	r1, r5
 8001cca:	430c      	orrs	r4, r1
 8001ccc:	1e61      	subs	r1, r4, #1
 8001cce:	418c      	sbcs	r4, r1
 8001cd0:	4645      	mov	r5, r8
 8001cd2:	432c      	orrs	r4, r5
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	e76b      	b.n	8001bb0 <__aeabi_dsub+0x51c>
 8001cd8:	2100      	movs	r1, #0
 8001cda:	e7d2      	b.n	8001c82 <__aeabi_dsub+0x5ee>
 8001cdc:	2100      	movs	r1, #0
 8001cde:	e7f4      	b.n	8001cca <__aeabi_dsub+0x636>
 8001ce0:	000007ff 	.word	0x000007ff
 8001ce4:	ff7fffff 	.word	0xff7fffff

08001ce8 <__aeabi_d2iz>:
 8001ce8:	b570      	push	{r4, r5, r6, lr}
 8001cea:	1c0b      	adds	r3, r1, #0
 8001cec:	4c12      	ldr	r4, [pc, #72]	; (8001d38 <__aeabi_d2iz+0x50>)
 8001cee:	0309      	lsls	r1, r1, #12
 8001cf0:	0b0e      	lsrs	r6, r1, #12
 8001cf2:	0059      	lsls	r1, r3, #1
 8001cf4:	1c02      	adds	r2, r0, #0
 8001cf6:	0d49      	lsrs	r1, r1, #21
 8001cf8:	0fdd      	lsrs	r5, r3, #31
 8001cfa:	2000      	movs	r0, #0
 8001cfc:	42a1      	cmp	r1, r4
 8001cfe:	dd11      	ble.n	8001d24 <__aeabi_d2iz+0x3c>
 8001d00:	480e      	ldr	r0, [pc, #56]	; (8001d3c <__aeabi_d2iz+0x54>)
 8001d02:	4281      	cmp	r1, r0
 8001d04:	dc0f      	bgt.n	8001d26 <__aeabi_d2iz+0x3e>
 8001d06:	2080      	movs	r0, #128	; 0x80
 8001d08:	0340      	lsls	r0, r0, #13
 8001d0a:	4306      	orrs	r6, r0
 8001d0c:	480c      	ldr	r0, [pc, #48]	; (8001d40 <__aeabi_d2iz+0x58>)
 8001d0e:	1a40      	subs	r0, r0, r1
 8001d10:	281f      	cmp	r0, #31
 8001d12:	dd0b      	ble.n	8001d2c <__aeabi_d2iz+0x44>
 8001d14:	4a0b      	ldr	r2, [pc, #44]	; (8001d44 <__aeabi_d2iz+0x5c>)
 8001d16:	1a52      	subs	r2, r2, r1
 8001d18:	40d6      	lsrs	r6, r2
 8001d1a:	1c32      	adds	r2, r6, #0
 8001d1c:	4250      	negs	r0, r2
 8001d1e:	2d00      	cmp	r5, #0
 8001d20:	d100      	bne.n	8001d24 <__aeabi_d2iz+0x3c>
 8001d22:	1c10      	adds	r0, r2, #0
 8001d24:	bd70      	pop	{r4, r5, r6, pc}
 8001d26:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <__aeabi_d2iz+0x60>)
 8001d28:	18e8      	adds	r0, r5, r3
 8001d2a:	e7fb      	b.n	8001d24 <__aeabi_d2iz+0x3c>
 8001d2c:	4b07      	ldr	r3, [pc, #28]	; (8001d4c <__aeabi_d2iz+0x64>)
 8001d2e:	40c2      	lsrs	r2, r0
 8001d30:	18c9      	adds	r1, r1, r3
 8001d32:	408e      	lsls	r6, r1
 8001d34:	4332      	orrs	r2, r6
 8001d36:	e7f1      	b.n	8001d1c <__aeabi_d2iz+0x34>
 8001d38:	000003fe 	.word	0x000003fe
 8001d3c:	0000041d 	.word	0x0000041d
 8001d40:	00000433 	.word	0x00000433
 8001d44:	00000413 	.word	0x00000413
 8001d48:	7fffffff 	.word	0x7fffffff
 8001d4c:	fffffbed 	.word	0xfffffbed

08001d50 <__aeabi_i2d>:
 8001d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d52:	1e04      	subs	r4, r0, #0
 8001d54:	d031      	beq.n	8001dba <__aeabi_i2d+0x6a>
 8001d56:	0fc7      	lsrs	r7, r0, #31
 8001d58:	d000      	beq.n	8001d5c <__aeabi_i2d+0xc>
 8001d5a:	4244      	negs	r4, r0
 8001d5c:	1c20      	adds	r0, r4, #0
 8001d5e:	f000 f869 	bl	8001e34 <__clzsi2>
 8001d62:	4d18      	ldr	r5, [pc, #96]	; (8001dc4 <__aeabi_i2d+0x74>)
 8001d64:	1a2d      	subs	r5, r5, r0
 8001d66:	280a      	cmp	r0, #10
 8001d68:	dd19      	ble.n	8001d9e <__aeabi_i2d+0x4e>
 8001d6a:	380b      	subs	r0, #11
 8001d6c:	4084      	lsls	r4, r0
 8001d6e:	0324      	lsls	r4, r4, #12
 8001d70:	056d      	lsls	r5, r5, #21
 8001d72:	0b24      	lsrs	r4, r4, #12
 8001d74:	0d6d      	lsrs	r5, r5, #21
 8001d76:	1c3a      	adds	r2, r7, #0
 8001d78:	2600      	movs	r6, #0
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	0d0b      	lsrs	r3, r1, #20
 8001d80:	0324      	lsls	r4, r4, #12
 8001d82:	0b24      	lsrs	r4, r4, #12
 8001d84:	051b      	lsls	r3, r3, #20
 8001d86:	4323      	orrs	r3, r4
 8001d88:	4c0f      	ldr	r4, [pc, #60]	; (8001dc8 <__aeabi_i2d+0x78>)
 8001d8a:	052d      	lsls	r5, r5, #20
 8001d8c:	401c      	ands	r4, r3
 8001d8e:	432c      	orrs	r4, r5
 8001d90:	0064      	lsls	r4, r4, #1
 8001d92:	0864      	lsrs	r4, r4, #1
 8001d94:	07d3      	lsls	r3, r2, #31
 8001d96:	1c21      	adds	r1, r4, #0
 8001d98:	1c30      	adds	r0, r6, #0
 8001d9a:	4319      	orrs	r1, r3
 8001d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d9e:	1c06      	adds	r6, r0, #0
 8001da0:	3615      	adds	r6, #21
 8001da2:	1c23      	adds	r3, r4, #0
 8001da4:	40b3      	lsls	r3, r6
 8001da6:	1c1e      	adds	r6, r3, #0
 8001da8:	230b      	movs	r3, #11
 8001daa:	1a18      	subs	r0, r3, r0
 8001dac:	40c4      	lsrs	r4, r0
 8001dae:	0324      	lsls	r4, r4, #12
 8001db0:	056d      	lsls	r5, r5, #21
 8001db2:	0b24      	lsrs	r4, r4, #12
 8001db4:	0d6d      	lsrs	r5, r5, #21
 8001db6:	1c3a      	adds	r2, r7, #0
 8001db8:	e7df      	b.n	8001d7a <__aeabi_i2d+0x2a>
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2500      	movs	r5, #0
 8001dbe:	2400      	movs	r4, #0
 8001dc0:	2600      	movs	r6, #0
 8001dc2:	e7da      	b.n	8001d7a <__aeabi_i2d+0x2a>
 8001dc4:	0000041e 	.word	0x0000041e
 8001dc8:	800fffff 	.word	0x800fffff

08001dcc <__aeabi_ui2d>:
 8001dcc:	b510      	push	{r4, lr}
 8001dce:	1e04      	subs	r4, r0, #0
 8001dd0:	d028      	beq.n	8001e24 <__aeabi_ui2d+0x58>
 8001dd2:	f000 f82f 	bl	8001e34 <__clzsi2>
 8001dd6:	4a15      	ldr	r2, [pc, #84]	; (8001e2c <__aeabi_ui2d+0x60>)
 8001dd8:	1a12      	subs	r2, r2, r0
 8001dda:	280a      	cmp	r0, #10
 8001ddc:	dd15      	ble.n	8001e0a <__aeabi_ui2d+0x3e>
 8001dde:	380b      	subs	r0, #11
 8001de0:	4084      	lsls	r4, r0
 8001de2:	0324      	lsls	r4, r4, #12
 8001de4:	0552      	lsls	r2, r2, #21
 8001de6:	0b24      	lsrs	r4, r4, #12
 8001de8:	0d52      	lsrs	r2, r2, #21
 8001dea:	2300      	movs	r3, #0
 8001dec:	2000      	movs	r0, #0
 8001dee:	2100      	movs	r1, #0
 8001df0:	0324      	lsls	r4, r4, #12
 8001df2:	1c18      	adds	r0, r3, #0
 8001df4:	0d0b      	lsrs	r3, r1, #20
 8001df6:	0b24      	lsrs	r4, r4, #12
 8001df8:	051b      	lsls	r3, r3, #20
 8001dfa:	4323      	orrs	r3, r4
 8001dfc:	4c0c      	ldr	r4, [pc, #48]	; (8001e30 <__aeabi_ui2d+0x64>)
 8001dfe:	0512      	lsls	r2, r2, #20
 8001e00:	401c      	ands	r4, r3
 8001e02:	4314      	orrs	r4, r2
 8001e04:	0064      	lsls	r4, r4, #1
 8001e06:	0861      	lsrs	r1, r4, #1
 8001e08:	bd10      	pop	{r4, pc}
 8001e0a:	1c03      	adds	r3, r0, #0
 8001e0c:	3315      	adds	r3, #21
 8001e0e:	1c21      	adds	r1, r4, #0
 8001e10:	4099      	lsls	r1, r3
 8001e12:	1c0b      	adds	r3, r1, #0
 8001e14:	210b      	movs	r1, #11
 8001e16:	1a08      	subs	r0, r1, r0
 8001e18:	40c4      	lsrs	r4, r0
 8001e1a:	0324      	lsls	r4, r4, #12
 8001e1c:	0552      	lsls	r2, r2, #21
 8001e1e:	0b24      	lsrs	r4, r4, #12
 8001e20:	0d52      	lsrs	r2, r2, #21
 8001e22:	e7e3      	b.n	8001dec <__aeabi_ui2d+0x20>
 8001e24:	2200      	movs	r2, #0
 8001e26:	2400      	movs	r4, #0
 8001e28:	2300      	movs	r3, #0
 8001e2a:	e7df      	b.n	8001dec <__aeabi_ui2d+0x20>
 8001e2c:	0000041e 	.word	0x0000041e
 8001e30:	800fffff 	.word	0x800fffff

08001e34 <__clzsi2>:
 8001e34:	211c      	movs	r1, #28
 8001e36:	2301      	movs	r3, #1
 8001e38:	041b      	lsls	r3, r3, #16
 8001e3a:	4298      	cmp	r0, r3
 8001e3c:	d301      	bcc.n	8001e42 <__clzsi2+0xe>
 8001e3e:	0c00      	lsrs	r0, r0, #16
 8001e40:	3910      	subs	r1, #16
 8001e42:	0a1b      	lsrs	r3, r3, #8
 8001e44:	4298      	cmp	r0, r3
 8001e46:	d301      	bcc.n	8001e4c <__clzsi2+0x18>
 8001e48:	0a00      	lsrs	r0, r0, #8
 8001e4a:	3908      	subs	r1, #8
 8001e4c:	091b      	lsrs	r3, r3, #4
 8001e4e:	4298      	cmp	r0, r3
 8001e50:	d301      	bcc.n	8001e56 <__clzsi2+0x22>
 8001e52:	0900      	lsrs	r0, r0, #4
 8001e54:	3904      	subs	r1, #4
 8001e56:	a202      	add	r2, pc, #8	; (adr r2, 8001e60 <__clzsi2+0x2c>)
 8001e58:	5c10      	ldrb	r0, [r2, r0]
 8001e5a:	1840      	adds	r0, r0, r1
 8001e5c:	4770      	bx	lr
 8001e5e:	46c0      	nop			; (mov r8, r8)
 8001e60:	02020304 	.word	0x02020304
 8001e64:	01010101 	.word	0x01010101
	...

08001e70 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001e74:	4b1b      	ldr	r3, [pc, #108]	; (8001ee4 <SystemInit+0x74>)
 8001e76:	4a1b      	ldr	r2, [pc, #108]	; (8001ee4 <SystemInit+0x74>)
 8001e78:	6812      	ldr	r2, [r2, #0]
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	601a      	str	r2, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[3:0] bits MCOPRE[2:0] */
  RCC->CFGR &= (uint32_t)0x80FFB80C;
 8001e80:	4b18      	ldr	r3, [pc, #96]	; (8001ee4 <SystemInit+0x74>)
 8001e82:	4a18      	ldr	r2, [pc, #96]	; (8001ee4 <SystemInit+0x74>)
 8001e84:	6851      	ldr	r1, [r2, #4]
 8001e86:	4a18      	ldr	r2, [pc, #96]	; (8001ee8 <SystemInit+0x78>)
 8001e88:	400a      	ands	r2, r1
 8001e8a:	605a      	str	r2, [r3, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001e8c:	4b15      	ldr	r3, [pc, #84]	; (8001ee4 <SystemInit+0x74>)
 8001e8e:	4a15      	ldr	r2, [pc, #84]	; (8001ee4 <SystemInit+0x74>)
 8001e90:	6811      	ldr	r1, [r2, #0]
 8001e92:	4a16      	ldr	r2, [pc, #88]	; (8001eec <SystemInit+0x7c>)
 8001e94:	400a      	ands	r2, r1
 8001e96:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001e98:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <SystemInit+0x74>)
 8001e9a:	4a12      	ldr	r2, [pc, #72]	; (8001ee4 <SystemInit+0x74>)
 8001e9c:	6811      	ldr	r1, [r2, #0]
 8001e9e:	4a14      	ldr	r2, [pc, #80]	; (8001ef0 <SystemInit+0x80>)
 8001ea0:	400a      	ands	r2, r1
 8001ea2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC07FFF;
 8001ea4:	4b0f      	ldr	r3, [pc, #60]	; (8001ee4 <SystemInit+0x74>)
 8001ea6:	4a0f      	ldr	r2, [pc, #60]	; (8001ee4 <SystemInit+0x74>)
 8001ea8:	6851      	ldr	r1, [r2, #4]
 8001eaa:	4a12      	ldr	r2, [pc, #72]	; (8001ef4 <SystemInit+0x84>)
 8001eac:	400a      	ands	r2, r1
 8001eae:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <SystemInit+0x74>)
 8001eb2:	4a0c      	ldr	r2, [pc, #48]	; (8001ee4 <SystemInit+0x74>)
 8001eb4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001eb6:	210f      	movs	r1, #15
 8001eb8:	438a      	bics	r2, r1
 8001eba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 8001ebc:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <SystemInit+0x74>)
 8001ebe:	4a09      	ldr	r2, [pc, #36]	; (8001ee4 <SystemInit+0x74>)
 8001ec0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001ec2:	4a0d      	ldr	r2, [pc, #52]	; (8001ef8 <SystemInit+0x88>)
 8001ec4:	400a      	ands	r2, r1
 8001ec6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset HSI14 & HSI48 bit */
  RCC->CR2 &= (uint32_t)0xFFFEFFFE;
 8001ec8:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <SystemInit+0x74>)
 8001eca:	4a06      	ldr	r2, [pc, #24]	; (8001ee4 <SystemInit+0x74>)
 8001ecc:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001ece:	4a0b      	ldr	r2, [pc, #44]	; (8001efc <SystemInit+0x8c>)
 8001ed0:	400a      	ands	r2, r1
 8001ed2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001ed4:	4b03      	ldr	r3, [pc, #12]	; (8001ee4 <SystemInit+0x74>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]

  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 8001eda:	f000 f885 	bl	8001fe8 <SetSysClock>
}
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	46c0      	nop			; (mov r8, r8)
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	80ffb80c 	.word	0x80ffb80c
 8001eec:	fef6ffff 	.word	0xfef6ffff
 8001ef0:	fffbffff 	.word	0xfffbffff
 8001ef4:	ffc07fff 	.word	0xffc07fff
 8001ef8:	fffffeac 	.word	0xfffffeac
 8001efc:	fffefffe 	.word	0xfffefffe

08001f00 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60bb      	str	r3, [r7, #8]
 8001f0e:	2300      	movs	r3, #0
 8001f10:	607b      	str	r3, [r7, #4]
 8001f12:	2300      	movs	r3, #0
 8001f14:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001f16:	4b2e      	ldr	r3, [pc, #184]	; (8001fd0 <SystemCoreClockUpdate+0xd0>)
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	230c      	movs	r3, #12
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d00c      	beq.n	8001f40 <SystemCoreClockUpdate+0x40>
 8001f26:	d802      	bhi.n	8001f2e <SystemCoreClockUpdate+0x2e>
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d005      	beq.n	8001f38 <SystemCoreClockUpdate+0x38>
 8001f2c:	e039      	b.n	8001fa2 <SystemCoreClockUpdate+0xa2>
 8001f2e:	2b08      	cmp	r3, #8
 8001f30:	d00a      	beq.n	8001f48 <SystemCoreClockUpdate+0x48>
 8001f32:	2b0c      	cmp	r3, #12
 8001f34:	d031      	beq.n	8001f9a <SystemCoreClockUpdate+0x9a>
 8001f36:	e034      	b.n	8001fa2 <SystemCoreClockUpdate+0xa2>
  {
  case 0x00:  /* HSI used as system clock */
    SystemCoreClock = HSI_VALUE;
 8001f38:	4b26      	ldr	r3, [pc, #152]	; (8001fd4 <SystemCoreClockUpdate+0xd4>)
 8001f3a:	4a27      	ldr	r2, [pc, #156]	; (8001fd8 <SystemCoreClockUpdate+0xd8>)
 8001f3c:	601a      	str	r2, [r3, #0]
    break;
 8001f3e:	e034      	b.n	8001faa <SystemCoreClockUpdate+0xaa>
  case 0x04:  /* HSE used as system clock */
    SystemCoreClock = HSE_VALUE;
 8001f40:	4b24      	ldr	r3, [pc, #144]	; (8001fd4 <SystemCoreClockUpdate+0xd4>)
 8001f42:	4a25      	ldr	r2, [pc, #148]	; (8001fd8 <SystemCoreClockUpdate+0xd8>)
 8001f44:	601a      	str	r2, [r3, #0]
    break;
 8001f46:	e030      	b.n	8001faa <SystemCoreClockUpdate+0xaa>
  case 0x08:  /* PLL used as system clock */
    /* Get PLL clock source and multiplication factor ----------------------*/
    pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8001f48:	4b21      	ldr	r3, [pc, #132]	; (8001fd0 <SystemCoreClockUpdate+0xd0>)
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	23f0      	movs	r3, #240	; 0xf0
 8001f4e:	039b      	lsls	r3, r3, #14
 8001f50:	4013      	ands	r3, r2
 8001f52:	60bb      	str	r3, [r7, #8]
    pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8001f54:	4b1e      	ldr	r3, [pc, #120]	; (8001fd0 <SystemCoreClockUpdate+0xd0>)
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	23c0      	movs	r3, #192	; 0xc0
 8001f5a:	025b      	lsls	r3, r3, #9
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	607b      	str	r3, [r7, #4]
    pllmull = ( pllmull >> 18) + 2;
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	0c9b      	lsrs	r3, r3, #18
 8001f64:	3302      	adds	r3, #2
 8001f66:	60bb      	str	r3, [r7, #8]

    if (pllsource == 0x00)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d105      	bne.n	8001f7a <SystemCoreClockUpdate+0x7a>
    {
      /* HSI oscillator clock divided by 2 selected as PLL clock entry */
      SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	4a1a      	ldr	r2, [pc, #104]	; (8001fdc <SystemCoreClockUpdate+0xdc>)
 8001f72:	435a      	muls	r2, r3
 8001f74:	4b17      	ldr	r3, [pc, #92]	; (8001fd4 <SystemCoreClockUpdate+0xd4>)
 8001f76:	601a      	str	r2, [r3, #0]
    {
      prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
      /* HSE oscillator clock selected as PREDIV1 clock entry */
      SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
    }
    break;
 8001f78:	e017      	b.n	8001faa <SystemCoreClockUpdate+0xaa>
      /* HSI oscillator clock divided by 2 selected as PLL clock entry */
      SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
    }
    else
    {
      prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8001f7a:	4b15      	ldr	r3, [pc, #84]	; (8001fd0 <SystemCoreClockUpdate+0xd0>)
 8001f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f7e:	230f      	movs	r3, #15
 8001f80:	4013      	ands	r3, r2
 8001f82:	3301      	adds	r3, #1
 8001f84:	603b      	str	r3, [r7, #0]
      /* HSE oscillator clock selected as PREDIV1 clock entry */
      SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 8001f86:	4814      	ldr	r0, [pc, #80]	; (8001fd8 <SystemCoreClockUpdate+0xd8>)
 8001f88:	6839      	ldr	r1, [r7, #0]
 8001f8a:	f7fe f8bd 	bl	8000108 <__aeabi_uidiv>
 8001f8e:	1c03      	adds	r3, r0, #0
 8001f90:	68ba      	ldr	r2, [r7, #8]
 8001f92:	435a      	muls	r2, r3
 8001f94:	4b0f      	ldr	r3, [pc, #60]	; (8001fd4 <SystemCoreClockUpdate+0xd4>)
 8001f96:	601a      	str	r2, [r3, #0]
    }
    break;
 8001f98:	e007      	b.n	8001faa <SystemCoreClockUpdate+0xaa>
  case 0x0C:  /* HSI48 used as system clock */
    SystemCoreClock = HSI48_VALUE;
 8001f9a:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <SystemCoreClockUpdate+0xd4>)
 8001f9c:	4a10      	ldr	r2, [pc, #64]	; (8001fe0 <SystemCoreClockUpdate+0xe0>)
 8001f9e:	601a      	str	r2, [r3, #0]
    break;
 8001fa0:	e003      	b.n	8001faa <SystemCoreClockUpdate+0xaa>
  default: /* HSI used as system clock */
    SystemCoreClock = HSI_VALUE;
 8001fa2:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <SystemCoreClockUpdate+0xd4>)
 8001fa4:	4a0c      	ldr	r2, [pc, #48]	; (8001fd8 <SystemCoreClockUpdate+0xd8>)
 8001fa6:	601a      	str	r2, [r3, #0]
    break;
 8001fa8:	46c0      	nop			; (mov r8, r8)

  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001faa:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <SystemCoreClockUpdate+0xd0>)
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	23f0      	movs	r3, #240	; 0xf0
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	091b      	lsrs	r3, r3, #4
 8001fb4:	4a0b      	ldr	r2, [pc, #44]	; (8001fe4 <SystemCoreClockUpdate+0xe4>)
 8001fb6:	5cd3      	ldrb	r3, [r2, r3]
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8001fbc:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <SystemCoreClockUpdate+0xd4>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	40da      	lsrs	r2, r3
 8001fc4:	4b03      	ldr	r3, [pc, #12]	; (8001fd4 <SystemCoreClockUpdate+0xd4>)
 8001fc6:	601a      	str	r2, [r3, #0]
}
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	b004      	add	sp, #16
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	46c0      	nop			; (mov r8, r8)
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	20000000 	.word	0x20000000
 8001fd8:	007a1200 	.word	0x007a1200
 8001fdc:	003d0900 	.word	0x003d0900
 8001fe0:	02dc6c00 	.word	0x02dc6c00
 8001fe4:	20000004 	.word	0x20000004

08001fe8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
   /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
    /* At this stage the HSI is already enabled */
 
    /* Enable Prefetch Buffer and set Flash Latency */
    FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8001fec:	4b13      	ldr	r3, [pc, #76]	; (800203c <SetSysClock+0x54>)
 8001fee:	2211      	movs	r2, #17
 8001ff0:	601a      	str	r2, [r3, #0]
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001ff2:	4b13      	ldr	r3, [pc, #76]	; (8002040 <SetSysClock+0x58>)
 8001ff4:	4a12      	ldr	r2, [pc, #72]	; (8002040 <SetSysClock+0x58>)
 8001ff6:	6852      	ldr	r2, [r2, #4]
 8001ff8:	605a      	str	r2, [r3, #4]

    /* PCLK = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 8001ffa:	4b11      	ldr	r3, [pc, #68]	; (8002040 <SetSysClock+0x58>)
 8001ffc:	4a10      	ldr	r2, [pc, #64]	; (8002040 <SetSysClock+0x58>)
 8001ffe:	6852      	ldr	r2, [r2, #4]
 8002000:	605a      	str	r2, [r3, #4]

   /* Enable HSI48 */
    RCC->CR2 |= RCC_CR2_HSI48ON;
 8002002:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <SetSysClock+0x58>)
 8002004:	4a0e      	ldr	r2, [pc, #56]	; (8002040 <SetSysClock+0x58>)
 8002006:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002008:	2180      	movs	r1, #128	; 0x80
 800200a:	0249      	lsls	r1, r1, #9
 800200c:	430a      	orrs	r2, r1
 800200e:	635a      	str	r2, [r3, #52]	; 0x34
  /* Wait till HSI48RDY is set */
    while((RCC->CR2 & RCC_CR2_HSI48RDY) == 0)
 8002010:	46c0      	nop			; (mov r8, r8)
 8002012:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <SetSysClock+0x58>)
 8002014:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002016:	2380      	movs	r3, #128	; 0x80
 8002018:	029b      	lsls	r3, r3, #10
 800201a:	4013      	ands	r3, r2
 800201c:	d0f9      	beq.n	8002012 <SetSysClock+0x2a>
    { }
  /* Select HSI48 as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800201e:	4b08      	ldr	r3, [pc, #32]	; (8002040 <SetSysClock+0x58>)
 8002020:	4a07      	ldr	r2, [pc, #28]	; (8002040 <SetSysClock+0x58>)
 8002022:	6852      	ldr	r2, [r2, #4]
 8002024:	2103      	movs	r1, #3
 8002026:	438a      	bics	r2, r1
 8002028:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_HSI48;
 800202a:	4b05      	ldr	r3, [pc, #20]	; (8002040 <SetSysClock+0x58>)
 800202c:	4a04      	ldr	r2, [pc, #16]	; (8002040 <SetSysClock+0x58>)
 800202e:	6852      	ldr	r2, [r2, #4]
 8002030:	2103      	movs	r1, #3
 8002032:	430a      	orrs	r2, r1
 8002034:	605a      	str	r2, [r3, #4]

}
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	46c0      	nop			; (mov r8, r8)
 800203c:	40022000 	.word	0x40022000
 8002040:	40021000 	.word	0x40021000

08002044 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
}
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <HardFault_Handler>:
  * @param  None
  * @retval None
  */

void HardFault_Handler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8002050:	e7fe      	b.n	8002050 <HardFault_Handler+0x4>
 8002052:	46c0      	nop			; (mov r8, r8)

08002054 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
}
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
}
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <USB_IRQHandler>:
  * @brief  This function handles USB FS Handler.
  * @param  None
  * @retval None
  */
void USB_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
	USB_Istr();
 8002068:	f002 fede 	bl	8004e28 <USB_Istr>
}
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002070:	480d      	ldr	r0, [pc, #52]	; (80020a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002072:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002074:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002076:	e003      	b.n	8002080 <LoopCopyDataInit>

08002078 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002078:	4b0c      	ldr	r3, [pc, #48]	; (80020ac <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800207a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800207c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800207e:	3104      	adds	r1, #4

08002080 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002080:	480b      	ldr	r0, [pc, #44]	; (80020b0 <LoopForever+0xa>)
  ldr r3, =_edata
 8002082:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <LoopForever+0xe>)
  adds r2, r0, r1
 8002084:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002086:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002088:	d3f6      	bcc.n	8002078 <CopyDataInit>
  ldr r2, =_sbss
 800208a:	4a0b      	ldr	r2, [pc, #44]	; (80020b8 <LoopForever+0x12>)
  b LoopFillZerobss
 800208c:	e002      	b.n	8002094 <LoopFillZerobss>

0800208e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800208e:	2300      	movs	r3, #0
  str  r3, [r2]
 8002090:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002092:	3204      	adds	r2, #4

08002094 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8002094:	4b09      	ldr	r3, [pc, #36]	; (80020bc <LoopForever+0x16>)
  cmp r2, r3
 8002096:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002098:	d3f9      	bcc.n	800208e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800209a:	f7ff fee9 	bl	8001e70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800209e:	f004 fc67 	bl	8006970 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020a2:	f001 f8d5 	bl	8003250 <main>

080020a6 <LoopForever>:
  
LoopForever:
    b LoopForever
 80020a6:	e7fe      	b.n	80020a6 <LoopForever>

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020a8:	20001800 	.word	0x20001800
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 80020ac:	080076e0 	.word	0x080076e0
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 80020b0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80020b4:	20000124 	.word	0x20000124
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 80020b8:	20000124 	.word	0x20000124
  str  r3, [r2]
  adds r2, r2, #4


LoopFillZerobss:
  ldr r3, = _ebss
 80020bc:	20000e0c 	.word	0x20000e0c

080020c0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020c0:	e7fe      	b.n	80020c0 <ADC1_COMP_IRQHandler>
	...

080020c4 <FifoIn>:
// Returns:
//     FIFO_FAIL       der Ringbuffer ist voll. Es kann kein weiteres Byte gespeichert werden
//     FIFO_SUCCESS    das Byte wurde gespeichert
//
uint8_t FifoIn(FifoBuffer *buf, uint8_t byte)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	1c0a      	adds	r2, r1, #0
 80020ce:	1cfb      	adds	r3, r7, #3
 80020d0:	701a      	strb	r2, [r3, #0]
  uint32_t next = ((buf->write + 1) & FIFO_MASK);
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	2384      	movs	r3, #132	; 0x84
 80020d6:	58d3      	ldr	r3, [r2, r3]
 80020d8:	1c5a      	adds	r2, r3, #1
 80020da:	237f      	movs	r3, #127	; 0x7f
 80020dc:	4013      	ands	r3, r2
 80020de:	60fb      	str	r3, [r7, #12]

  if (buf->read == next)
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	2380      	movs	r3, #128	; 0x80
 80020e4:	58d2      	ldr	r2, [r2, r3]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d101      	bne.n	80020f0 <FifoIn+0x2c>
    return FIFO_FAIL; // voll
 80020ec:	2301      	movs	r3, #1
 80020ee:	e00b      	b.n	8002108 <FifoIn+0x44>

  buf->data[buf->write] = byte;
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	2384      	movs	r3, #132	; 0x84
 80020f4:	58d3      	ldr	r3, [r2, r3]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	1cf9      	adds	r1, r7, #3
 80020fa:	7809      	ldrb	r1, [r1, #0]
 80020fc:	54d1      	strb	r1, [r2, r3]
  // buffer.data[buffer.write & BUFFER_MASK] = byte; // absolut Sicher
  buf->write = next;
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	2384      	movs	r3, #132	; 0x84
 8002102:	68f9      	ldr	r1, [r7, #12]
 8002104:	50d1      	str	r1, [r2, r3]

  return FIFO_SUCCESS;
 8002106:	2300      	movs	r3, #0
}
 8002108:	1c18      	adds	r0, r3, #0
 800210a:	46bd      	mov	sp, r7
 800210c:	b004      	add	sp, #16
 800210e:	bd80      	pop	{r7, pc}

08002110 <USBD_USR_Init>:
  * @brief  Device lib initialization
  * @param  None
  * @retval None
  */
void USBD_USR_Init(void)
{   
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
}
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <USBD_USR_DeviceReset>:
  * @brief  Reset Event
  * @param  speed : device speed
  * @retval None
  */
void USBD_USR_DeviceReset(uint8_t speed )
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	1c02      	adds	r2, r0, #0
 8002120:	1dfb      	adds	r3, r7, #7
 8002122:	701a      	strb	r2, [r3, #0]

}
 8002124:	46bd      	mov	sp, r7
 8002126:	b002      	add	sp, #8
 8002128:	bd80      	pop	{r7, pc}
 800212a:	46c0      	nop			; (mov r8, r8)

0800212c <USBD_USR_DeviceConfigured>:
  * @brief  Configuration Event
  * @param  None
  * @retval Status
*/
void USBD_USR_DeviceConfigured (void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0

}
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <USBD_USR_DeviceSuspended>:
  * @brief  Device suspend Event
  * @param  None
  * @retval None
  */
void USBD_USR_DeviceSuspended(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
}
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <USBD_USR_DeviceResumed>:
  * @brief  Device resume Event
  * @param  None
  * @retval None
  */
void USBD_USR_DeviceResumed(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
}
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <Suspend>:
  * @brief  Sets suspend mode operating conditions
  * @param  None
  * @retval USB_SUCCESS
  */
void Suspend(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
  uint16_t wCNTR;

  /*Store CNTR value */
  wCNTR = _GetCNTR();   
 800214a:	4b0f      	ldr	r3, [pc, #60]	; (8002188 <Suspend+0x44>)
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	1dbb      	adds	r3, r7, #6
 8002150:	801a      	strh	r2, [r3, #0]
  /* Set FSUSP bit in USB_CNTR register*/
  wCNTR |= CNTR_FSUSP;
 8002152:	1dbb      	adds	r3, r7, #6
 8002154:	1dba      	adds	r2, r7, #6
 8002156:	8812      	ldrh	r2, [r2, #0]
 8002158:	2108      	movs	r1, #8
 800215a:	430a      	orrs	r2, r1
 800215c:	801a      	strh	r2, [r3, #0]
  _SetCNTR(wCNTR);
 800215e:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <Suspend+0x44>)
 8002160:	1dba      	adds	r2, r7, #6
 8002162:	8812      	ldrh	r2, [r2, #0]
 8002164:	601a      	str	r2, [r3, #0]
  
  /* force low-power mode in the macrocell */
  wCNTR = _GetCNTR();
 8002166:	4b08      	ldr	r3, [pc, #32]	; (8002188 <Suspend+0x44>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	1dbb      	adds	r3, r7, #6
 800216c:	801a      	strh	r2, [r3, #0]
  wCNTR |= CNTR_LPMODE;
 800216e:	1dbb      	adds	r3, r7, #6
 8002170:	1dba      	adds	r2, r7, #6
 8002172:	8812      	ldrh	r2, [r2, #0]
 8002174:	2104      	movs	r1, #4
 8002176:	430a      	orrs	r2, r1
 8002178:	801a      	strh	r2, [r3, #0]
  _SetCNTR(wCNTR);
 800217a:	4b03      	ldr	r3, [pc, #12]	; (8002188 <Suspend+0x44>)
 800217c:	1dba      	adds	r2, r7, #6
 800217e:	8812      	ldrh	r2, [r2, #0]
 8002180:	601a      	str	r2, [r3, #0]
    wCNTR = _GetCNTR();
    wCNTR&=~CNTR_FSUSP;
    _SetCNTR(wCNTR);
  }
#endif
}
 8002182:	46bd      	mov	sp, r7
 8002184:	b002      	add	sp, #8
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40005c40 	.word	0x40005c40

0800218c <Resume_Init>:
  * @brief  Handles wake-up restoring normal operations
  * @param  None
  * @retval USB_SUCCESS
  */
void Resume_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
  /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
  /* restart the clocks */
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 8002192:	4b0a      	ldr	r3, [pc, #40]	; (80021bc <Resume_Init+0x30>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	1dbb      	adds	r3, r7, #6
 8002198:	801a      	strh	r2, [r3, #0]
  wCNTR &= (~CNTR_LPMODE);
 800219a:	1dbb      	adds	r3, r7, #6
 800219c:	1dba      	adds	r2, r7, #6
 800219e:	8812      	ldrh	r2, [r2, #0]
 80021a0:	2104      	movs	r1, #4
 80021a2:	438a      	bics	r2, r1
 80021a4:	801a      	strh	r2, [r3, #0]
  _SetCNTR(wCNTR);    
 80021a6:	4b05      	ldr	r3, [pc, #20]	; (80021bc <Resume_Init+0x30>)
 80021a8:	1dba      	adds	r2, r7, #6
 80021aa:	8812      	ldrh	r2, [r2, #0]
 80021ac:	601a      	str	r2, [r3, #0]
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
#endif
  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 80021ae:	4b03      	ldr	r3, [pc, #12]	; (80021bc <Resume_Init+0x30>)
 80021b0:	22bf      	movs	r2, #191	; 0xbf
 80021b2:	0212      	lsls	r2, r2, #8
 80021b4:	601a      	str	r2, [r3, #0]

}
 80021b6:	46bd      	mov	sp, r7
 80021b8:	b002      	add	sp, #8
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40005c40 	.word	0x40005c40

080021c0 <Resume>:
  *         RESUME_ESOF doesn't change ResumeS.eState allowing
  *         decrementing of the ESOF counter in different states.
  * @retval Status
  */
void Resume(RESUME_STATE eResumeSetVal)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	1c02      	adds	r2, r0, #0
 80021c8:	1dfb      	adds	r3, r7, #7
 80021ca:	701a      	strb	r2, [r3, #0]
 uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
 80021cc:	1dfb      	adds	r3, r7, #7
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b07      	cmp	r3, #7
 80021d2:	d003      	beq.n	80021dc <Resume+0x1c>
    ResumeS.eState = eResumeSetVal;
 80021d4:	4b41      	ldr	r3, [pc, #260]	; (80022dc <Resume+0x11c>)
 80021d6:	1dfa      	adds	r2, r7, #7
 80021d8:	7812      	ldrb	r2, [r2, #0]
 80021da:	701a      	strb	r2, [r3, #0]
  switch (ResumeS.eState)
 80021dc:	4b3f      	ldr	r3, [pc, #252]	; (80022dc <Resume+0x11c>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b05      	cmp	r3, #5
 80021e4:	d900      	bls.n	80021e8 <Resume+0x28>
 80021e6:	e072      	b.n	80022ce <Resume+0x10e>
 80021e8:	009a      	lsls	r2, r3, #2
 80021ea:	4b3d      	ldr	r3, [pc, #244]	; (80022e0 <Resume+0x120>)
 80021ec:	18d3      	adds	r3, r2, r3
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	469f      	mov	pc, r3
  {
    case RESUME_EXTERNAL:
      
if (remotewakeupon ==0)
 80021f2:	4b3c      	ldr	r3, [pc, #240]	; (80022e4 <Resume+0x124>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d105      	bne.n	8002206 <Resume+0x46>
      {
        Resume_Init();
 80021fa:	f7ff ffc7 	bl	800218c <Resume_Init>
        ResumeS.eState = RESUME_OFF;
 80021fe:	4b37      	ldr	r3, [pc, #220]	; (80022dc <Resume+0x11c>)
 8002200:	2206      	movs	r2, #6
 8002202:	701a      	strb	r2, [r3, #0]
      }
      else /* RESUME detected during the RemoteWAkeup signalling => keep RemoteWakeup handling*/
      {
        ResumeS.eState = RESUME_ON;
      }
      break;
 8002204:	e067      	b.n	80022d6 <Resume+0x116>
        Resume_Init();
        ResumeS.eState = RESUME_OFF;
      }
      else /* RESUME detected during the RemoteWAkeup signalling => keep RemoteWakeup handling*/
      {
        ResumeS.eState = RESUME_ON;
 8002206:	4b35      	ldr	r3, [pc, #212]	; (80022dc <Resume+0x11c>)
 8002208:	2205      	movs	r2, #5
 800220a:	701a      	strb	r2, [r3, #0]
      }
      break;
 800220c:	e063      	b.n	80022d6 <Resume+0x116>
    case RESUME_INTERNAL:
      Resume_Init();
 800220e:	f7ff ffbd 	bl	800218c <Resume_Init>
      ResumeS.eState = RESUME_START;
 8002212:	4b32      	ldr	r3, [pc, #200]	; (80022dc <Resume+0x11c>)
 8002214:	2204      	movs	r2, #4
 8002216:	701a      	strb	r2, [r3, #0]
      remotewakeupon = 1;
 8002218:	4b32      	ldr	r3, [pc, #200]	; (80022e4 <Resume+0x124>)
 800221a:	2201      	movs	r2, #1
 800221c:	601a      	str	r2, [r3, #0]
      break;
 800221e:	e05a      	b.n	80022d6 <Resume+0x116>
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 8002220:	4b2e      	ldr	r3, [pc, #184]	; (80022dc <Resume+0x11c>)
 8002222:	2202      	movs	r2, #2
 8002224:	705a      	strb	r2, [r3, #1]
      ResumeS.eState = RESUME_WAIT;
 8002226:	4b2d      	ldr	r3, [pc, #180]	; (80022dc <Resume+0x11c>)
 8002228:	2203      	movs	r2, #3
 800222a:	701a      	strb	r2, [r3, #0]
      break;
 800222c:	e053      	b.n	80022d6 <Resume+0x116>
    case RESUME_WAIT:
      ResumeS.bESOFcnt--;
 800222e:	4b2b      	ldr	r3, [pc, #172]	; (80022dc <Resume+0x11c>)
 8002230:	785b      	ldrb	r3, [r3, #1]
 8002232:	b2db      	uxtb	r3, r3
 8002234:	3b01      	subs	r3, #1
 8002236:	b2da      	uxtb	r2, r3
 8002238:	4b28      	ldr	r3, [pc, #160]	; (80022dc <Resume+0x11c>)
 800223a:	705a      	strb	r2, [r3, #1]
      if (ResumeS.bESOFcnt == 0)
 800223c:	4b27      	ldr	r3, [pc, #156]	; (80022dc <Resume+0x11c>)
 800223e:	785b      	ldrb	r3, [r3, #1]
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d103      	bne.n	800224e <Resume+0x8e>
        ResumeS.eState = RESUME_START;
 8002246:	4b25      	ldr	r3, [pc, #148]	; (80022dc <Resume+0x11c>)
 8002248:	2204      	movs	r2, #4
 800224a:	701a      	strb	r2, [r3, #0]
      break;
 800224c:	e043      	b.n	80022d6 <Resume+0x116>
 800224e:	e042      	b.n	80022d6 <Resume+0x116>
    case RESUME_START:
      wCNTR = _GetCNTR();
 8002250:	4b25      	ldr	r3, [pc, #148]	; (80022e8 <Resume+0x128>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	1c3b      	adds	r3, r7, #0
 8002256:	330e      	adds	r3, #14
 8002258:	801a      	strh	r2, [r3, #0]
      wCNTR |= CNTR_RESUME;
 800225a:	1c3b      	adds	r3, r7, #0
 800225c:	330e      	adds	r3, #14
 800225e:	1c3a      	adds	r2, r7, #0
 8002260:	320e      	adds	r2, #14
 8002262:	8812      	ldrh	r2, [r2, #0]
 8002264:	2110      	movs	r1, #16
 8002266:	430a      	orrs	r2, r1
 8002268:	801a      	strh	r2, [r3, #0]
      _SetCNTR(wCNTR);
 800226a:	4b1f      	ldr	r3, [pc, #124]	; (80022e8 <Resume+0x128>)
 800226c:	1c3a      	adds	r2, r7, #0
 800226e:	320e      	adds	r2, #14
 8002270:	8812      	ldrh	r2, [r2, #0]
 8002272:	601a      	str	r2, [r3, #0]
      ResumeS.eState = RESUME_ON;
 8002274:	4b19      	ldr	r3, [pc, #100]	; (80022dc <Resume+0x11c>)
 8002276:	2205      	movs	r2, #5
 8002278:	701a      	strb	r2, [r3, #0]
      ResumeS.bESOFcnt = 10;
 800227a:	4b18      	ldr	r3, [pc, #96]	; (80022dc <Resume+0x11c>)
 800227c:	220a      	movs	r2, #10
 800227e:	705a      	strb	r2, [r3, #1]
      break;
 8002280:	e029      	b.n	80022d6 <Resume+0x116>
    case RESUME_ON:    
      ResumeS.bESOFcnt--;
 8002282:	4b16      	ldr	r3, [pc, #88]	; (80022dc <Resume+0x11c>)
 8002284:	785b      	ldrb	r3, [r3, #1]
 8002286:	b2db      	uxtb	r3, r3
 8002288:	3b01      	subs	r3, #1
 800228a:	b2da      	uxtb	r2, r3
 800228c:	4b13      	ldr	r3, [pc, #76]	; (80022dc <Resume+0x11c>)
 800228e:	705a      	strb	r2, [r3, #1]
      if (ResumeS.bESOFcnt == 0)
 8002290:	4b12      	ldr	r3, [pc, #72]	; (80022dc <Resume+0x11c>)
 8002292:	785b      	ldrb	r3, [r3, #1]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d118      	bne.n	80022cc <Resume+0x10c>
      {
        wCNTR = _GetCNTR();
 800229a:	4b13      	ldr	r3, [pc, #76]	; (80022e8 <Resume+0x128>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	1c3b      	adds	r3, r7, #0
 80022a0:	330e      	adds	r3, #14
 80022a2:	801a      	strh	r2, [r3, #0]
        wCNTR &= (~CNTR_RESUME);
 80022a4:	1c3b      	adds	r3, r7, #0
 80022a6:	330e      	adds	r3, #14
 80022a8:	1c3a      	adds	r2, r7, #0
 80022aa:	320e      	adds	r2, #14
 80022ac:	8812      	ldrh	r2, [r2, #0]
 80022ae:	2110      	movs	r1, #16
 80022b0:	438a      	bics	r2, r1
 80022b2:	801a      	strh	r2, [r3, #0]
        _SetCNTR(wCNTR);
 80022b4:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <Resume+0x128>)
 80022b6:	1c3a      	adds	r2, r7, #0
 80022b8:	320e      	adds	r2, #14
 80022ba:	8812      	ldrh	r2, [r2, #0]
 80022bc:	601a      	str	r2, [r3, #0]
        ResumeS.eState = RESUME_OFF;
 80022be:	4b07      	ldr	r3, [pc, #28]	; (80022dc <Resume+0x11c>)
 80022c0:	2206      	movs	r2, #6
 80022c2:	701a      	strb	r2, [r3, #0]
        remotewakeupon = 0;
 80022c4:	4b07      	ldr	r3, [pc, #28]	; (80022e4 <Resume+0x124>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
      }
      break;
 80022ca:	e004      	b.n	80022d6 <Resume+0x116>
 80022cc:	e003      	b.n	80022d6 <Resume+0x116>
    case RESUME_OFF:
    case RESUME_ESOF:
    default:
      ResumeS.eState = RESUME_OFF;
 80022ce:	4b03      	ldr	r3, [pc, #12]	; (80022dc <Resume+0x11c>)
 80022d0:	2206      	movs	r2, #6
 80022d2:	701a      	strb	r2, [r3, #0]
      break;
 80022d4:	46c0      	nop			; (mov r8, r8)
  }
}
 80022d6:	46bd      	mov	sp, r7
 80022d8:	b004      	add	sp, #16
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	20000188 	.word	0x20000188
 80022e0:	080075c8 	.word	0x080075c8
 80022e4:	20000140 	.word	0x20000140
 80022e8:	40005c40 	.word	0x40005c40

080022ec <USBD_USR_DeviceDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t *  USBD_USR_DeviceDescriptor( uint8_t speed , uint16_t *length)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	1c02      	adds	r2, r0, #0
 80022f4:	6039      	str	r1, [r7, #0]
 80022f6:	1dfb      	adds	r3, r7, #7
 80022f8:	701a      	strb	r2, [r3, #0]
  *length = sizeof(USBD_DeviceDesc);
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	2212      	movs	r2, #18
 80022fe:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_DeviceDesc;
 8002300:	4b02      	ldr	r3, [pc, #8]	; (800230c <USBD_USR_DeviceDescriptor+0x20>)
}
 8002302:	1c18      	adds	r0, r3, #0
 8002304:	46bd      	mov	sp, r7
 8002306:	b002      	add	sp, #8
 8002308:	bd80      	pop	{r7, pc}
 800230a:	46c0      	nop			; (mov r8, r8)
 800230c:	080075e0 	.word	0x080075e0

08002310 <USBD_USR_LangIDStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t *  USBD_USR_LangIDStrDescriptor( uint8_t speed , uint16_t *length)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	1c02      	adds	r2, r0, #0
 8002318:	6039      	str	r1, [r7, #0]
 800231a:	1dfb      	adds	r3, r7, #7
 800231c:	701a      	strb	r2, [r3, #0]
  *length =  sizeof(USBD_LangIDDesc);  
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	2204      	movs	r2, #4
 8002322:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_LangIDDesc;
 8002324:	4b02      	ldr	r3, [pc, #8]	; (8002330 <USBD_USR_LangIDStrDescriptor+0x20>)
}
 8002326:	1c18      	adds	r0, r3, #0
 8002328:	46bd      	mov	sp, r7
 800232a:	b002      	add	sp, #8
 800232c:	bd80      	pop	{r7, pc}
 800232e:	46c0      	nop			; (mov r8, r8)
 8002330:	080075f4 	.word	0x080075f4

08002334 <USBD_USR_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t *  USBD_USR_ProductStrDescriptor( uint8_t speed , uint16_t *length)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	1c02      	adds	r2, r0, #0
 800233c:	6039      	str	r1, [r7, #0]
 800233e:	1dfb      	adds	r3, r7, #7
 8002340:	701a      	strb	r2, [r3, #0]
  USBD_GetString ( (uint8_t*)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 8002342:	4906      	ldr	r1, [pc, #24]	; (800235c <USBD_USR_ProductStrDescriptor+0x28>)
 8002344:	4a06      	ldr	r2, [pc, #24]	; (8002360 <USBD_USR_ProductStrDescriptor+0x2c>)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	1c08      	adds	r0, r1, #0
 800234a:	1c11      	adds	r1, r2, #0
 800234c:	1c1a      	adds	r2, r3, #0
 800234e:	f001 fce9 	bl	8003d24 <USBD_GetString>
  return USBD_StrDesc;
 8002352:	4b03      	ldr	r3, [pc, #12]	; (8002360 <USBD_USR_ProductStrDescriptor+0x2c>)
}
 8002354:	1c18      	adds	r0, r3, #0
 8002356:	46bd      	mov	sp, r7
 8002358:	b002      	add	sp, #8
 800235a:	bd80      	pop	{r7, pc}
 800235c:	080074b8 	.word	0x080074b8
 8002360:	2000047c 	.word	0x2000047c

08002364 <USBD_USR_ManufacturerStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t *  USBD_USR_ManufacturerStrDescriptor( uint8_t speed , uint16_t *length)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	1c02      	adds	r2, r0, #0
 800236c:	6039      	str	r1, [r7, #0]
 800236e:	1dfb      	adds	r3, r7, #7
 8002370:	701a      	strb	r2, [r3, #0]
  USBD_GetString ( (uint8_t*)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8002372:	4906      	ldr	r1, [pc, #24]	; (800238c <USBD_USR_ManufacturerStrDescriptor+0x28>)
 8002374:	4a06      	ldr	r2, [pc, #24]	; (8002390 <USBD_USR_ManufacturerStrDescriptor+0x2c>)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	1c08      	adds	r0, r1, #0
 800237a:	1c11      	adds	r1, r2, #0
 800237c:	1c1a      	adds	r2, r3, #0
 800237e:	f001 fcd1 	bl	8003d24 <USBD_GetString>
  return USBD_StrDesc;
 8002382:	4b03      	ldr	r3, [pc, #12]	; (8002390 <USBD_USR_ManufacturerStrDescriptor+0x2c>)
}
 8002384:	1c18      	adds	r0, r3, #0
 8002386:	46bd      	mov	sp, r7
 8002388:	b002      	add	sp, #8
 800238a:	bd80      	pop	{r7, pc}
 800238c:	080074dc 	.word	0x080074dc
 8002390:	2000047c 	.word	0x2000047c

08002394 <USBD_USR_SerialStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t *  USBD_USR_SerialStrDescriptor( uint8_t speed , uint16_t *length)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	1c02      	adds	r2, r0, #0
 800239c:	6039      	str	r1, [r7, #0]
 800239e:	1dfb      	adds	r3, r7, #7
 80023a0:	701a      	strb	r2, [r3, #0]
  *length = USB_SIZ_STRING_SERIAL; 
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	221a      	movs	r2, #26
 80023a6:	801a      	strh	r2, [r3, #0]
  return USBD_StringSerial;
 80023a8:	4b02      	ldr	r3, [pc, #8]	; (80023b4 <USBD_USR_SerialStrDescriptor+0x20>)
}
 80023aa:	1c18      	adds	r0, r3, #0
 80023ac:	46bd      	mov	sp, r7
 80023ae:	b002      	add	sp, #8
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	46c0      	nop			; (mov r8, r8)
 80023b4:	20000044 	.word	0x20000044

080023b8 <USBD_USR_ConfigStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t *  USBD_USR_ConfigStrDescriptor( uint8_t speed , uint16_t *length)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	1c02      	adds	r2, r0, #0
 80023c0:	6039      	str	r1, [r7, #0]
 80023c2:	1dfb      	adds	r3, r7, #7
 80023c4:	701a      	strb	r2, [r3, #0]
  USBD_GetString ( (uint8_t*)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 80023c6:	4906      	ldr	r1, [pc, #24]	; (80023e0 <USBD_USR_ConfigStrDescriptor+0x28>)
 80023c8:	4a06      	ldr	r2, [pc, #24]	; (80023e4 <USBD_USR_ConfigStrDescriptor+0x2c>)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	1c08      	adds	r0, r1, #0
 80023ce:	1c11      	adds	r1, r2, #0
 80023d0:	1c1a      	adds	r2, r3, #0
 80023d2:	f001 fca7 	bl	8003d24 <USBD_GetString>
  return USBD_StrDesc;  
 80023d6:	4b03      	ldr	r3, [pc, #12]	; (80023e4 <USBD_USR_ConfigStrDescriptor+0x2c>)
}
 80023d8:	1c18      	adds	r0, r3, #0
 80023da:	46bd      	mov	sp, r7
 80023dc:	b002      	add	sp, #8
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	080074f0 	.word	0x080074f0
 80023e4:	2000047c 	.word	0x2000047c

080023e8 <USBD_USR_InterfaceStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t *  USBD_USR_InterfaceStrDescriptor( uint8_t speed , uint16_t *length)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	1c02      	adds	r2, r0, #0
 80023f0:	6039      	str	r1, [r7, #0]
 80023f2:	1dfb      	adds	r3, r7, #7
 80023f4:	701a      	strb	r2, [r3, #0]
  USBD_GetString ( (uint8_t*)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 80023f6:	4906      	ldr	r1, [pc, #24]	; (8002410 <USBD_USR_InterfaceStrDescriptor+0x28>)
 80023f8:	4a06      	ldr	r2, [pc, #24]	; (8002414 <USBD_USR_InterfaceStrDescriptor+0x2c>)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	1c08      	adds	r0, r1, #0
 80023fe:	1c11      	adds	r1, r2, #0
 8002400:	1c1a      	adds	r2, r3, #0
 8002402:	f001 fc8f 	bl	8003d24 <USBD_GetString>
  return USBD_StrDesc;  
 8002406:	4b03      	ldr	r3, [pc, #12]	; (8002414 <USBD_USR_InterfaceStrDescriptor+0x2c>)
}
 8002408:	1c18      	adds	r0, r3, #0
 800240a:	46bd      	mov	sp, r7
 800240c:	b002      	add	sp, #8
 800240e:	bd80      	pop	{r7, pc}
 8002410:	080074fc 	.word	0x080074fc
 8002414:	2000047c 	.word	0x2000047c

08002418 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
void Get_SerialNum(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;
  
  Device_Serial0 = *(uint32_t*)Device1_Identifier;
 800241e:	4b10      	ldr	r3, [pc, #64]	; (8002460 <Get_SerialNum+0x48>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	60fb      	str	r3, [r7, #12]
  Device_Serial1 = *(uint32_t*)Device2_Identifier;
 8002424:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <Get_SerialNum+0x4c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	60bb      	str	r3, [r7, #8]
  Device_Serial2 = *(uint32_t*)Device3_Identifier;
 800242a:	4b0f      	ldr	r3, [pc, #60]	; (8002468 <Get_SerialNum+0x50>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	607b      	str	r3, [r7, #4]
  
  Device_Serial0 += Device_Serial2;
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	18d3      	adds	r3, r2, r3
 8002436:	60fb      	str	r3, [r7, #12]
  
  if (Device_Serial0 != 0)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00d      	beq.n	800245a <Get_SerialNum+0x42>
  {
    IntToUnicode (Device_Serial0, &USBD_StringSerial[2] ,8);
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	4b0a      	ldr	r3, [pc, #40]	; (800246c <Get_SerialNum+0x54>)
 8002442:	1c10      	adds	r0, r2, #0
 8002444:	1c19      	adds	r1, r3, #0
 8002446:	2208      	movs	r2, #8
 8002448:	f000 f814 	bl	8002474 <IntToUnicode>
    IntToUnicode (Device_Serial1, &USBD_StringSerial[18] ,4);
 800244c:	68ba      	ldr	r2, [r7, #8]
 800244e:	4b08      	ldr	r3, [pc, #32]	; (8002470 <Get_SerialNum+0x58>)
 8002450:	1c10      	adds	r0, r2, #0
 8002452:	1c19      	adds	r1, r3, #0
 8002454:	2204      	movs	r2, #4
 8002456:	f000 f80d 	bl	8002474 <IntToUnicode>
  }
}
 800245a:	46bd      	mov	sp, r7
 800245c:	b004      	add	sp, #16
 800245e:	bd80      	pop	{r7, pc}
 8002460:	1ffff7ac 	.word	0x1ffff7ac
 8002464:	1ffff7b0 	.word	0x1ffff7b0
 8002468:	1ffff7b4 	.word	0x1ffff7b4
 800246c:	20000046 	.word	0x20000046
 8002470:	20000056 	.word	0x20000056

08002474 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	1dfb      	adds	r3, r7, #7
 8002480:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8002482:	1c3b      	adds	r3, r7, #0
 8002484:	3317      	adds	r3, #23
 8002486:	2200      	movs	r2, #0
 8002488:	701a      	strb	r2, [r3, #0]
  
  for( idx = 0 ; idx < len ; idx ++)
 800248a:	1c3b      	adds	r3, r7, #0
 800248c:	3317      	adds	r3, #23
 800248e:	2200      	movs	r2, #0
 8002490:	701a      	strb	r2, [r3, #0]
 8002492:	e02f      	b.n	80024f4 <IntToUnicode+0x80>
  {
    if( ((value >> 28)) < 0xA )
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	0f1b      	lsrs	r3, r3, #28
 8002498:	2b09      	cmp	r3, #9
 800249a:	d80c      	bhi.n	80024b6 <IntToUnicode+0x42>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 800249c:	1c3b      	adds	r3, r7, #0
 800249e:	3317      	adds	r3, #23
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	68ba      	ldr	r2, [r7, #8]
 80024a6:	18d3      	adds	r3, r2, r3
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	0f12      	lsrs	r2, r2, #28
 80024ac:	b2d2      	uxtb	r2, r2
 80024ae:	3230      	adds	r2, #48	; 0x30
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	701a      	strb	r2, [r3, #0]
 80024b4:	e00b      	b.n	80024ce <IntToUnicode+0x5a>
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 80024b6:	1c3b      	adds	r3, r7, #0
 80024b8:	3317      	adds	r3, #23
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	18d3      	adds	r3, r2, r3
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	0f12      	lsrs	r2, r2, #28
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	3237      	adds	r2, #55	; 0x37
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	701a      	strb	r2, [r3, #0]
    }
    
    value = value << 4;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	011b      	lsls	r3, r3, #4
 80024d2:	60fb      	str	r3, [r7, #12]
    
    pbuf[ 2* idx + 1] = 0;
 80024d4:	1c3b      	adds	r3, r7, #0
 80024d6:	3317      	adds	r3, #23
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	3301      	adds	r3, #1
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	18d3      	adds	r3, r2, r3
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 80024e6:	1c3b      	adds	r3, r7, #0
 80024e8:	3317      	adds	r3, #23
 80024ea:	781a      	ldrb	r2, [r3, #0]
 80024ec:	1c3b      	adds	r3, r7, #0
 80024ee:	3317      	adds	r3, #23
 80024f0:	3201      	adds	r2, #1
 80024f2:	701a      	strb	r2, [r3, #0]
 80024f4:	1c3a      	adds	r2, r7, #0
 80024f6:	3217      	adds	r2, #23
 80024f8:	1dfb      	adds	r3, r7, #7
 80024fa:	7812      	ldrb	r2, [r2, #0]
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d3c8      	bcc.n	8002494 <IntToUnicode+0x20>
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
  }
}
 8002502:	46bd      	mov	sp, r7
 8002504:	b006      	add	sp, #24
 8002506:	bd80      	pop	{r7, pc}

08002508 <USB_BSP_Init>:
  * @param  None
  * @retval None
  */

void USB_BSP_Init(USB_CORE_HANDLE *pdev)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
#ifdef USB_DEVICE_LOW_PWR_MGMT_SUPPORT 
  EXTI_InitTypeDef EXTI_InitStructure;
#endif /*USB_DEVICE_LOW_PWR_MGMT_SUPPORT */  

  /* Enable USB clock */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB, ENABLE);
 8002510:	2380      	movs	r3, #128	; 0x80
 8002512:	041b      	lsls	r3, r3, #16
 8002514:	1c18      	adds	r0, r3, #0
 8002516:	2101      	movs	r1, #1
 8002518:	f003 fee0 	bl	80062dc <RCC_APB1PeriphClockCmd>
  - Set AUTOTRIMEN
  - Set CEN
  */
  
  /* Select HSI48 as USB clock */
  RCC_USBCLKConfig(RCC_USBCLK_HSI48);
 800251c:	2000      	movs	r0, #0
 800251e:	f003 fe8b 	bl	8006238 <RCC_USBCLKConfig>
  
  /* Configure the Clock Recovery System */
  CRS_Config();  
 8002522:	f000 f81b 	bl	800255c <CRS_Config>
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
  EXTI_Init(&EXTI_InitStructure);
#endif /*USB_DEVICE_LOW_PWR_MGMT_SUPPORT */
  
}
 8002526:	46bd      	mov	sp, r7
 8002528:	b002      	add	sp, #8
 800252a:	bd80      	pop	{r7, pc}

0800252c <USB_BSP_EnableInterrupt>:
  * @brief  Enable USB Global interrupt
  * @param  None
  * @retval None
  */
void USB_BSP_EnableInterrupt(USB_CORE_HANDLE *pdev)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  NVIC_InitTypeDef NVIC_InitStructure;
  
  /* Enable the USB interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = USB_IRQn;
 8002534:	1c3b      	adds	r3, r7, #0
 8002536:	330c      	adds	r3, #12
 8002538:	221f      	movs	r2, #31
 800253a:	701a      	strb	r2, [r3, #0]
  NVIC_InitStructure.NVIC_IRQChannelPriority = USB_IT_PRIO;
 800253c:	1c3b      	adds	r3, r7, #0
 800253e:	330c      	adds	r3, #12
 8002540:	2201      	movs	r2, #1
 8002542:	705a      	strb	r2, [r3, #1]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002544:	1c3b      	adds	r3, r7, #0
 8002546:	330c      	adds	r3, #12
 8002548:	2201      	movs	r2, #1
 800254a:	709a      	strb	r2, [r3, #2]
  NVIC_Init(&NVIC_InitStructure);
 800254c:	1c3b      	adds	r3, r7, #0
 800254e:	330c      	adds	r3, #12
 8002550:	1c18      	adds	r0, r3, #0
 8002552:	f003 fee1 	bl	8006318 <NVIC_Init>
}
 8002556:	46bd      	mov	sp, r7
 8002558:	b004      	add	sp, #16
 800255a:	bd80      	pop	{r7, pc}

0800255c <CRS_Config>:
  *         oscillator according to USB SOF
  * @param  None
  * @retval None
  */
static void CRS_Config(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /*Enable CRS Clock*/
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_CRS, ENABLE);
 8002560:	2380      	movs	r3, #128	; 0x80
 8002562:	051b      	lsls	r3, r3, #20
 8002564:	1c18      	adds	r0, r3, #0
 8002566:	2101      	movs	r1, #1
 8002568:	f003 feb8 	bl	80062dc <RCC_APB1PeriphClockCmd>
  
  /* Select USB SOF as synchronization source */
  CRS_SynchronizationSourceConfig(CRS_SYNCSource_USB);
 800256c:	2380      	movs	r3, #128	; 0x80
 800256e:	059b      	lsls	r3, r3, #22
 8002570:	1c18      	adds	r0, r3, #0
 8002572:	f004 f9e5 	bl	8006940 <CRS_SynchronizationSourceConfig>
  
  /*Enables the automatic hardware adjustment of TRIM bits: AUTOTRIMEN:*/
  CRS_AutomaticCalibrationCmd(ENABLE);
 8002576:	2001      	movs	r0, #1
 8002578:	f004 f9c6 	bl	8006908 <CRS_AutomaticCalibrationCmd>
  
  /*Enables the oscillator clock for frequency error counter CEN*/
  CRS_FrequencyErrorCounterCmd(ENABLE);
 800257c:	2001      	movs	r0, #1
 800257e:	f004 f9a7 	bl	80068d0 <CRS_FrequencyErrorCounterCmd>
}
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	46c0      	nop			; (mov r8, r8)

08002588 <USB_Init>:
};

/* Private functions ---------------------------------------------------------*/

void USB_Init()
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0


	//remap Pins PA11/12
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800258c:	2001      	movs	r0, #1
 800258e:	2101      	movs	r1, #1
 8002590:	f003 fe86 	bl	80062a0 <RCC_APB2PeriphClockCmd>
	SYSCFG->CFGR1 |= SYSCFG_CFGR1_PA11_PA12_RMP;
 8002594:	4b0e      	ldr	r3, [pc, #56]	; (80025d0 <USB_Init+0x48>)
 8002596:	4a0e      	ldr	r2, [pc, #56]	; (80025d0 <USB_Init+0x48>)
 8002598:	6812      	ldr	r2, [r2, #0]
 800259a:	2110      	movs	r1, #16
 800259c:	430a      	orrs	r2, r1
 800259e:	601a      	str	r2, [r3, #0]

	USBD_Init(&USB_Device_dev,
 80025a0:	480c      	ldr	r0, [pc, #48]	; (80025d4 <USB_Init+0x4c>)
 80025a2:	490d      	ldr	r1, [pc, #52]	; (80025d8 <USB_Init+0x50>)
 80025a4:	4a0d      	ldr	r2, [pc, #52]	; (80025dc <USB_Init+0x54>)
 80025a6:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <USB_Init+0x58>)
 80025a8:	f001 fce2 	bl	8003f70 <USBD_Init>
				&USR_desc,
				&USBD_CDC_cb,
				&USR_cb);
	USB_Flags &= ~USB_FLAG_NEW_DATA;
 80025ac:	4b0d      	ldr	r3, [pc, #52]	; (80025e4 <USB_Init+0x5c>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2201      	movs	r2, #1
 80025b4:	4393      	bics	r3, r2
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <USB_Init+0x5c>)
 80025ba:	701a      	strb	r2, [r3, #0]
	UsbPcSendBuf.read = 0;
 80025bc:	4a0a      	ldr	r2, [pc, #40]	; (80025e8 <USB_Init+0x60>)
 80025be:	2380      	movs	r3, #128	; 0x80
 80025c0:	2100      	movs	r1, #0
 80025c2:	50d1      	str	r1, [r2, r3]
	UsbPcSendBuf.write = 0;
 80025c4:	4a08      	ldr	r2, [pc, #32]	; (80025e8 <USB_Init+0x60>)
 80025c6:	2384      	movs	r3, #132	; 0x84
 80025c8:	2100      	movs	r1, #0
 80025ca:	50d1      	str	r1, [r2, r3]
}
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40010000 	.word	0x40010000
 80025d4:	20000214 	.word	0x20000214
 80025d8:	20000028 	.word	0x20000028
 80025dc:	20000098 	.word	0x20000098
 80025e0:	20000014 	.word	0x20000014
 80025e4:	2000018a 	.word	0x2000018a
 80025e8:	2000018c 	.word	0x2000018c

080025ec <USB_VCP_Init>:
  *         Initializes the Media on the STM32
  * @param  None
  * @retval Result of the operation (USBD_OK in all cases)
  */
uint16_t USB_VCP_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0

  return USBD_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	1c18      	adds	r0, r3, #0
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <USB_VCP_DeInit>:
  *         DeInitializes the Media on the STM32
  * @param  None
  * @retval Result of the opeartion (USBD_OK in all cases)
  */
uint16_t USB_VCP_DeInit(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0

  return USBD_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	1c18      	adds	r0, r3, #0
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <USB_VCP_Ctrl>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation (USBD_OK in all cases)
  */
uint16_t USB_VCP_Ctrl (uint32_t Cmd, uint8_t* Buf, uint32_t Len)
{ 
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
	//but the damn ST USB stack doesn't give us any data!
	//so we have to improvise and the user has to send something to wake the device up,
	//as win 10 sends CTRL-Packages immediatly after plugging the USB device in!!
	//-> moved this connection open recognition to USB_VCP_DataRx

	switch(Cmd)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2b22      	cmp	r3, #34	; 0x22
 8002614:	d110      	bne.n	8002638 <USB_VCP_Ctrl+0x34>
	{
	case SET_CONTROL_LINE_STATE:

		//host is not ready to receive data (any more) -> connection terminated
		if(USB_Flags & USB_FLAG_CDC_OPEN)
 8002616:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <USB_VCP_Ctrl+0x40>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	b2db      	uxtb	r3, r3
 800261c:	1c1a      	adds	r2, r3, #0
 800261e:	2302      	movs	r3, #2
 8002620:	4013      	ands	r3, r2
 8002622:	d008      	beq.n	8002636 <USB_VCP_Ctrl+0x32>
		{
			USB_Flags &= ~USB_FLAG_CDC_OPEN;
 8002624:	4b07      	ldr	r3, [pc, #28]	; (8002644 <USB_VCP_Ctrl+0x40>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2202      	movs	r2, #2
 800262c:	4393      	bics	r3, r2
 800262e:	b2da      	uxtb	r2, r3
 8002630:	4b04      	ldr	r3, [pc, #16]	; (8002644 <USB_VCP_Ctrl+0x40>)
 8002632:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002634:	e7ff      	b.n	8002636 <USB_VCP_Ctrl+0x32>
 8002636:	46c0      	nop			; (mov r8, r8)
	}
	return USBD_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	1c18      	adds	r0, r3, #0
 800263c:	46bd      	mov	sp, r7
 800263e:	b004      	add	sp, #16
 8002640:	bd80      	pop	{r7, pc}
 8002642:	46c0      	nop			; (mov r8, r8)
 8002644:	2000018a 	.word	0x2000018a

08002648 <USB_VCP_DataTx>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes) or 0 to stop @ first null char
  * @retval Result of the operation: USBD_OK if all operations are OK else VCP_FAIL
  */
uint16_t USB_VCP_DataTx (uint8_t* Buf, uint32_t Len)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
	if(Len)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d020      	beq.n	800269a <USB_VCP_DataTx+0x52>
	{
		for(uint32_t i = 0; i < Len; i++)
 8002658:	2300      	movs	r3, #0
 800265a:	60fb      	str	r3, [r7, #12]
 800265c:	e018      	b.n	8002690 <USB_VCP_DataTx+0x48>
		{
			APP_Rx_Buffer[APP_Rx_ptr_in] = Buf[i];
 800265e:	4b22      	ldr	r3, [pc, #136]	; (80026e8 <USB_VCP_DataTx+0xa0>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	188a      	adds	r2, r1, r2
 8002668:	7811      	ldrb	r1, [r2, #0]
 800266a:	4a20      	ldr	r2, [pc, #128]	; (80026ec <USB_VCP_DataTx+0xa4>)
 800266c:	54d1      	strb	r1, [r2, r3]
			APP_Rx_ptr_in++;
 800266e:	4b1e      	ldr	r3, [pc, #120]	; (80026e8 <USB_VCP_DataTx+0xa0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	1c5a      	adds	r2, r3, #1
 8002674:	4b1c      	ldr	r3, [pc, #112]	; (80026e8 <USB_VCP_DataTx+0xa0>)
 8002676:	601a      	str	r2, [r3, #0]

			/* To avoid buffer overflow */
			if(APP_Rx_ptr_in == APP_RX_DATA_SIZE)
 8002678:	4b1b      	ldr	r3, [pc, #108]	; (80026e8 <USB_VCP_DataTx+0xa0>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	2380      	movs	r3, #128	; 0x80
 800267e:	011b      	lsls	r3, r3, #4
 8002680:	429a      	cmp	r2, r3
 8002682:	d102      	bne.n	800268a <USB_VCP_DataTx+0x42>
			{
				APP_Rx_ptr_in = 0;
 8002684:	4b18      	ldr	r3, [pc, #96]	; (80026e8 <USB_VCP_DataTx+0xa0>)
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]
  */
uint16_t USB_VCP_DataTx (uint8_t* Buf, uint32_t Len)
{
	if(Len)
	{
		for(uint32_t i = 0; i < Len; i++)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	3301      	adds	r3, #1
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	429a      	cmp	r2, r3
 8002696:	d3e2      	bcc.n	800265e <USB_VCP_DataTx+0x16>
 8002698:	e021      	b.n	80026de <USB_VCP_DataTx+0x96>
		}
	}
	else
	//stop @ null character (Len = 0)
	{
		uint32_t i = 0;
 800269a:	2300      	movs	r3, #0
 800269c:	60bb      	str	r3, [r7, #8]
		while(Buf[i] != 0x00)
 800269e:	e018      	b.n	80026d2 <USB_VCP_DataTx+0x8a>
		{
			APP_Rx_Buffer[APP_Rx_ptr_in] = Buf[i];
 80026a0:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <USB_VCP_DataTx+0xa0>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6879      	ldr	r1, [r7, #4]
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	188a      	adds	r2, r1, r2
 80026aa:	7811      	ldrb	r1, [r2, #0]
 80026ac:	4a0f      	ldr	r2, [pc, #60]	; (80026ec <USB_VCP_DataTx+0xa4>)
 80026ae:	54d1      	strb	r1, [r2, r3]
			APP_Rx_ptr_in++;
 80026b0:	4b0d      	ldr	r3, [pc, #52]	; (80026e8 <USB_VCP_DataTx+0xa0>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	1c5a      	adds	r2, r3, #1
 80026b6:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <USB_VCP_DataTx+0xa0>)
 80026b8:	601a      	str	r2, [r3, #0]

			/* To avoid buffer overflow */
			if(APP_Rx_ptr_in == APP_RX_DATA_SIZE)
 80026ba:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <USB_VCP_DataTx+0xa0>)
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	2380      	movs	r3, #128	; 0x80
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d102      	bne.n	80026cc <USB_VCP_DataTx+0x84>
			{
				APP_Rx_ptr_in = 0;
 80026c6:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <USB_VCP_DataTx+0xa0>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
			}
			i++;
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	3301      	adds	r3, #1
 80026d0:	60bb      	str	r3, [r7, #8]
	}
	else
	//stop @ null character (Len = 0)
	{
		uint32_t i = 0;
		while(Buf[i] != 0x00)
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	18d3      	adds	r3, r2, r3
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1e0      	bne.n	80026a0 <USB_VCP_DataTx+0x58>
				APP_Rx_ptr_in = 0;
			}
			i++;
		}
	}
	return USBD_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	1c18      	adds	r0, r3, #0
 80026e2:	46bd      	mov	sp, r7
 80026e4:	b004      	add	sp, #16
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	20000160 	.word	0x20000160
 80026ec:	20000608 	.word	0x20000608

080026f0 <USB_VCP_DataRx>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else VCP_FAIL
  */
uint16_t USB_VCP_DataRx (uint8_t* Buf, uint32_t Len)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
	//start communication with host, as soon as the host has sent anything
	if(!(USB_Flags & USB_FLAG_CDC_OPEN))
 80026fa:	4b20      	ldr	r3, [pc, #128]	; (800277c <USB_VCP_DataRx+0x8c>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	1c1a      	adds	r2, r3, #0
 8002702:	2302      	movs	r3, #2
 8002704:	4013      	ands	r3, r2
 8002706:	d119      	bne.n	800273c <USB_VCP_DataRx+0x4c>
	{
		//flush the buffer
		UsbPcSendBuf.read = 0;
 8002708:	4a1d      	ldr	r2, [pc, #116]	; (8002780 <USB_VCP_DataRx+0x90>)
 800270a:	2380      	movs	r3, #128	; 0x80
 800270c:	2100      	movs	r1, #0
 800270e:	50d1      	str	r1, [r2, r3]
		UsbPcSendBuf.write = 0;
 8002710:	4a1b      	ldr	r2, [pc, #108]	; (8002780 <USB_VCP_DataRx+0x90>)
 8002712:	2384      	movs	r3, #132	; 0x84
 8002714:	2100      	movs	r1, #0
 8002716:	50d1      	str	r1, [r2, r3]

		//set flags
		USB_Flags |= USB_FLAG_CDC_OPEN;
 8002718:	4b18      	ldr	r3, [pc, #96]	; (800277c <USB_VCP_DataRx+0x8c>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2202      	movs	r2, #2
 8002720:	4313      	orrs	r3, r2
 8002722:	b2da      	uxtb	r2, r3
 8002724:	4b15      	ldr	r3, [pc, #84]	; (800277c <USB_VCP_DataRx+0x8c>)
 8002726:	701a      	strb	r2, [r3, #0]
		USB_Flags |= USB_FLAG_FIRST_CONTACT;
 8002728:	4b14      	ldr	r3, [pc, #80]	; (800277c <USB_VCP_DataRx+0x8c>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2204      	movs	r2, #4
 8002730:	4313      	orrs	r3, r2
 8002732:	b2da      	uxtb	r2, r3
 8002734:	4b11      	ldr	r3, [pc, #68]	; (800277c <USB_VCP_DataRx+0x8c>)
 8002736:	701a      	strb	r2, [r3, #0]
		return USBD_OK;
 8002738:	2300      	movs	r3, #0
 800273a:	e01b      	b.n	8002774 <USB_VCP_DataRx+0x84>
	}

	USB_Flags |= USB_FLAG_NEW_DATA;
 800273c:	4b0f      	ldr	r3, [pc, #60]	; (800277c <USB_VCP_DataRx+0x8c>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2201      	movs	r2, #1
 8002744:	4313      	orrs	r3, r2
 8002746:	b2da      	uxtb	r2, r3
 8002748:	4b0c      	ldr	r3, [pc, #48]	; (800277c <USB_VCP_DataRx+0x8c>)
 800274a:	701a      	strb	r2, [r3, #0]

	for(uint32_t i = 0; i < Len; i++)
 800274c:	2300      	movs	r3, #0
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	e00b      	b.n	800276a <USB_VCP_DataRx+0x7a>
	{
		FifoIn(&UsbPcSendBuf, Buf[i]);
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	18d3      	adds	r3, r2, r3
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	4a09      	ldr	r2, [pc, #36]	; (8002780 <USB_VCP_DataRx+0x90>)
 800275c:	1c10      	adds	r0, r2, #0
 800275e:	1c19      	adds	r1, r3, #0
 8002760:	f7ff fcb0 	bl	80020c4 <FifoIn>
		return USBD_OK;
	}

	USB_Flags |= USB_FLAG_NEW_DATA;

	for(uint32_t i = 0; i < Len; i++)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	3301      	adds	r3, #1
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	429a      	cmp	r2, r3
 8002770:	d3ef      	bcc.n	8002752 <USB_VCP_DataRx+0x62>
	{
		FifoIn(&UsbPcSendBuf, Buf[i]);
	}
	return USBD_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	1c18      	adds	r0, r3, #0
 8002776:	46bd      	mov	sp, r7
 8002778:	b004      	add	sp, #16
 800277a:	bd80      	pop	{r7, pc}
 800277c:	2000018a 	.word	0x2000018a
 8002780:	2000018c 	.word	0x2000018c

08002784 <I2C_RdReg>:
/**
 * Origin of I2C_RdReg and I2C_WrReg:
 * https://hsel.co.uk/2014/08/13/stm32f0-mini-tutorial-using-the-i2c-peripheral-to-communicate-with-a-hmc5883l-digital-compass-ic/
 */
uint8_t I2C_RdReg(uint8_t Reg, uint8_t *Data, uint8_t DCnt)
{
 8002784:	b590      	push	{r4, r7, lr}
 8002786:	b087      	sub	sp, #28
 8002788:	af02      	add	r7, sp, #8
 800278a:	6039      	str	r1, [r7, #0]
 800278c:	1dfb      	adds	r3, r7, #7
 800278e:	1c01      	adds	r1, r0, #0
 8002790:	7019      	strb	r1, [r3, #0]
 8002792:	1dbb      	adds	r3, r7, #6
 8002794:	701a      	strb	r2, [r3, #0]
	uint8_t Cnt, SingleData = 0;
 8002796:	1c3b      	adds	r3, r7, #0
 8002798:	330e      	adds	r3, #14
 800279a:	2200      	movs	r2, #0
 800279c:	701a      	strb	r2, [r3, #0]

	//Wait until I2C isn't busy
	while(I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_BUSY) == SET);
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	4a40      	ldr	r2, [pc, #256]	; (80028a4 <I2C_RdReg+0x120>)
 80027a2:	2380      	movs	r3, #128	; 0x80
 80027a4:	021b      	lsls	r3, r3, #8
 80027a6:	1c10      	adds	r0, r2, #0
 80027a8:	1c19      	adds	r1, r3, #0
 80027aa:	f003 fef5 	bl	8006598 <I2C_GetFlagStatus>
 80027ae:	1c03      	adds	r3, r0, #0
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d0f5      	beq.n	80027a0 <I2C_RdReg+0x1c>

	//first communication (try reading the status register)
	/* Configure slave address, nbytes, reload, end mode and start or stop generation */
	I2C_TransferHandling(I2C_MMA8653,ADDR_MMA8653,1,I2C_SoftEnd_Mode,I2C_Generate_Start_Write);
 80027b4:	4b3b      	ldr	r3, [pc, #236]	; (80028a4 <I2C_RdReg+0x120>)
 80027b6:	2280      	movs	r2, #128	; 0x80
 80027b8:	0192      	lsls	r2, r2, #6
 80027ba:	9200      	str	r2, [sp, #0]
 80027bc:	1c18      	adds	r0, r3, #0
 80027be:	213a      	movs	r1, #58	; 0x3a
 80027c0:	2201      	movs	r2, #1
 80027c2:	2300      	movs	r3, #0
 80027c4:	f003 fe9e 	bl	8006504 <I2C_TransferHandling>
	//Ensure the transmit interrupted flag is set
	while(I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_TXIS) == RESET);
 80027c8:	46c0      	nop			; (mov r8, r8)
 80027ca:	4b36      	ldr	r3, [pc, #216]	; (80028a4 <I2C_RdReg+0x120>)
 80027cc:	1c18      	adds	r0, r3, #0
 80027ce:	2102      	movs	r1, #2
 80027d0:	f003 fee2 	bl	8006598 <I2C_GetFlagStatus>
 80027d4:	1c03      	adds	r3, r0, #0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0f7      	beq.n	80027ca <I2C_RdReg+0x46>
	//send reg address
	I2C_SendData(I2C_MMA8653, (uint8_t)Reg);
 80027da:	4a32      	ldr	r2, [pc, #200]	; (80028a4 <I2C_RdReg+0x120>)
 80027dc:	1dfb      	adds	r3, r7, #7
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	1c10      	adds	r0, r2, #0
 80027e2:	1c19      	adds	r1, r3, #0
 80027e4:	f003 febe 	bl	8006564 <I2C_SendData>
	//Wait until transfer is complete!
	while(I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_TC) == RESET);
 80027e8:	46c0      	nop			; (mov r8, r8)
 80027ea:	4b2e      	ldr	r3, [pc, #184]	; (80028a4 <I2C_RdReg+0x120>)
 80027ec:	1c18      	adds	r0, r3, #0
 80027ee:	2140      	movs	r1, #64	; 0x40
 80027f0:	f003 fed2 	bl	8006598 <I2C_GetFlagStatus>
 80027f4:	1c03      	adds	r3, r0, #0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0f7      	beq.n	80027ea <I2C_RdReg+0x66>
	//initiate read
	I2C_TransferHandling(I2C_MMA8653, ADDR_MMA8653, DCnt, I2C_AutoEnd_Mode, I2C_Generate_Start_Read);
 80027fa:	492a      	ldr	r1, [pc, #168]	; (80028a4 <I2C_RdReg+0x120>)
 80027fc:	1dbb      	adds	r3, r7, #6
 80027fe:	781a      	ldrb	r2, [r3, #0]
 8002800:	2380      	movs	r3, #128	; 0x80
 8002802:	049b      	lsls	r3, r3, #18
 8002804:	2090      	movs	r0, #144	; 0x90
 8002806:	0180      	lsls	r0, r0, #6
 8002808:	9000      	str	r0, [sp, #0]
 800280a:	1c08      	adds	r0, r1, #0
 800280c:	213a      	movs	r1, #58	; 0x3a
 800280e:	f003 fe79 	bl	8006504 <I2C_TransferHandling>


	//Read in DCnt pieces of data
	for(Cnt = 0; Cnt<DCnt; Cnt++)
 8002812:	1c3b      	adds	r3, r7, #0
 8002814:	330f      	adds	r3, #15
 8002816:	2200      	movs	r2, #0
 8002818:	701a      	strb	r2, [r3, #0]
 800281a:	e027      	b.n	800286c <I2C_RdReg+0xe8>
	{
        //Wait until the RX register is full of luscious data!
        while(I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_RXNE) == RESET);
 800281c:	46c0      	nop			; (mov r8, r8)
 800281e:	4b21      	ldr	r3, [pc, #132]	; (80028a4 <I2C_RdReg+0x120>)
 8002820:	1c18      	adds	r0, r3, #0
 8002822:	2104      	movs	r1, #4
 8002824:	f003 feb8 	bl	8006598 <I2C_GetFlagStatus>
 8002828:	1c03      	adds	r3, r0, #0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0f7      	beq.n	800281e <I2C_RdReg+0x9a>
        //If we're only reading one byte, place that data direct into the
        //SingleData variable. If we're reading more than 1 piece of data
        //store in the array "Data" (a pointer from main)
        if(DCnt > 1)
 800282e:	1dbb      	adds	r3, r7, #6
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d90b      	bls.n	800284e <I2C_RdReg+0xca>
        {
        	Data[Cnt] = I2C_ReceiveData(I2C_MMA8653);
 8002836:	1c3b      	adds	r3, r7, #0
 8002838:	330f      	adds	r3, #15
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	18d4      	adds	r4, r2, r3
 8002840:	4b18      	ldr	r3, [pc, #96]	; (80028a4 <I2C_RdReg+0x120>)
 8002842:	1c18      	adds	r0, r3, #0
 8002844:	f003 fe9c 	bl	8006580 <I2C_ReceiveData>
 8002848:	1c03      	adds	r3, r0, #0
 800284a:	7023      	strb	r3, [r4, #0]
 800284c:	e007      	b.n	800285e <I2C_RdReg+0xda>
        }
        else SingleData = I2C_ReceiveData(I2C_MMA8653);
 800284e:	1c3c      	adds	r4, r7, #0
 8002850:	340e      	adds	r4, #14
 8002852:	4b14      	ldr	r3, [pc, #80]	; (80028a4 <I2C_RdReg+0x120>)
 8002854:	1c18      	adds	r0, r3, #0
 8002856:	f003 fe93 	bl	8006580 <I2C_ReceiveData>
 800285a:	1c03      	adds	r3, r0, #0
 800285c:	7023      	strb	r3, [r4, #0]
	//initiate read
	I2C_TransferHandling(I2C_MMA8653, ADDR_MMA8653, DCnt, I2C_AutoEnd_Mode, I2C_Generate_Start_Read);


	//Read in DCnt pieces of data
	for(Cnt = 0; Cnt<DCnt; Cnt++)
 800285e:	1c3b      	adds	r3, r7, #0
 8002860:	330f      	adds	r3, #15
 8002862:	781a      	ldrb	r2, [r3, #0]
 8002864:	1c3b      	adds	r3, r7, #0
 8002866:	330f      	adds	r3, #15
 8002868:	3201      	adds	r2, #1
 800286a:	701a      	strb	r2, [r3, #0]
 800286c:	1c3a      	adds	r2, r7, #0
 800286e:	320f      	adds	r2, #15
 8002870:	1dbb      	adds	r3, r7, #6
 8002872:	7812      	ldrb	r2, [r2, #0]
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	429a      	cmp	r2, r3
 8002878:	d3d0      	bcc.n	800281c <I2C_RdReg+0x98>
        }
        else SingleData = I2C_ReceiveData(I2C_MMA8653);
     }

    //Wait for the stop condition to be sent
    while(I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_STOPF) == RESET);
 800287a:	46c0      	nop			; (mov r8, r8)
 800287c:	4b09      	ldr	r3, [pc, #36]	; (80028a4 <I2C_RdReg+0x120>)
 800287e:	1c18      	adds	r0, r3, #0
 8002880:	2120      	movs	r1, #32
 8002882:	f003 fe89 	bl	8006598 <I2C_GetFlagStatus>
 8002886:	1c03      	adds	r3, r0, #0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0f7      	beq.n	800287c <I2C_RdReg+0xf8>

    //Clear the stop flag for next transfers
    I2C_ClearFlag(I2C_MMA8653, I2C_FLAG_STOPF);
 800288c:	4b05      	ldr	r3, [pc, #20]	; (80028a4 <I2C_RdReg+0x120>)
 800288e:	1c18      	adds	r0, r3, #0
 8002890:	2120      	movs	r1, #32
 8002892:	f003 fea7 	bl	80065e4 <I2C_ClearFlag>

    //Return a single piece of data if DCnt was
    //less than 1, otherwise 0 will be returned.
	return SingleData;
 8002896:	1c3b      	adds	r3, r7, #0
 8002898:	330e      	adds	r3, #14
 800289a:	781b      	ldrb	r3, [r3, #0]
}
 800289c:	1c18      	adds	r0, r3, #0
 800289e:	46bd      	mov	sp, r7
 80028a0:	b005      	add	sp, #20
 80028a2:	bd90      	pop	{r4, r7, pc}
 80028a4:	40005400 	.word	0x40005400

080028a8 <I2C_WrReg>:

void I2C_WrReg(uint8_t Reg, uint8_t Val){
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af02      	add	r7, sp, #8
 80028ae:	1c0a      	adds	r2, r1, #0
 80028b0:	1dfb      	adds	r3, r7, #7
 80028b2:	1c01      	adds	r1, r0, #0
 80028b4:	7019      	strb	r1, [r3, #0]
 80028b6:	1dbb      	adds	r3, r7, #6
 80028b8:	701a      	strb	r2, [r3, #0]

	//Wait until I2C isn't busy
	while(I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_BUSY) == SET);
 80028ba:	46c0      	nop			; (mov r8, r8)
 80028bc:	4a2c      	ldr	r2, [pc, #176]	; (8002970 <I2C_WrReg+0xc8>)
 80028be:	2380      	movs	r3, #128	; 0x80
 80028c0:	021b      	lsls	r3, r3, #8
 80028c2:	1c10      	adds	r0, r2, #0
 80028c4:	1c19      	adds	r1, r3, #0
 80028c6:	f003 fe67 	bl	8006598 <I2C_GetFlagStatus>
 80028ca:	1c03      	adds	r3, r0, #0
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d0f5      	beq.n	80028bc <I2C_WrReg+0x14>
	//I2C interface... Regardless! Send the address of the HMC
	//sensor down the I2C Bus and generate a start saying we're
	//going to write one byte. I'll be completely honest,
	//the I2C peripheral doesn't make too much sense to me
	//and a lot of the code is from the Std peripheral library
	I2C_TransferHandling(I2C_MMA8653, ADDR_MMA8653, 1, I2C_Reload_Mode, I2C_Generate_Start_Write);
 80028d0:	4a27      	ldr	r2, [pc, #156]	; (8002970 <I2C_WrReg+0xc8>)
 80028d2:	2380      	movs	r3, #128	; 0x80
 80028d4:	045b      	lsls	r3, r3, #17
 80028d6:	2180      	movs	r1, #128	; 0x80
 80028d8:	0189      	lsls	r1, r1, #6
 80028da:	9100      	str	r1, [sp, #0]
 80028dc:	1c10      	adds	r0, r2, #0
 80028de:	213a      	movs	r1, #58	; 0x3a
 80028e0:	2201      	movs	r2, #1
 80028e2:	f003 fe0f 	bl	8006504 <I2C_TransferHandling>

	//Ensure the transmit interrupted flag is set
	while(I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_TXIS) == RESET);
 80028e6:	46c0      	nop			; (mov r8, r8)
 80028e8:	4b21      	ldr	r3, [pc, #132]	; (8002970 <I2C_WrReg+0xc8>)
 80028ea:	1c18      	adds	r0, r3, #0
 80028ec:	2102      	movs	r1, #2
 80028ee:	f003 fe53 	bl	8006598 <I2C_GetFlagStatus>
 80028f2:	1c03      	adds	r3, r0, #0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0f7      	beq.n	80028e8 <I2C_WrReg+0x40>

	//Send the address of the register we wish to write to
	I2C_SendData(I2C_MMA8653, Reg);
 80028f8:	4a1d      	ldr	r2, [pc, #116]	; (8002970 <I2C_WrReg+0xc8>)
 80028fa:	1dfb      	adds	r3, r7, #7
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	1c10      	adds	r0, r2, #0
 8002900:	1c19      	adds	r1, r3, #0
 8002902:	f003 fe2f 	bl	8006564 <I2C_SendData>

	//Ensure that the transfer complete reload flag is
	//set, essentially a standard TC flag
	while(I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_TCR) == RESET);
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	4b19      	ldr	r3, [pc, #100]	; (8002970 <I2C_WrReg+0xc8>)
 800290a:	1c18      	adds	r0, r3, #0
 800290c:	2180      	movs	r1, #128	; 0x80
 800290e:	f003 fe43 	bl	8006598 <I2C_GetFlagStatus>
 8002912:	1c03      	adds	r3, r0, #0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d0f7      	beq.n	8002908 <I2C_WrReg+0x60>

	//Now that the HMC5883L knows which register
	//we want to write to, send the address again
	//and ensure the I2C peripheral doesn't add
	//any start or stop conditions
	I2C_TransferHandling(I2C_MMA8653, ADDR_MMA8653, 1, I2C_AutoEnd_Mode, I2C_No_StartStop);
 8002918:	4a15      	ldr	r2, [pc, #84]	; (8002970 <I2C_WrReg+0xc8>)
 800291a:	2380      	movs	r3, #128	; 0x80
 800291c:	049b      	lsls	r3, r3, #18
 800291e:	2100      	movs	r1, #0
 8002920:	9100      	str	r1, [sp, #0]
 8002922:	1c10      	adds	r0, r2, #0
 8002924:	213a      	movs	r1, #58	; 0x3a
 8002926:	2201      	movs	r2, #1
 8002928:	f003 fdec 	bl	8006504 <I2C_TransferHandling>

	//Again, wait until the transmit interrupted flag is set
	while(I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_TXIS) == RESET);
 800292c:	46c0      	nop			; (mov r8, r8)
 800292e:	4b10      	ldr	r3, [pc, #64]	; (8002970 <I2C_WrReg+0xc8>)
 8002930:	1c18      	adds	r0, r3, #0
 8002932:	2102      	movs	r1, #2
 8002934:	f003 fe30 	bl	8006598 <I2C_GetFlagStatus>
 8002938:	1c03      	adds	r3, r0, #0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f7      	beq.n	800292e <I2C_WrReg+0x86>

	//Send the value you wish you write to the register
	I2C_SendData(I2C_MMA8653, Val);
 800293e:	4a0c      	ldr	r2, [pc, #48]	; (8002970 <I2C_WrReg+0xc8>)
 8002940:	1dbb      	adds	r3, r7, #6
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	1c10      	adds	r0, r2, #0
 8002946:	1c19      	adds	r1, r3, #0
 8002948:	f003 fe0c 	bl	8006564 <I2C_SendData>

	//Wait for the stop flag to be set indicating
	//a stop condition has been sent
	while(I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_STOPF) == RESET);
 800294c:	46c0      	nop			; (mov r8, r8)
 800294e:	4b08      	ldr	r3, [pc, #32]	; (8002970 <I2C_WrReg+0xc8>)
 8002950:	1c18      	adds	r0, r3, #0
 8002952:	2120      	movs	r1, #32
 8002954:	f003 fe20 	bl	8006598 <I2C_GetFlagStatus>
 8002958:	1c03      	adds	r3, r0, #0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f7      	beq.n	800294e <I2C_WrReg+0xa6>

	//Clear the stop flag for the next potential transfer
	I2C_ClearFlag(I2C_MMA8653, I2C_FLAG_STOPF);
 800295e:	4b04      	ldr	r3, [pc, #16]	; (8002970 <I2C_WrReg+0xc8>)
 8002960:	1c18      	adds	r0, r3, #0
 8002962:	2120      	movs	r1, #32
 8002964:	f003 fe3e 	bl	80065e4 <I2C_ClearFlag>
}
 8002968:	46bd      	mov	sp, r7
 800296a:	b002      	add	sp, #8
 800296c:	bd80      	pop	{r7, pc}
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	40005400 	.word	0x40005400

08002974 <I2C_BitHandling>:

void I2C_BitHandling(uint8_t reg, uint8_t bitmask, uint8_t set)
{
 8002974:	b590      	push	{r4, r7, lr}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	1dfb      	adds	r3, r7, #7
 800297c:	7018      	strb	r0, [r3, #0]
 800297e:	1dbb      	adds	r3, r7, #6
 8002980:	7019      	strb	r1, [r3, #0]
 8002982:	1d7b      	adds	r3, r7, #5
 8002984:	701a      	strb	r2, [r3, #0]
	uint8_t tempReg = I2C_RdReg(reg,rxBuf,1u);
 8002986:	1c3c      	adds	r4, r7, #0
 8002988:	340f      	adds	r4, #15
 800298a:	1dfb      	adds	r3, r7, #7
 800298c:	781a      	ldrb	r2, [r3, #0]
 800298e:	4b17      	ldr	r3, [pc, #92]	; (80029ec <I2C_BitHandling+0x78>)
 8002990:	1c10      	adds	r0, r2, #0
 8002992:	1c19      	adds	r1, r3, #0
 8002994:	2201      	movs	r2, #1
 8002996:	f7ff fef5 	bl	8002784 <I2C_RdReg>
 800299a:	1c03      	adds	r3, r0, #0
 800299c:	7023      	strb	r3, [r4, #0]
	if(set)
 800299e:	1d7b      	adds	r3, r7, #5
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d009      	beq.n	80029ba <I2C_BitHandling+0x46>
	{
		//set bits
		tempReg |= bitmask;
 80029a6:	1c3b      	adds	r3, r7, #0
 80029a8:	330f      	adds	r3, #15
 80029aa:	1c39      	adds	r1, r7, #0
 80029ac:	310f      	adds	r1, #15
 80029ae:	1dba      	adds	r2, r7, #6
 80029b0:	7809      	ldrb	r1, [r1, #0]
 80029b2:	7812      	ldrb	r2, [r2, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	701a      	strb	r2, [r3, #0]
 80029b8:	e00b      	b.n	80029d2 <I2C_BitHandling+0x5e>
	}
	else
	{
		//reset bits
		tempReg &= ~bitmask;
 80029ba:	1dbb      	adds	r3, r7, #6
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	43db      	mvns	r3, r3
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	1c3a      	adds	r2, r7, #0
 80029c4:	320f      	adds	r2, #15
 80029c6:	7812      	ldrb	r2, [r2, #0]
 80029c8:	4013      	ands	r3, r2
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	1c3b      	adds	r3, r7, #0
 80029ce:	330f      	adds	r3, #15
 80029d0:	701a      	strb	r2, [r3, #0]
	}
	//write back the register
	I2C_WrReg(reg,tempReg);
 80029d2:	1dfb      	adds	r3, r7, #7
 80029d4:	781a      	ldrb	r2, [r3, #0]
 80029d6:	1c3b      	adds	r3, r7, #0
 80029d8:	330f      	adds	r3, #15
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	1c10      	adds	r0, r2, #0
 80029de:	1c19      	adds	r1, r3, #0
 80029e0:	f7ff ff62 	bl	80028a8 <I2C_WrReg>
}
 80029e4:	46bd      	mov	sp, r7
 80029e6:	b005      	add	sp, #20
 80029e8:	bd90      	pop	{r4, r7, pc}
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	2000037c 	.word	0x2000037c

080029f0 <mma8653_goStandby>:

uint8_t mma8653_goStandby()
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
	if(!isActive)
 80029f4:	4b0f      	ldr	r3, [pc, #60]	; (8002a34 <mma8653_goStandby+0x44>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <mma8653_goStandby+0x10>
	{
		return 0;
 80029fc:	2300      	movs	r3, #0
 80029fe:	e016      	b.n	8002a2e <mma8653_goStandby+0x3e>
	}
	//reset the Active-bit
	I2C_BitHandling(REG_CTRL_REG_1, 1<<0, 0);
 8002a00:	202a      	movs	r0, #42	; 0x2a
 8002a02:	2101      	movs	r1, #1
 8002a04:	2200      	movs	r2, #0
 8002a06:	f7ff ffb5 	bl	8002974 <I2C_BitHandling>
	delay(100);
 8002a0a:	2064      	movs	r0, #100	; 0x64
 8002a0c:	f000 fc0e 	bl	800322c <delay>
	//check, if the sensor is inactive
	if(I2C_RdReg(REG_SYSMOD,rxBuf,1) != 0)
 8002a10:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <mma8653_goStandby+0x48>)
 8002a12:	200b      	movs	r0, #11
 8002a14:	1c19      	adds	r1, r3, #0
 8002a16:	2201      	movs	r2, #1
 8002a18:	f7ff feb4 	bl	8002784 <I2C_RdReg>
 8002a1c:	1c03      	adds	r3, r0, #0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <mma8653_goStandby+0x36>
	{
		return 1;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e003      	b.n	8002a2e <mma8653_goStandby+0x3e>
	}
	isActive = 0;
 8002a26:	4b03      	ldr	r3, [pc, #12]	; (8002a34 <mma8653_goStandby+0x44>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	701a      	strb	r2, [r3, #0]
	return 0;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	1c18      	adds	r0, r3, #0
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	20000144 	.word	0x20000144
 8002a38:	2000037c 	.word	0x2000037c

08002a3c <mma8653_goActive>:
uint8_t mma8653_goActive()
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0

	if(isActive)
 8002a40:	4b0f      	ldr	r3, [pc, #60]	; (8002a80 <mma8653_goActive+0x44>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <mma8653_goActive+0x10>
	{
		return 0;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	e016      	b.n	8002a7a <mma8653_goActive+0x3e>
	}
	//set the Active-bit
	I2C_BitHandling(REG_CTRL_REG_1, 1<<0, 1);
 8002a4c:	202a      	movs	r0, #42	; 0x2a
 8002a4e:	2101      	movs	r1, #1
 8002a50:	2201      	movs	r2, #1
 8002a52:	f7ff ff8f 	bl	8002974 <I2C_BitHandling>
	delay(100);
 8002a56:	2064      	movs	r0, #100	; 0x64
 8002a58:	f000 fbe8 	bl	800322c <delay>
	//check, if the sensor is active
	if(I2C_RdReg(REG_SYSMOD,rxBuf,1) != 1)
 8002a5c:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <mma8653_goActive+0x48>)
 8002a5e:	200b      	movs	r0, #11
 8002a60:	1c19      	adds	r1, r3, #0
 8002a62:	2201      	movs	r2, #1
 8002a64:	f7ff fe8e 	bl	8002784 <I2C_RdReg>
 8002a68:	1c03      	adds	r3, r0, #0
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d001      	beq.n	8002a72 <mma8653_goActive+0x36>
	{

		return 1;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e003      	b.n	8002a7a <mma8653_goActive+0x3e>
	}
	isActive = 1;
 8002a72:	4b03      	ldr	r3, [pc, #12]	; (8002a80 <mma8653_goActive+0x44>)
 8002a74:	2201      	movs	r2, #1
 8002a76:	701a      	strb	r2, [r3, #0]
	return 0;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	1c18      	adds	r0, r3, #0
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	20000144 	.word	0x20000144
 8002a84:	2000037c 	.word	0x2000037c

08002a88 <mma8653_init>:

uint8_t mma8653_init()
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b08a      	sub	sp, #40	; 0x28
 8002a8c:	af00      	add	r7, sp, #0

	//enable clock for periphery modules
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8002a8e:	2380      	movs	r3, #128	; 0x80
 8002a90:	029b      	lsls	r3, r3, #10
 8002a92:	1c18      	adds	r0, r3, #0
 8002a94:	2101      	movs	r1, #1
 8002a96:	f003 fbe5 	bl	8006264 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 8002a9a:	2380      	movs	r3, #128	; 0x80
 8002a9c:	03db      	lsls	r3, r3, #15
 8002a9e:	1c18      	adds	r0, r3, #0
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	f003 fbdf 	bl	8006264 <RCC_AHBPeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 8002aa6:	2380      	movs	r3, #128	; 0x80
 8002aa8:	039b      	lsls	r3, r3, #14
 8002aaa:	1c18      	adds	r0, r3, #0
 8002aac:	2101      	movs	r1, #1
 8002aae:	f003 fc15 	bl	80062dc <RCC_APB1PeriphClockCmd>

	//gpio init
	GPIO_InitTypeDef GPIO_InitStruct;
	//configure PINs PF0 and PF1 as AF OD out
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
 8002ab2:	1c3b      	adds	r3, r7, #0
 8002ab4:	3320      	adds	r3, #32
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8002aba:	1c3b      	adds	r3, r7, #0
 8002abc:	3320      	adds	r3, #32
 8002abe:	2202      	movs	r2, #2
 8002ac0:	711a      	strb	r2, [r3, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;
 8002ac2:	1c3b      	adds	r3, r7, #0
 8002ac4:	3320      	adds	r3, #32
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	719a      	strb	r2, [r3, #6]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_Level_1;
 8002aca:	1c3b      	adds	r3, r7, #0
 8002acc:	3320      	adds	r3, #32
 8002ace:	2200      	movs	r2, #0
 8002ad0:	715a      	strb	r2, [r3, #5]
	GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ad2:	4a3c      	ldr	r2, [pc, #240]	; (8002bc4 <mma8653_init+0x13c>)
 8002ad4:	1c3b      	adds	r3, r7, #0
 8002ad6:	3320      	adds	r3, #32
 8002ad8:	1c10      	adds	r0, r2, #0
 8002ada:	1c19      	adds	r1, r3, #0
 8002adc:	f003 fd8e 	bl	80065fc <GPIO_Init>

	//remap
	GPIO_PinAFConfig(GPIOF,GPIO_PinSource0,GPIO_AF_1);
 8002ae0:	4b38      	ldr	r3, [pc, #224]	; (8002bc4 <mma8653_init+0x13c>)
 8002ae2:	1c18      	adds	r0, r3, #0
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f003 fe3c 	bl	8006764 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOF,GPIO_PinSource1,GPIO_AF_1);
 8002aec:	4b35      	ldr	r3, [pc, #212]	; (8002bc4 <mma8653_init+0x13c>)
 8002aee:	1c18      	adds	r0, r3, #0
 8002af0:	2101      	movs	r1, #1
 8002af2:	2201      	movs	r2, #1
 8002af4:	f003 fe36 	bl	8006764 <GPIO_PinAFConfig>

	//configure PINs PA2 and PA3 as inputs for the interrupt lines
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 8002af8:	1c3b      	adds	r3, r7, #0
 8002afa:	3320      	adds	r3, #32
 8002afc:	220c      	movs	r2, #12
 8002afe:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 8002b00:	1c3b      	adds	r3, r7, #0
 8002b02:	3320      	adds	r3, #32
 8002b04:	2200      	movs	r2, #0
 8002b06:	711a      	strb	r2, [r3, #4]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8002b08:	1c3b      	adds	r3, r7, #0
 8002b0a:	3320      	adds	r3, #32
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	71da      	strb	r2, [r3, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8002b10:	1c3b      	adds	r3, r7, #0
 8002b12:	3320      	adds	r3, #32
 8002b14:	2203      	movs	r2, #3
 8002b16:	715a      	strb	r2, [r3, #5]
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b18:	2390      	movs	r3, #144	; 0x90
 8002b1a:	05da      	lsls	r2, r3, #23
 8002b1c:	1c3b      	adds	r3, r7, #0
 8002b1e:	3320      	adds	r3, #32
 8002b20:	1c10      	adds	r0, r2, #0
 8002b22:	1c19      	adds	r1, r3, #0
 8002b24:	f003 fd6a 	bl	80065fc <GPIO_Init>


	//i2c init
	//I2C_DeInit(I2C1);
	I2C_InitTypeDef I2C_InitStruct;
	I2C_InitStruct.I2C_Ack = I2C_Ack_Enable;
 8002b28:	1d3b      	adds	r3, r7, #4
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	615a      	str	r2, [r3, #20]
	I2C_InitStruct.I2C_AnalogFilter = I2C_AnalogFilter_Enable;
 8002b2e:	1d3b      	adds	r3, r7, #4
 8002b30:	2200      	movs	r2, #0
 8002b32:	605a      	str	r2, [r3, #4]
	I2C_InitStruct.I2C_OwnAddress1 = 0xAB;
 8002b34:	1d3b      	adds	r3, r7, #4
 8002b36:	22ab      	movs	r2, #171	; 0xab
 8002b38:	611a      	str	r2, [r3, #16]
	I2C_InitStruct.I2C_DigitalFilter = 0;
 8002b3a:	1d3b      	adds	r3, r7, #4
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	609a      	str	r2, [r3, #8]
	I2C_InitStruct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8002b40:	1d3b      	adds	r3, r7, #4
 8002b42:	2200      	movs	r2, #0
 8002b44:	619a      	str	r2, [r3, #24]
	I2C_InitStruct.I2C_Mode = I2C_Mode_I2C;
 8002b46:	1d3b      	adds	r3, r7, #4
 8002b48:	2200      	movs	r2, #0
 8002b4a:	60da      	str	r2, [r3, #12]
	I2C_InitStruct.I2C_Timing = 0x0010020A; //should be 400kHz for the 8Mhz HSI
 8002b4c:	1d3b      	adds	r3, r7, #4
 8002b4e:	4a1e      	ldr	r2, [pc, #120]	; (8002bc8 <mma8653_init+0x140>)
 8002b50:	601a      	str	r2, [r3, #0]
	I2C_Init(I2C_MMA8653,&I2C_InitStruct);
 8002b52:	4a1e      	ldr	r2, [pc, #120]	; (8002bcc <mma8653_init+0x144>)
 8002b54:	1d3b      	adds	r3, r7, #4
 8002b56:	1c10      	adds	r0, r2, #0
 8002b58:	1c19      	adds	r1, r3, #0
 8002b5a:	f003 fc4d 	bl	80063f8 <I2C_Init>

	I2C_Cmd(I2C_MMA8653, ENABLE);
 8002b5e:	4b1b      	ldr	r3, [pc, #108]	; (8002bcc <mma8653_init+0x144>)
 8002b60:	1c18      	adds	r0, r3, #0
 8002b62:	2101      	movs	r1, #1
 8002b64:	f003 fcb0 	bl	80064c8 <I2C_Cmd>

	delay(50);
 8002b68:	2032      	movs	r0, #50	; 0x32
 8002b6a:	f000 fb5f 	bl	800322c <delay>

	if(I2C_RdReg(REG_WHO_AM_I,rxBuf, 1) != 0x5A)	//read the device ID to verify communication
 8002b6e:	4b18      	ldr	r3, [pc, #96]	; (8002bd0 <mma8653_init+0x148>)
 8002b70:	200d      	movs	r0, #13
 8002b72:	1c19      	adds	r1, r3, #0
 8002b74:	2201      	movs	r2, #1
 8002b76:	f7ff fe05 	bl	8002784 <I2C_RdReg>
 8002b7a:	1c03      	adds	r3, r0, #0
 8002b7c:	2b5a      	cmp	r3, #90	; 0x5a
 8002b7e:	d001      	beq.n	8002b84 <mma8653_init+0xfc>
	{
		return 1;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e01b      	b.n	8002bbc <mma8653_init+0x134>
	}

	//set to highres mode
	I2C_BitHandling(REG_CTRL_REG_2,1<<1,SET);
 8002b84:	202b      	movs	r0, #43	; 0x2b
 8002b86:	2102      	movs	r1, #2
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f7ff fef3 	bl	8002974 <I2C_BitHandling>

	//set the sensor as always active (disable auto sleep) <- default
	//set to active and 10 bit mode, DataRate to 12.5Hz
	I2C_BitHandling(REG_CTRL_REG_1,(1<<0 | 1<<3 | 1<<5),SET);
 8002b8e:	202a      	movs	r0, #42	; 0x2a
 8002b90:	2129      	movs	r1, #41	; 0x29
 8002b92:	2201      	movs	r2, #1
 8002b94:	f7ff feee 	bl	8002974 <I2C_BitHandling>

	//check, if the sensor is active
	if(I2C_RdReg(REG_SYSMOD,rxBuf,1) != 1)
 8002b98:	4b0d      	ldr	r3, [pc, #52]	; (8002bd0 <mma8653_init+0x148>)
 8002b9a:	200b      	movs	r0, #11
 8002b9c:	1c19      	adds	r1, r3, #0
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f7ff fdf0 	bl	8002784 <I2C_RdReg>
 8002ba4:	1c03      	adds	r3, r0, #0
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d004      	beq.n	8002bb4 <mma8653_init+0x12c>
	{
		isActive = 0;
 8002baa:	4b0a      	ldr	r3, [pc, #40]	; (8002bd4 <mma8653_init+0x14c>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	701a      	strb	r2, [r3, #0]
		return 2;
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	e003      	b.n	8002bbc <mma8653_init+0x134>
	}
	isActive = 1;
 8002bb4:	4b07      	ldr	r3, [pc, #28]	; (8002bd4 <mma8653_init+0x14c>)
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	701a      	strb	r2, [r3, #0]
	return 0;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	1c18      	adds	r0, r3, #0
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	b00a      	add	sp, #40	; 0x28
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	48001400 	.word	0x48001400
 8002bc8:	0010020a 	.word	0x0010020a
 8002bcc:	40005400 	.word	0x40005400
 8002bd0:	2000037c 	.word	0x2000037c
 8002bd4:	20000144 	.word	0x20000144

08002bd8 <mma8653_setDataWidth>:
	}
	return 0;
}

uint8_t mma8653_setDataWidth(uint8_t DataWidth)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	1c02      	adds	r2, r0, #0
 8002be0:	1dfb      	adds	r3, r7, #7
 8002be2:	701a      	strb	r2, [r3, #0]
	//deactivate the sensor
	if(mma8653_goStandby())
 8002be4:	f7ff ff04 	bl	80029f0 <mma8653_goStandby>
 8002be8:	1c03      	adds	r3, r0, #0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <mma8653_setDataWidth+0x1a>
	{
		return 1;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e021      	b.n	8002c36 <mma8653_setDataWidth+0x5e>
	}
	//clear bits in register to change
	I2C_BitHandling(REG_CTRL_REG_1, 0x3E, Bit_RESET);
 8002bf2:	202a      	movs	r0, #42	; 0x2a
 8002bf4:	213e      	movs	r1, #62	; 0x3e
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f7ff febc 	bl	8002974 <I2C_BitHandling>

	//decide what to do
	switch(DataWidth)
 8002bfc:	1dfb      	adds	r3, r7, #7
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d002      	beq.n	8002c0a <mma8653_setDataWidth+0x32>
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d006      	beq.n	8002c16 <mma8653_setDataWidth+0x3e>
 8002c08:	e00b      	b.n	8002c22 <mma8653_setDataWidth+0x4a>
	{
	case MMA8653_DATAWIDTH_8:
		//set F_READ and leave highest data rate
		I2C_BitHandling(REG_CTRL_REG_1, 1<<1, Bit_SET);
 8002c0a:	202a      	movs	r0, #42	; 0x2a
 8002c0c:	2102      	movs	r1, #2
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f7ff feb0 	bl	8002974 <I2C_BitHandling>
		break;
 8002c14:	e007      	b.n	8002c26 <mma8653_setDataWidth+0x4e>
	case MMA8653_DATAWIDTH_10:
		//limit output data rate to 12.5Hz and leave F_READ reset
		I2C_BitHandling(REG_CTRL_REG_1,(1<<3 | 1<<5), Bit_SET);
 8002c16:	202a      	movs	r0, #42	; 0x2a
 8002c18:	2128      	movs	r1, #40	; 0x28
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f7ff feaa 	bl	8002974 <I2C_BitHandling>
		break;
 8002c20:	e001      	b.n	8002c26 <mma8653_setDataWidth+0x4e>
	default:
		return 2;
 8002c22:	2302      	movs	r3, #2
 8002c24:	e007      	b.n	8002c36 <mma8653_setDataWidth+0x5e>
		break;
	}
	if(mma8653_goActive())
 8002c26:	f7ff ff09 	bl	8002a3c <mma8653_goActive>
 8002c2a:	1c03      	adds	r3, r0, #0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <mma8653_setDataWidth+0x5c>
	{
		return 3;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e000      	b.n	8002c36 <mma8653_setDataWidth+0x5e>
	}
	return 0;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	1c18      	adds	r0, r3, #0
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	b002      	add	sp, #8
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	46c0      	nop			; (mov r8, r8)

08002c40 <mma8653_read8>:

//read when in fast (8-bit) mode
//needs the fast-read mode enabled as well
//max. sample frequency (because of communication) ~ 7kHz
acc8_t mma8653_read8()
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
	uint8_t rxBuf[3];
	acc8_t acc_result;

	I2C_RdReg(REG_OUT_X_MSB,rxBuf,3);
 8002c46:	1c3b      	adds	r3, r7, #0
 8002c48:	3308      	adds	r3, #8
 8002c4a:	2001      	movs	r0, #1
 8002c4c:	1c19      	adds	r1, r3, #0
 8002c4e:	2203      	movs	r2, #3
 8002c50:	f7ff fd98 	bl	8002784 <I2C_RdReg>
	//rxbuf[0] contains full 8 bit of data.
	//the first bit defines the sign!
	acc_result.x = rxBuf[0];
 8002c54:	1c3b      	adds	r3, r7, #0
 8002c56:	3308      	adds	r3, #8
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	b2da      	uxtb	r2, r3
 8002c5c:	1d3b      	adds	r3, r7, #4
 8002c5e:	701a      	strb	r2, [r3, #0]
	acc_result.y = rxBuf[1];
 8002c60:	1c3b      	adds	r3, r7, #0
 8002c62:	3308      	adds	r3, #8
 8002c64:	785b      	ldrb	r3, [r3, #1]
 8002c66:	b2da      	uxtb	r2, r3
 8002c68:	1d3b      	adds	r3, r7, #4
 8002c6a:	705a      	strb	r2, [r3, #1]
	acc_result.z = rxBuf[2];
 8002c6c:	1c3b      	adds	r3, r7, #0
 8002c6e:	3308      	adds	r3, #8
 8002c70:	789b      	ldrb	r3, [r3, #2]
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	1d3b      	adds	r3, r7, #4
 8002c76:	709a      	strb	r2, [r3, #2]
	return acc_result;
 8002c78:	1c3b      	adds	r3, r7, #0
 8002c7a:	330c      	adds	r3, #12
 8002c7c:	1d3a      	adds	r2, r7, #4
 8002c7e:	8811      	ldrh	r1, [r2, #0]
 8002c80:	8019      	strh	r1, [r3, #0]
 8002c82:	7892      	ldrb	r2, [r2, #2]
 8002c84:	709a      	strb	r2, [r3, #2]
 8002c86:	1c3a      	adds	r2, r7, #0
 8002c88:	320c      	adds	r2, #12
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	7810      	ldrb	r0, [r2, #0]
 8002c8e:	21ff      	movs	r1, #255	; 0xff
 8002c90:	4001      	ands	r1, r0
 8002c92:	20ff      	movs	r0, #255	; 0xff
 8002c94:	4383      	bics	r3, r0
 8002c96:	430b      	orrs	r3, r1
 8002c98:	7850      	ldrb	r0, [r2, #1]
 8002c9a:	21ff      	movs	r1, #255	; 0xff
 8002c9c:	4001      	ands	r1, r0
 8002c9e:	0209      	lsls	r1, r1, #8
 8002ca0:	4806      	ldr	r0, [pc, #24]	; (8002cbc <mma8653_read8+0x7c>)
 8002ca2:	4003      	ands	r3, r0
 8002ca4:	430b      	orrs	r3, r1
 8002ca6:	7891      	ldrb	r1, [r2, #2]
 8002ca8:	22ff      	movs	r2, #255	; 0xff
 8002caa:	400a      	ands	r2, r1
 8002cac:	0412      	lsls	r2, r2, #16
 8002cae:	4904      	ldr	r1, [pc, #16]	; (8002cc0 <mma8653_read8+0x80>)
 8002cb0:	400b      	ands	r3, r1
 8002cb2:	4313      	orrs	r3, r2
}
 8002cb4:	1c18      	adds	r0, r3, #0
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	b004      	add	sp, #16
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	ffff00ff 	.word	0xffff00ff
 8002cc0:	ff00ffff 	.word	0xff00ffff

08002cc4 <apa102_init>:
colorVrgb leds[LED_CNT];

uint8_t spiSendData[12+4*LED_CNT];

void apa102_init()
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b092      	sub	sp, #72	; 0x48
 8002cc8:	af00      	add	r7, sp, #0

	//enable clock for periphery modules
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8002cca:	2380      	movs	r3, #128	; 0x80
 8002ccc:	029b      	lsls	r3, r3, #10
 8002cce:	1c18      	adds	r0, r3, #0
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	f003 fac7 	bl	8006264 <RCC_AHBPeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 8002cd6:	2380      	movs	r3, #128	; 0x80
 8002cd8:	015b      	lsls	r3, r3, #5
 8002cda:	1c18      	adds	r0, r3, #0
 8002cdc:	2101      	movs	r1, #1
 8002cde:	f003 fadf 	bl	80062a0 <RCC_APB2PeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1,ENABLE);
 8002ce2:	2001      	movs	r0, #1
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	f003 fabd 	bl	8006264 <RCC_AHBPeriphClockCmd>

	//gpio
	GPIO_InitTypeDef GPIO_InitStructure;
	//configure PINs PA7 and PA5 as AF out
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_7;
 8002cea:	1c3b      	adds	r3, r7, #0
 8002cec:	3340      	adds	r3, #64	; 0x40
 8002cee:	22a0      	movs	r2, #160	; 0xa0
 8002cf0:	601a      	str	r2, [r3, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002cf2:	1c3b      	adds	r3, r7, #0
 8002cf4:	3340      	adds	r3, #64	; 0x40
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	711a      	strb	r2, [r3, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002cfa:	1c3b      	adds	r3, r7, #0
 8002cfc:	3340      	adds	r3, #64	; 0x40
 8002cfe:	2200      	movs	r2, #0
 8002d00:	719a      	strb	r2, [r3, #6]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002d02:	1c3b      	adds	r3, r7, #0
 8002d04:	3340      	adds	r3, #64	; 0x40
 8002d06:	2203      	movs	r2, #3
 8002d08:	715a      	strb	r2, [r3, #5]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002d0a:	2390      	movs	r3, #144	; 0x90
 8002d0c:	05da      	lsls	r2, r3, #23
 8002d0e:	1c3b      	adds	r3, r7, #0
 8002d10:	3340      	adds	r3, #64	; 0x40
 8002d12:	1c10      	adds	r0, r2, #0
 8002d14:	1c19      	adds	r1, r3, #0
 8002d16:	f003 fc71 	bl	80065fc <GPIO_Init>

	//init the SPI module
	SPI_InitTypeDef SPI_InitStruct;
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
 8002d1a:	1c3b      	adds	r3, r7, #0
 8002d1c:	332c      	adds	r3, #44	; 0x2c
 8002d1e:	2210      	movs	r2, #16
 8002d20:	819a      	strh	r2, [r3, #12]
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_2Edge;
 8002d22:	1c3b      	adds	r3, r7, #0
 8002d24:	332c      	adds	r3, #44	; 0x2c
 8002d26:	2201      	movs	r2, #1
 8002d28:	811a      	strh	r2, [r3, #8]
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_High;
 8002d2a:	1c3b      	adds	r3, r7, #0
 8002d2c:	332c      	adds	r3, #44	; 0x2c
 8002d2e:	2202      	movs	r2, #2
 8002d30:	80da      	strh	r2, [r3, #6]
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
 8002d32:	1c3b      	adds	r3, r7, #0
 8002d34:	332c      	adds	r3, #44	; 0x2c
 8002d36:	22e0      	movs	r2, #224	; 0xe0
 8002d38:	00d2      	lsls	r2, r2, #3
 8002d3a:	809a      	strh	r2, [r3, #4]
	SPI_InitStruct.SPI_Direction = SPI_Direction_Tx;
 8002d3c:	1c3b      	adds	r3, r7, #0
 8002d3e:	332c      	adds	r3, #44	; 0x2c
 8002d40:	2280      	movs	r2, #128	; 0x80
 8002d42:	01d2      	lsls	r2, r2, #7
 8002d44:	801a      	strh	r2, [r3, #0]
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
 8002d46:	1c3b      	adds	r3, r7, #0
 8002d48:	332c      	adds	r3, #44	; 0x2c
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	81da      	strh	r2, [r3, #14]
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
 8002d4e:	1c3b      	adds	r3, r7, #0
 8002d50:	332c      	adds	r3, #44	; 0x2c
 8002d52:	2282      	movs	r2, #130	; 0x82
 8002d54:	0052      	lsls	r2, r2, #1
 8002d56:	805a      	strh	r2, [r3, #2]
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 8002d58:	1c3b      	adds	r3, r7, #0
 8002d5a:	332c      	adds	r3, #44	; 0x2c
 8002d5c:	2280      	movs	r2, #128	; 0x80
 8002d5e:	0092      	lsls	r2, r2, #2
 8002d60:	815a      	strh	r2, [r3, #10]
	SPI_Init(SPI1, &SPI_InitStruct);
 8002d62:	4a1e      	ldr	r2, [pc, #120]	; (8002ddc <apa102_init+0x118>)
 8002d64:	1c3b      	adds	r3, r7, #0
 8002d66:	332c      	adds	r3, #44	; 0x2c
 8002d68:	1c10      	adds	r0, r2, #0
 8002d6a:	1c19      	adds	r1, r3, #0
 8002d6c:	f003 f99e 	bl	80060ac <SPI_Init>

	SPI_I2S_DMACmd(SPI1,SPI_I2S_DMAReq_Tx,ENABLE);
 8002d70:	4b1a      	ldr	r3, [pc, #104]	; (8002ddc <apa102_init+0x118>)
 8002d72:	1c18      	adds	r0, r3, #0
 8002d74:	2102      	movs	r1, #2
 8002d76:	2201      	movs	r2, #1
 8002d78:	f003 fa3a 	bl	80061f0 <SPI_I2S_DMACmd>
	//start the SPI module:
	SPI_Cmd(SPI1,ENABLE);
 8002d7c:	4b17      	ldr	r3, [pc, #92]	; (8002ddc <apa102_init+0x118>)
 8002d7e:	1c18      	adds	r0, r3, #0
 8002d80:	2101      	movs	r1, #1
 8002d82:	f003 fa15 	bl	80061b0 <SPI_Cmd>

	DMA_InitTypeDef DMA_InitStruct;
	DMA_InitStruct.DMA_DIR = DMA_DIR_PeripheralDST;
 8002d86:	1c3b      	adds	r3, r7, #0
 8002d88:	2210      	movs	r2, #16
 8002d8a:	609a      	str	r2, [r3, #8]
	DMA_InitStruct.DMA_M2M = DMA_M2M_Disable;
 8002d8c:	1c3b      	adds	r3, r7, #0
 8002d8e:	2200      	movs	r2, #0
 8002d90:	629a      	str	r2, [r3, #40]	; 0x28
	DMA_InitStruct.DMA_MemoryBaseAddr = (uint32_t)spiSendData;
 8002d92:	4a13      	ldr	r2, [pc, #76]	; (8002de0 <apa102_init+0x11c>)
 8002d94:	1c3b      	adds	r3, r7, #0
 8002d96:	605a      	str	r2, [r3, #4]
	DMA_InitStruct.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8002d98:	1c3b      	adds	r3, r7, #0
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	61da      	str	r2, [r3, #28]
	DMA_InitStruct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8002d9e:	1c3b      	adds	r3, r7, #0
 8002da0:	2280      	movs	r2, #128	; 0x80
 8002da2:	615a      	str	r2, [r3, #20]
	DMA_InitStruct.DMA_Mode = DMA_Mode_Normal;
 8002da4:	1c3b      	adds	r3, r7, #0
 8002da6:	2200      	movs	r2, #0
 8002da8:	621a      	str	r2, [r3, #32]
	DMA_InitStruct.DMA_PeripheralBaseAddr = (uint32_t)&(SPI1->DR);
 8002daa:	1c3b      	adds	r3, r7, #0
 8002dac:	4a0d      	ldr	r2, [pc, #52]	; (8002de4 <apa102_init+0x120>)
 8002dae:	601a      	str	r2, [r3, #0]
	DMA_InitStruct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8002db0:	1c3b      	adds	r3, r7, #0
 8002db2:	2200      	movs	r2, #0
 8002db4:	619a      	str	r2, [r3, #24]
	DMA_InitStruct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8002db6:	1c3b      	adds	r3, r7, #0
 8002db8:	2200      	movs	r2, #0
 8002dba:	611a      	str	r2, [r3, #16]
	DMA_InitStruct.DMA_Priority = DMA_Priority_High;
 8002dbc:	1c3b      	adds	r3, r7, #0
 8002dbe:	2280      	movs	r2, #128	; 0x80
 8002dc0:	0192      	lsls	r2, r2, #6
 8002dc2:	625a      	str	r2, [r3, #36]	; 0x24
	DMA_Init(DMA1_Channel3, &DMA_InitStruct);
 8002dc4:	4a08      	ldr	r2, [pc, #32]	; (8002de8 <apa102_init+0x124>)
 8002dc6:	1c3b      	adds	r3, r7, #0
 8002dc8:	1c10      	adds	r0, r2, #0
 8002dca:	1c19      	adds	r1, r3, #0
 8002dcc:	f003 fd18 	bl	8006800 <DMA_Init>

	apa102_allOff();
 8002dd0:	f000 f90c 	bl	8002fec <apa102_allOff>

}
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	b012      	add	sp, #72	; 0x48
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	46c0      	nop			; (mov r8, r8)
 8002ddc:	40013000 	.word	0x40013000
 8002de0:	2000040c 	.word	0x2000040c
 8002de4:	4001300c 	.word	0x4001300c
 8002de8:	40020030 	.word	0x40020030

08002dec <updateStripe>:


void updateStripe()
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
	uint8_t ledIdx = 0;
 8002df2:	1dfb      	adds	r3, r7, #7
 8002df4:	2200      	movs	r2, #0
 8002df6:	701a      	strb	r2, [r3, #0]
	uint8_t byteIdx = 0;
 8002df8:	1dbb      	adds	r3, r7, #6
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	701a      	strb	r2, [r3, #0]
	DMA_Cmd(DMA1_Channel3, DISABLE);
 8002dfe:	4b48      	ldr	r3, [pc, #288]	; (8002f20 <updateStripe+0x134>)
 8002e00:	1c18      	adds	r0, r3, #0
 8002e02:	2100      	movs	r1, #0
 8002e04:	f003 fd38 	bl	8006878 <DMA_Cmd>
	//start frame
	for(uint8_t i = 0; i < 4; i++)
 8002e08:	1d7b      	adds	r3, r7, #5
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	701a      	strb	r2, [r3, #0]
 8002e0e:	e00e      	b.n	8002e2e <updateStripe+0x42>
	{
		spiSendData[byteIdx] = 0x00;
 8002e10:	1dbb      	adds	r3, r7, #6
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	4a43      	ldr	r2, [pc, #268]	; (8002f24 <updateStripe+0x138>)
 8002e16:	2100      	movs	r1, #0
 8002e18:	54d1      	strb	r1, [r2, r3]
		byteIdx++;
 8002e1a:	1dbb      	adds	r3, r7, #6
 8002e1c:	781a      	ldrb	r2, [r3, #0]
 8002e1e:	1dbb      	adds	r3, r7, #6
 8002e20:	3201      	adds	r2, #1
 8002e22:	701a      	strb	r2, [r3, #0]
{
	uint8_t ledIdx = 0;
	uint8_t byteIdx = 0;
	DMA_Cmd(DMA1_Channel3, DISABLE);
	//start frame
	for(uint8_t i = 0; i < 4; i++)
 8002e24:	1d7b      	adds	r3, r7, #5
 8002e26:	781a      	ldrb	r2, [r3, #0]
 8002e28:	1d7b      	adds	r3, r7, #5
 8002e2a:	3201      	adds	r2, #1
 8002e2c:	701a      	strb	r2, [r3, #0]
 8002e2e:	1d7b      	adds	r3, r7, #5
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	2b03      	cmp	r3, #3
 8002e34:	d9ec      	bls.n	8002e10 <updateStripe+0x24>
	{
		spiSendData[byteIdx] = 0x00;
		byteIdx++;
	}

	for(uint8_t i = 0; i < LED_CNT; i++)
 8002e36:	1d3b      	adds	r3, r7, #4
 8002e38:	2200      	movs	r2, #0
 8002e3a:	701a      	strb	r2, [r3, #0]
 8002e3c:	e048      	b.n	8002ed0 <updateStripe+0xe4>
	{
		//led frame
		spiSendData[byteIdx] = 0xE0 |(leds[ledIdx].global & 0x1F); //global
 8002e3e:	1dbb      	adds	r3, r7, #6
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	1dfa      	adds	r2, r7, #7
 8002e44:	7811      	ldrb	r1, [r2, #0]
 8002e46:	4a38      	ldr	r2, [pc, #224]	; (8002f28 <updateStripe+0x13c>)
 8002e48:	0089      	lsls	r1, r1, #2
 8002e4a:	5c8a      	ldrb	r2, [r1, r2]
 8002e4c:	2120      	movs	r1, #32
 8002e4e:	4249      	negs	r1, r1
 8002e50:	430a      	orrs	r2, r1
 8002e52:	b2d1      	uxtb	r1, r2
 8002e54:	4a33      	ldr	r2, [pc, #204]	; (8002f24 <updateStripe+0x138>)
 8002e56:	54d1      	strb	r1, [r2, r3]
		byteIdx++;
 8002e58:	1dbb      	adds	r3, r7, #6
 8002e5a:	781a      	ldrb	r2, [r3, #0]
 8002e5c:	1dbb      	adds	r3, r7, #6
 8002e5e:	3201      	adds	r2, #1
 8002e60:	701a      	strb	r2, [r3, #0]
		spiSendData[byteIdx] = leds[ledIdx].blue;
 8002e62:	1dbb      	adds	r3, r7, #6
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	1dfa      	adds	r2, r7, #7
 8002e68:	7812      	ldrb	r2, [r2, #0]
 8002e6a:	492f      	ldr	r1, [pc, #188]	; (8002f28 <updateStripe+0x13c>)
 8002e6c:	0092      	lsls	r2, r2, #2
 8002e6e:	188a      	adds	r2, r1, r2
 8002e70:	7851      	ldrb	r1, [r2, #1]
 8002e72:	4a2c      	ldr	r2, [pc, #176]	; (8002f24 <updateStripe+0x138>)
 8002e74:	54d1      	strb	r1, [r2, r3]
		byteIdx++;
 8002e76:	1dbb      	adds	r3, r7, #6
 8002e78:	781a      	ldrb	r2, [r3, #0]
 8002e7a:	1dbb      	adds	r3, r7, #6
 8002e7c:	3201      	adds	r2, #1
 8002e7e:	701a      	strb	r2, [r3, #0]
		spiSendData[byteIdx] = leds[ledIdx].green;
 8002e80:	1dbb      	adds	r3, r7, #6
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	1dfa      	adds	r2, r7, #7
 8002e86:	7812      	ldrb	r2, [r2, #0]
 8002e88:	4927      	ldr	r1, [pc, #156]	; (8002f28 <updateStripe+0x13c>)
 8002e8a:	0092      	lsls	r2, r2, #2
 8002e8c:	188a      	adds	r2, r1, r2
 8002e8e:	7891      	ldrb	r1, [r2, #2]
 8002e90:	4a24      	ldr	r2, [pc, #144]	; (8002f24 <updateStripe+0x138>)
 8002e92:	54d1      	strb	r1, [r2, r3]
		byteIdx++;
 8002e94:	1dbb      	adds	r3, r7, #6
 8002e96:	781a      	ldrb	r2, [r3, #0]
 8002e98:	1dbb      	adds	r3, r7, #6
 8002e9a:	3201      	adds	r2, #1
 8002e9c:	701a      	strb	r2, [r3, #0]
		spiSendData[byteIdx] = leds[ledIdx].red;
 8002e9e:	1dbb      	adds	r3, r7, #6
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	1dfa      	adds	r2, r7, #7
 8002ea4:	7812      	ldrb	r2, [r2, #0]
 8002ea6:	4920      	ldr	r1, [pc, #128]	; (8002f28 <updateStripe+0x13c>)
 8002ea8:	0092      	lsls	r2, r2, #2
 8002eaa:	188a      	adds	r2, r1, r2
 8002eac:	78d1      	ldrb	r1, [r2, #3]
 8002eae:	4a1d      	ldr	r2, [pc, #116]	; (8002f24 <updateStripe+0x138>)
 8002eb0:	54d1      	strb	r1, [r2, r3]
		byteIdx++;
 8002eb2:	1dbb      	adds	r3, r7, #6
 8002eb4:	781a      	ldrb	r2, [r3, #0]
 8002eb6:	1dbb      	adds	r3, r7, #6
 8002eb8:	3201      	adds	r2, #1
 8002eba:	701a      	strb	r2, [r3, #0]
		ledIdx++;
 8002ebc:	1dfb      	adds	r3, r7, #7
 8002ebe:	781a      	ldrb	r2, [r3, #0]
 8002ec0:	1dfb      	adds	r3, r7, #7
 8002ec2:	3201      	adds	r2, #1
 8002ec4:	701a      	strb	r2, [r3, #0]
	{
		spiSendData[byteIdx] = 0x00;
		byteIdx++;
	}

	for(uint8_t i = 0; i < LED_CNT; i++)
 8002ec6:	1d3b      	adds	r3, r7, #4
 8002ec8:	781a      	ldrb	r2, [r3, #0]
 8002eca:	1d3b      	adds	r3, r7, #4
 8002ecc:	3201      	adds	r2, #1
 8002ece:	701a      	strb	r2, [r3, #0]
 8002ed0:	1d3b      	adds	r3, r7, #4
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	2b0f      	cmp	r3, #15
 8002ed6:	d9b2      	bls.n	8002e3e <updateStripe+0x52>
		ledIdx++;
	}
	//end frame
	//this is not the Frame as stated in the Datasheet! our LEDs (SK9822) seem to be a bit different from the original APA102 here!
	//but it works this way...
	for(uint8_t i = 0; i < 8 ; i++)
 8002ed8:	1cfb      	adds	r3, r7, #3
 8002eda:	2200      	movs	r2, #0
 8002edc:	701a      	strb	r2, [r3, #0]
 8002ede:	e00e      	b.n	8002efe <updateStripe+0x112>
	{
		spiSendData[byteIdx] = 0x00;
 8002ee0:	1dbb      	adds	r3, r7, #6
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	4a0f      	ldr	r2, [pc, #60]	; (8002f24 <updateStripe+0x138>)
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	54d1      	strb	r1, [r2, r3]
		byteIdx++;
 8002eea:	1dbb      	adds	r3, r7, #6
 8002eec:	781a      	ldrb	r2, [r3, #0]
 8002eee:	1dbb      	adds	r3, r7, #6
 8002ef0:	3201      	adds	r2, #1
 8002ef2:	701a      	strb	r2, [r3, #0]
		ledIdx++;
	}
	//end frame
	//this is not the Frame as stated in the Datasheet! our LEDs (SK9822) seem to be a bit different from the original APA102 here!
	//but it works this way...
	for(uint8_t i = 0; i < 8 ; i++)
 8002ef4:	1cfb      	adds	r3, r7, #3
 8002ef6:	781a      	ldrb	r2, [r3, #0]
 8002ef8:	1cfb      	adds	r3, r7, #3
 8002efa:	3201      	adds	r2, #1
 8002efc:	701a      	strb	r2, [r3, #0]
 8002efe:	1cfb      	adds	r3, r7, #3
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	2b07      	cmp	r3, #7
 8002f04:	d9ec      	bls.n	8002ee0 <updateStripe+0xf4>
		byteIdx++;
	}


	//now the DMA has to send the spiSendData to the SPI tx fifo :)
	DMA_SetCurrDataCounter(DMA1_Channel3,12+4*LED_CNT);
 8002f06:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <updateStripe+0x134>)
 8002f08:	1c18      	adds	r0, r3, #0
 8002f0a:	214c      	movs	r1, #76	; 0x4c
 8002f0c:	f003 fcd2 	bl	80068b4 <DMA_SetCurrDataCounter>
	DMA_Cmd(DMA1_Channel3, ENABLE);
 8002f10:	4b03      	ldr	r3, [pc, #12]	; (8002f20 <updateStripe+0x134>)
 8002f12:	1c18      	adds	r0, r3, #0
 8002f14:	2101      	movs	r1, #1
 8002f16:	f003 fcaf 	bl	8006878 <DMA_Cmd>
}
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	b002      	add	sp, #8
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40020030 	.word	0x40020030
 8002f24:	2000040c 	.word	0x2000040c
 8002f28:	200003cc 	.word	0x200003cc

08002f2c <apa102_setPattern>:


//so far only one global color

void apa102_setPattern(uint16_t mask, uint8_t global)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	1c0a      	adds	r2, r1, #0
 8002f34:	1dbb      	adds	r3, r7, #6
 8002f36:	1c01      	adds	r1, r0, #0
 8002f38:	8019      	strh	r1, [r3, #0]
 8002f3a:	1d7b      	adds	r3, r7, #5
 8002f3c:	701a      	strb	r2, [r3, #0]
	//the global-value in the Led-frame is only 5 bit (max.31)!
	if(global > 0x1F)
 8002f3e:	1d7b      	adds	r3, r7, #5
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b1f      	cmp	r3, #31
 8002f44:	d902      	bls.n	8002f4c <apa102_setPattern+0x20>
	{
		global = 0x1F;
 8002f46:	1d7b      	adds	r3, r7, #5
 8002f48:	221f      	movs	r2, #31
 8002f4a:	701a      	strb	r2, [r3, #0]
	}
	globalColor.global = global;
 8002f4c:	4b25      	ldr	r3, [pc, #148]	; (8002fe4 <apa102_setPattern+0xb8>)
 8002f4e:	1d7a      	adds	r2, r7, #5
 8002f50:	7812      	ldrb	r2, [r2, #0]
 8002f52:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i< 16; i++)
 8002f54:	1c3b      	adds	r3, r7, #0
 8002f56:	330e      	adds	r3, #14
 8002f58:	2200      	movs	r2, #0
 8002f5a:	801a      	strh	r2, [r3, #0]
 8002f5c:	e037      	b.n	8002fce <apa102_setPattern+0xa2>
	{
		if(mask & (1<<i))
 8002f5e:	1dbb      	adds	r3, r7, #6
 8002f60:	881a      	ldrh	r2, [r3, #0]
 8002f62:	1c3b      	adds	r3, r7, #0
 8002f64:	330e      	adds	r3, #14
 8002f66:	881b      	ldrh	r3, [r3, #0]
 8002f68:	411a      	asrs	r2, r3
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	d008      	beq.n	8002f82 <apa102_setPattern+0x56>
		{	//led shall be active
			leds[i] = globalColor;
 8002f70:	1c3b      	adds	r3, r7, #0
 8002f72:	330e      	adds	r3, #14
 8002f74:	881b      	ldrh	r3, [r3, #0]
 8002f76:	4a1c      	ldr	r2, [pc, #112]	; (8002fe8 <apa102_setPattern+0xbc>)
 8002f78:	0099      	lsls	r1, r3, #2
 8002f7a:	4b1a      	ldr	r3, [pc, #104]	; (8002fe4 <apa102_setPattern+0xb8>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	508b      	str	r3, [r1, r2]
 8002f80:	e01e      	b.n	8002fc0 <apa102_setPattern+0x94>
		}
		else
		{	//led shall be off
			leds[i].global = 0;
 8002f82:	1c3b      	adds	r3, r7, #0
 8002f84:	330e      	adds	r3, #14
 8002f86:	881a      	ldrh	r2, [r3, #0]
 8002f88:	4b17      	ldr	r3, [pc, #92]	; (8002fe8 <apa102_setPattern+0xbc>)
 8002f8a:	0092      	lsls	r2, r2, #2
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	54d1      	strb	r1, [r2, r3]
			leds[i].blue = 0;
 8002f90:	1c3b      	adds	r3, r7, #0
 8002f92:	330e      	adds	r3, #14
 8002f94:	881b      	ldrh	r3, [r3, #0]
 8002f96:	4a14      	ldr	r2, [pc, #80]	; (8002fe8 <apa102_setPattern+0xbc>)
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	18d3      	adds	r3, r2, r3
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	705a      	strb	r2, [r3, #1]
			leds[i].green = 0;
 8002fa0:	1c3b      	adds	r3, r7, #0
 8002fa2:	330e      	adds	r3, #14
 8002fa4:	881b      	ldrh	r3, [r3, #0]
 8002fa6:	4a10      	ldr	r2, [pc, #64]	; (8002fe8 <apa102_setPattern+0xbc>)
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	18d3      	adds	r3, r2, r3
 8002fac:	2200      	movs	r2, #0
 8002fae:	709a      	strb	r2, [r3, #2]
			leds[i].red = 0;
 8002fb0:	1c3b      	adds	r3, r7, #0
 8002fb2:	330e      	adds	r3, #14
 8002fb4:	881b      	ldrh	r3, [r3, #0]
 8002fb6:	4a0c      	ldr	r2, [pc, #48]	; (8002fe8 <apa102_setPattern+0xbc>)
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	18d3      	adds	r3, r2, r3
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	70da      	strb	r2, [r3, #3]
	if(global > 0x1F)
	{
		global = 0x1F;
	}
	globalColor.global = global;
	for(uint16_t i = 0; i< 16; i++)
 8002fc0:	1c3b      	adds	r3, r7, #0
 8002fc2:	330e      	adds	r3, #14
 8002fc4:	881a      	ldrh	r2, [r3, #0]
 8002fc6:	1c3b      	adds	r3, r7, #0
 8002fc8:	330e      	adds	r3, #14
 8002fca:	3201      	adds	r2, #1
 8002fcc:	801a      	strh	r2, [r3, #0]
 8002fce:	1c3b      	adds	r3, r7, #0
 8002fd0:	330e      	adds	r3, #14
 8002fd2:	881b      	ldrh	r3, [r3, #0]
 8002fd4:	2b0f      	cmp	r3, #15
 8002fd6:	d9c2      	bls.n	8002f5e <apa102_setPattern+0x32>
			leds[i].blue = 0;
			leds[i].green = 0;
			leds[i].red = 0;
		}
	}
	updateStripe();
 8002fd8:	f7ff ff08 	bl	8002dec <updateStripe>
}
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	b004      	add	sp, #16
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	46c0      	nop			; (mov r8, r8)
 8002fe4:	200003c8 	.word	0x200003c8
 8002fe8:	200003cc 	.word	0x200003cc

08002fec <apa102_allOff>:
{
	apa102_setPattern(1<<index,global);
}

void apa102_allOff()
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
	for(uint16_t i = 0; i< 16; i++)
 8002ff2:	1dbb      	adds	r3, r7, #6
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	801a      	strh	r2, [r3, #0]
 8002ff8:	e01f      	b.n	800303a <apa102_allOff+0x4e>
	{

		leds[i].global = 0;
 8002ffa:	1dbb      	adds	r3, r7, #6
 8002ffc:	881a      	ldrh	r2, [r3, #0]
 8002ffe:	4b13      	ldr	r3, [pc, #76]	; (800304c <apa102_allOff+0x60>)
 8003000:	0092      	lsls	r2, r2, #2
 8003002:	2100      	movs	r1, #0
 8003004:	54d1      	strb	r1, [r2, r3]
		leds[i].blue = 0;
 8003006:	1dbb      	adds	r3, r7, #6
 8003008:	881b      	ldrh	r3, [r3, #0]
 800300a:	4a10      	ldr	r2, [pc, #64]	; (800304c <apa102_allOff+0x60>)
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	18d3      	adds	r3, r2, r3
 8003010:	2200      	movs	r2, #0
 8003012:	705a      	strb	r2, [r3, #1]
		leds[i].green = 0;
 8003014:	1dbb      	adds	r3, r7, #6
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	4a0c      	ldr	r2, [pc, #48]	; (800304c <apa102_allOff+0x60>)
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	18d3      	adds	r3, r2, r3
 800301e:	2200      	movs	r2, #0
 8003020:	709a      	strb	r2, [r3, #2]
		leds[i].red = 0;
 8003022:	1dbb      	adds	r3, r7, #6
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	4a09      	ldr	r2, [pc, #36]	; (800304c <apa102_allOff+0x60>)
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	18d3      	adds	r3, r2, r3
 800302c:	2200      	movs	r2, #0
 800302e:	70da      	strb	r2, [r3, #3]
	apa102_setPattern(1<<index,global);
}

void apa102_allOff()
{
	for(uint16_t i = 0; i< 16; i++)
 8003030:	1dbb      	adds	r3, r7, #6
 8003032:	881a      	ldrh	r2, [r3, #0]
 8003034:	1dbb      	adds	r3, r7, #6
 8003036:	3201      	adds	r2, #1
 8003038:	801a      	strh	r2, [r3, #0]
 800303a:	1dbb      	adds	r3, r7, #6
 800303c:	881b      	ldrh	r3, [r3, #0]
 800303e:	2b0f      	cmp	r3, #15
 8003040:	d9db      	bls.n	8002ffa <apa102_allOff+0xe>
		leds[i].blue = 0;
		leds[i].green = 0;
		leds[i].red = 0;

	}
	updateStripe();
 8003042:	f7ff fed3 	bl	8002dec <updateStripe>
}
 8003046:	46bd      	mov	sp, r7
 8003048:	b002      	add	sp, #8
 800304a:	bd80      	pop	{r7, pc}
 800304c:	200003cc 	.word	0x200003cc

08003050 <dbgLED_init>:
#include "dbgLED.h"
#include "stm32f0xx_gpio.h"
#include "stm32f0xx_rcc.h"

void dbgLED_init()
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
#ifdef	DBG_LED_ENABLED
	//clock
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8003056:	2380      	movs	r3, #128	; 0x80
 8003058:	029b      	lsls	r3, r3, #10
 800305a:	1c18      	adds	r0, r3, #0
 800305c:	2101      	movs	r1, #1
 800305e:	f003 f901 	bl	8006264 <RCC_AHBPeriphClockCmd>

	//gpio
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
 8003062:	1c3b      	adds	r3, r7, #0
 8003064:	2202      	movs	r2, #2
 8003066:	601a      	str	r2, [r3, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8003068:	1c3b      	adds	r3, r7, #0
 800306a:	2201      	movs	r2, #1
 800306c:	711a      	strb	r2, [r3, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800306e:	1c3b      	adds	r3, r7, #0
 8003070:	2200      	movs	r2, #0
 8003072:	719a      	strb	r2, [r3, #6]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003074:	1c3b      	adds	r3, r7, #0
 8003076:	2203      	movs	r2, #3
 8003078:	715a      	strb	r2, [r3, #5]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 800307a:	2390      	movs	r3, #144	; 0x90
 800307c:	05da      	lsls	r2, r3, #23
 800307e:	1c3b      	adds	r3, r7, #0
 8003080:	1c10      	adds	r0, r2, #0
 8003082:	1c19      	adds	r1, r3, #0
 8003084:	f003 faba 	bl	80065fc <GPIO_Init>
#endif
}
 8003088:	46bd      	mov	sp, r7
 800308a:	b002      	add	sp, #8
 800308c:	bd80      	pop	{r7, pc}
 800308e:	46c0      	nop			; (mov r8, r8)

08003090 <dbgLED_on>:

void dbgLED_on()
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
#ifdef	DBG_LED_ENABLED
	GPIO_WriteBit(GPIOA,GPIO_Pin_1,Bit_SET);
 8003094:	2390      	movs	r3, #144	; 0x90
 8003096:	05db      	lsls	r3, r3, #23
 8003098:	1c18      	adds	r0, r3, #0
 800309a:	2102      	movs	r1, #2
 800309c:	2201      	movs	r2, #1
 800309e:	f003 fb49 	bl	8006734 <GPIO_WriteBit>
#endif
}
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	46c0      	nop			; (mov r8, r8)

080030a8 <dbgLED_off>:
void dbgLED_off()
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
#ifdef	DBG_LED_ENABLED
	GPIO_WriteBit(GPIOA,GPIO_Pin_1,Bit_RESET);
 80030ac:	2390      	movs	r3, #144	; 0x90
 80030ae:	05db      	lsls	r3, r3, #23
 80030b0:	1c18      	adds	r0, r3, #0
 80030b2:	2102      	movs	r1, #2
 80030b4:	2200      	movs	r2, #0
 80030b6:	f003 fb3d 	bl	8006734 <GPIO_WriteBit>
#endif
}
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	46c0      	nop			; (mov r8, r8)

080030c0 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030c0:	b5b0      	push	{r4, r5, r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	1c02      	adds	r2, r0, #0
 80030c8:	6039      	str	r1, [r7, #0]
 80030ca:	1dfb      	adds	r3, r7, #7
 80030cc:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
 80030ce:	1dfb      	adds	r3, r7, #7
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	2b7f      	cmp	r3, #127	; 0x7f
 80030d4:	d932      	bls.n	800313c <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 80030d6:	4930      	ldr	r1, [pc, #192]	; (8003198 <NVIC_SetPriority+0xd8>)
 80030d8:	1dfb      	adds	r3, r7, #7
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	1c1a      	adds	r2, r3, #0
 80030de:	230f      	movs	r3, #15
 80030e0:	4013      	ands	r3, r2
 80030e2:	3b08      	subs	r3, #8
 80030e4:	0898      	lsrs	r0, r3, #2
 80030e6:	4a2c      	ldr	r2, [pc, #176]	; (8003198 <NVIC_SetPriority+0xd8>)
 80030e8:	1dfb      	adds	r3, r7, #7
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	1c1c      	adds	r4, r3, #0
 80030ee:	230f      	movs	r3, #15
 80030f0:	4023      	ands	r3, r4
 80030f2:	3b08      	subs	r3, #8
 80030f4:	089b      	lsrs	r3, r3, #2
 80030f6:	3306      	adds	r3, #6
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	18d3      	adds	r3, r2, r3
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	1dfa      	adds	r2, r7, #7
 8003100:	7812      	ldrb	r2, [r2, #0]
 8003102:	1c14      	adds	r4, r2, #0
 8003104:	2203      	movs	r2, #3
 8003106:	4022      	ands	r2, r4
 8003108:	00d2      	lsls	r2, r2, #3
 800310a:	24ff      	movs	r4, #255	; 0xff
 800310c:	1c25      	adds	r5, r4, #0
 800310e:	4095      	lsls	r5, r2
 8003110:	1c2a      	adds	r2, r5, #0
 8003112:	43d2      	mvns	r2, r2
 8003114:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	019c      	lsls	r4, r3, #6
 800311a:	23ff      	movs	r3, #255	; 0xff
 800311c:	401c      	ands	r4, r3
 800311e:	1dfb      	adds	r3, r7, #7
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	1c1d      	adds	r5, r3, #0
 8003124:	2303      	movs	r3, #3
 8003126:	402b      	ands	r3, r5
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	1c25      	adds	r5, r4, #0
 800312c:	409d      	lsls	r5, r3
 800312e:	1c2b      	adds	r3, r5, #0
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8003130:	431a      	orrs	r2, r3
 8003132:	1d83      	adds	r3, r0, #6
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	18cb      	adds	r3, r1, r3
 8003138:	605a      	str	r2, [r3, #4]
 800313a:	e029      	b.n	8003190 <NVIC_SetPriority+0xd0>
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 800313c:	4b17      	ldr	r3, [pc, #92]	; (800319c <NVIC_SetPriority+0xdc>)
 800313e:	1dfa      	adds	r2, r7, #7
 8003140:	7812      	ldrb	r2, [r2, #0]
 8003142:	b252      	sxtb	r2, r2
 8003144:	0892      	lsrs	r2, r2, #2
 8003146:	4915      	ldr	r1, [pc, #84]	; (800319c <NVIC_SetPriority+0xdc>)
 8003148:	1df8      	adds	r0, r7, #7
 800314a:	7800      	ldrb	r0, [r0, #0]
 800314c:	b240      	sxtb	r0, r0
 800314e:	0880      	lsrs	r0, r0, #2
 8003150:	30c0      	adds	r0, #192	; 0xc0
 8003152:	0080      	lsls	r0, r0, #2
 8003154:	5841      	ldr	r1, [r0, r1]
 8003156:	1df8      	adds	r0, r7, #7
 8003158:	7800      	ldrb	r0, [r0, #0]
 800315a:	1c04      	adds	r4, r0, #0
 800315c:	2003      	movs	r0, #3
 800315e:	4020      	ands	r0, r4
 8003160:	00c0      	lsls	r0, r0, #3
 8003162:	24ff      	movs	r4, #255	; 0xff
 8003164:	1c25      	adds	r5, r4, #0
 8003166:	4085      	lsls	r5, r0
 8003168:	1c28      	adds	r0, r5, #0
 800316a:	43c0      	mvns	r0, r0
 800316c:	4008      	ands	r0, r1
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 800316e:	6839      	ldr	r1, [r7, #0]
 8003170:	018c      	lsls	r4, r1, #6
 8003172:	21ff      	movs	r1, #255	; 0xff
 8003174:	400c      	ands	r4, r1
 8003176:	1df9      	adds	r1, r7, #7
 8003178:	7809      	ldrb	r1, [r1, #0]
 800317a:	1c0d      	adds	r5, r1, #0
 800317c:	2103      	movs	r1, #3
 800317e:	4029      	ands	r1, r5
 8003180:	00c9      	lsls	r1, r1, #3
 8003182:	1c25      	adds	r5, r4, #0
 8003184:	408d      	lsls	r5, r1
 8003186:	1c29      	adds	r1, r5, #0
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8003188:	4301      	orrs	r1, r0
 800318a:	32c0      	adds	r2, #192	; 0xc0
 800318c:	0092      	lsls	r2, r2, #2
 800318e:	50d1      	str	r1, [r2, r3]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
 8003190:	46bd      	mov	sp, r7
 8003192:	b002      	add	sp, #8
 8003194:	bdb0      	pop	{r4, r5, r7, pc}
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	e000ed00 	.word	0xe000ed00
 800319c:	e000e100 	.word	0xe000e100

080031a0 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	1e5a      	subs	r2, r3, #1
 80031ac:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <SysTick_Config+0x40>)
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d901      	bls.n	80031b6 <SysTick_Config+0x16>
 80031b2:	2301      	movs	r3, #1
 80031b4:	e010      	b.n	80031d8 <SysTick_Config+0x38>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 80031b6:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <SysTick_Config+0x44>)
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	3a01      	subs	r2, #1
 80031bc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 80031be:	2301      	movs	r3, #1
 80031c0:	425b      	negs	r3, r3
 80031c2:	1c18      	adds	r0, r3, #0
 80031c4:	2103      	movs	r1, #3
 80031c6:	f7ff ff7b 	bl	80030c0 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80031ca:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <SysTick_Config+0x44>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031d0:	4b04      	ldr	r3, [pc, #16]	; (80031e4 <SysTick_Config+0x44>)
 80031d2:	2207      	movs	r2, #7
 80031d4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	1c18      	adds	r0, r3, #0
 80031da:	46bd      	mov	sp, r7
 80031dc:	b002      	add	sp, #8
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	00ffffff 	.word	0x00ffffff
 80031e4:	e000e010 	.word	0xe000e010

080031e8 <SysTick_Handler>:
**  Abstract: SysTick interrupt handler
**
**===========================================================================
*/
void SysTick_Handler(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
	if(delayTimer)
 80031ec:	4b0c      	ldr	r3, [pc, #48]	; (8003220 <SysTick_Handler+0x38>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d004      	beq.n	80031fe <SysTick_Handler+0x16>
	{
		delayTimer--;
 80031f4:	4b0a      	ldr	r3, [pc, #40]	; (8003220 <SysTick_Handler+0x38>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	1e5a      	subs	r2, r3, #1
 80031fa:	4b09      	ldr	r3, [pc, #36]	; (8003220 <SysTick_Handler+0x38>)
 80031fc:	601a      	str	r2, [r3, #0]
	}
	timer++;
 80031fe:	4b09      	ldr	r3, [pc, #36]	; (8003224 <SysTick_Handler+0x3c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	1c5a      	adds	r2, r3, #1
 8003204:	4b07      	ldr	r3, [pc, #28]	; (8003224 <SysTick_Handler+0x3c>)
 8003206:	601a      	str	r2, [r3, #0]

	if  (timer>5)
 8003208:	4b06      	ldr	r3, [pc, #24]	; (8003224 <SysTick_Handler+0x3c>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b05      	cmp	r3, #5
 800320e:	d905      	bls.n	800321c <SysTick_Handler+0x34>
	{
		timerFlag = 1;
 8003210:	4b05      	ldr	r3, [pc, #20]	; (8003228 <SysTick_Handler+0x40>)
 8003212:	2201      	movs	r2, #1
 8003214:	701a      	strb	r2, [r3, #0]
		timer = 0;
 8003216:	4b03      	ldr	r3, [pc, #12]	; (8003224 <SysTick_Handler+0x3c>)
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]
	}
}
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	20000458 	.word	0x20000458
 8003224:	20000148 	.word	0x20000148
 8003228:	2000014c 	.word	0x2000014c

0800322c <delay>:


void delay(uint32_t ticks)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
	delayTimer = ticks;
 8003234:	4b05      	ldr	r3, [pc, #20]	; (800324c <delay+0x20>)
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	601a      	str	r2, [r3, #0]
	while(delayTimer > 0);
 800323a:	46c0      	nop			; (mov r8, r8)
 800323c:	4b03      	ldr	r3, [pc, #12]	; (800324c <delay+0x20>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1fb      	bne.n	800323c <delay+0x10>
}
 8003244:	46bd      	mov	sp, r7
 8003246:	b002      	add	sp, #8
 8003248:	bd80      	pop	{r7, pc}
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	20000458 	.word	0x20000458

08003250 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8003250:	b590      	push	{r4, r7, lr}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
	SystemInit();
 8003256:	f7fe fe0b 	bl	8001e70 <SystemInit>
	SystemCoreClockUpdate();
 800325a:	f7fe fe51 	bl	8001f00 <SystemCoreClockUpdate>
	//the systick timer runs with 6MHz
	//config the timer for 1ms interval
	SysTick_Config(SystemCoreClock / 8 / 1000);
 800325e:	4b82      	ldr	r3, [pc, #520]	; (8003468 <main+0x218>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	1c18      	adds	r0, r3, #0
 8003264:	23fa      	movs	r3, #250	; 0xfa
 8003266:	0159      	lsls	r1, r3, #5
 8003268:	f7fc ff4e 	bl	8000108 <__aeabi_uidiv>
 800326c:	1c03      	adds	r3, r0, #0
 800326e:	1c18      	adds	r0, r3, #0
 8003270:	f7ff ff96 	bl	80031a0 <SysTick_Config>
	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8);
 8003274:	2305      	movs	r3, #5
 8003276:	425b      	negs	r3, r3
 8003278:	1c18      	adds	r0, r3, #0
 800327a:	f003 f8a3 	bl	80063c4 <SysTick_CLKSourceConfig>

	//init the drivers
	//TODO: the dbgLed kills the USB!!
	dbgLED_init();
 800327e:	f7ff fee7 	bl	8003050 <dbgLED_init>
	dbgLED_on();
 8003282:	f7ff ff05 	bl	8003090 <dbgLED_on>
	delay(500);
 8003286:	23fa      	movs	r3, #250	; 0xfa
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	1c18      	adds	r0, r3, #0
 800328c:	f7ff ffce 	bl	800322c <delay>
	dbgLED_off();
 8003290:	f7ff ff0a 	bl	80030a8 <dbgLED_off>
	delay(500);
 8003294:	23fa      	movs	r3, #250	; 0xfa
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	1c18      	adds	r0, r3, #0
 800329a:	f7ff ffc7 	bl	800322c <delay>
	USB_Init();
 800329e:	f7ff f973 	bl	8002588 <USB_Init>
	mma8653_init();
 80032a2:	f7ff fbf1 	bl	8002a88 <mma8653_init>
	apa102_init();
 80032a6:	f7ff fd0d 	bl	8002cc4 <apa102_init>

	errorcode = mma8653_setDataWidth(MMA8653_DATAWIDTH_8);
 80032aa:	2000      	movs	r0, #0
 80032ac:	f7ff fc94 	bl	8002bd8 <mma8653_setDataWidth>
 80032b0:	1c03      	adds	r3, r0, #0
 80032b2:	1c1a      	adds	r2, r3, #0
 80032b4:	4b6d      	ldr	r3, [pc, #436]	; (800346c <main+0x21c>)
 80032b6:	701a      	strb	r2, [r3, #0]


	while(1)
	{
		if(timerFlag)
 80032b8:	4b6d      	ldr	r3, [pc, #436]	; (8003470 <main+0x220>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d100      	bne.n	80032c2 <main+0x72>
 80032c0:	e0cb      	b.n	800345a <main+0x20a>
		{
			timerFlag = 0;
 80032c2:	4b6b      	ldr	r3, [pc, #428]	; (8003470 <main+0x220>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	701a      	strb	r2, [r3, #0]


			acc8_t accData = mma8653_read8();
 80032c8:	f7ff fcba 	bl	8002c40 <mma8653_read8>
 80032cc:	1c03      	adds	r3, r0, #0
 80032ce:	1c1a      	adds	r2, r3, #0
 80032d0:	1d3b      	adds	r3, r7, #4
 80032d2:	1c11      	adds	r1, r2, #0
 80032d4:	7019      	strb	r1, [r3, #0]
 80032d6:	0411      	lsls	r1, r2, #16
 80032d8:	0e09      	lsrs	r1, r1, #24
 80032da:	7059      	strb	r1, [r3, #1]
 80032dc:	0212      	lsls	r2, r2, #8
 80032de:	0e12      	lsrs	r2, r2, #24
 80032e0:	709a      	strb	r2, [r3, #2]
			//calculate the (vectorial) sum of all 3 axes
			uint32_t sum = sqrt((int32_t)(accData.x*accData.x)+(int32_t)(accData.y*accData.y)+(int32_t)(accData.z*accData.z));
 80032e2:	1d3b      	adds	r3, r7, #4
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	b25b      	sxtb	r3, r3
 80032e8:	1d3a      	adds	r2, r7, #4
 80032ea:	7812      	ldrb	r2, [r2, #0]
 80032ec:	b252      	sxtb	r2, r2
 80032ee:	435a      	muls	r2, r3
 80032f0:	1d3b      	adds	r3, r7, #4
 80032f2:	785b      	ldrb	r3, [r3, #1]
 80032f4:	b25b      	sxtb	r3, r3
 80032f6:	1d39      	adds	r1, r7, #4
 80032f8:	7849      	ldrb	r1, [r1, #1]
 80032fa:	b249      	sxtb	r1, r1
 80032fc:	434b      	muls	r3, r1
 80032fe:	18d2      	adds	r2, r2, r3
 8003300:	1d3b      	adds	r3, r7, #4
 8003302:	789b      	ldrb	r3, [r3, #2]
 8003304:	b25b      	sxtb	r3, r3
 8003306:	1d39      	adds	r1, r7, #4
 8003308:	7889      	ldrb	r1, [r1, #2]
 800330a:	b249      	sxtb	r1, r1
 800330c:	434b      	muls	r3, r1
 800330e:	18d3      	adds	r3, r2, r3
 8003310:	1c18      	adds	r0, r3, #0
 8003312:	f7fe fd1d 	bl	8001d50 <__aeabi_i2d>
 8003316:	1c03      	adds	r3, r0, #0
 8003318:	1c0c      	adds	r4, r1, #0
 800331a:	1c18      	adds	r0, r3, #0
 800331c:	1c21      	adds	r1, r4, #0
 800331e:	f003 ff77 	bl	8007210 <sqrt>
 8003322:	1c03      	adds	r3, r0, #0
 8003324:	1c0c      	adds	r4, r1, #0
 8003326:	1c18      	adds	r0, r3, #0
 8003328:	1c21      	adds	r1, r4, #0
 800332a:	f7fc ff7d 	bl	8000228 <__aeabi_d2uiz>
 800332e:	1c03      	adds	r3, r0, #0
 8003330:	60bb      	str	r3, [r7, #8]
			//convert to mg
			//1LSB = 15.6mg
			sum = sum*(double)15.6;
 8003332:	68b8      	ldr	r0, [r7, #8]
 8003334:	f7fe fd4a 	bl	8001dcc <__aeabi_ui2d>
 8003338:	1c03      	adds	r3, r0, #0
 800333a:	1c0c      	adds	r4, r1, #0
 800333c:	1c18      	adds	r0, r3, #0
 800333e:	1c21      	adds	r1, r4, #0
 8003340:	4b48      	ldr	r3, [pc, #288]	; (8003464 <main+0x214>)
 8003342:	4a47      	ldr	r2, [pc, #284]	; (8003460 <main+0x210>)
 8003344:	f7fd ff16 	bl	8001174 <__aeabi_dmul>
 8003348:	1c03      	adds	r3, r0, #0
 800334a:	1c0c      	adds	r4, r1, #0
 800334c:	1c18      	adds	r0, r3, #0
 800334e:	1c21      	adds	r1, r4, #0
 8003350:	f7fc ff6a 	bl	8000228 <__aeabi_d2uiz>
 8003354:	1c03      	adds	r3, r0, #0
 8003356:	60bb      	str	r3, [r7, #8]
			//display on led-stripe
			uint16_t pattern = 0;
 8003358:	1c3b      	adds	r3, r7, #0
 800335a:	330e      	adds	r3, #14
 800335c:	2200      	movs	r2, #0
 800335e:	801a      	strh	r2, [r3, #0]
			for(uint8_t i = 0; i < 16; i++)
 8003360:	1c3b      	adds	r3, r7, #0
 8003362:	330d      	adds	r3, #13
 8003364:	2200      	movs	r2, #0
 8003366:	701a      	strb	r2, [r3, #0]
 8003368:	e030      	b.n	80033cc <main+0x17c>
			{
				if(i<=sum/256)
 800336a:	1c3b      	adds	r3, r7, #0
 800336c:	330d      	adds	r3, #13
 800336e:	781a      	ldrb	r2, [r3, #0]
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	0a1b      	lsrs	r3, r3, #8
 8003374:	429a      	cmp	r2, r3
 8003376:	d810      	bhi.n	800339a <main+0x14a>
				{
					pattern |= (1<<i);
 8003378:	1c3b      	adds	r3, r7, #0
 800337a:	330d      	adds	r3, #13
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	2201      	movs	r2, #1
 8003380:	1c11      	adds	r1, r2, #0
 8003382:	4099      	lsls	r1, r3
 8003384:	1c0b      	adds	r3, r1, #0
 8003386:	b29a      	uxth	r2, r3
 8003388:	1c3b      	adds	r3, r7, #0
 800338a:	330e      	adds	r3, #14
 800338c:	881b      	ldrh	r3, [r3, #0]
 800338e:	4313      	orrs	r3, r2
 8003390:	b29a      	uxth	r2, r3
 8003392:	1c3b      	adds	r3, r7, #0
 8003394:	330e      	adds	r3, #14
 8003396:	801a      	strh	r2, [r3, #0]
 8003398:	e011      	b.n	80033be <main+0x16e>
				}
				else
				{
					pattern &= ~(1<<i);
 800339a:	1c3b      	adds	r3, r7, #0
 800339c:	330d      	adds	r3, #13
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2201      	movs	r2, #1
 80033a2:	1c11      	adds	r1, r2, #0
 80033a4:	4099      	lsls	r1, r3
 80033a6:	1c0b      	adds	r3, r1, #0
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	43db      	mvns	r3, r3
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	1c3a      	adds	r2, r7, #0
 80033b0:	320e      	adds	r2, #14
 80033b2:	8812      	ldrh	r2, [r2, #0]
 80033b4:	4013      	ands	r3, r2
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	1c3b      	adds	r3, r7, #0
 80033ba:	330e      	adds	r3, #14
 80033bc:	801a      	strh	r2, [r3, #0]
			//convert to mg
			//1LSB = 15.6mg
			sum = sum*(double)15.6;
			//display on led-stripe
			uint16_t pattern = 0;
			for(uint8_t i = 0; i < 16; i++)
 80033be:	1c3b      	adds	r3, r7, #0
 80033c0:	330d      	adds	r3, #13
 80033c2:	781a      	ldrb	r2, [r3, #0]
 80033c4:	1c3b      	adds	r3, r7, #0
 80033c6:	330d      	adds	r3, #13
 80033c8:	3201      	adds	r2, #1
 80033ca:	701a      	strb	r2, [r3, #0]
 80033cc:	1c3b      	adds	r3, r7, #0
 80033ce:	330d      	adds	r3, #13
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	2b0f      	cmp	r3, #15
 80033d4:	d9c9      	bls.n	800336a <main+0x11a>
				else
				{
					pattern &= ~(1<<i);
				}
			}
			apa102_setPattern(pattern, 2);
 80033d6:	1c3b      	adds	r3, r7, #0
 80033d8:	330e      	adds	r3, #14
 80033da:	881b      	ldrh	r3, [r3, #0]
 80033dc:	1c18      	adds	r0, r3, #0
 80033de:	2102      	movs	r1, #2
 80033e0:	f7ff fda4 	bl	8002f2c <apa102_setPattern>

			if(USB_Flags & USB_FLAG_FIRST_CONTACT)
 80033e4:	4b23      	ldr	r3, [pc, #140]	; (8003474 <main+0x224>)
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	1c1a      	adds	r2, r3, #0
 80033ec:	2304      	movs	r3, #4
 80033ee:	4013      	ands	r3, r2
 80033f0:	d00c      	beq.n	800340c <main+0x1bc>
			{
				USB_Flags &= ~USB_FLAG_FIRST_CONTACT;
 80033f2:	4b20      	ldr	r3, [pc, #128]	; (8003474 <main+0x224>)
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2204      	movs	r2, #4
 80033fa:	4393      	bics	r3, r2
 80033fc:	b2da      	uxtb	r2, r3
 80033fe:	4b1d      	ldr	r3, [pc, #116]	; (8003474 <main+0x224>)
 8003400:	701a      	strb	r2, [r3, #0]
				USB_VCP_DataTx((uint8_t*)"----POV_Seismograph----\n",20);
 8003402:	4b1d      	ldr	r3, [pc, #116]	; (8003478 <main+0x228>)
 8003404:	1c18      	adds	r0, r3, #0
 8003406:	2114      	movs	r1, #20
 8003408:	f7ff f91e 	bl	8002648 <USB_VCP_DataTx>
			}
			if(USB_Flags & USB_FLAG_CDC_OPEN)
 800340c:	4b19      	ldr	r3, [pc, #100]	; (8003474 <main+0x224>)
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	b2db      	uxtb	r3, r3
 8003412:	1c1a      	adds	r2, r3, #0
 8003414:	2302      	movs	r3, #2
 8003416:	4013      	ands	r3, r2
 8003418:	d01f      	beq.n	800345a <main+0x20a>
			{
				if(errorcode != 0)
 800341a:	4b14      	ldr	r3, [pc, #80]	; (800346c <main+0x21c>)
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00d      	beq.n	800343e <main+0x1ee>
				{
					sprintf((char*)tempstring,"Error %i occured!\n",errorcode);
 8003422:	4b12      	ldr	r3, [pc, #72]	; (800346c <main+0x21c>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	4915      	ldr	r1, [pc, #84]	; (800347c <main+0x22c>)
 8003428:	4a15      	ldr	r2, [pc, #84]	; (8003480 <main+0x230>)
 800342a:	1c08      	adds	r0, r1, #0
 800342c:	1c11      	adds	r1, r2, #0
 800342e:	1c1a      	adds	r2, r3, #0
 8003430:	f003 face 	bl	80069d0 <siprintf>
					USB_VCP_DataTx((uint8_t*)tempstring,19);
 8003434:	4b11      	ldr	r3, [pc, #68]	; (800347c <main+0x22c>)
 8003436:	1c18      	adds	r0, r3, #0
 8003438:	2113      	movs	r1, #19
 800343a:	f7ff f905 	bl	8002648 <USB_VCP_DataTx>
				}

				sprintf((char*)tempstring,"sum:#1M%i<\n",sum);
 800343e:	490f      	ldr	r1, [pc, #60]	; (800347c <main+0x22c>)
 8003440:	4a10      	ldr	r2, [pc, #64]	; (8003484 <main+0x234>)
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	1c08      	adds	r0, r1, #0
 8003446:	1c11      	adds	r1, r2, #0
 8003448:	1c1a      	adds	r2, r3, #0
 800344a:	f003 fac1 	bl	80069d0 <siprintf>
				USB_VCP_DataTx((uint8_t*)tempstring,0);
 800344e:	4b0b      	ldr	r3, [pc, #44]	; (800347c <main+0x22c>)
 8003450:	1c18      	adds	r0, r3, #0
 8003452:	2100      	movs	r1, #0
 8003454:	f7ff f8f8 	bl	8002648 <USB_VCP_DataTx>
//				sprintf((char*)tempstring,"z:#3M%i<\t",accData.z);
//				USB_VCP_DataTx((uint8_t*)tempstring,5);
//				USB_VCP_DataTx((uint8_t*)"<\n",2);
			}
		}
	}
 8003458:	e72e      	b.n	80032b8 <main+0x68>
 800345a:	e72d      	b.n	80032b8 <main+0x68>
 800345c:	46c0      	nop			; (mov r8, r8)
 800345e:	46c0      	nop			; (mov r8, r8)
 8003460:	33333333 	.word	0x33333333
 8003464:	402f3333 	.word	0x402f3333
 8003468:	20000000 	.word	0x20000000
 800346c:	2000014d 	.word	0x2000014d
 8003470:	2000014c 	.word	0x2000014c
 8003474:	2000018a 	.word	0x2000018a
 8003478:	0800750c 	.word	0x0800750c
 800347c:	2000045c 	.word	0x2000045c
 8003480:	08007528 	.word	0x08007528
 8003484:	0800753c 	.word	0x0800753c

08003488 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_Status  USBD_StdDevReq (USB_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  USBD_Status ret = USBD_OK;  
 8003492:	1c3b      	adds	r3, r7, #0
 8003494:	330f      	adds	r3, #15
 8003496:	2200      	movs	r2, #0
 8003498:	701a      	strb	r2, [r3, #0]
  
  switch (req->bRequest) 
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	785b      	ldrb	r3, [r3, #1]
 800349e:	2b09      	cmp	r3, #9
 80034a0:	d835      	bhi.n	800350e <USBD_StdDevReq+0x86>
 80034a2:	009a      	lsls	r2, r3, #2
 80034a4:	4b21      	ldr	r3, [pc, #132]	; (800352c <USBD_StdDevReq+0xa4>)
 80034a6:	18d3      	adds	r3, r2, r3
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	469f      	mov	pc, r3
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	1c10      	adds	r0, r2, #0
 80034b2:	1c19      	adds	r1, r3, #0
 80034b4:	f000 f992 	bl	80037dc <USBD_GetDescriptor>
    break;
 80034b8:	e030      	b.n	800351c <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	1c10      	adds	r0, r2, #0
 80034c0:	1c19      	adds	r1, r3, #0
 80034c2:	f000 fa79 	bl	80039b8 <USBD_SetAddress>
    break;
 80034c6:	e029      	b.n	800351c <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	1c10      	adds	r0, r2, #0
 80034ce:	1c19      	adds	r1, r3, #0
 80034d0:	f000 faba 	bl	8003a48 <USBD_SetConfig>
    break;
 80034d4:	e022      	b.n	800351c <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	1c10      	adds	r0, r2, #0
 80034dc:	1c19      	adds	r1, r3, #0
 80034de:	f000 fb31 	bl	8003b44 <USBD_GetConfig>
    break;
 80034e2:	e01b      	b.n	800351c <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	1c10      	adds	r0, r2, #0
 80034ea:	1c19      	adds	r1, r3, #0
 80034ec:	f000 fb5e 	bl	8003bac <USBD_GetStatus>
    break;
 80034f0:	e014      	b.n	800351c <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	1c10      	adds	r0, r2, #0
 80034f8:	1c19      	adds	r1, r3, #0
 80034fa:	f000 fb81 	bl	8003c00 <USBD_SetFeature>
    break;
 80034fe:	e00d      	b.n	800351c <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	1c10      	adds	r0, r2, #0
 8003506:	1c19      	adds	r1, r3, #0
 8003508:	f000 fb98 	bl	8003c3c <USBD_ClrFeature>
    break;
 800350c:	e006      	b.n	800351c <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	1c10      	adds	r0, r2, #0
 8003514:	1c19      	adds	r1, r3, #0
 8003516:	f000 fbf7 	bl	8003d08 <USBD_CtlError>
    break;
 800351a:	46c0      	nop			; (mov r8, r8)
  }
  
  return ret;
 800351c:	1c3b      	adds	r3, r7, #0
 800351e:	330f      	adds	r3, #15
 8003520:	781b      	ldrb	r3, [r3, #0]
}
 8003522:	1c18      	adds	r0, r3, #0
 8003524:	46bd      	mov	sp, r7
 8003526:	b004      	add	sp, #16
 8003528:	bd80      	pop	{r7, pc}
 800352a:	46c0      	nop			; (mov r8, r8)
 800352c:	080075f8 	.word	0x080075f8

08003530 <USBD_StdItfReq>:
  * @param  pdev: USB device instance
  * @param  req: usb request
  * @retval status
  */
USBD_Status  USBD_StdItfReq (USB_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8003530:	b590      	push	{r4, r7, lr}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  USBD_Status ret = USBD_OK; 
 800353a:	1c3b      	adds	r3, r7, #0
 800353c:	330f      	adds	r3, #15
 800353e:	2200      	movs	r2, #0
 8003540:	701a      	strb	r2, [r3, #0]
  
  switch (pdev->dev.device_status) 
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	789b      	ldrb	r3, [r3, #2]
 8003546:	2b03      	cmp	r3, #3
 8003548:	d128      	bne.n	800359c <USBD_StdItfReq+0x6c>
  {
  case USB_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_ITF_MAX_NUM) 
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	889b      	ldrh	r3, [r3, #4]
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b01      	cmp	r3, #1
 8003552:	d81b      	bhi.n	800358c <USBD_StdItfReq+0x5c>
    {
      ret = (USBD_Status) (pdev->dev.class_cb->Setup (pdev, req)); 
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	23ac      	movs	r3, #172	; 0xac
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	58d3      	ldr	r3, [r2, r3]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	1c3c      	adds	r4, r7, #0
 8003560:	340f      	adds	r4, #15
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	1c08      	adds	r0, r1, #0
 8003568:	1c11      	adds	r1, r2, #0
 800356a:	4798      	blx	r3
 800356c:	1c03      	adds	r3, r0, #0
 800356e:	7023      	strb	r3, [r4, #0]
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	88db      	ldrh	r3, [r3, #6]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d110      	bne.n	800359a <USBD_StdItfReq+0x6a>
 8003578:	1c3b      	adds	r3, r7, #0
 800357a:	330f      	adds	r3, #15
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10b      	bne.n	800359a <USBD_StdItfReq+0x6a>
      {
         USBD_CtlSendStatus(pdev);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	1c18      	adds	r0, r3, #0
 8003586:	f000 fcbf 	bl	8003f08 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 800358a:	e00e      	b.n	80035aa <USBD_StdItfReq+0x7a>
         USBD_CtlSendStatus(pdev);
      }
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	1c10      	adds	r0, r2, #0
 8003592:	1c19      	adds	r1, r3, #0
 8003594:	f000 fbb8 	bl	8003d08 <USBD_CtlError>
    }
    break;
 8003598:	e007      	b.n	80035aa <USBD_StdItfReq+0x7a>
 800359a:	e006      	b.n	80035aa <USBD_StdItfReq+0x7a>
    
  default:
     USBD_CtlError(pdev , req);
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	1c10      	adds	r0, r2, #0
 80035a2:	1c19      	adds	r1, r3, #0
 80035a4:	f000 fbb0 	bl	8003d08 <USBD_CtlError>
    break;
 80035a8:	46c0      	nop			; (mov r8, r8)
  }
  return ret;
 80035aa:	1c3b      	adds	r3, r7, #0
 80035ac:	330f      	adds	r3, #15
 80035ae:	781b      	ldrb	r3, [r3, #0]
}
 80035b0:	1c18      	adds	r0, r3, #0
 80035b2:	46bd      	mov	sp, r7
 80035b4:	b005      	add	sp, #20
 80035b6:	bd90      	pop	{r4, r7, pc}

080035b8 <USBD_StdEPReq>:
  * @param  pdev: USB device instance
  * @param  req: usb request
  * @retval status
  */
USBD_Status  USBD_StdEPReq (USB_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  uint32_t USBD_ep_status  = 0; 
 80035c2:	2300      	movs	r3, #0
 80035c4:	60bb      	str	r3, [r7, #8]
  USBD_Status ret = USBD_OK; 
 80035c6:	1c3b      	adds	r3, r7, #0
 80035c8:	330f      	adds	r3, #15
 80035ca:	2200      	movs	r2, #0
 80035cc:	701a      	strb	r2, [r3, #0]
  
  ep_addr  = LOBYTE(req->wIndex);   
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	889a      	ldrh	r2, [r3, #4]
 80035d2:	1c3b      	adds	r3, r7, #0
 80035d4:	330e      	adds	r3, #14
 80035d6:	701a      	strb	r2, [r3, #0]
  
  switch (req->bRequest) 
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	785b      	ldrb	r3, [r3, #1]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d04d      	beq.n	800367c <USBD_StdEPReq+0xc4>
 80035e0:	2b03      	cmp	r3, #3
 80035e2:	d003      	beq.n	80035ec <USBD_StdEPReq+0x34>
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d100      	bne.n	80035ea <USBD_StdEPReq+0x32>
 80035e8:	e090      	b.n	800370c <USBD_StdEPReq+0x154>
      break;
    }
    break;
    
  default:
    break;
 80035ea:	e0ef      	b.n	80037cc <USBD_StdEPReq+0x214>
  
  switch (req->bRequest) 
  {  
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev.device_status) 
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	789b      	ldrb	r3, [r3, #2]
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d002      	beq.n	80035fa <USBD_StdEPReq+0x42>
 80035f4:	2b03      	cmp	r3, #3
 80035f6:	d014      	beq.n	8003622 <USBD_StdEPReq+0x6a>
 80035f8:	e038      	b.n	800366c <USBD_StdEPReq+0xb4>
    {
    case USB_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80035fa:	1c3b      	adds	r3, r7, #0
 80035fc:	330e      	adds	r3, #14
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00d      	beq.n	8003620 <USBD_StdEPReq+0x68>
 8003604:	1c3b      	adds	r3, r7, #0
 8003606:	330e      	adds	r3, #14
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	2b80      	cmp	r3, #128	; 0x80
 800360c:	d008      	beq.n	8003620 <USBD_StdEPReq+0x68>
      {
        DCD_EP_Stall(pdev , ep_addr);
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	1c3b      	adds	r3, r7, #0
 8003612:	330e      	adds	r3, #14
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	1c10      	adds	r0, r2, #0
 8003618:	1c19      	adds	r1, r3, #0
 800361a:	f001 ffc5 	bl	80055a8 <DCD_EP_Stall>
      }
      break;	
 800361e:	e02c      	b.n	800367a <USBD_StdEPReq+0xc2>
 8003620:	e02b      	b.n	800367a <USBD_StdEPReq+0xc2>
      
    case USB_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	885b      	ldrh	r3, [r3, #2]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d111      	bne.n	800364e <USBD_StdEPReq+0x96>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800362a:	1c3b      	adds	r3, r7, #0
 800362c:	330e      	adds	r3, #14
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00c      	beq.n	800364e <USBD_StdEPReq+0x96>
 8003634:	1c3b      	adds	r3, r7, #0
 8003636:	330e      	adds	r3, #14
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	2b80      	cmp	r3, #128	; 0x80
 800363c:	d007      	beq.n	800364e <USBD_StdEPReq+0x96>
        { 
          DCD_EP_Stall(pdev , ep_addr);
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	1c3b      	adds	r3, r7, #0
 8003642:	330e      	adds	r3, #14
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	1c10      	adds	r0, r2, #0
 8003648:	1c19      	adds	r1, r3, #0
 800364a:	f001 ffad 	bl	80055a8 <DCD_EP_Stall>
          
        }
      }
      pdev->dev.class_cb->Setup (pdev, req);   
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	23ac      	movs	r3, #172	; 0xac
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	58d3      	ldr	r3, [r2, r3]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	6879      	ldr	r1, [r7, #4]
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	1c08      	adds	r0, r1, #0
 800365e:	1c11      	adds	r1, r2, #0
 8003660:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	1c18      	adds	r0, r3, #0
 8003666:	f000 fc4f 	bl	8003f08 <USBD_CtlSendStatus>
      
      break;
 800366a:	e006      	b.n	800367a <USBD_StdEPReq+0xc2>
      
    default:                         
      USBD_CtlError(pdev , req);
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	1c10      	adds	r0, r2, #0
 8003672:	1c19      	adds	r1, r3, #0
 8003674:	f000 fb48 	bl	8003d08 <USBD_CtlError>
      break;    
 8003678:	46c0      	nop			; (mov r8, r8)
    }
    break;
 800367a:	e0a7      	b.n	80037cc <USBD_StdEPReq+0x214>
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev.device_status) 
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	789b      	ldrb	r3, [r3, #2]
 8003680:	2b02      	cmp	r3, #2
 8003682:	d002      	beq.n	800368a <USBD_StdEPReq+0xd2>
 8003684:	2b03      	cmp	r3, #3
 8003686:	d014      	beq.n	80036b2 <USBD_StdEPReq+0xfa>
 8003688:	e038      	b.n	80036fc <USBD_StdEPReq+0x144>
    {
    case USB_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800368a:	1c3b      	adds	r3, r7, #0
 800368c:	330e      	adds	r3, #14
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00d      	beq.n	80036b0 <USBD_StdEPReq+0xf8>
 8003694:	1c3b      	adds	r3, r7, #0
 8003696:	330e      	adds	r3, #14
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	2b80      	cmp	r3, #128	; 0x80
 800369c:	d008      	beq.n	80036b0 <USBD_StdEPReq+0xf8>
      {
        DCD_EP_Stall(pdev , ep_addr);
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	1c3b      	adds	r3, r7, #0
 80036a2:	330e      	adds	r3, #14
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	1c10      	adds	r0, r2, #0
 80036a8:	1c19      	adds	r1, r3, #0
 80036aa:	f001 ff7d 	bl	80055a8 <DCD_EP_Stall>
      }
      break;	
 80036ae:	e02c      	b.n	800370a <USBD_StdEPReq+0x152>
 80036b0:	e02b      	b.n	800370a <USBD_StdEPReq+0x152>
      
    case USB_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	885b      	ldrh	r3, [r3, #2]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d111      	bne.n	80036de <USBD_StdEPReq+0x126>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80036ba:	1c3b      	adds	r3, r7, #0
 80036bc:	330e      	adds	r3, #14
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00c      	beq.n	80036de <USBD_StdEPReq+0x126>
 80036c4:	1c3b      	adds	r3, r7, #0
 80036c6:	330e      	adds	r3, #14
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b80      	cmp	r3, #128	; 0x80
 80036cc:	d007      	beq.n	80036de <USBD_StdEPReq+0x126>
        {        
          DCD_EP_ClrStall(pdev , ep_addr);
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	1c3b      	adds	r3, r7, #0
 80036d2:	330e      	adds	r3, #14
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	1c10      	adds	r0, r2, #0
 80036d8:	1c19      	adds	r1, r3, #0
 80036da:	f001 ffd1 	bl	8005680 <DCD_EP_ClrStall>
        }
      }
      pdev->dev.class_cb->Setup (pdev, req);
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	23ac      	movs	r3, #172	; 0xac
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	58d3      	ldr	r3, [r2, r3]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	6879      	ldr	r1, [r7, #4]
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	1c08      	adds	r0, r1, #0
 80036ee:	1c11      	adds	r1, r2, #0
 80036f0:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	1c18      	adds	r0, r3, #0
 80036f6:	f000 fc07 	bl	8003f08 <USBD_CtlSendStatus>
      break;
 80036fa:	e006      	b.n	800370a <USBD_StdEPReq+0x152>
      
    default:                         
       USBD_CtlError(pdev , req);
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	1c10      	adds	r0, r2, #0
 8003702:	1c19      	adds	r1, r3, #0
 8003704:	f000 fb00 	bl	8003d08 <USBD_CtlError>
      break;    
 8003708:	46c0      	nop			; (mov r8, r8)
    }
    break;
 800370a:	e05f      	b.n	80037cc <USBD_StdEPReq+0x214>
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev.device_status) 
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	789b      	ldrb	r3, [r3, #2]
 8003710:	2b02      	cmp	r3, #2
 8003712:	d002      	beq.n	800371a <USBD_StdEPReq+0x162>
 8003714:	2b03      	cmp	r3, #3
 8003716:	d014      	beq.n	8003742 <USBD_StdEPReq+0x18a>
 8003718:	e050      	b.n	80037bc <USBD_StdEPReq+0x204>
    {
    case USB_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800371a:	1c3b      	adds	r3, r7, #0
 800371c:	330e      	adds	r3, #14
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00d      	beq.n	8003740 <USBD_StdEPReq+0x188>
 8003724:	1c3b      	adds	r3, r7, #0
 8003726:	330e      	adds	r3, #14
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	2b80      	cmp	r3, #128	; 0x80
 800372c:	d008      	beq.n	8003740 <USBD_StdEPReq+0x188>
      {
        DCD_EP_Stall(pdev , ep_addr);
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	1c3b      	adds	r3, r7, #0
 8003732:	330e      	adds	r3, #14
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	1c10      	adds	r0, r2, #0
 8003738:	1c19      	adds	r1, r3, #0
 800373a:	f001 ff35 	bl	80055a8 <DCD_EP_Stall>
      }
      break;	
 800373e:	e044      	b.n	80037ca <USBD_StdEPReq+0x212>
 8003740:	e043      	b.n	80037ca <USBD_StdEPReq+0x212>
      
    case USB_CONFIGURED:         
      
      if ((ep_addr & 0x80)== 0x80)
 8003742:	1c3b      	adds	r3, r7, #0
 8003744:	330e      	adds	r3, #14
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	b25b      	sxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	da14      	bge.n	8003778 <USBD_StdEPReq+0x1c0>
      {
        if(pdev->dev.in_ep[ep_addr & 0x7F].is_stall)
 800374e:	1c3b      	adds	r3, r7, #0
 8003750:	330e      	adds	r3, #14
 8003752:	781a      	ldrb	r2, [r3, #0]
 8003754:	237f      	movs	r3, #127	; 0x7f
 8003756:	401a      	ands	r2, r3
 8003758:	6879      	ldr	r1, [r7, #4]
 800375a:	1c13      	adds	r3, r2, #0
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	189b      	adds	r3, r3, r2
 8003760:	00db      	lsls	r3, r3, #3
 8003762:	18cb      	adds	r3, r1, r3
 8003764:	3318      	adds	r3, #24
 8003766:	789b      	ldrb	r3, [r3, #2]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d002      	beq.n	8003772 <USBD_StdEPReq+0x1ba>
        {
          USBD_ep_status = 0x0001;     
 800376c:	2301      	movs	r3, #1
 800376e:	60bb      	str	r3, [r7, #8]
 8003770:	e01b      	b.n	80037aa <USBD_StdEPReq+0x1f2>
        }
        else
        {
          USBD_ep_status = 0x0000;  
 8003772:	2300      	movs	r3, #0
 8003774:	60bb      	str	r3, [r7, #8]
 8003776:	e018      	b.n	80037aa <USBD_StdEPReq+0x1f2>
        }
      }
      else if ((ep_addr & 0x80)== 0x00)
 8003778:	1c3b      	adds	r3, r7, #0
 800377a:	330e      	adds	r3, #14
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	b25b      	sxtb	r3, r3
 8003780:	2b00      	cmp	r3, #0
 8003782:	db12      	blt.n	80037aa <USBD_StdEPReq+0x1f2>
      {
        if(pdev->dev.out_ep[ep_addr].is_stall)
 8003784:	1c3b      	adds	r3, r7, #0
 8003786:	330e      	adds	r3, #14
 8003788:	781a      	ldrb	r2, [r3, #0]
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	21b8      	movs	r1, #184	; 0xb8
 800378e:	1c13      	adds	r3, r2, #0
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	189b      	adds	r3, r3, r2
 8003794:	00db      	lsls	r3, r3, #3
 8003796:	18c3      	adds	r3, r0, r3
 8003798:	185b      	adds	r3, r3, r1
 800379a:	789b      	ldrb	r3, [r3, #2]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d002      	beq.n	80037a6 <USBD_StdEPReq+0x1ee>
        {
          USBD_ep_status = 0x0001;     
 80037a0:	2301      	movs	r3, #1
 80037a2:	60bb      	str	r3, [r7, #8]
 80037a4:	e001      	b.n	80037aa <USBD_StdEPReq+0x1f2>
        }
        
        else 
        {
          USBD_ep_status = 0x0000;     
 80037a6:	2300      	movs	r3, #0
 80037a8:	60bb      	str	r3, [r7, #8]
        }      
      }
      USBD_CtlSendData (pdev,
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	1c3b      	adds	r3, r7, #0
 80037ae:	3308      	adds	r3, #8
 80037b0:	1c10      	adds	r0, r2, #0
 80037b2:	1c19      	adds	r1, r3, #0
 80037b4:	2202      	movs	r2, #2
 80037b6:	f000 fb25 	bl	8003e04 <USBD_CtlSendData>
                        (uint8_t *)&USBD_ep_status,
                        2);
      break;
 80037ba:	e006      	b.n	80037ca <USBD_StdEPReq+0x212>
      
    default:                         
       USBD_CtlError(pdev , req);
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	1c10      	adds	r0, r2, #0
 80037c2:	1c19      	adds	r1, r3, #0
 80037c4:	f000 faa0 	bl	8003d08 <USBD_CtlError>
      break;
 80037c8:	46c0      	nop			; (mov r8, r8)
    }
    break;
 80037ca:	46c0      	nop			; (mov r8, r8)
    
  default:
    break;
  }
  return ret;
 80037cc:	1c3b      	adds	r3, r7, #0
 80037ce:	330f      	adds	r3, #15
 80037d0:	781b      	ldrb	r3, [r3, #0]
}
 80037d2:	1c18      	adds	r0, r3, #0
 80037d4:	46bd      	mov	sp, r7
 80037d6:	b004      	add	sp, #16
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	46c0      	nop			; (mov r8, r8)

080037dc <USBD_GetDescriptor>:
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USB_CORE_HANDLE  *pdev, 
                               USB_SETUP_REQ *req)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
  switch (req->wValue >> 8)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	885b      	ldrh	r3, [r3, #2]
 80037ea:	0a1b      	lsrs	r3, r3, #8
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	2b07      	cmp	r3, #7
 80037f0:	d900      	bls.n	80037f4 <USBD_GetDescriptor+0x18>
 80037f2:	e0b2      	b.n	800395a <USBD_GetDescriptor+0x17e>
 80037f4:	009a      	lsls	r2, r3, #2
 80037f6:	4b6e      	ldr	r3, [pc, #440]	; (80039b0 <USBD_GetDescriptor+0x1d4>)
 80037f8:	18d3      	adds	r3, r2, r3
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	469f      	mov	pc, r3
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->dev.usr_device->GetBOSDescriptor(pdev->dev.speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->dev.usr_device->GetDeviceDescriptor(pdev->dev.speed, &len);
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	23b0      	movs	r3, #176	; 0xb0
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	58d3      	ldr	r3, [r2, r3]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	b2d9      	uxtb	r1, r3
 800380e:	1c3b      	adds	r3, r7, #0
 8003810:	330a      	adds	r3, #10
 8003812:	1c08      	adds	r0, r1, #0
 8003814:	1c19      	adds	r1, r3, #0
 8003816:	4790      	blx	r2
 8003818:	1c03      	adds	r3, r0, #0
 800381a:	60fb      	str	r3, [r7, #12]
    if (req->wLength == 64)   
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	88db      	ldrh	r3, [r3, #6]
 8003820:	2b40      	cmp	r3, #64	; 0x40
 8003822:	d104      	bne.n	800382e <USBD_GetDescriptor+0x52>
    {                  
      len = 8;
 8003824:	1c3b      	adds	r3, r7, #0
 8003826:	330a      	adds	r3, #10
 8003828:	2208      	movs	r2, #8
 800382a:	801a      	strh	r2, [r3, #0]
    }
    break;
 800382c:	e09c      	b.n	8003968 <USBD_GetDescriptor+0x18c>
 800382e:	e09b      	b.n	8003968 <USBD_GetDescriptor+0x18c>
    
  case USB_DESC_TYPE_CONFIGURATION:
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetConfigDescriptor(pdev->dev.speed, &len);  
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	23ac      	movs	r3, #172	; 0xac
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	58d3      	ldr	r3, [r2, r3]
 8003838:	6a1a      	ldr	r2, [r3, #32]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	b2d9      	uxtb	r1, r3
 8003840:	1c3b      	adds	r3, r7, #0
 8003842:	330a      	adds	r3, #10
 8003844:	1c08      	adds	r0, r1, #0
 8003846:	1c19      	adds	r1, r3, #0
 8003848:	4790      	blx	r2
 800384a:	1c03      	adds	r3, r0, #0
 800384c:	60fb      	str	r3, [r7, #12]
      pdev->dev.pConfig_descriptor = pbuf;    
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	23b2      	movs	r3, #178	; 0xb2
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	68f9      	ldr	r1, [r7, #12]
 8003856:	50d1      	str	r1, [r2, r3]
    break;
 8003858:	e086      	b.n	8003968 <USBD_GetDescriptor+0x18c>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	885b      	ldrh	r3, [r3, #2]
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b05      	cmp	r3, #5
 8003862:	d864      	bhi.n	800392e <USBD_GetDescriptor+0x152>
 8003864:	009a      	lsls	r2, r3, #2
 8003866:	4b53      	ldr	r3, [pc, #332]	; (80039b4 <USBD_GetDescriptor+0x1d8>)
 8003868:	18d3      	adds	r3, r2, r3
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	469f      	mov	pc, r3
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->dev.usr_device->GetLangIDStrDescriptor(pdev->dev.speed, &len);        
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	23b0      	movs	r3, #176	; 0xb0
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	58d3      	ldr	r3, [r2, r3]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	b2d9      	uxtb	r1, r3
 800387e:	1c3b      	adds	r3, r7, #0
 8003880:	330a      	adds	r3, #10
 8003882:	1c08      	adds	r0, r1, #0
 8003884:	1c19      	adds	r1, r3, #0
 8003886:	4790      	blx	r2
 8003888:	1c03      	adds	r3, r0, #0
 800388a:	60fb      	str	r3, [r7, #12]
      break;
 800388c:	e056      	b.n	800393c <USBD_GetDescriptor+0x160>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->dev.usr_device->GetManufacturerStrDescriptor(pdev->dev.speed, &len);
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	23b0      	movs	r3, #176	; 0xb0
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	58d3      	ldr	r3, [r2, r3]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	b2d9      	uxtb	r1, r3
 800389e:	1c3b      	adds	r3, r7, #0
 80038a0:	330a      	adds	r3, #10
 80038a2:	1c08      	adds	r0, r1, #0
 80038a4:	1c19      	adds	r1, r3, #0
 80038a6:	4790      	blx	r2
 80038a8:	1c03      	adds	r3, r0, #0
 80038aa:	60fb      	str	r3, [r7, #12]
      break;
 80038ac:	e046      	b.n	800393c <USBD_GetDescriptor+0x160>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->dev.usr_device->GetProductStrDescriptor(pdev->dev.speed, &len);
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	23b0      	movs	r3, #176	; 0xb0
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	58d3      	ldr	r3, [r2, r3]
 80038b6:	68da      	ldr	r2, [r3, #12]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	b2d9      	uxtb	r1, r3
 80038be:	1c3b      	adds	r3, r7, #0
 80038c0:	330a      	adds	r3, #10
 80038c2:	1c08      	adds	r0, r1, #0
 80038c4:	1c19      	adds	r1, r3, #0
 80038c6:	4790      	blx	r2
 80038c8:	1c03      	adds	r3, r0, #0
 80038ca:	60fb      	str	r3, [r7, #12]
      break;
 80038cc:	e036      	b.n	800393c <USBD_GetDescriptor+0x160>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->dev.usr_device->GetSerialStrDescriptor(pdev->dev.speed, &len);
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	23b0      	movs	r3, #176	; 0xb0
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	58d3      	ldr	r3, [r2, r3]
 80038d6:	691a      	ldr	r2, [r3, #16]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	b2d9      	uxtb	r1, r3
 80038de:	1c3b      	adds	r3, r7, #0
 80038e0:	330a      	adds	r3, #10
 80038e2:	1c08      	adds	r0, r1, #0
 80038e4:	1c19      	adds	r1, r3, #0
 80038e6:	4790      	blx	r2
 80038e8:	1c03      	adds	r3, r0, #0
 80038ea:	60fb      	str	r3, [r7, #12]
      break;
 80038ec:	e026      	b.n	800393c <USBD_GetDescriptor+0x160>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->dev.usr_device->GetConfigurationStrDescriptor(pdev->dev.speed, &len);
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	23b0      	movs	r3, #176	; 0xb0
 80038f2:	005b      	lsls	r3, r3, #1
 80038f4:	58d3      	ldr	r3, [r2, r3]
 80038f6:	695a      	ldr	r2, [r3, #20]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	b2d9      	uxtb	r1, r3
 80038fe:	1c3b      	adds	r3, r7, #0
 8003900:	330a      	adds	r3, #10
 8003902:	1c08      	adds	r0, r1, #0
 8003904:	1c19      	adds	r1, r3, #0
 8003906:	4790      	blx	r2
 8003908:	1c03      	adds	r3, r0, #0
 800390a:	60fb      	str	r3, [r7, #12]
      break;
 800390c:	e016      	b.n	800393c <USBD_GetDescriptor+0x160>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->dev.usr_device->GetInterfaceStrDescriptor(pdev->dev.speed, &len);
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	23b0      	movs	r3, #176	; 0xb0
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	58d3      	ldr	r3, [r2, r3]
 8003916:	699a      	ldr	r2, [r3, #24]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	b2d9      	uxtb	r1, r3
 800391e:	1c3b      	adds	r3, r7, #0
 8003920:	330a      	adds	r3, #10
 8003922:	1c08      	adds	r0, r1, #0
 8003924:	1c19      	adds	r1, r3, #0
 8003926:	4790      	blx	r2
 8003928:	1c03      	adds	r3, r0, #0
 800392a:	60fb      	str	r3, [r7, #12]
      break;
 800392c:	e006      	b.n	800393c <USBD_GetDescriptor+0x160>
    default:
#ifdef USB_SUPPORT_USER_STRING_DESC
      pbuf = pdev->dev.class_cb->GetUsrStrDescriptor(pdev->dev.speed, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	1c10      	adds	r0, r2, #0
 8003934:	1c19      	adds	r1, r3, #0
 8003936:	f000 f9e7 	bl	8003d08 <USBD_CtlError>
      return;
 800393a:	e036      	b.n	80039aa <USBD_GetDescriptor+0x1ce>
#endif /* USBD_CtlError(pdev , req); */      
    }
    break;
 800393c:	e014      	b.n	8003968 <USBD_GetDescriptor+0x18c>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   
       USBD_CtlError(pdev , req);
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	1c10      	adds	r0, r2, #0
 8003944:	1c19      	adds	r1, r3, #0
 8003946:	f000 f9df 	bl	8003d08 <USBD_CtlError>
      return;  
 800394a:	e02e      	b.n	80039aa <USBD_GetDescriptor+0x1ce>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      USBD_CtlError(pdev , req);
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	1c10      	adds	r0, r2, #0
 8003952:	1c19      	adds	r1, r3, #0
 8003954:	f000 f9d8 	bl	8003d08 <USBD_CtlError>
      return;  
 8003958:	e027      	b.n	80039aa <USBD_GetDescriptor+0x1ce>
  default: 
     USBD_CtlError(pdev , req);
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	1c10      	adds	r0, r2, #0
 8003960:	1c19      	adds	r1, r3, #0
 8003962:	f000 f9d1 	bl	8003d08 <USBD_CtlError>
    return;
 8003966:	e020      	b.n	80039aa <USBD_GetDescriptor+0x1ce>
  }
  
  if((len != 0)&& (req->wLength != 0))
 8003968:	1c3b      	adds	r3, r7, #0
 800396a:	330a      	adds	r3, #10
 800396c:	881b      	ldrh	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d01b      	beq.n	80039aa <USBD_GetDescriptor+0x1ce>
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	88db      	ldrh	r3, [r3, #6]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d017      	beq.n	80039aa <USBD_GetDescriptor+0x1ce>
  {
    
    len = MIN(len , req->wLength);
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	88db      	ldrh	r3, [r3, #6]
 800397e:	1c3a      	adds	r2, r7, #0
 8003980:	320a      	adds	r2, #10
 8003982:	8812      	ldrh	r2, [r2, #0]
 8003984:	b298      	uxth	r0, r3
 8003986:	b291      	uxth	r1, r2
 8003988:	4288      	cmp	r0, r1
 800398a:	d900      	bls.n	800398e <USBD_GetDescriptor+0x1b2>
 800398c:	1c13      	adds	r3, r2, #0
 800398e:	b29a      	uxth	r2, r3
 8003990:	1c3b      	adds	r3, r7, #0
 8003992:	330a      	adds	r3, #10
 8003994:	801a      	strh	r2, [r3, #0]
    
    USBD_CtlSendData (pdev, 
 8003996:	1c3b      	adds	r3, r7, #0
 8003998:	330a      	adds	r3, #10
 800399a:	881b      	ldrh	r3, [r3, #0]
 800399c:	6879      	ldr	r1, [r7, #4]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	1c08      	adds	r0, r1, #0
 80039a2:	1c11      	adds	r1, r2, #0
 80039a4:	1c1a      	adds	r2, r3, #0
 80039a6:	f000 fa2d 	bl	8003e04 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 80039aa:	46bd      	mov	sp, r7
 80039ac:	b004      	add	sp, #16
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	08007620 	.word	0x08007620
 80039b4:	08007640 	.word	0x08007640

080039b8 <USBD_SetAddress>:
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USB_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	889b      	ldrh	r3, [r3, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d132      	bne.n	8003a30 <USBD_SetAddress+0x78>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	88db      	ldrh	r3, [r3, #6]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d12e      	bne.n	8003a30 <USBD_SetAddress+0x78>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	885b      	ldrh	r3, [r3, #2]
 80039d6:	b2d9      	uxtb	r1, r3
 80039d8:	1c3b      	adds	r3, r7, #0
 80039da:	330f      	adds	r3, #15
 80039dc:	227f      	movs	r2, #127	; 0x7f
 80039de:	400a      	ands	r2, r1
 80039e0:	701a      	strb	r2, [r3, #0]
    
    if (pdev->dev.device_status == USB_CONFIGURED) 
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	789b      	ldrb	r3, [r3, #2]
 80039e6:	2b03      	cmp	r3, #3
 80039e8:	d106      	bne.n	80039f8 <USBD_SetAddress+0x40>
    {
      USBD_CtlError(pdev , req);
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	1c10      	adds	r0, r2, #0
 80039f0:	1c19      	adds	r1, r3, #0
 80039f2:	f000 f989 	bl	8003d08 <USBD_CtlError>
 80039f6:	e01a      	b.n	8003a2e <USBD_SetAddress+0x76>
    } 
    else 
    {
      pdev->dev.device_address = dev_addr;              
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	1c3a      	adds	r2, r7, #0
 80039fc:	320f      	adds	r2, #15
 80039fe:	7812      	ldrb	r2, [r2, #0]
 8003a00:	711a      	strb	r2, [r3, #4]
      ADDRESS = dev_addr;
 8003a02:	1c3b      	adds	r3, r7, #0
 8003a04:	330f      	adds	r3, #15
 8003a06:	781a      	ldrb	r2, [r3, #0]
 8003a08:	4b0e      	ldr	r3, [pc, #56]	; (8003a44 <USBD_SetAddress+0x8c>)
 8003a0a:	601a      	str	r2, [r3, #0]
      USBD_CtlSendStatus(pdev);                         
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	1c18      	adds	r0, r3, #0
 8003a10:	f000 fa7a 	bl	8003f08 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8003a14:	1c3b      	adds	r3, r7, #0
 8003a16:	330f      	adds	r3, #15
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <USBD_SetAddress+0x6e>
      {
        pdev->dev.device_status  = USB_ADDRESSED;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2202      	movs	r2, #2
 8003a22:	709a      	strb	r2, [r3, #2]
 8003a24:	e003      	b.n	8003a2e <USBD_SetAddress+0x76>
      } 
      else 
      {
        pdev->dev.device_status  = USB_DEFAULT; 
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	709a      	strb	r2, [r3, #2]
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev.device_status == USB_CONFIGURED) 
 8003a2c:	e006      	b.n	8003a3c <USBD_SetAddress+0x84>
 8003a2e:	e005      	b.n	8003a3c <USBD_SetAddress+0x84>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	1c10      	adds	r0, r2, #0
 8003a36:	1c19      	adds	r1, r3, #0
 8003a38:	f000 f966 	bl	8003d08 <USBD_CtlError>
  } 
}
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	b004      	add	sp, #16
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	46c0      	nop			; (mov r8, r8)
 8003a44:	20000150 	.word	0x20000150

08003a48 <USBD_SetConfig>:
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetConfig(USB_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	885b      	ldrh	r3, [r3, #2]
 8003a56:	b2da      	uxtb	r2, r3
 8003a58:	4b39      	ldr	r3, [pc, #228]	; (8003b40 <USBD_SetConfig+0xf8>)
 8003a5a:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_CFG_MAX_NUM ) 
 8003a5c:	4b38      	ldr	r3, [pc, #224]	; (8003b40 <USBD_SetConfig+0xf8>)
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d906      	bls.n	8003a72 <USBD_SetConfig+0x2a>
  {            
     USBD_CtlError(pdev , req);                              
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	1c10      	adds	r0, r2, #0
 8003a6a:	1c19      	adds	r1, r3, #0
 8003a6c:	f000 f94c 	bl	8003d08 <USBD_CtlError>
 8003a70:	e063      	b.n	8003b3a <USBD_SetConfig+0xf2>
  } 
  else 
  {
    switch (pdev->dev.device_status) 
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	789b      	ldrb	r3, [r3, #2]
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d002      	beq.n	8003a80 <USBD_SetConfig+0x38>
 8003a7a:	2b03      	cmp	r3, #3
 8003a7c:	d01c      	beq.n	8003ab8 <USBD_SetConfig+0x70>
 8003a7e:	e055      	b.n	8003b2c <USBD_SetConfig+0xe4>
    {
    case USB_ADDRESSED:
      if (cfgidx) 
 8003a80:	4b2f      	ldr	r3, [pc, #188]	; (8003b40 <USBD_SetConfig+0xf8>)
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d012      	beq.n	8003aae <USBD_SetConfig+0x66>
      {                                			   							   							   				
        pdev->dev.device_config = cfgidx;
 8003a88:	4b2d      	ldr	r3, [pc, #180]	; (8003b40 <USBD_SetConfig+0xf8>)
 8003a8a:	781a      	ldrb	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	701a      	strb	r2, [r3, #0]
        pdev->dev.device_status = USB_CONFIGURED;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2203      	movs	r2, #3
 8003a94:	709a      	strb	r2, [r3, #2]
        USBD_SetCfg(pdev , cfgidx);
 8003a96:	4b2a      	ldr	r3, [pc, #168]	; (8003b40 <USBD_SetConfig+0xf8>)
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	1c10      	adds	r0, r2, #0
 8003a9e:	1c19      	adds	r1, r3, #0
 8003aa0:	f000 fc54 	bl	800434c <USBD_SetCfg>
        USBD_CtlSendStatus(pdev);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	1c18      	adds	r0, r3, #0
 8003aa8:	f000 fa2e 	bl	8003f08 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 8003aac:	e045      	b.n	8003b3a <USBD_SetConfig+0xf2>
        USBD_SetCfg(pdev , cfgidx);
        USBD_CtlSendStatus(pdev);
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	1c18      	adds	r0, r3, #0
 8003ab2:	f000 fa29 	bl	8003f08 <USBD_CtlSendStatus>
      }
      break;
 8003ab6:	e040      	b.n	8003b3a <USBD_SetConfig+0xf2>
      
    case USB_CONFIGURED:
      if (cfgidx == 0) 
 8003ab8:	4b21      	ldr	r3, [pc, #132]	; (8003b40 <USBD_SetConfig+0xf8>)
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d112      	bne.n	8003ae6 <USBD_SetConfig+0x9e>
      {                           
        pdev->dev.device_status = USB_ADDRESSED;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	709a      	strb	r2, [r3, #2]
        pdev->dev.device_config = cfgidx;          
 8003ac6:	4b1e      	ldr	r3, [pc, #120]	; (8003b40 <USBD_SetConfig+0xf8>)
 8003ac8:	781a      	ldrb	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	701a      	strb	r2, [r3, #0]
        USBD_ClrCfg(pdev , cfgidx);
 8003ace:	4b1c      	ldr	r3, [pc, #112]	; (8003b40 <USBD_SetConfig+0xf8>)
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	1c10      	adds	r0, r2, #0
 8003ad6:	1c19      	adds	r1, r3, #0
 8003ad8:	f000 fc56 	bl	8004388 <USBD_ClrCfg>
        USBD_CtlSendStatus(pdev);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	1c18      	adds	r0, r3, #0
 8003ae0:	f000 fa12 	bl	8003f08 <USBD_CtlSendStatus>
 8003ae4:	e021      	b.n	8003b2a <USBD_SetConfig+0xe2>
      } 
      else  if (cfgidx != pdev->dev.device_config) 
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	781a      	ldrb	r2, [r3, #0]
 8003aea:	4b15      	ldr	r3, [pc, #84]	; (8003b40 <USBD_SetConfig+0xf8>)
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d016      	beq.n	8003b20 <USBD_SetConfig+0xd8>
      {
        /* Clear old configuration */
        USBD_ClrCfg(pdev , pdev->dev.device_config);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	1c10      	adds	r0, r2, #0
 8003afa:	1c19      	adds	r1, r3, #0
 8003afc:	f000 fc44 	bl	8004388 <USBD_ClrCfg>
        
        /* set new configuration */
        pdev->dev.device_config = cfgidx;
 8003b00:	4b0f      	ldr	r3, [pc, #60]	; (8003b40 <USBD_SetConfig+0xf8>)
 8003b02:	781a      	ldrb	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	701a      	strb	r2, [r3, #0]
        USBD_SetCfg(pdev , cfgidx);
 8003b08:	4b0d      	ldr	r3, [pc, #52]	; (8003b40 <USBD_SetConfig+0xf8>)
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	1c10      	adds	r0, r2, #0
 8003b10:	1c19      	adds	r1, r3, #0
 8003b12:	f000 fc1b 	bl	800434c <USBD_SetCfg>
        USBD_CtlSendStatus(pdev);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	1c18      	adds	r0, r3, #0
 8003b1a:	f000 f9f5 	bl	8003f08 <USBD_CtlSendStatus>
 8003b1e:	e004      	b.n	8003b2a <USBD_SetConfig+0xe2>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	1c18      	adds	r0, r3, #0
 8003b24:	f000 f9f0 	bl	8003f08 <USBD_CtlSendStatus>
      }
      break;
 8003b28:	e007      	b.n	8003b3a <USBD_SetConfig+0xf2>
 8003b2a:	e006      	b.n	8003b3a <USBD_SetConfig+0xf2>
      
    default:					
       USBD_CtlError(pdev , req);                     
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	1c10      	adds	r0, r2, #0
 8003b32:	1c19      	adds	r1, r3, #0
 8003b34:	f000 f8e8 	bl	8003d08 <USBD_CtlError>
      break;
 8003b38:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	b002      	add	sp, #8
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	20000154 	.word	0x20000154

08003b44 <USBD_GetConfig>:
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USB_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  uint32_t  USBD_default_cfg  = 0;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60fb      	str	r3, [r7, #12]
 
  if (req->wLength != 1) 
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	88db      	ldrh	r3, [r3, #6]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d006      	beq.n	8003b68 <USBD_GetConfig+0x24>
  {                   
     USBD_CtlError(pdev , req);
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	1c10      	adds	r0, r2, #0
 8003b60:	1c19      	adds	r1, r3, #0
 8003b62:	f000 f8d1 	bl	8003d08 <USBD_CtlError>
 8003b66:	e01e      	b.n	8003ba6 <USBD_GetConfig+0x62>
  }
  else 
  {
    switch (pdev->dev.device_status )  
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	789b      	ldrb	r3, [r3, #2]
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d002      	beq.n	8003b76 <USBD_GetConfig+0x32>
 8003b70:	2b03      	cmp	r3, #3
 8003b72:	d009      	beq.n	8003b88 <USBD_GetConfig+0x44>
 8003b74:	e010      	b.n	8003b98 <USBD_GetConfig+0x54>
    {
    case USB_ADDRESSED:                     
      
      USBD_CtlSendData (pdev, 
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	1c3b      	adds	r3, r7, #0
 8003b7a:	330c      	adds	r3, #12
 8003b7c:	1c10      	adds	r0, r2, #0
 8003b7e:	1c19      	adds	r1, r3, #0
 8003b80:	2201      	movs	r2, #1
 8003b82:	f000 f93f 	bl	8003e04 <USBD_CtlSendData>
                        (uint8_t *)&USBD_default_cfg,
                        1);
      break;
 8003b86:	e00e      	b.n	8003ba6 <USBD_GetConfig+0x62>
      
    case USB_CONFIGURED:                   
      
      USBD_CtlSendData (pdev, 
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	1c10      	adds	r0, r2, #0
 8003b8e:	1c19      	adds	r1, r3, #0
 8003b90:	2201      	movs	r2, #1
 8003b92:	f000 f937 	bl	8003e04 <USBD_CtlSendData>
                        &pdev->dev.device_config,
                        1);
      break;
 8003b96:	e006      	b.n	8003ba6 <USBD_GetConfig+0x62>
      
    default:
       USBD_CtlError(pdev , req);
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	1c10      	adds	r0, r2, #0
 8003b9e:	1c19      	adds	r1, r3, #0
 8003ba0:	f000 f8b2 	bl	8003d08 <USBD_CtlError>
      break;
 8003ba4:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	b004      	add	sp, #16
 8003baa:	bd80      	pop	{r7, pc}

08003bac <USBD_GetStatus>:
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USB_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  uint32_t  USBD_cfg_status = 0;  
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60fb      	str	r3, [r7, #12]
  switch (pdev->dev.device_status) 
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	789b      	ldrb	r3, [r3, #2]
 8003bbe:	3b02      	subs	r3, #2
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d812      	bhi.n	8003bea <USBD_GetStatus+0x3e>
  {
  case USB_ADDRESSED:
  case USB_CONFIGURED:
    
#ifdef USBD_SELF_POWERED
    USBD_cfg_status = USB_CONFIG_SELF_POWERED;                                    
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	60fb      	str	r3, [r7, #12]
#else
    USBD_cfg_status = 0x00;                                    
#endif
                      
    if (pdev->dev.DevRemoteWakeup) 
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <USBD_GetStatus+0x2c>
    {
      USBD_cfg_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	60fb      	str	r3, [r7, #12]
    }
    
    USBD_CtlSendData (pdev, 
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	1c3b      	adds	r3, r7, #0
 8003bdc:	330c      	adds	r3, #12
 8003bde:	1c10      	adds	r0, r2, #0
 8003be0:	1c19      	adds	r1, r3, #0
 8003be2:	2202      	movs	r2, #2
 8003be4:	f000 f90e 	bl	8003e04 <USBD_CtlSendData>
                      (uint8_t *)&USBD_cfg_status,
                      2);
    break;
 8003be8:	e006      	b.n	8003bf8 <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	1c10      	adds	r0, r2, #0
 8003bf0:	1c19      	adds	r1, r3, #0
 8003bf2:	f000 f889 	bl	8003d08 <USBD_CtlError>
    break;
 8003bf6:	46c0      	nop			; (mov r8, r8)
  }
}
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	b004      	add	sp, #16
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	46c0      	nop			; (mov r8, r8)

08003c00 <USBD_SetFeature>:
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USB_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
 
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	885b      	ldrh	r3, [r3, #2]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d110      	bne.n	8003c34 <USBD_SetFeature+0x34>
  {
    pdev->dev.DevRemoteWakeup = 1;  
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	609a      	str	r2, [r3, #8]
    pdev->dev.class_cb->Setup (pdev, req);   
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	23ac      	movs	r3, #172	; 0xac
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	58d3      	ldr	r3, [r2, r3]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	6879      	ldr	r1, [r7, #4]
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	1c08      	adds	r0, r1, #0
 8003c28:	1c11      	adds	r1, r2, #0
 8003c2a:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	1c18      	adds	r0, r3, #0
 8003c30:	f000 f96a 	bl	8003f08 <USBD_CtlSendStatus>
  }
}
 8003c34:	46bd      	mov	sp, r7
 8003c36:	b002      	add	sp, #8
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	46c0      	nop			; (mov r8, r8)

08003c3c <USBD_ClrFeature>:
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USB_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  switch (pdev->dev.device_status)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	789b      	ldrb	r3, [r3, #2]
 8003c4a:	3b02      	subs	r3, #2
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d816      	bhi.n	8003c7e <USBD_ClrFeature+0x42>
  {
  case USB_ADDRESSED:
  case USB_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	885b      	ldrh	r3, [r3, #2]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d111      	bne.n	8003c7c <USBD_ClrFeature+0x40>
    {
      pdev->dev.DevRemoteWakeup = 0; 
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	609a      	str	r2, [r3, #8]
      pdev->dev.class_cb->Setup (pdev, req);   
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	23ac      	movs	r3, #172	; 0xac
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	58d3      	ldr	r3, [r2, r3]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	6879      	ldr	r1, [r7, #4]
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	1c08      	adds	r0, r1, #0
 8003c6e:	1c11      	adds	r1, r2, #0
 8003c70:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	1c18      	adds	r0, r3, #0
 8003c76:	f000 f947 	bl	8003f08 <USBD_CtlSendStatus>
    }
    break;
 8003c7a:	e007      	b.n	8003c8c <USBD_ClrFeature+0x50>
 8003c7c:	e006      	b.n	8003c8c <USBD_ClrFeature+0x50>
    
  default :
     USBD_CtlError(pdev , req);
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	1c10      	adds	r0, r2, #0
 8003c84:	1c19      	adds	r1, r3, #0
 8003c86:	f000 f83f 	bl	8003d08 <USBD_CtlError>
    break;
 8003c8a:	46c0      	nop			; (mov r8, r8)
  }
}
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	b002      	add	sp, #8
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	46c0      	nop			; (mov r8, r8)

08003c94 <USBD_ParseSetupRequest>:
  * @retval None
  */

void USBD_ParseSetupRequest( USB_CORE_HANDLE  *pdev,
                            USB_SETUP_REQ *req)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdev->dev.setup_packet);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	7c1a      	ldrb	r2, [r3, #16]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdev->dev.setup_packet +  1);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	7c5a      	ldrb	r2, [r3, #17]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdev->dev.setup_packet +  2);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	7c9b      	ldrb	r3, [r3, #18]
 8003cb2:	1c1a      	adds	r2, r3, #0
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	7cdb      	ldrb	r3, [r3, #19]
 8003cb8:	021b      	lsls	r3, r3, #8
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	18d3      	adds	r3, r2, r3
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdev->dev.setup_packet +  4);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	7d1b      	ldrb	r3, [r3, #20]
 8003cc8:	1c1a      	adds	r2, r3, #0
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	7d5b      	ldrb	r3, [r3, #21]
 8003cce:	021b      	lsls	r3, r3, #8
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	18d3      	adds	r3, r2, r3
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdev->dev.setup_packet +  6);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	7d9b      	ldrb	r3, [r3, #22]
 8003cde:	1c1a      	adds	r2, r3, #0
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	7ddb      	ldrb	r3, [r3, #23]
 8003ce4:	021b      	lsls	r3, r3, #8
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	18d3      	adds	r3, r2, r3
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	80da      	strh	r2, [r3, #6]
  
  pdev->dev.in_ep[0].ctl_data_len = req->wLength  ;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	88db      	ldrh	r3, [r3, #6]
 8003cf4:	1c1a      	adds	r2, r3, #0
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	63da      	str	r2, [r3, #60]	; 0x3c
  pdev->dev.device_state = USB_EP0_SETUP;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	705a      	strb	r2, [r3, #1]
}
 8003d00:	46bd      	mov	sp, r7
 8003d02:	b002      	add	sp, #8
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	46c0      	nop			; (mov r8, r8)

08003d08 <USBD_CtlError>:
  * @retval None
  */

void USBD_CtlError( USB_CORE_HANDLE  *pdev,
                            USB_SETUP_REQ *req)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  DCD_EP_Stall(pdev , 0);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	1c18      	adds	r0, r3, #0
 8003d16:	2100      	movs	r1, #0
 8003d18:	f001 fc46 	bl	80055a8 <DCD_EP_Stall>
}
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	b002      	add	sp, #8
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	46c0      	nop			; (mov r8, r8)

08003d24 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 8003d30:	1c3b      	adds	r3, r7, #0
 8003d32:	3317      	adds	r3, #23
 8003d34:	2200      	movs	r2, #0
 8003d36:	701a      	strb	r2, [r3, #0]
  
  if (desc != NULL) 
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d040      	beq.n	8003dc0 <USBD_GetString+0x9c>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	1c18      	adds	r0, r3, #0
 8003d42:	f000 f841 	bl	8003dc8 <USBD_GetLen>
 8003d46:	1c03      	adds	r3, r0, #0
 8003d48:	3301      	adds	r3, #1
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	18db      	adds	r3, r3, r3
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 8003d54:	1c3b      	adds	r3, r7, #0
 8003d56:	3317      	adds	r3, #23
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	1c3a      	adds	r2, r7, #0
 8003d5c:	3217      	adds	r2, #23
 8003d5e:	1c59      	adds	r1, r3, #1
 8003d60:	7011      	strb	r1, [r2, #0]
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	18d3      	adds	r3, r2, r3
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	8812      	ldrh	r2, [r2, #0]
 8003d6a:	b2d2      	uxtb	r2, r2
 8003d6c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8003d6e:	1c3b      	adds	r3, r7, #0
 8003d70:	3317      	adds	r3, #23
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	1c3a      	adds	r2, r7, #0
 8003d76:	3217      	adds	r2, #23
 8003d78:	1c59      	adds	r1, r3, #1
 8003d7a:	7011      	strb	r1, [r2, #0]
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	18d3      	adds	r3, r2, r3
 8003d80:	2203      	movs	r2, #3
 8003d82:	701a      	strb	r2, [r3, #0]
    
    while (*desc != NULL) 
 8003d84:	e018      	b.n	8003db8 <USBD_GetString+0x94>
    {
      unicode[idx++] = *desc++;
 8003d86:	1c3b      	adds	r3, r7, #0
 8003d88:	3317      	adds	r3, #23
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	1c3a      	adds	r2, r7, #0
 8003d8e:	3217      	adds	r2, #23
 8003d90:	1c59      	adds	r1, r3, #1
 8003d92:	7011      	strb	r1, [r2, #0]
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	18d2      	adds	r2, r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	1c59      	adds	r1, r3, #1
 8003d9c:	60f9      	str	r1, [r7, #12]
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 8003da2:	1c3b      	adds	r3, r7, #0
 8003da4:	3317      	adds	r3, #23
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	1c3a      	adds	r2, r7, #0
 8003daa:	3217      	adds	r2, #23
 8003dac:	1c59      	adds	r1, r3, #1
 8003dae:	7011      	strb	r1, [r2, #0]
 8003db0:	68ba      	ldr	r2, [r7, #8]
 8003db2:	18d3      	adds	r3, r2, r3
 8003db4:	2200      	movs	r2, #0
 8003db6:	701a      	strb	r2, [r3, #0]
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
    unicode[idx++] = *len;
    unicode[idx++] =  USB_DESC_TYPE_STRING;
    
    while (*desc != NULL) 
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1e2      	bne.n	8003d86 <USBD_GetString+0x62>
    {
      unicode[idx++] = *desc++;
      unicode[idx++] =  0x00;
    }
  } 
}
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	b006      	add	sp, #24
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	46c0      	nop			; (mov r8, r8)

08003dc8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 8003dd0:	1c3b      	adds	r3, r7, #0
 8003dd2:	330f      	adds	r3, #15
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	701a      	strb	r2, [r3, #0]

    while (*buf != NULL) 
 8003dd8:	e009      	b.n	8003dee <USBD_GetLen+0x26>
    {
        len++;
 8003dda:	1c3b      	adds	r3, r7, #0
 8003ddc:	330f      	adds	r3, #15
 8003dde:	781a      	ldrb	r2, [r3, #0]
 8003de0:	1c3b      	adds	r3, r7, #0
 8003de2:	330f      	adds	r3, #15
 8003de4:	3201      	adds	r2, #1
 8003de6:	701a      	strb	r2, [r3, #0]
        buf++;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3301      	adds	r3, #1
 8003dec:	607b      	str	r3, [r7, #4]
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != NULL) 
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1f1      	bne.n	8003dda <USBD_GetLen+0x12>
    {
        len++;
        buf++;
    }

    return len;
 8003df6:	1c3b      	adds	r3, r7, #0
 8003df8:	330f      	adds	r3, #15
 8003dfa:	781b      	ldrb	r3, [r3, #0]
}
 8003dfc:	1c18      	adds	r0, r3, #0
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	b004      	add	sp, #16
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <USBD_CtlSendData>:
  * @retval status
  */
USBD_Status  USBD_CtlSendData (USB_CORE_HANDLE  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	1dbb      	adds	r3, r7, #6
 8003e10:	801a      	strh	r2, [r3, #0]
  USBD_Status ret = USBD_OK;
 8003e12:	1c3b      	adds	r3, r7, #0
 8003e14:	3317      	adds	r3, #23
 8003e16:	2200      	movs	r2, #0
 8003e18:	701a      	strb	r2, [r3, #0]
  
  pdev->dev.in_ep[0].total_data_len = len;
 8003e1a:	1dbb      	adds	r3, r7, #6
 8003e1c:	881a      	ldrh	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	639a      	str	r2, [r3, #56]	; 0x38
  pdev->dev.in_ep[0].rem_data_len   = len;
 8003e22:	1dbb      	adds	r3, r7, #6
 8003e24:	881a      	ldrh	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	635a      	str	r2, [r3, #52]	; 0x34
  pdev->dev.device_state = USB_EP0_DATA_IN;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2202      	movs	r2, #2
 8003e2e:	705a      	strb	r2, [r3, #1]

  DCD_EP_Tx (pdev, 0, pbuf, len);
 8003e30:	1dbb      	adds	r3, r7, #6
 8003e32:	881b      	ldrh	r3, [r3, #0]
 8003e34:	68f9      	ldr	r1, [r7, #12]
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	1c08      	adds	r0, r1, #0
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	f001 fb18 	bl	8005470 <DCD_EP_Tx>
 
  return ret;
 8003e40:	1c3b      	adds	r3, r7, #0
 8003e42:	3317      	adds	r3, #23
 8003e44:	781b      	ldrb	r3, [r3, #0]
}
 8003e46:	1c18      	adds	r0, r3, #0
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	b006      	add	sp, #24
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	46c0      	nop			; (mov r8, r8)

08003e50 <USBD_CtlContinueSendData>:
  * @retval status
  */
USBD_Status  USBD_CtlContinueSendData (USB_CORE_HANDLE  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	1dbb      	adds	r3, r7, #6
 8003e5c:	801a      	strh	r2, [r3, #0]
  USBD_Status ret = USBD_OK;
 8003e5e:	1c3b      	adds	r3, r7, #0
 8003e60:	3317      	adds	r3, #23
 8003e62:	2200      	movs	r2, #0
 8003e64:	701a      	strb	r2, [r3, #0]
  
  DCD_EP_Tx (pdev, 0, pbuf, len);
 8003e66:	1dbb      	adds	r3, r7, #6
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	68f9      	ldr	r1, [r7, #12]
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	1c08      	adds	r0, r1, #0
 8003e70:	2100      	movs	r1, #0
 8003e72:	f001 fafd 	bl	8005470 <DCD_EP_Tx>
  
  
  return ret;
 8003e76:	1c3b      	adds	r3, r7, #0
 8003e78:	3317      	adds	r3, #23
 8003e7a:	781b      	ldrb	r3, [r3, #0]
}
 8003e7c:	1c18      	adds	r0, r3, #0
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	b006      	add	sp, #24
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <USBD_CtlPrepareRx>:
  * @retval status
  */
USBD_Status  USBD_CtlPrepareRx (USB_CORE_HANDLE  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	1dbb      	adds	r3, r7, #6
 8003e90:	801a      	strh	r2, [r3, #0]
  USBD_Status ret = USBD_OK;
 8003e92:	1c3b      	adds	r3, r7, #0
 8003e94:	3317      	adds	r3, #23
 8003e96:	2200      	movs	r2, #0
 8003e98:	701a      	strb	r2, [r3, #0]
  
  pdev->dev.out_ep[0].total_data_len = len;
 8003e9a:	1dbb      	adds	r3, r7, #6
 8003e9c:	8819      	ldrh	r1, [r3, #0]
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	23d8      	movs	r3, #216	; 0xd8
 8003ea2:	50d1      	str	r1, [r2, r3]
  pdev->dev.out_ep[0].rem_data_len   = len;
 8003ea4:	1dbb      	adds	r3, r7, #6
 8003ea6:	8819      	ldrh	r1, [r3, #0]
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	23d4      	movs	r3, #212	; 0xd4
 8003eac:	50d1      	str	r1, [r2, r3]
  pdev->dev.device_state = USB_EP0_DATA_OUT;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2203      	movs	r2, #3
 8003eb2:	705a      	strb	r2, [r3, #1]
  
  DCD_EP_PrepareRx (pdev,
 8003eb4:	68f9      	ldr	r1, [r7, #12]
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	1dbb      	adds	r3, r7, #6
 8003eba:	881b      	ldrh	r3, [r3, #0]
 8003ebc:	1c08      	adds	r0, r1, #0
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	f001 fa74 	bl	80053ac <DCD_EP_PrepareRx>
                    0,
                    pbuf,
                    len);
  

  return ret;
 8003ec4:	1c3b      	adds	r3, r7, #0
 8003ec6:	3317      	adds	r3, #23
 8003ec8:	781b      	ldrb	r3, [r3, #0]
}
 8003eca:	1c18      	adds	r0, r3, #0
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	b006      	add	sp, #24
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	46c0      	nop			; (mov r8, r8)

08003ed4 <USBD_CtlContinueRx>:
  * @retval status
  */
USBD_Status  USBD_CtlContinueRx (USB_CORE_HANDLE  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	1dbb      	adds	r3, r7, #6
 8003ee0:	801a      	strh	r2, [r3, #0]
  USBD_Status ret = USBD_OK;
 8003ee2:	1c3b      	adds	r3, r7, #0
 8003ee4:	3317      	adds	r3, #23
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	701a      	strb	r2, [r3, #0]
  
  DCD_EP_PrepareRx (pdev,
 8003eea:	68f9      	ldr	r1, [r7, #12]
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	1dbb      	adds	r3, r7, #6
 8003ef0:	881b      	ldrh	r3, [r3, #0]
 8003ef2:	1c08      	adds	r0, r1, #0
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	f001 fa59 	bl	80053ac <DCD_EP_PrepareRx>
                    0,                     
                    pbuf,                         
                    len);
  return ret;
 8003efa:	1c3b      	adds	r3, r7, #0
 8003efc:	3317      	adds	r3, #23
 8003efe:	781b      	ldrb	r3, [r3, #0]
}
 8003f00:	1c18      	adds	r0, r3, #0
 8003f02:	46bd      	mov	sp, r7
 8003f04:	b006      	add	sp, #24
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <USBD_CtlSendStatus>:
  *         send zero length packet on the ctl pipe
  * @param  pdev: USB device instance
  * @retval status
  */
USBD_Status  USBD_CtlSendStatus (USB_CORE_HANDLE  *pdev)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  USBD_Status ret = USBD_OK;
 8003f10:	1c3b      	adds	r3, r7, #0
 8003f12:	330f      	adds	r3, #15
 8003f14:	2200      	movs	r2, #0
 8003f16:	701a      	strb	r2, [r3, #0]
  pdev->dev.device_state = USB_EP0_STATUS_IN;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2204      	movs	r2, #4
 8003f1c:	705a      	strb	r2, [r3, #1]
  DCD_EP_Tx (pdev,
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	1c18      	adds	r0, r3, #0
 8003f22:	2100      	movs	r1, #0
 8003f24:	2200      	movs	r2, #0
 8003f26:	2300      	movs	r3, #0
 8003f28:	f001 faa2 	bl	8005470 <DCD_EP_Tx>
             0,
             NULL, 
             0); 
  return ret;
 8003f2c:	1c3b      	adds	r3, r7, #0
 8003f2e:	330f      	adds	r3, #15
 8003f30:	781b      	ldrb	r3, [r3, #0]
}
 8003f32:	1c18      	adds	r0, r3, #0
 8003f34:	46bd      	mov	sp, r7
 8003f36:	b004      	add	sp, #16
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	46c0      	nop			; (mov r8, r8)

08003f3c <USBD_CtlReceiveStatus>:
  *         receive zero length packet on the ctl pipe
  * @param  pdev: USB device instance
  * @retval status
  */
USBD_Status  USBD_CtlReceiveStatus (USB_CORE_HANDLE  *pdev)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  USBD_Status ret = USBD_OK;
 8003f44:	1c3b      	adds	r3, r7, #0
 8003f46:	330f      	adds	r3, #15
 8003f48:	2200      	movs	r2, #0
 8003f4a:	701a      	strb	r2, [r3, #0]
  pdev->dev.device_state = USB_EP0_STATUS_OUT;  
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2205      	movs	r2, #5
 8003f50:	705a      	strb	r2, [r3, #1]
  DCD_EP_PrepareRx ( pdev,
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	1c18      	adds	r0, r3, #0
 8003f56:	2100      	movs	r1, #0
 8003f58:	2200      	movs	r2, #0
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	f001 fa26 	bl	80053ac <DCD_EP_PrepareRx>
                    0,
                    NULL,
                    0); 
  
  return ret;
 8003f60:	1c3b      	adds	r3, r7, #0
 8003f62:	330f      	adds	r3, #15
 8003f64:	781b      	ldrb	r3, [r3, #0]
}
 8003f66:	1c18      	adds	r0, r3, #0
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	b004      	add	sp, #16
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	46c0      	nop			; (mov r8, r8)

08003f70 <USBD_Init>:
  */
void USBD_Init(USB_CORE_HANDLE *pdev,
               USBD_DEVICE *pDevice,                  
               USBD_Class_cb_TypeDef *class_cb, 
               USBD_Usr_cb_TypeDef *usr_cb)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
 8003f7c:	603b      	str	r3, [r7, #0]
  /* Hardware Init */
  USB_BSP_Init(pdev);  
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	1c18      	adds	r0, r3, #0
 8003f82:	f7fe fac1 	bl	8002508 <USB_BSP_Init>
  
  USBD_DeInit(pdev);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	1c18      	adds	r0, r3, #0
 8003f8a:	f000 f827 	bl	8003fdc <USBD_DeInit>
  
  /*Register class and user callbacks */
  pdev->dev.class_cb = class_cb;
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	23ac      	movs	r3, #172	; 0xac
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	6879      	ldr	r1, [r7, #4]
 8003f96:	50d1      	str	r1, [r2, r3]
  pdev->dev.usr_cb = usr_cb;  
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	23ae      	movs	r3, #174	; 0xae
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	6839      	ldr	r1, [r7, #0]
 8003fa0:	50d1      	str	r1, [r2, r3]
  pdev->dev.usr_device = pDevice;    
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	23b0      	movs	r3, #176	; 0xb0
 8003fa6:	005b      	lsls	r3, r3, #1
 8003fa8:	68b9      	ldr	r1, [r7, #8]
 8003faa:	50d1      	str	r1, [r2, r3]
  
  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 8003fac:	f7fe fa34 	bl	8002418 <Get_SerialNum>
  
  /* set USB DEVICE core params */
  DCD_Init(pdev);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	1c18      	adds	r0, r3, #0
 8003fb4:	f000 ffe0 	bl	8004f78 <DCD_Init>
  
  /* Upon Init call usr callback */
  pdev->dev.usr_cb->Init();
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	23ae      	movs	r3, #174	; 0xae
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	58d3      	ldr	r3, [r2, r3]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4798      	blx	r3
//  dbgLED_off();
//  delay(500);


  /* Enable Interrupts */
  USB_BSP_EnableInterrupt(pdev);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	1c18      	adds	r0, r3, #0
 8003fc8:	f7fe fab0 	bl	800252c <USB_BSP_EnableInterrupt>
//  delay(500);
  //TODO: Program flow works till here!

  /* Enable the pull-up */
//#ifdef INTERNAL_PULLUP
  DCD_DevConnect(pdev);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	1c18      	adds	r0, r3, #0
 8003fd0:	f001 fbe0 	bl	8005794 <DCD_DevConnect>
//  dbgLED_on();
//#else
// USB_BSP_DevConnect(pdev);
//#endif
  //TODO: but it's already stuck here!
}
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	b004      	add	sp, #16
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	46c0      	nop			; (mov r8, r8)

08003fdc <USBD_DeInit>:
  *         Re-Initialize th device library
  * @param  pdev: device instance
  * @retval status: status
  */
USBD_Status USBD_DeInit(USB_CORE_HANDLE *pdev)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* Software Init */
  
  return USBD_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	1c18      	adds	r0, r3, #0
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	b002      	add	sp, #8
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	46c0      	nop			; (mov r8, r8)

08003ff0 <USBD_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_SetupStage(USB_CORE_HANDLE *pdev)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  USB_SETUP_REQ req;
  
  USBD_ParseSetupRequest(pdev , &req);
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	1c3b      	adds	r3, r7, #0
 8003ffc:	3308      	adds	r3, #8
 8003ffe:	1c10      	adds	r0, r2, #0
 8004000:	1c19      	adds	r1, r3, #0
 8004002:	f7ff fe47 	bl	8003c94 <USBD_ParseSetupRequest>
  
  switch (req.bmRequest & 0x1F) 
 8004006:	1c3b      	adds	r3, r7, #0
 8004008:	3308      	adds	r3, #8
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	1c1a      	adds	r2, r3, #0
 800400e:	231f      	movs	r3, #31
 8004010:	4013      	ands	r3, r2
 8004012:	2b01      	cmp	r3, #1
 8004014:	d00b      	beq.n	800402e <USBD_SetupStage+0x3e>
 8004016:	2b02      	cmp	r3, #2
 8004018:	d011      	beq.n	800403e <USBD_SetupStage+0x4e>
 800401a:	2b00      	cmp	r3, #0
 800401c:	d117      	bne.n	800404e <USBD_SetupStage+0x5e>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &req);
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	1c3b      	adds	r3, r7, #0
 8004022:	3308      	adds	r3, #8
 8004024:	1c10      	adds	r0, r2, #0
 8004026:	1c19      	adds	r1, r3, #0
 8004028:	f7ff fa2e 	bl	8003488 <USBD_StdDevReq>
    break;
 800402c:	e01b      	b.n	8004066 <USBD_SetupStage+0x76>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &req);
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	1c3b      	adds	r3, r7, #0
 8004032:	3308      	adds	r3, #8
 8004034:	1c10      	adds	r0, r2, #0
 8004036:	1c19      	adds	r1, r3, #0
 8004038:	f7ff fa7a 	bl	8003530 <USBD_StdItfReq>
    break;
 800403c:	e013      	b.n	8004066 <USBD_SetupStage+0x76>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &req);   
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	1c3b      	adds	r3, r7, #0
 8004042:	3308      	adds	r3, #8
 8004044:	1c10      	adds	r0, r2, #0
 8004046:	1c19      	adds	r1, r3, #0
 8004048:	f7ff fab6 	bl	80035b8 <USBD_StdEPReq>
    break;
 800404c:	e00b      	b.n	8004066 <USBD_SetupStage+0x76>
    
  default:           
    DCD_EP_Stall(pdev , req.bmRequest & 0x80);
 800404e:	1c3b      	adds	r3, r7, #0
 8004050:	3308      	adds	r3, #8
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	227f      	movs	r2, #127	; 0x7f
 8004056:	4393      	bics	r3, r2
 8004058:	b2db      	uxtb	r3, r3
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	1c10      	adds	r0, r2, #0
 800405e:	1c19      	adds	r1, r3, #0
 8004060:	f001 faa2 	bl	80055a8 <DCD_EP_Stall>
    break;
 8004064:	46c0      	nop			; (mov r8, r8)
  }  
  return USBD_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	1c18      	adds	r0, r3, #0
 800406a:	46bd      	mov	sp, r7
 800406c:	b004      	add	sp, #16
 800406e:	bd80      	pop	{r7, pc}

08004070 <USBD_DataOutStage>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_DataOutStage(USB_CORE_HANDLE *pdev , uint8_t epnum)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	1c0a      	adds	r2, r1, #0
 800407a:	1cfb      	adds	r3, r7, #3
 800407c:	701a      	strb	r2, [r3, #0]
  USB_EP *ep;
  
  if(epnum == 0) 
 800407e:	1cfb      	adds	r3, r7, #3
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d13c      	bne.n	8004100 <USBD_DataOutStage+0x90>
  {
    ep = &pdev->dev.out_ep[0];
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	33b8      	adds	r3, #184	; 0xb8
 800408a:	60fb      	str	r3, [r7, #12]
    if ( pdev->dev.device_state == USB_EP0_DATA_OUT)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	785b      	ldrb	r3, [r3, #1]
 8004090:	2b03      	cmp	r3, #3
 8004092:	d14b      	bne.n	800412c <USBD_DataOutStage+0xbc>
    {
      if(ep->rem_data_len > ep->maxpacket)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	69da      	ldr	r2, [r3, #28]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	429a      	cmp	r2, r3
 800409e:	d917      	bls.n	80040d0 <USBD_DataOutStage+0x60>
      {
        ep->rem_data_len -=  ep->maxpacket;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	69da      	ldr	r2, [r3, #28]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	1ad2      	subs	r2, r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	61da      	str	r2, [r3, #28]
                
        USBD_CtlContinueRx (pdev, 
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6919      	ldr	r1, [r3, #16]
                            ep->xfer_buff,
                            MIN(ep->rem_data_len ,ep->maxpacket));
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	68d8      	ldr	r0, [r3, #12]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	69da      	ldr	r2, [r3, #28]
 80040ba:	1c03      	adds	r3, r0, #0
 80040bc:	4293      	cmp	r3, r2
 80040be:	d900      	bls.n	80040c2 <USBD_DataOutStage+0x52>
 80040c0:	1c13      	adds	r3, r2, #0
    {
      if(ep->rem_data_len > ep->maxpacket)
      {
        ep->rem_data_len -=  ep->maxpacket;
                
        USBD_CtlContinueRx (pdev, 
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	1c10      	adds	r0, r2, #0
 80040c8:	1c1a      	adds	r2, r3, #0
 80040ca:	f7ff ff03 	bl	8003ed4 <USBD_CtlContinueRx>
 80040ce:	e02d      	b.n	800412c <USBD_DataOutStage+0xbc>
                            ep->xfer_buff,
                            MIN(ep->rem_data_len ,ep->maxpacket));
      }
      else
      {
        if((pdev->dev.class_cb->EP0_RxReady != NULL)&&
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	23ac      	movs	r3, #172	; 0xac
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	58d3      	ldr	r3, [r2, r3]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00b      	beq.n	80040f6 <USBD_DataOutStage+0x86>
           (pdev->dev.device_status == USB_CONFIGURED))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	789b      	ldrb	r3, [r3, #2]
                            ep->xfer_buff,
                            MIN(ep->rem_data_len ,ep->maxpacket));
      }
      else
      {
        if((pdev->dev.class_cb->EP0_RxReady != NULL)&&
 80040e2:	2b03      	cmp	r3, #3
 80040e4:	d107      	bne.n	80040f6 <USBD_DataOutStage+0x86>
           (pdev->dev.device_status == USB_CONFIGURED))
        {
          pdev->dev.class_cb->EP0_RxReady(pdev); 
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	23ac      	movs	r3, #172	; 0xac
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	58d3      	ldr	r3, [r2, r3]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	1c10      	adds	r0, r2, #0
 80040f4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	1c18      	adds	r0, r3, #0
 80040fa:	f7ff ff05 	bl	8003f08 <USBD_CtlSendStatus>
 80040fe:	e015      	b.n	800412c <USBD_DataOutStage+0xbc>
      }
    }
  }
  else if((pdev->dev.class_cb->DataOut != NULL)&&
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	23ac      	movs	r3, #172	; 0xac
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	58d3      	ldr	r3, [r2, r3]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00e      	beq.n	800412c <USBD_DataOutStage+0xbc>
          (pdev->dev.device_status == USB_CONFIGURED))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	789b      	ldrb	r3, [r3, #2]
        }
        USBD_CtlSendStatus(pdev);
      }
    }
  }
  else if((pdev->dev.class_cb->DataOut != NULL)&&
 8004112:	2b03      	cmp	r3, #3
 8004114:	d10a      	bne.n	800412c <USBD_DataOutStage+0xbc>
          (pdev->dev.device_status == USB_CONFIGURED))
  {
    pdev->dev.class_cb->DataOut(pdev, epnum); 
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	23ac      	movs	r3, #172	; 0xac
 800411a:	005b      	lsls	r3, r3, #1
 800411c:	58d3      	ldr	r3, [r2, r3]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	6879      	ldr	r1, [r7, #4]
 8004122:	1cfa      	adds	r2, r7, #3
 8004124:	7812      	ldrb	r2, [r2, #0]
 8004126:	1c08      	adds	r0, r1, #0
 8004128:	1c11      	adds	r1, r2, #0
 800412a:	4798      	blx	r3
  }  
  return USBD_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	1c18      	adds	r0, r3, #0
 8004130:	46bd      	mov	sp, r7
 8004132:	b004      	add	sp, #16
 8004134:	bd80      	pop	{r7, pc}
 8004136:	46c0      	nop			; (mov r8, r8)

08004138 <USBD_DataInStage>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_DataInStage(USB_CORE_HANDLE *pdev , uint8_t epnum)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	1c0a      	adds	r2, r1, #0
 8004142:	1cfb      	adds	r3, r7, #3
 8004144:	701a      	strb	r2, [r3, #0]
  USB_EP *ep;
  
  if(epnum == 0) 
 8004146:	1cfb      	adds	r3, r7, #3
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d000      	beq.n	8004150 <USBD_DataInStage+0x18>
 800414e:	e06c      	b.n	800422a <USBD_DataInStage+0xf2>
  {
    ep = &pdev->dev.in_ep[0];
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	3318      	adds	r3, #24
 8004154:	60fb      	str	r3, [r7, #12]
    if ( pdev->dev.device_state == USB_EP0_DATA_IN)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	785b      	ldrb	r3, [r3, #1]
 800415a:	2b02      	cmp	r3, #2
 800415c:	d151      	bne.n	8004202 <USBD_DataInStage+0xca>
    {
      if(ep->rem_data_len > ep->maxpacket)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	69da      	ldr	r2, [r3, #28]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	429a      	cmp	r2, r3
 8004168:	d912      	bls.n	8004190 <USBD_DataInStage+0x58>
      {
        ep->rem_data_len -=  ep->maxpacket;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	69da      	ldr	r2, [r3, #28]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	1ad2      	subs	r2, r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	61da      	str	r2, [r3, #28]
        USBD_CtlContinueSendData (pdev, 
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	691a      	ldr	r2, [r3, #16]
                                  ep->xfer_buff, 
                                  ep->rem_data_len);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	69db      	ldr	r3, [r3, #28]
    if ( pdev->dev.device_state == USB_EP0_DATA_IN)
    {
      if(ep->rem_data_len > ep->maxpacket)
      {
        ep->rem_data_len -=  ep->maxpacket;
        USBD_CtlContinueSendData (pdev, 
 8004180:	b29b      	uxth	r3, r3
 8004182:	6879      	ldr	r1, [r7, #4]
 8004184:	1c08      	adds	r0, r1, #0
 8004186:	1c11      	adds	r1, r2, #0
 8004188:	1c1a      	adds	r2, r3, #0
 800418a:	f7ff fe61 	bl	8003e50 <USBD_CtlContinueSendData>
 800418e:	e062      	b.n	8004256 <USBD_DataInStage+0x11e>
                                  ep->xfer_buff, 
                                  ep->rem_data_len);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((ep->total_data_len % ep->maxpacket == 0) &&
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6a1a      	ldr	r2, [r3, #32]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	1c10      	adds	r0, r2, #0
 800419a:	1c19      	adds	r1, r3, #0
 800419c:	f7fb fff8 	bl	8000190 <__aeabi_uidivmod>
 80041a0:	1c0b      	adds	r3, r1, #0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d115      	bne.n	80041d2 <USBD_DataInStage+0x9a>
           (ep->total_data_len >= ep->maxpacket) &&
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6a1a      	ldr	r2, [r3, #32]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	68db      	ldr	r3, [r3, #12]
                                  ep->xfer_buff, 
                                  ep->rem_data_len);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((ep->total_data_len % ep->maxpacket == 0) &&
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d30f      	bcc.n	80041d2 <USBD_DataInStage+0x9a>
           (ep->total_data_len >= ep->maxpacket) &&
             (ep->total_data_len < ep->ctl_data_len ))
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6a1a      	ldr	r2, [r3, #32]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                  ep->rem_data_len);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((ep->total_data_len % ep->maxpacket == 0) &&
           (ep->total_data_len >= ep->maxpacket) &&
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d209      	bcs.n	80041d2 <USBD_DataInStage+0x9a>
             (ep->total_data_len < ep->ctl_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	1c18      	adds	r0, r3, #0
 80041c2:	2100      	movs	r1, #0
 80041c4:	2200      	movs	r2, #0
 80041c6:	f7ff fe43 	bl	8003e50 <USBD_CtlContinueSendData>
          ep->ctl_data_len = 0;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	625a      	str	r2, [r3, #36]	; 0x24
 80041d0:	e041      	b.n	8004256 <USBD_DataInStage+0x11e>
        }
        else
        {
          if((pdev->dev.class_cb->EP0_TxSent != NULL)&&
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	23ac      	movs	r3, #172	; 0xac
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	58d3      	ldr	r3, [r2, r3]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00b      	beq.n	80041f8 <USBD_DataInStage+0xc0>
             (pdev->dev.device_status == USB_CONFIGURED))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	789b      	ldrb	r3, [r3, #2]
          USBD_CtlContinueSendData(pdev , NULL, 0);
          ep->ctl_data_len = 0;
        }
        else
        {
          if((pdev->dev.class_cb->EP0_TxSent != NULL)&&
 80041e4:	2b03      	cmp	r3, #3
 80041e6:	d107      	bne.n	80041f8 <USBD_DataInStage+0xc0>
             (pdev->dev.device_status == USB_CONFIGURED))
          {
            pdev->dev.class_cb->EP0_TxSent(pdev); 
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	23ac      	movs	r3, #172	; 0xac
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	58d3      	ldr	r3, [r2, r3]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	1c10      	adds	r0, r2, #0
 80041f6:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	1c18      	adds	r0, r3, #0
 80041fc:	f7ff fe9e 	bl	8003f3c <USBD_CtlReceiveStatus>
 8004200:	e029      	b.n	8004256 <USBD_DataInStage+0x11e>
        }
      }
    }
    else  if ((pdev->dev.device_state == USB_EP0_STATUS_IN)&& (ADDRESS!=0))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	785b      	ldrb	r3, [r3, #1]
 8004206:	2b04      	cmp	r3, #4
 8004208:	d125      	bne.n	8004256 <USBD_DataInStage+0x11e>
 800420a:	4b15      	ldr	r3, [pc, #84]	; (8004260 <USBD_DataInStage+0x128>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d021      	beq.n	8004256 <USBD_DataInStage+0x11e>
    {
      
      DCD_EP_SetAddress(pdev, ADDRESS); 
 8004212:	4b13      	ldr	r3, [pc, #76]	; (8004260 <USBD_DataInStage+0x128>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	b2db      	uxtb	r3, r3
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	1c10      	adds	r0, r2, #0
 800421c:	1c19      	adds	r1, r3, #0
 800421e:	f001 fa7b 	bl	8005718 <DCD_EP_SetAddress>
      ADDRESS = 0;
 8004222:	4b0f      	ldr	r3, [pc, #60]	; (8004260 <USBD_DataInStage+0x128>)
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	e015      	b.n	8004256 <USBD_DataInStage+0x11e>
    }
  }
  else if((pdev->dev.class_cb->DataIn != NULL)&& 
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	23ac      	movs	r3, #172	; 0xac
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	58d3      	ldr	r3, [r2, r3]
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00e      	beq.n	8004256 <USBD_DataInStage+0x11e>
          (pdev->dev.device_status == USB_CONFIGURED))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	789b      	ldrb	r3, [r3, #2]
      
      DCD_EP_SetAddress(pdev, ADDRESS); 
      ADDRESS = 0;
    }
  }
  else if((pdev->dev.class_cb->DataIn != NULL)&& 
 800423c:	2b03      	cmp	r3, #3
 800423e:	d10a      	bne.n	8004256 <USBD_DataInStage+0x11e>
          (pdev->dev.device_status == USB_CONFIGURED))
  {
    pdev->dev.class_cb->DataIn(pdev, epnum); 
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	23ac      	movs	r3, #172	; 0xac
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	58d3      	ldr	r3, [r2, r3]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	6879      	ldr	r1, [r7, #4]
 800424c:	1cfa      	adds	r2, r7, #3
 800424e:	7812      	ldrb	r2, [r2, #0]
 8004250:	1c08      	adds	r0, r1, #0
 8004252:	1c11      	adds	r1, r2, #0
 8004254:	4798      	blx	r3
  }  
  return USBD_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	1c18      	adds	r0, r3, #0
 800425a:	46bd      	mov	sp, r7
 800425c:	b004      	add	sp, #16
 800425e:	bd80      	pop	{r7, pc}
 8004260:	20000150 	.word	0x20000150

08004264 <USBD_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

static uint8_t USBD_Reset(USB_CORE_HANDLE  *pdev)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]

  DCD_PMA_Config(pdev , 0x00 ,USB_SNG_BUF, ENDP0_RX_ADDRESS);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	1c18      	adds	r0, r3, #0
 8004270:	2100      	movs	r1, #0
 8004272:	2200      	movs	r2, #0
 8004274:	2340      	movs	r3, #64	; 0x40
 8004276:	f000 feab 	bl	8004fd0 <DCD_PMA_Config>
  DCD_PMA_Config(pdev , 0x80 ,USB_SNG_BUF, ENDP0_TX_ADDRESS);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	1c18      	adds	r0, r3, #0
 800427e:	2180      	movs	r1, #128	; 0x80
 8004280:	2200      	movs	r2, #0
 8004282:	2380      	movs	r3, #128	; 0x80
 8004284:	f000 fea4 	bl	8004fd0 <DCD_PMA_Config>

  /* Open EP0 OUT */
  DCD_EP_Open(pdev,
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	1c18      	adds	r0, r3, #0
 800428c:	2100      	movs	r1, #0
 800428e:	2240      	movs	r2, #64	; 0x40
 8004290:	2300      	movs	r3, #0
 8004292:	f000 fee7 	bl	8005064 <DCD_EP_Open>
              0x00,
              USB_MAX_EP0_SIZE,
              EP_TYPE_CTRL);
  
  /* Open EP0 IN */
  DCD_EP_Open(pdev,
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	1c18      	adds	r0, r3, #0
 800429a:	2180      	movs	r1, #128	; 0x80
 800429c:	2240      	movs	r2, #64	; 0x40
 800429e:	2300      	movs	r3, #0
 80042a0:	f000 fee0 	bl	8005064 <DCD_EP_Open>
              0x80,
              USB_MAX_EP0_SIZE,
              EP_TYPE_CTRL);
  
  /* Upon Reset call user call back */
  pdev->dev.device_status = USB_DEFAULT;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	709a      	strb	r2, [r3, #2]
  pdev->dev.usr_cb->DeviceReset(pdev->dev.speed);
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	23ae      	movs	r3, #174	; 0xae
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	58d3      	ldr	r3, [r2, r3]
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	1c18      	adds	r0, r3, #0
 80042bc:	4790      	blx	r2
  
  return USBD_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	1c18      	adds	r0, r3, #0
 80042c2:	46bd      	mov	sp, r7
 80042c4:	b002      	add	sp, #8
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <USBD_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

static uint8_t USBD_Resume(USB_CORE_HANDLE  *pdev)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Upon Resume call user call back */
  pdev->dev.usr_cb->DeviceResumed(); 
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	23ae      	movs	r3, #174	; 0xae
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	58d3      	ldr	r3, [r2, r3]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	4798      	blx	r3
  pdev->dev.device_status = pdev->dev.device_old_status;   
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	78da      	ldrb	r2, [r3, #3]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	709a      	strb	r2, [r3, #2]
  return USBD_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	1c18      	adds	r0, r3, #0
 80042e8:	46bd      	mov	sp, r7
 80042ea:	b002      	add	sp, #8
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	46c0      	nop			; (mov r8, r8)

080042f0 <USBD_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

static uint8_t USBD_Suspend(USB_CORE_HANDLE  *pdev)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  pdev->dev.device_old_status = pdev->dev.device_status;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	789a      	ldrb	r2, [r3, #2]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	70da      	strb	r2, [r3, #3]
  /*Device is in Suspended State*/
  pdev->dev.device_status  = USB_SUSPENDED;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2204      	movs	r2, #4
 8004304:	709a      	strb	r2, [r3, #2]
  /* Upon Resume call user call back */
  pdev->dev.usr_cb->DeviceSuspended(); 
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	23ae      	movs	r3, #174	; 0xae
 800430a:	005b      	lsls	r3, r3, #1
 800430c:	58d3      	ldr	r3, [r2, r3]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	4798      	blx	r3
  return USBD_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	1c18      	adds	r0, r3, #0
 8004316:	46bd      	mov	sp, r7
 8004318:	b002      	add	sp, #8
 800431a:	bd80      	pop	{r7, pc}

0800431c <USBD_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

static uint8_t USBD_SOF(USB_CORE_HANDLE  *pdev)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  if(pdev->dev.class_cb->SOF)
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	23ac      	movs	r3, #172	; 0xac
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	58d3      	ldr	r3, [r2, r3]
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d007      	beq.n	8004342 <USBD_SOF+0x26>
  {
    pdev->dev.class_cb->SOF(pdev); 
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	23ac      	movs	r3, #172	; 0xac
 8004336:	005b      	lsls	r3, r3, #1
 8004338:	58d3      	ldr	r3, [r2, r3]
 800433a:	69db      	ldr	r3, [r3, #28]
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	1c10      	adds	r0, r2, #0
 8004340:	4798      	blx	r3
  }
  return USBD_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	1c18      	adds	r0, r3, #0
 8004346:	46bd      	mov	sp, r7
 8004348:	b002      	add	sp, #8
 800434a:	bd80      	pop	{r7, pc}

0800434c <USBD_SetCfg>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_Status USBD_SetCfg(USB_CORE_HANDLE  *pdev, uint8_t cfgidx)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	1c0a      	adds	r2, r1, #0
 8004356:	1cfb      	adds	r3, r7, #3
 8004358:	701a      	strb	r2, [r3, #0]
  pdev->dev.class_cb->Init(pdev, cfgidx); 
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	23ac      	movs	r3, #172	; 0xac
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	58d3      	ldr	r3, [r2, r3]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6879      	ldr	r1, [r7, #4]
 8004366:	1cfa      	adds	r2, r7, #3
 8004368:	7812      	ldrb	r2, [r2, #0]
 800436a:	1c08      	adds	r0, r1, #0
 800436c:	1c11      	adds	r1, r2, #0
 800436e:	4798      	blx	r3
  
  /* Upon set config call user call back */
  pdev->dev.usr_cb->DeviceConfigured();
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	23ae      	movs	r3, #174	; 0xae
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	58d3      	ldr	r3, [r2, r3]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	4798      	blx	r3
  return USBD_OK; 
 800437c:	2300      	movs	r3, #0
}
 800437e:	1c18      	adds	r0, r3, #0
 8004380:	46bd      	mov	sp, r7
 8004382:	b002      	add	sp, #8
 8004384:	bd80      	pop	{r7, pc}
 8004386:	46c0      	nop			; (mov r8, r8)

08004388 <USBD_ClrCfg>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_Status
  */
USBD_Status USBD_ClrCfg(USB_CORE_HANDLE  *pdev, uint8_t cfgidx)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	1c0a      	adds	r2, r1, #0
 8004392:	1cfb      	adds	r3, r7, #3
 8004394:	701a      	strb	r2, [r3, #0]
  pdev->dev.class_cb->DeInit(pdev, cfgidx);   
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	23ac      	movs	r3, #172	; 0xac
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	58d3      	ldr	r3, [r2, r3]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	6879      	ldr	r1, [r7, #4]
 80043a2:	1cfa      	adds	r2, r7, #3
 80043a4:	7812      	ldrb	r2, [r2, #0]
 80043a6:	1c08      	adds	r0, r1, #0
 80043a8:	1c11      	adds	r1, r2, #0
 80043aa:	4798      	blx	r3
  return USBD_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	1c18      	adds	r0, r3, #0
 80043b0:	46bd      	mov	sp, r7
 80043b2:	b002      	add	sp, #8
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	46c0      	nop			; (mov r8, r8)

080043b8 <usbd_cdc_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
uint8_t  usbd_cdc_Init (void  *pdev, 
                               uint8_t cfgidx)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	1c0a      	adds	r2, r1, #0
 80043c2:	1cfb      	adds	r3, r7, #3
 80043c4:	701a      	strb	r2, [r3, #0]
  DCD_PMA_Config(pdev , CDC_IN_EP,USB_SNG_BUF,BULK_IN_TX_ADDRESS);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	1c18      	adds	r0, r3, #0
 80043ca:	2181      	movs	r1, #129	; 0x81
 80043cc:	2200      	movs	r2, #0
 80043ce:	23c0      	movs	r3, #192	; 0xc0
 80043d0:	f000 fdfe 	bl	8004fd0 <DCD_PMA_Config>
  DCD_PMA_Config(pdev , CDC_CMD_EP,USB_SNG_BUF,INT_IN_TX_ADDRESS);
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	2380      	movs	r3, #128	; 0x80
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	1c10      	adds	r0, r2, #0
 80043dc:	2182      	movs	r1, #130	; 0x82
 80043de:	2200      	movs	r2, #0
 80043e0:	f000 fdf6 	bl	8004fd0 <DCD_PMA_Config>
  DCD_PMA_Config(pdev , CDC_OUT_EP,USB_SNG_BUF,BULK_OUT_RX_ADDRESS);
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	2388      	movs	r3, #136	; 0x88
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	1c10      	adds	r0, r2, #0
 80043ec:	2103      	movs	r1, #3
 80043ee:	2200      	movs	r2, #0
 80043f0:	f000 fdee 	bl	8004fd0 <DCD_PMA_Config>

  /* Open EP IN */
  DCD_EP_Open(pdev,
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	1c18      	adds	r0, r3, #0
 80043f8:	2181      	movs	r1, #129	; 0x81
 80043fa:	2240      	movs	r2, #64	; 0x40
 80043fc:	2302      	movs	r3, #2
 80043fe:	f000 fe31 	bl	8005064 <DCD_EP_Open>
              CDC_IN_EP,
              CDC_DATA_IN_PACKET_SIZE,
              USB_EP_BULK);
  
  /* Open EP OUT */
  DCD_EP_Open(pdev,
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	1c18      	adds	r0, r3, #0
 8004406:	2103      	movs	r1, #3
 8004408:	2240      	movs	r2, #64	; 0x40
 800440a:	2302      	movs	r3, #2
 800440c:	f000 fe2a 	bl	8005064 <DCD_EP_Open>
              CDC_OUT_EP,
              CDC_DATA_OUT_PACKET_SIZE,
              USB_EP_BULK);
  
  /* Open Command IN EP */
  DCD_EP_Open(pdev,
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	1c18      	adds	r0, r3, #0
 8004414:	2182      	movs	r1, #130	; 0x82
 8004416:	2208      	movs	r2, #8
 8004418:	2303      	movs	r3, #3
 800441a:	f000 fe23 	bl	8005064 <DCD_EP_Open>
              USB_EP_INT);
  

  
  /* Initialize the Interface physical components */
  APP_FOPS.pIf_Init();
 800441e:	4b08      	ldr	r3, [pc, #32]	; (8004440 <usbd_cdc_Init+0x88>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4798      	blx	r3

  /* Prepare Out endpoint to receive next packet */
  DCD_EP_PrepareRx(pdev,
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	4b07      	ldr	r3, [pc, #28]	; (8004444 <usbd_cdc_Init+0x8c>)
 8004428:	1c10      	adds	r0, r2, #0
 800442a:	2103      	movs	r1, #3
 800442c:	1c1a      	adds	r2, r3, #0
 800442e:	2340      	movs	r3, #64	; 0x40
 8004430:	f000 ffbc 	bl	80053ac <DCD_EP_PrepareRx>
                   CDC_OUT_EP,
                   (uint8_t*)(USB_Rx_Buffer),
                   CDC_DATA_OUT_PACKET_SIZE);
  
  return USBD_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	1c18      	adds	r0, r3, #0
 8004438:	46bd      	mov	sp, r7
 800443a:	b002      	add	sp, #8
 800443c:	bd80      	pop	{r7, pc}
 800443e:	46c0      	nop			; (mov r8, r8)
 8004440:	20000060 	.word	0x20000060
 8004444:	200005c0 	.word	0x200005c0

08004448 <usbd_cdc_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
uint8_t  usbd_cdc_DeInit (void  *pdev, 
                                 uint8_t cfgidx)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	1c0a      	adds	r2, r1, #0
 8004452:	1cfb      	adds	r3, r7, #3
 8004454:	701a      	strb	r2, [r3, #0]
  /* Open EP IN */
  DCD_EP_Close(pdev,
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	1c18      	adds	r0, r3, #0
 800445a:	2181      	movs	r1, #129	; 0x81
 800445c:	f000 ff20 	bl	80052a0 <DCD_EP_Close>
              CDC_IN_EP);
  
  /* Open EP OUT */
  DCD_EP_Close(pdev,
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	1c18      	adds	r0, r3, #0
 8004464:	2103      	movs	r1, #3
 8004466:	f000 ff1b 	bl	80052a0 <DCD_EP_Close>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  DCD_EP_Close(pdev,
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	1c18      	adds	r0, r3, #0
 800446e:	2182      	movs	r1, #130	; 0x82
 8004470:	f000 ff16 	bl	80052a0 <DCD_EP_Close>
              CDC_CMD_EP);

  /* Restore default state of the Interface physical components */
  APP_FOPS.pIf_DeInit();
 8004474:	4b03      	ldr	r3, [pc, #12]	; (8004484 <usbd_cdc_DeInit+0x3c>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	4798      	blx	r3
  
  return USBD_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	1c18      	adds	r0, r3, #0
 800447e:	46bd      	mov	sp, r7
 8004480:	b002      	add	sp, #8
 8004482:	bd80      	pop	{r7, pc}
 8004484:	20000060 	.word	0x20000060

08004488 <usbd_cdc_Setup>:
  * @param  req: usb requests
  * @retval status
  */
uint8_t  usbd_cdc_Setup (void  *pdev, 
                                USB_SETUP_REQ *req)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  uint16_t len=USB_CDC_DESC_SIZ;
 8004492:	1c3b      	adds	r3, r7, #0
 8004494:	330e      	adds	r3, #14
 8004496:	223a      	movs	r2, #58	; 0x3a
 8004498:	801a      	strh	r2, [r3, #0]
  uint8_t  *pbuf= (uint8_t*)usbd_cdc_CfgDesc + 9;
 800449a:	4b48      	ldr	r3, [pc, #288]	; (80045bc <usbd_cdc_Setup+0x134>)
 800449c:	60bb      	str	r3, [r7, #8]
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	1c1a      	adds	r2, r3, #0
 80044a4:	2360      	movs	r3, #96	; 0x60
 80044a6:	4013      	ands	r3, r2
 80044a8:	d044      	beq.n	8004534 <usbd_cdc_Setup+0xac>
 80044aa:	2b20      	cmp	r3, #32
 80044ac:	d13a      	bne.n	8004524 <usbd_cdc_Setup+0x9c>
  {
    /* CDC Class Requests -------------------------------*/
  case USB_REQ_TYPE_CLASS :
      /* Check if the request is a data setup packet */
      if (req->wLength)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	88db      	ldrh	r3, [r3, #6]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d02c      	beq.n	8004510 <usbd_cdc_Setup+0x88>
      {
        /* Check if the request is Device-to-Host */
        if (req->bmRequest & 0x80)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	b25b      	sxtb	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	da12      	bge.n	80044e8 <usbd_cdc_Setup+0x60>
        {
          /* Get the data to be sent to Host from interface layer */
          APP_FOPS.pIf_Ctrl(req->bRequest, CmdBuff, req->wLength);
 80044c2:	4b3f      	ldr	r3, [pc, #252]	; (80045c0 <usbd_cdc_Setup+0x138>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	7852      	ldrb	r2, [r2, #1]
 80044ca:	1c10      	adds	r0, r2, #0
 80044cc:	683a      	ldr	r2, [r7, #0]
 80044ce:	88d2      	ldrh	r2, [r2, #6]
 80044d0:	493c      	ldr	r1, [pc, #240]	; (80045c4 <usbd_cdc_Setup+0x13c>)
 80044d2:	4798      	blx	r3
          
          /* Send the data to the host */
          USBD_CtlSendData (pdev, 
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	88db      	ldrh	r3, [r3, #6]
 80044d8:	6879      	ldr	r1, [r7, #4]
 80044da:	4a3a      	ldr	r2, [pc, #232]	; (80045c4 <usbd_cdc_Setup+0x13c>)
 80044dc:	1c08      	adds	r0, r1, #0
 80044de:	1c11      	adds	r1, r2, #0
 80044e0:	1c1a      	adds	r2, r3, #0
 80044e2:	f7ff fc8f 	bl	8003e04 <USBD_CtlSendData>
 80044e6:	e01b      	b.n	8004520 <usbd_cdc_Setup+0x98>
                            req->wLength);          
        }
        else /* Host-to-Device requeset */
        {
          /* Set the value of the current command to be processed */
          cdcCmd = req->bRequest;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	785b      	ldrb	r3, [r3, #1]
 80044ec:	1c1a      	adds	r2, r3, #0
 80044ee:	4b36      	ldr	r3, [pc, #216]	; (80045c8 <usbd_cdc_Setup+0x140>)
 80044f0:	601a      	str	r2, [r3, #0]
          cdcLen = req->wLength;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	88db      	ldrh	r3, [r3, #6]
 80044f6:	1c1a      	adds	r2, r3, #0
 80044f8:	4b34      	ldr	r3, [pc, #208]	; (80045cc <usbd_cdc_Setup+0x144>)
 80044fa:	601a      	str	r2, [r3, #0]
          
          /* Prepare the reception of the buffer over EP0
          Next step: the received data will be managed in usbd_cdc_EP0_TxSent() 
          function. */
          USBD_CtlPrepareRx (pdev,
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	88db      	ldrh	r3, [r3, #6]
 8004500:	6879      	ldr	r1, [r7, #4]
 8004502:	4a30      	ldr	r2, [pc, #192]	; (80045c4 <usbd_cdc_Setup+0x13c>)
 8004504:	1c08      	adds	r0, r1, #0
 8004506:	1c11      	adds	r1, r2, #0
 8004508:	1c1a      	adds	r2, r3, #0
 800450a:	f7ff fcbb 	bl	8003e84 <USBD_CtlPrepareRx>
 800450e:	e007      	b.n	8004520 <usbd_cdc_Setup+0x98>
        }
      }
      else /* No Data request */
      {
        /* Transfer the command to the interface layer */
        APP_FOPS.pIf_Ctrl(req->bRequest, NULL, 0);
 8004510:	4b2b      	ldr	r3, [pc, #172]	; (80045c0 <usbd_cdc_Setup+0x138>)
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	7852      	ldrb	r2, [r2, #1]
 8004518:	1c10      	adds	r0, r2, #0
 800451a:	2100      	movs	r1, #0
 800451c:	2200      	movs	r2, #0
 800451e:	4798      	blx	r3
      }
      
      return USBD_OK;
 8004520:	2300      	movs	r3, #0
 8004522:	e047      	b.n	80045b4 <usbd_cdc_Setup+0x12c>
      
    default:
      USBD_CtlError (pdev, req);
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	1c10      	adds	r0, r2, #0
 800452a:	1c19      	adds	r1, r3, #0
 800452c:	f7ff fbec 	bl	8003d08 <USBD_CtlError>
      return USBD_FAIL;
 8004530:	2302      	movs	r3, #2
 8004532:	e03f      	b.n	80045b4 <usbd_cdc_Setup+0x12c>
    
      
      
    /* Standard Requests -------------------------------*/
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	785b      	ldrb	r3, [r3, #1]
 8004538:	2b0a      	cmp	r3, #10
 800453a:	d01f      	beq.n	800457c <usbd_cdc_Setup+0xf4>
 800453c:	2b0b      	cmp	r3, #11
 800453e:	d025      	beq.n	800458c <usbd_cdc_Setup+0x104>
 8004540:	2b06      	cmp	r3, #6
 8004542:	d136      	bne.n	80045b2 <usbd_cdc_Setup+0x12a>
    {
    case USB_REQ_GET_DESCRIPTOR: 
      if( (req->wValue >> 8) == CDC_DESCRIPTOR_TYPE)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	885b      	ldrh	r3, [r3, #2]
 8004548:	0a1b      	lsrs	r3, r3, #8
 800454a:	b29b      	uxth	r3, r3
 800454c:	2b21      	cmp	r3, #33	; 0x21
 800454e:	d10a      	bne.n	8004566 <usbd_cdc_Setup+0xde>
      {
        pbuf = (uint8_t*)usbd_cdc_CfgDesc + 9 + (9 * USBD_ITF_MAX_NUM);
 8004550:	4b1f      	ldr	r3, [pc, #124]	; (80045d0 <usbd_cdc_Setup+0x148>)
 8004552:	60bb      	str	r3, [r7, #8]
        len = MIN(USB_CDC_DESC_SIZ , req->wLength);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	88db      	ldrh	r3, [r3, #6]
 8004558:	1c3a      	adds	r2, r7, #0
 800455a:	320e      	adds	r2, #14
 800455c:	b299      	uxth	r1, r3
 800455e:	293a      	cmp	r1, #58	; 0x3a
 8004560:	d900      	bls.n	8004564 <usbd_cdc_Setup+0xdc>
 8004562:	233a      	movs	r3, #58	; 0x3a
 8004564:	8013      	strh	r3, [r2, #0]
      }
      
      USBD_CtlSendData (pdev, 
 8004566:	6879      	ldr	r1, [r7, #4]
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	1c3b      	adds	r3, r7, #0
 800456c:	330e      	adds	r3, #14
 800456e:	881b      	ldrh	r3, [r3, #0]
 8004570:	1c08      	adds	r0, r1, #0
 8004572:	1c11      	adds	r1, r2, #0
 8004574:	1c1a      	adds	r2, r3, #0
 8004576:	f7ff fc45 	bl	8003e04 <USBD_CtlSendData>
                        pbuf,
                        len);
      break;
 800457a:	e01a      	b.n	80045b2 <usbd_cdc_Setup+0x12a>
      
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	4b15      	ldr	r3, [pc, #84]	; (80045d4 <usbd_cdc_Setup+0x14c>)
 8004580:	1c10      	adds	r0, r2, #0
 8004582:	1c19      	adds	r1, r3, #0
 8004584:	2201      	movs	r2, #1
 8004586:	f7ff fc3d 	bl	8003e04 <USBD_CtlSendData>
                        (uint8_t *)&usbd_cdc_AltSet,
                        1);
      break;
 800458a:	e012      	b.n	80045b2 <usbd_cdc_Setup+0x12a>
      
    case USB_REQ_SET_INTERFACE :
      if ((uint8_t)(req->wValue) < USBD_ITF_MAX_NUM)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	885b      	ldrh	r3, [r3, #2]
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d106      	bne.n	80045a4 <usbd_cdc_Setup+0x11c>
      {
        usbd_cdc_AltSet = (uint8_t)(req->wValue);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	885b      	ldrh	r3, [r3, #2]
 800459a:	b2db      	uxtb	r3, r3
 800459c:	1c1a      	adds	r2, r3, #0
 800459e:	4b0d      	ldr	r3, [pc, #52]	; (80045d4 <usbd_cdc_Setup+0x14c>)
 80045a0:	601a      	str	r2, [r3, #0]
      else
      {
        /* Call the error management function (command will be nacked */
        USBD_CtlError (pdev, req);
      }
      break;
 80045a2:	e005      	b.n	80045b0 <usbd_cdc_Setup+0x128>
        usbd_cdc_AltSet = (uint8_t)(req->wValue);
      }
      else
      {
        /* Call the error management function (command will be nacked */
        USBD_CtlError (pdev, req);
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	1c10      	adds	r0, r2, #0
 80045aa:	1c19      	adds	r1, r3, #0
 80045ac:	f7ff fbac 	bl	8003d08 <USBD_CtlError>
      }
      break;
 80045b0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return USBD_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	1c18      	adds	r0, r3, #0
 80045b6:	46bd      	mov	sp, r7
 80045b8:	b004      	add	sp, #16
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	08007661 	.word	0x08007661
 80045c0:	20000060 	.word	0x20000060
 80045c4:	20000600 	.word	0x20000600
 80045c8:	20000094 	.word	0x20000094
 80045cc:	20000170 	.word	0x20000170
 80045d0:	0800766a 	.word	0x0800766a
 80045d4:	20000158 	.word	0x20000158

080045d8 <usbd_cdc_EP0_RxReady>:
  *         Data received on control endpoint
  * @param  pdev: device device instance
  * @retval status
  */
uint8_t  usbd_cdc_EP0_RxReady (void  *pdev)
{ 
 80045d8:	b590      	push	{r4, r7, lr}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  if (cdcCmd != NO_CMD)
 80045e0:	4b0b      	ldr	r3, [pc, #44]	; (8004610 <usbd_cdc_EP0_RxReady+0x38>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2bff      	cmp	r3, #255	; 0xff
 80045e6:	d00d      	beq.n	8004604 <usbd_cdc_EP0_RxReady+0x2c>
  {
    /* Process the data */
    APP_FOPS.pIf_Ctrl(cdcCmd, CmdBuff, cdcLen);
 80045e8:	4b0a      	ldr	r3, [pc, #40]	; (8004614 <usbd_cdc_EP0_RxReady+0x3c>)
 80045ea:	689c      	ldr	r4, [r3, #8]
 80045ec:	4b08      	ldr	r3, [pc, #32]	; (8004610 <usbd_cdc_EP0_RxReady+0x38>)
 80045ee:	6819      	ldr	r1, [r3, #0]
 80045f0:	4b09      	ldr	r3, [pc, #36]	; (8004618 <usbd_cdc_EP0_RxReady+0x40>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a09      	ldr	r2, [pc, #36]	; (800461c <usbd_cdc_EP0_RxReady+0x44>)
 80045f6:	1c08      	adds	r0, r1, #0
 80045f8:	1c11      	adds	r1, r2, #0
 80045fa:	1c1a      	adds	r2, r3, #0
 80045fc:	47a0      	blx	r4
    
    /* Reset the command variable to default value */
    cdcCmd = NO_CMD;
 80045fe:	4b04      	ldr	r3, [pc, #16]	; (8004610 <usbd_cdc_EP0_RxReady+0x38>)
 8004600:	22ff      	movs	r2, #255	; 0xff
 8004602:	601a      	str	r2, [r3, #0]
  }
  
  return USBD_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	1c18      	adds	r0, r3, #0
 8004608:	46bd      	mov	sp, r7
 800460a:	b003      	add	sp, #12
 800460c:	bd90      	pop	{r4, r7, pc}
 800460e:	46c0      	nop			; (mov r8, r8)
 8004610:	20000094 	.word	0x20000094
 8004614:	20000060 	.word	0x20000060
 8004618:	20000170 	.word	0x20000170
 800461c:	20000600 	.word	0x20000600

08004620 <usbd_cdc_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  usbd_cdc_DataIn (void *pdev, uint8_t epnum)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	1c0a      	adds	r2, r1, #0
 800462a:	1cfb      	adds	r3, r7, #3
 800462c:	701a      	strb	r2, [r3, #0]
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if (USB_Tx_State == 1)
 800462e:	4b31      	ldr	r3, [pc, #196]	; (80046f4 <usbd_cdc_DataIn+0xd4>)
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d158      	bne.n	80046e8 <usbd_cdc_DataIn+0xc8>
  {
    if (APP_Rx_length == 0) 
 8004636:	4b30      	ldr	r3, [pc, #192]	; (80046f8 <usbd_cdc_DataIn+0xd8>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d112      	bne.n	8004664 <usbd_cdc_DataIn+0x44>
    {
      if (last_packet ==1)
 800463e:	4b2f      	ldr	r3, [pc, #188]	; (80046fc <usbd_cdc_DataIn+0xdc>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d10a      	bne.n	800465c <usbd_cdc_DataIn+0x3c>
      {
        last_packet =0;
 8004646:	4b2d      	ldr	r3, [pc, #180]	; (80046fc <usbd_cdc_DataIn+0xdc>)
 8004648:	2200      	movs	r2, #0
 800464a:	601a      	str	r2, [r3, #0]
        
        /*Send zero-length packet*/
        DCD_EP_Tx (pdev, CDC_IN_EP, 0, 0);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	1c18      	adds	r0, r3, #0
 8004650:	2181      	movs	r1, #129	; 0x81
 8004652:	2200      	movs	r2, #0
 8004654:	2300      	movs	r3, #0
 8004656:	f000 ff0b 	bl	8005470 <DCD_EP_Tx>
 800465a:	e045      	b.n	80046e8 <usbd_cdc_DataIn+0xc8>
      }
      else
      {
        USB_Tx_State = 0;
 800465c:	4b25      	ldr	r3, [pc, #148]	; (80046f4 <usbd_cdc_DataIn+0xd4>)
 800465e:	2200      	movs	r2, #0
 8004660:	701a      	strb	r2, [r3, #0]
 8004662:	e041      	b.n	80046e8 <usbd_cdc_DataIn+0xc8>
      }
    }
    else 
    {
      if (APP_Rx_length > CDC_DATA_IN_PACKET_SIZE){
 8004664:	4b24      	ldr	r3, [pc, #144]	; (80046f8 <usbd_cdc_DataIn+0xd8>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2b40      	cmp	r3, #64	; 0x40
 800466a:	d915      	bls.n	8004698 <usbd_cdc_DataIn+0x78>
        USB_Tx_ptr = APP_Rx_ptr_out;
 800466c:	4b24      	ldr	r3, [pc, #144]	; (8004700 <usbd_cdc_DataIn+0xe0>)
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	1c3b      	adds	r3, r7, #0
 8004672:	330e      	adds	r3, #14
 8004674:	801a      	strh	r2, [r3, #0]
        USB_Tx_length = CDC_DATA_IN_PACKET_SIZE;
 8004676:	1c3b      	adds	r3, r7, #0
 8004678:	330c      	adds	r3, #12
 800467a:	2240      	movs	r2, #64	; 0x40
 800467c:	801a      	strh	r2, [r3, #0]
        
        APP_Rx_ptr_out += CDC_DATA_IN_PACKET_SIZE;
 800467e:	4b20      	ldr	r3, [pc, #128]	; (8004700 <usbd_cdc_DataIn+0xe0>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	1c1a      	adds	r2, r3, #0
 8004684:	3240      	adds	r2, #64	; 0x40
 8004686:	4b1e      	ldr	r3, [pc, #120]	; (8004700 <usbd_cdc_DataIn+0xe0>)
 8004688:	601a      	str	r2, [r3, #0]
        APP_Rx_length -= CDC_DATA_IN_PACKET_SIZE;    
 800468a:	4b1b      	ldr	r3, [pc, #108]	; (80046f8 <usbd_cdc_DataIn+0xd8>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	1c1a      	adds	r2, r3, #0
 8004690:	3a40      	subs	r2, #64	; 0x40
 8004692:	4b19      	ldr	r3, [pc, #100]	; (80046f8 <usbd_cdc_DataIn+0xd8>)
 8004694:	601a      	str	r2, [r3, #0]
 8004696:	e01a      	b.n	80046ce <usbd_cdc_DataIn+0xae>
      }
      else 
      {
        USB_Tx_ptr = APP_Rx_ptr_out;
 8004698:	4b19      	ldr	r3, [pc, #100]	; (8004700 <usbd_cdc_DataIn+0xe0>)
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	1c3b      	adds	r3, r7, #0
 800469e:	330e      	adds	r3, #14
 80046a0:	801a      	strh	r2, [r3, #0]
        USB_Tx_length = APP_Rx_length;
 80046a2:	4b15      	ldr	r3, [pc, #84]	; (80046f8 <usbd_cdc_DataIn+0xd8>)
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	1c3b      	adds	r3, r7, #0
 80046a8:	330c      	adds	r3, #12
 80046aa:	801a      	strh	r2, [r3, #0]
        
        APP_Rx_ptr_out += APP_Rx_length;
 80046ac:	4b14      	ldr	r3, [pc, #80]	; (8004700 <usbd_cdc_DataIn+0xe0>)
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	4b11      	ldr	r3, [pc, #68]	; (80046f8 <usbd_cdc_DataIn+0xd8>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	18d2      	adds	r2, r2, r3
 80046b6:	4b12      	ldr	r3, [pc, #72]	; (8004700 <usbd_cdc_DataIn+0xe0>)
 80046b8:	601a      	str	r2, [r3, #0]
        APP_Rx_length = 0;
 80046ba:	4b0f      	ldr	r3, [pc, #60]	; (80046f8 <usbd_cdc_DataIn+0xd8>)
 80046bc:	2200      	movs	r2, #0
 80046be:	601a      	str	r2, [r3, #0]
        if (APP_Rx_length == CDC_DATA_IN_PACKET_SIZE) last_packet = 1;
 80046c0:	4b0d      	ldr	r3, [pc, #52]	; (80046f8 <usbd_cdc_DataIn+0xd8>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b40      	cmp	r3, #64	; 0x40
 80046c6:	d102      	bne.n	80046ce <usbd_cdc_DataIn+0xae>
 80046c8:	4b0c      	ldr	r3, [pc, #48]	; (80046fc <usbd_cdc_DataIn+0xdc>)
 80046ca:	2201      	movs	r2, #1
 80046cc:	601a      	str	r2, [r3, #0]
      }
      
      /* Prepare the available data buffer to be sent on IN endpoint */
      DCD_EP_Tx (pdev,
                 CDC_IN_EP,
                 (uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],
 80046ce:	1c3b      	adds	r3, r7, #0
 80046d0:	330e      	adds	r3, #14
 80046d2:	881a      	ldrh	r2, [r3, #0]
        APP_Rx_length = 0;
        if (APP_Rx_length == CDC_DATA_IN_PACKET_SIZE) last_packet = 1;
      }
      
      /* Prepare the available data buffer to be sent on IN endpoint */
      DCD_EP_Tx (pdev,
 80046d4:	4b0b      	ldr	r3, [pc, #44]	; (8004704 <usbd_cdc_DataIn+0xe4>)
 80046d6:	18d2      	adds	r2, r2, r3
 80046d8:	1c3b      	adds	r3, r7, #0
 80046da:	330c      	adds	r3, #12
 80046dc:	881b      	ldrh	r3, [r3, #0]
 80046de:	6879      	ldr	r1, [r7, #4]
 80046e0:	1c08      	adds	r0, r1, #0
 80046e2:	2181      	movs	r1, #129	; 0x81
 80046e4:	f000 fec4 	bl	8005470 <DCD_EP_Tx>
                 (uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],
                 USB_Tx_length);
    }
  }  
  
  return USBD_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	1c18      	adds	r0, r3, #0
 80046ec:	46bd      	mov	sp, r7
 80046ee:	b004      	add	sp, #16
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	46c0      	nop			; (mov r8, r8)
 80046f4:	2000016c 	.word	0x2000016c
 80046f8:	20000168 	.word	0x20000168
 80046fc:	2000015c 	.word	0x2000015c
 8004700:	20000164 	.word	0x20000164
 8004704:	20000608 	.word	0x20000608

08004708 <usbd_cdc_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  usbd_cdc_DataOut (void *pdev, uint8_t epnum)
{      
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	1c0a      	adds	r2, r1, #0
 8004712:	1cfb      	adds	r3, r7, #3
 8004714:	701a      	strb	r2, [r3, #0]
  uint16_t USB_Rx_Cnt;
  
  /* Get the received data buffer and update the counter */
  USB_Rx_Cnt = ((USB_CORE_HANDLE*)pdev)->dev.out_ep[epnum].xfer_count;
 8004716:	1cfb      	adds	r3, r7, #3
 8004718:	781a      	ldrb	r2, [r3, #0]
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	21d0      	movs	r1, #208	; 0xd0
 800471e:	1c13      	adds	r3, r2, #0
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	189b      	adds	r3, r3, r2
 8004724:	00db      	lsls	r3, r3, #3
 8004726:	18c3      	adds	r3, r0, r3
 8004728:	185b      	adds	r3, r3, r1
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	1c3b      	adds	r3, r7, #0
 800472e:	330e      	adds	r3, #14
 8004730:	801a      	strh	r2, [r3, #0]
  
  /* USB data will be immediately processed, this allow next USB traffic being 
     NAKed till the end of the application Xfer */
  APP_FOPS.pIf_DataRx(USB_Rx_Buffer, USB_Rx_Cnt);
 8004732:	4b0b      	ldr	r3, [pc, #44]	; (8004760 <usbd_cdc_DataOut+0x58>)
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	1c3a      	adds	r2, r7, #0
 8004738:	320e      	adds	r2, #14
 800473a:	8812      	ldrh	r2, [r2, #0]
 800473c:	4909      	ldr	r1, [pc, #36]	; (8004764 <usbd_cdc_DataOut+0x5c>)
 800473e:	1c08      	adds	r0, r1, #0
 8004740:	1c11      	adds	r1, r2, #0
 8004742:	4798      	blx	r3
  
  /* Prepare Out endpoint to receive next packet */
  DCD_EP_PrepareRx(pdev,
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	4b07      	ldr	r3, [pc, #28]	; (8004764 <usbd_cdc_DataOut+0x5c>)
 8004748:	1c10      	adds	r0, r2, #0
 800474a:	2103      	movs	r1, #3
 800474c:	1c1a      	adds	r2, r3, #0
 800474e:	2340      	movs	r3, #64	; 0x40
 8004750:	f000 fe2c 	bl	80053ac <DCD_EP_PrepareRx>
                   CDC_OUT_EP,
                   (uint8_t*)(USB_Rx_Buffer),
                   CDC_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	1c18      	adds	r0, r3, #0
 8004758:	46bd      	mov	sp, r7
 800475a:	b004      	add	sp, #16
 800475c:	bd80      	pop	{r7, pc}
 800475e:	46c0      	nop			; (mov r8, r8)
 8004760:	20000060 	.word	0x20000060
 8004764:	200005c0 	.word	0x200005c0

08004768 <usbd_cdc_SOF>:
  * @param  pdev: instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  usbd_cdc_SOF (void *pdev)
{      
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  static uint32_t FrameCount = 0;
  
  if (FrameCount++ == CDC_IN_FRAME_INTERVAL)
 8004770:	4b09      	ldr	r3, [pc, #36]	; (8004798 <usbd_cdc_SOF+0x30>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	1c59      	adds	r1, r3, #1
 8004776:	4a08      	ldr	r2, [pc, #32]	; (8004798 <usbd_cdc_SOF+0x30>)
 8004778:	6011      	str	r1, [r2, #0]
 800477a:	2b05      	cmp	r3, #5
 800477c:	d106      	bne.n	800478c <usbd_cdc_SOF+0x24>
  {
    /* Reset the frame counter */
    FrameCount = 0;
 800477e:	4b06      	ldr	r3, [pc, #24]	; (8004798 <usbd_cdc_SOF+0x30>)
 8004780:	2200      	movs	r2, #0
 8004782:	601a      	str	r2, [r3, #0]
    
    /* Check the data to be sent through IN pipe */
    Handle_USBAsynchXfer(pdev);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	1c18      	adds	r0, r3, #0
 8004788:	f000 f808 	bl	800479c <Handle_USBAsynchXfer>
  }
  
  return USBD_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	1c18      	adds	r0, r3, #0
 8004790:	46bd      	mov	sp, r7
 8004792:	b002      	add	sp, #8
 8004794:	bd80      	pop	{r7, pc}
 8004796:	46c0      	nop			; (mov r8, r8)
 8004798:	20000174 	.word	0x20000174

0800479c <Handle_USBAsynchXfer>:
  *         Send data to USB
  * @param  pdev: instance
  * @retval None
  */
static void Handle_USBAsynchXfer (void *pdev)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if(USB_Tx_State != 1)
 80047a4:	4b3e      	ldr	r3, [pc, #248]	; (80048a0 <Handle_USBAsynchXfer+0x104>)
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d100      	bne.n	80047ae <Handle_USBAsynchXfer+0x12>
 80047ac:	e074      	b.n	8004898 <Handle_USBAsynchXfer+0xfc>
  {
    if (APP_Rx_ptr_out == APP_RX_DATA_SIZE)
 80047ae:	4b3d      	ldr	r3, [pc, #244]	; (80048a4 <Handle_USBAsynchXfer+0x108>)
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	2380      	movs	r3, #128	; 0x80
 80047b4:	011b      	lsls	r3, r3, #4
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d102      	bne.n	80047c0 <Handle_USBAsynchXfer+0x24>
    {
      APP_Rx_ptr_out = 0;
 80047ba:	4b3a      	ldr	r3, [pc, #232]	; (80048a4 <Handle_USBAsynchXfer+0x108>)
 80047bc:	2200      	movs	r2, #0
 80047be:	601a      	str	r2, [r3, #0]
    }
    
    if(APP_Rx_ptr_out == APP_Rx_ptr_in) 
 80047c0:	4b38      	ldr	r3, [pc, #224]	; (80048a4 <Handle_USBAsynchXfer+0x108>)
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	4b38      	ldr	r3, [pc, #224]	; (80048a8 <Handle_USBAsynchXfer+0x10c>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d103      	bne.n	80047d4 <Handle_USBAsynchXfer+0x38>
    {
      USB_Tx_State = 0; 
 80047cc:	4b34      	ldr	r3, [pc, #208]	; (80048a0 <Handle_USBAsynchXfer+0x104>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	701a      	strb	r2, [r3, #0]
      return;
 80047d2:	e061      	b.n	8004898 <Handle_USBAsynchXfer+0xfc>
    }
    
    if(APP_Rx_ptr_out > APP_Rx_ptr_in) /* rollback */
 80047d4:	4b33      	ldr	r3, [pc, #204]	; (80048a4 <Handle_USBAsynchXfer+0x108>)
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	4b33      	ldr	r3, [pc, #204]	; (80048a8 <Handle_USBAsynchXfer+0x10c>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d907      	bls.n	80047f0 <Handle_USBAsynchXfer+0x54>
    { 
      APP_Rx_length = APP_RX_DATA_SIZE - APP_Rx_ptr_out;
 80047e0:	4b30      	ldr	r3, [pc, #192]	; (80048a4 <Handle_USBAsynchXfer+0x108>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2280      	movs	r2, #128	; 0x80
 80047e6:	0112      	lsls	r2, r2, #4
 80047e8:	1ad2      	subs	r2, r2, r3
 80047ea:	4b30      	ldr	r3, [pc, #192]	; (80048ac <Handle_USBAsynchXfer+0x110>)
 80047ec:	601a      	str	r2, [r3, #0]
 80047ee:	e006      	b.n	80047fe <Handle_USBAsynchXfer+0x62>
      
    }
    else 
    {
      APP_Rx_length = APP_Rx_ptr_in - APP_Rx_ptr_out;
 80047f0:	4b2d      	ldr	r3, [pc, #180]	; (80048a8 <Handle_USBAsynchXfer+0x10c>)
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	4b2b      	ldr	r3, [pc, #172]	; (80048a4 <Handle_USBAsynchXfer+0x108>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	1ad2      	subs	r2, r2, r3
 80047fa:	4b2c      	ldr	r3, [pc, #176]	; (80048ac <Handle_USBAsynchXfer+0x110>)
 80047fc:	601a      	str	r2, [r3, #0]
      
    }
    
    if (APP_Rx_length > CDC_DATA_IN_PACKET_SIZE)
 80047fe:	4b2b      	ldr	r3, [pc, #172]	; (80048ac <Handle_USBAsynchXfer+0x110>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2b40      	cmp	r3, #64	; 0x40
 8004804:	d915      	bls.n	8004832 <Handle_USBAsynchXfer+0x96>
    {
      USB_Tx_ptr = APP_Rx_ptr_out;
 8004806:	4b27      	ldr	r3, [pc, #156]	; (80048a4 <Handle_USBAsynchXfer+0x108>)
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	1c3b      	adds	r3, r7, #0
 800480c:	330e      	adds	r3, #14
 800480e:	801a      	strh	r2, [r3, #0]
      USB_Tx_length = CDC_DATA_IN_PACKET_SIZE;
 8004810:	1c3b      	adds	r3, r7, #0
 8004812:	330c      	adds	r3, #12
 8004814:	2240      	movs	r2, #64	; 0x40
 8004816:	801a      	strh	r2, [r3, #0]
      
      APP_Rx_ptr_out += CDC_DATA_IN_PACKET_SIZE;	
 8004818:	4b22      	ldr	r3, [pc, #136]	; (80048a4 <Handle_USBAsynchXfer+0x108>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	1c1a      	adds	r2, r3, #0
 800481e:	3240      	adds	r2, #64	; 0x40
 8004820:	4b20      	ldr	r3, [pc, #128]	; (80048a4 <Handle_USBAsynchXfer+0x108>)
 8004822:	601a      	str	r2, [r3, #0]
      APP_Rx_length -= CDC_DATA_IN_PACKET_SIZE;
 8004824:	4b21      	ldr	r3, [pc, #132]	; (80048ac <Handle_USBAsynchXfer+0x110>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	1c1a      	adds	r2, r3, #0
 800482a:	3a40      	subs	r2, #64	; 0x40
 800482c:	4b1f      	ldr	r3, [pc, #124]	; (80048ac <Handle_USBAsynchXfer+0x110>)
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	e022      	b.n	8004878 <Handle_USBAsynchXfer+0xdc>
    }
    else
    {
      USB_Tx_ptr = APP_Rx_ptr_out;
 8004832:	4b1c      	ldr	r3, [pc, #112]	; (80048a4 <Handle_USBAsynchXfer+0x108>)
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	1c3b      	adds	r3, r7, #0
 8004838:	330e      	adds	r3, #14
 800483a:	801a      	strh	r2, [r3, #0]
      USB_Tx_length = APP_Rx_length;
 800483c:	4b1b      	ldr	r3, [pc, #108]	; (80048ac <Handle_USBAsynchXfer+0x110>)
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	1c3b      	adds	r3, r7, #0
 8004842:	330c      	adds	r3, #12
 8004844:	801a      	strh	r2, [r3, #0]
      
      APP_Rx_ptr_out += APP_Rx_length;
 8004846:	4b17      	ldr	r3, [pc, #92]	; (80048a4 <Handle_USBAsynchXfer+0x108>)
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	4b18      	ldr	r3, [pc, #96]	; (80048ac <Handle_USBAsynchXfer+0x110>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	18d2      	adds	r2, r2, r3
 8004850:	4b14      	ldr	r3, [pc, #80]	; (80048a4 <Handle_USBAsynchXfer+0x108>)
 8004852:	601a      	str	r2, [r3, #0]
      APP_Rx_length = 0;
 8004854:	4b15      	ldr	r3, [pc, #84]	; (80048ac <Handle_USBAsynchXfer+0x110>)
 8004856:	2200      	movs	r2, #0
 8004858:	601a      	str	r2, [r3, #0]
      if (USB_Tx_length == CDC_DATA_IN_PACKET_SIZE) last_packet = 1; //IBA
 800485a:	1c3b      	adds	r3, r7, #0
 800485c:	330c      	adds	r3, #12
 800485e:	881b      	ldrh	r3, [r3, #0]
 8004860:	2b40      	cmp	r3, #64	; 0x40
 8004862:	d102      	bne.n	800486a <Handle_USBAsynchXfer+0xce>
 8004864:	4b12      	ldr	r3, [pc, #72]	; (80048b0 <Handle_USBAsynchXfer+0x114>)
 8004866:	2201      	movs	r2, #1
 8004868:	601a      	str	r2, [r3, #0]
      if (APP_Rx_ptr_in == 64) APP_Rx_ptr_in=0;
 800486a:	4b0f      	ldr	r3, [pc, #60]	; (80048a8 <Handle_USBAsynchXfer+0x10c>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2b40      	cmp	r3, #64	; 0x40
 8004870:	d102      	bne.n	8004878 <Handle_USBAsynchXfer+0xdc>
 8004872:	4b0d      	ldr	r3, [pc, #52]	; (80048a8 <Handle_USBAsynchXfer+0x10c>)
 8004874:	2200      	movs	r2, #0
 8004876:	601a      	str	r2, [r3, #0]
    }
    USB_Tx_State = 1; 
 8004878:	4b09      	ldr	r3, [pc, #36]	; (80048a0 <Handle_USBAsynchXfer+0x104>)
 800487a:	2201      	movs	r2, #1
 800487c:	701a      	strb	r2, [r3, #0]
    
    DCD_EP_Tx (pdev,
               CDC_IN_EP,
               (uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],
 800487e:	1c3b      	adds	r3, r7, #0
 8004880:	330e      	adds	r3, #14
 8004882:	881a      	ldrh	r2, [r3, #0]
      if (USB_Tx_length == CDC_DATA_IN_PACKET_SIZE) last_packet = 1; //IBA
      if (APP_Rx_ptr_in == 64) APP_Rx_ptr_in=0;
    }
    USB_Tx_State = 1; 
    
    DCD_EP_Tx (pdev,
 8004884:	4b0b      	ldr	r3, [pc, #44]	; (80048b4 <Handle_USBAsynchXfer+0x118>)
 8004886:	18d2      	adds	r2, r2, r3
 8004888:	1c3b      	adds	r3, r7, #0
 800488a:	330c      	adds	r3, #12
 800488c:	881b      	ldrh	r3, [r3, #0]
 800488e:	6879      	ldr	r1, [r7, #4]
 8004890:	1c08      	adds	r0, r1, #0
 8004892:	2181      	movs	r1, #129	; 0x81
 8004894:	f000 fdec 	bl	8005470 <DCD_EP_Tx>
               CDC_IN_EP,
               (uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],
               USB_Tx_length);
  }  
  
}
 8004898:	46bd      	mov	sp, r7
 800489a:	b004      	add	sp, #16
 800489c:	bd80      	pop	{r7, pc}
 800489e:	46c0      	nop			; (mov r8, r8)
 80048a0:	2000016c 	.word	0x2000016c
 80048a4:	20000164 	.word	0x20000164
 80048a8:	20000160 	.word	0x20000160
 80048ac:	20000168 	.word	0x20000168
 80048b0:	2000015c 	.word	0x2000015c
 80048b4:	20000608 	.word	0x20000608

080048b8 <USBD_cdc_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_cdc_GetCfgDesc (uint8_t speed, uint16_t *length)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	1c02      	adds	r2, r0, #0
 80048c0:	6039      	str	r1, [r7, #0]
 80048c2:	1dfb      	adds	r3, r7, #7
 80048c4:	701a      	strb	r2, [r3, #0]
  *length = sizeof (usbd_cdc_CfgDesc);
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	2243      	movs	r2, #67	; 0x43
 80048ca:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)usbd_cdc_CfgDesc;
 80048cc:	4b02      	ldr	r3, [pc, #8]	; (80048d8 <USBD_cdc_GetCfgDesc+0x20>)
}
 80048ce:	1c18      	adds	r0, r3, #0
 80048d0:	46bd      	mov	sp, r7
 80048d2:	b002      	add	sp, #8
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	46c0      	nop			; (mov r8, r8)
 80048d8:	08007658 	.word	0x08007658

080048dc <CTR>:
  * @brief  Correct Transfer interrupt's service
  * @param  None
  * @retval None
  */
void CTR(void)
{
 80048dc:	b590      	push	{r4, r7, lr}
 80048de:	b087      	sub	sp, #28
 80048e0:	af00      	add	r7, sp, #0
  USB_EP *ep;
  uint16_t count=0;
 80048e2:	1c3b      	adds	r3, r7, #0
 80048e4:	3316      	adds	r3, #22
 80048e6:	2200      	movs	r2, #0
 80048e8:	801a      	strh	r2, [r3, #0]
  uint8_t EPindex;
  volatile uint16_t wIstr;
  volatile uint16_t wEPVal = 0;
 80048ea:	1d3b      	adds	r3, r7, #4
 80048ec:	2200      	movs	r2, #0
 80048ee:	801a      	strh	r2, [r3, #0]
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 80048f0:	e282      	b.n	8004df8 <CTR+0x51c>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 80048f2:	1dbb      	adds	r3, r7, #6
 80048f4:	881b      	ldrh	r3, [r3, #0]
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	b2d9      	uxtb	r1, r3
 80048fa:	1c3b      	adds	r3, r7, #0
 80048fc:	3313      	adds	r3, #19
 80048fe:	220f      	movs	r2, #15
 8004900:	400a      	ands	r2, r1
 8004902:	701a      	strb	r2, [r3, #0]
    
    if (EPindex == 0)
 8004904:	1c3b      	adds	r3, r7, #0
 8004906:	3313      	adds	r3, #19
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d000      	beq.n	8004910 <CTR+0x34>
 800490e:	e0e6      	b.n	8004ade <CTR+0x202>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & ISTR_DIR) == 0)
 8004910:	1dbb      	adds	r3, r7, #6
 8004912:	881b      	ldrh	r3, [r3, #0]
 8004914:	b29b      	uxth	r3, r3
 8004916:	1c1a      	adds	r2, r3, #0
 8004918:	2310      	movs	r3, #16
 800491a:	4013      	ands	r3, r2
 800491c:	d121      	bne.n	8004962 <CTR+0x86>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        _ClearEP_CTR_TX(ENDP0);
 800491e:	4bcd      	ldr	r3, [pc, #820]	; (8004c54 <CTR+0x378>)
 8004920:	4acc      	ldr	r2, [pc, #816]	; (8004c54 <CTR+0x378>)
 8004922:	6812      	ldr	r2, [r2, #0]
 8004924:	b292      	uxth	r2, r2
 8004926:	1c11      	adds	r1, r2, #0
 8004928:	4acb      	ldr	r2, [pc, #812]	; (8004c58 <CTR+0x37c>)
 800492a:	400a      	ands	r2, r1
 800492c:	601a      	str	r2, [r3, #0]
        ep = &((&USB_Device_dev)->dev.in_ep[0]);
 800492e:	4bcb      	ldr	r3, [pc, #812]	; (8004c5c <CTR+0x380>)
 8004930:	60fb      	str	r3, [r7, #12]
        
        ep->xfer_count = GetEPTxCount(ep->num);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	1c18      	adds	r0, r3, #0
 8004938:	f001 f99e 	bl	8005c78 <GetEPTxCount>
 800493c:	1c03      	adds	r3, r0, #0
 800493e:	1c1a      	adds	r2, r3, #0
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	619a      	str	r2, [r3, #24]
        ep->xfer_buff += ep->xfer_count;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	691a      	ldr	r2, [r3, #16]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	18d2      	adds	r2, r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	611a      	str	r2, [r3, #16]
 
        /* TX COMPLETE */
        USBD_DCD_INT_fops->DataInStage(&USB_Device_dev, 0x00);
 8004952:	4bc3      	ldr	r3, [pc, #780]	; (8004c60 <CTR+0x384>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	4ac2      	ldr	r2, [pc, #776]	; (8004c64 <CTR+0x388>)
 800495a:	1c10      	adds	r0, r2, #0
 800495c:	2100      	movs	r1, #0
 800495e:	4798      	blx	r3
 8004960:	e24a      	b.n	8004df8 <CTR+0x51c>
      {
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &((&USB_Device_dev)->dev.out_ep[0]);
 8004962:	4bc1      	ldr	r3, [pc, #772]	; (8004c68 <CTR+0x38c>)
 8004964:	60fb      	str	r3, [r7, #12]
        wEPVal = _GetENDPOINT(ENDP0);
 8004966:	4bbb      	ldr	r3, [pc, #748]	; (8004c54 <CTR+0x378>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	b29a      	uxth	r2, r3
 800496c:	1d3b      	adds	r3, r7, #4
 800496e:	801a      	strh	r2, [r3, #0]
        
        if ((wEPVal &EP_SETUP) != 0)
 8004970:	1d3b      	adds	r3, r7, #4
 8004972:	881b      	ldrh	r3, [r3, #0]
 8004974:	b29b      	uxth	r3, r3
 8004976:	1c1a      	adds	r2, r3, #0
 8004978:	2380      	movs	r3, #128	; 0x80
 800497a:	011b      	lsls	r3, r3, #4
 800497c:	4013      	ands	r3, r2
 800497e:	d022      	beq.n	80049c6 <CTR+0xea>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = GetEPRxCount(ep->num);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	1c18      	adds	r0, r3, #0
 8004986:	f001 f993 	bl	8005cb0 <GetEPRxCount>
 800498a:	1c03      	adds	r3, r0, #0
 800498c:	1c1a      	adds	r2, r3, #0
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	619a      	str	r2, [r3, #24]
          PMAToUserBufferCopy(&((&USB_Device_dev)->dev.setup_packet[0]),ep->pmaadress , ep->xfer_count);       
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	889a      	ldrh	r2, [r3, #4]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	b29b      	uxth	r3, r3
 800499c:	49b3      	ldr	r1, [pc, #716]	; (8004c6c <CTR+0x390>)
 800499e:	1c08      	adds	r0, r1, #0
 80049a0:	1c11      	adds	r1, r2, #0
 80049a2:	1c1a      	adds	r2, r3, #0
 80049a4:	f001 fb56 	bl	8006054 <PMAToUserBufferCopy>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          _ClearEP_CTR_RX(ENDP0); 
 80049a8:	4baa      	ldr	r3, [pc, #680]	; (8004c54 <CTR+0x378>)
 80049aa:	4aaa      	ldr	r2, [pc, #680]	; (8004c54 <CTR+0x378>)
 80049ac:	6812      	ldr	r2, [r2, #0]
 80049ae:	b292      	uxth	r2, r2
 80049b0:	1c11      	adds	r1, r2, #0
 80049b2:	4aaf      	ldr	r2, [pc, #700]	; (8004c70 <CTR+0x394>)
 80049b4:	400a      	ands	r2, r1
 80049b6:	601a      	str	r2, [r3, #0]
          
          /* Process SETUP Packet*/
          USBD_DCD_INT_fops->SetupStage(&USB_Device_dev);
 80049b8:	4ba9      	ldr	r3, [pc, #676]	; (8004c60 <CTR+0x384>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	4aa9      	ldr	r2, [pc, #676]	; (8004c64 <CTR+0x388>)
 80049c0:	1c10      	adds	r0, r2, #0
 80049c2:	4798      	blx	r3
 80049c4:	e218      	b.n	8004df8 <CTR+0x51c>
        }
        
        else if ((wEPVal & EP_CTR_RX) != 0)
 80049c6:	1d3b      	adds	r3, r7, #4
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	b21b      	sxth	r3, r3
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	db00      	blt.n	80049d6 <CTR+0xfa>
 80049d4:	e210      	b.n	8004df8 <CTR+0x51c>
        {
          _ClearEP_CTR_RX(ENDP0);
 80049d6:	4b9f      	ldr	r3, [pc, #636]	; (8004c54 <CTR+0x378>)
 80049d8:	4a9e      	ldr	r2, [pc, #632]	; (8004c54 <CTR+0x378>)
 80049da:	6812      	ldr	r2, [r2, #0]
 80049dc:	b292      	uxth	r2, r2
 80049de:	1c11      	adds	r1, r2, #0
 80049e0:	4aa3      	ldr	r2, [pc, #652]	; (8004c70 <CTR+0x394>)
 80049e2:	400a      	ands	r2, r1
 80049e4:	601a      	str	r2, [r3, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = GetEPRxCount(ep->num);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	1c18      	adds	r0, r3, #0
 80049ec:	f001 f960 	bl	8005cb0 <GetEPRxCount>
 80049f0:	1c03      	adds	r3, r0, #0
 80049f2:	1c1a      	adds	r2, r3, #0
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	619a      	str	r2, [r3, #24]
          
          if (ep->xfer_count != 0)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d012      	beq.n	8004a26 <CTR+0x14a>
          {
            PMAToUserBufferCopy(ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6919      	ldr	r1, [r3, #16]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	889a      	ldrh	r2, [r3, #4]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	1c08      	adds	r0, r1, #0
 8004a10:	1c11      	adds	r1, r2, #0
 8004a12:	1c1a      	adds	r2, r3, #0
 8004a14:	f001 fb1e 	bl	8006054 <PMAToUserBufferCopy>
            ep->xfer_buff+=ep->xfer_count;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	691a      	ldr	r2, [r3, #16]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	18d2      	adds	r2, r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	611a      	str	r2, [r3, #16]
          }
          
          /* Process Control Data OUT Packet*/
          USBD_DCD_INT_fops->DataOutStage(&USB_Device_dev, 0x00);
 8004a26:	4b8e      	ldr	r3, [pc, #568]	; (8004c60 <CTR+0x384>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a8d      	ldr	r2, [pc, #564]	; (8004c64 <CTR+0x388>)
 8004a2e:	1c10      	adds	r0, r2, #0
 8004a30:	2100      	movs	r1, #0
 8004a32:	4798      	blx	r3
          
          _SetEPRxCount(ENDP0, ep->maxpacket);
 8004a34:	4b8f      	ldr	r3, [pc, #572]	; (8004c74 <CTR+0x398>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	498f      	ldr	r1, [pc, #572]	; (8004c78 <CTR+0x39c>)
 8004a3c:	185b      	adds	r3, r3, r1
 8004a3e:	60bb      	str	r3, [r7, #8]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	2b3e      	cmp	r3, #62	; 0x3e
 8004a46:	d91d      	bls.n	8004a84 <CTR+0x1a8>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	095a      	lsrs	r2, r3, #5
 8004a4e:	1c3b      	adds	r3, r7, #0
 8004a50:	3314      	adds	r3, #20
 8004a52:	801a      	strh	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	68da      	ldr	r2, [r3, #12]
 8004a58:	231f      	movs	r3, #31
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	d106      	bne.n	8004a6c <CTR+0x190>
 8004a5e:	1c3b      	adds	r3, r7, #0
 8004a60:	3314      	adds	r3, #20
 8004a62:	881a      	ldrh	r2, [r3, #0]
 8004a64:	1c3b      	adds	r3, r7, #0
 8004a66:	3314      	adds	r3, #20
 8004a68:	3a01      	subs	r2, #1
 8004a6a:	801a      	strh	r2, [r3, #0]
 8004a6c:	1c3b      	adds	r3, r7, #0
 8004a6e:	3314      	adds	r3, #20
 8004a70:	881b      	ldrh	r3, [r3, #0]
 8004a72:	029b      	lsls	r3, r3, #10
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	4a81      	ldr	r2, [pc, #516]	; (8004c7c <CTR+0x3a0>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	801a      	strh	r2, [r3, #0]
 8004a82:	e018      	b.n	8004ab6 <CTR+0x1da>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	085a      	lsrs	r2, r3, #1
 8004a8a:	1c3b      	adds	r3, r7, #0
 8004a8c:	3314      	adds	r3, #20
 8004a8e:	801a      	strh	r2, [r3, #0]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	68da      	ldr	r2, [r3, #12]
 8004a94:	2301      	movs	r3, #1
 8004a96:	4013      	ands	r3, r2
 8004a98:	d006      	beq.n	8004aa8 <CTR+0x1cc>
 8004a9a:	1c3b      	adds	r3, r7, #0
 8004a9c:	3314      	adds	r3, #20
 8004a9e:	881a      	ldrh	r2, [r3, #0]
 8004aa0:	1c3b      	adds	r3, r7, #0
 8004aa2:	3314      	adds	r3, #20
 8004aa4:	3201      	adds	r2, #1
 8004aa6:	801a      	strh	r2, [r3, #0]
 8004aa8:	1c3b      	adds	r3, r7, #0
 8004aaa:	3314      	adds	r3, #20
 8004aac:	881b      	ldrh	r3, [r3, #0]
 8004aae:	029b      	lsls	r3, r3, #10
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	801a      	strh	r2, [r3, #0]
          _SetEPRxStatus(ENDP0,EP_RX_VALID);
 8004ab6:	4b67      	ldr	r3, [pc, #412]	; (8004c54 <CTR+0x378>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	4b70      	ldr	r3, [pc, #448]	; (8004c80 <CTR+0x3a4>)
 8004abe:	4013      	ands	r3, r2
 8004ac0:	b29c      	uxth	r4, r3
 8004ac2:	2380      	movs	r3, #128	; 0x80
 8004ac4:	015b      	lsls	r3, r3, #5
 8004ac6:	4063      	eors	r3, r4
 8004ac8:	b29c      	uxth	r4, r3
 8004aca:	2380      	movs	r3, #128	; 0x80
 8004acc:	019b      	lsls	r3, r3, #6
 8004ace:	4063      	eors	r3, r4
 8004ad0:	b29c      	uxth	r4, r3
 8004ad2:	4b60      	ldr	r3, [pc, #384]	; (8004c54 <CTR+0x378>)
 8004ad4:	4a6b      	ldr	r2, [pc, #428]	; (8004c84 <CTR+0x3a8>)
 8004ad6:	4322      	orrs	r2, r4
 8004ad8:	b292      	uxth	r2, r2
 8004ada:	601a      	str	r2, [r3, #0]
 8004adc:	e18c      	b.n	8004df8 <CTR+0x51c>
    {
      
      /* Decode and service non control endpoints interrupt  */
      
      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8004ade:	1c3b      	adds	r3, r7, #0
 8004ae0:	3313      	adds	r3, #19
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4a5b      	ldr	r2, [pc, #364]	; (8004c54 <CTR+0x378>)
 8004ae8:	189b      	adds	r3, r3, r2
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	1d3b      	adds	r3, r7, #4
 8004af0:	801a      	strh	r2, [r3, #0]
      if ((wEPVal & EP_CTR_RX) != 0)
 8004af2:	1d3b      	adds	r3, r7, #4
 8004af4:	881b      	ldrh	r3, [r3, #0]
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	b21b      	sxth	r3, r3
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	db00      	blt.n	8004b02 <CTR+0x226>
 8004b00:	e0cc      	b.n	8004c9c <CTR+0x3c0>
      {  
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 8004b02:	1c3b      	adds	r3, r7, #0
 8004b04:	3313      	adds	r3, #19
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	4952      	ldr	r1, [pc, #328]	; (8004c54 <CTR+0x378>)
 8004b0c:	185b      	adds	r3, r3, r1
 8004b0e:	1c3a      	adds	r2, r7, #0
 8004b10:	3213      	adds	r2, #19
 8004b12:	7812      	ldrb	r2, [r2, #0]
 8004b14:	0092      	lsls	r2, r2, #2
 8004b16:	494f      	ldr	r1, [pc, #316]	; (8004c54 <CTR+0x378>)
 8004b18:	1852      	adds	r2, r2, r1
 8004b1a:	6812      	ldr	r2, [r2, #0]
 8004b1c:	b292      	uxth	r2, r2
 8004b1e:	1c11      	adds	r1, r2, #0
 8004b20:	4a53      	ldr	r2, [pc, #332]	; (8004c70 <CTR+0x394>)
 8004b22:	400a      	ands	r2, r1
 8004b24:	601a      	str	r2, [r3, #0]
        ep = &((&USB_Device_dev)->dev.out_ep[EPindex]);
 8004b26:	1c3b      	adds	r3, r7, #0
 8004b28:	3313      	adds	r3, #19
 8004b2a:	781a      	ldrb	r2, [r3, #0]
 8004b2c:	1c13      	adds	r3, r2, #0
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	189b      	adds	r3, r3, r2
 8004b32:	00db      	lsls	r3, r3, #3
 8004b34:	1c1a      	adds	r2, r3, #0
 8004b36:	32b8      	adds	r2, #184	; 0xb8
 8004b38:	4b4a      	ldr	r3, [pc, #296]	; (8004c64 <CTR+0x388>)
 8004b3a:	18d3      	adds	r3, r2, r3
 8004b3c:	60fb      	str	r3, [r7, #12]
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	7a9b      	ldrb	r3, [r3, #10]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d11a      	bne.n	8004b7c <CTR+0x2a0>
        {
          count = GetEPRxCount(ep->num);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	1c3c      	adds	r4, r7, #0
 8004b4c:	3416      	adds	r4, #22
 8004b4e:	1c18      	adds	r0, r3, #0
 8004b50:	f001 f8ae 	bl	8005cb0 <GetEPRxCount>
 8004b54:	1c03      	adds	r3, r0, #0
 8004b56:	8023      	strh	r3, [r4, #0]
          if (count != 0)
 8004b58:	1c3b      	adds	r3, r7, #0
 8004b5a:	3316      	adds	r3, #22
 8004b5c:	881b      	ldrh	r3, [r3, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d052      	beq.n	8004c08 <CTR+0x32c>
          {
            PMAToUserBufferCopy(ep->xfer_buff, ep->pmaadress, count);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6919      	ldr	r1, [r3, #16]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	889a      	ldrh	r2, [r3, #4]
 8004b6a:	1c3b      	adds	r3, r7, #0
 8004b6c:	3316      	adds	r3, #22
 8004b6e:	881b      	ldrh	r3, [r3, #0]
 8004b70:	1c08      	adds	r0, r1, #0
 8004b72:	1c11      	adds	r1, r2, #0
 8004b74:	1c1a      	adds	r2, r3, #0
 8004b76:	f001 fa6d 	bl	8006054 <PMAToUserBufferCopy>
 8004b7a:	e045      	b.n	8004c08 <CTR+0x32c>
          }
        }
        else
        {
          if (GetENDPOINT(ep->num) & EP_DTOG_RX)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	1c18      	adds	r0, r3, #0
 8004b82:	f000 fe4f 	bl	8005824 <GetENDPOINT>
 8004b86:	1c03      	adds	r3, r0, #0
 8004b88:	1c1a      	adds	r2, r3, #0
 8004b8a:	2380      	movs	r3, #128	; 0x80
 8004b8c:	01db      	lsls	r3, r3, #7
 8004b8e:	4013      	ands	r3, r2
 8004b90:	d01a      	beq.n	8004bc8 <CTR+0x2ec>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = GetEPDblBuf0Count(ep->num);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	1c3c      	adds	r4, r7, #0
 8004b98:	3416      	adds	r4, #22
 8004b9a:	1c18      	adds	r0, r3, #0
 8004b9c:	f001 f9a2 	bl	8005ee4 <GetEPDblBuf0Count>
 8004ba0:	1c03      	adds	r3, r0, #0
 8004ba2:	8023      	strh	r3, [r4, #0]
            if (count != 0)
 8004ba4:	1c3b      	adds	r3, r7, #0
 8004ba6:	3316      	adds	r3, #22
 8004ba8:	881b      	ldrh	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d026      	beq.n	8004bfc <CTR+0x320>
            {
              PMAToUserBufferCopy(ep->xfer_buff, ep->pmaaddr0, count);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6919      	ldr	r1, [r3, #16]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	88da      	ldrh	r2, [r3, #6]
 8004bb6:	1c3b      	adds	r3, r7, #0
 8004bb8:	3316      	adds	r3, #22
 8004bba:	881b      	ldrh	r3, [r3, #0]
 8004bbc:	1c08      	adds	r0, r1, #0
 8004bbe:	1c11      	adds	r1, r2, #0
 8004bc0:	1c1a      	adds	r2, r3, #0
 8004bc2:	f001 fa47 	bl	8006054 <PMAToUserBufferCopy>
 8004bc6:	e019      	b.n	8004bfc <CTR+0x320>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = GetEPDblBuf1Count(ep->num);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	1c3c      	adds	r4, r7, #0
 8004bce:	3416      	adds	r4, #22
 8004bd0:	1c18      	adds	r0, r3, #0
 8004bd2:	f001 f9a3 	bl	8005f1c <GetEPDblBuf1Count>
 8004bd6:	1c03      	adds	r3, r0, #0
 8004bd8:	8023      	strh	r3, [r4, #0]
            if (count != 0)
 8004bda:	1c3b      	adds	r3, r7, #0
 8004bdc:	3316      	adds	r3, #22
 8004bde:	881b      	ldrh	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00b      	beq.n	8004bfc <CTR+0x320>
            {
              PMAToUserBufferCopy(ep->xfer_buff, ep->pmaaddr1, count);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6919      	ldr	r1, [r3, #16]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	891a      	ldrh	r2, [r3, #8]
 8004bec:	1c3b      	adds	r3, r7, #0
 8004bee:	3316      	adds	r3, #22
 8004bf0:	881b      	ldrh	r3, [r3, #0]
 8004bf2:	1c08      	adds	r0, r1, #0
 8004bf4:	1c11      	adds	r1, r2, #0
 8004bf6:	1c1a      	adds	r2, r3, #0
 8004bf8:	f001 fa2c 	bl	8006054 <PMAToUserBufferCopy>
            }
          }
          FreeUserBuffer(ep->num, EP_DBUF_OUT);  
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	1c18      	adds	r0, r3, #0
 8004c02:	2100      	movs	r1, #0
 8004c04:	f001 f9a6 	bl	8005f54 <FreeUserBuffer>
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	699a      	ldr	r2, [r3, #24]
 8004c0c:	1c3b      	adds	r3, r7, #0
 8004c0e:	3316      	adds	r3, #22
 8004c10:	881b      	ldrh	r3, [r3, #0]
 8004c12:	18d2      	adds	r2, r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	619a      	str	r2, [r3, #24]
        ep->xfer_buff+=count;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	691a      	ldr	r2, [r3, #16]
 8004c1c:	1c3b      	adds	r3, r7, #0
 8004c1e:	3316      	adds	r3, #22
 8004c20:	881b      	ldrh	r3, [r3, #0]
 8004c22:	18d2      	adds	r2, r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	611a      	str	r2, [r3, #16]
       
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d006      	beq.n	8004c3e <CTR+0x362>
 8004c30:	1c3b      	adds	r3, r7, #0
 8004c32:	3316      	adds	r3, #22
 8004c34:	881a      	ldrh	r2, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d224      	bcs.n	8004c88 <CTR+0x3ac>
        {
          /* RX COMPLETE */
          USBD_DCD_INT_fops->DataOutStage(&USB_Device_dev, ep->num);
 8004c3e:	4b08      	ldr	r3, [pc, #32]	; (8004c60 <CTR+0x384>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	7812      	ldrb	r2, [r2, #0]
 8004c48:	4906      	ldr	r1, [pc, #24]	; (8004c64 <CTR+0x388>)
 8004c4a:	1c08      	adds	r0, r1, #0
 8004c4c:	1c11      	adds	r1, r2, #0
 8004c4e:	4798      	blx	r3
 8004c50:	e024      	b.n	8004c9c <CTR+0x3c0>
 8004c52:	46c0      	nop			; (mov r8, r8)
 8004c54:	40005c00 	.word	0x40005c00
 8004c58:	00008f0f 	.word	0x00008f0f
 8004c5c:	2000022c 	.word	0x2000022c
 8004c60:	20000090 	.word	0x20000090
 8004c64:	20000214 	.word	0x20000214
 8004c68:	200002cc 	.word	0x200002cc
 8004c6c:	20000224 	.word	0x20000224
 8004c70:	00000f8f 	.word	0x00000f8f
 8004c74:	40005c50 	.word	0x40005c50
 8004c78:	40006006 	.word	0x40006006
 8004c7c:	ffff8000 	.word	0xffff8000
 8004c80:	ffffbf8f 	.word	0xffffbf8f
 8004c84:	ffff8080 	.word	0xffff8080
        }
        else
        {
          DCD_EP_PrepareRx (&USB_Device_dev,ep->num, ep->xfer_buff, ep->xfer_len);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	7819      	ldrb	r1, [r3, #0]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	691a      	ldr	r2, [r3, #16]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	485f      	ldr	r0, [pc, #380]	; (8004e14 <CTR+0x538>)
 8004c98:	f000 fb88 	bl	80053ac <DCD_EP_PrepareRx>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & EP_CTR_TX) != 0)
 8004c9c:	1d3b      	adds	r3, r7, #4
 8004c9e:	881b      	ldrh	r3, [r3, #0]
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	1c1a      	adds	r2, r3, #0
 8004ca4:	2380      	movs	r3, #128	; 0x80
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	d100      	bne.n	8004cac <CTR+0x3d0>
 8004caa:	e0a5      	b.n	8004df8 <CTR+0x51c>
      {
        ep = &((&USB_Device_dev)->dev.in_ep[EPindex]);
 8004cac:	1c3b      	adds	r3, r7, #0
 8004cae:	3313      	adds	r3, #19
 8004cb0:	781a      	ldrb	r2, [r3, #0]
 8004cb2:	1c13      	adds	r3, r2, #0
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	189b      	adds	r3, r3, r2
 8004cb8:	00db      	lsls	r3, r3, #3
 8004cba:	1c1a      	adds	r2, r3, #0
 8004cbc:	3218      	adds	r2, #24
 8004cbe:	4b55      	ldr	r3, [pc, #340]	; (8004e14 <CTR+0x538>)
 8004cc0:	18d3      	adds	r3, r2, r3
 8004cc2:	60fb      	str	r3, [r7, #12]
        
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8004cc4:	1c3b      	adds	r3, r7, #0
 8004cc6:	3313      	adds	r3, #19
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4a52      	ldr	r2, [pc, #328]	; (8004e18 <CTR+0x53c>)
 8004cce:	189b      	adds	r3, r3, r2
 8004cd0:	1c3a      	adds	r2, r7, #0
 8004cd2:	3213      	adds	r2, #19
 8004cd4:	7812      	ldrb	r2, [r2, #0]
 8004cd6:	0092      	lsls	r2, r2, #2
 8004cd8:	494f      	ldr	r1, [pc, #316]	; (8004e18 <CTR+0x53c>)
 8004cda:	1852      	adds	r2, r2, r1
 8004cdc:	6812      	ldr	r2, [r2, #0]
 8004cde:	b292      	uxth	r2, r2
 8004ce0:	1c11      	adds	r1, r2, #0
 8004ce2:	4a4e      	ldr	r2, [pc, #312]	; (8004e1c <CTR+0x540>)
 8004ce4:	400a      	ands	r2, r1
 8004ce6:	601a      	str	r2, [r3, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	7a9b      	ldrb	r3, [r3, #10]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d119      	bne.n	8004d24 <CTR+0x448>
        {
          ep->xfer_count = GetEPTxCount(ep->num);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	1c18      	adds	r0, r3, #0
 8004cf6:	f000 ffbf 	bl	8005c78 <GetEPTxCount>
 8004cfa:	1c03      	adds	r3, r0, #0
 8004cfc:	1c1a      	adds	r2, r3, #0
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	619a      	str	r2, [r3, #24]
          if (ep->xfer_count != 0)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d04f      	beq.n	8004daa <CTR+0x4ce>
          {
            UserToPMABufferCopy(ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6919      	ldr	r1, [r3, #16]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	889a      	ldrh	r2, [r3, #4]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	1c08      	adds	r0, r1, #0
 8004d1a:	1c11      	adds	r1, r2, #0
 8004d1c:	1c1a      	adds	r2, r3, #0
 8004d1e:	f001 f95b 	bl	8005fd8 <UserToPMABufferCopy>
 8004d22:	e042      	b.n	8004daa <CTR+0x4ce>
          }
        }
        else
        {
          if (GetENDPOINT(ep->num) & EP_DTOG_TX)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	1c18      	adds	r0, r3, #0
 8004d2a:	f000 fd7b 	bl	8005824 <GetENDPOINT>
 8004d2e:	1c03      	adds	r3, r0, #0
 8004d30:	1c1a      	adds	r2, r3, #0
 8004d32:	2340      	movs	r3, #64	; 0x40
 8004d34:	4013      	ands	r3, r2
 8004d36:	d019      	beq.n	8004d6c <CTR+0x490>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = GetEPDblBuf0Count(ep->num);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	1c18      	adds	r0, r3, #0
 8004d3e:	f001 f8d1 	bl	8005ee4 <GetEPDblBuf0Count>
 8004d42:	1c03      	adds	r3, r0, #0
 8004d44:	1c1a      	adds	r2, r3, #0
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	619a      	str	r2, [r3, #24]
            if (ep->xfer_count != 0)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d025      	beq.n	8004d9e <CTR+0x4c2>
            {
              UserToPMABufferCopy(ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6919      	ldr	r1, [r3, #16]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	88da      	ldrh	r2, [r3, #6]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	1c08      	adds	r0, r1, #0
 8004d62:	1c11      	adds	r1, r2, #0
 8004d64:	1c1a      	adds	r2, r3, #0
 8004d66:	f001 f937 	bl	8005fd8 <UserToPMABufferCopy>
 8004d6a:	e018      	b.n	8004d9e <CTR+0x4c2>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = GetEPDblBuf1Count(ep->num);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	1c18      	adds	r0, r3, #0
 8004d72:	f001 f8d3 	bl	8005f1c <GetEPDblBuf1Count>
 8004d76:	1c03      	adds	r3, r0, #0
 8004d78:	1c1a      	adds	r2, r3, #0
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	619a      	str	r2, [r3, #24]
            if (ep->xfer_count != 0)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00b      	beq.n	8004d9e <CTR+0x4c2>
            {
              UserToPMABufferCopy(ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6919      	ldr	r1, [r3, #16]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	891a      	ldrh	r2, [r3, #8]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	1c08      	adds	r0, r1, #0
 8004d96:	1c11      	adds	r1, r2, #0
 8004d98:	1c1a      	adds	r2, r3, #0
 8004d9a:	f001 f91d 	bl	8005fd8 <UserToPMABufferCopy>
            }
          }
          FreeUserBuffer(ep->num, EP_DBUF_IN);  
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	1c18      	adds	r0, r3, #0
 8004da4:	2101      	movs	r1, #1
 8004da6:	f001 f8d5 	bl	8005f54 <FreeUserBuffer>
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count =GetEPTxCount(ep->num);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	1c18      	adds	r0, r3, #0
 8004db0:	f000 ff62 	bl	8005c78 <GetEPTxCount>
 8004db4:	1c03      	adds	r3, r0, #0
 8004db6:	1c1a      	adds	r2, r3, #0
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	619a      	str	r2, [r3, #24]
        ep->xfer_buff+=ep->xfer_count;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	691a      	ldr	r2, [r3, #16]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	18d2      	adds	r2, r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	611a      	str	r2, [r3, #16]
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d109      	bne.n	8004de6 <CTR+0x50a>
        {
          /* TX COMPLETE */
          USBD_DCD_INT_fops->DataInStage(&USB_Device_dev, ep->num);
 8004dd2:	4b13      	ldr	r3, [pc, #76]	; (8004e20 <CTR+0x544>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	7812      	ldrb	r2, [r2, #0]
 8004ddc:	490d      	ldr	r1, [pc, #52]	; (8004e14 <CTR+0x538>)
 8004dde:	1c08      	adds	r0, r1, #0
 8004de0:	1c11      	adds	r1, r2, #0
 8004de2:	4798      	blx	r3
 8004de4:	e008      	b.n	8004df8 <CTR+0x51c>
        }
        else
        {
          DCD_EP_Tx  (&USB_Device_dev,ep->num, ep->xfer_buff, ep->xfer_len);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	7819      	ldrb	r1, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	691a      	ldr	r2, [r3, #16]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	4808      	ldr	r0, [pc, #32]	; (8004e14 <CTR+0x538>)
 8004df4:	f000 fb3c 	bl	8005470 <DCD_EP_Tx>
  uint16_t count=0;
  uint8_t EPindex;
  volatile uint16_t wIstr;
  volatile uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8004df8:	4b0a      	ldr	r3, [pc, #40]	; (8004e24 <CTR+0x548>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	1dba      	adds	r2, r7, #6
 8004e00:	1c19      	adds	r1, r3, #0
 8004e02:	8011      	strh	r1, [r2, #0]
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	b21b      	sxth	r3, r3
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	da00      	bge.n	8004e0e <CTR+0x532>
 8004e0c:	e571      	b.n	80048f2 <CTR+0x16>
      } /* if((wEPVal & EP_CTR_TX) != 0) */
      
    }/* if(EPindex == 0) else */
    
  }/* while(...) */
}
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	b007      	add	sp, #28
 8004e12:	bd90      	pop	{r4, r7, pc}
 8004e14:	20000214 	.word	0x20000214
 8004e18:	40005c00 	.word	0x40005c00
 8004e1c:	00008f0f 	.word	0x00008f0f
 8004e20:	20000090 	.word	0x20000090
 8004e24:	40005c44 	.word	0x40005c44

08004e28 <USB_Istr>:
  * @brief ISTR events interrupt service routine
  * @param  None
  * @retval None
  */
void USB_Istr(void)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
  volatile uint16_t wIstr = 0;
 8004e2e:	1dbb      	adds	r3, r7, #6
 8004e30:	2200      	movs	r2, #0
 8004e32:	801a      	strh	r2, [r3, #0]
  
  wIstr = _GetISTR();
 8004e34:	4b46      	ldr	r3, [pc, #280]	; (8004f50 <USB_Istr+0x128>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	1dbb      	adds	r3, r7, #6
 8004e3c:	801a      	strh	r2, [r3, #0]
  
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 8004e3e:	1dbb      	adds	r3, r7, #6
 8004e40:	881b      	ldrh	r3, [r3, #0]
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	1c1a      	adds	r2, r3, #0
 8004e46:	4b43      	ldr	r3, [pc, #268]	; (8004f54 <USB_Istr+0x12c>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	401a      	ands	r2, r3
 8004e4c:	2380      	movs	r3, #128	; 0x80
 8004e4e:	021b      	lsls	r3, r3, #8
 8004e50:	4013      	ands	r3, r2
 8004e52:	d001      	beq.n	8004e58 <USB_Istr+0x30>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    CTR();
 8004e54:	f7ff fd42 	bl	80048dc <CTR>
  }
#endif  
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 8004e58:	1dbb      	adds	r3, r7, #6
 8004e5a:	881b      	ldrh	r3, [r3, #0]
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	1c1a      	adds	r2, r3, #0
 8004e60:	4b3c      	ldr	r3, [pc, #240]	; (8004f54 <USB_Istr+0x12c>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	401a      	ands	r2, r3
 8004e66:	2380      	movs	r3, #128	; 0x80
 8004e68:	00db      	lsls	r3, r3, #3
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	d00d      	beq.n	8004e8a <USB_Istr+0x62>
  {
    _SetISTR((uint16_t)CLR_RESET);
 8004e6e:	4b38      	ldr	r3, [pc, #224]	; (8004f50 <USB_Istr+0x128>)
 8004e70:	4a39      	ldr	r2, [pc, #228]	; (8004f58 <USB_Istr+0x130>)
 8004e72:	601a      	str	r2, [r3, #0]
    USBD_DCD_INT_fops->Reset(&USB_Device_dev);
 8004e74:	4b39      	ldr	r3, [pc, #228]	; (8004f5c <USB_Istr+0x134>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	4a39      	ldr	r2, [pc, #228]	; (8004f60 <USB_Istr+0x138>)
 8004e7c:	1c10      	adds	r0, r2, #0
 8004e7e:	4798      	blx	r3
    DCD_EP_SetAddress(&USB_Device_dev, 0);
 8004e80:	4b37      	ldr	r3, [pc, #220]	; (8004f60 <USB_Istr+0x138>)
 8004e82:	1c18      	adds	r0, r3, #0
 8004e84:	2100      	movs	r1, #0
 8004e86:	f000 fc47 	bl	8005718 <DCD_EP_SetAddress>
    _SetISTR((uint16_t)CLR_DOVR);
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_ERR)
  if (wIstr & ISTR_ERR & wInterrupt_Mask)
 8004e8a:	1dbb      	adds	r3, r7, #6
 8004e8c:	881b      	ldrh	r3, [r3, #0]
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	1c1a      	adds	r2, r3, #0
 8004e92:	4b30      	ldr	r3, [pc, #192]	; (8004f54 <USB_Istr+0x12c>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	401a      	ands	r2, r3
 8004e98:	2380      	movs	r3, #128	; 0x80
 8004e9a:	019b      	lsls	r3, r3, #6
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	d002      	beq.n	8004ea6 <USB_Istr+0x7e>
  {
    _SetISTR((uint16_t)CLR_ERR);
 8004ea0:	4b2b      	ldr	r3, [pc, #172]	; (8004f50 <USB_Istr+0x128>)
 8004ea2:	4a30      	ldr	r2, [pc, #192]	; (8004f64 <USB_Istr+0x13c>)
 8004ea4:	601a      	str	r2, [r3, #0]
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
 8004ea6:	1dbb      	adds	r3, r7, #6
 8004ea8:	881b      	ldrh	r3, [r3, #0]
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	1c1a      	adds	r2, r3, #0
 8004eae:	4b29      	ldr	r3, [pc, #164]	; (8004f54 <USB_Istr+0x12c>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	401a      	ands	r2, r3
 8004eb4:	2380      	movs	r3, #128	; 0x80
 8004eb6:	015b      	lsls	r3, r3, #5
 8004eb8:	4013      	ands	r3, r2
 8004eba:	d00b      	beq.n	8004ed4 <USB_Istr+0xac>
  {
    _SetISTR((uint16_t)CLR_WKUP);
 8004ebc:	4b24      	ldr	r3, [pc, #144]	; (8004f50 <USB_Istr+0x128>)
 8004ebe:	4a2a      	ldr	r2, [pc, #168]	; (8004f68 <USB_Istr+0x140>)
 8004ec0:	601a      	str	r2, [r3, #0]
    
    USBD_DCD_INT_fops->Resume(&USB_Device_dev);
 8004ec2:	4b26      	ldr	r3, [pc, #152]	; (8004f5c <USB_Istr+0x134>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	4a25      	ldr	r2, [pc, #148]	; (8004f60 <USB_Istr+0x138>)
 8004eca:	1c10      	adds	r0, r2, #0
 8004ecc:	4798      	blx	r3
     
    /* Handle Resume state machine */  
    Resume(RESUME_EXTERNAL);
 8004ece:	2000      	movs	r0, #0
 8004ed0:	f7fd f976 	bl	80021c0 <Resume>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_SUSP)
  if (wIstr & ISTR_SUSP & wInterrupt_Mask)
 8004ed4:	1dbb      	adds	r3, r7, #6
 8004ed6:	881b      	ldrh	r3, [r3, #0]
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	1c1a      	adds	r2, r3, #0
 8004edc:	4b1d      	ldr	r3, [pc, #116]	; (8004f54 <USB_Istr+0x12c>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	401a      	ands	r2, r3
 8004ee2:	2380      	movs	r3, #128	; 0x80
 8004ee4:	011b      	lsls	r3, r3, #4
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	d00a      	beq.n	8004f00 <USB_Istr+0xd8>
  {
   /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    _SetISTR((uint16_t)CLR_SUSP);
 8004eea:	4b19      	ldr	r3, [pc, #100]	; (8004f50 <USB_Istr+0x128>)
 8004eec:	4a1f      	ldr	r2, [pc, #124]	; (8004f6c <USB_Istr+0x144>)
 8004eee:	601a      	str	r2, [r3, #0]
    
    /* process library core layer suspend routine*/
    USBD_DCD_INT_fops->Suspend(&USB_Device_dev); 
 8004ef0:	4b1a      	ldr	r3, [pc, #104]	; (8004f5c <USB_Istr+0x134>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	4a1a      	ldr	r2, [pc, #104]	; (8004f60 <USB_Istr+0x138>)
 8004ef8:	1c10      	adds	r0, r2, #0
 8004efa:	4798      	blx	r3
    
    /* enter macrocell in suspend and system in low power mode when 
       USB_DEVICE_LOW_PWR_MGMT_SUPPORT defined in usb_conf.h */
    Suspend();   
 8004efc:	f7fd f922 	bl	8002144 <Suspend>
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8004f00:	1dbb      	adds	r3, r7, #6
 8004f02:	881b      	ldrh	r3, [r3, #0]
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	1c1a      	adds	r2, r3, #0
 8004f08:	4b12      	ldr	r3, [pc, #72]	; (8004f54 <USB_Istr+0x12c>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	401a      	ands	r2, r3
 8004f0e:	2380      	movs	r3, #128	; 0x80
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4013      	ands	r3, r2
 8004f14:	d008      	beq.n	8004f28 <USB_Istr+0x100>
  {
    _SetISTR((uint16_t)CLR_SOF);
 8004f16:	4b0e      	ldr	r3, [pc, #56]	; (8004f50 <USB_Istr+0x128>)
 8004f18:	4a15      	ldr	r2, [pc, #84]	; (8004f70 <USB_Istr+0x148>)
 8004f1a:	601a      	str	r2, [r3, #0]
    USBD_DCD_INT_fops->SOF(&USB_Device_dev);
 8004f1c:	4b0f      	ldr	r3, [pc, #60]	; (8004f5c <USB_Istr+0x134>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	4a0f      	ldr	r2, [pc, #60]	; (8004f60 <USB_Istr+0x138>)
 8004f24:	1c10      	adds	r0, r2, #0
 8004f26:	4798      	blx	r3
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
 8004f28:	1dbb      	adds	r3, r7, #6
 8004f2a:	881b      	ldrh	r3, [r3, #0]
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	1c1a      	adds	r2, r3, #0
 8004f30:	4b08      	ldr	r3, [pc, #32]	; (8004f54 <USB_Istr+0x12c>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	401a      	ands	r2, r3
 8004f36:	2380      	movs	r3, #128	; 0x80
 8004f38:	005b      	lsls	r3, r3, #1
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	d005      	beq.n	8004f4a <USB_Istr+0x122>
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 8004f3e:	4b04      	ldr	r3, [pc, #16]	; (8004f50 <USB_Istr+0x128>)
 8004f40:	4a0c      	ldr	r2, [pc, #48]	; (8004f74 <USB_Istr+0x14c>)
 8004f42:	601a      	str	r2, [r3, #0]
    
    /* resume handling timing is made with ESOFs */
    Resume(RESUME_ESOF); /* request without change of the machine state */
 8004f44:	2007      	movs	r0, #7
 8004f46:	f7fd f93b 	bl	80021c0 <Resume>
    STM32F072 can wakeup system from STOP mode in less than 50 us */
    Suspend();
  }
#endif
#endif
} /* USB_Istr */
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	b002      	add	sp, #8
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	40005c44 	.word	0x40005c44
 8004f54:	20000178 	.word	0x20000178
 8004f58:	0000fbff 	.word	0x0000fbff
 8004f5c:	20000090 	.word	0x20000090
 8004f60:	20000214 	.word	0x20000214
 8004f64:	0000dfff 	.word	0x0000dfff
 8004f68:	0000efff 	.word	0x0000efff
 8004f6c:	0000f7ff 	.word	0x0000f7ff
 8004f70:	0000fdff 	.word	0x0000fdff
 8004f74:	0000feff 	.word	0x0000feff

08004f78 <DCD_Init>:
  * @brief Device Initialization
  * @param  pdev: device instance
  * @retval : None
  */
void DCD_Init(USB_CORE_HANDLE *pdev)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /*Device is in Default State*/
  pdev->dev.device_status = USB_DEFAULT;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	709a      	strb	r2, [r3, #2]
  pdev->dev.device_address = 0;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	711a      	strb	r2, [r3, #4]
  pdev->dev.DevRemoteWakeup = 0;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	609a      	str	r2, [r3, #8]
  
  pdev->dev.speed = USB_SPEED_FULL; /*kept for API compatibility reason*/
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2201      	movs	r2, #1
 8004f96:	60da      	str	r2, [r3, #12]
  
  /*CNTR_FRES = 1*/
  SetCNTR(CNTR_FRES);
 8004f98:	2001      	movs	r0, #1
 8004f9a:	f000 fc0f 	bl	80057bc <SetCNTR>
  
  /*CNTR_FRES = 0*/
  SetCNTR(0);
 8004f9e:	2000      	movs	r0, #0
 8004fa0:	f000 fc0c 	bl	80057bc <SetCNTR>
  
  /*Clear pending interrupts*/
  SetISTR(0);
 8004fa4:	2000      	movs	r0, #0
 8004fa6:	f000 fc19 	bl	80057dc <SetISTR>
  
  /*Set Btable Address*/
  SetBTABLE(BTABLE_ADDRESS);
 8004faa:	2000      	movs	r0, #0
 8004fac:	f000 fc26 	bl	80057fc <SetBTABLE>
  
  /*set wInterrupt_Mask global variable*/
  wInterrupt_Mask = CNTR_CTRM  | CNTR_WKUPM | CNTR_SUSPM | CNTR_ERRM  | CNTR_SOFM \
 8004fb0:	4b06      	ldr	r3, [pc, #24]	; (8004fcc <DCD_Init+0x54>)
 8004fb2:	22bf      	movs	r2, #191	; 0xbf
 8004fb4:	0212      	lsls	r2, r2, #8
 8004fb6:	601a      	str	r2, [r3, #0]
  /* Enable LPM support and enable ACK answer to LPM request*/
  _SetLPMCSR(LPMCSR_LMPEN | LPMCSR_LPMACK);
#endif
 
  /*Set interrupt mask*/
  SetCNTR(wInterrupt_Mask); 
 8004fb8:	4b04      	ldr	r3, [pc, #16]	; (8004fcc <DCD_Init+0x54>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	1c18      	adds	r0, r3, #0
 8004fc0:	f000 fbfc 	bl	80057bc <SetCNTR>
}
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	b002      	add	sp, #8
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	46c0      	nop			; (mov r8, r8)
 8004fcc:	20000178 	.word	0x20000178

08004fd0 <DCD_PMA_Config>:
uint32_t DCD_PMA_Config(USB_CORE_HANDLE *pdev , 
                        uint16_t ep_addr,
                        uint16_t ep_kind,
                        uint32_t pmaadress)

{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b086      	sub	sp, #24
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	607b      	str	r3, [r7, #4]
 8004fda:	1c3b      	adds	r3, r7, #0
 8004fdc:	330a      	adds	r3, #10
 8004fde:	8019      	strh	r1, [r3, #0]
 8004fe0:	1c3b      	adds	r3, r7, #0
 8004fe2:	3308      	adds	r3, #8
 8004fe4:	801a      	strh	r2, [r3, #0]
  USB_EP *ep;
  /* initialize ep structure*/
  if ((ep_addr & 0x80) == 0x80)
 8004fe6:	1c3b      	adds	r3, r7, #0
 8004fe8:	330a      	adds	r3, #10
 8004fea:	881a      	ldrh	r2, [r3, #0]
 8004fec:	2380      	movs	r3, #128	; 0x80
 8004fee:	4013      	ands	r3, r2
 8004ff0:	d00d      	beq.n	800500e <DCD_PMA_Config+0x3e>
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8004ff2:	1c3b      	adds	r3, r7, #0
 8004ff4:	330a      	adds	r3, #10
 8004ff6:	881a      	ldrh	r2, [r3, #0]
 8004ff8:	237f      	movs	r3, #127	; 0x7f
 8004ffa:	401a      	ands	r2, r3
 8004ffc:	1c13      	adds	r3, r2, #0
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	189b      	adds	r3, r3, r2
 8005002:	00db      	lsls	r3, r3, #3
 8005004:	3318      	adds	r3, #24
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	18d3      	adds	r3, r2, r3
 800500a:	617b      	str	r3, [r7, #20]
 800500c:	e00c      	b.n	8005028 <DCD_PMA_Config+0x58>
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 800500e:	1c3b      	adds	r3, r7, #0
 8005010:	330a      	adds	r3, #10
 8005012:	881a      	ldrh	r2, [r3, #0]
 8005014:	237f      	movs	r3, #127	; 0x7f
 8005016:	401a      	ands	r2, r3
 8005018:	1c13      	adds	r3, r2, #0
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	189b      	adds	r3, r3, r2
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	33b8      	adds	r3, #184	; 0xb8
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	18d3      	adds	r3, r2, r3
 8005026:	617b      	str	r3, [r7, #20]
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == USB_SNG_BUF)
 8005028:	1c3b      	adds	r3, r7, #0
 800502a:	3308      	adds	r3, #8
 800502c:	881b      	ldrh	r3, [r3, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d107      	bne.n	8005042 <DCD_PMA_Config+0x72>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0;
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	2200      	movs	r2, #0
 8005036:	729a      	strb	r2, [r3, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	b29a      	uxth	r2, r3
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	809a      	strh	r2, [r3, #4]
 8005040:	e00b      	b.n	800505a <DCD_PMA_Config+0x8a>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	2201      	movs	r2, #1
 8005046:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	b29a      	uxth	r2, r3
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	0c1b      	lsrs	r3, r3, #16
 8005054:	b29a      	uxth	r2, r3
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	811a      	strh	r2, [r3, #8]
  }
  
  return USB_OK; 
 800505a:	2300      	movs	r3, #0
}
 800505c:	1c18      	adds	r0, r3, #0
 800505e:	46bd      	mov	sp, r7
 8005060:	b006      	add	sp, #24
 8005062:	bd80      	pop	{r7, pc}

08005064 <DCD_EP_Open>:
  */
uint32_t DCD_EP_Open(USB_CORE_HANDLE *pdev , 
                     uint16_t ep_addr,
                     uint16_t ep_mps,
                     uint8_t ep_type)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	1c08      	adds	r0, r1, #0
 800506e:	1c11      	adds	r1, r2, #0
 8005070:	1c1a      	adds	r2, r3, #0
 8005072:	1c3b      	adds	r3, r7, #0
 8005074:	330a      	adds	r3, #10
 8005076:	8018      	strh	r0, [r3, #0]
 8005078:	1c3b      	adds	r3, r7, #0
 800507a:	3308      	adds	r3, #8
 800507c:	8019      	strh	r1, [r3, #0]
 800507e:	1dfb      	adds	r3, r7, #7
 8005080:	701a      	strb	r2, [r3, #0]
  
  USB_EP *ep;
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80) == 0x80)
 8005082:	1c3b      	adds	r3, r7, #0
 8005084:	330a      	adds	r3, #10
 8005086:	881a      	ldrh	r2, [r3, #0]
 8005088:	2380      	movs	r3, #128	; 0x80
 800508a:	4013      	ands	r3, r2
 800508c:	d010      	beq.n	80050b0 <DCD_EP_Open+0x4c>
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 800508e:	1c3b      	adds	r3, r7, #0
 8005090:	330a      	adds	r3, #10
 8005092:	881a      	ldrh	r2, [r3, #0]
 8005094:	237f      	movs	r3, #127	; 0x7f
 8005096:	401a      	ands	r2, r3
 8005098:	1c13      	adds	r3, r2, #0
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	189b      	adds	r3, r3, r2
 800509e:	00db      	lsls	r3, r3, #3
 80050a0:	3318      	adds	r3, #24
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	18d3      	adds	r3, r2, r3
 80050a6:	617b      	str	r3, [r7, #20]
    ep->is_in = 1;
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	2201      	movs	r2, #1
 80050ac:	705a      	strb	r2, [r3, #1]
 80050ae:	e00f      	b.n	80050d0 <DCD_EP_Open+0x6c>
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 80050b0:	1c3b      	adds	r3, r7, #0
 80050b2:	330a      	adds	r3, #10
 80050b4:	881a      	ldrh	r2, [r3, #0]
 80050b6:	237f      	movs	r3, #127	; 0x7f
 80050b8:	401a      	ands	r2, r3
 80050ba:	1c13      	adds	r3, r2, #0
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	189b      	adds	r3, r3, r2
 80050c0:	00db      	lsls	r3, r3, #3
 80050c2:	33b8      	adds	r3, #184	; 0xb8
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	18d3      	adds	r3, r2, r3
 80050c8:	617b      	str	r3, [r7, #20]
    ep->is_in = 0;
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	2200      	movs	r2, #0
 80050ce:	705a      	strb	r2, [r3, #1]
  }
  
  ep->maxpacket = ep_mps;
 80050d0:	1c3b      	adds	r3, r7, #0
 80050d2:	3308      	adds	r3, #8
 80050d4:	881a      	ldrh	r2, [r3, #0]
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	1dfa      	adds	r2, r7, #7
 80050de:	7812      	ldrb	r2, [r2, #0]
 80050e0:	70da      	strb	r2, [r3, #3]
  ep->num   = ep_addr & 0x7F;
 80050e2:	1c3b      	adds	r3, r7, #0
 80050e4:	330a      	adds	r3, #10
 80050e6:	881b      	ldrh	r3, [r3, #0]
 80050e8:	b2da      	uxtb	r2, r3
 80050ea:	237f      	movs	r3, #127	; 0x7f
 80050ec:	4013      	ands	r3, r2
 80050ee:	b2da      	uxtb	r2, r3
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	701a      	strb	r2, [r3, #0]
  
  if (ep->num == 0)
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d108      	bne.n	800510e <DCD_EP_Open+0xaa>
  {
    /* Initialize the control transfer variables*/ 
    ep->ctl_data_len =0;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	2200      	movs	r2, #0
 8005100:	625a      	str	r2, [r3, #36]	; 0x24
    ep->rem_data_len = 0;
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	2200      	movs	r2, #0
 8005106:	61da      	str	r2, [r3, #28]
    ep->total_data_len = 0;
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	2200      	movs	r2, #0
 800510c:	621a      	str	r2, [r3, #32]
  }
  
  /* Initialize the transaction level variables */
  ep->xfer_buff = 0;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	2200      	movs	r2, #0
 8005112:	611a      	str	r2, [r3, #16]
  ep->xfer_len = 0;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	2200      	movs	r2, #0
 8005118:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	2200      	movs	r2, #0
 800511e:	619a      	str	r2, [r3, #24]
  ep->is_stall = 0;
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	2200      	movs	r2, #0
 8005124:	709a      	strb	r2, [r3, #2]
  
  /* initialize HW */
  switch (ep->type)
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	78db      	ldrb	r3, [r3, #3]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d021      	beq.n	8005172 <DCD_EP_Open+0x10e>
 800512e:	dc02      	bgt.n	8005136 <DCD_EP_Open+0xd2>
 8005130:	2b00      	cmp	r3, #0
 8005132:	d005      	beq.n	8005140 <DCD_EP_Open+0xdc>
 8005134:	e026      	b.n	8005184 <DCD_EP_Open+0x120>
 8005136:	2b02      	cmp	r3, #2
 8005138:	d00b      	beq.n	8005152 <DCD_EP_Open+0xee>
 800513a:	2b03      	cmp	r3, #3
 800513c:	d010      	beq.n	8005160 <DCD_EP_Open+0xfc>
 800513e:	e021      	b.n	8005184 <DCD_EP_Open+0x120>
  {
  case USB_EP_CONTROL:
    SetEPType(ep->num, EP_CONTROL);
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	781a      	ldrb	r2, [r3, #0]
 8005144:	2380      	movs	r3, #128	; 0x80
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	1c10      	adds	r0, r2, #0
 800514a:	1c19      	adds	r1, r3, #0
 800514c:	f000 fb7e 	bl	800584c <SetEPType>
    break;
 8005150:	e018      	b.n	8005184 <DCD_EP_Open+0x120>
  case USB_EP_BULK:
    SetEPType(ep->num, EP_BULK);
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	1c18      	adds	r0, r3, #0
 8005158:	2100      	movs	r1, #0
 800515a:	f000 fb77 	bl	800584c <SetEPType>
    break;
 800515e:	e011      	b.n	8005184 <DCD_EP_Open+0x120>
  case USB_EP_INT:
    SetEPType(ep->num, EP_INTERRUPT);
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	781a      	ldrb	r2, [r3, #0]
 8005164:	23c0      	movs	r3, #192	; 0xc0
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	1c10      	adds	r0, r2, #0
 800516a:	1c19      	adds	r1, r3, #0
 800516c:	f000 fb6e 	bl	800584c <SetEPType>
    break;
 8005170:	e008      	b.n	8005184 <DCD_EP_Open+0x120>
  case USB_EP_ISOC:
    SetEPType(ep->num, EP_ISOCHRONOUS);
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	781a      	ldrb	r2, [r3, #0]
 8005176:	2380      	movs	r3, #128	; 0x80
 8005178:	00db      	lsls	r3, r3, #3
 800517a:	1c10      	adds	r0, r2, #0
 800517c:	1c19      	adds	r1, r3, #0
 800517e:	f000 fb65 	bl	800584c <SetEPType>
    break;
 8005182:	46c0      	nop			; (mov r8, r8)
  } 
  
  if (ep->doublebuffer == 0) 
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	7a9b      	ldrb	r3, [r3, #10]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d136      	bne.n	80051fa <DCD_EP_Open+0x196>
  {
    if (ep->is_in)
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	785b      	ldrb	r3, [r3, #1]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d013      	beq.n	80051bc <DCD_EP_Open+0x158>
    {
      /*Set the endpoint Transmit buffer address */
      SetEPTxAddr(ep->num, ep->pmaadress);
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	781a      	ldrb	r2, [r3, #0]
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	889b      	ldrh	r3, [r3, #4]
 800519c:	1c10      	adds	r0, r2, #0
 800519e:	1c19      	adds	r1, r3, #0
 80051a0:	f000 fcb4 	bl	8005b0c <SetEPTxAddr>
      ClearDTOG_TX(ep->num);
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	1c18      	adds	r0, r3, #0
 80051aa:	f000 fc83 	bl	8005ab4 <ClearDTOG_TX>
      /* Configure NAK status for the Endpoint*/
      SetEPTxStatus(ep->num, EP_TX_NAK); 
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	1c18      	adds	r0, r3, #0
 80051b4:	2120      	movs	r1, #32
 80051b6:	f000 fb6f 	bl	8005898 <SetEPTxStatus>
 80051ba:	e06b      	b.n	8005294 <DCD_EP_Open+0x230>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      SetEPRxAddr(ep->num, ep->pmaadress);
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	781a      	ldrb	r2, [r3, #0]
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	889b      	ldrh	r3, [r3, #4]
 80051c4:	1c10      	adds	r0, r2, #0
 80051c6:	1c19      	adds	r1, r3, #0
 80051c8:	f000 fcc0 	bl	8005b4c <SetEPRxAddr>
      /*Set the endpoint Receive buffer counter*/
      SetEPRxCount(ep->num, ep->maxpacket);
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	781a      	ldrb	r2, [r3, #0]
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	1c10      	adds	r0, r2, #0
 80051d8:	1c19      	adds	r1, r3, #0
 80051da:	f000 fcf5 	bl	8005bc8 <SetEPRxCount>
      ClearDTOG_RX(ep->num);
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	1c18      	adds	r0, r3, #0
 80051e4:	f000 fc38 	bl	8005a58 <ClearDTOG_RX>
      /* Configure VALID status for the Endpoint*/
      SetEPRxStatus(ep->num, EP_RX_VALID);
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	781a      	ldrb	r2, [r3, #0]
 80051ec:	23c0      	movs	r3, #192	; 0xc0
 80051ee:	019b      	lsls	r3, r3, #6
 80051f0:	1c10      	adds	r0, r2, #0
 80051f2:	1c19      	adds	r1, r3, #0
 80051f4:	f000 fb8a 	bl	800590c <SetEPRxStatus>
 80051f8:	e04c      	b.n	8005294 <DCD_EP_Open+0x230>
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    SetEPDoubleBuff(ep->num);
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	1c18      	adds	r0, r3, #0
 8005200:	f000 fbc2 	bl	8005988 <SetEPDoubleBuff>
    /*Set buffer address for double buffered mode*/
    SetEPDblBuffAddr(ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	7819      	ldrb	r1, [r3, #0]
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	88da      	ldrh	r2, [r3, #6]
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	891b      	ldrh	r3, [r3, #8]
 8005210:	1c08      	adds	r0, r1, #0
 8005212:	1c11      	adds	r1, r2, #0
 8005214:	1c1a      	adds	r2, r3, #0
 8005216:	f000 fd67 	bl	8005ce8 <SetEPDblBuffAddr>
    
    if (ep->is_in==0)
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	785b      	ldrb	r3, [r3, #1]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d11d      	bne.n	800525e <DCD_EP_Open+0x1fa>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      ClearDTOG_RX(ep->num);
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	1c18      	adds	r0, r3, #0
 8005228:	f000 fc16 	bl	8005a58 <ClearDTOG_RX>
      ClearDTOG_TX(ep->num);
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	1c18      	adds	r0, r3, #0
 8005232:	f000 fc3f 	bl	8005ab4 <ClearDTOG_TX>
      
      /* Reset value of the data toggle bits for the endpoint out*/
      ToggleDTOG_TX(ep->num);
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	1c18      	adds	r0, r3, #0
 800523c:	f000 fbea 	bl	8005a14 <ToggleDTOG_TX>
      
      SetEPRxStatus(ep->num, EP_RX_VALID);
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	781a      	ldrb	r2, [r3, #0]
 8005244:	23c0      	movs	r3, #192	; 0xc0
 8005246:	019b      	lsls	r3, r3, #6
 8005248:	1c10      	adds	r0, r2, #0
 800524a:	1c19      	adds	r1, r3, #0
 800524c:	f000 fb5e 	bl	800590c <SetEPRxStatus>
      SetEPTxStatus(ep->num, EP_TX_DIS);
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	1c18      	adds	r0, r3, #0
 8005256:	2100      	movs	r1, #0
 8005258:	f000 fb1e 	bl	8005898 <SetEPTxStatus>
 800525c:	e01a      	b.n	8005294 <DCD_EP_Open+0x230>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      ClearDTOG_RX(ep->num);
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	1c18      	adds	r0, r3, #0
 8005264:	f000 fbf8 	bl	8005a58 <ClearDTOG_RX>
      ClearDTOG_TX(ep->num);
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	1c18      	adds	r0, r3, #0
 800526e:	f000 fc21 	bl	8005ab4 <ClearDTOG_TX>
      ToggleDTOG_RX(ep->num);
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	1c18      	adds	r0, r3, #0
 8005278:	f000 fbaa 	bl	80059d0 <ToggleDTOG_RX>
      /* Configure DISABLE status for the Endpoint*/
      SetEPTxStatus(ep->num, EP_TX_DIS);
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	1c18      	adds	r0, r3, #0
 8005282:	2100      	movs	r1, #0
 8005284:	f000 fb08 	bl	8005898 <SetEPTxStatus>
      SetEPRxStatus(ep->num, EP_RX_DIS);
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	1c18      	adds	r0, r3, #0
 800528e:	2100      	movs	r1, #0
 8005290:	f000 fb3c 	bl	800590c <SetEPRxStatus>
    }
  } 
  return USB_OK; 
 8005294:	2300      	movs	r3, #0
}
 8005296:	1c18      	adds	r0, r3, #0
 8005298:	46bd      	mov	sp, r7
 800529a:	b006      	add	sp, #24
 800529c:	bd80      	pop	{r7, pc}
 800529e:	46c0      	nop			; (mov r8, r8)

080052a0 <DCD_EP_Close>:
  * @param  pdev: device instance
  * @param  ep_addr: endpoint address
  * @retval : status
  */
uint32_t DCD_EP_Close(USB_CORE_HANDLE *pdev , uint8_t  ep_addr)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	1c0a      	adds	r2, r1, #0
 80052aa:	1cfb      	adds	r3, r7, #3
 80052ac:	701a      	strb	r2, [r3, #0]
  USB_EP *ep;
  
  if ((ep_addr&0x80) == 0x80)
 80052ae:	1cfb      	adds	r3, r7, #3
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	b25b      	sxtb	r3, r3
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	da0c      	bge.n	80052d2 <DCD_EP_Close+0x32>
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 80052b8:	1cfb      	adds	r3, r7, #3
 80052ba:	781a      	ldrb	r2, [r3, #0]
 80052bc:	237f      	movs	r3, #127	; 0x7f
 80052be:	401a      	ands	r2, r3
 80052c0:	1c13      	adds	r3, r2, #0
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	189b      	adds	r3, r3, r2
 80052c6:	00db      	lsls	r3, r3, #3
 80052c8:	3318      	adds	r3, #24
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	18d3      	adds	r3, r2, r3
 80052ce:	60fb      	str	r3, [r7, #12]
 80052d0:	e00b      	b.n	80052ea <DCD_EP_Close+0x4a>
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 80052d2:	1cfb      	adds	r3, r7, #3
 80052d4:	781a      	ldrb	r2, [r3, #0]
 80052d6:	237f      	movs	r3, #127	; 0x7f
 80052d8:	401a      	ands	r2, r3
 80052da:	1c13      	adds	r3, r2, #0
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	189b      	adds	r3, r3, r2
 80052e0:	00db      	lsls	r3, r3, #3
 80052e2:	33b8      	adds	r3, #184	; 0xb8
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	18d3      	adds	r3, r2, r3
 80052e8:	60fb      	str	r3, [r7, #12]
  }
  
  if (ep->doublebuffer == 0) 
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	7a9b      	ldrb	r3, [r3, #10]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d11b      	bne.n	800532a <DCD_EP_Close+0x8a>
  {
    if (ep->is_in)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	785b      	ldrb	r3, [r3, #1]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00b      	beq.n	8005312 <DCD_EP_Close+0x72>
    {
      ClearDTOG_TX(ep->num);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	1c18      	adds	r0, r3, #0
 8005300:	f000 fbd8 	bl	8005ab4 <ClearDTOG_TX>
      /* Configure DISABLE status for the Endpoint*/
      SetEPTxStatus(ep->num, EP_TX_DIS); 
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	1c18      	adds	r0, r3, #0
 800530a:	2100      	movs	r1, #0
 800530c:	f000 fac4 	bl	8005898 <SetEPTxStatus>
 8005310:	e046      	b.n	80053a0 <DCD_EP_Close+0x100>
    }
    else
    {
      ClearDTOG_RX(ep->num);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	1c18      	adds	r0, r3, #0
 8005318:	f000 fb9e 	bl	8005a58 <ClearDTOG_RX>
      /* Configure DISABLE status for the Endpoint*/
      SetEPRxStatus(ep->num, EP_RX_DIS);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	1c18      	adds	r0, r3, #0
 8005322:	2100      	movs	r1, #0
 8005324:	f000 faf2 	bl	800590c <SetEPRxStatus>
 8005328:	e03a      	b.n	80053a0 <DCD_EP_Close+0x100>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	785b      	ldrb	r3, [r3, #1]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d11b      	bne.n	800536a <DCD_EP_Close+0xca>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      ClearDTOG_RX(ep->num);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	1c18      	adds	r0, r3, #0
 8005338:	f000 fb8e 	bl	8005a58 <ClearDTOG_RX>
      ClearDTOG_TX(ep->num);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	1c18      	adds	r0, r3, #0
 8005342:	f000 fbb7 	bl	8005ab4 <ClearDTOG_TX>
      
      /* Reset value of the data toggle bits for the endpoint out*/
      ToggleDTOG_TX(ep->num);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	1c18      	adds	r0, r3, #0
 800534c:	f000 fb62 	bl	8005a14 <ToggleDTOG_TX>
      
      SetEPRxStatus(ep->num, EP_RX_DIS);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	1c18      	adds	r0, r3, #0
 8005356:	2100      	movs	r1, #0
 8005358:	f000 fad8 	bl	800590c <SetEPRxStatus>
      SetEPTxStatus(ep->num, EP_TX_DIS);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	1c18      	adds	r0, r3, #0
 8005362:	2100      	movs	r1, #0
 8005364:	f000 fa98 	bl	8005898 <SetEPTxStatus>
 8005368:	e01a      	b.n	80053a0 <DCD_EP_Close+0x100>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      ClearDTOG_RX(ep->num);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	1c18      	adds	r0, r3, #0
 8005370:	f000 fb72 	bl	8005a58 <ClearDTOG_RX>
      ClearDTOG_TX(ep->num);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	1c18      	adds	r0, r3, #0
 800537a:	f000 fb9b 	bl	8005ab4 <ClearDTOG_TX>
      ToggleDTOG_RX(ep->num);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	1c18      	adds	r0, r3, #0
 8005384:	f000 fb24 	bl	80059d0 <ToggleDTOG_RX>
      /* Configure DISABLE status for the Endpoint*/
      SetEPTxStatus(ep->num, EP_TX_DIS);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	1c18      	adds	r0, r3, #0
 800538e:	2100      	movs	r1, #0
 8005390:	f000 fa82 	bl	8005898 <SetEPTxStatus>
      SetEPRxStatus(ep->num, EP_RX_DIS);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	1c18      	adds	r0, r3, #0
 800539a:	2100      	movs	r1, #0
 800539c:	f000 fab6 	bl	800590c <SetEPRxStatus>
    }
  } 
  return USB_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	1c18      	adds	r0, r3, #0
 80053a4:	46bd      	mov	sp, r7
 80053a6:	b004      	add	sp, #16
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	46c0      	nop			; (mov r8, r8)

080053ac <DCD_EP_PrepareRx>:
  */
uint32_t DCD_EP_PrepareRx( USB_CORE_HANDLE *pdev,
                          uint8_t   ep_addr,
                          uint8_t *pbuf,                        
                          uint16_t  buf_len)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	607a      	str	r2, [r7, #4]
 80053b6:	1c1a      	adds	r2, r3, #0
 80053b8:	1c3b      	adds	r3, r7, #0
 80053ba:	330b      	adds	r3, #11
 80053bc:	7019      	strb	r1, [r3, #0]
 80053be:	1c3b      	adds	r3, r7, #0
 80053c0:	3308      	adds	r3, #8
 80053c2:	801a      	strh	r2, [r3, #0]
  volatile uint32_t len = 0;
 80053c4:	2300      	movs	r3, #0
 80053c6:	613b      	str	r3, [r7, #16]
  USB_EP *ep;
  
  ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 80053c8:	1c3b      	adds	r3, r7, #0
 80053ca:	330b      	adds	r3, #11
 80053cc:	781a      	ldrb	r2, [r3, #0]
 80053ce:	237f      	movs	r3, #127	; 0x7f
 80053d0:	401a      	ands	r2, r3
 80053d2:	1c13      	adds	r3, r2, #0
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	189b      	adds	r3, r3, r2
 80053d8:	00db      	lsls	r3, r3, #3
 80053da:	33b8      	adds	r3, #184	; 0xb8
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	18d3      	adds	r3, r2, r3
 80053e0:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pbuf;  
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = buf_len;
 80053e8:	1c3b      	adds	r3, r7, #0
 80053ea:	3308      	adds	r3, #8
 80053ec:	881a      	ldrh	r2, [r3, #0]
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0; 
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	2200      	movs	r2, #0
 80053f6:	619a      	str	r2, [r3, #24]
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	695a      	ldr	r2, [r3, #20]
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	429a      	cmp	r2, r3
 8005402:	d909      	bls.n	8005418 <DCD_EP_PrepareRx+0x6c>
  {
    len=ep->maxpacket;
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	613b      	str	r3, [r7, #16]
    ep->xfer_len-=len; 
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	695a      	ldr	r2, [r3, #20]
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	1ad2      	subs	r2, r2, r3
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	615a      	str	r2, [r3, #20]
 8005416:	e005      	b.n	8005424 <DCD_EP_PrepareRx+0x78>
  }
  else
  {
    len=ep->xfer_len;
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	695b      	ldr	r3, [r3, #20]
 800541c:	613b      	str	r3, [r7, #16]
    ep->xfer_len =0;
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	2200      	movs	r2, #0
 8005422:	615a      	str	r2, [r3, #20]
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	7a9b      	ldrb	r3, [r3, #10]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d108      	bne.n	800543e <DCD_EP_PrepareRx+0x92>
  {
    /*Set RX buffer count*/
    SetEPRxCount(ep->num, len);
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	781a      	ldrb	r2, [r3, #0]
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	b29b      	uxth	r3, r3
 8005434:	1c10      	adds	r0, r2, #0
 8005436:	1c19      	adds	r1, r3, #0
 8005438:	f000 fbc6 	bl	8005bc8 <SetEPRxCount>
 800543c:	e00a      	b.n	8005454 <DCD_EP_PrepareRx+0xa8>
  }
  else
  {
    /*Set the Double buffer counter*/
    SetEPDblBuffCount(ep->num, ep->is_in, len);
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	7819      	ldrb	r1, [r3, #0]
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	785a      	ldrb	r2, [r3, #1]
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	b29b      	uxth	r3, r3
 800544a:	1c08      	adds	r0, r1, #0
 800544c:	1c11      	adds	r1, r2, #0
 800544e:	1c1a      	adds	r2, r3, #0
 8005450:	f000 fc7c 	bl	8005d4c <SetEPDblBuffCount>
  } 
  
  SetEPRxStatus(ep->num, EP_RX_VALID);
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	781a      	ldrb	r2, [r3, #0]
 8005458:	23c0      	movs	r3, #192	; 0xc0
 800545a:	019b      	lsls	r3, r3, #6
 800545c:	1c10      	adds	r0, r2, #0
 800545e:	1c19      	adds	r1, r3, #0
 8005460:	f000 fa54 	bl	800590c <SetEPRxStatus>
  
  return USB_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	1c18      	adds	r0, r3, #0
 8005468:	46bd      	mov	sp, r7
 800546a:	b006      	add	sp, #24
 800546c:	bd80      	pop	{r7, pc}
 800546e:	46c0      	nop			; (mov r8, r8)

08005470 <DCD_EP_Tx>:
  */
uint32_t  DCD_EP_Tx ( USB_CORE_HANDLE *pdev,
                     uint8_t   ep_addr,
                     uint8_t   *pbuf,
                     uint32_t   buf_len)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b088      	sub	sp, #32
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	607a      	str	r2, [r7, #4]
 800547a:	603b      	str	r3, [r7, #0]
 800547c:	1c3b      	adds	r3, r7, #0
 800547e:	330b      	adds	r3, #11
 8005480:	1c0a      	adds	r2, r1, #0
 8005482:	701a      	strb	r2, [r3, #0]
  volatile uint32_t len = 0;
 8005484:	2300      	movs	r3, #0
 8005486:	617b      	str	r3, [r7, #20]
  USB_EP *ep;
  
  ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8005488:	1c3b      	adds	r3, r7, #0
 800548a:	330b      	adds	r3, #11
 800548c:	781a      	ldrb	r2, [r3, #0]
 800548e:	237f      	movs	r3, #127	; 0x7f
 8005490:	401a      	ands	r2, r3
 8005492:	1c13      	adds	r3, r2, #0
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	189b      	adds	r3, r3, r2
 8005498:	00db      	lsls	r3, r3, #3
 800549a:	3318      	adds	r3, #24
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	18d3      	adds	r3, r2, r3
 80054a0:	61bb      	str	r3, [r7, #24]
  
  /*setup and start the Xfer */
  ep->num = ep_addr & 0x7F; 
 80054a2:	1c3b      	adds	r3, r7, #0
 80054a4:	330b      	adds	r3, #11
 80054a6:	781a      	ldrb	r2, [r3, #0]
 80054a8:	237f      	movs	r3, #127	; 0x7f
 80054aa:	4013      	ands	r3, r2
 80054ac:	b2da      	uxtb	r2, r3
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	701a      	strb	r2, [r3, #0]
  ep->xfer_buff = pbuf;  
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = buf_len;
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	683a      	ldr	r2, [r7, #0]
 80054bc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0; 
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	2200      	movs	r2, #0
 80054c2:	619a      	str	r2, [r3, #24]
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	695a      	ldr	r2, [r3, #20]
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d909      	bls.n	80054e4 <DCD_EP_Tx+0x74>
  {
    len=ep->maxpacket;
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	617b      	str	r3, [r7, #20]
    ep->xfer_len-=len; 
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	695a      	ldr	r2, [r3, #20]
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	1ad2      	subs	r2, r2, r3
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	615a      	str	r2, [r3, #20]
 80054e2:	e005      	b.n	80054f0 <DCD_EP_Tx+0x80>
  }
  else
  {
    len=ep->xfer_len;
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	695b      	ldr	r3, [r3, #20]
 80054e8:	617b      	str	r3, [r7, #20]
    ep->xfer_len =0;
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	2200      	movs	r2, #0
 80054ee:	615a      	str	r2, [r3, #20]
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0) 
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	7a9b      	ldrb	r3, [r3, #10]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d113      	bne.n	8005520 <DCD_EP_Tx+0xb0>
  {
    UserToPMABufferCopy(ep->xfer_buff, ep->pmaadress, len);
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	6919      	ldr	r1, [r3, #16]
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	889a      	ldrh	r2, [r3, #4]
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	b29b      	uxth	r3, r3
 8005504:	1c08      	adds	r0, r1, #0
 8005506:	1c11      	adds	r1, r2, #0
 8005508:	1c1a      	adds	r2, r3, #0
 800550a:	f000 fd65 	bl	8005fd8 <UserToPMABufferCopy>
    SetEPTxCount(ep->num, len);
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	781a      	ldrb	r2, [r3, #0]
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	b29b      	uxth	r3, r3
 8005516:	1c10      	adds	r0, r2, #0
 8005518:	1c19      	adds	r1, r3, #0
 800551a:	f000 fb37 	bl	8005b8c <SetEPTxCount>
 800551e:	e037      	b.n	8005590 <DCD_EP_Tx+0x120>
  }
  else
  {
    uint16_t pmabuffer=0;
 8005520:	1c3b      	adds	r3, r7, #0
 8005522:	331e      	adds	r3, #30
 8005524:	2200      	movs	r2, #0
 8005526:	801a      	strh	r2, [r3, #0]
    /*Set the Double buffer counter*/
    SetEPDblBuffCount(ep->num, ep->is_in, len);
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	7819      	ldrb	r1, [r3, #0]
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	785a      	ldrb	r2, [r3, #1]
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	b29b      	uxth	r3, r3
 8005534:	1c08      	adds	r0, r1, #0
 8005536:	1c11      	adds	r1, r2, #0
 8005538:	1c1a      	adds	r2, r3, #0
 800553a:	f000 fc07 	bl	8005d4c <SetEPDblBuffCount>
    
    /*Write the data to the USB endpoint*/
    if (GetENDPOINT(ep->num)&EP_DTOG_TX)
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	1c18      	adds	r0, r3, #0
 8005544:	f000 f96e 	bl	8005824 <GetENDPOINT>
 8005548:	1c03      	adds	r3, r0, #0
 800554a:	1c1a      	adds	r2, r3, #0
 800554c:	2340      	movs	r3, #64	; 0x40
 800554e:	4013      	ands	r3, r2
 8005550:	d005      	beq.n	800555e <DCD_EP_Tx+0xee>
    {
      pmabuffer = ep->pmaaddr1;
 8005552:	1c3b      	adds	r3, r7, #0
 8005554:	331e      	adds	r3, #30
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	8912      	ldrh	r2, [r2, #8]
 800555a:	801a      	strh	r2, [r3, #0]
 800555c:	e004      	b.n	8005568 <DCD_EP_Tx+0xf8>
    }
    else
    {
      pmabuffer = ep->pmaaddr0;
 800555e:	1c3b      	adds	r3, r7, #0
 8005560:	331e      	adds	r3, #30
 8005562:	69ba      	ldr	r2, [r7, #24]
 8005564:	88d2      	ldrh	r2, [r2, #6]
 8005566:	801a      	strh	r2, [r3, #0]
    }
    UserToPMABufferCopy(ep->xfer_buff, pmabuffer, len);
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	6919      	ldr	r1, [r3, #16]
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	b29b      	uxth	r3, r3
 8005570:	1c3a      	adds	r2, r7, #0
 8005572:	321e      	adds	r2, #30
 8005574:	8812      	ldrh	r2, [r2, #0]
 8005576:	1c08      	adds	r0, r1, #0
 8005578:	1c11      	adds	r1, r2, #0
 800557a:	1c1a      	adds	r2, r3, #0
 800557c:	f000 fd2c 	bl	8005fd8 <UserToPMABufferCopy>
    FreeUserBuffer(ep->num, ep->is_in);
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	781a      	ldrb	r2, [r3, #0]
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	785b      	ldrb	r3, [r3, #1]
 8005588:	1c10      	adds	r0, r2, #0
 800558a:	1c19      	adds	r1, r3, #0
 800558c:	f000 fce2 	bl	8005f54 <FreeUserBuffer>
  }
  
  SetEPTxStatus(ep->num, EP_TX_VALID);
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	1c18      	adds	r0, r3, #0
 8005596:	2130      	movs	r1, #48	; 0x30
 8005598:	f000 f97e 	bl	8005898 <SetEPTxStatus>
  
  return USB_OK; 
 800559c:	2300      	movs	r3, #0
}
 800559e:	1c18      	adds	r0, r3, #0
 80055a0:	46bd      	mov	sp, r7
 80055a2:	b008      	add	sp, #32
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	46c0      	nop			; (mov r8, r8)

080055a8 <DCD_EP_Stall>:
  * @param  pdev: device instance
  * @param  epnum: endpoint address
  * @retval : status
  */
uint32_t  DCD_EP_Stall (USB_CORE_HANDLE *pdev, uint8_t   epnum)
{
 80055a8:	b590      	push	{r4, r7, lr}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	1c0a      	adds	r2, r1, #0
 80055b2:	1cfb      	adds	r3, r7, #3
 80055b4:	701a      	strb	r2, [r3, #0]
  USB_EP *ep;
  if ((0x80 & epnum) == 0x80)
 80055b6:	1cfb      	adds	r3, r7, #3
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	b25b      	sxtb	r3, r3
 80055bc:	2b00      	cmp	r3, #0
 80055be:	da0c      	bge.n	80055da <DCD_EP_Stall+0x32>
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];    
 80055c0:	1cfb      	adds	r3, r7, #3
 80055c2:	781a      	ldrb	r2, [r3, #0]
 80055c4:	237f      	movs	r3, #127	; 0x7f
 80055c6:	401a      	ands	r2, r3
 80055c8:	1c13      	adds	r3, r2, #0
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	189b      	adds	r3, r3, r2
 80055ce:	00db      	lsls	r3, r3, #3
 80055d0:	3318      	adds	r3, #24
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	18d3      	adds	r3, r2, r3
 80055d6:	60fb      	str	r3, [r7, #12]
 80055d8:	e009      	b.n	80055ee <DCD_EP_Stall+0x46>
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 80055da:	1cfb      	adds	r3, r7, #3
 80055dc:	781a      	ldrb	r2, [r3, #0]
 80055de:	1c13      	adds	r3, r2, #0
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	189b      	adds	r3, r3, r2
 80055e4:	00db      	lsls	r3, r3, #3
 80055e6:	33b8      	adds	r3, #184	; 0xb8
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	18d3      	adds	r3, r2, r3
 80055ec:	60fb      	str	r3, [r7, #12]
  }
  
  if (ep->num ==0)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d120      	bne.n	8005638 <DCD_EP_Stall+0x90>
  {
    /* This macro sets STALL status for RX & TX*/ 
    _SetEPRxTxStatus(ep->num,EP_RX_STALL,EP_TX_STALL); 
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4a1d      	ldr	r2, [pc, #116]	; (8005674 <DCD_EP_Stall+0xcc>)
 80055fe:	189b      	adds	r3, r3, r2
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	b29b      	uxth	r3, r3
 8005604:	1c1a      	adds	r2, r3, #0
 8005606:	4b1c      	ldr	r3, [pc, #112]	; (8005678 <DCD_EP_Stall+0xd0>)
 8005608:	1c14      	adds	r4, r2, #0
 800560a:	401c      	ands	r4, r3
 800560c:	2380      	movs	r3, #128	; 0x80
 800560e:	015b      	lsls	r3, r3, #5
 8005610:	4063      	eors	r3, r4
 8005612:	1c1c      	adds	r4, r3, #0
 8005614:	2310      	movs	r3, #16
 8005616:	4063      	eors	r3, r4
 8005618:	1c1c      	adds	r4, r3, #0
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	4a14      	ldr	r2, [pc, #80]	; (8005674 <DCD_EP_Stall+0xcc>)
 8005622:	189b      	adds	r3, r3, r2
 8005624:	b2a2      	uxth	r2, r4
 8005626:	4915      	ldr	r1, [pc, #84]	; (800567c <DCD_EP_Stall+0xd4>)
 8005628:	430a      	orrs	r2, r1
 800562a:	b292      	uxth	r2, r2
 800562c:	601a      	str	r2, [r3, #0]
    /*Endpoint is stalled */
    ep->is_stall = 1;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2201      	movs	r2, #1
 8005632:	709a      	strb	r2, [r3, #2]
    return USB_OK;
 8005634:	2300      	movs	r3, #0
 8005636:	e019      	b.n	800566c <DCD_EP_Stall+0xc4>
  }
  if (ep->is_in)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	785b      	ldrb	r3, [r3, #1]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d009      	beq.n	8005654 <DCD_EP_Stall+0xac>
  {  
    /* IN endpoint */
    ep->is_stall = 1;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2201      	movs	r2, #1
 8005644:	709a      	strb	r2, [r3, #2]
    /* IN Endpoint stalled */
   SetEPTxStatus(ep->num , EP_TX_STALL); 
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	1c18      	adds	r0, r3, #0
 800564c:	2110      	movs	r1, #16
 800564e:	f000 f923 	bl	8005898 <SetEPTxStatus>
 8005652:	e00a      	b.n	800566a <DCD_EP_Stall+0xc2>
  }
  else
  { 
    ep->is_stall = 1;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2201      	movs	r2, #1
 8005658:	709a      	strb	r2, [r3, #2]
    /* OUT Endpoint stalled */
    SetEPRxStatus(ep->num , EP_RX_STALL);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	781a      	ldrb	r2, [r3, #0]
 800565e:	2380      	movs	r3, #128	; 0x80
 8005660:	015b      	lsls	r3, r3, #5
 8005662:	1c10      	adds	r0, r2, #0
 8005664:	1c19      	adds	r1, r3, #0
 8005666:	f000 f951 	bl	800590c <SetEPRxStatus>
  }
  
  return USB_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	1c18      	adds	r0, r3, #0
 800566e:	46bd      	mov	sp, r7
 8005670:	b005      	add	sp, #20
 8005672:	bd90      	pop	{r4, r7, pc}
 8005674:	40005c00 	.word	0x40005c00
 8005678:	0000bfbf 	.word	0x0000bfbf
 800567c:	ffff8080 	.word	0xffff8080

08005680 <DCD_EP_ClrStall>:
  * @param  pdev: device instance
  * @param  epnum: endpoint address
  * @retval : status
  */
uint32_t  DCD_EP_ClrStall (USB_CORE_HANDLE *pdev, uint8_t epnum)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	1c0a      	adds	r2, r1, #0
 800568a:	1cfb      	adds	r3, r7, #3
 800568c:	701a      	strb	r2, [r3, #0]
  USB_EP *ep;
  if ((0x80 & epnum) == 0x80)
 800568e:	1cfb      	adds	r3, r7, #3
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	b25b      	sxtb	r3, r3
 8005694:	2b00      	cmp	r3, #0
 8005696:	da0c      	bge.n	80056b2 <DCD_EP_ClrStall+0x32>
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];    
 8005698:	1cfb      	adds	r3, r7, #3
 800569a:	781a      	ldrb	r2, [r3, #0]
 800569c:	237f      	movs	r3, #127	; 0x7f
 800569e:	401a      	ands	r2, r3
 80056a0:	1c13      	adds	r3, r2, #0
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	189b      	adds	r3, r3, r2
 80056a6:	00db      	lsls	r3, r3, #3
 80056a8:	3318      	adds	r3, #24
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	18d3      	adds	r3, r2, r3
 80056ae:	60fb      	str	r3, [r7, #12]
 80056b0:	e009      	b.n	80056c6 <DCD_EP_ClrStall+0x46>
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 80056b2:	1cfb      	adds	r3, r7, #3
 80056b4:	781a      	ldrb	r2, [r3, #0]
 80056b6:	1c13      	adds	r3, r2, #0
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	189b      	adds	r3, r3, r2
 80056bc:	00db      	lsls	r3, r3, #3
 80056be:	33b8      	adds	r3, #184	; 0xb8
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	18d3      	adds	r3, r2, r3
 80056c4:	60fb      	str	r3, [r7, #12]
  } 
  
  if (ep->is_in)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	785b      	ldrb	r3, [r3, #1]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00e      	beq.n	80056ec <DCD_EP_ClrStall+0x6c>
  {
    ClearDTOG_TX(ep->num);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	1c18      	adds	r0, r3, #0
 80056d4:	f000 f9ee 	bl	8005ab4 <ClearDTOG_TX>
    SetEPTxStatus(ep->num, EP_TX_VALID);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	1c18      	adds	r0, r3, #0
 80056de:	2130      	movs	r1, #48	; 0x30
 80056e0:	f000 f8da 	bl	8005898 <SetEPTxStatus>
    ep->is_stall = 0;  
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	709a      	strb	r2, [r3, #2]
 80056ea:	e00f      	b.n	800570c <DCD_EP_ClrStall+0x8c>
  }
  else
  {
    ClearDTOG_RX(ep->num);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	1c18      	adds	r0, r3, #0
 80056f2:	f000 f9b1 	bl	8005a58 <ClearDTOG_RX>
    SetEPRxStatus(ep->num, EP_RX_VALID);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	781a      	ldrb	r2, [r3, #0]
 80056fa:	23c0      	movs	r3, #192	; 0xc0
 80056fc:	019b      	lsls	r3, r3, #6
 80056fe:	1c10      	adds	r0, r2, #0
 8005700:	1c19      	adds	r1, r3, #0
 8005702:	f000 f903 	bl	800590c <SetEPRxStatus>
    ep->is_stall = 0;  
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	709a      	strb	r2, [r3, #2]
  }
  
  return USB_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	1c18      	adds	r0, r3, #0
 8005710:	46bd      	mov	sp, r7
 8005712:	b004      	add	sp, #16
 8005714:	bd80      	pop	{r7, pc}
 8005716:	46c0      	nop			; (mov r8, r8)

08005718 <DCD_EP_SetAddress>:
  * @brief This Function set USB device address
  * @param  pdev: device instance
  * @param  address: new device address
  */
void  DCD_EP_SetAddress (USB_CORE_HANDLE *pdev, uint8_t address)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	1c0a      	adds	r2, r1, #0
 8005722:	1cfb      	adds	r3, r7, #3
 8005724:	701a      	strb	r2, [r3, #0]
  uint32_t i=0;
 8005726:	2300      	movs	r3, #0
 8005728:	60fb      	str	r3, [r7, #12]
  pdev->dev.device_address = address;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	1cfa      	adds	r2, r7, #3
 800572e:	7812      	ldrb	r2, [r2, #0]
 8005730:	711a      	strb	r2, [r3, #4]
  
  /* set address in every used endpoint */
  for (i = 0; i < EP_NUM; i++)
 8005732:	2300      	movs	r3, #0
 8005734:	60fb      	str	r3, [r7, #12]
 8005736:	e017      	b.n	8005768 <DCD_EP_SetAddress+0x50>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	b2db      	uxtb	r3, r3
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4911      	ldr	r1, [pc, #68]	; (8005784 <DCD_EP_SetAddress+0x6c>)
 8005740:	185b      	adds	r3, r3, r1
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	b2d2      	uxtb	r2, r2
 8005746:	0092      	lsls	r2, r2, #2
 8005748:	490e      	ldr	r1, [pc, #56]	; (8005784 <DCD_EP_SetAddress+0x6c>)
 800574a:	1852      	adds	r2, r2, r1
 800574c:	6812      	ldr	r2, [r2, #0]
 800574e:	b292      	uxth	r2, r2
 8005750:	1c11      	adds	r1, r2, #0
 8005752:	4a0d      	ldr	r2, [pc, #52]	; (8005788 <DCD_EP_SetAddress+0x70>)
 8005754:	400a      	ands	r2, r1
 8005756:	490d      	ldr	r1, [pc, #52]	; (800578c <DCD_EP_SetAddress+0x74>)
 8005758:	4311      	orrs	r1, r2
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	b2d2      	uxtb	r2, r2
 800575e:	430a      	orrs	r2, r1
 8005760:	601a      	str	r2, [r3, #0]
{
  uint32_t i=0;
  pdev->dev.device_address = address;
  
  /* set address in every used endpoint */
  for (i = 0; i < EP_NUM; i++)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	3301      	adds	r3, #1
 8005766:	60fb      	str	r3, [r7, #12]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2b03      	cmp	r3, #3
 800576c:	d9e4      	bls.n	8005738 <DCD_EP_SetAddress+0x20>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
  } /* set device address and enable function */
  _SetDADDR(address | DADDR_EF); 
 800576e:	4b08      	ldr	r3, [pc, #32]	; (8005790 <DCD_EP_SetAddress+0x78>)
 8005770:	1cfa      	adds	r2, r7, #3
 8005772:	7812      	ldrb	r2, [r2, #0]
 8005774:	2180      	movs	r1, #128	; 0x80
 8005776:	4249      	negs	r1, r1
 8005778:	430a      	orrs	r2, r1
 800577a:	b2d2      	uxtb	r2, r2
 800577c:	601a      	str	r2, [r3, #0]
}
 800577e:	46bd      	mov	sp, r7
 8005780:	b004      	add	sp, #16
 8005782:	bd80      	pop	{r7, pc}
 8005784:	40005c00 	.word	0x40005c00
 8005788:	00000f0f 	.word	0x00000f0f
 800578c:	00008080 	.word	0x00008080
 8005790:	40005c4c 	.word	0x40005c4c

08005794 <DCD_DevConnect>:
  * @brief Connect device (enable internal pull-up)
  * @param  pdev: device instance
  * @retval : None
  */
void  DCD_DevConnect (USB_CORE_HANDLE *pdev)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-Down bit to Connect internal pull-up on USB DP line */
  *BCDR |= BCDR_DPPU;
 800579c:	4b06      	ldr	r3, [pc, #24]	; (80057b8 <DCD_DevConnect+0x24>)
 800579e:	4a06      	ldr	r2, [pc, #24]	; (80057b8 <DCD_DevConnect+0x24>)
 80057a0:	6812      	ldr	r2, [r2, #0]
 80057a2:	2180      	movs	r1, #128	; 0x80
 80057a4:	0209      	lsls	r1, r1, #8
 80057a6:	430a      	orrs	r2, r1
 80057a8:	601a      	str	r2, [r3, #0]
  /*Device is in default state*/
  pdev->dev.device_status  = USB_DEFAULT;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	709a      	strb	r2, [r3, #2]
}
 80057b0:	46bd      	mov	sp, r7
 80057b2:	b002      	add	sp, #8
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	46c0      	nop			; (mov r8, r8)
 80057b8:	40005c58 	.word	0x40005c58

080057bc <SetCNTR>:
  * @brief Set the CNTR register value 
  * @param   wRegValue: new register value
  * @retval None
  */
void SetCNTR(uint16_t wRegValue)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	1c02      	adds	r2, r0, #0
 80057c4:	1dbb      	adds	r3, r7, #6
 80057c6:	801a      	strh	r2, [r3, #0]
  _SetCNTR(wRegValue);
 80057c8:	4b03      	ldr	r3, [pc, #12]	; (80057d8 <SetCNTR+0x1c>)
 80057ca:	1dba      	adds	r2, r7, #6
 80057cc:	8812      	ldrh	r2, [r2, #0]
 80057ce:	601a      	str	r2, [r3, #0]
}
 80057d0:	46bd      	mov	sp, r7
 80057d2:	b002      	add	sp, #8
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	46c0      	nop			; (mov r8, r8)
 80057d8:	40005c40 	.word	0x40005c40

080057dc <SetISTR>:
  * @brief Set the ISTR register value 
  * @param   wRegValue: new register value
  * @retval None
  */
void SetISTR(uint16_t wRegValue)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	1c02      	adds	r2, r0, #0
 80057e4:	1dbb      	adds	r3, r7, #6
 80057e6:	801a      	strh	r2, [r3, #0]
  _SetISTR(wRegValue);
 80057e8:	4b03      	ldr	r3, [pc, #12]	; (80057f8 <SetISTR+0x1c>)
 80057ea:	1dba      	adds	r2, r7, #6
 80057ec:	8812      	ldrh	r2, [r2, #0]
 80057ee:	601a      	str	r2, [r3, #0]
}
 80057f0:	46bd      	mov	sp, r7
 80057f2:	b002      	add	sp, #8
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	46c0      	nop			; (mov r8, r8)
 80057f8:	40005c44 	.word	0x40005c44

080057fc <SetBTABLE>:
  * @brief Set the BTABLE.
  * @param   wRegValue: New register value
  * @retval None
  */
void SetBTABLE(uint16_t wRegValue)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	1c02      	adds	r2, r0, #0
 8005804:	1dbb      	adds	r3, r7, #6
 8005806:	801a      	strh	r2, [r3, #0]
  _SetBTABLE(wRegValue);
 8005808:	4b04      	ldr	r3, [pc, #16]	; (800581c <SetBTABLE+0x20>)
 800580a:	1dba      	adds	r2, r7, #6
 800580c:	8811      	ldrh	r1, [r2, #0]
 800580e:	4a04      	ldr	r2, [pc, #16]	; (8005820 <SetBTABLE+0x24>)
 8005810:	400a      	ands	r2, r1
 8005812:	601a      	str	r2, [r3, #0]
}
 8005814:	46bd      	mov	sp, r7
 8005816:	b002      	add	sp, #8
 8005818:	bd80      	pop	{r7, pc}
 800581a:	46c0      	nop			; (mov r8, r8)
 800581c:	40005c50 	.word	0x40005c50
 8005820:	0000fff8 	.word	0x0000fff8

08005824 <GetENDPOINT>:
  * @brief Return the Endpoint register value.
  * @param   bEpNum: Endpoint Number
  * @retval Endpoint register value.
  */
uint16_t GetENDPOINT(uint8_t bEpNum)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	1c02      	adds	r2, r0, #0
 800582c:	1dfb      	adds	r3, r7, #7
 800582e:	701a      	strb	r2, [r3, #0]
  return(_GetENDPOINT(bEpNum));
 8005830:	1dfb      	adds	r3, r7, #7
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	4a04      	ldr	r2, [pc, #16]	; (8005848 <GetENDPOINT+0x24>)
 8005838:	189b      	adds	r3, r3, r2
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	b29b      	uxth	r3, r3
}
 800583e:	1c18      	adds	r0, r3, #0
 8005840:	46bd      	mov	sp, r7
 8005842:	b002      	add	sp, #8
 8005844:	bd80      	pop	{r7, pc}
 8005846:	46c0      	nop			; (mov r8, r8)
 8005848:	40005c00 	.word	0x40005c00

0800584c <SetEPType>:
  * @param   bEpNum: Endpoint Number
  * @param   wType: type definition
  * @retval None.
  */
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	1c0a      	adds	r2, r1, #0
 8005854:	1dfb      	adds	r3, r7, #7
 8005856:	1c01      	adds	r1, r0, #0
 8005858:	7019      	strb	r1, [r3, #0]
 800585a:	1d3b      	adds	r3, r7, #4
 800585c:	801a      	strh	r2, [r3, #0]
  _SetEPType(bEpNum, wType);
 800585e:	1dfb      	adds	r3, r7, #7
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	490a      	ldr	r1, [pc, #40]	; (8005890 <SetEPType+0x44>)
 8005866:	185b      	adds	r3, r3, r1
 8005868:	1dfa      	adds	r2, r7, #7
 800586a:	7812      	ldrb	r2, [r2, #0]
 800586c:	0092      	lsls	r2, r2, #2
 800586e:	4908      	ldr	r1, [pc, #32]	; (8005890 <SetEPType+0x44>)
 8005870:	1852      	adds	r2, r2, r1
 8005872:	6812      	ldr	r2, [r2, #0]
 8005874:	b292      	uxth	r2, r2
 8005876:	1c11      	adds	r1, r2, #0
 8005878:	4a06      	ldr	r2, [pc, #24]	; (8005894 <SetEPType+0x48>)
 800587a:	400a      	ands	r2, r1
 800587c:	b291      	uxth	r1, r2
 800587e:	1d3a      	adds	r2, r7, #4
 8005880:	8812      	ldrh	r2, [r2, #0]
 8005882:	430a      	orrs	r2, r1
 8005884:	b292      	uxth	r2, r2
 8005886:	b292      	uxth	r2, r2
 8005888:	601a      	str	r2, [r3, #0]
}
 800588a:	46bd      	mov	sp, r7
 800588c:	b002      	add	sp, #8
 800588e:	bd80      	pop	{r7, pc}
 8005890:	40005c00 	.word	0x40005c00
 8005894:	ffff898f 	.word	0xffff898f

08005898 <SetEPTxStatus>:
  * @param   bEpNum: Endpoint Number
  * @param   wState: new state.
  * @retval None
  */
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
 8005898:	b590      	push	{r4, r7, lr}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	1c0a      	adds	r2, r1, #0
 80058a0:	1dfb      	adds	r3, r7, #7
 80058a2:	1c01      	adds	r1, r0, #0
 80058a4:	7019      	strb	r1, [r3, #0]
 80058a6:	1d3b      	adds	r3, r7, #4
 80058a8:	801a      	strh	r2, [r3, #0]
  _SetEPTxStatus(bEpNum, wState);   
 80058aa:	1dfb      	adds	r3, r7, #7
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4a13      	ldr	r2, [pc, #76]	; (8005900 <SetEPTxStatus+0x68>)
 80058b2:	189b      	adds	r3, r3, r2
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	4b12      	ldr	r3, [pc, #72]	; (8005904 <SetEPTxStatus+0x6c>)
 80058ba:	4013      	ands	r3, r2
 80058bc:	b29c      	uxth	r4, r3
 80058be:	1d3b      	adds	r3, r7, #4
 80058c0:	881a      	ldrh	r2, [r3, #0]
 80058c2:	2310      	movs	r3, #16
 80058c4:	4013      	ands	r3, r2
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d002      	beq.n	80058d2 <SetEPTxStatus+0x3a>
 80058cc:	2310      	movs	r3, #16
 80058ce:	4063      	eors	r3, r4
 80058d0:	b29c      	uxth	r4, r3
 80058d2:	1d3b      	adds	r3, r7, #4
 80058d4:	881a      	ldrh	r2, [r3, #0]
 80058d6:	2320      	movs	r3, #32
 80058d8:	4013      	ands	r3, r2
 80058da:	b29b      	uxth	r3, r3
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d002      	beq.n	80058e6 <SetEPTxStatus+0x4e>
 80058e0:	2320      	movs	r3, #32
 80058e2:	4063      	eors	r3, r4
 80058e4:	b29c      	uxth	r4, r3
 80058e6:	1dfb      	adds	r3, r7, #7
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4a04      	ldr	r2, [pc, #16]	; (8005900 <SetEPTxStatus+0x68>)
 80058ee:	189b      	adds	r3, r3, r2
 80058f0:	4a05      	ldr	r2, [pc, #20]	; (8005908 <SetEPTxStatus+0x70>)
 80058f2:	4322      	orrs	r2, r4
 80058f4:	b292      	uxth	r2, r2
 80058f6:	601a      	str	r2, [r3, #0]
}
 80058f8:	46bd      	mov	sp, r7
 80058fa:	b003      	add	sp, #12
 80058fc:	bd90      	pop	{r4, r7, pc}
 80058fe:	46c0      	nop			; (mov r8, r8)
 8005900:	40005c00 	.word	0x40005c00
 8005904:	ffff8fbf 	.word	0xffff8fbf
 8005908:	ffff8080 	.word	0xffff8080

0800590c <SetEPRxStatus>:
  * @param   bEpNum: Endpoint Number
  * @param   wState: new state.
  * @retval None
  */
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
 800590c:	b590      	push	{r4, r7, lr}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	1c0a      	adds	r2, r1, #0
 8005914:	1dfb      	adds	r3, r7, #7
 8005916:	1c01      	adds	r1, r0, #0
 8005918:	7019      	strb	r1, [r3, #0]
 800591a:	1d3b      	adds	r3, r7, #4
 800591c:	801a      	strh	r2, [r3, #0]
  _SetEPRxStatus(bEpNum, wState);
 800591e:	1dfb      	adds	r3, r7, #7
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	4a15      	ldr	r2, [pc, #84]	; (800597c <SetEPRxStatus+0x70>)
 8005926:	189b      	adds	r3, r3, r2
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	b29a      	uxth	r2, r3
 800592c:	4b14      	ldr	r3, [pc, #80]	; (8005980 <SetEPRxStatus+0x74>)
 800592e:	4013      	ands	r3, r2
 8005930:	b29c      	uxth	r4, r3
 8005932:	1d3b      	adds	r3, r7, #4
 8005934:	881a      	ldrh	r2, [r3, #0]
 8005936:	2380      	movs	r3, #128	; 0x80
 8005938:	015b      	lsls	r3, r3, #5
 800593a:	4013      	ands	r3, r2
 800593c:	b29b      	uxth	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <SetEPRxStatus+0x3e>
 8005942:	2380      	movs	r3, #128	; 0x80
 8005944:	015b      	lsls	r3, r3, #5
 8005946:	4063      	eors	r3, r4
 8005948:	b29c      	uxth	r4, r3
 800594a:	1d3b      	adds	r3, r7, #4
 800594c:	881a      	ldrh	r2, [r3, #0]
 800594e:	2380      	movs	r3, #128	; 0x80
 8005950:	019b      	lsls	r3, r3, #6
 8005952:	4013      	ands	r3, r2
 8005954:	b29b      	uxth	r3, r3
 8005956:	2b00      	cmp	r3, #0
 8005958:	d003      	beq.n	8005962 <SetEPRxStatus+0x56>
 800595a:	2380      	movs	r3, #128	; 0x80
 800595c:	019b      	lsls	r3, r3, #6
 800595e:	4063      	eors	r3, r4
 8005960:	b29c      	uxth	r4, r3
 8005962:	1dfb      	adds	r3, r7, #7
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4a04      	ldr	r2, [pc, #16]	; (800597c <SetEPRxStatus+0x70>)
 800596a:	189b      	adds	r3, r3, r2
 800596c:	4a05      	ldr	r2, [pc, #20]	; (8005984 <SetEPRxStatus+0x78>)
 800596e:	4322      	orrs	r2, r4
 8005970:	b292      	uxth	r2, r2
 8005972:	601a      	str	r2, [r3, #0]
}
 8005974:	46bd      	mov	sp, r7
 8005976:	b003      	add	sp, #12
 8005978:	bd90      	pop	{r4, r7, pc}
 800597a:	46c0      	nop			; (mov r8, r8)
 800597c:	40005c00 	.word	0x40005c00
 8005980:	ffffbf8f 	.word	0xffffbf8f
 8005984:	ffff8080 	.word	0xffff8080

08005988 <SetEPDoubleBuff>:
  * @brief Enable the double buffer feature for the endpoint.
  * @param   bEpNum: Endpoint Number
  * @retval None
  */
void SetEPDoubleBuff(uint8_t bEpNum)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	1c02      	adds	r2, r0, #0
 8005990:	1dfb      	adds	r3, r7, #7
 8005992:	701a      	strb	r2, [r3, #0]
  _SetEP_KIND(bEpNum);
 8005994:	1dfb      	adds	r3, r7, #7
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	490a      	ldr	r1, [pc, #40]	; (80059c4 <SetEPDoubleBuff+0x3c>)
 800599c:	185b      	adds	r3, r3, r1
 800599e:	1dfa      	adds	r2, r7, #7
 80059a0:	7812      	ldrb	r2, [r2, #0]
 80059a2:	0092      	lsls	r2, r2, #2
 80059a4:	4907      	ldr	r1, [pc, #28]	; (80059c4 <SetEPDoubleBuff+0x3c>)
 80059a6:	1852      	adds	r2, r2, r1
 80059a8:	6812      	ldr	r2, [r2, #0]
 80059aa:	b292      	uxth	r2, r2
 80059ac:	1c11      	adds	r1, r2, #0
 80059ae:	4a06      	ldr	r2, [pc, #24]	; (80059c8 <SetEPDoubleBuff+0x40>)
 80059b0:	400a      	ands	r2, r1
 80059b2:	b292      	uxth	r2, r2
 80059b4:	4905      	ldr	r1, [pc, #20]	; (80059cc <SetEPDoubleBuff+0x44>)
 80059b6:	430a      	orrs	r2, r1
 80059b8:	b292      	uxth	r2, r2
 80059ba:	b292      	uxth	r2, r2
 80059bc:	601a      	str	r2, [r3, #0]
}
 80059be:	46bd      	mov	sp, r7
 80059c0:	b002      	add	sp, #8
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	40005c00 	.word	0x40005c00
 80059c8:	00000e0f 	.word	0x00000e0f
 80059cc:	ffff8180 	.word	0xffff8180

080059d0 <ToggleDTOG_RX>:
  * @brief Toggle the DTOG_RX bit.
  * @param   bEpNum: Endpoint Number
  * @retval None
  */
void ToggleDTOG_RX(uint8_t bEpNum)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	1c02      	adds	r2, r0, #0
 80059d8:	1dfb      	adds	r3, r7, #7
 80059da:	701a      	strb	r2, [r3, #0]
  _ToggleDTOG_RX(bEpNum);
 80059dc:	1dfb      	adds	r3, r7, #7
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	4909      	ldr	r1, [pc, #36]	; (8005a08 <ToggleDTOG_RX+0x38>)
 80059e4:	185b      	adds	r3, r3, r1
 80059e6:	1dfa      	adds	r2, r7, #7
 80059e8:	7812      	ldrb	r2, [r2, #0]
 80059ea:	0092      	lsls	r2, r2, #2
 80059ec:	4906      	ldr	r1, [pc, #24]	; (8005a08 <ToggleDTOG_RX+0x38>)
 80059ee:	1852      	adds	r2, r2, r1
 80059f0:	6812      	ldr	r2, [r2, #0]
 80059f2:	b292      	uxth	r2, r2
 80059f4:	1c11      	adds	r1, r2, #0
 80059f6:	4a05      	ldr	r2, [pc, #20]	; (8005a0c <ToggleDTOG_RX+0x3c>)
 80059f8:	400a      	ands	r2, r1
 80059fa:	4905      	ldr	r1, [pc, #20]	; (8005a10 <ToggleDTOG_RX+0x40>)
 80059fc:	430a      	orrs	r2, r1
 80059fe:	601a      	str	r2, [r3, #0]
}
 8005a00:	46bd      	mov	sp, r7
 8005a02:	b002      	add	sp, #8
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	46c0      	nop			; (mov r8, r8)
 8005a08:	40005c00 	.word	0x40005c00
 8005a0c:	00000f0f 	.word	0x00000f0f
 8005a10:	0000c080 	.word	0x0000c080

08005a14 <ToggleDTOG_TX>:
  * @brief Toggle the DTOG_TX bit.
  * @param   bEpNum: Endpoint Number
  * @retval None
  */
void ToggleDTOG_TX(uint8_t bEpNum)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	1c02      	adds	r2, r0, #0
 8005a1c:	1dfb      	adds	r3, r7, #7
 8005a1e:	701a      	strb	r2, [r3, #0]
  _ToggleDTOG_TX(bEpNum);
 8005a20:	1dfb      	adds	r3, r7, #7
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4909      	ldr	r1, [pc, #36]	; (8005a4c <ToggleDTOG_TX+0x38>)
 8005a28:	185b      	adds	r3, r3, r1
 8005a2a:	1dfa      	adds	r2, r7, #7
 8005a2c:	7812      	ldrb	r2, [r2, #0]
 8005a2e:	0092      	lsls	r2, r2, #2
 8005a30:	4906      	ldr	r1, [pc, #24]	; (8005a4c <ToggleDTOG_TX+0x38>)
 8005a32:	1852      	adds	r2, r2, r1
 8005a34:	6812      	ldr	r2, [r2, #0]
 8005a36:	b292      	uxth	r2, r2
 8005a38:	1c11      	adds	r1, r2, #0
 8005a3a:	4a05      	ldr	r2, [pc, #20]	; (8005a50 <ToggleDTOG_TX+0x3c>)
 8005a3c:	400a      	ands	r2, r1
 8005a3e:	4905      	ldr	r1, [pc, #20]	; (8005a54 <ToggleDTOG_TX+0x40>)
 8005a40:	430a      	orrs	r2, r1
 8005a42:	601a      	str	r2, [r3, #0]
}
 8005a44:	46bd      	mov	sp, r7
 8005a46:	b002      	add	sp, #8
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	46c0      	nop			; (mov r8, r8)
 8005a4c:	40005c00 	.word	0x40005c00
 8005a50:	00000f0f 	.word	0x00000f0f
 8005a54:	000080c0 	.word	0x000080c0

08005a58 <ClearDTOG_RX>:
  * @brief Clear the DTOG_RX bit.
  * @param   bEpNum: Endpoint Number
  * @retval None
  */
void ClearDTOG_RX(uint8_t bEpNum)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	1c02      	adds	r2, r0, #0
 8005a60:	1dfb      	adds	r3, r7, #7
 8005a62:	701a      	strb	r2, [r3, #0]
  _ClearDTOG_RX(bEpNum);
 8005a64:	1dfb      	adds	r3, r7, #7
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	490f      	ldr	r1, [pc, #60]	; (8005aa8 <ClearDTOG_RX+0x50>)
 8005a6c:	185b      	adds	r3, r3, r1
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	1c1a      	adds	r2, r3, #0
 8005a74:	2380      	movs	r3, #128	; 0x80
 8005a76:	01db      	lsls	r3, r3, #7
 8005a78:	4013      	ands	r3, r2
 8005a7a:	d011      	beq.n	8005aa0 <ClearDTOG_RX+0x48>
 8005a7c:	1dfb      	adds	r3, r7, #7
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	4a09      	ldr	r2, [pc, #36]	; (8005aa8 <ClearDTOG_RX+0x50>)
 8005a84:	189b      	adds	r3, r3, r2
 8005a86:	1dfa      	adds	r2, r7, #7
 8005a88:	7812      	ldrb	r2, [r2, #0]
 8005a8a:	0092      	lsls	r2, r2, #2
 8005a8c:	4906      	ldr	r1, [pc, #24]	; (8005aa8 <ClearDTOG_RX+0x50>)
 8005a8e:	1852      	adds	r2, r2, r1
 8005a90:	6812      	ldr	r2, [r2, #0]
 8005a92:	b292      	uxth	r2, r2
 8005a94:	1c11      	adds	r1, r2, #0
 8005a96:	4a05      	ldr	r2, [pc, #20]	; (8005aac <ClearDTOG_RX+0x54>)
 8005a98:	400a      	ands	r2, r1
 8005a9a:	4905      	ldr	r1, [pc, #20]	; (8005ab0 <ClearDTOG_RX+0x58>)
 8005a9c:	430a      	orrs	r2, r1
 8005a9e:	601a      	str	r2, [r3, #0]
}
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	b002      	add	sp, #8
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	46c0      	nop			; (mov r8, r8)
 8005aa8:	40005c00 	.word	0x40005c00
 8005aac:	00000f0f 	.word	0x00000f0f
 8005ab0:	0000c080 	.word	0x0000c080

08005ab4 <ClearDTOG_TX>:
  * @brief Clear the DTOG_TX bit.
  * @param   bEpNum: Endpoint Number
  * @retval None
  */
void ClearDTOG_TX(uint8_t bEpNum)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	1c02      	adds	r2, r0, #0
 8005abc:	1dfb      	adds	r3, r7, #7
 8005abe:	701a      	strb	r2, [r3, #0]
  _ClearDTOG_TX(bEpNum);
 8005ac0:	1dfb      	adds	r3, r7, #7
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	490e      	ldr	r1, [pc, #56]	; (8005b00 <ClearDTOG_TX+0x4c>)
 8005ac8:	185b      	adds	r3, r3, r1
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	1c1a      	adds	r2, r3, #0
 8005ad0:	2340      	movs	r3, #64	; 0x40
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	d011      	beq.n	8005afa <ClearDTOG_TX+0x46>
 8005ad6:	1dfb      	adds	r3, r7, #7
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	4a08      	ldr	r2, [pc, #32]	; (8005b00 <ClearDTOG_TX+0x4c>)
 8005ade:	189b      	adds	r3, r3, r2
 8005ae0:	1dfa      	adds	r2, r7, #7
 8005ae2:	7812      	ldrb	r2, [r2, #0]
 8005ae4:	0092      	lsls	r2, r2, #2
 8005ae6:	4906      	ldr	r1, [pc, #24]	; (8005b00 <ClearDTOG_TX+0x4c>)
 8005ae8:	1852      	adds	r2, r2, r1
 8005aea:	6812      	ldr	r2, [r2, #0]
 8005aec:	b292      	uxth	r2, r2
 8005aee:	1c11      	adds	r1, r2, #0
 8005af0:	4a04      	ldr	r2, [pc, #16]	; (8005b04 <ClearDTOG_TX+0x50>)
 8005af2:	400a      	ands	r2, r1
 8005af4:	4904      	ldr	r1, [pc, #16]	; (8005b08 <ClearDTOG_TX+0x54>)
 8005af6:	430a      	orrs	r2, r1
 8005af8:	601a      	str	r2, [r3, #0]
}
 8005afa:	46bd      	mov	sp, r7
 8005afc:	b002      	add	sp, #8
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	40005c00 	.word	0x40005c00
 8005b04:	00000f0f 	.word	0x00000f0f
 8005b08:	000080c0 	.word	0x000080c0

08005b0c <SetEPTxAddr>:
  * @param   bEpNum: Endpoint Number
  * @param   wAddr: new address.
  * @retval Endpoint address.
  */
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	1c0a      	adds	r2, r1, #0
 8005b14:	1dfb      	adds	r3, r7, #7
 8005b16:	1c01      	adds	r1, r0, #0
 8005b18:	7019      	strb	r1, [r3, #0]
 8005b1a:	1d3b      	adds	r3, r7, #4
 8005b1c:	801a      	strh	r2, [r3, #0]
  _SetEPTxAddr(bEpNum, wAddr);
 8005b1e:	4b09      	ldr	r3, [pc, #36]	; (8005b44 <SetEPTxAddr+0x38>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	1c1a      	adds	r2, r3, #0
 8005b26:	1dfb      	adds	r3, r7, #7
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	00db      	lsls	r3, r3, #3
 8005b2c:	18d3      	adds	r3, r2, r3
 8005b2e:	4a06      	ldr	r2, [pc, #24]	; (8005b48 <SetEPTxAddr+0x3c>)
 8005b30:	189b      	adds	r3, r3, r2
 8005b32:	1d3a      	adds	r2, r7, #4
 8005b34:	8812      	ldrh	r2, [r2, #0]
 8005b36:	2101      	movs	r1, #1
 8005b38:	438a      	bics	r2, r1
 8005b3a:	b292      	uxth	r2, r2
 8005b3c:	801a      	strh	r2, [r3, #0]
}
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	b002      	add	sp, #8
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	40005c50 	.word	0x40005c50
 8005b48:	40006000 	.word	0x40006000

08005b4c <SetEPRxAddr>:
  * @param   bEpNum: Endpoint Number
  * @param   wAddr: new address.
  * @retval Endpoint address.
  */
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	1c0a      	adds	r2, r1, #0
 8005b54:	1dfb      	adds	r3, r7, #7
 8005b56:	1c01      	adds	r1, r0, #0
 8005b58:	7019      	strb	r1, [r3, #0]
 8005b5a:	1d3b      	adds	r3, r7, #4
 8005b5c:	801a      	strh	r2, [r3, #0]
  _SetEPRxAddr(bEpNum, wAddr);
 8005b5e:	4b09      	ldr	r3, [pc, #36]	; (8005b84 <SetEPRxAddr+0x38>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	1c1a      	adds	r2, r3, #0
 8005b66:	1dfb      	adds	r3, r7, #7
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	00db      	lsls	r3, r3, #3
 8005b6c:	18d3      	adds	r3, r2, r3
 8005b6e:	4a06      	ldr	r2, [pc, #24]	; (8005b88 <SetEPRxAddr+0x3c>)
 8005b70:	189b      	adds	r3, r3, r2
 8005b72:	1d3a      	adds	r2, r7, #4
 8005b74:	8812      	ldrh	r2, [r2, #0]
 8005b76:	2101      	movs	r1, #1
 8005b78:	438a      	bics	r2, r1
 8005b7a:	b292      	uxth	r2, r2
 8005b7c:	801a      	strh	r2, [r3, #0]
}
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	b002      	add	sp, #8
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	40005c50 	.word	0x40005c50
 8005b88:	40006004 	.word	0x40006004

08005b8c <SetEPTxCount>:
  * @param   bEpNum: Endpoint Number
  * @param   wCount: new count value.
  * @retval Rx buffer address.
  */
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	1c0a      	adds	r2, r1, #0
 8005b94:	1dfb      	adds	r3, r7, #7
 8005b96:	1c01      	adds	r1, r0, #0
 8005b98:	7019      	strb	r1, [r3, #0]
 8005b9a:	1d3b      	adds	r3, r7, #4
 8005b9c:	801a      	strh	r2, [r3, #0]
  _SetEPTxCount(bEpNum, wCount);
 8005b9e:	4b08      	ldr	r3, [pc, #32]	; (8005bc0 <SetEPTxCount+0x34>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	1c1a      	adds	r2, r3, #0
 8005ba6:	1dfb      	adds	r3, r7, #7
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	00db      	lsls	r3, r3, #3
 8005bac:	18d3      	adds	r3, r2, r3
 8005bae:	4a05      	ldr	r2, [pc, #20]	; (8005bc4 <SetEPTxCount+0x38>)
 8005bb0:	189b      	adds	r3, r3, r2
 8005bb2:	1d3a      	adds	r2, r7, #4
 8005bb4:	8812      	ldrh	r2, [r2, #0]
 8005bb6:	801a      	strh	r2, [r3, #0]
}
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	b002      	add	sp, #8
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	46c0      	nop			; (mov r8, r8)
 8005bc0:	40005c50 	.word	0x40005c50
 8005bc4:	40006002 	.word	0x40006002

08005bc8 <SetEPRxCount>:
  * @param   bEpNum: Endpoint Number.
  * @param   wCount: the new register value.
  * @retval None
  */
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	1c0a      	adds	r2, r1, #0
 8005bd0:	1dfb      	adds	r3, r7, #7
 8005bd2:	1c01      	adds	r1, r0, #0
 8005bd4:	7019      	strb	r1, [r3, #0]
 8005bd6:	1d3b      	adds	r3, r7, #4
 8005bd8:	801a      	strh	r2, [r3, #0]
  _SetEPRxCount(bEpNum, wCount);
 8005bda:	4b24      	ldr	r3, [pc, #144]	; (8005c6c <SetEPRxCount+0xa4>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	1c1a      	adds	r2, r3, #0
 8005be2:	1dfb      	adds	r3, r7, #7
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	00db      	lsls	r3, r3, #3
 8005be8:	18d3      	adds	r3, r2, r3
 8005bea:	4a21      	ldr	r2, [pc, #132]	; (8005c70 <SetEPRxCount+0xa8>)
 8005bec:	189b      	adds	r3, r3, r2
 8005bee:	60bb      	str	r3, [r7, #8]
 8005bf0:	1d3b      	adds	r3, r7, #4
 8005bf2:	881b      	ldrh	r3, [r3, #0]
 8005bf4:	2b3e      	cmp	r3, #62	; 0x3e
 8005bf6:	d91d      	bls.n	8005c34 <SetEPRxCount+0x6c>
 8005bf8:	1c3b      	adds	r3, r7, #0
 8005bfa:	330e      	adds	r3, #14
 8005bfc:	1d3a      	adds	r2, r7, #4
 8005bfe:	8812      	ldrh	r2, [r2, #0]
 8005c00:	0952      	lsrs	r2, r2, #5
 8005c02:	801a      	strh	r2, [r3, #0]
 8005c04:	1d3b      	adds	r3, r7, #4
 8005c06:	881a      	ldrh	r2, [r3, #0]
 8005c08:	231f      	movs	r3, #31
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	d106      	bne.n	8005c1c <SetEPRxCount+0x54>
 8005c0e:	1c3b      	adds	r3, r7, #0
 8005c10:	330e      	adds	r3, #14
 8005c12:	881a      	ldrh	r2, [r3, #0]
 8005c14:	1c3b      	adds	r3, r7, #0
 8005c16:	330e      	adds	r3, #14
 8005c18:	3a01      	subs	r2, #1
 8005c1a:	801a      	strh	r2, [r3, #0]
 8005c1c:	1c3b      	adds	r3, r7, #0
 8005c1e:	330e      	adds	r3, #14
 8005c20:	881b      	ldrh	r3, [r3, #0]
 8005c22:	029b      	lsls	r3, r3, #10
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	4a13      	ldr	r2, [pc, #76]	; (8005c74 <SetEPRxCount+0xac>)
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	801a      	strh	r2, [r3, #0]
 8005c32:	e018      	b.n	8005c66 <SetEPRxCount+0x9e>
 8005c34:	1c3b      	adds	r3, r7, #0
 8005c36:	330e      	adds	r3, #14
 8005c38:	1d3a      	adds	r2, r7, #4
 8005c3a:	8812      	ldrh	r2, [r2, #0]
 8005c3c:	0852      	lsrs	r2, r2, #1
 8005c3e:	801a      	strh	r2, [r3, #0]
 8005c40:	1d3b      	adds	r3, r7, #4
 8005c42:	881a      	ldrh	r2, [r3, #0]
 8005c44:	2301      	movs	r3, #1
 8005c46:	4013      	ands	r3, r2
 8005c48:	d006      	beq.n	8005c58 <SetEPRxCount+0x90>
 8005c4a:	1c3b      	adds	r3, r7, #0
 8005c4c:	330e      	adds	r3, #14
 8005c4e:	881a      	ldrh	r2, [r3, #0]
 8005c50:	1c3b      	adds	r3, r7, #0
 8005c52:	330e      	adds	r3, #14
 8005c54:	3201      	adds	r2, #1
 8005c56:	801a      	strh	r2, [r3, #0]
 8005c58:	1c3b      	adds	r3, r7, #0
 8005c5a:	330e      	adds	r3, #14
 8005c5c:	881b      	ldrh	r3, [r3, #0]
 8005c5e:	029b      	lsls	r3, r3, #10
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	801a      	strh	r2, [r3, #0]
}
 8005c66:	46bd      	mov	sp, r7
 8005c68:	b004      	add	sp, #16
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	40005c50 	.word	0x40005c50
 8005c70:	40006006 	.word	0x40006006
 8005c74:	ffff8000 	.word	0xffff8000

08005c78 <GetEPTxCount>:
  * @brief Get the Tx count.
  * @param   bEpNum: Endpoint Number.
  * @retval Tx count value.
  */
uint16_t GetEPTxCount(uint8_t bEpNum)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	1c02      	adds	r2, r0, #0
 8005c80:	1dfb      	adds	r3, r7, #7
 8005c82:	701a      	strb	r2, [r3, #0]
  return(_GetEPTxCount(bEpNum));
 8005c84:	4b08      	ldr	r3, [pc, #32]	; (8005ca8 <GetEPTxCount+0x30>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	1c1a      	adds	r2, r3, #0
 8005c8c:	1dfb      	adds	r3, r7, #7
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	00db      	lsls	r3, r3, #3
 8005c92:	18d3      	adds	r3, r2, r3
 8005c94:	4a05      	ldr	r2, [pc, #20]	; (8005cac <GetEPTxCount+0x34>)
 8005c96:	189b      	adds	r3, r3, r2
 8005c98:	881b      	ldrh	r3, [r3, #0]
 8005c9a:	059b      	lsls	r3, r3, #22
 8005c9c:	0d9b      	lsrs	r3, r3, #22
 8005c9e:	b29b      	uxth	r3, r3
}
 8005ca0:	1c18      	adds	r0, r3, #0
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	b002      	add	sp, #8
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	40005c50 	.word	0x40005c50
 8005cac:	40006002 	.word	0x40006002

08005cb0 <GetEPRxCount>:
  * @brief Get the Rx count.
  * @param   bEpNum: Endpoint Number.
  * @retval Rx count value.
  */
uint16_t GetEPRxCount(uint8_t bEpNum)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	1c02      	adds	r2, r0, #0
 8005cb8:	1dfb      	adds	r3, r7, #7
 8005cba:	701a      	strb	r2, [r3, #0]
  return(_GetEPRxCount(bEpNum));
 8005cbc:	4b08      	ldr	r3, [pc, #32]	; (8005ce0 <GetEPRxCount+0x30>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	1c1a      	adds	r2, r3, #0
 8005cc4:	1dfb      	adds	r3, r7, #7
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	00db      	lsls	r3, r3, #3
 8005cca:	18d3      	adds	r3, r2, r3
 8005ccc:	4a05      	ldr	r2, [pc, #20]	; (8005ce4 <GetEPRxCount+0x34>)
 8005cce:	189b      	adds	r3, r3, r2
 8005cd0:	881b      	ldrh	r3, [r3, #0]
 8005cd2:	059b      	lsls	r3, r3, #22
 8005cd4:	0d9b      	lsrs	r3, r3, #22
 8005cd6:	b29b      	uxth	r3, r3
}
 8005cd8:	1c18      	adds	r0, r3, #0
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	b002      	add	sp, #8
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	40005c50 	.word	0x40005c50
 8005ce4:	40006006 	.word	0x40006006

08005ce8 <SetEPDblBuffAddr>:
  * @param   wBuf0Addr: new address of buffer 0.
  * @param   wBuf1Addr: new address of buffer 1.
  * @retval None
  */
void SetEPDblBuffAddr(uint8_t bEpNum, uint16_t wBuf0Addr, uint16_t wBuf1Addr)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	1dfb      	adds	r3, r7, #7
 8005cf0:	7018      	strb	r0, [r3, #0]
 8005cf2:	1d3b      	adds	r3, r7, #4
 8005cf4:	8019      	strh	r1, [r3, #0]
 8005cf6:	1cbb      	adds	r3, r7, #2
 8005cf8:	801a      	strh	r2, [r3, #0]
  _SetEPDblBuffAddr(bEpNum, wBuf0Addr, wBuf1Addr);
 8005cfa:	4b11      	ldr	r3, [pc, #68]	; (8005d40 <SetEPDblBuffAddr+0x58>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	1c1a      	adds	r2, r3, #0
 8005d02:	1dfb      	adds	r3, r7, #7
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	00db      	lsls	r3, r3, #3
 8005d08:	18d3      	adds	r3, r2, r3
 8005d0a:	4a0e      	ldr	r2, [pc, #56]	; (8005d44 <SetEPDblBuffAddr+0x5c>)
 8005d0c:	189b      	adds	r3, r3, r2
 8005d0e:	1d3a      	adds	r2, r7, #4
 8005d10:	8812      	ldrh	r2, [r2, #0]
 8005d12:	2101      	movs	r1, #1
 8005d14:	438a      	bics	r2, r1
 8005d16:	b292      	uxth	r2, r2
 8005d18:	801a      	strh	r2, [r3, #0]
 8005d1a:	4b09      	ldr	r3, [pc, #36]	; (8005d40 <SetEPDblBuffAddr+0x58>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	1c1a      	adds	r2, r3, #0
 8005d22:	1dfb      	adds	r3, r7, #7
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	00db      	lsls	r3, r3, #3
 8005d28:	18d3      	adds	r3, r2, r3
 8005d2a:	4a07      	ldr	r2, [pc, #28]	; (8005d48 <SetEPDblBuffAddr+0x60>)
 8005d2c:	189b      	adds	r3, r3, r2
 8005d2e:	1cba      	adds	r2, r7, #2
 8005d30:	8812      	ldrh	r2, [r2, #0]
 8005d32:	2101      	movs	r1, #1
 8005d34:	438a      	bics	r2, r1
 8005d36:	b292      	uxth	r2, r2
 8005d38:	801a      	strh	r2, [r3, #0]
}
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	b002      	add	sp, #8
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	40005c50 	.word	0x40005c50
 8005d44:	40006000 	.word	0x40006000
 8005d48:	40006004 	.word	0x40006004

08005d4c <SetEPDblBuffCount>:
  * @brief Set the number of bytes for a double Buffer
  * @param   bEpNum,bDir, wCount
  * @retval Address of the Buffer 1.
  */
void SetEPDblBuffCount(uint8_t bEpNum, uint8_t bDir, uint16_t wCount)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	1dfb      	adds	r3, r7, #7
 8005d54:	7018      	strb	r0, [r3, #0]
 8005d56:	1dbb      	adds	r3, r7, #6
 8005d58:	7019      	strb	r1, [r3, #0]
 8005d5a:	1d3b      	adds	r3, r7, #4
 8005d5c:	801a      	strh	r2, [r3, #0]
  _SetEPDblBuffCount(bEpNum, bDir, wCount);
 8005d5e:	1dbb      	adds	r3, r7, #6
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d146      	bne.n	8005df4 <SetEPDblBuffCount+0xa8>
 8005d66:	4b5b      	ldr	r3, [pc, #364]	; (8005ed4 <SetEPDblBuffCount+0x188>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	1c1a      	adds	r2, r3, #0
 8005d6e:	1dfb      	adds	r3, r7, #7
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	00db      	lsls	r3, r3, #3
 8005d74:	18d3      	adds	r3, r2, r3
 8005d76:	4a58      	ldr	r2, [pc, #352]	; (8005ed8 <SetEPDblBuffCount+0x18c>)
 8005d78:	189b      	adds	r3, r3, r2
 8005d7a:	613b      	str	r3, [r7, #16]
 8005d7c:	1d3b      	adds	r3, r7, #4
 8005d7e:	881b      	ldrh	r3, [r3, #0]
 8005d80:	2b3e      	cmp	r3, #62	; 0x3e
 8005d82:	d91d      	bls.n	8005dc0 <SetEPDblBuffCount+0x74>
 8005d84:	1c3b      	adds	r3, r7, #0
 8005d86:	3316      	adds	r3, #22
 8005d88:	1d3a      	adds	r2, r7, #4
 8005d8a:	8812      	ldrh	r2, [r2, #0]
 8005d8c:	0952      	lsrs	r2, r2, #5
 8005d8e:	801a      	strh	r2, [r3, #0]
 8005d90:	1d3b      	adds	r3, r7, #4
 8005d92:	881a      	ldrh	r2, [r3, #0]
 8005d94:	231f      	movs	r3, #31
 8005d96:	4013      	ands	r3, r2
 8005d98:	d106      	bne.n	8005da8 <SetEPDblBuffCount+0x5c>
 8005d9a:	1c3b      	adds	r3, r7, #0
 8005d9c:	3316      	adds	r3, #22
 8005d9e:	881a      	ldrh	r2, [r3, #0]
 8005da0:	1c3b      	adds	r3, r7, #0
 8005da2:	3316      	adds	r3, #22
 8005da4:	3a01      	subs	r2, #1
 8005da6:	801a      	strh	r2, [r3, #0]
 8005da8:	1c3b      	adds	r3, r7, #0
 8005daa:	3316      	adds	r3, #22
 8005dac:	881b      	ldrh	r3, [r3, #0]
 8005dae:	029b      	lsls	r3, r3, #10
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	4a4a      	ldr	r2, [pc, #296]	; (8005edc <SetEPDblBuffCount+0x190>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	801a      	strh	r2, [r3, #0]
 8005dbe:	e02a      	b.n	8005e16 <SetEPDblBuffCount+0xca>
 8005dc0:	1c3b      	adds	r3, r7, #0
 8005dc2:	3316      	adds	r3, #22
 8005dc4:	1d3a      	adds	r2, r7, #4
 8005dc6:	8812      	ldrh	r2, [r2, #0]
 8005dc8:	0852      	lsrs	r2, r2, #1
 8005dca:	801a      	strh	r2, [r3, #0]
 8005dcc:	1d3b      	adds	r3, r7, #4
 8005dce:	881a      	ldrh	r2, [r3, #0]
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	d006      	beq.n	8005de4 <SetEPDblBuffCount+0x98>
 8005dd6:	1c3b      	adds	r3, r7, #0
 8005dd8:	3316      	adds	r3, #22
 8005dda:	881a      	ldrh	r2, [r3, #0]
 8005ddc:	1c3b      	adds	r3, r7, #0
 8005dde:	3316      	adds	r3, #22
 8005de0:	3201      	adds	r2, #1
 8005de2:	801a      	strh	r2, [r3, #0]
 8005de4:	1c3b      	adds	r3, r7, #0
 8005de6:	3316      	adds	r3, #22
 8005de8:	881b      	ldrh	r3, [r3, #0]
 8005dea:	029b      	lsls	r3, r3, #10
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	801a      	strh	r2, [r3, #0]
 8005df2:	e010      	b.n	8005e16 <SetEPDblBuffCount+0xca>
 8005df4:	1dbb      	adds	r3, r7, #6
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d10c      	bne.n	8005e16 <SetEPDblBuffCount+0xca>
 8005dfc:	4b35      	ldr	r3, [pc, #212]	; (8005ed4 <SetEPDblBuffCount+0x188>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	1c1a      	adds	r2, r3, #0
 8005e04:	1dfb      	adds	r3, r7, #7
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	00db      	lsls	r3, r3, #3
 8005e0a:	18d3      	adds	r3, r2, r3
 8005e0c:	4a32      	ldr	r2, [pc, #200]	; (8005ed8 <SetEPDblBuffCount+0x18c>)
 8005e0e:	189b      	adds	r3, r3, r2
 8005e10:	1d3a      	adds	r2, r7, #4
 8005e12:	8812      	ldrh	r2, [r2, #0]
 8005e14:	801a      	strh	r2, [r3, #0]
 8005e16:	1dbb      	adds	r3, r7, #6
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d146      	bne.n	8005eac <SetEPDblBuffCount+0x160>
 8005e1e:	4b2d      	ldr	r3, [pc, #180]	; (8005ed4 <SetEPDblBuffCount+0x188>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	1c1a      	adds	r2, r3, #0
 8005e26:	1dfb      	adds	r3, r7, #7
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	00db      	lsls	r3, r3, #3
 8005e2c:	18d3      	adds	r3, r2, r3
 8005e2e:	4a2c      	ldr	r2, [pc, #176]	; (8005ee0 <SetEPDblBuffCount+0x194>)
 8005e30:	189b      	adds	r3, r3, r2
 8005e32:	60fb      	str	r3, [r7, #12]
 8005e34:	1d3b      	adds	r3, r7, #4
 8005e36:	881b      	ldrh	r3, [r3, #0]
 8005e38:	2b3e      	cmp	r3, #62	; 0x3e
 8005e3a:	d91d      	bls.n	8005e78 <SetEPDblBuffCount+0x12c>
 8005e3c:	1c3b      	adds	r3, r7, #0
 8005e3e:	3314      	adds	r3, #20
 8005e40:	1d3a      	adds	r2, r7, #4
 8005e42:	8812      	ldrh	r2, [r2, #0]
 8005e44:	0952      	lsrs	r2, r2, #5
 8005e46:	801a      	strh	r2, [r3, #0]
 8005e48:	1d3b      	adds	r3, r7, #4
 8005e4a:	881a      	ldrh	r2, [r3, #0]
 8005e4c:	231f      	movs	r3, #31
 8005e4e:	4013      	ands	r3, r2
 8005e50:	d106      	bne.n	8005e60 <SetEPDblBuffCount+0x114>
 8005e52:	1c3b      	adds	r3, r7, #0
 8005e54:	3314      	adds	r3, #20
 8005e56:	881a      	ldrh	r2, [r3, #0]
 8005e58:	1c3b      	adds	r3, r7, #0
 8005e5a:	3314      	adds	r3, #20
 8005e5c:	3a01      	subs	r2, #1
 8005e5e:	801a      	strh	r2, [r3, #0]
 8005e60:	1c3b      	adds	r3, r7, #0
 8005e62:	3314      	adds	r3, #20
 8005e64:	881b      	ldrh	r3, [r3, #0]
 8005e66:	029b      	lsls	r3, r3, #10
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	4a1c      	ldr	r2, [pc, #112]	; (8005edc <SetEPDblBuffCount+0x190>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	801a      	strh	r2, [r3, #0]
 8005e76:	e02a      	b.n	8005ece <SetEPDblBuffCount+0x182>
 8005e78:	1c3b      	adds	r3, r7, #0
 8005e7a:	3314      	adds	r3, #20
 8005e7c:	1d3a      	adds	r2, r7, #4
 8005e7e:	8812      	ldrh	r2, [r2, #0]
 8005e80:	0852      	lsrs	r2, r2, #1
 8005e82:	801a      	strh	r2, [r3, #0]
 8005e84:	1d3b      	adds	r3, r7, #4
 8005e86:	881a      	ldrh	r2, [r3, #0]
 8005e88:	2301      	movs	r3, #1
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	d006      	beq.n	8005e9c <SetEPDblBuffCount+0x150>
 8005e8e:	1c3b      	adds	r3, r7, #0
 8005e90:	3314      	adds	r3, #20
 8005e92:	881a      	ldrh	r2, [r3, #0]
 8005e94:	1c3b      	adds	r3, r7, #0
 8005e96:	3314      	adds	r3, #20
 8005e98:	3201      	adds	r2, #1
 8005e9a:	801a      	strh	r2, [r3, #0]
 8005e9c:	1c3b      	adds	r3, r7, #0
 8005e9e:	3314      	adds	r3, #20
 8005ea0:	881b      	ldrh	r3, [r3, #0]
 8005ea2:	029b      	lsls	r3, r3, #10
 8005ea4:	b29a      	uxth	r2, r3
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	801a      	strh	r2, [r3, #0]
 8005eaa:	e010      	b.n	8005ece <SetEPDblBuffCount+0x182>
 8005eac:	1dbb      	adds	r3, r7, #6
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d10c      	bne.n	8005ece <SetEPDblBuffCount+0x182>
 8005eb4:	4b07      	ldr	r3, [pc, #28]	; (8005ed4 <SetEPDblBuffCount+0x188>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	1c1a      	adds	r2, r3, #0
 8005ebc:	1dfb      	adds	r3, r7, #7
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	00db      	lsls	r3, r3, #3
 8005ec2:	18d3      	adds	r3, r2, r3
 8005ec4:	4a06      	ldr	r2, [pc, #24]	; (8005ee0 <SetEPDblBuffCount+0x194>)
 8005ec6:	189b      	adds	r3, r3, r2
 8005ec8:	1d3a      	adds	r2, r7, #4
 8005eca:	8812      	ldrh	r2, [r2, #0]
 8005ecc:	801a      	strh	r2, [r3, #0]
}
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	b006      	add	sp, #24
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	40005c50 	.word	0x40005c50
 8005ed8:	40006002 	.word	0x40006002
 8005edc:	ffff8000 	.word	0xffff8000
 8005ee0:	40006006 	.word	0x40006006

08005ee4 <GetEPDblBuf0Count>:
  *         Buffer endpoint.
  * @param   bEpNum: Endpoint Number.
  * @retval Endpoint Buffer 0 count
  */
uint16_t GetEPDblBuf0Count(uint8_t bEpNum)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	1c02      	adds	r2, r0, #0
 8005eec:	1dfb      	adds	r3, r7, #7
 8005eee:	701a      	strb	r2, [r3, #0]
  return(_GetEPDblBuf0Count(bEpNum));
 8005ef0:	4b08      	ldr	r3, [pc, #32]	; (8005f14 <GetEPDblBuf0Count+0x30>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	1c1a      	adds	r2, r3, #0
 8005ef8:	1dfb      	adds	r3, r7, #7
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	00db      	lsls	r3, r3, #3
 8005efe:	18d3      	adds	r3, r2, r3
 8005f00:	4a05      	ldr	r2, [pc, #20]	; (8005f18 <GetEPDblBuf0Count+0x34>)
 8005f02:	189b      	adds	r3, r3, r2
 8005f04:	881b      	ldrh	r3, [r3, #0]
 8005f06:	059b      	lsls	r3, r3, #22
 8005f08:	0d9b      	lsrs	r3, r3, #22
 8005f0a:	b29b      	uxth	r3, r3
}
 8005f0c:	1c18      	adds	r0, r3, #0
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	b002      	add	sp, #8
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	40005c50 	.word	0x40005c50
 8005f18:	40006002 	.word	0x40006002

08005f1c <GetEPDblBuf1Count>:
  * @brief Returns the number of data received in the buffer 1 of a double
  * @param   bEpNum: Endpoint Number.
  * @retval Endpoint Buffer 1 count
  */
uint16_t GetEPDblBuf1Count(uint8_t bEpNum)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	1c02      	adds	r2, r0, #0
 8005f24:	1dfb      	adds	r3, r7, #7
 8005f26:	701a      	strb	r2, [r3, #0]
  return(_GetEPDblBuf1Count(bEpNum));
 8005f28:	4b08      	ldr	r3, [pc, #32]	; (8005f4c <GetEPDblBuf1Count+0x30>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	1c1a      	adds	r2, r3, #0
 8005f30:	1dfb      	adds	r3, r7, #7
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	00db      	lsls	r3, r3, #3
 8005f36:	18d3      	adds	r3, r2, r3
 8005f38:	4a05      	ldr	r2, [pc, #20]	; (8005f50 <GetEPDblBuf1Count+0x34>)
 8005f3a:	189b      	adds	r3, r3, r2
 8005f3c:	881b      	ldrh	r3, [r3, #0]
 8005f3e:	059b      	lsls	r3, r3, #22
 8005f40:	0d9b      	lsrs	r3, r3, #22
 8005f42:	b29b      	uxth	r3, r3
}
 8005f44:	1c18      	adds	r0, r3, #0
 8005f46:	46bd      	mov	sp, r7
 8005f48:	b002      	add	sp, #8
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	40005c50 	.word	0x40005c50
 8005f50:	40006006 	.word	0x40006006

08005f54 <FreeUserBuffer>:
          toggles bit SW_BUF in the double buffered endpoint register
  * @param   bEpNum, bDir
  * @retval None
  */
void FreeUserBuffer(uint8_t bEpNum, uint8_t bDir)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	1c0a      	adds	r2, r1, #0
 8005f5c:	1dfb      	adds	r3, r7, #7
 8005f5e:	1c01      	adds	r1, r0, #0
 8005f60:	7019      	strb	r1, [r3, #0]
 8005f62:	1dbb      	adds	r3, r7, #6
 8005f64:	701a      	strb	r2, [r3, #0]
  if (bDir == EP_DBUF_OUT)
 8005f66:	1dbb      	adds	r3, r7, #6
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d112      	bne.n	8005f94 <FreeUserBuffer+0x40>
  { /* OUT double buffered endpoint */
    _ToggleDTOG_TX(bEpNum);
 8005f6e:	1dfb      	adds	r3, r7, #7
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	4914      	ldr	r1, [pc, #80]	; (8005fc8 <FreeUserBuffer+0x74>)
 8005f76:	185b      	adds	r3, r3, r1
 8005f78:	1dfa      	adds	r2, r7, #7
 8005f7a:	7812      	ldrb	r2, [r2, #0]
 8005f7c:	0092      	lsls	r2, r2, #2
 8005f7e:	4912      	ldr	r1, [pc, #72]	; (8005fc8 <FreeUserBuffer+0x74>)
 8005f80:	1852      	adds	r2, r2, r1
 8005f82:	6812      	ldr	r2, [r2, #0]
 8005f84:	b292      	uxth	r2, r2
 8005f86:	1c11      	adds	r1, r2, #0
 8005f88:	4a10      	ldr	r2, [pc, #64]	; (8005fcc <FreeUserBuffer+0x78>)
 8005f8a:	400a      	ands	r2, r1
 8005f8c:	4910      	ldr	r1, [pc, #64]	; (8005fd0 <FreeUserBuffer+0x7c>)
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	601a      	str	r2, [r3, #0]
 8005f92:	e015      	b.n	8005fc0 <FreeUserBuffer+0x6c>
  }
  else if (bDir == EP_DBUF_IN)
 8005f94:	1dbb      	adds	r3, r7, #6
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d111      	bne.n	8005fc0 <FreeUserBuffer+0x6c>
  { /* IN double buffered endpoint */
    _ToggleDTOG_RX(bEpNum);
 8005f9c:	1dfb      	adds	r3, r7, #7
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	4a09      	ldr	r2, [pc, #36]	; (8005fc8 <FreeUserBuffer+0x74>)
 8005fa4:	189b      	adds	r3, r3, r2
 8005fa6:	1dfa      	adds	r2, r7, #7
 8005fa8:	7812      	ldrb	r2, [r2, #0]
 8005faa:	0092      	lsls	r2, r2, #2
 8005fac:	4906      	ldr	r1, [pc, #24]	; (8005fc8 <FreeUserBuffer+0x74>)
 8005fae:	1852      	adds	r2, r2, r1
 8005fb0:	6812      	ldr	r2, [r2, #0]
 8005fb2:	b292      	uxth	r2, r2
 8005fb4:	1c11      	adds	r1, r2, #0
 8005fb6:	4a05      	ldr	r2, [pc, #20]	; (8005fcc <FreeUserBuffer+0x78>)
 8005fb8:	400a      	ands	r2, r1
 8005fba:	4906      	ldr	r1, [pc, #24]	; (8005fd4 <FreeUserBuffer+0x80>)
 8005fbc:	430a      	orrs	r2, r1
 8005fbe:	601a      	str	r2, [r3, #0]
  }
}
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	b002      	add	sp, #8
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	46c0      	nop			; (mov r8, r8)
 8005fc8:	40005c00 	.word	0x40005c00
 8005fcc:	00000f0f 	.word	0x00000f0f
 8005fd0:	000080c0 	.word	0x000080c0
 8005fd4:	0000c080 	.word	0x0000c080

08005fd8 <UserToPMABufferCopy>:
  * @param   wPMABufAddr: address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b086      	sub	sp, #24
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	1cbb      	adds	r3, r7, #2
 8005fe2:	8019      	strh	r1, [r3, #0]
 8005fe4:	1c3b      	adds	r3, r7, #0
 8005fe6:	801a      	strh	r2, [r3, #0]
  uint32_t n = (wNBytes + 1) >> 1; 
 8005fe8:	1c3b      	adds	r3, r7, #0
 8005fea:	881b      	ldrh	r3, [r3, #0]
 8005fec:	3301      	adds	r3, #1
 8005fee:	105b      	asrs	r3, r3, #1
 8005ff0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint16_t temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr + PMAAddr);
 8005ff2:	1cbb      	adds	r3, r7, #2
 8005ff4:	881b      	ldrh	r3, [r3, #0]
 8005ff6:	4a16      	ldr	r2, [pc, #88]	; (8006050 <UserToPMABufferCopy+0x78>)
 8005ff8:	189b      	adds	r3, r3, r2
 8005ffa:	613b      	str	r3, [r7, #16]
  
  for (i = n; i != 0; i--)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	617b      	str	r3, [r7, #20]
 8006000:	e020      	b.n	8006044 <UserToPMABufferCopy+0x6c>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	781a      	ldrb	r2, [r3, #0]
 8006006:	1c3b      	adds	r3, r7, #0
 8006008:	330a      	adds	r3, #10
 800600a:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	3301      	adds	r3, #1
 8006010:	607b      	str	r3, [r7, #4]
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	021b      	lsls	r3, r3, #8
 8006018:	b29a      	uxth	r2, r3
 800601a:	1c3b      	adds	r3, r7, #0
 800601c:	330a      	adds	r3, #10
 800601e:	881b      	ldrh	r3, [r3, #0]
 8006020:	4313      	orrs	r3, r2
 8006022:	b29a      	uxth	r2, r3
 8006024:	1c3b      	adds	r3, r7, #0
 8006026:	3308      	adds	r3, #8
 8006028:	801a      	strh	r2, [r3, #0]
    *pdwVal++ = temp2;
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	1c9a      	adds	r2, r3, #2
 800602e:	613a      	str	r2, [r7, #16]
 8006030:	1c3a      	adds	r2, r7, #0
 8006032:	3208      	adds	r2, #8
 8006034:	8812      	ldrh	r2, [r2, #0]
 8006036:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	3301      	adds	r3, #1
 800603c:	607b      	str	r3, [r7, #4]
  uint32_t i;
  uint16_t temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr + PMAAddr);
  
  for (i = n; i != 0; i--)
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	3b01      	subs	r3, #1
 8006042:	617b      	str	r3, [r7, #20]
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1db      	bne.n	8006002 <UserToPMABufferCopy+0x2a>
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pbUsrBuf++;
  }
}
 800604a:	46bd      	mov	sp, r7
 800604c:	b006      	add	sp, #24
 800604e:	bd80      	pop	{r7, pc}
 8006050:	40006000 	.word	0x40006000

08006054 <PMAToUserBufferCopy>:
  * @param   wPMABufAddr: address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b086      	sub	sp, #24
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	1cbb      	adds	r3, r7, #2
 800605e:	8019      	strh	r1, [r3, #0]
 8006060:	1c3b      	adds	r3, r7, #0
 8006062:	801a      	strh	r2, [r3, #0]
  uint32_t n = (wNBytes + 1) >> 1;
 8006064:	1c3b      	adds	r3, r7, #0
 8006066:	881b      	ldrh	r3, [r3, #0]
 8006068:	3301      	adds	r3, #1
 800606a:	105b      	asrs	r3, r3, #1
 800606c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr + PMAAddr);
 800606e:	1cbb      	adds	r3, r7, #2
 8006070:	881b      	ldrh	r3, [r3, #0]
 8006072:	4a0d      	ldr	r2, [pc, #52]	; (80060a8 <PMAToUserBufferCopy+0x54>)
 8006074:	189b      	adds	r3, r3, r2
 8006076:	613b      	str	r3, [r7, #16]
  for (i = n; i != 0; i--)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	617b      	str	r3, [r7, #20]
 800607c:	e00d      	b.n	800609a <PMAToUserBufferCopy+0x46>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	1c5a      	adds	r2, r3, #1
 8006082:	607a      	str	r2, [r7, #4]
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	1c91      	adds	r1, r2, #2
 8006088:	6139      	str	r1, [r7, #16]
 800608a:	8812      	ldrh	r2, [r2, #0]
 800608c:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	3301      	adds	r3, #1
 8006092:	607b      	str	r3, [r7, #4]
{
  uint32_t n = (wNBytes + 1) >> 1;
  uint32_t i;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr + PMAAddr);
  for (i = n; i != 0; i--)
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	3b01      	subs	r3, #1
 8006098:	617b      	str	r3, [r7, #20]
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1ee      	bne.n	800607e <PMAToUserBufferCopy+0x2a>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 80060a0:	46bd      	mov	sp, r7
 80060a2:	b006      	add	sp, #24
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	46c0      	nop			; (mov r8, r8)
 80060a8:	40006000 	.word	0x40006000

080060ac <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80060b6:	1c3b      	adds	r3, r7, #0
 80060b8:	330e      	adds	r3, #14
 80060ba:	2200      	movs	r2, #0
 80060bc:	801a      	strh	r2, [r3, #0]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 80060be:	1c3b      	adds	r3, r7, #0
 80060c0:	330e      	adds	r3, #14
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	8812      	ldrh	r2, [r2, #0]
 80060c6:	801a      	strh	r2, [r3, #0]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 80060c8:	1c3b      	adds	r3, r7, #0
 80060ca:	330e      	adds	r3, #14
 80060cc:	1c3a      	adds	r2, r7, #0
 80060ce:	320e      	adds	r2, #14
 80060d0:	8811      	ldrh	r1, [r2, #0]
 80060d2:	22c1      	movs	r2, #193	; 0xc1
 80060d4:	0192      	lsls	r2, r2, #6
 80060d6:	400a      	ands	r2, r1
 80060d8:	801a      	strh	r2, [r3, #0]
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	881a      	ldrh	r2, [r3, #0]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	89db      	ldrh	r3, [r3, #14]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	b29a      	uxth	r2, r3
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 80060ea:	4313      	orrs	r3, r2
 80060ec:	b29a      	uxth	r2, r3
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 80060f2:	4313      	orrs	r3, r2
 80060f4:	b29a      	uxth	r2, r3
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
                      SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 80060fa:	4313      	orrs	r3, r2
 80060fc:	b29a      	uxth	r2, r3
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
                      SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8006102:	4313      	orrs	r3, r2
 8006104:	b299      	uxth	r1, r3
 8006106:	1c3b      	adds	r3, r7, #0
 8006108:	330e      	adds	r3, #14
 800610a:	1c3a      	adds	r2, r7, #0
 800610c:	320e      	adds	r2, #14
 800610e:	8812      	ldrh	r2, [r2, #0]
 8006110:	430a      	orrs	r2, r1
 8006112:	801a      	strh	r2, [r3, #0]
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
                      SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	1c3a      	adds	r2, r7, #0
 8006118:	320e      	adds	r2, #14
 800611a:	8812      	ldrh	r2, [r2, #0]
 800611c:	801a      	strh	r2, [r3, #0]
  /*-------------------------Data Size Configuration -----------------------*/
  /* Get the SPIx CR2 value */
  tmpreg = SPIx->CR2;
 800611e:	1c3b      	adds	r3, r7, #0
 8006120:	330e      	adds	r3, #14
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	8892      	ldrh	r2, [r2, #4]
 8006126:	801a      	strh	r2, [r3, #0]
  /* Clear DS[3:0] bits */
  tmpreg &=(uint16_t)~SPI_CR2_DS;
 8006128:	1c3b      	adds	r3, r7, #0
 800612a:	330e      	adds	r3, #14
 800612c:	1c3a      	adds	r2, r7, #0
 800612e:	320e      	adds	r2, #14
 8006130:	8811      	ldrh	r1, [r2, #0]
 8006132:	4a1d      	ldr	r2, [pc, #116]	; (80061a8 <SPI_Init+0xfc>)
 8006134:	400a      	ands	r2, r1
 8006136:	801a      	strh	r2, [r3, #0]
  /* Configure SPIx: Data Size */
  tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	8899      	ldrh	r1, [r3, #4]
 800613c:	1c3b      	adds	r3, r7, #0
 800613e:	330e      	adds	r3, #14
 8006140:	1c3a      	adds	r2, r7, #0
 8006142:	320e      	adds	r2, #14
 8006144:	8812      	ldrh	r2, [r2, #0]
 8006146:	430a      	orrs	r2, r1
 8006148:	801a      	strh	r2, [r3, #0]
  /* Write to SPIx CR2 */
  SPIx->CR2 = tmpreg;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	1c3a      	adds	r2, r7, #0
 800614e:	320e      	adds	r2, #14
 8006150:	8812      	ldrh	r2, [r2, #0]
 8006152:	809a      	strh	r2, [r3, #4]
  
  /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	8a1a      	ldrh	r2, [r3, #16]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	821a      	strh	r2, [r3, #16]
  
  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 800615c:	1c3b      	adds	r3, r7, #0
 800615e:	330e      	adds	r3, #14
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	8812      	ldrh	r2, [r2, #0]
 8006164:	801a      	strh	r2, [r3, #0]
  /* Clear MSTR bit */
  tmpreg &= CR1_CLEAR_MASK2;
 8006166:	1c3b      	adds	r3, r7, #0
 8006168:	330e      	adds	r3, #14
 800616a:	1c3a      	adds	r2, r7, #0
 800616c:	320e      	adds	r2, #14
 800616e:	8812      	ldrh	r2, [r2, #0]
 8006170:	2104      	movs	r1, #4
 8006172:	438a      	bics	r2, r1
 8006174:	801a      	strh	r2, [r3, #0]
  /* Configure SPIx: master/slave mode */  
  /* Set MSTR bit according to SPI_Mode */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Mode);  
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	8859      	ldrh	r1, [r3, #2]
 800617a:	1c3b      	adds	r3, r7, #0
 800617c:	330e      	adds	r3, #14
 800617e:	1c3a      	adds	r2, r7, #0
 8006180:	320e      	adds	r2, #14
 8006182:	8812      	ldrh	r2, [r2, #0]
 8006184:	430a      	orrs	r2, r1
 8006186:	801a      	strh	r2, [r3, #0]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;  
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	1c3a      	adds	r2, r7, #0
 800618c:	320e      	adds	r2, #14
 800618e:	8812      	ldrh	r2, [r2, #0]
 8006190:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	8b9b      	ldrh	r3, [r3, #28]
 8006196:	b29a      	uxth	r2, r3
 8006198:	4b04      	ldr	r3, [pc, #16]	; (80061ac <SPI_Init+0x100>)
 800619a:	4013      	ands	r3, r2
 800619c:	b29a      	uxth	r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	839a      	strh	r2, [r3, #28]
}
 80061a2:	46bd      	mov	sp, r7
 80061a4:	b004      	add	sp, #16
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	fffff0ff 	.word	0xfffff0ff
 80061ac:	fffff7ff 	.word	0xfffff7ff

080061b0 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	1c0a      	adds	r2, r1, #0
 80061ba:	1cfb      	adds	r3, r7, #3
 80061bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80061be:	1cfb      	adds	r3, r7, #3
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d008      	beq.n	80061d8 <SPI_Cmd+0x28>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	881b      	ldrh	r3, [r3, #0]
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	2240      	movs	r2, #64	; 0x40
 80061ce:	4313      	orrs	r3, r2
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	801a      	strh	r2, [r3, #0]
 80061d6:	e007      	b.n	80061e8 <SPI_Cmd+0x38>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	881b      	ldrh	r3, [r3, #0]
 80061dc:	b29b      	uxth	r3, r3
 80061de:	2240      	movs	r2, #64	; 0x40
 80061e0:	4393      	bics	r3, r2
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	801a      	strh	r2, [r3, #0]
  }
}
 80061e8:	46bd      	mov	sp, r7
 80061ea:	b002      	add	sp, #8
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	46c0      	nop			; (mov r8, r8)

080061f0 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	1cbb      	adds	r3, r7, #2
 80061fa:	8019      	strh	r1, [r3, #0]
 80061fc:	1c7b      	adds	r3, r7, #1
 80061fe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMA_REQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8006200:	1c7b      	adds	r3, r7, #1
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d009      	beq.n	800621c <SPI_I2S_DMACmd+0x2c>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	889b      	ldrh	r3, [r3, #4]
 800620c:	b29a      	uxth	r2, r3
 800620e:	1cbb      	adds	r3, r7, #2
 8006210:	881b      	ldrh	r3, [r3, #0]
 8006212:	4313      	orrs	r3, r2
 8006214:	b29a      	uxth	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	809a      	strh	r2, [r3, #4]
 800621a:	e00a      	b.n	8006232 <SPI_I2S_DMACmd+0x42>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	889b      	ldrh	r3, [r3, #4]
 8006220:	b29b      	uxth	r3, r3
 8006222:	1cba      	adds	r2, r7, #2
 8006224:	8812      	ldrh	r2, [r2, #0]
 8006226:	43d2      	mvns	r2, r2
 8006228:	b292      	uxth	r2, r2
 800622a:	4013      	ands	r3, r2
 800622c:	b29a      	uxth	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	809a      	strh	r2, [r3, #4]
  }
}
 8006232:	46bd      	mov	sp, r7
 8006234:	b002      	add	sp, #8
 8006236:	bd80      	pop	{r7, pc}

08006238 <RCC_USBCLKConfig>:
  *             @arg RCC_USBCLK_HSI48: USB clock = HSI48
  *             @arg RCC_USBCLK_PLLCLK: USB clock = PLL clock
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLK)
{ 
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK(RCC_USBCLK));

  /* Clear USBSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_USBSW;
 8006240:	4b07      	ldr	r3, [pc, #28]	; (8006260 <RCC_USBCLKConfig+0x28>)
 8006242:	4a07      	ldr	r2, [pc, #28]	; (8006260 <RCC_USBCLKConfig+0x28>)
 8006244:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006246:	2180      	movs	r1, #128	; 0x80
 8006248:	438a      	bics	r2, r1
 800624a:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set USBSW bits according to RCC_USBCLK value */
  RCC->CFGR3 |= RCC_USBCLK;
 800624c:	4b04      	ldr	r3, [pc, #16]	; (8006260 <RCC_USBCLKConfig+0x28>)
 800624e:	4a04      	ldr	r2, [pc, #16]	; (8006260 <RCC_USBCLKConfig+0x28>)
 8006250:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	430a      	orrs	r2, r1
 8006256:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006258:	46bd      	mov	sp, r7
 800625a:	b002      	add	sp, #8
 800625c:	bd80      	pop	{r7, pc}
 800625e:	46c0      	nop			; (mov r8, r8)
 8006260:	40021000 	.word	0x40021000

08006264 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	1c0a      	adds	r2, r1, #0
 800626e:	1cfb      	adds	r3, r7, #3
 8006270:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8006272:	1cfb      	adds	r3, r7, #3
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d006      	beq.n	8006288 <RCC_AHBPeriphClockCmd+0x24>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 800627a:	4b08      	ldr	r3, [pc, #32]	; (800629c <RCC_AHBPeriphClockCmd+0x38>)
 800627c:	4a07      	ldr	r2, [pc, #28]	; (800629c <RCC_AHBPeriphClockCmd+0x38>)
 800627e:	6951      	ldr	r1, [r2, #20]
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	430a      	orrs	r2, r1
 8006284:	615a      	str	r2, [r3, #20]
 8006286:	e006      	b.n	8006296 <RCC_AHBPeriphClockCmd+0x32>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8006288:	4b04      	ldr	r3, [pc, #16]	; (800629c <RCC_AHBPeriphClockCmd+0x38>)
 800628a:	4a04      	ldr	r2, [pc, #16]	; (800629c <RCC_AHBPeriphClockCmd+0x38>)
 800628c:	6952      	ldr	r2, [r2, #20]
 800628e:	6879      	ldr	r1, [r7, #4]
 8006290:	43c9      	mvns	r1, r1
 8006292:	400a      	ands	r2, r1
 8006294:	615a      	str	r2, [r3, #20]
  }
}
 8006296:	46bd      	mov	sp, r7
 8006298:	b002      	add	sp, #8
 800629a:	bd80      	pop	{r7, pc}
 800629c:	40021000 	.word	0x40021000

080062a0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	1c0a      	adds	r2, r1, #0
 80062aa:	1cfb      	adds	r3, r7, #3
 80062ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80062ae:	1cfb      	adds	r3, r7, #3
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d006      	beq.n	80062c4 <RCC_APB2PeriphClockCmd+0x24>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80062b6:	4b08      	ldr	r3, [pc, #32]	; (80062d8 <RCC_APB2PeriphClockCmd+0x38>)
 80062b8:	4a07      	ldr	r2, [pc, #28]	; (80062d8 <RCC_APB2PeriphClockCmd+0x38>)
 80062ba:	6991      	ldr	r1, [r2, #24]
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	430a      	orrs	r2, r1
 80062c0:	619a      	str	r2, [r3, #24]
 80062c2:	e006      	b.n	80062d2 <RCC_APB2PeriphClockCmd+0x32>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80062c4:	4b04      	ldr	r3, [pc, #16]	; (80062d8 <RCC_APB2PeriphClockCmd+0x38>)
 80062c6:	4a04      	ldr	r2, [pc, #16]	; (80062d8 <RCC_APB2PeriphClockCmd+0x38>)
 80062c8:	6992      	ldr	r2, [r2, #24]
 80062ca:	6879      	ldr	r1, [r7, #4]
 80062cc:	43c9      	mvns	r1, r1
 80062ce:	400a      	ands	r2, r1
 80062d0:	619a      	str	r2, [r3, #24]
  }
}
 80062d2:	46bd      	mov	sp, r7
 80062d4:	b002      	add	sp, #8
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	40021000 	.word	0x40021000

080062dc <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	1c0a      	adds	r2, r1, #0
 80062e6:	1cfb      	adds	r3, r7, #3
 80062e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80062ea:	1cfb      	adds	r3, r7, #3
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d006      	beq.n	8006300 <RCC_APB1PeriphClockCmd+0x24>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80062f2:	4b08      	ldr	r3, [pc, #32]	; (8006314 <RCC_APB1PeriphClockCmd+0x38>)
 80062f4:	4a07      	ldr	r2, [pc, #28]	; (8006314 <RCC_APB1PeriphClockCmd+0x38>)
 80062f6:	69d1      	ldr	r1, [r2, #28]
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	430a      	orrs	r2, r1
 80062fc:	61da      	str	r2, [r3, #28]
 80062fe:	e006      	b.n	800630e <RCC_APB1PeriphClockCmd+0x32>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8006300:	4b04      	ldr	r3, [pc, #16]	; (8006314 <RCC_APB1PeriphClockCmd+0x38>)
 8006302:	4a04      	ldr	r2, [pc, #16]	; (8006314 <RCC_APB1PeriphClockCmd+0x38>)
 8006304:	69d2      	ldr	r2, [r2, #28]
 8006306:	6879      	ldr	r1, [r7, #4]
 8006308:	43c9      	mvns	r1, r1
 800630a:	400a      	ands	r2, r1
 800630c:	61da      	str	r2, [r3, #28]
  }
}
 800630e:	46bd      	mov	sp, r7
 8006310:	b002      	add	sp, #8
 8006312:	bd80      	pop	{r7, pc}
 8006314:	40021000 	.word	0x40021000

08006318 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00;
 8006320:	2300      	movs	r3, #0
 8006322:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	789b      	ldrb	r3, [r3, #2]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d03c      	beq.n	80063a6 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 800632c:	4b24      	ldr	r3, [pc, #144]	; (80063c0 <NVIC_Init+0xa8>)
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	7812      	ldrb	r2, [r2, #0]
 8006332:	0892      	lsrs	r2, r2, #2
 8006334:	b2d2      	uxtb	r2, r2
 8006336:	32c0      	adds	r2, #192	; 0xc0
 8006338:	0092      	lsls	r2, r2, #2
 800633a:	58d3      	ldr	r3, [r2, r3]
 800633c:	60fb      	str	r3, [r7, #12]
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	1c1a      	adds	r2, r3, #0
 8006344:	2303      	movs	r3, #3
 8006346:	4013      	ands	r3, r2
 8006348:	00db      	lsls	r3, r3, #3
 800634a:	22ff      	movs	r2, #255	; 0xff
 800634c:	1c10      	adds	r0, r2, #0
 800634e:	4098      	lsls	r0, r3
 8006350:	1c03      	adds	r3, r0, #0
 8006352:	43da      	mvns	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	4013      	ands	r3, r2
 8006358:	60fb      	str	r3, [r7, #12]
    tmppriority |= (uint32_t)((((uint32_t)NVIC_InitStruct->NVIC_IRQChannelPriority << 6) & 0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8));    
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	785b      	ldrb	r3, [r3, #1]
 800635e:	019a      	lsls	r2, r3, #6
 8006360:	23ff      	movs	r3, #255	; 0xff
 8006362:	401a      	ands	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	1c19      	adds	r1, r3, #0
 800636a:	2303      	movs	r3, #3
 800636c:	400b      	ands	r3, r1
 800636e:	00db      	lsls	r3, r3, #3
 8006370:	1c11      	adds	r1, r2, #0
 8006372:	4099      	lsls	r1, r3
 8006374:	1c0b      	adds	r3, r1, #0
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	4313      	orrs	r3, r2
 800637a:	60fb      	str	r3, [r7, #12]
    
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02] = tmppriority;
 800637c:	4b10      	ldr	r3, [pc, #64]	; (80063c0 <NVIC_Init+0xa8>)
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	7812      	ldrb	r2, [r2, #0]
 8006382:	0892      	lsrs	r2, r2, #2
 8006384:	b2d2      	uxtb	r2, r2
 8006386:	32c0      	adds	r2, #192	; 0xc0
 8006388:	0092      	lsls	r2, r2, #2
 800638a:	68f9      	ldr	r1, [r7, #12]
 800638c:	50d1      	str	r1, [r2, r3]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800638e:	4b0c      	ldr	r3, [pc, #48]	; (80063c0 <NVIC_Init+0xa8>)
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	7812      	ldrb	r2, [r2, #0]
 8006394:	1c11      	adds	r1, r2, #0
 8006396:	221f      	movs	r2, #31
 8006398:	400a      	ands	r2, r1
 800639a:	2101      	movs	r1, #1
 800639c:	1c08      	adds	r0, r1, #0
 800639e:	4090      	lsls	r0, r2
 80063a0:	1c02      	adds	r2, r0, #0
 80063a2:	601a      	str	r2, [r3, #0]
 80063a4:	e009      	b.n	80063ba <NVIC_Init+0xa2>
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80063a6:	4a06      	ldr	r2, [pc, #24]	; (80063c0 <NVIC_Init+0xa8>)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	1c19      	adds	r1, r3, #0
 80063ae:	231f      	movs	r3, #31
 80063b0:	400b      	ands	r3, r1
 80063b2:	2101      	movs	r1, #1
 80063b4:	4099      	lsls	r1, r3
 80063b6:	2380      	movs	r3, #128	; 0x80
 80063b8:	50d1      	str	r1, [r2, r3]
  }
}
 80063ba:	46bd      	mov	sp, r7
 80063bc:	b004      	add	sp, #16
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	e000e100 	.word	0xe000e100

080063c4 <SysTick_CLKSourceConfig>:
  *            @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *            @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2b04      	cmp	r3, #4
 80063d0:	d106      	bne.n	80063e0 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 80063d2:	4b08      	ldr	r3, [pc, #32]	; (80063f4 <SysTick_CLKSourceConfig+0x30>)
 80063d4:	4a07      	ldr	r2, [pc, #28]	; (80063f4 <SysTick_CLKSourceConfig+0x30>)
 80063d6:	6812      	ldr	r2, [r2, #0]
 80063d8:	2104      	movs	r1, #4
 80063da:	430a      	orrs	r2, r1
 80063dc:	601a      	str	r2, [r3, #0]
 80063de:	e005      	b.n	80063ec <SysTick_CLKSourceConfig+0x28>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 80063e0:	4b04      	ldr	r3, [pc, #16]	; (80063f4 <SysTick_CLKSourceConfig+0x30>)
 80063e2:	4a04      	ldr	r2, [pc, #16]	; (80063f4 <SysTick_CLKSourceConfig+0x30>)
 80063e4:	6812      	ldr	r2, [r2, #0]
 80063e6:	2104      	movs	r1, #4
 80063e8:	438a      	bics	r2, r1
 80063ea:	601a      	str	r2, [r3, #0]
  }
}
 80063ec:	46bd      	mov	sp, r7
 80063ee:	b002      	add	sp, #8
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	46c0      	nop			; (mov r8, r8)
 80063f4:	e000e010 	.word	0xe000e010

080063f8 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *         contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006402:	2300      	movs	r3, #0
 8006404:	60fb      	str	r3, [r7, #12]
  assert_param(IS_I2C_OWN_ADDRESS1(I2C_InitStruct->I2C_OwnAddress1));
  assert_param(IS_I2C_ACK(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

  /* Disable I2Cx Peripheral */
  I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2201      	movs	r2, #1
 800640c:	1c19      	adds	r1, r3, #0
 800640e:	4391      	bics	r1, r2
 8006410:	1c0a      	adds	r2, r1, #0
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx FILTERS Configuration ------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	60fb      	str	r3, [r7, #12]
  /* Clear I2Cx CR1 register */
  tmpreg &= CR1_CLEAR_MASK;
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	4b27      	ldr	r3, [pc, #156]	; (80064bc <I2C_Init+0xc4>)
 8006420:	4013      	ands	r3, r2
 8006422:	60fb      	str	r3, [r7, #12]
  /* Configure I2Cx: analog and digital filter */
  /* Set ANFOFF bit according to I2C_AnalogFilter value */
  /* Set DFN bits according to I2C_DigitalFilter value */
  tmpreg |= (uint32_t)I2C_InitStruct->I2C_AnalogFilter |(I2C_InitStruct->I2C_DigitalFilter << 8);
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	685a      	ldr	r2, [r3, #4]
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	021b      	lsls	r3, r3, #8
 800642e:	4313      	orrs	r3, r2
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	4313      	orrs	r3, r2
 8006434:	60fb      	str	r3, [r7, #12]

  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMING Configuration -------------------*/
  /* Configure I2Cx: Timing */
  /* Set TIMINGR bits according to I2C_Timing */
  /* Write to I2Cx TIMING */
  I2Cx->TIMINGR = I2C_InitStruct->I2C_Timing & TIMING_CLEAR_MASK;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	4b1f      	ldr	r3, [pc, #124]	; (80064c0 <I2C_Init+0xc8>)
 8006442:	401a      	ands	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	611a      	str	r2, [r3, #16]

  /* Enable I2Cx Peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2201      	movs	r2, #1
 800644e:	431a      	orrs	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Clear tmpreg local variable */
  tmpreg = 0;
 8006454:	2300      	movs	r3, #0
 8006456:	60fb      	str	r3, [r7, #12]
  /* Clear OAR1 register */
  I2Cx->OAR1 = (uint32_t)tmpreg;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	609a      	str	r2, [r3, #8]
  /* Clear OAR2 register */
  I2Cx->OAR2 = (uint32_t)tmpreg;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	60da      	str	r2, [r3, #12]
  /* Configure I2Cx: Own Address1 and acknowledged address */
  /* Set OA1MODE bit according to I2C_AcknowledgedAddress value */
  /* Set OA1 bits according to I2C_OwnAddress1 value */
  tmpreg = (uint32_t)((uint32_t)I2C_InitStruct->I2C_AcknowledgedAddress | \
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	699a      	ldr	r2, [r3, #24]
                      (uint32_t)I2C_InitStruct->I2C_OwnAddress1);
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	691b      	ldr	r3, [r3, #16]
  /* Clear OAR2 register */
  I2Cx->OAR2 = (uint32_t)tmpreg;
  /* Configure I2Cx: Own Address1 and acknowledged address */
  /* Set OA1MODE bit according to I2C_AcknowledgedAddress value */
  /* Set OA1 bits according to I2C_OwnAddress1 value */
  tmpreg = (uint32_t)((uint32_t)I2C_InitStruct->I2C_AcknowledgedAddress | \
 800646c:	4313      	orrs	r3, r2
 800646e:	60fb      	str	r3, [r7, #12]
                      (uint32_t)I2C_InitStruct->I2C_OwnAddress1);
  /* Write to I2Cx OAR1 */
  I2Cx->OAR1 = tmpreg;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	609a      	str	r2, [r3, #8]
  /* Enable Own Address1 acknowledgement */
  I2Cx->OAR1 |= I2C_OAR1_OA1EN;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	2280      	movs	r2, #128	; 0x80
 800647c:	0212      	lsls	r2, r2, #8
 800647e:	431a      	orrs	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx MODE Configuration ---------------------*/
  /* Configure I2Cx: mode */
  /* Set SMBDEN and SMBHEN bits according to I2C_Mode value */
  tmpreg = I2C_InitStruct->I2C_Mode;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	60fb      	str	r3, [r7, #12]
  /* Write to I2Cx CR1 */
  I2Cx->CR1 |= tmpreg;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	431a      	orrs	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx ACK Configuration ----------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	60fb      	str	r3, [r7, #12]
  /* Clear I2Cx CR2 register */
  tmpreg &= CR2_CLEAR_MASK;
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	4b09      	ldr	r3, [pc, #36]	; (80064c4 <I2C_Init+0xcc>)
 80064a0:	4013      	ands	r3, r2
 80064a2:	60fb      	str	r3, [r7, #12]
  /* Configure I2Cx: acknowledgement */
  /* Set NACK bit according to I2C_Ack value */
  tmpreg |= I2C_InitStruct->I2C_Ack;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	60fb      	str	r3, [r7, #12]
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	605a      	str	r2, [r3, #4]
}
 80064b4:	46bd      	mov	sp, r7
 80064b6:	b004      	add	sp, #16
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	46c0      	nop			; (mov r8, r8)
 80064bc:	00cfe0ff 	.word	0x00cfe0ff
 80064c0:	f0ffffff 	.word	0xf0ffffff
 80064c4:	07ff7fff 	.word	0x07ff7fff

080064c8 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	1c0a      	adds	r2, r1, #0
 80064d2:	1cfb      	adds	r3, r7, #3
 80064d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80064d6:	1cfb      	adds	r3, r7, #3
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d006      	beq.n	80064ec <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2201      	movs	r2, #1
 80064e4:	431a      	orrs	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	601a      	str	r2, [r3, #0]
 80064ea:	e007      	b.n	80064fc <I2C_Cmd+0x34>
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2201      	movs	r2, #1
 80064f2:	1c19      	adds	r1, r3, #0
 80064f4:	4391      	bics	r1, r2
 80064f6:	1c0a      	adds	r2, r1, #0
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	601a      	str	r2, [r3, #0]
  }
}
 80064fc:	46bd      	mov	sp, r7
 80064fe:	b002      	add	sp, #8
 8006500:	bd80      	pop	{r7, pc}
 8006502:	46c0      	nop			; (mov r8, r8)

08006504 <I2C_TransferHandling>:
  *            @arg I2C_Generate_Start_Read: Generate Restart for read request.
  *            @arg I2C_Generate_Start_Write: Generate Restart for write request.
  * @retval None
  */
void I2C_TransferHandling(I2C_TypeDef* I2Cx, uint16_t Address, uint8_t Number_Bytes, uint32_t ReloadEndMode, uint32_t StartStopMode)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	607b      	str	r3, [r7, #4]
 800650e:	1c3b      	adds	r3, r7, #0
 8006510:	330a      	adds	r3, #10
 8006512:	8019      	strh	r1, [r3, #0]
 8006514:	1c3b      	adds	r3, r7, #0
 8006516:	3309      	adds	r3, #9
 8006518:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
 800651a:	2300      	movs	r3, #0
 800651c:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_SLAVE_ADDRESS(Address));  
  assert_param(IS_RELOAD_END_MODE(ReloadEndMode));
  assert_param(IS_START_STOP_MODE(StartStopMode));
    
  /* Get the CR2 register value */
  tmpreg = I2Cx->CR2;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	617b      	str	r3, [r7, #20]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	4b0e      	ldr	r3, [pc, #56]	; (8006560 <I2C_TransferHandling+0x5c>)
 8006528:	4013      	ands	r3, r2
 800652a:	617b      	str	r3, [r7, #20]
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_CR2_SADD) | (((uint32_t)Number_Bytes << 16 ) & I2C_CR2_NBYTES) | \
 800652c:	1c3b      	adds	r3, r7, #0
 800652e:	330a      	adds	r3, #10
 8006530:	881b      	ldrh	r3, [r3, #0]
 8006532:	059b      	lsls	r3, r3, #22
 8006534:	0d9a      	lsrs	r2, r3, #22
 8006536:	1c3b      	adds	r3, r7, #0
 8006538:	3309      	adds	r3, #9
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	0419      	lsls	r1, r3, #16
 800653e:	23ff      	movs	r3, #255	; 0xff
 8006540:	041b      	lsls	r3, r3, #16
 8006542:	400b      	ands	r3, r1
 8006544:	431a      	orrs	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	431a      	orrs	r2, r3
 800654a:	6a3b      	ldr	r3, [r7, #32]
 800654c:	4313      	orrs	r3, r2
 800654e:	697a      	ldr	r2, [r7, #20]
 8006550:	4313      	orrs	r3, r2
 8006552:	617b      	str	r3, [r7, #20]
            (uint32_t)ReloadEndMode | (uint32_t)StartStopMode);
  
  /* update CR2 register */
  I2Cx->CR2 = tmpreg;  
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	605a      	str	r2, [r3, #4]
}
 800655a:	46bd      	mov	sp, r7
 800655c:	b006      	add	sp, #24
 800655e:	bd80      	pop	{r7, pc}
 8006560:	fc009800 	.word	0xfc009800

08006564 <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	1c0a      	adds	r2, r1, #0
 800656e:	1cfb      	adds	r3, r7, #3
 8006570:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Write in the DR register the data to be sent */
  I2Cx->TXDR = (uint8_t)Data;
 8006572:	1cfb      	adds	r3, r7, #3
 8006574:	781a      	ldrb	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	629a      	str	r2, [r3, #40]	; 0x28
}
 800657a:	46bd      	mov	sp, r7
 800657c:	b002      	add	sp, #8
 800657e:	bd80      	pop	{r7, pc}

08006580 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->RXDR;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658c:	b2db      	uxtb	r3, r3
}  
 800658e:	1c18      	adds	r0, r3, #0
 8006590:	46bd      	mov	sp, r7
 8006592:	b002      	add	sp, #8
 8006594:	bd80      	pop	{r7, pc}
 8006596:	46c0      	nop			; (mov r8, r8)

08006598 <I2C_GetFlagStatus>:
  *            @arg I2C_FLAG_ALERT: SMBus Alert
  *            @arg I2C_FLAG_BUSY: Bus busy
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80065a2:	2300      	movs	r3, #0
 80065a4:	60bb      	str	r3, [r7, #8]
  FlagStatus bitstatus = RESET;
 80065a6:	1c3b      	adds	r3, r7, #0
 80065a8:	330f      	adds	r3, #15
 80065aa:	2200      	movs	r2, #0
 80065ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));
  
  /* Get the ISR register value */
  tmpreg = I2Cx->ISR;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	699b      	ldr	r3, [r3, #24]
 80065b2:	60bb      	str	r3, [r7, #8]
  
  /* Get flag status */
  tmpreg &= I2C_FLAG;
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	683a      	ldr	r2, [r7, #0]
 80065b8:	4013      	ands	r3, r2
 80065ba:	60bb      	str	r3, [r7, #8]
  
  if(tmpreg != 0)
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d004      	beq.n	80065cc <I2C_GetFlagStatus+0x34>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 80065c2:	1c3b      	adds	r3, r7, #0
 80065c4:	330f      	adds	r3, #15
 80065c6:	2201      	movs	r2, #1
 80065c8:	701a      	strb	r2, [r3, #0]
 80065ca:	e003      	b.n	80065d4 <I2C_GetFlagStatus+0x3c>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 80065cc:	1c3b      	adds	r3, r7, #0
 80065ce:	330f      	adds	r3, #15
 80065d0:	2200      	movs	r2, #0
 80065d2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80065d4:	1c3b      	adds	r3, r7, #0
 80065d6:	330f      	adds	r3, #15
 80065d8:	781b      	ldrb	r3, [r3, #0]
} 
 80065da:	1c18      	adds	r0, r3, #0
 80065dc:	46bd      	mov	sp, r7
 80065de:	b004      	add	sp, #16
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	46c0      	nop			; (mov r8, r8)

080065e4 <I2C_ClearFlag>:
  *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow detection flag
  *            @arg I2C_FLAG_ALERT: SMBus Alert
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{ 
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));

  /* Clear the selected flag */
  I2Cx->ICR = I2C_FLAG;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	683a      	ldr	r2, [r7, #0]
 80065f2:	61da      	str	r2, [r3, #28]
  }
 80065f4:	46bd      	mov	sp, r7
 80065f6:	b002      	add	sp, #8
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	46c0      	nop			; (mov r8, r8)

080065fc <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b086      	sub	sp, #24
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8006606:	2300      	movs	r3, #0
 8006608:	617b      	str	r3, [r7, #20]
 800660a:	2300      	movs	r3, #0
 800660c:	613b      	str	r3, [r7, #16]
 800660e:	2300      	movs	r3, #0
 8006610:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8006612:	2300      	movs	r3, #0
 8006614:	617b      	str	r3, [r7, #20]
 8006616:	e085      	b.n	8006724 <GPIO_Init+0x128>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	2201      	movs	r2, #1
 800661c:	1c10      	adds	r0, r2, #0
 800661e:	4098      	lsls	r0, r3
 8006620:	1c03      	adds	r3, r0, #0
 8006622:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	4013      	ands	r3, r2
 800662c:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	429a      	cmp	r2, r3
 8006634:	d173      	bne.n	800671e <GPIO_Init+0x122>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	791b      	ldrb	r3, [r3, #4]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d003      	beq.n	8006646 <GPIO_Init+0x4a>
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	791b      	ldrb	r3, [r3, #4]
 8006642:	2b02      	cmp	r3, #2
 8006644:	d138      	bne.n	80066b8 <GPIO_Init+0xbc>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	0052      	lsls	r2, r2, #1
 800664e:	2103      	movs	r1, #3
 8006650:	1c08      	adds	r0, r1, #0
 8006652:	4090      	lsls	r0, r2
 8006654:	1c02      	adds	r2, r0, #0
 8006656:	43d2      	mvns	r2, r2
 8006658:	401a      	ands	r2, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	689a      	ldr	r2, [r3, #8]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	795b      	ldrb	r3, [r3, #5]
 8006666:	1c19      	adds	r1, r3, #0
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	005b      	lsls	r3, r3, #1
 800666c:	1c08      	adds	r0, r1, #0
 800666e:	4098      	lsls	r0, r3
 8006670:	1c03      	adds	r3, r0, #0
 8006672:	431a      	orrs	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	889b      	ldrh	r3, [r3, #4]
 800667c:	b29b      	uxth	r3, r3
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	b292      	uxth	r2, r2
 8006682:	2101      	movs	r1, #1
 8006684:	1c08      	adds	r0, r1, #0
 8006686:	4090      	lsls	r0, r2
 8006688:	1c02      	adds	r2, r0, #0
 800668a:	b292      	uxth	r2, r2
 800668c:	43d2      	mvns	r2, r2
 800668e:	b292      	uxth	r2, r2
 8006690:	4013      	ands	r3, r2
 8006692:	b29a      	uxth	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	889b      	ldrh	r3, [r3, #4]
 800669c:	b29a      	uxth	r2, r3
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	799b      	ldrb	r3, [r3, #6]
 80066a2:	1c19      	adds	r1, r3, #0
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	1c08      	adds	r0, r1, #0
 80066aa:	4098      	lsls	r0, r3
 80066ac:	1c03      	adds	r3, r0, #0
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	4313      	orrs	r3, r2
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	809a      	strh	r2, [r3, #4]
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	697a      	ldr	r2, [r7, #20]
 80066be:	0052      	lsls	r2, r2, #1
 80066c0:	2103      	movs	r1, #3
 80066c2:	1c08      	adds	r0, r1, #0
 80066c4:	4090      	lsls	r0, r2
 80066c6:	1c02      	adds	r2, r0, #0
 80066c8:	43d2      	mvns	r2, r2
 80066ca:	401a      	ands	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	791b      	ldrb	r3, [r3, #4]
 80066d8:	1c19      	adds	r1, r3, #0
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	005b      	lsls	r3, r3, #1
 80066de:	1c08      	adds	r0, r1, #0
 80066e0:	4098      	lsls	r0, r3
 80066e2:	1c03      	adds	r3, r0, #0
 80066e4:	431a      	orrs	r2, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	b292      	uxth	r2, r2
 80066f2:	0052      	lsls	r2, r2, #1
 80066f4:	2103      	movs	r1, #3
 80066f6:	1c08      	adds	r0, r1, #0
 80066f8:	4090      	lsls	r0, r2
 80066fa:	1c02      	adds	r2, r0, #0
 80066fc:	43d2      	mvns	r2, r2
 80066fe:	401a      	ands	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	68da      	ldr	r2, [r3, #12]
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	79db      	ldrb	r3, [r3, #7]
 800670c:	1c19      	adds	r1, r3, #0
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	005b      	lsls	r3, r3, #1
 8006712:	1c08      	adds	r0, r1, #0
 8006714:	4098      	lsls	r0, r3
 8006716:	1c03      	adds	r3, r0, #0
 8006718:	431a      	orrs	r2, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	3301      	adds	r3, #1
 8006722:	617b      	str	r3, [r7, #20]
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	2b0f      	cmp	r3, #15
 8006728:	d800      	bhi.n	800672c <GPIO_Init+0x130>
 800672a:	e775      	b.n	8006618 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800672c:	46bd      	mov	sp, r7
 800672e:	b006      	add	sp, #24
 8006730:	bd80      	pop	{r7, pc}
 8006732:	46c0      	nop			; (mov r8, r8)

08006734 <GPIO_WriteBit>:
  *         For STM32F072: (0..15) for GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, (0..10) for GPIOF.
  *         For STM32F031: (0..15) for GPIOA, GPIOB, (13..15) for GPIOC and (0..1, 6..7) for GPIOF.
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	1cbb      	adds	r3, r7, #2
 800673e:	8019      	strh	r1, [r3, #0]
 8006740:	1c7b      	adds	r3, r7, #1
 8006742:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8006744:	1c7b      	adds	r3, r7, #1
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d004      	beq.n	8006756 <GPIO_WriteBit+0x22>
  {
    GPIOx->BSRR = GPIO_Pin;
 800674c:	1cbb      	adds	r3, r7, #2
 800674e:	881a      	ldrh	r2, [r3, #0]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	619a      	str	r2, [r3, #24]
 8006754:	e003      	b.n	800675e <GPIO_WriteBit+0x2a>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	1cba      	adds	r2, r7, #2
 800675a:	8812      	ldrh	r2, [r2, #0]
 800675c:	851a      	strh	r2, [r3, #40]	; 0x28
  }
}
 800675e:	46bd      	mov	sp, r7
 8006760:	b002      	add	sp, #8
 8006762:	bd80      	pop	{r7, pc}

08006764 <GPIO_PinAFConfig>:
  *         for the detailed mapping of the system and peripherals'alternate 
  *         function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8006764:	b590      	push	{r4, r7, lr}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	1cbb      	adds	r3, r7, #2
 800676e:	8019      	strh	r1, [r3, #0]
 8006770:	1c7b      	adds	r3, r7, #1
 8006772:	701a      	strb	r2, [r3, #0]
  uint32_t temp = 0x00;
 8006774:	2300      	movs	r3, #0
 8006776:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8006778:	2300      	movs	r3, #0
 800677a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 800677c:	1c7b      	adds	r3, r7, #1
 800677e:	781a      	ldrb	r2, [r3, #0]
 8006780:	1cbb      	adds	r3, r7, #2
 8006782:	8819      	ldrh	r1, [r3, #0]
 8006784:	2307      	movs	r3, #7
 8006786:	400b      	ands	r3, r1
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	1c11      	adds	r1, r2, #0
 800678c:	4099      	lsls	r1, r3
 800678e:	1c0b      	adds	r3, r1, #0
 8006790:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8006792:	1cbb      	adds	r3, r7, #2
 8006794:	881b      	ldrh	r3, [r3, #0]
 8006796:	08db      	lsrs	r3, r3, #3
 8006798:	b29b      	uxth	r3, r3
 800679a:	1c1a      	adds	r2, r3, #0
 800679c:	1cbb      	adds	r3, r7, #2
 800679e:	881b      	ldrh	r3, [r3, #0]
 80067a0:	08db      	lsrs	r3, r3, #3
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	1c19      	adds	r1, r3, #0
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	3108      	adds	r1, #8
 80067aa:	0089      	lsls	r1, r1, #2
 80067ac:	58cb      	ldr	r3, [r1, r3]
 80067ae:	1cb9      	adds	r1, r7, #2
 80067b0:	8808      	ldrh	r0, [r1, #0]
 80067b2:	2107      	movs	r1, #7
 80067b4:	4001      	ands	r1, r0
 80067b6:	0089      	lsls	r1, r1, #2
 80067b8:	200f      	movs	r0, #15
 80067ba:	1c04      	adds	r4, r0, #0
 80067bc:	408c      	lsls	r4, r1
 80067be:	1c21      	adds	r1, r4, #0
 80067c0:	43c9      	mvns	r1, r1
 80067c2:	4019      	ands	r1, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	3208      	adds	r2, #8
 80067c8:	0092      	lsls	r2, r2, #2
 80067ca:	50d1      	str	r1, [r2, r3]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80067cc:	1cbb      	adds	r3, r7, #2
 80067ce:	881b      	ldrh	r3, [r3, #0]
 80067d0:	08db      	lsrs	r3, r3, #3
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	1c1a      	adds	r2, r3, #0
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	3208      	adds	r2, #8
 80067da:	0092      	lsls	r2, r2, #2
 80067dc:	58d2      	ldr	r2, [r2, r3]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80067e4:	1cbb      	adds	r3, r7, #2
 80067e6:	881b      	ldrh	r3, [r3, #0]
 80067e8:	08db      	lsrs	r3, r3, #3
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	1c1a      	adds	r2, r3, #0
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	3208      	adds	r2, #8
 80067f2:	0092      	lsls	r2, r2, #2
 80067f4:	68b9      	ldr	r1, [r7, #8]
 80067f6:	50d1      	str	r1, [r2, r3]
}
 80067f8:	46bd      	mov	sp, r7
 80067fa:	b005      	add	sp, #20
 80067fc:	bd90      	pop	{r4, r7, pc}
 80067fe:	46c0      	nop			; (mov r8, r8)

08006800 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800680a:	2300      	movs	r3, #0
 800680c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration ----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	60fb      	str	r3, [r7, #12]

  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_MASK;
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	4b17      	ldr	r3, [pc, #92]	; (8006874 <DMA_Init+0x74>)
 8006818:	4013      	ands	r3, r2
 800681a:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	689a      	ldr	r2, [r3, #8]
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	691b      	ldr	r3, [r3, #16]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 800682a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	695b      	ldr	r3, [r3, #20]
 8006830:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	699b      	ldr	r3, [r3, #24]
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8006836:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	69db      	ldr	r3, [r3, #28]
 800683c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8006842:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006848:	4313      	orrs	r3, r2
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	4313      	orrs	r3, r2
 800684e:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	68da      	ldr	r2, [r3, #12]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ---------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ---------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	685a      	ldr	r2, [r3, #4]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	60da      	str	r2, [r3, #12]
}
 800686e:	46bd      	mov	sp, r7
 8006870:	b004      	add	sp, #16
 8006872:	bd80      	pop	{r7, pc}
 8006874:	ffff800f 	.word	0xffff800f

08006878 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	1c0a      	adds	r2, r1, #0
 8006882:	1cfb      	adds	r3, r7, #3
 8006884:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006886:	1cfb      	adds	r3, r7, #3
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d006      	beq.n	800689c <DMA_Cmd+0x24>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR_EN;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2201      	movs	r2, #1
 8006894:	431a      	orrs	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	601a      	str	r2, [r3, #0]
 800689a:	e005      	b.n	80068a8 <DMA_Cmd+0x30>
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	4b03      	ldr	r3, [pc, #12]	; (80068b0 <DMA_Cmd+0x38>)
 80068a2:	401a      	ands	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	601a      	str	r2, [r3, #0]
  }
}
 80068a8:	46bd      	mov	sp, r7
 80068aa:	b002      	add	sp, #8
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	46c0      	nop			; (mov r8, r8)
 80068b0:	0000fffe 	.word	0x0000fffe

080068b4 <DMA_SetCurrDataCounter>:
  *         transfer.
  * @note   This function can only be used when the DMAy_Channelx is disabled.
  * @retval None.
  */
void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	1c0a      	adds	r2, r1, #0
 80068be:	1cbb      	adds	r3, r7, #2
 80068c0:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));

/*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DataNumber;
 80068c2:	1cbb      	adds	r3, r7, #2
 80068c4:	881a      	ldrh	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	605a      	str	r2, [r3, #4]
}
 80068ca:	46bd      	mov	sp, r7
 80068cc:	b002      	add	sp, #8
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <CRS_FrequencyErrorCounterCmd>:
  * @param  NewState: new state of the frequency error counter.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRS_FrequencyErrorCounterCmd(FunctionalState NewState)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	1c02      	adds	r2, r0, #0
 80068d8:	1dfb      	adds	r3, r7, #7
 80068da:	701a      	strb	r2, [r3, #0]
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80068dc:	1dfb      	adds	r3, r7, #7
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d006      	beq.n	80068f2 <CRS_FrequencyErrorCounterCmd+0x22>
  {
     CRS->CR |= CRS_CR_CEN;
 80068e4:	4b07      	ldr	r3, [pc, #28]	; (8006904 <CRS_FrequencyErrorCounterCmd+0x34>)
 80068e6:	4a07      	ldr	r2, [pc, #28]	; (8006904 <CRS_FrequencyErrorCounterCmd+0x34>)
 80068e8:	6812      	ldr	r2, [r2, #0]
 80068ea:	2120      	movs	r1, #32
 80068ec:	430a      	orrs	r2, r1
 80068ee:	601a      	str	r2, [r3, #0]
 80068f0:	e005      	b.n	80068fe <CRS_FrequencyErrorCounterCmd+0x2e>
  }
  else
  {
    CRS->CR &= ~CRS_CR_CEN;
 80068f2:	4b04      	ldr	r3, [pc, #16]	; (8006904 <CRS_FrequencyErrorCounterCmd+0x34>)
 80068f4:	4a03      	ldr	r2, [pc, #12]	; (8006904 <CRS_FrequencyErrorCounterCmd+0x34>)
 80068f6:	6812      	ldr	r2, [r2, #0]
 80068f8:	2120      	movs	r1, #32
 80068fa:	438a      	bics	r2, r1
 80068fc:	601a      	str	r2, [r3, #0]
  }
}
 80068fe:	46bd      	mov	sp, r7
 8006900:	b002      	add	sp, #8
 8006902:	bd80      	pop	{r7, pc}
 8006904:	40006c00 	.word	0x40006c00

08006908 <CRS_AutomaticCalibrationCmd>:
  * @param  NewState: new state of the automatic trimming.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRS_AutomaticCalibrationCmd(FunctionalState NewState)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
 800690e:	1c02      	adds	r2, r0, #0
 8006910:	1dfb      	adds	r3, r7, #7
 8006912:	701a      	strb	r2, [r3, #0]
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006914:	1dfb      	adds	r3, r7, #7
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d006      	beq.n	800692a <CRS_AutomaticCalibrationCmd+0x22>
  {
    CRS->CR |= CRS_CR_AUTOTRIMEN;
 800691c:	4b07      	ldr	r3, [pc, #28]	; (800693c <CRS_AutomaticCalibrationCmd+0x34>)
 800691e:	4a07      	ldr	r2, [pc, #28]	; (800693c <CRS_AutomaticCalibrationCmd+0x34>)
 8006920:	6812      	ldr	r2, [r2, #0]
 8006922:	2140      	movs	r1, #64	; 0x40
 8006924:	430a      	orrs	r2, r1
 8006926:	601a      	str	r2, [r3, #0]
 8006928:	e005      	b.n	8006936 <CRS_AutomaticCalibrationCmd+0x2e>
  }
else
  {
    CRS->CR &= ~CRS_CR_AUTOTRIMEN;
 800692a:	4b04      	ldr	r3, [pc, #16]	; (800693c <CRS_AutomaticCalibrationCmd+0x34>)
 800692c:	4a03      	ldr	r2, [pc, #12]	; (800693c <CRS_AutomaticCalibrationCmd+0x34>)
 800692e:	6812      	ldr	r2, [r2, #0]
 8006930:	2140      	movs	r1, #64	; 0x40
 8006932:	438a      	bics	r2, r1
 8006934:	601a      	str	r2, [r3, #0]
  }
}
 8006936:	46bd      	mov	sp, r7
 8006938:	b002      	add	sp, #8
 800693a:	bd80      	pop	{r7, pc}
 800693c:	40006c00 	.word	0x40006c00

08006940 <CRS_SynchronizationSourceConfig>:
  *            @arg CRS_SYNCSource_LSE:   
  *            @arg CRS_SYNCSource_USB:   
  * @retval None
  */
void CRS_SynchronizationSourceConfig(uint32_t CRS_Source)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_CRS_SYNC_SOURCE(CRS_Source));
  
  /* Clear SYNCSRC[1:0] bits */
  CRS->CFGR &= ~CRS_CFGR_SYNCSRC;
 8006948:	4b07      	ldr	r3, [pc, #28]	; (8006968 <CRS_SynchronizationSourceConfig+0x28>)
 800694a:	4a07      	ldr	r2, [pc, #28]	; (8006968 <CRS_SynchronizationSourceConfig+0x28>)
 800694c:	6851      	ldr	r1, [r2, #4]
 800694e:	4a07      	ldr	r2, [pc, #28]	; (800696c <CRS_SynchronizationSourceConfig+0x2c>)
 8006950:	400a      	ands	r2, r1
 8006952:	605a      	str	r2, [r3, #4]
  
  /* Set the SYNCSRC[1:0] bits according to CRS_Source value */
  CRS->CFGR |= CRS_Source;
 8006954:	4b04      	ldr	r3, [pc, #16]	; (8006968 <CRS_SynchronizationSourceConfig+0x28>)
 8006956:	4a04      	ldr	r2, [pc, #16]	; (8006968 <CRS_SynchronizationSourceConfig+0x28>)
 8006958:	6851      	ldr	r1, [r2, #4]
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	430a      	orrs	r2, r1
 800695e:	605a      	str	r2, [r3, #4]
}
 8006960:	46bd      	mov	sp, r7
 8006962:	b002      	add	sp, #8
 8006964:	bd80      	pop	{r7, pc}
 8006966:	46c0      	nop			; (mov r8, r8)
 8006968:	40006c00 	.word	0x40006c00
 800696c:	cfffffff 	.word	0xcfffffff

08006970 <__libc_init_array>:
 8006970:	b570      	push	{r4, r5, r6, lr}
 8006972:	4b0e      	ldr	r3, [pc, #56]	; (80069ac <__libc_init_array+0x3c>)
 8006974:	4d0e      	ldr	r5, [pc, #56]	; (80069b0 <__libc_init_array+0x40>)
 8006976:	2400      	movs	r4, #0
 8006978:	1aed      	subs	r5, r5, r3
 800697a:	10ad      	asrs	r5, r5, #2
 800697c:	1c1e      	adds	r6, r3, #0
 800697e:	42ac      	cmp	r4, r5
 8006980:	d004      	beq.n	800698c <__libc_init_array+0x1c>
 8006982:	00a3      	lsls	r3, r4, #2
 8006984:	58f3      	ldr	r3, [r6, r3]
 8006986:	4798      	blx	r3
 8006988:	3401      	adds	r4, #1
 800698a:	e7f8      	b.n	800697e <__libc_init_array+0xe>
 800698c:	f000 fd88 	bl	80074a0 <_init>
 8006990:	4b08      	ldr	r3, [pc, #32]	; (80069b4 <__libc_init_array+0x44>)
 8006992:	4d09      	ldr	r5, [pc, #36]	; (80069b8 <__libc_init_array+0x48>)
 8006994:	2400      	movs	r4, #0
 8006996:	1aed      	subs	r5, r5, r3
 8006998:	10ad      	asrs	r5, r5, #2
 800699a:	1c1e      	adds	r6, r3, #0
 800699c:	42ac      	cmp	r4, r5
 800699e:	d004      	beq.n	80069aa <__libc_init_array+0x3a>
 80069a0:	00a3      	lsls	r3, r4, #2
 80069a2:	58f3      	ldr	r3, [r6, r3]
 80069a4:	4798      	blx	r3
 80069a6:	3401      	adds	r4, #1
 80069a8:	e7f8      	b.n	800699c <__libc_init_array+0x2c>
 80069aa:	bd70      	pop	{r4, r5, r6, pc}
 80069ac:	080076d8 	.word	0x080076d8
 80069b0:	080076d8 	.word	0x080076d8
 80069b4:	080076d8 	.word	0x080076d8
 80069b8:	080076dc 	.word	0x080076dc

080069bc <memcpy>:
 80069bc:	b510      	push	{r4, lr}
 80069be:	2300      	movs	r3, #0
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d003      	beq.n	80069cc <memcpy+0x10>
 80069c4:	5ccc      	ldrb	r4, [r1, r3]
 80069c6:	54c4      	strb	r4, [r0, r3]
 80069c8:	3301      	adds	r3, #1
 80069ca:	e7f9      	b.n	80069c0 <memcpy+0x4>
 80069cc:	bd10      	pop	{r4, pc}
	...

080069d0 <siprintf>:
 80069d0:	b40e      	push	{r1, r2, r3}
 80069d2:	b500      	push	{lr}
 80069d4:	b09c      	sub	sp, #112	; 0x70
 80069d6:	ab1d      	add	r3, sp, #116	; 0x74
 80069d8:	cb04      	ldmia	r3!, {r2}
 80069da:	2282      	movs	r2, #130	; 0x82
 80069dc:	a902      	add	r1, sp, #8
 80069de:	0092      	lsls	r2, r2, #2
 80069e0:	818a      	strh	r2, [r1, #12]
 80069e2:	4a0a      	ldr	r2, [pc, #40]	; (8006a0c <siprintf+0x3c>)
 80069e4:	9002      	str	r0, [sp, #8]
 80069e6:	608a      	str	r2, [r1, #8]
 80069e8:	614a      	str	r2, [r1, #20]
 80069ea:	2201      	movs	r2, #1
 80069ec:	4252      	negs	r2, r2
 80069ee:	81ca      	strh	r2, [r1, #14]
 80069f0:	4a07      	ldr	r2, [pc, #28]	; (8006a10 <siprintf+0x40>)
 80069f2:	6108      	str	r0, [r1, #16]
 80069f4:	6810      	ldr	r0, [r2, #0]
 80069f6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80069f8:	9301      	str	r3, [sp, #4]
 80069fa:	f000 f86b 	bl	8006ad4 <_svfiprintf_r>
 80069fe:	9a02      	ldr	r2, [sp, #8]
 8006a00:	2300      	movs	r3, #0
 8006a02:	7013      	strb	r3, [r2, #0]
 8006a04:	b01c      	add	sp, #112	; 0x70
 8006a06:	bc08      	pop	{r3}
 8006a08:	b003      	add	sp, #12
 8006a0a:	4718      	bx	r3
 8006a0c:	7fffffff 	.word	0x7fffffff
 8006a10:	2000011c 	.word	0x2000011c

08006a14 <__ssputs_r>:
 8006a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a16:	688d      	ldr	r5, [r1, #8]
 8006a18:	b085      	sub	sp, #20
 8006a1a:	1c07      	adds	r7, r0, #0
 8006a1c:	1c0c      	adds	r4, r1, #0
 8006a1e:	9203      	str	r2, [sp, #12]
 8006a20:	9301      	str	r3, [sp, #4]
 8006a22:	42ab      	cmp	r3, r5
 8006a24:	d345      	bcc.n	8006ab2 <__ssputs_r+0x9e>
 8006a26:	2290      	movs	r2, #144	; 0x90
 8006a28:	898b      	ldrh	r3, [r1, #12]
 8006a2a:	00d2      	lsls	r2, r2, #3
 8006a2c:	4213      	tst	r3, r2
 8006a2e:	d03d      	beq.n	8006aac <__ssputs_r+0x98>
 8006a30:	6962      	ldr	r2, [r4, #20]
 8006a32:	2603      	movs	r6, #3
 8006a34:	4356      	muls	r6, r2
 8006a36:	6909      	ldr	r1, [r1, #16]
 8006a38:	6820      	ldr	r0, [r4, #0]
 8006a3a:	0ff2      	lsrs	r2, r6, #31
 8006a3c:	1a40      	subs	r0, r0, r1
 8006a3e:	1996      	adds	r6, r2, r6
 8006a40:	9002      	str	r0, [sp, #8]
 8006a42:	1c02      	adds	r2, r0, #0
 8006a44:	9801      	ldr	r0, [sp, #4]
 8006a46:	3201      	adds	r2, #1
 8006a48:	1812      	adds	r2, r2, r0
 8006a4a:	1076      	asrs	r6, r6, #1
 8006a4c:	4296      	cmp	r6, r2
 8006a4e:	d200      	bcs.n	8006a52 <__ssputs_r+0x3e>
 8006a50:	1c16      	adds	r6, r2, #0
 8006a52:	1c38      	adds	r0, r7, #0
 8006a54:	055a      	lsls	r2, r3, #21
 8006a56:	d50f      	bpl.n	8006a78 <__ssputs_r+0x64>
 8006a58:	1c31      	adds	r1, r6, #0
 8006a5a:	f000 fb21 	bl	80070a0 <_malloc_r>
 8006a5e:	1e05      	subs	r5, r0, #0
 8006a60:	d013      	beq.n	8006a8a <__ssputs_r+0x76>
 8006a62:	9a02      	ldr	r2, [sp, #8]
 8006a64:	6921      	ldr	r1, [r4, #16]
 8006a66:	f7ff ffa9 	bl	80069bc <memcpy>
 8006a6a:	89a2      	ldrh	r2, [r4, #12]
 8006a6c:	4b18      	ldr	r3, [pc, #96]	; (8006ad0 <__ssputs_r+0xbc>)
 8006a6e:	4013      	ands	r3, r2
 8006a70:	2280      	movs	r2, #128	; 0x80
 8006a72:	4313      	orrs	r3, r2
 8006a74:	81a3      	strh	r3, [r4, #12]
 8006a76:	e011      	b.n	8006a9c <__ssputs_r+0x88>
 8006a78:	1c32      	adds	r2, r6, #0
 8006a7a:	f000 fb65 	bl	8007148 <_realloc_r>
 8006a7e:	1e05      	subs	r5, r0, #0
 8006a80:	d10c      	bne.n	8006a9c <__ssputs_r+0x88>
 8006a82:	1c38      	adds	r0, r7, #0
 8006a84:	6921      	ldr	r1, [r4, #16]
 8006a86:	f000 fac3 	bl	8007010 <_free_r>
 8006a8a:	230c      	movs	r3, #12
 8006a8c:	603b      	str	r3, [r7, #0]
 8006a8e:	89a3      	ldrh	r3, [r4, #12]
 8006a90:	2240      	movs	r2, #64	; 0x40
 8006a92:	4313      	orrs	r3, r2
 8006a94:	2001      	movs	r0, #1
 8006a96:	81a3      	strh	r3, [r4, #12]
 8006a98:	4240      	negs	r0, r0
 8006a9a:	e017      	b.n	8006acc <__ssputs_r+0xb8>
 8006a9c:	9b02      	ldr	r3, [sp, #8]
 8006a9e:	6125      	str	r5, [r4, #16]
 8006aa0:	18ed      	adds	r5, r5, r3
 8006aa2:	6025      	str	r5, [r4, #0]
 8006aa4:	6166      	str	r6, [r4, #20]
 8006aa6:	9d01      	ldr	r5, [sp, #4]
 8006aa8:	1af6      	subs	r6, r6, r3
 8006aaa:	60a6      	str	r6, [r4, #8]
 8006aac:	9801      	ldr	r0, [sp, #4]
 8006aae:	42a8      	cmp	r0, r5
 8006ab0:	d200      	bcs.n	8006ab4 <__ssputs_r+0xa0>
 8006ab2:	9d01      	ldr	r5, [sp, #4]
 8006ab4:	1c2a      	adds	r2, r5, #0
 8006ab6:	6820      	ldr	r0, [r4, #0]
 8006ab8:	9903      	ldr	r1, [sp, #12]
 8006aba:	f000 fa90 	bl	8006fde <memmove>
 8006abe:	68a2      	ldr	r2, [r4, #8]
 8006ac0:	2000      	movs	r0, #0
 8006ac2:	1b53      	subs	r3, r2, r5
 8006ac4:	60a3      	str	r3, [r4, #8]
 8006ac6:	6823      	ldr	r3, [r4, #0]
 8006ac8:	195d      	adds	r5, r3, r5
 8006aca:	6025      	str	r5, [r4, #0]
 8006acc:	b005      	add	sp, #20
 8006ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ad0:	fffffb7f 	.word	0xfffffb7f

08006ad4 <_svfiprintf_r>:
 8006ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ad6:	b09f      	sub	sp, #124	; 0x7c
 8006ad8:	9003      	str	r0, [sp, #12]
 8006ada:	9305      	str	r3, [sp, #20]
 8006adc:	898b      	ldrh	r3, [r1, #12]
 8006ade:	1c0e      	adds	r6, r1, #0
 8006ae0:	1c17      	adds	r7, r2, #0
 8006ae2:	0619      	lsls	r1, r3, #24
 8006ae4:	d50f      	bpl.n	8006b06 <_svfiprintf_r+0x32>
 8006ae6:	6932      	ldr	r2, [r6, #16]
 8006ae8:	2a00      	cmp	r2, #0
 8006aea:	d10c      	bne.n	8006b06 <_svfiprintf_r+0x32>
 8006aec:	2140      	movs	r1, #64	; 0x40
 8006aee:	f000 fad7 	bl	80070a0 <_malloc_r>
 8006af2:	6030      	str	r0, [r6, #0]
 8006af4:	6130      	str	r0, [r6, #16]
 8006af6:	2800      	cmp	r0, #0
 8006af8:	d103      	bne.n	8006b02 <_svfiprintf_r+0x2e>
 8006afa:	9903      	ldr	r1, [sp, #12]
 8006afc:	230c      	movs	r3, #12
 8006afe:	600b      	str	r3, [r1, #0]
 8006b00:	e0c9      	b.n	8006c96 <_svfiprintf_r+0x1c2>
 8006b02:	2340      	movs	r3, #64	; 0x40
 8006b04:	6173      	str	r3, [r6, #20]
 8006b06:	ad06      	add	r5, sp, #24
 8006b08:	2300      	movs	r3, #0
 8006b0a:	616b      	str	r3, [r5, #20]
 8006b0c:	2320      	movs	r3, #32
 8006b0e:	766b      	strb	r3, [r5, #25]
 8006b10:	2330      	movs	r3, #48	; 0x30
 8006b12:	76ab      	strb	r3, [r5, #26]
 8006b14:	1c3c      	adds	r4, r7, #0
 8006b16:	7823      	ldrb	r3, [r4, #0]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d103      	bne.n	8006b24 <_svfiprintf_r+0x50>
 8006b1c:	1be2      	subs	r2, r4, r7
 8006b1e:	9202      	str	r2, [sp, #8]
 8006b20:	d011      	beq.n	8006b46 <_svfiprintf_r+0x72>
 8006b22:	e003      	b.n	8006b2c <_svfiprintf_r+0x58>
 8006b24:	2b25      	cmp	r3, #37	; 0x25
 8006b26:	d0f9      	beq.n	8006b1c <_svfiprintf_r+0x48>
 8006b28:	3401      	adds	r4, #1
 8006b2a:	e7f4      	b.n	8006b16 <_svfiprintf_r+0x42>
 8006b2c:	9803      	ldr	r0, [sp, #12]
 8006b2e:	1c31      	adds	r1, r6, #0
 8006b30:	1c3a      	adds	r2, r7, #0
 8006b32:	9b02      	ldr	r3, [sp, #8]
 8006b34:	f7ff ff6e 	bl	8006a14 <__ssputs_r>
 8006b38:	3001      	adds	r0, #1
 8006b3a:	d100      	bne.n	8006b3e <_svfiprintf_r+0x6a>
 8006b3c:	e0a6      	b.n	8006c8c <_svfiprintf_r+0x1b8>
 8006b3e:	6969      	ldr	r1, [r5, #20]
 8006b40:	9a02      	ldr	r2, [sp, #8]
 8006b42:	188b      	adds	r3, r1, r2
 8006b44:	616b      	str	r3, [r5, #20]
 8006b46:	7823      	ldrb	r3, [r4, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d100      	bne.n	8006b4e <_svfiprintf_r+0x7a>
 8006b4c:	e09e      	b.n	8006c8c <_svfiprintf_r+0x1b8>
 8006b4e:	2201      	movs	r2, #1
 8006b50:	4252      	negs	r2, r2
 8006b52:	606a      	str	r2, [r5, #4]
 8006b54:	466a      	mov	r2, sp
 8006b56:	2300      	movs	r3, #0
 8006b58:	325b      	adds	r2, #91	; 0x5b
 8006b5a:	3401      	adds	r4, #1
 8006b5c:	602b      	str	r3, [r5, #0]
 8006b5e:	60eb      	str	r3, [r5, #12]
 8006b60:	60ab      	str	r3, [r5, #8]
 8006b62:	7013      	strb	r3, [r2, #0]
 8006b64:	65ab      	str	r3, [r5, #88]	; 0x58
 8006b66:	4f4e      	ldr	r7, [pc, #312]	; (8006ca0 <_svfiprintf_r+0x1cc>)
 8006b68:	7821      	ldrb	r1, [r4, #0]
 8006b6a:	1c38      	adds	r0, r7, #0
 8006b6c:	2205      	movs	r2, #5
 8006b6e:	f000 fa2b 	bl	8006fc8 <memchr>
 8006b72:	2800      	cmp	r0, #0
 8006b74:	d007      	beq.n	8006b86 <_svfiprintf_r+0xb2>
 8006b76:	1bc7      	subs	r7, r0, r7
 8006b78:	682b      	ldr	r3, [r5, #0]
 8006b7a:	2001      	movs	r0, #1
 8006b7c:	40b8      	lsls	r0, r7
 8006b7e:	4318      	orrs	r0, r3
 8006b80:	6028      	str	r0, [r5, #0]
 8006b82:	3401      	adds	r4, #1
 8006b84:	e7ef      	b.n	8006b66 <_svfiprintf_r+0x92>
 8006b86:	682b      	ldr	r3, [r5, #0]
 8006b88:	06d9      	lsls	r1, r3, #27
 8006b8a:	d503      	bpl.n	8006b94 <_svfiprintf_r+0xc0>
 8006b8c:	466a      	mov	r2, sp
 8006b8e:	2120      	movs	r1, #32
 8006b90:	325b      	adds	r2, #91	; 0x5b
 8006b92:	7011      	strb	r1, [r2, #0]
 8006b94:	071a      	lsls	r2, r3, #28
 8006b96:	d503      	bpl.n	8006ba0 <_svfiprintf_r+0xcc>
 8006b98:	466a      	mov	r2, sp
 8006b9a:	212b      	movs	r1, #43	; 0x2b
 8006b9c:	325b      	adds	r2, #91	; 0x5b
 8006b9e:	7011      	strb	r1, [r2, #0]
 8006ba0:	7822      	ldrb	r2, [r4, #0]
 8006ba2:	2a2a      	cmp	r2, #42	; 0x2a
 8006ba4:	d001      	beq.n	8006baa <_svfiprintf_r+0xd6>
 8006ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ba8:	e00e      	b.n	8006bc8 <_svfiprintf_r+0xf4>
 8006baa:	9a05      	ldr	r2, [sp, #20]
 8006bac:	1d11      	adds	r1, r2, #4
 8006bae:	6812      	ldr	r2, [r2, #0]
 8006bb0:	9105      	str	r1, [sp, #20]
 8006bb2:	2a00      	cmp	r2, #0
 8006bb4:	db01      	blt.n	8006bba <_svfiprintf_r+0xe6>
 8006bb6:	9209      	str	r2, [sp, #36]	; 0x24
 8006bb8:	e004      	b.n	8006bc4 <_svfiprintf_r+0xf0>
 8006bba:	4252      	negs	r2, r2
 8006bbc:	60ea      	str	r2, [r5, #12]
 8006bbe:	2202      	movs	r2, #2
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	602b      	str	r3, [r5, #0]
 8006bc4:	3401      	adds	r4, #1
 8006bc6:	e009      	b.n	8006bdc <_svfiprintf_r+0x108>
 8006bc8:	7822      	ldrb	r2, [r4, #0]
 8006bca:	3a30      	subs	r2, #48	; 0x30
 8006bcc:	2a09      	cmp	r2, #9
 8006bce:	d804      	bhi.n	8006bda <_svfiprintf_r+0x106>
 8006bd0:	210a      	movs	r1, #10
 8006bd2:	434b      	muls	r3, r1
 8006bd4:	3401      	adds	r4, #1
 8006bd6:	189b      	adds	r3, r3, r2
 8006bd8:	e7f6      	b.n	8006bc8 <_svfiprintf_r+0xf4>
 8006bda:	9309      	str	r3, [sp, #36]	; 0x24
 8006bdc:	7823      	ldrb	r3, [r4, #0]
 8006bde:	2b2e      	cmp	r3, #46	; 0x2e
 8006be0:	d118      	bne.n	8006c14 <_svfiprintf_r+0x140>
 8006be2:	7863      	ldrb	r3, [r4, #1]
 8006be4:	2b2a      	cmp	r3, #42	; 0x2a
 8006be6:	d109      	bne.n	8006bfc <_svfiprintf_r+0x128>
 8006be8:	9b05      	ldr	r3, [sp, #20]
 8006bea:	3402      	adds	r4, #2
 8006bec:	1d1a      	adds	r2, r3, #4
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	9205      	str	r2, [sp, #20]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	da0d      	bge.n	8006c12 <_svfiprintf_r+0x13e>
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	425b      	negs	r3, r3
 8006bfa:	e00a      	b.n	8006c12 <_svfiprintf_r+0x13e>
 8006bfc:	3401      	adds	r4, #1
 8006bfe:	2300      	movs	r3, #0
 8006c00:	7822      	ldrb	r2, [r4, #0]
 8006c02:	3a30      	subs	r2, #48	; 0x30
 8006c04:	2a09      	cmp	r2, #9
 8006c06:	d804      	bhi.n	8006c12 <_svfiprintf_r+0x13e>
 8006c08:	210a      	movs	r1, #10
 8006c0a:	434b      	muls	r3, r1
 8006c0c:	3401      	adds	r4, #1
 8006c0e:	189b      	adds	r3, r3, r2
 8006c10:	e7f6      	b.n	8006c00 <_svfiprintf_r+0x12c>
 8006c12:	9307      	str	r3, [sp, #28]
 8006c14:	4f23      	ldr	r7, [pc, #140]	; (8006ca4 <_svfiprintf_r+0x1d0>)
 8006c16:	7821      	ldrb	r1, [r4, #0]
 8006c18:	1c38      	adds	r0, r7, #0
 8006c1a:	2203      	movs	r2, #3
 8006c1c:	f000 f9d4 	bl	8006fc8 <memchr>
 8006c20:	2800      	cmp	r0, #0
 8006c22:	d006      	beq.n	8006c32 <_svfiprintf_r+0x15e>
 8006c24:	1bc7      	subs	r7, r0, r7
 8006c26:	682b      	ldr	r3, [r5, #0]
 8006c28:	2040      	movs	r0, #64	; 0x40
 8006c2a:	40b8      	lsls	r0, r7
 8006c2c:	4318      	orrs	r0, r3
 8006c2e:	6028      	str	r0, [r5, #0]
 8006c30:	3401      	adds	r4, #1
 8006c32:	7821      	ldrb	r1, [r4, #0]
 8006c34:	481c      	ldr	r0, [pc, #112]	; (8006ca8 <_svfiprintf_r+0x1d4>)
 8006c36:	2206      	movs	r2, #6
 8006c38:	1c67      	adds	r7, r4, #1
 8006c3a:	7629      	strb	r1, [r5, #24]
 8006c3c:	f000 f9c4 	bl	8006fc8 <memchr>
 8006c40:	2800      	cmp	r0, #0
 8006c42:	d012      	beq.n	8006c6a <_svfiprintf_r+0x196>
 8006c44:	4b19      	ldr	r3, [pc, #100]	; (8006cac <_svfiprintf_r+0x1d8>)
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d106      	bne.n	8006c58 <_svfiprintf_r+0x184>
 8006c4a:	9b05      	ldr	r3, [sp, #20]
 8006c4c:	2207      	movs	r2, #7
 8006c4e:	3307      	adds	r3, #7
 8006c50:	4393      	bics	r3, r2
 8006c52:	3308      	adds	r3, #8
 8006c54:	9305      	str	r3, [sp, #20]
 8006c56:	e014      	b.n	8006c82 <_svfiprintf_r+0x1ae>
 8006c58:	ab05      	add	r3, sp, #20
 8006c5a:	9300      	str	r3, [sp, #0]
 8006c5c:	9803      	ldr	r0, [sp, #12]
 8006c5e:	1c29      	adds	r1, r5, #0
 8006c60:	1c32      	adds	r2, r6, #0
 8006c62:	4b13      	ldr	r3, [pc, #76]	; (8006cb0 <_svfiprintf_r+0x1dc>)
 8006c64:	e000      	b.n	8006c68 <_svfiprintf_r+0x194>
 8006c66:	bf00      	nop
 8006c68:	e007      	b.n	8006c7a <_svfiprintf_r+0x1a6>
 8006c6a:	ab05      	add	r3, sp, #20
 8006c6c:	9300      	str	r3, [sp, #0]
 8006c6e:	9803      	ldr	r0, [sp, #12]
 8006c70:	1c29      	adds	r1, r5, #0
 8006c72:	1c32      	adds	r2, r6, #0
 8006c74:	4b0e      	ldr	r3, [pc, #56]	; (8006cb0 <_svfiprintf_r+0x1dc>)
 8006c76:	f000 f891 	bl	8006d9c <_printf_i>
 8006c7a:	9004      	str	r0, [sp, #16]
 8006c7c:	9904      	ldr	r1, [sp, #16]
 8006c7e:	3101      	adds	r1, #1
 8006c80:	d004      	beq.n	8006c8c <_svfiprintf_r+0x1b8>
 8006c82:	696a      	ldr	r2, [r5, #20]
 8006c84:	9904      	ldr	r1, [sp, #16]
 8006c86:	1853      	adds	r3, r2, r1
 8006c88:	616b      	str	r3, [r5, #20]
 8006c8a:	e743      	b.n	8006b14 <_svfiprintf_r+0x40>
 8006c8c:	89b3      	ldrh	r3, [r6, #12]
 8006c8e:	065a      	lsls	r2, r3, #25
 8006c90:	d401      	bmi.n	8006c96 <_svfiprintf_r+0x1c2>
 8006c92:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006c94:	e001      	b.n	8006c9a <_svfiprintf_r+0x1c6>
 8006c96:	2001      	movs	r0, #1
 8006c98:	4240      	negs	r0, r0
 8006c9a:	b01f      	add	sp, #124	; 0x7c
 8006c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c9e:	46c0      	nop			; (mov r8, r8)
 8006ca0:	0800769c 	.word	0x0800769c
 8006ca4:	080076a2 	.word	0x080076a2
 8006ca8:	080076a6 	.word	0x080076a6
 8006cac:	00000000 	.word	0x00000000
 8006cb0:	08006a15 	.word	0x08006a15

08006cb4 <_printf_common>:
 8006cb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cb6:	1c15      	adds	r5, r2, #0
 8006cb8:	9301      	str	r3, [sp, #4]
 8006cba:	690a      	ldr	r2, [r1, #16]
 8006cbc:	688b      	ldr	r3, [r1, #8]
 8006cbe:	1c06      	adds	r6, r0, #0
 8006cc0:	1c0c      	adds	r4, r1, #0
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	da00      	bge.n	8006cc8 <_printf_common+0x14>
 8006cc6:	1c13      	adds	r3, r2, #0
 8006cc8:	1c22      	adds	r2, r4, #0
 8006cca:	602b      	str	r3, [r5, #0]
 8006ccc:	3243      	adds	r2, #67	; 0x43
 8006cce:	7812      	ldrb	r2, [r2, #0]
 8006cd0:	2a00      	cmp	r2, #0
 8006cd2:	d001      	beq.n	8006cd8 <_printf_common+0x24>
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	602b      	str	r3, [r5, #0]
 8006cd8:	6820      	ldr	r0, [r4, #0]
 8006cda:	0680      	lsls	r0, r0, #26
 8006cdc:	d502      	bpl.n	8006ce4 <_printf_common+0x30>
 8006cde:	682b      	ldr	r3, [r5, #0]
 8006ce0:	3302      	adds	r3, #2
 8006ce2:	602b      	str	r3, [r5, #0]
 8006ce4:	6821      	ldr	r1, [r4, #0]
 8006ce6:	2706      	movs	r7, #6
 8006ce8:	400f      	ands	r7, r1
 8006cea:	d01f      	beq.n	8006d2c <_printf_common+0x78>
 8006cec:	1c23      	adds	r3, r4, #0
 8006cee:	3343      	adds	r3, #67	; 0x43
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	1e5a      	subs	r2, r3, #1
 8006cf4:	4193      	sbcs	r3, r2
 8006cf6:	6822      	ldr	r2, [r4, #0]
 8006cf8:	0692      	lsls	r2, r2, #26
 8006cfa:	d51f      	bpl.n	8006d3c <_printf_common+0x88>
 8006cfc:	18e1      	adds	r1, r4, r3
 8006cfe:	3140      	adds	r1, #64	; 0x40
 8006d00:	2030      	movs	r0, #48	; 0x30
 8006d02:	70c8      	strb	r0, [r1, #3]
 8006d04:	1c21      	adds	r1, r4, #0
 8006d06:	1c5a      	adds	r2, r3, #1
 8006d08:	3145      	adds	r1, #69	; 0x45
 8006d0a:	7809      	ldrb	r1, [r1, #0]
 8006d0c:	18a2      	adds	r2, r4, r2
 8006d0e:	3240      	adds	r2, #64	; 0x40
 8006d10:	3302      	adds	r3, #2
 8006d12:	70d1      	strb	r1, [r2, #3]
 8006d14:	e012      	b.n	8006d3c <_printf_common+0x88>
 8006d16:	1c22      	adds	r2, r4, #0
 8006d18:	1c30      	adds	r0, r6, #0
 8006d1a:	9901      	ldr	r1, [sp, #4]
 8006d1c:	3219      	adds	r2, #25
 8006d1e:	2301      	movs	r3, #1
 8006d20:	9f08      	ldr	r7, [sp, #32]
 8006d22:	47b8      	blx	r7
 8006d24:	3001      	adds	r0, #1
 8006d26:	d011      	beq.n	8006d4c <_printf_common+0x98>
 8006d28:	9f00      	ldr	r7, [sp, #0]
 8006d2a:	3701      	adds	r7, #1
 8006d2c:	9700      	str	r7, [sp, #0]
 8006d2e:	68e0      	ldr	r0, [r4, #12]
 8006d30:	6829      	ldr	r1, [r5, #0]
 8006d32:	9f00      	ldr	r7, [sp, #0]
 8006d34:	1a43      	subs	r3, r0, r1
 8006d36:	429f      	cmp	r7, r3
 8006d38:	dbed      	blt.n	8006d16 <_printf_common+0x62>
 8006d3a:	e7d7      	b.n	8006cec <_printf_common+0x38>
 8006d3c:	1c22      	adds	r2, r4, #0
 8006d3e:	1c30      	adds	r0, r6, #0
 8006d40:	9901      	ldr	r1, [sp, #4]
 8006d42:	3243      	adds	r2, #67	; 0x43
 8006d44:	9f08      	ldr	r7, [sp, #32]
 8006d46:	47b8      	blx	r7
 8006d48:	3001      	adds	r0, #1
 8006d4a:	d102      	bne.n	8006d52 <_printf_common+0x9e>
 8006d4c:	2001      	movs	r0, #1
 8006d4e:	4240      	negs	r0, r0
 8006d50:	e023      	b.n	8006d9a <_printf_common+0xe6>
 8006d52:	6820      	ldr	r0, [r4, #0]
 8006d54:	2106      	movs	r1, #6
 8006d56:	682b      	ldr	r3, [r5, #0]
 8006d58:	68e2      	ldr	r2, [r4, #12]
 8006d5a:	4001      	ands	r1, r0
 8006d5c:	2500      	movs	r5, #0
 8006d5e:	2904      	cmp	r1, #4
 8006d60:	d103      	bne.n	8006d6a <_printf_common+0xb6>
 8006d62:	1ad5      	subs	r5, r2, r3
 8006d64:	43eb      	mvns	r3, r5
 8006d66:	17db      	asrs	r3, r3, #31
 8006d68:	401d      	ands	r5, r3
 8006d6a:	68a2      	ldr	r2, [r4, #8]
 8006d6c:	6923      	ldr	r3, [r4, #16]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	dd01      	ble.n	8006d76 <_printf_common+0xc2>
 8006d72:	1ad3      	subs	r3, r2, r3
 8006d74:	18ed      	adds	r5, r5, r3
 8006d76:	2700      	movs	r7, #0
 8006d78:	9700      	str	r7, [sp, #0]
 8006d7a:	9f00      	ldr	r7, [sp, #0]
 8006d7c:	42af      	cmp	r7, r5
 8006d7e:	da0b      	bge.n	8006d98 <_printf_common+0xe4>
 8006d80:	1c22      	adds	r2, r4, #0
 8006d82:	1c30      	adds	r0, r6, #0
 8006d84:	9901      	ldr	r1, [sp, #4]
 8006d86:	321a      	adds	r2, #26
 8006d88:	2301      	movs	r3, #1
 8006d8a:	9f08      	ldr	r7, [sp, #32]
 8006d8c:	47b8      	blx	r7
 8006d8e:	3001      	adds	r0, #1
 8006d90:	d0dc      	beq.n	8006d4c <_printf_common+0x98>
 8006d92:	9f00      	ldr	r7, [sp, #0]
 8006d94:	3701      	adds	r7, #1
 8006d96:	e7ef      	b.n	8006d78 <_printf_common+0xc4>
 8006d98:	2000      	movs	r0, #0
 8006d9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08006d9c <_printf_i>:
 8006d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d9e:	1c0d      	adds	r5, r1, #0
 8006da0:	b08b      	sub	sp, #44	; 0x2c
 8006da2:	3543      	adds	r5, #67	; 0x43
 8006da4:	9206      	str	r2, [sp, #24]
 8006da6:	9005      	str	r0, [sp, #20]
 8006da8:	9307      	str	r3, [sp, #28]
 8006daa:	9504      	str	r5, [sp, #16]
 8006dac:	7e0b      	ldrb	r3, [r1, #24]
 8006dae:	1c0c      	adds	r4, r1, #0
 8006db0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006db2:	2b6e      	cmp	r3, #110	; 0x6e
 8006db4:	d100      	bne.n	8006db8 <_printf_i+0x1c>
 8006db6:	e0a7      	b.n	8006f08 <_printf_i+0x16c>
 8006db8:	d811      	bhi.n	8006dde <_printf_i+0x42>
 8006dba:	2b63      	cmp	r3, #99	; 0x63
 8006dbc:	d022      	beq.n	8006e04 <_printf_i+0x68>
 8006dbe:	d809      	bhi.n	8006dd4 <_printf_i+0x38>
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d100      	bne.n	8006dc6 <_printf_i+0x2a>
 8006dc4:	e0b0      	b.n	8006f28 <_printf_i+0x18c>
 8006dc6:	2b58      	cmp	r3, #88	; 0x58
 8006dc8:	d000      	beq.n	8006dcc <_printf_i+0x30>
 8006dca:	e0c0      	b.n	8006f4e <_printf_i+0x1b2>
 8006dcc:	3145      	adds	r1, #69	; 0x45
 8006dce:	700b      	strb	r3, [r1, #0]
 8006dd0:	4d7b      	ldr	r5, [pc, #492]	; (8006fc0 <_printf_i+0x224>)
 8006dd2:	e04e      	b.n	8006e72 <_printf_i+0xd6>
 8006dd4:	2b64      	cmp	r3, #100	; 0x64
 8006dd6:	d01c      	beq.n	8006e12 <_printf_i+0x76>
 8006dd8:	2b69      	cmp	r3, #105	; 0x69
 8006dda:	d01a      	beq.n	8006e12 <_printf_i+0x76>
 8006ddc:	e0b7      	b.n	8006f4e <_printf_i+0x1b2>
 8006dde:	2b73      	cmp	r3, #115	; 0x73
 8006de0:	d100      	bne.n	8006de4 <_printf_i+0x48>
 8006de2:	e0a5      	b.n	8006f30 <_printf_i+0x194>
 8006de4:	d809      	bhi.n	8006dfa <_printf_i+0x5e>
 8006de6:	2b6f      	cmp	r3, #111	; 0x6f
 8006de8:	d029      	beq.n	8006e3e <_printf_i+0xa2>
 8006dea:	2b70      	cmp	r3, #112	; 0x70
 8006dec:	d000      	beq.n	8006df0 <_printf_i+0x54>
 8006dee:	e0ae      	b.n	8006f4e <_printf_i+0x1b2>
 8006df0:	680e      	ldr	r6, [r1, #0]
 8006df2:	2320      	movs	r3, #32
 8006df4:	4333      	orrs	r3, r6
 8006df6:	600b      	str	r3, [r1, #0]
 8006df8:	e036      	b.n	8006e68 <_printf_i+0xcc>
 8006dfa:	2b75      	cmp	r3, #117	; 0x75
 8006dfc:	d01f      	beq.n	8006e3e <_printf_i+0xa2>
 8006dfe:	2b78      	cmp	r3, #120	; 0x78
 8006e00:	d032      	beq.n	8006e68 <_printf_i+0xcc>
 8006e02:	e0a4      	b.n	8006f4e <_printf_i+0x1b2>
 8006e04:	6813      	ldr	r3, [r2, #0]
 8006e06:	1c0d      	adds	r5, r1, #0
 8006e08:	1d19      	adds	r1, r3, #4
 8006e0a:	3542      	adds	r5, #66	; 0x42
 8006e0c:	6011      	str	r1, [r2, #0]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	e09f      	b.n	8006f52 <_printf_i+0x1b6>
 8006e12:	6821      	ldr	r1, [r4, #0]
 8006e14:	6813      	ldr	r3, [r2, #0]
 8006e16:	060e      	lsls	r6, r1, #24
 8006e18:	d503      	bpl.n	8006e22 <_printf_i+0x86>
 8006e1a:	1d19      	adds	r1, r3, #4
 8006e1c:	6011      	str	r1, [r2, #0]
 8006e1e:	681e      	ldr	r6, [r3, #0]
 8006e20:	e005      	b.n	8006e2e <_printf_i+0x92>
 8006e22:	0648      	lsls	r0, r1, #25
 8006e24:	d5f9      	bpl.n	8006e1a <_printf_i+0x7e>
 8006e26:	1d19      	adds	r1, r3, #4
 8006e28:	6011      	str	r1, [r2, #0]
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	5e5e      	ldrsh	r6, [r3, r1]
 8006e2e:	4b64      	ldr	r3, [pc, #400]	; (8006fc0 <_printf_i+0x224>)
 8006e30:	2e00      	cmp	r6, #0
 8006e32:	da3b      	bge.n	8006eac <_printf_i+0x110>
 8006e34:	9d04      	ldr	r5, [sp, #16]
 8006e36:	222d      	movs	r2, #45	; 0x2d
 8006e38:	4276      	negs	r6, r6
 8006e3a:	702a      	strb	r2, [r5, #0]
 8006e3c:	e036      	b.n	8006eac <_printf_i+0x110>
 8006e3e:	6821      	ldr	r1, [r4, #0]
 8006e40:	6813      	ldr	r3, [r2, #0]
 8006e42:	060e      	lsls	r6, r1, #24
 8006e44:	d503      	bpl.n	8006e4e <_printf_i+0xb2>
 8006e46:	1d19      	adds	r1, r3, #4
 8006e48:	6011      	str	r1, [r2, #0]
 8006e4a:	681e      	ldr	r6, [r3, #0]
 8006e4c:	e004      	b.n	8006e58 <_printf_i+0xbc>
 8006e4e:	0648      	lsls	r0, r1, #25
 8006e50:	d5f9      	bpl.n	8006e46 <_printf_i+0xaa>
 8006e52:	1d19      	adds	r1, r3, #4
 8006e54:	881e      	ldrh	r6, [r3, #0]
 8006e56:	6011      	str	r1, [r2, #0]
 8006e58:	4b59      	ldr	r3, [pc, #356]	; (8006fc0 <_printf_i+0x224>)
 8006e5a:	7e22      	ldrb	r2, [r4, #24]
 8006e5c:	9303      	str	r3, [sp, #12]
 8006e5e:	2708      	movs	r7, #8
 8006e60:	2a6f      	cmp	r2, #111	; 0x6f
 8006e62:	d01e      	beq.n	8006ea2 <_printf_i+0x106>
 8006e64:	270a      	movs	r7, #10
 8006e66:	e01c      	b.n	8006ea2 <_printf_i+0x106>
 8006e68:	1c23      	adds	r3, r4, #0
 8006e6a:	2178      	movs	r1, #120	; 0x78
 8006e6c:	3345      	adds	r3, #69	; 0x45
 8006e6e:	4d55      	ldr	r5, [pc, #340]	; (8006fc4 <_printf_i+0x228>)
 8006e70:	7019      	strb	r1, [r3, #0]
 8006e72:	6811      	ldr	r1, [r2, #0]
 8006e74:	6823      	ldr	r3, [r4, #0]
 8006e76:	1d08      	adds	r0, r1, #4
 8006e78:	9503      	str	r5, [sp, #12]
 8006e7a:	6010      	str	r0, [r2, #0]
 8006e7c:	061e      	lsls	r6, r3, #24
 8006e7e:	d501      	bpl.n	8006e84 <_printf_i+0xe8>
 8006e80:	680e      	ldr	r6, [r1, #0]
 8006e82:	e002      	b.n	8006e8a <_printf_i+0xee>
 8006e84:	0658      	lsls	r0, r3, #25
 8006e86:	d5fb      	bpl.n	8006e80 <_printf_i+0xe4>
 8006e88:	880e      	ldrh	r6, [r1, #0]
 8006e8a:	07d9      	lsls	r1, r3, #31
 8006e8c:	d502      	bpl.n	8006e94 <_printf_i+0xf8>
 8006e8e:	2220      	movs	r2, #32
 8006e90:	4313      	orrs	r3, r2
 8006e92:	6023      	str	r3, [r4, #0]
 8006e94:	2710      	movs	r7, #16
 8006e96:	2e00      	cmp	r6, #0
 8006e98:	d103      	bne.n	8006ea2 <_printf_i+0x106>
 8006e9a:	6822      	ldr	r2, [r4, #0]
 8006e9c:	2320      	movs	r3, #32
 8006e9e:	439a      	bics	r2, r3
 8006ea0:	6022      	str	r2, [r4, #0]
 8006ea2:	1c23      	adds	r3, r4, #0
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	3343      	adds	r3, #67	; 0x43
 8006ea8:	701a      	strb	r2, [r3, #0]
 8006eaa:	e001      	b.n	8006eb0 <_printf_i+0x114>
 8006eac:	9303      	str	r3, [sp, #12]
 8006eae:	270a      	movs	r7, #10
 8006eb0:	6863      	ldr	r3, [r4, #4]
 8006eb2:	60a3      	str	r3, [r4, #8]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	db03      	blt.n	8006ec0 <_printf_i+0x124>
 8006eb8:	6825      	ldr	r5, [r4, #0]
 8006eba:	2204      	movs	r2, #4
 8006ebc:	4395      	bics	r5, r2
 8006ebe:	6025      	str	r5, [r4, #0]
 8006ec0:	2e00      	cmp	r6, #0
 8006ec2:	d102      	bne.n	8006eca <_printf_i+0x12e>
 8006ec4:	9d04      	ldr	r5, [sp, #16]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d00e      	beq.n	8006ee8 <_printf_i+0x14c>
 8006eca:	9d04      	ldr	r5, [sp, #16]
 8006ecc:	1c30      	adds	r0, r6, #0
 8006ece:	1c39      	adds	r1, r7, #0
 8006ed0:	f7f9 f95e 	bl	8000190 <__aeabi_uidivmod>
 8006ed4:	9803      	ldr	r0, [sp, #12]
 8006ed6:	3d01      	subs	r5, #1
 8006ed8:	5c43      	ldrb	r3, [r0, r1]
 8006eda:	1c30      	adds	r0, r6, #0
 8006edc:	702b      	strb	r3, [r5, #0]
 8006ede:	1c39      	adds	r1, r7, #0
 8006ee0:	f7f9 f912 	bl	8000108 <__aeabi_uidiv>
 8006ee4:	1e06      	subs	r6, r0, #0
 8006ee6:	d1f1      	bne.n	8006ecc <_printf_i+0x130>
 8006ee8:	2f08      	cmp	r7, #8
 8006eea:	d109      	bne.n	8006f00 <_printf_i+0x164>
 8006eec:	6821      	ldr	r1, [r4, #0]
 8006eee:	07c9      	lsls	r1, r1, #31
 8006ef0:	d506      	bpl.n	8006f00 <_printf_i+0x164>
 8006ef2:	6862      	ldr	r2, [r4, #4]
 8006ef4:	6923      	ldr	r3, [r4, #16]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	dc02      	bgt.n	8006f00 <_printf_i+0x164>
 8006efa:	3d01      	subs	r5, #1
 8006efc:	2330      	movs	r3, #48	; 0x30
 8006efe:	702b      	strb	r3, [r5, #0]
 8006f00:	9e04      	ldr	r6, [sp, #16]
 8006f02:	1b73      	subs	r3, r6, r5
 8006f04:	6123      	str	r3, [r4, #16]
 8006f06:	e02a      	b.n	8006f5e <_printf_i+0x1c2>
 8006f08:	6808      	ldr	r0, [r1, #0]
 8006f0a:	6813      	ldr	r3, [r2, #0]
 8006f0c:	6949      	ldr	r1, [r1, #20]
 8006f0e:	0605      	lsls	r5, r0, #24
 8006f10:	d504      	bpl.n	8006f1c <_printf_i+0x180>
 8006f12:	1d18      	adds	r0, r3, #4
 8006f14:	6010      	str	r0, [r2, #0]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	6019      	str	r1, [r3, #0]
 8006f1a:	e005      	b.n	8006f28 <_printf_i+0x18c>
 8006f1c:	0646      	lsls	r6, r0, #25
 8006f1e:	d5f8      	bpl.n	8006f12 <_printf_i+0x176>
 8006f20:	1d18      	adds	r0, r3, #4
 8006f22:	6010      	str	r0, [r2, #0]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	8019      	strh	r1, [r3, #0]
 8006f28:	2300      	movs	r3, #0
 8006f2a:	6123      	str	r3, [r4, #16]
 8006f2c:	9d04      	ldr	r5, [sp, #16]
 8006f2e:	e016      	b.n	8006f5e <_printf_i+0x1c2>
 8006f30:	6813      	ldr	r3, [r2, #0]
 8006f32:	1d19      	adds	r1, r3, #4
 8006f34:	6011      	str	r1, [r2, #0]
 8006f36:	681d      	ldr	r5, [r3, #0]
 8006f38:	1c28      	adds	r0, r5, #0
 8006f3a:	f000 f93d 	bl	80071b8 <strlen>
 8006f3e:	6863      	ldr	r3, [r4, #4]
 8006f40:	6120      	str	r0, [r4, #16]
 8006f42:	4298      	cmp	r0, r3
 8006f44:	d900      	bls.n	8006f48 <_printf_i+0x1ac>
 8006f46:	6123      	str	r3, [r4, #16]
 8006f48:	6920      	ldr	r0, [r4, #16]
 8006f4a:	6060      	str	r0, [r4, #4]
 8006f4c:	e004      	b.n	8006f58 <_printf_i+0x1bc>
 8006f4e:	1c25      	adds	r5, r4, #0
 8006f50:	3542      	adds	r5, #66	; 0x42
 8006f52:	702b      	strb	r3, [r5, #0]
 8006f54:	2301      	movs	r3, #1
 8006f56:	6123      	str	r3, [r4, #16]
 8006f58:	9e04      	ldr	r6, [sp, #16]
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	7033      	strb	r3, [r6, #0]
 8006f5e:	9e07      	ldr	r6, [sp, #28]
 8006f60:	9805      	ldr	r0, [sp, #20]
 8006f62:	9600      	str	r6, [sp, #0]
 8006f64:	1c21      	adds	r1, r4, #0
 8006f66:	aa09      	add	r2, sp, #36	; 0x24
 8006f68:	9b06      	ldr	r3, [sp, #24]
 8006f6a:	f7ff fea3 	bl	8006cb4 <_printf_common>
 8006f6e:	3001      	adds	r0, #1
 8006f70:	d102      	bne.n	8006f78 <_printf_i+0x1dc>
 8006f72:	2001      	movs	r0, #1
 8006f74:	4240      	negs	r0, r0
 8006f76:	e021      	b.n	8006fbc <_printf_i+0x220>
 8006f78:	1c2a      	adds	r2, r5, #0
 8006f7a:	9805      	ldr	r0, [sp, #20]
 8006f7c:	9906      	ldr	r1, [sp, #24]
 8006f7e:	6923      	ldr	r3, [r4, #16]
 8006f80:	9d07      	ldr	r5, [sp, #28]
 8006f82:	47a8      	blx	r5
 8006f84:	3001      	adds	r0, #1
 8006f86:	d0f4      	beq.n	8006f72 <_printf_i+0x1d6>
 8006f88:	6826      	ldr	r6, [r4, #0]
 8006f8a:	07b6      	lsls	r6, r6, #30
 8006f8c:	d405      	bmi.n	8006f9a <_printf_i+0x1fe>
 8006f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f90:	68e0      	ldr	r0, [r4, #12]
 8006f92:	4298      	cmp	r0, r3
 8006f94:	da12      	bge.n	8006fbc <_printf_i+0x220>
 8006f96:	1c18      	adds	r0, r3, #0
 8006f98:	e010      	b.n	8006fbc <_printf_i+0x220>
 8006f9a:	2500      	movs	r5, #0
 8006f9c:	68e0      	ldr	r0, [r4, #12]
 8006f9e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006fa0:	1a43      	subs	r3, r0, r1
 8006fa2:	429d      	cmp	r5, r3
 8006fa4:	daf3      	bge.n	8006f8e <_printf_i+0x1f2>
 8006fa6:	1c22      	adds	r2, r4, #0
 8006fa8:	9805      	ldr	r0, [sp, #20]
 8006faa:	9906      	ldr	r1, [sp, #24]
 8006fac:	3219      	adds	r2, #25
 8006fae:	2301      	movs	r3, #1
 8006fb0:	9e07      	ldr	r6, [sp, #28]
 8006fb2:	47b0      	blx	r6
 8006fb4:	3001      	adds	r0, #1
 8006fb6:	d0dc      	beq.n	8006f72 <_printf_i+0x1d6>
 8006fb8:	3501      	adds	r5, #1
 8006fba:	e7ef      	b.n	8006f9c <_printf_i+0x200>
 8006fbc:	b00b      	add	sp, #44	; 0x2c
 8006fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fc0:	080076ad 	.word	0x080076ad
 8006fc4:	080076be 	.word	0x080076be

08006fc8 <memchr>:
 8006fc8:	b2c9      	uxtb	r1, r1
 8006fca:	1882      	adds	r2, r0, r2
 8006fcc:	4290      	cmp	r0, r2
 8006fce:	d004      	beq.n	8006fda <memchr+0x12>
 8006fd0:	7803      	ldrb	r3, [r0, #0]
 8006fd2:	428b      	cmp	r3, r1
 8006fd4:	d002      	beq.n	8006fdc <memchr+0x14>
 8006fd6:	3001      	adds	r0, #1
 8006fd8:	e7f8      	b.n	8006fcc <memchr+0x4>
 8006fda:	2000      	movs	r0, #0
 8006fdc:	4770      	bx	lr

08006fde <memmove>:
 8006fde:	b570      	push	{r4, r5, r6, lr}
 8006fe0:	4281      	cmp	r1, r0
 8006fe2:	d301      	bcc.n	8006fe8 <memmove+0xa>
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	e00c      	b.n	8007002 <memmove+0x24>
 8006fe8:	188c      	adds	r4, r1, r2
 8006fea:	42a0      	cmp	r0, r4
 8006fec:	d2fa      	bcs.n	8006fe4 <memmove+0x6>
 8006fee:	1885      	adds	r5, r0, r2
 8006ff0:	1c13      	adds	r3, r2, #0
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	d30b      	bcc.n	800700e <memmove+0x30>
 8006ff6:	4251      	negs	r1, r2
 8006ff8:	1866      	adds	r6, r4, r1
 8006ffa:	5cf6      	ldrb	r6, [r6, r3]
 8006ffc:	1869      	adds	r1, r5, r1
 8006ffe:	54ce      	strb	r6, [r1, r3]
 8007000:	e7f7      	b.n	8006ff2 <memmove+0x14>
 8007002:	4293      	cmp	r3, r2
 8007004:	d003      	beq.n	800700e <memmove+0x30>
 8007006:	5ccc      	ldrb	r4, [r1, r3]
 8007008:	54c4      	strb	r4, [r0, r3]
 800700a:	3301      	adds	r3, #1
 800700c:	e7f9      	b.n	8007002 <memmove+0x24>
 800700e:	bd70      	pop	{r4, r5, r6, pc}

08007010 <_free_r>:
 8007010:	b530      	push	{r4, r5, lr}
 8007012:	2900      	cmp	r1, #0
 8007014:	d040      	beq.n	8007098 <_free_r+0x88>
 8007016:	3904      	subs	r1, #4
 8007018:	680b      	ldr	r3, [r1, #0]
 800701a:	2b00      	cmp	r3, #0
 800701c:	da00      	bge.n	8007020 <_free_r+0x10>
 800701e:	18c9      	adds	r1, r1, r3
 8007020:	4a1e      	ldr	r2, [pc, #120]	; (800709c <_free_r+0x8c>)
 8007022:	6813      	ldr	r3, [r2, #0]
 8007024:	1c14      	adds	r4, r2, #0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d102      	bne.n	8007030 <_free_r+0x20>
 800702a:	604b      	str	r3, [r1, #4]
 800702c:	6011      	str	r1, [r2, #0]
 800702e:	e033      	b.n	8007098 <_free_r+0x88>
 8007030:	4299      	cmp	r1, r3
 8007032:	d20f      	bcs.n	8007054 <_free_r+0x44>
 8007034:	6808      	ldr	r0, [r1, #0]
 8007036:	180a      	adds	r2, r1, r0
 8007038:	429a      	cmp	r2, r3
 800703a:	d105      	bne.n	8007048 <_free_r+0x38>
 800703c:	6813      	ldr	r3, [r2, #0]
 800703e:	6852      	ldr	r2, [r2, #4]
 8007040:	18c0      	adds	r0, r0, r3
 8007042:	6008      	str	r0, [r1, #0]
 8007044:	604a      	str	r2, [r1, #4]
 8007046:	e000      	b.n	800704a <_free_r+0x3a>
 8007048:	604b      	str	r3, [r1, #4]
 800704a:	6021      	str	r1, [r4, #0]
 800704c:	e024      	b.n	8007098 <_free_r+0x88>
 800704e:	428a      	cmp	r2, r1
 8007050:	d803      	bhi.n	800705a <_free_r+0x4a>
 8007052:	1c13      	adds	r3, r2, #0
 8007054:	685a      	ldr	r2, [r3, #4]
 8007056:	2a00      	cmp	r2, #0
 8007058:	d1f9      	bne.n	800704e <_free_r+0x3e>
 800705a:	681d      	ldr	r5, [r3, #0]
 800705c:	195c      	adds	r4, r3, r5
 800705e:	428c      	cmp	r4, r1
 8007060:	d10b      	bne.n	800707a <_free_r+0x6a>
 8007062:	6809      	ldr	r1, [r1, #0]
 8007064:	1869      	adds	r1, r5, r1
 8007066:	1858      	adds	r0, r3, r1
 8007068:	6019      	str	r1, [r3, #0]
 800706a:	4290      	cmp	r0, r2
 800706c:	d114      	bne.n	8007098 <_free_r+0x88>
 800706e:	6814      	ldr	r4, [r2, #0]
 8007070:	6852      	ldr	r2, [r2, #4]
 8007072:	1909      	adds	r1, r1, r4
 8007074:	6019      	str	r1, [r3, #0]
 8007076:	605a      	str	r2, [r3, #4]
 8007078:	e00e      	b.n	8007098 <_free_r+0x88>
 800707a:	428c      	cmp	r4, r1
 800707c:	d902      	bls.n	8007084 <_free_r+0x74>
 800707e:	230c      	movs	r3, #12
 8007080:	6003      	str	r3, [r0, #0]
 8007082:	e009      	b.n	8007098 <_free_r+0x88>
 8007084:	6808      	ldr	r0, [r1, #0]
 8007086:	180c      	adds	r4, r1, r0
 8007088:	4294      	cmp	r4, r2
 800708a:	d103      	bne.n	8007094 <_free_r+0x84>
 800708c:	6814      	ldr	r4, [r2, #0]
 800708e:	6852      	ldr	r2, [r2, #4]
 8007090:	1900      	adds	r0, r0, r4
 8007092:	6008      	str	r0, [r1, #0]
 8007094:	604a      	str	r2, [r1, #4]
 8007096:	6059      	str	r1, [r3, #4]
 8007098:	bd30      	pop	{r4, r5, pc}
 800709a:	46c0      	nop			; (mov r8, r8)
 800709c:	20000180 	.word	0x20000180

080070a0 <_malloc_r>:
 80070a0:	b570      	push	{r4, r5, r6, lr}
 80070a2:	2303      	movs	r3, #3
 80070a4:	1ccd      	adds	r5, r1, #3
 80070a6:	439d      	bics	r5, r3
 80070a8:	3508      	adds	r5, #8
 80070aa:	1c06      	adds	r6, r0, #0
 80070ac:	2d0c      	cmp	r5, #12
 80070ae:	d201      	bcs.n	80070b4 <_malloc_r+0x14>
 80070b0:	250c      	movs	r5, #12
 80070b2:	e001      	b.n	80070b8 <_malloc_r+0x18>
 80070b4:	2d00      	cmp	r5, #0
 80070b6:	db3f      	blt.n	8007138 <_malloc_r+0x98>
 80070b8:	428d      	cmp	r5, r1
 80070ba:	d33d      	bcc.n	8007138 <_malloc_r+0x98>
 80070bc:	4b20      	ldr	r3, [pc, #128]	; (8007140 <_malloc_r+0xa0>)
 80070be:	681c      	ldr	r4, [r3, #0]
 80070c0:	1c1a      	adds	r2, r3, #0
 80070c2:	1c21      	adds	r1, r4, #0
 80070c4:	2900      	cmp	r1, #0
 80070c6:	d013      	beq.n	80070f0 <_malloc_r+0x50>
 80070c8:	6808      	ldr	r0, [r1, #0]
 80070ca:	1b43      	subs	r3, r0, r5
 80070cc:	d40d      	bmi.n	80070ea <_malloc_r+0x4a>
 80070ce:	2b0b      	cmp	r3, #11
 80070d0:	d902      	bls.n	80070d8 <_malloc_r+0x38>
 80070d2:	600b      	str	r3, [r1, #0]
 80070d4:	18cc      	adds	r4, r1, r3
 80070d6:	e01e      	b.n	8007116 <_malloc_r+0x76>
 80070d8:	428c      	cmp	r4, r1
 80070da:	d102      	bne.n	80070e2 <_malloc_r+0x42>
 80070dc:	6863      	ldr	r3, [r4, #4]
 80070de:	6013      	str	r3, [r2, #0]
 80070e0:	e01a      	b.n	8007118 <_malloc_r+0x78>
 80070e2:	6848      	ldr	r0, [r1, #4]
 80070e4:	6060      	str	r0, [r4, #4]
 80070e6:	1c0c      	adds	r4, r1, #0
 80070e8:	e016      	b.n	8007118 <_malloc_r+0x78>
 80070ea:	1c0c      	adds	r4, r1, #0
 80070ec:	6849      	ldr	r1, [r1, #4]
 80070ee:	e7e9      	b.n	80070c4 <_malloc_r+0x24>
 80070f0:	4c14      	ldr	r4, [pc, #80]	; (8007144 <_malloc_r+0xa4>)
 80070f2:	6820      	ldr	r0, [r4, #0]
 80070f4:	2800      	cmp	r0, #0
 80070f6:	d103      	bne.n	8007100 <_malloc_r+0x60>
 80070f8:	1c30      	adds	r0, r6, #0
 80070fa:	f000 f84b 	bl	8007194 <_sbrk_r>
 80070fe:	6020      	str	r0, [r4, #0]
 8007100:	1c30      	adds	r0, r6, #0
 8007102:	1c29      	adds	r1, r5, #0
 8007104:	f000 f846 	bl	8007194 <_sbrk_r>
 8007108:	1c43      	adds	r3, r0, #1
 800710a:	d015      	beq.n	8007138 <_malloc_r+0x98>
 800710c:	1cc4      	adds	r4, r0, #3
 800710e:	2303      	movs	r3, #3
 8007110:	439c      	bics	r4, r3
 8007112:	4284      	cmp	r4, r0
 8007114:	d10a      	bne.n	800712c <_malloc_r+0x8c>
 8007116:	6025      	str	r5, [r4, #0]
 8007118:	1c20      	adds	r0, r4, #0
 800711a:	300b      	adds	r0, #11
 800711c:	2207      	movs	r2, #7
 800711e:	1d23      	adds	r3, r4, #4
 8007120:	4390      	bics	r0, r2
 8007122:	1ac3      	subs	r3, r0, r3
 8007124:	d00b      	beq.n	800713e <_malloc_r+0x9e>
 8007126:	425a      	negs	r2, r3
 8007128:	50e2      	str	r2, [r4, r3]
 800712a:	e008      	b.n	800713e <_malloc_r+0x9e>
 800712c:	1a21      	subs	r1, r4, r0
 800712e:	1c30      	adds	r0, r6, #0
 8007130:	f000 f830 	bl	8007194 <_sbrk_r>
 8007134:	3001      	adds	r0, #1
 8007136:	d1ee      	bne.n	8007116 <_malloc_r+0x76>
 8007138:	230c      	movs	r3, #12
 800713a:	6033      	str	r3, [r6, #0]
 800713c:	2000      	movs	r0, #0
 800713e:	bd70      	pop	{r4, r5, r6, pc}
 8007140:	20000180 	.word	0x20000180
 8007144:	2000017c 	.word	0x2000017c

08007148 <_realloc_r>:
 8007148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800714a:	1c06      	adds	r6, r0, #0
 800714c:	1c0c      	adds	r4, r1, #0
 800714e:	1c15      	adds	r5, r2, #0
 8007150:	2900      	cmp	r1, #0
 8007152:	d104      	bne.n	800715e <_realloc_r+0x16>
 8007154:	1c11      	adds	r1, r2, #0
 8007156:	f7ff ffa3 	bl	80070a0 <_malloc_r>
 800715a:	1c04      	adds	r4, r0, #0
 800715c:	e018      	b.n	8007190 <_realloc_r+0x48>
 800715e:	2a00      	cmp	r2, #0
 8007160:	d103      	bne.n	800716a <_realloc_r+0x22>
 8007162:	f7ff ff55 	bl	8007010 <_free_r>
 8007166:	1c2c      	adds	r4, r5, #0
 8007168:	e012      	b.n	8007190 <_realloc_r+0x48>
 800716a:	f000 f847 	bl	80071fc <_malloc_usable_size_r>
 800716e:	42a8      	cmp	r0, r5
 8007170:	d20e      	bcs.n	8007190 <_realloc_r+0x48>
 8007172:	1c30      	adds	r0, r6, #0
 8007174:	1c29      	adds	r1, r5, #0
 8007176:	f7ff ff93 	bl	80070a0 <_malloc_r>
 800717a:	1e07      	subs	r7, r0, #0
 800717c:	d007      	beq.n	800718e <_realloc_r+0x46>
 800717e:	1c21      	adds	r1, r4, #0
 8007180:	1c2a      	adds	r2, r5, #0
 8007182:	f7ff fc1b 	bl	80069bc <memcpy>
 8007186:	1c30      	adds	r0, r6, #0
 8007188:	1c21      	adds	r1, r4, #0
 800718a:	f7ff ff41 	bl	8007010 <_free_r>
 800718e:	1c3c      	adds	r4, r7, #0
 8007190:	1c20      	adds	r0, r4, #0
 8007192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007194 <_sbrk_r>:
 8007194:	b538      	push	{r3, r4, r5, lr}
 8007196:	4c07      	ldr	r4, [pc, #28]	; (80071b4 <_sbrk_r+0x20>)
 8007198:	2300      	movs	r3, #0
 800719a:	1c05      	adds	r5, r0, #0
 800719c:	1c08      	adds	r0, r1, #0
 800719e:	6023      	str	r3, [r4, #0]
 80071a0:	f000 f812 	bl	80071c8 <_sbrk>
 80071a4:	1c43      	adds	r3, r0, #1
 80071a6:	d103      	bne.n	80071b0 <_sbrk_r+0x1c>
 80071a8:	6823      	ldr	r3, [r4, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d000      	beq.n	80071b0 <_sbrk_r+0x1c>
 80071ae:	602b      	str	r3, [r5, #0]
 80071b0:	bd38      	pop	{r3, r4, r5, pc}
 80071b2:	46c0      	nop			; (mov r8, r8)
 80071b4:	20000e08 	.word	0x20000e08

080071b8 <strlen>:
 80071b8:	2300      	movs	r3, #0
 80071ba:	5cc2      	ldrb	r2, [r0, r3]
 80071bc:	3301      	adds	r3, #1
 80071be:	2a00      	cmp	r2, #0
 80071c0:	d1fb      	bne.n	80071ba <strlen+0x2>
 80071c2:	1e58      	subs	r0, r3, #1
 80071c4:	4770      	bx	lr
	...

080071c8 <_sbrk>:
 80071c8:	4b09      	ldr	r3, [pc, #36]	; (80071f0 <_sbrk+0x28>)
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	2a00      	cmp	r2, #0
 80071ce:	d101      	bne.n	80071d4 <_sbrk+0xc>
 80071d0:	4a08      	ldr	r2, [pc, #32]	; (80071f4 <_sbrk+0x2c>)
 80071d2:	601a      	str	r2, [r3, #0]
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	4669      	mov	r1, sp
 80071d8:	1810      	adds	r0, r2, r0
 80071da:	4288      	cmp	r0, r1
 80071dc:	d905      	bls.n	80071ea <_sbrk+0x22>
 80071de:	4b06      	ldr	r3, [pc, #24]	; (80071f8 <_sbrk+0x30>)
 80071e0:	220c      	movs	r2, #12
 80071e2:	2001      	movs	r0, #1
 80071e4:	601a      	str	r2, [r3, #0]
 80071e6:	4240      	negs	r0, r0
 80071e8:	e001      	b.n	80071ee <_sbrk+0x26>
 80071ea:	6018      	str	r0, [r3, #0]
 80071ec:	1c10      	adds	r0, r2, #0
 80071ee:	4770      	bx	lr
 80071f0:	20000184 	.word	0x20000184
 80071f4:	20000e0c 	.word	0x20000e0c
 80071f8:	20000e08 	.word	0x20000e08

080071fc <_malloc_usable_size_r>:
 80071fc:	3904      	subs	r1, #4
 80071fe:	680b      	ldr	r3, [r1, #0]
 8007200:	1f18      	subs	r0, r3, #4
 8007202:	2b00      	cmp	r3, #0
 8007204:	da02      	bge.n	800720c <_malloc_usable_size_r+0x10>
 8007206:	58c8      	ldr	r0, [r1, r3]
 8007208:	181b      	adds	r3, r3, r0
 800720a:	1f18      	subs	r0, r3, #4
 800720c:	4770      	bx	lr
	...

08007210 <sqrt>:
 8007210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007212:	b08d      	sub	sp, #52	; 0x34
 8007214:	1c04      	adds	r4, r0, #0
 8007216:	1c0d      	adds	r5, r1, #0
 8007218:	f000 f852 	bl	80072c0 <__ieee754_sqrt>
 800721c:	4a26      	ldr	r2, [pc, #152]	; (80072b8 <sqrt+0xa8>)
 800721e:	2300      	movs	r3, #0
 8007220:	56d3      	ldrsb	r3, [r2, r3]
 8007222:	9000      	str	r0, [sp, #0]
 8007224:	9101      	str	r1, [sp, #4]
 8007226:	3301      	adds	r3, #1
 8007228:	d03e      	beq.n	80072a8 <sqrt+0x98>
 800722a:	1c20      	adds	r0, r4, #0
 800722c:	1c29      	adds	r1, r5, #0
 800722e:	f000 f905 	bl	800743c <__fpclassifyd>
 8007232:	2800      	cmp	r0, #0
 8007234:	d038      	beq.n	80072a8 <sqrt+0x98>
 8007236:	4f1f      	ldr	r7, [pc, #124]	; (80072b4 <sqrt+0xa4>)
 8007238:	4e1d      	ldr	r6, [pc, #116]	; (80072b0 <sqrt+0xa0>)
 800723a:	1c20      	adds	r0, r4, #0
 800723c:	1c29      	adds	r1, r5, #0
 800723e:	1c32      	adds	r2, r6, #0
 8007240:	1c3b      	adds	r3, r7, #0
 8007242:	f7f8 ffc7 	bl	80001d4 <__aeabi_dcmplt>
 8007246:	2800      	cmp	r0, #0
 8007248:	d02e      	beq.n	80072a8 <sqrt+0x98>
 800724a:	2301      	movs	r3, #1
 800724c:	9302      	str	r3, [sp, #8]
 800724e:	4b1b      	ldr	r3, [pc, #108]	; (80072bc <sqrt+0xac>)
 8007250:	9406      	str	r4, [sp, #24]
 8007252:	9507      	str	r5, [sp, #28]
 8007254:	9303      	str	r3, [sp, #12]
 8007256:	2300      	movs	r3, #0
 8007258:	930a      	str	r3, [sp, #40]	; 0x28
 800725a:	4b17      	ldr	r3, [pc, #92]	; (80072b8 <sqrt+0xa8>)
 800725c:	9404      	str	r4, [sp, #16]
 800725e:	9505      	str	r5, [sp, #20]
 8007260:	781c      	ldrb	r4, [r3, #0]
 8007262:	2c00      	cmp	r4, #0
 8007264:	d102      	bne.n	800726c <sqrt+0x5c>
 8007266:	9608      	str	r6, [sp, #32]
 8007268:	9709      	str	r7, [sp, #36]	; 0x24
 800726a:	e009      	b.n	8007280 <sqrt+0x70>
 800726c:	1c30      	adds	r0, r6, #0
 800726e:	1c39      	adds	r1, r7, #0
 8007270:	1c32      	adds	r2, r6, #0
 8007272:	1c3b      	adds	r3, r7, #0
 8007274:	f7f9 fb14 	bl	80008a0 <__aeabi_ddiv>
 8007278:	9008      	str	r0, [sp, #32]
 800727a:	9109      	str	r1, [sp, #36]	; 0x24
 800727c:	2c02      	cmp	r4, #2
 800727e:	d004      	beq.n	800728a <sqrt+0x7a>
 8007280:	a802      	add	r0, sp, #8
 8007282:	f000 f905 	bl	8007490 <matherr>
 8007286:	2800      	cmp	r0, #0
 8007288:	d103      	bne.n	8007292 <sqrt+0x82>
 800728a:	f000 f903 	bl	8007494 <__errno>
 800728e:	2321      	movs	r3, #33	; 0x21
 8007290:	6003      	str	r3, [r0, #0]
 8007292:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007294:	2c00      	cmp	r4, #0
 8007296:	d003      	beq.n	80072a0 <sqrt+0x90>
 8007298:	f000 f8fc 	bl	8007494 <__errno>
 800729c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800729e:	6002      	str	r2, [r0, #0]
 80072a0:	9b08      	ldr	r3, [sp, #32]
 80072a2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80072a4:	9300      	str	r3, [sp, #0]
 80072a6:	9401      	str	r4, [sp, #4]
 80072a8:	9800      	ldr	r0, [sp, #0]
 80072aa:	9901      	ldr	r1, [sp, #4]
 80072ac:	b00d      	add	sp, #52	; 0x34
 80072ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...
 80072b8:	20000120 	.word	0x20000120
 80072bc:	080076d1 	.word	0x080076d1

080072c0 <__ieee754_sqrt>:
 80072c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072c2:	4b5b      	ldr	r3, [pc, #364]	; (8007430 <__ieee754_sqrt+0x170>)
 80072c4:	b087      	sub	sp, #28
 80072c6:	1c1a      	adds	r2, r3, #0
 80072c8:	1c04      	adds	r4, r0, #0
 80072ca:	1c0d      	adds	r5, r1, #0
 80072cc:	1c0f      	adds	r7, r1, #0
 80072ce:	1c06      	adds	r6, r0, #0
 80072d0:	400a      	ands	r2, r1
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d108      	bne.n	80072e8 <__ieee754_sqrt+0x28>
 80072d6:	1c22      	adds	r2, r4, #0
 80072d8:	1c2b      	adds	r3, r5, #0
 80072da:	f7f9 ff4b 	bl	8001174 <__aeabi_dmul>
 80072de:	1c22      	adds	r2, r4, #0
 80072e0:	1c2b      	adds	r3, r5, #0
 80072e2:	f7f8 ffc1 	bl	8000268 <__aeabi_dadd>
 80072e6:	e015      	b.n	8007314 <__ieee754_sqrt+0x54>
 80072e8:	2900      	cmp	r1, #0
 80072ea:	dc16      	bgt.n	800731a <__ieee754_sqrt+0x5a>
 80072ec:	004b      	lsls	r3, r1, #1
 80072ee:	085b      	lsrs	r3, r3, #1
 80072f0:	4303      	orrs	r3, r0
 80072f2:	469c      	mov	ip, r3
 80072f4:	1c22      	adds	r2, r4, #0
 80072f6:	4664      	mov	r4, ip
 80072f8:	1c2b      	adds	r3, r5, #0
 80072fa:	2c00      	cmp	r4, #0
 80072fc:	d100      	bne.n	8007300 <__ieee754_sqrt+0x40>
 80072fe:	e092      	b.n	8007426 <__ieee754_sqrt+0x166>
 8007300:	2900      	cmp	r1, #0
 8007302:	d00a      	beq.n	800731a <__ieee754_sqrt+0x5a>
 8007304:	1c10      	adds	r0, r2, #0
 8007306:	1c29      	adds	r1, r5, #0
 8007308:	f7fa f9c4 	bl	8001694 <__aeabi_dsub>
 800730c:	1c02      	adds	r2, r0, #0
 800730e:	1c0b      	adds	r3, r1, #0
 8007310:	f7f9 fac6 	bl	80008a0 <__aeabi_ddiv>
 8007314:	1c02      	adds	r2, r0, #0
 8007316:	1c0b      	adds	r3, r1, #0
 8007318:	e085      	b.n	8007426 <__ieee754_sqrt+0x166>
 800731a:	150b      	asrs	r3, r1, #20
 800731c:	d113      	bne.n	8007346 <__ieee754_sqrt+0x86>
 800731e:	2f00      	cmp	r7, #0
 8007320:	d103      	bne.n	800732a <__ieee754_sqrt+0x6a>
 8007322:	0af7      	lsrs	r7, r6, #11
 8007324:	3b15      	subs	r3, #21
 8007326:	0576      	lsls	r6, r6, #21
 8007328:	e7f9      	b.n	800731e <__ieee754_sqrt+0x5e>
 800732a:	2200      	movs	r2, #0
 800732c:	02fd      	lsls	r5, r7, #11
 800732e:	d402      	bmi.n	8007336 <__ieee754_sqrt+0x76>
 8007330:	007f      	lsls	r7, r7, #1
 8007332:	3201      	adds	r2, #1
 8007334:	e7fa      	b.n	800732c <__ieee754_sqrt+0x6c>
 8007336:	2120      	movs	r1, #32
 8007338:	1c30      	adds	r0, r6, #0
 800733a:	1a89      	subs	r1, r1, r2
 800733c:	1a9b      	subs	r3, r3, r2
 800733e:	40c8      	lsrs	r0, r1
 8007340:	3301      	adds	r3, #1
 8007342:	4307      	orrs	r7, r0
 8007344:	4096      	lsls	r6, r2
 8007346:	493b      	ldr	r1, [pc, #236]	; (8007434 <__ieee754_sqrt+0x174>)
 8007348:	033f      	lsls	r7, r7, #12
 800734a:	185a      	adds	r2, r3, r1
 800734c:	0b39      	lsrs	r1, r7, #12
 800734e:	2780      	movs	r7, #128	; 0x80
 8007350:	037f      	lsls	r7, r7, #13
 8007352:	430f      	orrs	r7, r1
 8007354:	07d3      	lsls	r3, r2, #31
 8007356:	d503      	bpl.n	8007360 <__ieee754_sqrt+0xa0>
 8007358:	0ff1      	lsrs	r1, r6, #31
 800735a:	007f      	lsls	r7, r7, #1
 800735c:	187f      	adds	r7, r7, r1
 800735e:	0076      	lsls	r6, r6, #1
 8007360:	1052      	asrs	r2, r2, #1
 8007362:	9204      	str	r2, [sp, #16]
 8007364:	007b      	lsls	r3, r7, #1
 8007366:	0ff2      	lsrs	r2, r6, #31
 8007368:	2400      	movs	r4, #0
 800736a:	2580      	movs	r5, #128	; 0x80
 800736c:	189b      	adds	r3, r3, r2
 800736e:	2116      	movs	r1, #22
 8007370:	0072      	lsls	r2, r6, #1
 8007372:	1c20      	adds	r0, r4, #0
 8007374:	03ad      	lsls	r5, r5, #14
 8007376:	1946      	adds	r6, r0, r5
 8007378:	429e      	cmp	r6, r3
 800737a:	dc02      	bgt.n	8007382 <__ieee754_sqrt+0xc2>
 800737c:	1970      	adds	r0, r6, r5
 800737e:	1b9b      	subs	r3, r3, r6
 8007380:	1964      	adds	r4, r4, r5
 8007382:	0fd6      	lsrs	r6, r2, #31
 8007384:	005b      	lsls	r3, r3, #1
 8007386:	3901      	subs	r1, #1
 8007388:	199b      	adds	r3, r3, r6
 800738a:	0052      	lsls	r2, r2, #1
 800738c:	086d      	lsrs	r5, r5, #1
 800738e:	2900      	cmp	r1, #0
 8007390:	d1f1      	bne.n	8007376 <__ieee754_sqrt+0xb6>
 8007392:	2520      	movs	r5, #32
 8007394:	46ac      	mov	ip, r5
 8007396:	2580      	movs	r5, #128	; 0x80
 8007398:	062d      	lsls	r5, r5, #24
 800739a:	9103      	str	r1, [sp, #12]
 800739c:	9501      	str	r5, [sp, #4]
 800739e:	9f01      	ldr	r7, [sp, #4]
 80073a0:	9d03      	ldr	r5, [sp, #12]
 80073a2:	197e      	adds	r6, r7, r5
 80073a4:	4298      	cmp	r0, r3
 80073a6:	db02      	blt.n	80073ae <__ieee754_sqrt+0xee>
 80073a8:	d119      	bne.n	80073de <__ieee754_sqrt+0x11e>
 80073aa:	4296      	cmp	r6, r2
 80073ac:	d816      	bhi.n	80073dc <__ieee754_sqrt+0x11c>
 80073ae:	9f01      	ldr	r7, [sp, #4]
 80073b0:	19f7      	adds	r7, r6, r7
 80073b2:	9703      	str	r7, [sp, #12]
 80073b4:	1c07      	adds	r7, r0, #0
 80073b6:	2e00      	cmp	r6, #0
 80073b8:	da06      	bge.n	80073c8 <__ieee754_sqrt+0x108>
 80073ba:	9f03      	ldr	r7, [sp, #12]
 80073bc:	0ffd      	lsrs	r5, r7, #31
 80073be:	07ed      	lsls	r5, r5, #31
 80073c0:	426f      	negs	r7, r5
 80073c2:	416f      	adcs	r7, r5
 80073c4:	9702      	str	r7, [sp, #8]
 80073c6:	19c7      	adds	r7, r0, r7
 80073c8:	1a1b      	subs	r3, r3, r0
 80073ca:	42b2      	cmp	r2, r6
 80073cc:	4180      	sbcs	r0, r0
 80073ce:	4240      	negs	r0, r0
 80073d0:	1a1b      	subs	r3, r3, r0
 80073d2:	9801      	ldr	r0, [sp, #4]
 80073d4:	1b92      	subs	r2, r2, r6
 80073d6:	1809      	adds	r1, r1, r0
 80073d8:	1c38      	adds	r0, r7, #0
 80073da:	e000      	b.n	80073de <__ieee754_sqrt+0x11e>
 80073dc:	1c03      	adds	r3, r0, #0
 80073de:	0fd6      	lsrs	r6, r2, #31
 80073e0:	005b      	lsls	r3, r3, #1
 80073e2:	199b      	adds	r3, r3, r6
 80073e4:	2601      	movs	r6, #1
 80073e6:	9d01      	ldr	r5, [sp, #4]
 80073e8:	4276      	negs	r6, r6
 80073ea:	44b4      	add	ip, r6
 80073ec:	086d      	lsrs	r5, r5, #1
 80073ee:	4667      	mov	r7, ip
 80073f0:	0052      	lsls	r2, r2, #1
 80073f2:	9501      	str	r5, [sp, #4]
 80073f4:	2f00      	cmp	r7, #0
 80073f6:	d1d2      	bne.n	800739e <__ieee754_sqrt+0xde>
 80073f8:	4313      	orrs	r3, r2
 80073fa:	d007      	beq.n	800740c <__ieee754_sqrt+0x14c>
 80073fc:	1c48      	adds	r0, r1, #1
 80073fe:	d102      	bne.n	8007406 <__ieee754_sqrt+0x146>
 8007400:	3401      	adds	r4, #1
 8007402:	4661      	mov	r1, ip
 8007404:	e002      	b.n	800740c <__ieee754_sqrt+0x14c>
 8007406:	2301      	movs	r3, #1
 8007408:	400b      	ands	r3, r1
 800740a:	1859      	adds	r1, r3, r1
 800740c:	4b0a      	ldr	r3, [pc, #40]	; (8007438 <__ieee754_sqrt+0x178>)
 800740e:	1065      	asrs	r5, r4, #1
 8007410:	18ed      	adds	r5, r5, r3
 8007412:	0849      	lsrs	r1, r1, #1
 8007414:	07e6      	lsls	r6, r4, #31
 8007416:	d502      	bpl.n	800741e <__ieee754_sqrt+0x15e>
 8007418:	2380      	movs	r3, #128	; 0x80
 800741a:	061b      	lsls	r3, r3, #24
 800741c:	4319      	orrs	r1, r3
 800741e:	9f04      	ldr	r7, [sp, #16]
 8007420:	1c0a      	adds	r2, r1, #0
 8007422:	0538      	lsls	r0, r7, #20
 8007424:	182b      	adds	r3, r5, r0
 8007426:	1c10      	adds	r0, r2, #0
 8007428:	1c19      	adds	r1, r3, #0
 800742a:	b007      	add	sp, #28
 800742c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800742e:	46c0      	nop			; (mov r8, r8)
 8007430:	7ff00000 	.word	0x7ff00000
 8007434:	fffffc01 	.word	0xfffffc01
 8007438:	3fe00000 	.word	0x3fe00000

0800743c <__fpclassifyd>:
 800743c:	b530      	push	{r4, r5, lr}
 800743e:	1c0b      	adds	r3, r1, #0
 8007440:	1c04      	adds	r4, r0, #0
 8007442:	1c02      	adds	r2, r0, #0
 8007444:	431c      	orrs	r4, r3
 8007446:	2002      	movs	r0, #2
 8007448:	2c00      	cmp	r4, #0
 800744a:	d017      	beq.n	800747c <__fpclassifyd+0x40>
 800744c:	2480      	movs	r4, #128	; 0x80
 800744e:	0624      	lsls	r4, r4, #24
 8007450:	42a3      	cmp	r3, r4
 8007452:	d101      	bne.n	8007458 <__fpclassifyd+0x1c>
 8007454:	2a00      	cmp	r2, #0
 8007456:	d011      	beq.n	800747c <__fpclassifyd+0x40>
 8007458:	4809      	ldr	r0, [pc, #36]	; (8007480 <__fpclassifyd+0x44>)
 800745a:	0059      	lsls	r1, r3, #1
 800745c:	0849      	lsrs	r1, r1, #1
 800745e:	4c09      	ldr	r4, [pc, #36]	; (8007484 <__fpclassifyd+0x48>)
 8007460:	180d      	adds	r5, r1, r0
 8007462:	2004      	movs	r0, #4
 8007464:	42a5      	cmp	r5, r4
 8007466:	d909      	bls.n	800747c <__fpclassifyd+0x40>
 8007468:	4c07      	ldr	r4, [pc, #28]	; (8007488 <__fpclassifyd+0x4c>)
 800746a:	2003      	movs	r0, #3
 800746c:	42a1      	cmp	r1, r4
 800746e:	d905      	bls.n	800747c <__fpclassifyd+0x40>
 8007470:	4c06      	ldr	r4, [pc, #24]	; (800748c <__fpclassifyd+0x50>)
 8007472:	2000      	movs	r0, #0
 8007474:	42a1      	cmp	r1, r4
 8007476:	d101      	bne.n	800747c <__fpclassifyd+0x40>
 8007478:	4250      	negs	r0, r2
 800747a:	4150      	adcs	r0, r2
 800747c:	bd30      	pop	{r4, r5, pc}
 800747e:	46c0      	nop			; (mov r8, r8)
 8007480:	fff00000 	.word	0xfff00000
 8007484:	7fdfffff 	.word	0x7fdfffff
 8007488:	000fffff 	.word	0x000fffff
 800748c:	7ff00000 	.word	0x7ff00000

08007490 <matherr>:
 8007490:	2000      	movs	r0, #0
 8007492:	4770      	bx	lr

08007494 <__errno>:
 8007494:	4b01      	ldr	r3, [pc, #4]	; (800749c <__errno+0x8>)
 8007496:	6818      	ldr	r0, [r3, #0]
 8007498:	4770      	bx	lr
 800749a:	46c0      	nop			; (mov r8, r8)
 800749c:	2000011c 	.word	0x2000011c

080074a0 <_init>:
 80074a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074a2:	46c0      	nop			; (mov r8, r8)
 80074a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074a6:	bc08      	pop	{r3}
 80074a8:	469e      	mov	lr, r3
 80074aa:	4770      	bx	lr

080074ac <_fini>:
 80074ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ae:	46c0      	nop			; (mov r8, r8)
 80074b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074b2:	bc08      	pop	{r3}
 80074b4:	469e      	mov	lr, r3
 80074b6:	4770      	bx	lr
