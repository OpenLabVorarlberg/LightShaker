
LightShaker3_libUSB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002608  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  080026c8  080026c8  000126c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026dc  080026dc  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080026dc  080026dc  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026dc  080026dc  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026dc  080026dc  000126dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026e0  080026e0  000126e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080026e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000510  20000018  080026fc  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000528  080026fc  00020528  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000058f7  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a88  00000000  00000000  00025937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000770  00000000  00000000  000273c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000648  00000000  00000000  00027b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000233e  00000000  00000000  00028178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000863f  00000000  00000000  0002a4b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00042600  00000000  00000000  00032af5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000750f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001770  00000000  00000000  00075148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080026b0 	.word	0x080026b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	080026b0 	.word	0x080026b0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <EXTI_DeInit>:
 * @brief  Deinitializes the EXTI peripheral registers to their default reset 
 *         values.
 * @param  None
 * @retval None
 */
void EXTI_DeInit(void) {
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	EXTI->IMR = 0x0F940000;
 8000224:	4b08      	ldr	r3, [pc, #32]	; (8000248 <EXTI_DeInit+0x28>)
 8000226:	4a09      	ldr	r2, [pc, #36]	; (800024c <EXTI_DeInit+0x2c>)
 8000228:	601a      	str	r2, [r3, #0]
	EXTI->EMR = 0x00000000;
 800022a:	4b07      	ldr	r3, [pc, #28]	; (8000248 <EXTI_DeInit+0x28>)
 800022c:	2200      	movs	r2, #0
 800022e:	605a      	str	r2, [r3, #4]
	EXTI->RTSR = 0x00000000;
 8000230:	4b05      	ldr	r3, [pc, #20]	; (8000248 <EXTI_DeInit+0x28>)
 8000232:	2200      	movs	r2, #0
 8000234:	609a      	str	r2, [r3, #8]
	EXTI->FTSR = 0x00000000;
 8000236:	4b04      	ldr	r3, [pc, #16]	; (8000248 <EXTI_DeInit+0x28>)
 8000238:	2200      	movs	r2, #0
 800023a:	60da      	str	r2, [r3, #12]
	EXTI->PR = 0x006BFFFF;
 800023c:	4b02      	ldr	r3, [pc, #8]	; (8000248 <EXTI_DeInit+0x28>)
 800023e:	4a04      	ldr	r2, [pc, #16]	; (8000250 <EXTI_DeInit+0x30>)
 8000240:	615a      	str	r2, [r3, #20]
}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	40010400 	.word	0x40010400
 800024c:	0f940000 	.word	0x0f940000
 8000250:	006bffff 	.word	0x006bffff

08000254 <EXTI_Init>:
 *         parameters in the EXTI_InitStruct.
 * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure that 
 *         contains the configuration information for the EXTI peripheral.
 * @retval None
 */
void EXTI_Init(EXTI_InitTypeDef *EXTI_InitStruct) {
 8000254:	b580      	push	{r7, lr}
 8000256:	b084      	sub	sp, #16
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
	uint32_t tmp = 0;
 800025c:	2300      	movs	r3, #0
 800025e:	60fb      	str	r3, [r7, #12]
	assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
	assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
	assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
	assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

	tmp = (uint32_t) EXTI_BASE;
 8000260:	4b33      	ldr	r3, [pc, #204]	; (8000330 <EXTI_Init+0xdc>)
 8000262:	60fb      	str	r3, [r7, #12]

	if (EXTI_InitStruct->EXTI_LineCmd != DISABLE) {
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	799b      	ldrb	r3, [r3, #6]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d04f      	beq.n	800030c <EXTI_Init+0xb8>
		/* Clear EXTI line configuration */
		EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 800026c:	4b30      	ldr	r3, [pc, #192]	; (8000330 <EXTI_Init+0xdc>)
 800026e:	681a      	ldr	r2, [r3, #0]
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	43d9      	mvns	r1, r3
 8000276:	4b2e      	ldr	r3, [pc, #184]	; (8000330 <EXTI_Init+0xdc>)
 8000278:	400a      	ands	r2, r1
 800027a:	601a      	str	r2, [r3, #0]
		EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 800027c:	4b2c      	ldr	r3, [pc, #176]	; (8000330 <EXTI_Init+0xdc>)
 800027e:	685a      	ldr	r2, [r3, #4]
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	43d9      	mvns	r1, r3
 8000286:	4b2a      	ldr	r3, [pc, #168]	; (8000330 <EXTI_Init+0xdc>)
 8000288:	400a      	ands	r2, r1
 800028a:	605a      	str	r2, [r3, #4]

		tmp += EXTI_InitStruct->EXTI_Mode;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	791b      	ldrb	r3, [r3, #4]
 8000290:	001a      	movs	r2, r3
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	189b      	adds	r3, r3, r2
 8000296:	60fb      	str	r3, [r7, #12]

		*(__IO uint32_t*) tmp |= EXTI_InitStruct->EXTI_Line;
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	6819      	ldr	r1, [r3, #0]
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	681a      	ldr	r2, [r3, #0]
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	430a      	orrs	r2, r1
 80002a4:	601a      	str	r2, [r3, #0]

		/* Clear Rising Falling edge configuration */
		EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 80002a6:	4b22      	ldr	r3, [pc, #136]	; (8000330 <EXTI_Init+0xdc>)
 80002a8:	689a      	ldr	r2, [r3, #8]
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	43d9      	mvns	r1, r3
 80002b0:	4b1f      	ldr	r3, [pc, #124]	; (8000330 <EXTI_Init+0xdc>)
 80002b2:	400a      	ands	r2, r1
 80002b4:	609a      	str	r2, [r3, #8]
		EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80002b6:	4b1e      	ldr	r3, [pc, #120]	; (8000330 <EXTI_Init+0xdc>)
 80002b8:	68da      	ldr	r2, [r3, #12]
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	43d9      	mvns	r1, r3
 80002c0:	4b1b      	ldr	r3, [pc, #108]	; (8000330 <EXTI_Init+0xdc>)
 80002c2:	400a      	ands	r2, r1
 80002c4:	60da      	str	r2, [r3, #12]

		/* Select the trigger for the selected interrupts */
		if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling) {
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	795b      	ldrb	r3, [r3, #5]
 80002ca:	2b10      	cmp	r3, #16
 80002cc:	d10e      	bne.n	80002ec <EXTI_Init+0x98>
			/* Rising Falling edge */
			EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80002ce:	4b18      	ldr	r3, [pc, #96]	; (8000330 <EXTI_Init+0xdc>)
 80002d0:	6899      	ldr	r1, [r3, #8]
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	681a      	ldr	r2, [r3, #0]
 80002d6:	4b16      	ldr	r3, [pc, #88]	; (8000330 <EXTI_Init+0xdc>)
 80002d8:	430a      	orrs	r2, r1
 80002da:	609a      	str	r2, [r3, #8]
			EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80002dc:	4b14      	ldr	r3, [pc, #80]	; (8000330 <EXTI_Init+0xdc>)
 80002de:	68d9      	ldr	r1, [r3, #12]
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	681a      	ldr	r2, [r3, #0]
 80002e4:	4b12      	ldr	r3, [pc, #72]	; (8000330 <EXTI_Init+0xdc>)
 80002e6:	430a      	orrs	r2, r1
 80002e8:	60da      	str	r2, [r3, #12]
		tmp += EXTI_InitStruct->EXTI_Mode;

		/* Disable the selected external lines */
		*(__IO uint32_t*) tmp &= ~EXTI_InitStruct->EXTI_Line;
	}
}
 80002ea:	e01d      	b.n	8000328 <EXTI_Init+0xd4>
			tmp = (uint32_t) EXTI_BASE;
 80002ec:	4b10      	ldr	r3, [pc, #64]	; (8000330 <EXTI_Init+0xdc>)
 80002ee:	60fb      	str	r3, [r7, #12]
			tmp += EXTI_InitStruct->EXTI_Trigger;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	795b      	ldrb	r3, [r3, #5]
 80002f4:	001a      	movs	r2, r3
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	189b      	adds	r3, r3, r2
 80002fa:	60fb      	str	r3, [r7, #12]
			*(__IO uint32_t*) tmp |= EXTI_InitStruct->EXTI_Line;
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	6819      	ldr	r1, [r3, #0]
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	681a      	ldr	r2, [r3, #0]
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	430a      	orrs	r2, r1
 8000308:	601a      	str	r2, [r3, #0]
}
 800030a:	e00d      	b.n	8000328 <EXTI_Init+0xd4>
		tmp += EXTI_InitStruct->EXTI_Mode;
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	791b      	ldrb	r3, [r3, #4]
 8000310:	001a      	movs	r2, r3
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	189b      	adds	r3, r3, r2
 8000316:	60fb      	str	r3, [r7, #12]
		*(__IO uint32_t*) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	681a      	ldr	r2, [r3, #0]
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	43d9      	mvns	r1, r3
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	400a      	ands	r2, r1
 8000326:	601a      	str	r2, [r3, #0]
}
 8000328:	46c0      	nop			; (mov r8, r8)
 800032a:	46bd      	mov	sp, r7
 800032c:	b004      	add	sp, #16
 800032e:	bd80      	pop	{r7, pc}
 8000330:	40010400 	.word	0x40010400

08000334 <EXTI_ClearITPendingBit>:
 * @brief  Clears the EXTI's line pending bits.
 * @param  EXTI_Line: specifies the EXTI lines to clear.
 *          This parameter can be any combination of EXTI_Linex where x can be (0..27).
 * @retval None
 */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line) {
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_EXTI_LINE(EXTI_Line));

	EXTI->PR = EXTI_Line;
 800033c:	4b03      	ldr	r3, [pc, #12]	; (800034c <EXTI_ClearITPendingBit+0x18>)
 800033e:	687a      	ldr	r2, [r7, #4]
 8000340:	615a      	str	r2, [r3, #20]
}
 8000342:	46c0      	nop			; (mov r8, r8)
 8000344:	46bd      	mov	sp, r7
 8000346:	b002      	add	sp, #8
 8000348:	bd80      	pop	{r7, pc}
 800034a:	46c0      	nop			; (mov r8, r8)
 800034c:	40010400 	.word	0x40010400

08000350 <GPIO_Init>:
 * @note   GPIOD is not available for STM32F031.   
 * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_InitStruct) {
 8000350:	b580      	push	{r7, lr}
 8000352:	b086      	sub	sp, #24
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	6039      	str	r1, [r7, #0]
	uint32_t pinpos = 0x00, pos = 0x00, currentpin = 0x00;
 800035a:	2300      	movs	r3, #0
 800035c:	617b      	str	r3, [r7, #20]
 800035e:	2300      	movs	r3, #0
 8000360:	613b      	str	r3, [r7, #16]
 8000362:	2300      	movs	r3, #0
 8000364:	60fb      	str	r3, [r7, #12]
	assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
	assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

	/*-------------------------- Configure the port pins -----------------------*/
	/*-- GPIO Mode Configuration --*/
	for (pinpos = 0x00; pinpos < 0x10; pinpos++) {
 8000366:	2300      	movs	r3, #0
 8000368:	617b      	str	r3, [r7, #20]
 800036a:	e07c      	b.n	8000466 <GPIO_Init+0x116>
		pos = ((uint32_t) 0x01) << pinpos;
 800036c:	2201      	movs	r2, #1
 800036e:	697b      	ldr	r3, [r7, #20]
 8000370:	409a      	lsls	r2, r3
 8000372:	0013      	movs	r3, r2
 8000374:	613b      	str	r3, [r7, #16]

		/* Get the port pins position */
		currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000376:	683b      	ldr	r3, [r7, #0]
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	693b      	ldr	r3, [r7, #16]
 800037c:	4013      	ands	r3, r2
 800037e:	60fb      	str	r3, [r7, #12]

		if (currentpin == pos) {
 8000380:	68fa      	ldr	r2, [r7, #12]
 8000382:	693b      	ldr	r3, [r7, #16]
 8000384:	429a      	cmp	r2, r3
 8000386:	d16b      	bne.n	8000460 <GPIO_Init+0x110>
			if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT)
 8000388:	683b      	ldr	r3, [r7, #0]
 800038a:	791b      	ldrb	r3, [r3, #4]
 800038c:	2b01      	cmp	r3, #1
 800038e:	d003      	beq.n	8000398 <GPIO_Init+0x48>
					|| (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF)) {
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	791b      	ldrb	r3, [r3, #4]
 8000394:	2b02      	cmp	r3, #2
 8000396:	d134      	bne.n	8000402 <GPIO_Init+0xb2>
				/* Check Speed mode parameters */
				assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

				/* Speed mode configuration */
				GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	689b      	ldr	r3, [r3, #8]
 800039c:	697a      	ldr	r2, [r7, #20]
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	2103      	movs	r1, #3
 80003a2:	4091      	lsls	r1, r2
 80003a4:	000a      	movs	r2, r1
 80003a6:	43d2      	mvns	r2, r2
 80003a8:	401a      	ands	r2, r3
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	609a      	str	r2, [r3, #8]
				GPIOx->OSPEEDR |= ((uint32_t) (GPIO_InitStruct->GPIO_Speed)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	689a      	ldr	r2, [r3, #8]
 80003b2:	683b      	ldr	r3, [r7, #0]
 80003b4:	795b      	ldrb	r3, [r3, #5]
 80003b6:	0019      	movs	r1, r3
						<< (pinpos * 2));
 80003b8:	697b      	ldr	r3, [r7, #20]
 80003ba:	005b      	lsls	r3, r3, #1
 80003bc:	4099      	lsls	r1, r3
 80003be:	000b      	movs	r3, r1
				GPIOx->OSPEEDR |= ((uint32_t) (GPIO_InitStruct->GPIO_Speed)
 80003c0:	431a      	orrs	r2, r3
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	609a      	str	r2, [r3, #8]

				/* Check Output mode parameters */
				assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

				/* Output mode configuration */
				GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t) pinpos));
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	889b      	ldrh	r3, [r3, #4]
 80003ca:	b29b      	uxth	r3, r3
 80003cc:	697a      	ldr	r2, [r7, #20]
 80003ce:	b292      	uxth	r2, r2
 80003d0:	0011      	movs	r1, r2
 80003d2:	2201      	movs	r2, #1
 80003d4:	408a      	lsls	r2, r1
 80003d6:	b292      	uxth	r2, r2
 80003d8:	43d2      	mvns	r2, r2
 80003da:	b292      	uxth	r2, r2
 80003dc:	4013      	ands	r3, r2
 80003de:	b29a      	uxth	r2, r3
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	809a      	strh	r2, [r3, #4]
				GPIOx->OTYPER |=
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	889b      	ldrh	r3, [r3, #4]
 80003e8:	b29a      	uxth	r2, r3
						(uint16_t) (((uint16_t) GPIO_InitStruct->GPIO_OType)
 80003ea:	683b      	ldr	r3, [r7, #0]
 80003ec:	799b      	ldrb	r3, [r3, #6]
 80003ee:	0019      	movs	r1, r3
								<< ((uint16_t) pinpos));
 80003f0:	697b      	ldr	r3, [r7, #20]
 80003f2:	b29b      	uxth	r3, r3
 80003f4:	4099      	lsls	r1, r3
 80003f6:	000b      	movs	r3, r1
						(uint16_t) (((uint16_t) GPIO_InitStruct->GPIO_OType)
 80003f8:	b29b      	uxth	r3, r3
				GPIOx->OTYPER |=
 80003fa:	4313      	orrs	r3, r2
 80003fc:	b29a      	uxth	r2, r3
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	809a      	strh	r2, [r3, #4]
			}

			GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	697a      	ldr	r2, [r7, #20]
 8000408:	0052      	lsls	r2, r2, #1
 800040a:	2103      	movs	r1, #3
 800040c:	4091      	lsls	r1, r2
 800040e:	000a      	movs	r2, r1
 8000410:	43d2      	mvns	r2, r2
 8000412:	401a      	ands	r2, r3
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	601a      	str	r2, [r3, #0]

			GPIOx->MODER |= (((uint32_t) GPIO_InitStruct->GPIO_Mode)
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681a      	ldr	r2, [r3, #0]
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	791b      	ldrb	r3, [r3, #4]
 8000420:	0019      	movs	r1, r3
					<< (pinpos * 2));
 8000422:	697b      	ldr	r3, [r7, #20]
 8000424:	005b      	lsls	r3, r3, #1
 8000426:	4099      	lsls	r1, r3
 8000428:	000b      	movs	r3, r1
			GPIOx->MODER |= (((uint32_t) GPIO_InitStruct->GPIO_Mode)
 800042a:	431a      	orrs	r2, r3
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	601a      	str	r2, [r3, #0]

			/* Pull-up Pull down resistor configuration */
			GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t) pinpos * 2));
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	68db      	ldr	r3, [r3, #12]
 8000434:	697a      	ldr	r2, [r7, #20]
 8000436:	b292      	uxth	r2, r2
 8000438:	0052      	lsls	r2, r2, #1
 800043a:	2103      	movs	r1, #3
 800043c:	4091      	lsls	r1, r2
 800043e:	000a      	movs	r2, r1
 8000440:	43d2      	mvns	r2, r2
 8000442:	401a      	ands	r2, r3
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	60da      	str	r2, [r3, #12]
			GPIOx->PUPDR |= (((uint32_t) GPIO_InitStruct->GPIO_PuPd)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	68da      	ldr	r2, [r3, #12]
 800044c:	683b      	ldr	r3, [r7, #0]
 800044e:	79db      	ldrb	r3, [r3, #7]
 8000450:	0019      	movs	r1, r3
					<< (pinpos * 2));
 8000452:	697b      	ldr	r3, [r7, #20]
 8000454:	005b      	lsls	r3, r3, #1
 8000456:	4099      	lsls	r1, r3
 8000458:	000b      	movs	r3, r1
			GPIOx->PUPDR |= (((uint32_t) GPIO_InitStruct->GPIO_PuPd)
 800045a:	431a      	orrs	r2, r3
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	60da      	str	r2, [r3, #12]
	for (pinpos = 0x00; pinpos < 0x10; pinpos++) {
 8000460:	697b      	ldr	r3, [r7, #20]
 8000462:	3301      	adds	r3, #1
 8000464:	617b      	str	r3, [r7, #20]
 8000466:	697b      	ldr	r3, [r7, #20]
 8000468:	2b0f      	cmp	r3, #15
 800046a:	d800      	bhi.n	800046e <GPIO_Init+0x11e>
 800046c:	e77e      	b.n	800036c <GPIO_Init+0x1c>
		}
	}
}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	46c0      	nop			; (mov r8, r8)
 8000472:	46bd      	mov	sp, r7
 8000474:	b006      	add	sp, #24
 8000476:	bd80      	pop	{r7, pc}

08000478 <GPIO_ReadInputDataBit>:
 *         For STM32F051 and STM32F030: (0..15) for GPIOA, GPIOB, GPIOC, (2) for GPIOD and (0..1, 4..7) for GIIOF.
 *         For STM32F072: (0..15) for GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, (0..10) for GPIOF.
 *         For STM32F031: (0..15) for GPIOA, GPIOB, (13..15) for GPIOC and (0..1, 6..7) for GPIOF.  
 * @retval The input port pin value.
 */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
 8000480:	000a      	movs	r2, r1
 8000482:	1cbb      	adds	r3, r7, #2
 8000484:	801a      	strh	r2, [r3, #0]

	uint8_t bitstatus = 0x00;
 8000486:	210f      	movs	r1, #15
 8000488:	187b      	adds	r3, r7, r1
 800048a:	2200      	movs	r2, #0
 800048c:	701a      	strb	r2, [r3, #0]

	/* Check the parameters */
	assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
	assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

	if ((GPIOx->IDR & GPIO_Pin) != (uint32_t) Bit_RESET) {
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	8a1b      	ldrh	r3, [r3, #16]
 8000492:	b29b      	uxth	r3, r3
 8000494:	1cba      	adds	r2, r7, #2
 8000496:	8812      	ldrh	r2, [r2, #0]
 8000498:	4013      	ands	r3, r2
 800049a:	b29b      	uxth	r3, r3
 800049c:	2b00      	cmp	r3, #0
 800049e:	d003      	beq.n	80004a8 <GPIO_ReadInputDataBit+0x30>
		bitstatus = (uint8_t) Bit_SET;
 80004a0:	187b      	adds	r3, r7, r1
 80004a2:	2201      	movs	r2, #1
 80004a4:	701a      	strb	r2, [r3, #0]
 80004a6:	e003      	b.n	80004b0 <GPIO_ReadInputDataBit+0x38>
	} else {
		bitstatus = (uint8_t) Bit_RESET;
 80004a8:	230f      	movs	r3, #15
 80004aa:	18fb      	adds	r3, r7, r3
 80004ac:	2200      	movs	r2, #0
 80004ae:	701a      	strb	r2, [r3, #0]
	}
	return bitstatus;
 80004b0:	230f      	movs	r3, #15
 80004b2:	18fb      	adds	r3, r7, r3
 80004b4:	781b      	ldrb	r3, [r3, #0]
}
 80004b6:	0018      	movs	r0, r3
 80004b8:	46bd      	mov	sp, r7
 80004ba:	b004      	add	sp, #16
 80004bc:	bd80      	pop	{r7, pc}

080004be <GPIO_WriteBit>:
 *         For STM32F051 and STM32F030: (0..15) for GPIOA, GPIOB, GPIOC, (2) for GPIOD and (0..1, 4..7) for GIIOF.
 *         For STM32F072: (0..15) for GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, (0..10) for GPIOF.
 *         For STM32F031: (0..15) for GPIOA, GPIOB, (13..15) for GPIOC and (0..1, 6..7) for GPIOF.
 * @retval None
 */
void GPIO_WriteBit(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, BitAction BitVal) {
 80004be:	b580      	push	{r7, lr}
 80004c0:	b082      	sub	sp, #8
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	6078      	str	r0, [r7, #4]
 80004c6:	0008      	movs	r0, r1
 80004c8:	0011      	movs	r1, r2
 80004ca:	1cbb      	adds	r3, r7, #2
 80004cc:	1c02      	adds	r2, r0, #0
 80004ce:	801a      	strh	r2, [r3, #0]
 80004d0:	1c7b      	adds	r3, r7, #1
 80004d2:	1c0a      	adds	r2, r1, #0
 80004d4:	701a      	strb	r2, [r3, #0]
	/* Check the parameters */
	assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
	assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
	assert_param(IS_GPIO_BIT_ACTION(BitVal));

	if (BitVal != Bit_RESET) {
 80004d6:	1c7b      	adds	r3, r7, #1
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d004      	beq.n	80004e8 <GPIO_WriteBit+0x2a>
		GPIOx->BSRR = GPIO_Pin;
 80004de:	1cbb      	adds	r3, r7, #2
 80004e0:	881a      	ldrh	r2, [r3, #0]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	619a      	str	r2, [r3, #24]
	} else {
		GPIOx->BRR = GPIO_Pin;
	}
}
 80004e6:	e003      	b.n	80004f0 <GPIO_WriteBit+0x32>
		GPIOx->BRR = GPIO_Pin;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	1cba      	adds	r2, r7, #2
 80004ec:	8812      	ldrh	r2, [r2, #0]
 80004ee:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b002      	add	sp, #8
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <GPIO_PinAFConfig>:
 *         for the detailed mapping of the system and peripherals'alternate 
 *         function I/O pins.
 * @retval None
 */
void GPIO_PinAFConfig(GPIO_TypeDef *GPIOx, uint16_t GPIO_PinSource,
		uint8_t GPIO_AF) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	0008      	movs	r0, r1
 8000502:	0011      	movs	r1, r2
 8000504:	1cbb      	adds	r3, r7, #2
 8000506:	1c02      	adds	r2, r0, #0
 8000508:	801a      	strh	r2, [r3, #0]
 800050a:	1c7b      	adds	r3, r7, #1
 800050c:	1c0a      	adds	r2, r1, #0
 800050e:	701a      	strb	r2, [r3, #0]
	uint32_t temp = 0x00;
 8000510:	2300      	movs	r3, #0
 8000512:	60fb      	str	r3, [r7, #12]
	uint32_t temp_2 = 0x00;
 8000514:	2300      	movs	r3, #0
 8000516:	60bb      	str	r3, [r7, #8]
	/* Check the parameters */
	assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
	assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
	assert_param(IS_GPIO_AF(GPIO_AF));

	temp = ((uint32_t) (GPIO_AF)
 8000518:	1c7b      	adds	r3, r7, #1
 800051a:	781a      	ldrb	r2, [r3, #0]
			<< ((uint32_t) ((uint32_t) GPIO_PinSource & (uint32_t) 0x07) * 4));
 800051c:	1cbb      	adds	r3, r7, #2
 800051e:	881b      	ldrh	r3, [r3, #0]
 8000520:	2107      	movs	r1, #7
 8000522:	400b      	ands	r3, r1
 8000524:	009b      	lsls	r3, r3, #2
	temp = ((uint32_t) (GPIO_AF)
 8000526:	409a      	lsls	r2, r3
 8000528:	0013      	movs	r3, r2
 800052a:	60fb      	str	r3, [r7, #12]
	GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t) 0xF
 800052c:	1cbb      	adds	r3, r7, #2
 800052e:	881b      	ldrh	r3, [r3, #0]
 8000530:	08db      	lsrs	r3, r3, #3
 8000532:	b29b      	uxth	r3, r3
 8000534:	001a      	movs	r2, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	3208      	adds	r2, #8
 800053a:	0092      	lsls	r2, r2, #2
 800053c:	58d3      	ldr	r3, [r2, r3]
			<< ((uint32_t) ((uint32_t) GPIO_PinSource & (uint32_t) 0x07) * 4));
 800053e:	1cba      	adds	r2, r7, #2
 8000540:	8812      	ldrh	r2, [r2, #0]
 8000542:	2107      	movs	r1, #7
 8000544:	400a      	ands	r2, r1
 8000546:	0092      	lsls	r2, r2, #2
 8000548:	210f      	movs	r1, #15
 800054a:	4091      	lsls	r1, r2
 800054c:	000a      	movs	r2, r1
	GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t) 0xF
 800054e:	43d2      	mvns	r2, r2
 8000550:	1cb9      	adds	r1, r7, #2
 8000552:	8809      	ldrh	r1, [r1, #0]
 8000554:	08c9      	lsrs	r1, r1, #3
 8000556:	b289      	uxth	r1, r1
 8000558:	0008      	movs	r0, r1
 800055a:	401a      	ands	r2, r3
 800055c:	0011      	movs	r1, r2
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	0002      	movs	r2, r0
 8000562:	3208      	adds	r2, #8
 8000564:	0092      	lsls	r2, r2, #2
 8000566:	50d1      	str	r1, [r2, r3]
	temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000568:	1cbb      	adds	r3, r7, #2
 800056a:	881b      	ldrh	r3, [r3, #0]
 800056c:	08db      	lsrs	r3, r3, #3
 800056e:	b29b      	uxth	r3, r3
 8000570:	001a      	movs	r2, r3
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	3208      	adds	r2, #8
 8000576:	0092      	lsls	r2, r2, #2
 8000578:	58d3      	ldr	r3, [r2, r3]
 800057a:	68fa      	ldr	r2, [r7, #12]
 800057c:	4313      	orrs	r3, r2
 800057e:	60bb      	str	r3, [r7, #8]
	GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000580:	1cbb      	adds	r3, r7, #2
 8000582:	881b      	ldrh	r3, [r3, #0]
 8000584:	08db      	lsrs	r3, r3, #3
 8000586:	b29b      	uxth	r3, r3
 8000588:	001a      	movs	r2, r3
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	3208      	adds	r2, #8
 800058e:	0092      	lsls	r2, r2, #2
 8000590:	68b9      	ldr	r1, [r7, #8]
 8000592:	50d1      	str	r1, [r2, r3]
}
 8000594:	46c0      	nop			; (mov r8, r8)
 8000596:	46bd      	mov	sp, r7
 8000598:	b004      	add	sp, #16
 800059a:	bd80      	pop	{r7, pc}

0800059c <I2C_DeInit>:
/**
 * @brief  Deinitializes the I2Cx peripheral registers to their default reset values.
 * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 * @retval None
 */
void I2C_DeInit(I2C_TypeDef *I2Cx) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_I2C_ALL_PERIPH(I2Cx));

	if (I2Cx == I2C1) {
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	4a10      	ldr	r2, [pc, #64]	; (80005e8 <I2C_DeInit+0x4c>)
 80005a8:	4293      	cmp	r3, r2
 80005aa:	d10c      	bne.n	80005c6 <I2C_DeInit+0x2a>
		/* Enable I2C1 reset state */
		RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 80005ac:	2380      	movs	r3, #128	; 0x80
 80005ae:	039b      	lsls	r3, r3, #14
 80005b0:	2101      	movs	r1, #1
 80005b2:	0018      	movs	r0, r3
 80005b4:	f000 f9ee 	bl	8000994 <RCC_APB1PeriphResetCmd>
		/* Release I2C1 from reset state */
		RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
 80005b8:	2380      	movs	r3, #128	; 0x80
 80005ba:	039b      	lsls	r3, r3, #14
 80005bc:	2100      	movs	r1, #0
 80005be:	0018      	movs	r0, r3
 80005c0:	f000 f9e8 	bl	8000994 <RCC_APB1PeriphResetCmd>
		/* Enable I2C2 reset state */
		RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
		/* Release I2C2 from reset state */
		RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
	}
}
 80005c4:	e00b      	b.n	80005de <I2C_DeInit+0x42>
		RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 80005c6:	2380      	movs	r3, #128	; 0x80
 80005c8:	03db      	lsls	r3, r3, #15
 80005ca:	2101      	movs	r1, #1
 80005cc:	0018      	movs	r0, r3
 80005ce:	f000 f9e1 	bl	8000994 <RCC_APB1PeriphResetCmd>
		RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
 80005d2:	2380      	movs	r3, #128	; 0x80
 80005d4:	03db      	lsls	r3, r3, #15
 80005d6:	2100      	movs	r1, #0
 80005d8:	0018      	movs	r0, r3
 80005da:	f000 f9db 	bl	8000994 <RCC_APB1PeriphResetCmd>
}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	46bd      	mov	sp, r7
 80005e2:	b002      	add	sp, #8
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	40005400 	.word	0x40005400

080005ec <I2C_Init>:
 * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
 *         contains the configuration information for the specified I2C peripheral.
 * @retval None
 */
void I2C_Init(I2C_TypeDef *I2Cx, I2C_InitTypeDef *I2C_InitStruct) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	6039      	str	r1, [r7, #0]
	uint32_t tmpreg = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	60fb      	str	r3, [r7, #12]
	assert_param(
			IS_I2C_ACKNOWLEDGE_ADDRESS(
					I2C_InitStruct->I2C_AcknowledgedAddress));

	/* Disable I2Cx Peripheral */
	I2Cx->CR1 &= (uint32_t) ~((uint32_t) I2C_CR1_PE);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2201      	movs	r2, #1
 8000600:	4393      	bics	r3, r2
 8000602:	001a      	movs	r2, r3
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	601a      	str	r2, [r3, #0]

	/*---------------------------- I2Cx FILTERS Configuration ------------------*/
	/* Get the I2Cx CR1 value */
	tmpreg = I2Cx->CR1;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	60fb      	str	r3, [r7, #12]
	/* Clear I2Cx CR1 register */
	tmpreg &= CR1_CLEAR_MASK;
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	4a27      	ldr	r2, [pc, #156]	; (80006b0 <I2C_Init+0xc4>)
 8000612:	4013      	ands	r3, r2
 8000614:	60fb      	str	r3, [r7, #12]
	/* Configure I2Cx: analog and digital filter */
	/* Set ANFOFF bit according to I2C_AnalogFilter value */
	/* Set DFN bits according to I2C_DigitalFilter value */
	tmpreg |= (uint32_t) I2C_InitStruct->I2C_AnalogFilter
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	685a      	ldr	r2, [r3, #4]
			| (I2C_InitStruct->I2C_DigitalFilter << 8);
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	689b      	ldr	r3, [r3, #8]
 800061e:	021b      	lsls	r3, r3, #8
 8000620:	4313      	orrs	r3, r2
	tmpreg |= (uint32_t) I2C_InitStruct->I2C_AnalogFilter
 8000622:	68fa      	ldr	r2, [r7, #12]
 8000624:	4313      	orrs	r3, r2
 8000626:	60fb      	str	r3, [r7, #12]

	/* Write to I2Cx CR1 */
	I2Cx->CR1 = tmpreg;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	68fa      	ldr	r2, [r7, #12]
 800062c:	601a      	str	r2, [r3, #0]

	/*---------------------------- I2Cx TIMING Configuration -------------------*/
	/* Configure I2Cx: Timing */
	/* Set TIMINGR bits according to I2C_Timing */
	/* Write to I2Cx TIMING */
	I2Cx->TIMINGR = I2C_InitStruct->I2C_Timing & TIMING_CLEAR_MASK;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a20      	ldr	r2, [pc, #128]	; (80006b4 <I2C_Init+0xc8>)
 8000634:	401a      	ands	r2, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	611a      	str	r2, [r3, #16]

	/* Enable I2Cx Peripheral */
	I2Cx->CR1 |= I2C_CR1_PE;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	2201      	movs	r2, #1
 8000640:	431a      	orrs	r2, r3
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	601a      	str	r2, [r3, #0]

	/*---------------------------- I2Cx OAR1 Configuration ---------------------*/
	/* Clear tmpreg local variable */
	tmpreg = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	60fb      	str	r3, [r7, #12]
	/* Clear OAR1 register */
	I2Cx->OAR1 = (uint32_t) tmpreg;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	68fa      	ldr	r2, [r7, #12]
 800064e:	609a      	str	r2, [r3, #8]
	/* Clear OAR2 register */
	I2Cx->OAR2 = (uint32_t) tmpreg;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	68fa      	ldr	r2, [r7, #12]
 8000654:	60da      	str	r2, [r3, #12]
	/* Configure I2Cx: Own Address1 and acknowledged address */
	/* Set OA1MODE bit according to I2C_AcknowledgedAddress value */
	/* Set OA1 bits according to I2C_OwnAddress1 value */
	tmpreg = (uint32_t) ((uint32_t) I2C_InitStruct->I2C_AcknowledgedAddress
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	699a      	ldr	r2, [r3, #24]
			| (uint32_t) I2C_InitStruct->I2C_OwnAddress1);
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	691b      	ldr	r3, [r3, #16]
	tmpreg = (uint32_t) ((uint32_t) I2C_InitStruct->I2C_AcknowledgedAddress
 800065e:	4313      	orrs	r3, r2
 8000660:	60fb      	str	r3, [r7, #12]
	/* Write to I2Cx OAR1 */
	I2Cx->OAR1 = tmpreg;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	609a      	str	r2, [r3, #8]
	/* Enable Own Address1 acknowledgement */
	I2Cx->OAR1 |= I2C_OAR1_OA1EN;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	689b      	ldr	r3, [r3, #8]
 800066c:	2280      	movs	r2, #128	; 0x80
 800066e:	0212      	lsls	r2, r2, #8
 8000670:	431a      	orrs	r2, r3
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	609a      	str	r2, [r3, #8]

	/*---------------------------- I2Cx MODE Configuration ---------------------*/
	/* Configure I2Cx: mode */
	/* Set SMBDEN and SMBHEN bits according to I2C_Mode value */
	tmpreg = I2C_InitStruct->I2C_Mode;
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	68db      	ldr	r3, [r3, #12]
 800067a:	60fb      	str	r3, [r7, #12]
	/* Write to I2Cx CR1 */
	I2Cx->CR1 |= tmpreg;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	431a      	orrs	r2, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	601a      	str	r2, [r3, #0]

	/*---------------------------- I2Cx ACK Configuration ----------------------*/
	/* Get the I2Cx CR2 value */
	tmpreg = I2Cx->CR2;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	685b      	ldr	r3, [r3, #4]
 800068c:	60fb      	str	r3, [r7, #12]
	/* Clear I2Cx CR2 register */
	tmpreg &= CR2_CLEAR_MASK;
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	4a09      	ldr	r2, [pc, #36]	; (80006b8 <I2C_Init+0xcc>)
 8000692:	4013      	ands	r3, r2
 8000694:	60fb      	str	r3, [r7, #12]
	/* Configure I2Cx: acknowledgement */
	/* Set NACK bit according to I2C_Ack value */
	tmpreg |= I2C_InitStruct->I2C_Ack;
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	68fa      	ldr	r2, [r7, #12]
 800069c:	4313      	orrs	r3, r2
 800069e:	60fb      	str	r3, [r7, #12]
	/* Write to I2Cx CR2 */
	I2Cx->CR2 = tmpreg;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	68fa      	ldr	r2, [r7, #12]
 80006a4:	605a      	str	r2, [r3, #4]
}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	b004      	add	sp, #16
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	00cfe0ff 	.word	0x00cfe0ff
 80006b4:	f0ffffff 	.word	0xf0ffffff
 80006b8:	07ff7fff 	.word	0x07ff7fff

080006bc <I2C_Cmd>:
 * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 * @param  NewState: new state of the I2Cx peripheral. 
 *          This parameter can be: ENABLE or DISABLE.
 * @retval None
 */
void I2C_Cmd(I2C_TypeDef *I2Cx, FunctionalState NewState) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	000a      	movs	r2, r1
 80006c6:	1cfb      	adds	r3, r7, #3
 80006c8:	701a      	strb	r2, [r3, #0]
	/* Check the parameters */
	assert_param(IS_I2C_ALL_PERIPH(I2Cx));
	assert_param(IS_FUNCTIONAL_STATE(NewState));
	if (NewState != DISABLE) {
 80006ca:	1cfb      	adds	r3, r7, #3
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d006      	beq.n	80006e0 <I2C_Cmd+0x24>
		/* Enable the selected I2C peripheral */
		I2Cx->CR1 |= I2C_CR1_PE;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	2201      	movs	r2, #1
 80006d8:	431a      	orrs	r2, r3
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	601a      	str	r2, [r3, #0]
	} else {
		/* Disable the selected I2C peripheral */
		I2Cx->CR1 &= (uint32_t) ~((uint32_t) I2C_CR1_PE);
	}
}
 80006de:	e006      	b.n	80006ee <I2C_Cmd+0x32>
		I2Cx->CR1 &= (uint32_t) ~((uint32_t) I2C_CR1_PE);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2201      	movs	r2, #1
 80006e6:	4393      	bics	r3, r2
 80006e8:	001a      	movs	r2, r3
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	601a      	str	r2, [r3, #0]
}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	b002      	add	sp, #8
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <I2C_TransferHandling>:
 *            @arg I2C_Generate_Start_Read: Generate Restart for read request.
 *            @arg I2C_Generate_Start_Write: Generate Restart for write request.
 * @retval None
 */
void I2C_TransferHandling(I2C_TypeDef *I2Cx, uint16_t Address,
		uint8_t Number_Bytes, uint32_t ReloadEndMode, uint32_t StartStopMode) {
 80006f8:	b590      	push	{r4, r7, lr}
 80006fa:	b087      	sub	sp, #28
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	0008      	movs	r0, r1
 8000702:	0011      	movs	r1, r2
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	240a      	movs	r4, #10
 8000708:	193b      	adds	r3, r7, r4
 800070a:	1c02      	adds	r2, r0, #0
 800070c:	801a      	strh	r2, [r3, #0]
 800070e:	2009      	movs	r0, #9
 8000710:	183b      	adds	r3, r7, r0
 8000712:	1c0a      	adds	r2, r1, #0
 8000714:	701a      	strb	r2, [r3, #0]
	uint32_t tmpreg = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	617b      	str	r3, [r7, #20]
	assert_param(IS_I2C_SLAVE_ADDRESS(Address));
	assert_param(IS_RELOAD_END_MODE(ReloadEndMode));
	assert_param(IS_START_STOP_MODE(StartStopMode));

	/* Get the CR2 register value */
	tmpreg = I2Cx->CR2;
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	685b      	ldr	r3, [r3, #4]
 800071e:	617b      	str	r3, [r7, #20]

	/* clear tmpreg specific bits */
	tmpreg &= (uint32_t) ~((uint32_t) (I2C_CR2_SADD | I2C_CR2_NBYTES
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	4a0e      	ldr	r2, [pc, #56]	; (800075c <I2C_TransferHandling+0x64>)
 8000724:	4013      	ands	r3, r2
 8000726:	617b      	str	r3, [r7, #20]
			| I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START
			| I2C_CR2_STOP));

	/* update tmpreg */
	tmpreg |= (uint32_t) (((uint32_t) Address & I2C_CR2_SADD)
 8000728:	193b      	adds	r3, r7, r4
 800072a:	881b      	ldrh	r3, [r3, #0]
 800072c:	059b      	lsls	r3, r3, #22
 800072e:	0d9a      	lsrs	r2, r3, #22
			| (((uint32_t) Number_Bytes << 16) & I2C_CR2_NBYTES)
 8000730:	183b      	adds	r3, r7, r0
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	0419      	lsls	r1, r3, #16
 8000736:	23ff      	movs	r3, #255	; 0xff
 8000738:	041b      	lsls	r3, r3, #16
 800073a:	400b      	ands	r3, r1
 800073c:	431a      	orrs	r2, r3
			| (uint32_t) ReloadEndMode | (uint32_t) StartStopMode);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	431a      	orrs	r2, r3
	tmpreg |= (uint32_t) (((uint32_t) Address & I2C_CR2_SADD)
 8000742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000744:	4313      	orrs	r3, r2
 8000746:	697a      	ldr	r2, [r7, #20]
 8000748:	4313      	orrs	r3, r2
 800074a:	617b      	str	r3, [r7, #20]

	/* update CR2 register */
	I2Cx->CR2 = tmpreg;
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	697a      	ldr	r2, [r7, #20]
 8000750:	605a      	str	r2, [r3, #4]
}
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	46bd      	mov	sp, r7
 8000756:	b007      	add	sp, #28
 8000758:	bd90      	pop	{r4, r7, pc}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	fc009800 	.word	0xfc009800

08000760 <I2C_SendData>:
 * @brief  Sends a data byte through the I2Cx peripheral.
 * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 * @param  Data: Byte to be transmitted..
 * @retval None
 */
void I2C_SendData(I2C_TypeDef *I2Cx, uint8_t Data) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	000a      	movs	r2, r1
 800076a:	1cfb      	adds	r3, r7, #3
 800076c:	701a      	strb	r2, [r3, #0]
	/* Check the parameters */
	assert_param(IS_I2C_ALL_PERIPH(I2Cx));

	/* Write in the DR register the data to be sent */
	I2Cx->TXDR = (uint8_t) Data;
 800076e:	1cfb      	adds	r3, r7, #3
 8000770:	781a      	ldrb	r2, [r3, #0]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	46bd      	mov	sp, r7
 800077a:	b002      	add	sp, #8
 800077c:	bd80      	pop	{r7, pc}

0800077e <I2C_ReceiveData>:
/**
 * @brief  Returns the most recent received data by the I2Cx peripheral.
 * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 * @retval The value of the received data.
 */
uint8_t I2C_ReceiveData(I2C_TypeDef *I2Cx) {
 800077e:	b580      	push	{r7, lr}
 8000780:	b082      	sub	sp, #8
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_I2C_ALL_PERIPH(I2Cx));

	/* Return the data in the DR register */
	return (uint8_t) I2Cx->RXDR;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800078a:	b2db      	uxtb	r3, r3
}
 800078c:	0018      	movs	r0, r3
 800078e:	46bd      	mov	sp, r7
 8000790:	b002      	add	sp, #8
 8000792:	bd80      	pop	{r7, pc}

08000794 <I2C_GetFlagStatus>:
 *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow detection flag
 *            @arg I2C_FLAG_ALERT: SMBus Alert
 *            @arg I2C_FLAG_BUSY: Bus busy
 * @retval The new state of I2C_FLAG (SET or RESET).
 */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef *I2Cx, uint32_t I2C_FLAG) {
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	6039      	str	r1, [r7, #0]
	uint32_t tmpreg = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
	FlagStatus bitstatus = RESET;
 80007a2:	210f      	movs	r1, #15
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	2200      	movs	r2, #0
 80007a8:	701a      	strb	r2, [r3, #0]
	/* Check the parameters */
	assert_param(IS_I2C_ALL_PERIPH(I2Cx));
	assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

	/* Get the ISR register value */
	tmpreg = I2Cx->ISR;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	699b      	ldr	r3, [r3, #24]
 80007ae:	60bb      	str	r3, [r7, #8]

	/* Get flag status */
	tmpreg &= I2C_FLAG;
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	683a      	ldr	r2, [r7, #0]
 80007b4:	4013      	ands	r3, r2
 80007b6:	60bb      	str	r3, [r7, #8]

	if (tmpreg != 0) {
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d003      	beq.n	80007c6 <I2C_GetFlagStatus+0x32>
		/* I2C_FLAG is set */
		bitstatus = SET;
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	2201      	movs	r2, #1
 80007c2:	701a      	strb	r2, [r3, #0]
 80007c4:	e003      	b.n	80007ce <I2C_GetFlagStatus+0x3a>
	} else {
		/* I2C_FLAG is reset */
		bitstatus = RESET;
 80007c6:	230f      	movs	r3, #15
 80007c8:	18fb      	adds	r3, r7, r3
 80007ca:	2200      	movs	r2, #0
 80007cc:	701a      	strb	r2, [r3, #0]
	}
	return bitstatus;
 80007ce:	230f      	movs	r3, #15
 80007d0:	18fb      	adds	r3, r7, r3
 80007d2:	781b      	ldrb	r3, [r3, #0]
}
 80007d4:	0018      	movs	r0, r3
 80007d6:	46bd      	mov	sp, r7
 80007d8:	b004      	add	sp, #16
 80007da:	bd80      	pop	{r7, pc}

080007dc <I2C_ClearFlag>:
 *            @arg I2C_FLAG_PECERR: PEC error in reception
 *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow detection flag
 *            @arg I2C_FLAG_ALERT: SMBus Alert
 * @retval The new state of I2C_FLAG (SET or RESET).
 */
void I2C_ClearFlag(I2C_TypeDef *I2Cx, uint32_t I2C_FLAG) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	6039      	str	r1, [r7, #0]
	/* Check the parameters */
	assert_param(IS_I2C_ALL_PERIPH(I2Cx));
	assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));

	/* Clear the selected flag */
	I2Cx->ICR = I2C_FLAG;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	683a      	ldr	r2, [r7, #0]
 80007ea:	61da      	str	r2, [r3, #28]
}
 80007ec:	46c0      	nop			; (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	b002      	add	sp, #8
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <NVIC_Init>:
 *         parameters in the NVIC_InitStruct.
 * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
 *         the configuration information for the specified NVIC peripheral.
 * @retval None
 */
void NVIC_Init(NVIC_InitTypeDef *NVIC_InitStruct) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	uint32_t tmppriority = 0x00;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]

	/* Check the parameters */
	assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
	assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));

	if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE) {
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	789b      	ldrb	r3, [r3, #2]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d039      	beq.n	800087c <NVIC_Init+0x88>
		/* Compute the Corresponding IRQ Priority --------------------------------*/
		tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 8000808:	4a24      	ldr	r2, [pc, #144]	; (800089c <NVIC_Init+0xa8>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	089b      	lsrs	r3, r3, #2
 8000810:	b2db      	uxtb	r3, r3
 8000812:	33c0      	adds	r3, #192	; 0xc0
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	589b      	ldr	r3, [r3, r2]
 8000818:	60fb      	str	r3, [r7, #12]
		tmppriority &= (uint32_t) (~(((uint32_t) 0xFF)
				<< ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	001a      	movs	r2, r3
 8000820:	2303      	movs	r3, #3
 8000822:	4013      	ands	r3, r2
 8000824:	00db      	lsls	r3, r3, #3
 8000826:	22ff      	movs	r2, #255	; 0xff
 8000828:	409a      	lsls	r2, r3
 800082a:	0013      	movs	r3, r2
		tmppriority &= (uint32_t) (~(((uint32_t) 0xFF)
 800082c:	43da      	mvns	r2, r3
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	4013      	ands	r3, r2
 8000832:	60fb      	str	r3, [r7, #12]
		tmppriority |=
				(uint32_t) ((((uint32_t) NVIC_InitStruct->NVIC_IRQChannelPriority
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	785b      	ldrb	r3, [r3, #1]
						<< 6) & 0xFF)
 8000838:	019b      	lsls	r3, r3, #6
 800083a:	22ff      	movs	r2, #255	; 0xff
 800083c:	401a      	ands	r2, r3
						<< ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8));
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	0019      	movs	r1, r3
 8000844:	2303      	movs	r3, #3
 8000846:	400b      	ands	r3, r1
 8000848:	00db      	lsls	r3, r3, #3
				(uint32_t) ((((uint32_t) NVIC_InitStruct->NVIC_IRQChannelPriority
 800084a:	409a      	lsls	r2, r3
 800084c:	0013      	movs	r3, r2
		tmppriority |=
 800084e:	68fa      	ldr	r2, [r7, #12]
 8000850:	4313      	orrs	r3, r2
 8000852:	60fb      	str	r3, [r7, #12]

		NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02] = tmppriority;
 8000854:	4911      	ldr	r1, [pc, #68]	; (800089c <NVIC_Init+0xa8>)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	089b      	lsrs	r3, r3, #2
 800085c:	b2db      	uxtb	r3, r3
 800085e:	33c0      	adds	r3, #192	; 0xc0
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	68fa      	ldr	r2, [r7, #12]
 8000864:	505a      	str	r2, [r3, r1]

		/* Enable the Selected IRQ Channels --------------------------------------*/
		NVIC->ISER[0] = (uint32_t) 0x01
				<< (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t) 0x1F);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	001a      	movs	r2, r3
 800086c:	231f      	movs	r3, #31
 800086e:	401a      	ands	r2, r3
		NVIC->ISER[0] = (uint32_t) 0x01
 8000870:	4b0a      	ldr	r3, [pc, #40]	; (800089c <NVIC_Init+0xa8>)
				<< (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t) 0x1F);
 8000872:	2101      	movs	r1, #1
 8000874:	4091      	lsls	r1, r2
 8000876:	000a      	movs	r2, r1
		NVIC->ISER[0] = (uint32_t) 0x01
 8000878:	601a      	str	r2, [r3, #0]
	} else {
		/* Disable the Selected IRQ Channels -------------------------------------*/
		NVIC->ICER[0] = (uint32_t) 0x01
				<< (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t) 0x1F);
	}
}
 800087a:	e00a      	b.n	8000892 <NVIC_Init+0x9e>
				<< (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t) 0x1F);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	001a      	movs	r2, r3
 8000882:	231f      	movs	r3, #31
 8000884:	4013      	ands	r3, r2
		NVIC->ICER[0] = (uint32_t) 0x01
 8000886:	4905      	ldr	r1, [pc, #20]	; (800089c <NVIC_Init+0xa8>)
				<< (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t) 0x1F);
 8000888:	2201      	movs	r2, #1
 800088a:	409a      	lsls	r2, r3
 800088c:	0013      	movs	r3, r2
		NVIC->ICER[0] = (uint32_t) 0x01
 800088e:	2280      	movs	r2, #128	; 0x80
 8000890:	508b      	str	r3, [r1, r2]
}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	b004      	add	sp, #16
 8000898:	bd80      	pop	{r7, pc}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	e000e100 	.word	0xe000e100

080008a0 <SysTick_CLKSourceConfig>:
 *          This parameter can be one of the following values:
 *            @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
 *            @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
 * @retval None
 */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));

	if (SysTick_CLKSource == SysTick_CLKSource_HCLK) {
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2b04      	cmp	r3, #4
 80008ac:	d106      	bne.n	80008bc <SysTick_CLKSourceConfig+0x1c>
		SysTick->CTRL |= SysTick_CLKSource_HCLK;
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <SysTick_CLKSourceConfig+0x30>)
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <SysTick_CLKSourceConfig+0x30>)
 80008b4:	2104      	movs	r1, #4
 80008b6:	430a      	orrs	r2, r1
 80008b8:	601a      	str	r2, [r3, #0]
	} else {
		SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
	}
}
 80008ba:	e005      	b.n	80008c8 <SysTick_CLKSourceConfig+0x28>
		SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 80008bc:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <SysTick_CLKSourceConfig+0x30>)
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	4b03      	ldr	r3, [pc, #12]	; (80008d0 <SysTick_CLKSourceConfig+0x30>)
 80008c2:	2104      	movs	r1, #4
 80008c4:	438a      	bics	r2, r1
 80008c6:	601a      	str	r2, [r3, #0]
}
 80008c8:	46c0      	nop			; (mov r8, r8)
 80008ca:	46bd      	mov	sp, r7
 80008cc:	b002      	add	sp, #8
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	e000e010 	.word	0xe000e010

080008d4 <RCC_AHBPeriphClockCmd>:
 *             @arg RCC_AHBPeriph_DMA1:  DMA1 clock
 * @param  NewState: new state of the specified peripheral clock.
 *          This parameter can be: ENABLE or DISABLE.
 * @retval None
 */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	000a      	movs	r2, r1
 80008de:	1cfb      	adds	r3, r7, #3
 80008e0:	701a      	strb	r2, [r3, #0]
	/* Check the parameters */
	assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
	assert_param(IS_FUNCTIONAL_STATE(NewState));

	if (NewState != DISABLE) {
 80008e2:	1cfb      	adds	r3, r7, #3
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d006      	beq.n	80008f8 <RCC_AHBPeriphClockCmd+0x24>
		RCC->AHBENR |= RCC_AHBPeriph;
 80008ea:	4b09      	ldr	r3, [pc, #36]	; (8000910 <RCC_AHBPeriphClockCmd+0x3c>)
 80008ec:	6959      	ldr	r1, [r3, #20]
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <RCC_AHBPeriphClockCmd+0x3c>)
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	430a      	orrs	r2, r1
 80008f4:	615a      	str	r2, [r3, #20]
	} else {
		RCC->AHBENR &= ~RCC_AHBPeriph;
	}
}
 80008f6:	e006      	b.n	8000906 <RCC_AHBPeriphClockCmd+0x32>
		RCC->AHBENR &= ~RCC_AHBPeriph;
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <RCC_AHBPeriphClockCmd+0x3c>)
 80008fa:	695a      	ldr	r2, [r3, #20]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	43d9      	mvns	r1, r3
 8000900:	4b03      	ldr	r3, [pc, #12]	; (8000910 <RCC_AHBPeriphClockCmd+0x3c>)
 8000902:	400a      	ands	r2, r1
 8000904:	615a      	str	r2, [r3, #20]
}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	46bd      	mov	sp, r7
 800090a:	b002      	add	sp, #8
 800090c:	bd80      	pop	{r7, pc}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	40021000 	.word	0x40021000

08000914 <RCC_APB2PeriphClockCmd>:
 *             @arg RCC_APB2Periph_DBGMCU: DBGMCU clock
 * @param  NewState: new state of the specified peripheral clock.
 *          This parameter can be: ENABLE or DISABLE.
 * @retval None
 */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	000a      	movs	r2, r1
 800091e:	1cfb      	adds	r3, r7, #3
 8000920:	701a      	strb	r2, [r3, #0]
	/* Check the parameters */
	assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
	assert_param(IS_FUNCTIONAL_STATE(NewState));

	if (NewState != DISABLE) {
 8000922:	1cfb      	adds	r3, r7, #3
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d006      	beq.n	8000938 <RCC_APB2PeriphClockCmd+0x24>
		RCC->APB2ENR |= RCC_APB2Periph;
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <RCC_APB2PeriphClockCmd+0x3c>)
 800092c:	6999      	ldr	r1, [r3, #24]
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <RCC_APB2PeriphClockCmd+0x3c>)
 8000930:	687a      	ldr	r2, [r7, #4]
 8000932:	430a      	orrs	r2, r1
 8000934:	619a      	str	r2, [r3, #24]
	} else {
		RCC->APB2ENR &= ~RCC_APB2Periph;
	}
}
 8000936:	e006      	b.n	8000946 <RCC_APB2PeriphClockCmd+0x32>
		RCC->APB2ENR &= ~RCC_APB2Periph;
 8000938:	4b05      	ldr	r3, [pc, #20]	; (8000950 <RCC_APB2PeriphClockCmd+0x3c>)
 800093a:	699a      	ldr	r2, [r3, #24]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	43d9      	mvns	r1, r3
 8000940:	4b03      	ldr	r3, [pc, #12]	; (8000950 <RCC_APB2PeriphClockCmd+0x3c>)
 8000942:	400a      	ands	r2, r1
 8000944:	619a      	str	r2, [r3, #24]
}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	46bd      	mov	sp, r7
 800094a:	b002      	add	sp, #8
 800094c:	bd80      	pop	{r7, pc}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	40021000 	.word	0x40021000

08000954 <RCC_APB1PeriphClockCmd>:
 *           @arg RCC_APB1Periph_CEC:    CEC clock, applicable only for STM32F051, STM32F042 and STM32F072 devices                               
 * @param  NewState: new state of the specified peripheral clock.
 *          This parameter can be: ENABLE or DISABLE.
 * @retval None
 */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState) {
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	000a      	movs	r2, r1
 800095e:	1cfb      	adds	r3, r7, #3
 8000960:	701a      	strb	r2, [r3, #0]
	/* Check the parameters */
	assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
	assert_param(IS_FUNCTIONAL_STATE(NewState));

	if (NewState != DISABLE) {
 8000962:	1cfb      	adds	r3, r7, #3
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d006      	beq.n	8000978 <RCC_APB1PeriphClockCmd+0x24>
		RCC->APB1ENR |= RCC_APB1Periph;
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <RCC_APB1PeriphClockCmd+0x3c>)
 800096c:	69d9      	ldr	r1, [r3, #28]
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <RCC_APB1PeriphClockCmd+0x3c>)
 8000970:	687a      	ldr	r2, [r7, #4]
 8000972:	430a      	orrs	r2, r1
 8000974:	61da      	str	r2, [r3, #28]
	} else {
		RCC->APB1ENR &= ~RCC_APB1Periph;
	}
}
 8000976:	e006      	b.n	8000986 <RCC_APB1PeriphClockCmd+0x32>
		RCC->APB1ENR &= ~RCC_APB1Periph;
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <RCC_APB1PeriphClockCmd+0x3c>)
 800097a:	69da      	ldr	r2, [r3, #28]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	43d9      	mvns	r1, r3
 8000980:	4b03      	ldr	r3, [pc, #12]	; (8000990 <RCC_APB1PeriphClockCmd+0x3c>)
 8000982:	400a      	ands	r2, r1
 8000984:	61da      	str	r2, [r3, #28]
}
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	46bd      	mov	sp, r7
 800098a:	b002      	add	sp, #8
 800098c:	bd80      	pop	{r7, pc}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	40021000 	.word	0x40021000

08000994 <RCC_APB1PeriphResetCmd>:
 *           @arg RCC_APB1Periph_CEC:    CEC clock, applicable only for STM32F051 and STM32F072 devices  
 * @param  NewState: new state of the specified peripheral clock.
 *          This parameter can be: ENABLE or DISABLE.
 * @retval None
 */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState) {
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	000a      	movs	r2, r1
 800099e:	1cfb      	adds	r3, r7, #3
 80009a0:	701a      	strb	r2, [r3, #0]
	/* Check the parameters */
	assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
	assert_param(IS_FUNCTIONAL_STATE(NewState));

	if (NewState != DISABLE) {
 80009a2:	1cfb      	adds	r3, r7, #3
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d006      	beq.n	80009b8 <RCC_APB1PeriphResetCmd+0x24>
		RCC->APB1RSTR |= RCC_APB1Periph;
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <RCC_APB1PeriphResetCmd+0x3c>)
 80009ac:	6919      	ldr	r1, [r3, #16]
 80009ae:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <RCC_APB1PeriphResetCmd+0x3c>)
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	430a      	orrs	r2, r1
 80009b4:	611a      	str	r2, [r3, #16]
	} else {
		RCC->APB1RSTR &= ~RCC_APB1Periph;
	}
}
 80009b6:	e006      	b.n	80009c6 <RCC_APB1PeriphResetCmd+0x32>
		RCC->APB1RSTR &= ~RCC_APB1Periph;
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <RCC_APB1PeriphResetCmd+0x3c>)
 80009ba:	691a      	ldr	r2, [r3, #16]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	43d9      	mvns	r1, r3
 80009c0:	4b03      	ldr	r3, [pc, #12]	; (80009d0 <RCC_APB1PeriphResetCmd+0x3c>)
 80009c2:	400a      	ands	r2, r1
 80009c4:	611a      	str	r2, [r3, #16]
}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	46bd      	mov	sp, r7
 80009ca:	b002      	add	sp, #8
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	40021000 	.word	0x40021000

080009d4 <SYSCFG_EXTILineConfig>:
 *         For STM32F072: (0..15) for GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, (0..10) for GPIOF.
 *         For STM32F031: (0..15) for GPIOA, GPIOB, (13..15) for GPIOC and (0..1, 6..7) for GPIOF.
 * @retval None
 */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx,
		uint8_t EXTI_PinSourcex) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	0002      	movs	r2, r0
 80009dc:	1dfb      	adds	r3, r7, #7
 80009de:	701a      	strb	r2, [r3, #0]
 80009e0:	1dbb      	adds	r3, r7, #6
 80009e2:	1c0a      	adds	r2, r1, #0
 80009e4:	701a      	strb	r2, [r3, #0]
	uint32_t tmp = 0x00;
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]

	/* Check the parameters */
	assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
	assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

	tmp = ((uint32_t) 0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t) 0x03));
 80009ea:	1dbb      	adds	r3, r7, #6
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2203      	movs	r2, #3
 80009f0:	4013      	ands	r3, r2
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	220f      	movs	r2, #15
 80009f6:	409a      	lsls	r2, r3
 80009f8:	0013      	movs	r3, r2
 80009fa:	60fb      	str	r3, [r7, #12]
	SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80009fc:	4a18      	ldr	r2, [pc, #96]	; (8000a60 <SYSCFG_EXTILineConfig+0x8c>)
 80009fe:	1dbb      	adds	r3, r7, #6
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	089b      	lsrs	r3, r3, #2
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	3302      	adds	r3, #2
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	589b      	ldr	r3, [r3, r2]
 8000a0c:	68fa      	ldr	r2, [r7, #12]
 8000a0e:	43d2      	mvns	r2, r2
 8000a10:	4813      	ldr	r0, [pc, #76]	; (8000a60 <SYSCFG_EXTILineConfig+0x8c>)
 8000a12:	1db9      	adds	r1, r7, #6
 8000a14:	7809      	ldrb	r1, [r1, #0]
 8000a16:	0889      	lsrs	r1, r1, #2
 8000a18:	b2c9      	uxtb	r1, r1
 8000a1a:	401a      	ands	r2, r3
 8000a1c:	1c8b      	adds	r3, r1, #2
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	501a      	str	r2, [r3, r0]
	SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |=
 8000a22:	4a0f      	ldr	r2, [pc, #60]	; (8000a60 <SYSCFG_EXTILineConfig+0x8c>)
 8000a24:	1dbb      	adds	r3, r7, #6
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	089b      	lsrs	r3, r3, #2
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	3302      	adds	r3, #2
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	589a      	ldr	r2, [r3, r2]
			(((uint32_t) EXTI_PortSourceGPIOx)
 8000a32:	1dfb      	adds	r3, r7, #7
 8000a34:	7819      	ldrb	r1, [r3, #0]
					<< (0x04 * (EXTI_PinSourcex & (uint8_t) 0x03)));
 8000a36:	1dbb      	adds	r3, r7, #6
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2003      	movs	r0, #3
 8000a3c:	4003      	ands	r3, r0
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	4099      	lsls	r1, r3
 8000a42:	000b      	movs	r3, r1
	SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |=
 8000a44:	4806      	ldr	r0, [pc, #24]	; (8000a60 <SYSCFG_EXTILineConfig+0x8c>)
 8000a46:	1db9      	adds	r1, r7, #6
 8000a48:	7809      	ldrb	r1, [r1, #0]
 8000a4a:	0889      	lsrs	r1, r1, #2
 8000a4c:	b2c9      	uxtb	r1, r1
 8000a4e:	431a      	orrs	r2, r3
 8000a50:	1c8b      	adds	r3, r1, #2
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	501a      	str	r2, [r3, r0]
}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	b004      	add	sp, #16
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	40010000 	.word	0x40010000

08000a64 <AppMgmt_AppInit>:
uint8_t app_active = 0;
bool	app_run = false;
#define APP_COUNT  	3

void AppMgmt_AppInit()
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
	switch(app_active)
 8000a68:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <AppMgmt_AppInit+0x3c>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b02      	cmp	r3, #2
 8000a6e:	d00d      	beq.n	8000a8c <AppMgmt_AppInit+0x28>
 8000a70:	dc0f      	bgt.n	8000a92 <AppMgmt_AppInit+0x2e>
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d002      	beq.n	8000a7c <AppMgmt_AppInit+0x18>
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d003      	beq.n	8000a82 <AppMgmt_AppInit+0x1e>
 8000a7a:	e00a      	b.n	8000a92 <AppMgmt_AppInit+0x2e>
	{
		case 0:
			PovD_Init();
 8000a7c:	f000 f8f6 	bl	8000c6c <PovD_Init>
			break;
 8000a80:	e007      	b.n	8000a92 <AppMgmt_AppInit+0x2e>
		case 1:
			PovD_DeInit();
 8000a82:	f000 f908 	bl	8000c96 <PovD_DeInit>
			Level_Init();
 8000a86:	f000 f85e 	bl	8000b46 <Level_Init>
			break;
 8000a8a:	e002      	b.n	8000a92 <AppMgmt_AppInit+0x2e>
		case 2:
			Playground_Init();
 8000a8c:	f000 f916 	bl	8000cbc <Playground_Init>
			break;
 8000a90:	46c0      	nop			; (mov r8, r8)
	}
	app_run = true;
 8000a92:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <AppMgmt_AppInit+0x40>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	701a      	strb	r2, [r3, #0]
}
 8000a98:	46c0      	nop			; (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	20000034 	.word	0x20000034
 8000aa4:	20000035 	.word	0x20000035

08000aa8 <AppMgmt_AppExec>:

void AppMgmt_AppExec()
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	if(!app_run)
 8000aac:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <AppMgmt_AppExec+0x40>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	4053      	eors	r3, r2
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d112      	bne.n	8000ae0 <AppMgmt_AppExec+0x38>
	{
		return;
	}
	switch(app_active)
 8000aba:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <AppMgmt_AppExec+0x44>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b02      	cmp	r3, #2
 8000ac0:	d00b      	beq.n	8000ada <AppMgmt_AppExec+0x32>
 8000ac2:	dc0e      	bgt.n	8000ae2 <AppMgmt_AppExec+0x3a>
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d002      	beq.n	8000ace <AppMgmt_AppExec+0x26>
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d003      	beq.n	8000ad4 <AppMgmt_AppExec+0x2c>
 8000acc:	e009      	b.n	8000ae2 <AppMgmt_AppExec+0x3a>
	{
	case 0:
		PovD_Exec();
 8000ace:	f000 f8dd 	bl	8000c8c <PovD_Exec>
		break;
 8000ad2:	e006      	b.n	8000ae2 <AppMgmt_AppExec+0x3a>
	case 1:
		Level_Exec();
 8000ad4:	f000 f844 	bl	8000b60 <Level_Exec>
		break;
 8000ad8:	e003      	b.n	8000ae2 <AppMgmt_AppExec+0x3a>
	case 2:
		Playground_Exec();
 8000ada:	f000 f8f4 	bl	8000cc6 <Playground_Exec>
		break;
 8000ade:	e000      	b.n	8000ae2 <AppMgmt_AppExec+0x3a>
		return;
 8000ae0:	46c0      	nop			; (mov r8, r8)
	}
}
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	20000035 	.word	0x20000035
 8000aec:	20000034 	.word	0x20000034

08000af0 <AppMgmt_CycleApps>:


void AppMgmt_CycleApps()
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
	app_run = false;
 8000af4:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <AppMgmt_CycleApps+0x3c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	701a      	strb	r2, [r3, #0]
	app_active++;
 8000afa:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <AppMgmt_CycleApps+0x40>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	3301      	adds	r3, #1
 8000b00:	b2da      	uxtb	r2, r3
 8000b02:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <AppMgmt_CycleApps+0x40>)
 8000b04:	701a      	strb	r2, [r3, #0]
	if(app_active >= APP_COUNT)
 8000b06:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <AppMgmt_CycleApps+0x40>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b02      	cmp	r3, #2
 8000b0c:	d902      	bls.n	8000b14 <AppMgmt_CycleApps+0x24>
	{
		app_active = 0;
 8000b0e:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <AppMgmt_CycleApps+0x40>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	701a      	strb	r2, [r3, #0]
	}
	apa102_Bargraph(app_active+1, 2);
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <AppMgmt_CycleApps+0x40>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	2102      	movs	r1, #2
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f000 fd21 	bl	8001566 <apa102_Bargraph>
}
 8000b24:	46c0      	nop			; (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	20000035 	.word	0x20000035
 8000b30:	20000034 	.word	0x20000034

08000b34 <AppMgmt_LoadApp>:

void AppMgmt_LoadApp()
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
	apa102_allOff();
 8000b38:	f000 fd5c 	bl	80015f4 <apa102_allOff>
	AppMgmt_AppInit();
 8000b3c:	f7ff ff92 	bl	8000a64 <AppMgmt_AppInit>
}
 8000b40:	46c0      	nop			; (mov r8, r8)
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <Level_Init>:

int16_t levelResult;
uint8_t led_pos;

void Level_Init()
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	af00      	add	r7, sp, #0
	mma8653_init();
 8000b4a:	f001 fa31 	bl	8001fb0 <mma8653_init>
	mma8653_setDataWidth(MMA8653_DATAWIDTH_8);
 8000b4e:	2000      	movs	r0, #0
 8000b50:	f001 fb16 	bl	8002180 <mma8653_setDataWidth>
	mma8653_setDataRate(RATE_12Hz5);
 8000b54:	2005      	movs	r0, #5
 8000b56:	f001 faee 	bl	8002136 <mma8653_setDataRate>
}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <Level_Exec>:

void Level_Exec()
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
	levelResult = mma8653_read8().y;
 8000b66:	f001 fb3d 	bl	80021e4 <mma8653_read8>
 8000b6a:	0003      	movs	r3, r0
 8000b6c:	001a      	movs	r2, r3
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	1c11      	adds	r1, r2, #0
 8000b72:	7019      	strb	r1, [r3, #0]
 8000b74:	0411      	lsls	r1, r2, #16
 8000b76:	0e09      	lsrs	r1, r1, #24
 8000b78:	7059      	strb	r1, [r3, #1]
 8000b7a:	0212      	lsls	r2, r2, #8
 8000b7c:	0e12      	lsrs	r2, r2, #24
 8000b7e:	709a      	strb	r2, [r3, #2]
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	785b      	ldrb	r3, [r3, #1]
 8000b84:	b25b      	sxtb	r3, r3
 8000b86:	b21a      	sxth	r2, r3
 8000b88:	4b1d      	ldr	r3, [pc, #116]	; (8000c00 <Level_Exec+0xa0>)
 8000b8a:	801a      	strh	r2, [r3, #0]
	if(levelResult == 0)
 8000b8c:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <Level_Exec+0xa0>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	5e9b      	ldrsh	r3, [r3, r2]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d106      	bne.n	8000ba4 <Level_Exec+0x44>
	{
		apa102_setPattern(0b0000000110000000,2);
 8000b96:	23c0      	movs	r3, #192	; 0xc0
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	2102      	movs	r1, #2
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	f000 fc65 	bl	800146c <apa102_setPattern>
		return;
 8000ba2:	e02a      	b.n	8000bfa <Level_Exec+0x9a>
	}
	if(levelResult < 0)
 8000ba4:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <Level_Exec+0xa0>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	5e9b      	ldrsh	r3, [r3, r2]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	da0f      	bge.n	8000bce <Level_Exec+0x6e>
	{
		led_pos = levelResult + 8;
 8000bae:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <Level_Exec+0xa0>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	5e9b      	ldrsh	r3, [r3, r2]
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	3308      	adds	r3, #8
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <Level_Exec+0xa4>)
 8000bbc:	701a      	strb	r2, [r3, #0]
		//lower limit
		if(led_pos > 250)
 8000bbe:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <Level_Exec+0xa4>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	2bfa      	cmp	r3, #250	; 0xfa
 8000bc4:	d912      	bls.n	8000bec <Level_Exec+0x8c>
		{
			led_pos = 0;
 8000bc6:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <Level_Exec+0xa4>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	701a      	strb	r2, [r3, #0]
 8000bcc:	e00e      	b.n	8000bec <Level_Exec+0x8c>
		}
	}
	else
	{	//levelPos > 0
		led_pos = levelResult + 7;
 8000bce:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <Level_Exec+0xa0>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	5e9b      	ldrsh	r3, [r3, r2]
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	3307      	adds	r3, #7
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <Level_Exec+0xa4>)
 8000bdc:	701a      	strb	r2, [r3, #0]
		//upper limit
		if(led_pos > 15)
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <Level_Exec+0xa4>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b0f      	cmp	r3, #15
 8000be4:	d902      	bls.n	8000bec <Level_Exec+0x8c>
		{
			led_pos = 15;
 8000be6:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <Level_Exec+0xa4>)
 8000be8:	220f      	movs	r2, #15
 8000bea:	701a      	strb	r2, [r3, #0]
		}
	}
	apa102_setSingle(led_pos,2);
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <Level_Exec+0xa4>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2102      	movs	r1, #2
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f000 fc9e 	bl	8001534 <apa102_setSingle>
	return;
 8000bf8:	46c0      	nop			; (mov r8, r8)
}
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	b002      	add	sp, #8
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000040 	.word	0x20000040
 8000c04:	20000042 	.word	0x20000042

08000c08 <NVIC_DisableIRQ>:

 The function disables a device-specific interrupt in the NVIC interrupt controller.

 \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	0002      	movs	r2, r0
 8000c10:	1dfb      	adds	r3, r7, #7
 8000c12:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (1 << ((uint32_t) (IRQn) & 0x1F));
 8000c14:	1dfb      	adds	r3, r7, #7
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	001a      	movs	r2, r3
 8000c1a:	231f      	movs	r3, #31
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	2201      	movs	r2, #1
 8000c20:	409a      	lsls	r2, r3
 8000c22:	0013      	movs	r3, r2
 8000c24:	4a03      	ldr	r2, [pc, #12]	; (8000c34 <NVIC_DisableIRQ+0x2c>)
 8000c26:	0019      	movs	r1, r3
 8000c28:	2380      	movs	r3, #128	; 0x80
 8000c2a:	50d1      	str	r1, [r2, r3]
}
 8000c2c:	46c0      	nop			; (mov r8, r8)
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	b002      	add	sp, #8
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	e000e100 	.word	0xe000e100

08000c38 <NVIC_ClearPendingIRQ>:

 The function clears the pending bit of an external interrupt.

 \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	0002      	movs	r2, r0
 8000c40:	1dfb      	adds	r3, r7, #7
 8000c42:	701a      	strb	r2, [r3, #0]
	NVIC->ICPR[0] = (1 << ((uint32_t) (IRQn) & 0x1F)); /* Clear pending interrupt */
 8000c44:	1dfb      	adds	r3, r7, #7
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	001a      	movs	r2, r3
 8000c4a:	231f      	movs	r3, #31
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	2201      	movs	r2, #1
 8000c50:	409a      	lsls	r2, r3
 8000c52:	0013      	movs	r3, r2
 8000c54:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <NVIC_ClearPendingIRQ+0x30>)
 8000c56:	0019      	movs	r1, r3
 8000c58:	23c0      	movs	r3, #192	; 0xc0
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	50d1      	str	r1, [r2, r3]
}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	46bd      	mov	sp, r7
 8000c62:	b002      	add	sp, #8
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	e000e100 	.word	0xe000e100

08000c6c <PovD_Init>:
 * -> no more than 16x64 pixels!!
 * for full color rgb, the complete frame already takes 3kB!
 */

void PovD_Init()
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
	NvMem_init();
 8000c70:	f001 fb42 	bl	80022f8 <NvMem_init>
	mma8653_init();
 8000c74:	f001 f99c 	bl	8001fb0 <mma8653_init>
	apa102_allOff();
 8000c78:	f000 fcbc 	bl	80015f4 <apa102_allOff>
	displayInit();
 8000c7c:	f000 fd06 	bl	800168c <displayInit>

	power_hold(10);
 8000c80:	200a      	movs	r0, #10
 8000c82:	f001 fc11 	bl	80024a8 <power_hold>
}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <PovD_Exec>:

void PovD_Exec()
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
			sprintf((char*)tempstring,"Error %i occured!\n",errorcode);
			USB_VCP_DataTx((uint8_t*)tempstring,0);
		}
		consoleExecute();
	}*/
}
 8000c90:	46c0      	nop			; (mov r8, r8)
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <PovD_DeInit>:

void PovD_DeInit()
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	af00      	add	r7, sp, #0
	mma6853_deInit();
 8000c9a:	f001 fb1b 	bl	80022d4 <mma6853_deInit>
	NVIC_DisableIRQ(TIM2_IRQn);
 8000c9e:	200f      	movs	r0, #15
 8000ca0:	f7ff ffb2 	bl	8000c08 <NVIC_DisableIRQ>
	NVIC_ClearPendingIRQ(TIM2_IRQn);
 8000ca4:	200f      	movs	r0, #15
 8000ca6:	f7ff ffc7 	bl	8000c38 <NVIC_ClearPendingIRQ>
	NVIC_DisableIRQ(TIM3_IRQn);
 8000caa:	2010      	movs	r0, #16
 8000cac:	f7ff ffac 	bl	8000c08 <NVIC_DisableIRQ>
	NVIC_ClearPendingIRQ(TIM3_IRQn);
 8000cb0:	2010      	movs	r0, #16
 8000cb2:	f7ff ffc1 	bl	8000c38 <NVIC_ClearPendingIRQ>

}
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <Playground_Init>:
#include "App_Playground.h"



void Playground_Init()
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0

}
 8000cc0:	46c0      	nop			; (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <Playground_Exec>:
void Playground_Exec()
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	af00      	add	r7, sp, #0

}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <NVIC_SetPriority>:
 \note The priority cannot be set for every core interrupt.

 \param [in]      IRQn  Interrupt number.
 \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority) {
 8000cd0:	b590      	push	{r4, r7, lr}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	0002      	movs	r2, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	1dfb      	adds	r3, r7, #7
 8000cdc:	701a      	strb	r2, [r3, #0]
	if (IRQn < 0) {
 8000cde:	1dfb      	adds	r3, r7, #7
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b7f      	cmp	r3, #127	; 0x7f
 8000ce4:	d932      	bls.n	8000d4c <NVIC_SetPriority+0x7c>
		SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)]
 8000ce6:	4a2f      	ldr	r2, [pc, #188]	; (8000da4 <NVIC_SetPriority+0xd4>)
 8000ce8:	1dfb      	adds	r3, r7, #7
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	0019      	movs	r1, r3
 8000cee:	230f      	movs	r3, #15
 8000cf0:	400b      	ands	r3, r1
 8000cf2:	3b08      	subs	r3, #8
 8000cf4:	089b      	lsrs	r3, r3, #2
 8000cf6:	3306      	adds	r3, #6
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	18d3      	adds	r3, r2, r3
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	681b      	ldr	r3, [r3, #0]
				& ~(0xFF << _BIT_SHIFT(IRQn)))
 8000d00:	1dfa      	adds	r2, r7, #7
 8000d02:	7812      	ldrb	r2, [r2, #0]
 8000d04:	0011      	movs	r1, r2
 8000d06:	2203      	movs	r2, #3
 8000d08:	400a      	ands	r2, r1
 8000d0a:	00d2      	lsls	r2, r2, #3
 8000d0c:	21ff      	movs	r1, #255	; 0xff
 8000d0e:	4091      	lsls	r1, r2
 8000d10:	000a      	movs	r2, r1
 8000d12:	43d2      	mvns	r2, r2
 8000d14:	401a      	ands	r2, r3
 8000d16:	0011      	movs	r1, r2
				| (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	019b      	lsls	r3, r3, #6
 8000d1c:	22ff      	movs	r2, #255	; 0xff
 8000d1e:	401a      	ands	r2, r3
						<< _BIT_SHIFT(IRQn));
 8000d20:	1dfb      	adds	r3, r7, #7
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	0018      	movs	r0, r3
 8000d26:	2303      	movs	r3, #3
 8000d28:	4003      	ands	r3, r0
 8000d2a:	00db      	lsls	r3, r3, #3
 8000d2c:	409a      	lsls	r2, r3
		SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)]
 8000d2e:	481d      	ldr	r0, [pc, #116]	; (8000da4 <NVIC_SetPriority+0xd4>)
 8000d30:	1dfb      	adds	r3, r7, #7
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	001c      	movs	r4, r3
 8000d36:	230f      	movs	r3, #15
 8000d38:	4023      	ands	r3, r4
 8000d3a:	3b08      	subs	r3, #8
 8000d3c:	089b      	lsrs	r3, r3, #2
				| (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF)
 8000d3e:	430a      	orrs	r2, r1
		SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)]
 8000d40:	3306      	adds	r3, #6
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	18c3      	adds	r3, r0, r3
 8000d46:	3304      	adds	r3, #4
 8000d48:	601a      	str	r2, [r3, #0]
		NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)]
				& ~(0xFF << _BIT_SHIFT(IRQn)))
				| (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF)
						<< _BIT_SHIFT(IRQn));
	}
}
 8000d4a:	e027      	b.n	8000d9c <NVIC_SetPriority+0xcc>
		NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)]
 8000d4c:	4a16      	ldr	r2, [pc, #88]	; (8000da8 <NVIC_SetPriority+0xd8>)
 8000d4e:	1dfb      	adds	r3, r7, #7
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	b25b      	sxtb	r3, r3
 8000d54:	089b      	lsrs	r3, r3, #2
 8000d56:	33c0      	adds	r3, #192	; 0xc0
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	589b      	ldr	r3, [r3, r2]
				& ~(0xFF << _BIT_SHIFT(IRQn)))
 8000d5c:	1dfa      	adds	r2, r7, #7
 8000d5e:	7812      	ldrb	r2, [r2, #0]
 8000d60:	0011      	movs	r1, r2
 8000d62:	2203      	movs	r2, #3
 8000d64:	400a      	ands	r2, r1
 8000d66:	00d2      	lsls	r2, r2, #3
 8000d68:	21ff      	movs	r1, #255	; 0xff
 8000d6a:	4091      	lsls	r1, r2
 8000d6c:	000a      	movs	r2, r1
 8000d6e:	43d2      	mvns	r2, r2
 8000d70:	401a      	ands	r2, r3
 8000d72:	0011      	movs	r1, r2
				| (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	019b      	lsls	r3, r3, #6
 8000d78:	22ff      	movs	r2, #255	; 0xff
 8000d7a:	401a      	ands	r2, r3
						<< _BIT_SHIFT(IRQn));
 8000d7c:	1dfb      	adds	r3, r7, #7
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	0018      	movs	r0, r3
 8000d82:	2303      	movs	r3, #3
 8000d84:	4003      	ands	r3, r0
 8000d86:	00db      	lsls	r3, r3, #3
 8000d88:	409a      	lsls	r2, r3
		NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)]
 8000d8a:	4807      	ldr	r0, [pc, #28]	; (8000da8 <NVIC_SetPriority+0xd8>)
 8000d8c:	1dfb      	adds	r3, r7, #7
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	b25b      	sxtb	r3, r3
 8000d92:	089b      	lsrs	r3, r3, #2
				| (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF)
 8000d94:	430a      	orrs	r2, r1
		NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)]
 8000d96:	33c0      	adds	r3, #192	; 0xc0
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	501a      	str	r2, [r3, r0]
}
 8000d9c:	46c0      	nop			; (mov r8, r8)
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	b003      	add	sp, #12
 8000da2:	bd90      	pop	{r4, r7, pc}
 8000da4:	e000ed00 	.word	0xe000ed00
 8000da8:	e000e100 	.word	0xe000e100

08000dac <SysTick_Config>:
 \note     When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
 function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
 must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	1e5a      	subs	r2, r3, #1
 8000db8:	2380      	movs	r3, #128	; 0x80
 8000dba:	045b      	lsls	r3, r3, #17
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d301      	bcc.n	8000dc4 <SysTick_Config+0x18>
		return (1); /* Reload value impossible */
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	e010      	b.n	8000de6 <SysTick_Config+0x3a>

	SysTick->LOAD = ticks - 1; /* set reload register */
 8000dc4:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <SysTick_Config+0x44>)
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	3a01      	subs	r2, #1
 8000dca:	605a      	str	r2, [r3, #4]
	NVIC_SetPriority(SysTick_IRQn, (1 << __NVIC_PRIO_BITS) - 1); /* set Priority for Systick Interrupt */
 8000dcc:	2301      	movs	r3, #1
 8000dce:	425b      	negs	r3, r3
 8000dd0:	2103      	movs	r1, #3
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	f7ff ff7c 	bl	8000cd0 <NVIC_SetPriority>
	SysTick->VAL = 0; /* Load the SysTick Counter Value */
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <SysTick_Config+0x44>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 8000dde:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <SysTick_Config+0x44>)
 8000de0:	2207      	movs	r2, #7
 8000de2:	601a      	str	r2, [r3, #0]
	SysTick_CTRL_TICKINT_Msk |
	SysTick_CTRL_ENABLE_Msk; /* Enable SysTick IRQ and SysTick Timer */
	return (0); /* Function successful */
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	0018      	movs	r0, r3
 8000de8:	46bd      	mov	sp, r7
 8000dea:	b002      	add	sp, #8
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	e000e010 	.word	0xe000e010

08000df4 <SysTick_Handler>:
**	clearing of the flag has to be done in the application code!
**
**===========================================================================
*/
void SysTick_Handler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	if(delayTimer)
 8000df8:	4b1e      	ldr	r3, [pc, #120]	; (8000e74 <SysTick_Handler+0x80>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d004      	beq.n	8000e0a <SysTick_Handler+0x16>
	{
		delayTimer--;
 8000e00:	4b1c      	ldr	r3, [pc, #112]	; (8000e74 <SysTick_Handler+0x80>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	1e5a      	subs	r2, r3, #1
 8000e06:	4b1b      	ldr	r3, [pc, #108]	; (8000e74 <SysTick_Handler+0x80>)
 8000e08:	601a      	str	r2, [r3, #0]
	}
	timer_ms--;
 8000e0a:	4b1b      	ldr	r3, [pc, #108]	; (8000e78 <SysTick_Handler+0x84>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <SysTick_Handler+0x84>)
 8000e14:	701a      	strb	r2, [r3, #0]
	timerFlags |= TIMER_FLAG_1MS;
 8000e16:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <SysTick_Handler+0x88>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <SysTick_Handler+0x88>)
 8000e24:	701a      	strb	r2, [r3, #0]

	//10ms timebase
	if(!timer_ms)
 8000e26:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <SysTick_Handler+0x84>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d110      	bne.n	8000e50 <SysTick_Handler+0x5c>
	{
		timerFlags |= TIMER_FLAG_10MS;
 8000e2e:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <SysTick_Handler+0x88>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	2202      	movs	r2, #2
 8000e36:	4313      	orrs	r3, r2
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <SysTick_Handler+0x88>)
 8000e3c:	701a      	strb	r2, [r3, #0]
		timer_ms = 10;
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <SysTick_Handler+0x84>)
 8000e40:	220a      	movs	r2, #10
 8000e42:	701a      	strb	r2, [r3, #0]
		timer_10ms--;
 8000e44:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <SysTick_Handler+0x8c>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <SysTick_Handler+0x8c>)
 8000e4e:	701a      	strb	r2, [r3, #0]
	}
	//100ms timebase
	if(!timer_10ms)
 8000e50:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <SysTick_Handler+0x8c>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d10a      	bne.n	8000e6e <SysTick_Handler+0x7a>
	{
		timerFlags |= TIMER_FLAG_100MS;
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <SysTick_Handler+0x88>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2204      	movs	r2, #4
 8000e60:	4313      	orrs	r3, r2
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <SysTick_Handler+0x88>)
 8000e66:	701a      	strb	r2, [r3, #0]
		timer_10ms = 10;
 8000e68:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <SysTick_Handler+0x8c>)
 8000e6a:	220a      	movs	r2, #10
 8000e6c:	701a      	strb	r2, [r3, #0]
	}
}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000048 	.word	0x20000048
 8000e78:	20000000 	.word	0x20000000
 8000e7c:	20000036 	.word	0x20000036
 8000e80:	20000001 	.word	0x20000001

08000e84 <delay>:
/**
 * blocking delay loop
 * @param ticks: number of ticks (ms) to wait
 */
void delay(uint32_t ticks)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
	delayTimer = ticks;
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <delay+0x24>)
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	601a      	str	r2, [r3, #0]
	while(delayTimer > 0);
 8000e92:	46c0      	nop			; (mov r8, r8)
 8000e94:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <delay+0x24>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d1fb      	bne.n	8000e94 <delay+0x10>
}
 8000e9c:	46c0      	nop			; (mov r8, r8)
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	b002      	add	sp, #8
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	20000048 	.word	0x20000048

08000eac <main>:

int main(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	SystemInit();
 8000eb0:	f000 f89c 	bl	8000fec <SystemInit>
	SystemCoreClockUpdate();
 8000eb4:	f000 f8e2 	bl	800107c <SystemCoreClockUpdate>
	//the systick timer runs with 6MHz
	//config the timer for 1ms interval
	SysTick_Config(SystemCoreClock / 8 / 1000);
 8000eb8:	4b32      	ldr	r3, [pc, #200]	; (8000f84 <main+0xd8>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	22fa      	movs	r2, #250	; 0xfa
 8000ebe:	0151      	lsls	r1, r2, #5
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f7ff f921 	bl	8000108 <__udivsi3>
 8000ec6:	0003      	movs	r3, r0
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f7ff ff6f 	bl	8000dac <SysTick_Config>
	//the systick_config just set the priority of the systick to 15  or so - very low!
	//set it back to 0
	NVIC_SetPriority(SysTick_IRQn,0);
 8000ece:	2301      	movs	r3, #1
 8000ed0:	425b      	negs	r3, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	f7ff fefb 	bl	8000cd0 <NVIC_SetPriority>
	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8);
 8000eda:	2305      	movs	r3, #5
 8000edc:	425b      	negs	r3, r3
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f7ff fcde 	bl	80008a0 <SysTick_CLKSourceConfig>

	power_init();
 8000ee4:	f001 fa82 	bl	80023ec <power_init>
	apa102_init();	//this includes a quick led-test
 8000ee8:	f000 f978 	bl	80011dc <apa102_init>

	if(power_UsbPresent()) {
 8000eec:	f001 face 	bl	800248c <power_UsbPresent>
//		winusb_init_usbd();
//		usb_device_connect();
//		consoleInit();
	}
	//init application (run once)
	AppMgmt_AppInit();
 8000ef0:	f7ff fdb8 	bl	8000a64 <AppMgmt_AppInit>
//		if(power_UsbPresent()){
//			USB_Handler();
//		}

		//run application (called continously until button is held long enough to switch to another one or power is switched off)
		if(timerFlags & TIMER_FLAG_1MS)
 8000ef4:	4b24      	ldr	r3, [pc, #144]	; (8000f88 <main+0xdc>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	001a      	movs	r2, r3
 8000efc:	2301      	movs	r3, #1
 8000efe:	4013      	ands	r3, r2
 8000f00:	d009      	beq.n	8000f16 <main+0x6a>
		{
			timerFlags &= ~TIMER_FLAG_1MS;
 8000f02:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <main+0xdc>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	2201      	movs	r2, #1
 8000f0a:	4393      	bics	r3, r2
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <main+0xdc>)
 8000f10:	701a      	strb	r2, [r3, #0]
			AppMgmt_AppExec();
 8000f12:	f7ff fdc9 	bl	8000aa8 <AppMgmt_AppExec>
		}
		if(timerFlags & TIMER_FLAG_100MS)
 8000f16:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <main+0xdc>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	001a      	movs	r2, r3
 8000f1e:	2304      	movs	r3, #4
 8000f20:	4013      	ands	r3, r2
 8000f22:	d0e7      	beq.n	8000ef4 <main+0x48>
		{
			timerFlags &= ~TIMER_FLAG_100MS;
 8000f24:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <main+0xdc>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2204      	movs	r2, #4
 8000f2c:	4393      	bics	r3, r2
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <main+0xdc>)
 8000f32:	701a      	strb	r2, [r3, #0]
			power_exec();
 8000f34:	f001 fad4 	bl	80024e0 <power_exec>

			if(power_flags & POWER_FLAG_SW_HOLD)
 8000f38:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <main+0xe0>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	001a      	movs	r2, r3
 8000f3e:	2304      	movs	r3, #4
 8000f40:	4013      	ands	r3, r2
 8000f42:	d0d7      	beq.n	8000ef4 <main+0x48>
			{
				if(power_buttonHoldTime >= 5)
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <main+0xe4>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b04      	cmp	r3, #4
 8000f4a:	d904      	bls.n	8000f56 <main+0xaa>
				{
					AppMgmt_CycleApps();
 8000f4c:	f7ff fdd0 	bl	8000af0 <AppMgmt_CycleApps>
					power_buttonHoldTime = 0;
 8000f50:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <main+0xe4>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	701a      	strb	r2, [r3, #0]
				}
				//only if the swich is released after holding it for at least 0.5s
				if(power_flags & POWER_FLAG_SW_RELEASE)
 8000f56:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <main+0xe0>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	001a      	movs	r2, r3
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	4013      	ands	r3, r2
 8000f60:	d0c8      	beq.n	8000ef4 <main+0x48>
				{
					power_flags &= ~POWER_FLAG_SW_HOLD;
 8000f62:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <main+0xe0>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2204      	movs	r2, #4
 8000f68:	4393      	bics	r3, r2
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <main+0xe0>)
 8000f6e:	701a      	strb	r2, [r3, #0]
					power_flags &= ~POWER_FLAG_SW_RELEASE;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <main+0xe0>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2201      	movs	r2, #1
 8000f76:	4393      	bics	r3, r2
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <main+0xe0>)
 8000f7c:	701a      	strb	r2, [r3, #0]
					AppMgmt_LoadApp();
 8000f7e:	f7ff fdd9 	bl	8000b34 <AppMgmt_LoadApp>
		if(timerFlags & TIMER_FLAG_1MS)
 8000f82:	e7b7      	b.n	8000ef4 <main+0x48>
 8000f84:	20000004 	.word	0x20000004
 8000f88:	20000036 	.word	0x20000036
 8000f8c:	20000043 	.word	0x20000043
 8000f90:	20000044 	.word	0x20000044

08000f94 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
}
 8000f98:	46c0      	nop			; (mov r8, r8)
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HardFault_Handler>:
  * @param  None
  * @retval None
  */

void HardFault_Handler(void)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000fa2:	e7fe      	b.n	8000fa2 <HardFault_Handler+0x4>

08000fa4 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
}
 8000fa8:	46c0      	nop			; (mov r8, r8)
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	af00      	add	r7, sp, #0
}
 8000fb2:	46c0      	nop			; (mov r8, r8)
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <USB_IRQHandler>:
  * @brief  This function handles USB FS Handler.
  * @param  None
  * @retval None
  */
void USB_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	//USB_Istr();
}
 8000fbc:	46c0      	nop			; (mov r8, r8)
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	af00      	add	r7, sp, #0
	displayFindReturnPoint();
 8000fc6:	f000 fd6b 	bl	8001aa0 <displayFindReturnPoint>
}
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	displayEndOfLocktime();
 8000fd4:	f000 fcf4 	bl	80019c0 <displayEndOfLocktime>
}
 8000fd8:	46c0      	nop			; (mov r8, r8)
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	af00      	add	r7, sp, #0
	displaySendLine();
 8000fe2:	f000 fc81 	bl	80018e8 <displaySendLine>
}
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000ff0:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <SystemInit+0x74>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4b1a      	ldr	r3, [pc, #104]	; (8001060 <SystemInit+0x74>)
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	601a      	str	r2, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[3:0] bits MCOPRE[2:0] */
  RCC->CFGR &= (uint32_t)0x80FFB80C;
 8000ffc:	4b18      	ldr	r3, [pc, #96]	; (8001060 <SystemInit+0x74>)
 8000ffe:	685a      	ldr	r2, [r3, #4]
 8001000:	4b17      	ldr	r3, [pc, #92]	; (8001060 <SystemInit+0x74>)
 8001002:	4918      	ldr	r1, [pc, #96]	; (8001064 <SystemInit+0x78>)
 8001004:	400a      	ands	r2, r1
 8001006:	605a      	str	r2, [r3, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001008:	4b15      	ldr	r3, [pc, #84]	; (8001060 <SystemInit+0x74>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	4b14      	ldr	r3, [pc, #80]	; (8001060 <SystemInit+0x74>)
 800100e:	4916      	ldr	r1, [pc, #88]	; (8001068 <SystemInit+0x7c>)
 8001010:	400a      	ands	r2, r1
 8001012:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001014:	4b12      	ldr	r3, [pc, #72]	; (8001060 <SystemInit+0x74>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b11      	ldr	r3, [pc, #68]	; (8001060 <SystemInit+0x74>)
 800101a:	4914      	ldr	r1, [pc, #80]	; (800106c <SystemInit+0x80>)
 800101c:	400a      	ands	r2, r1
 800101e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC07FFF;
 8001020:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <SystemInit+0x74>)
 8001022:	685a      	ldr	r2, [r3, #4]
 8001024:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <SystemInit+0x74>)
 8001026:	4912      	ldr	r1, [pc, #72]	; (8001070 <SystemInit+0x84>)
 8001028:	400a      	ands	r2, r1
 800102a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <SystemInit+0x74>)
 800102e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001030:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <SystemInit+0x74>)
 8001032:	210f      	movs	r1, #15
 8001034:	438a      	bics	r2, r1
 8001036:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 8001038:	4b09      	ldr	r3, [pc, #36]	; (8001060 <SystemInit+0x74>)
 800103a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800103c:	4b08      	ldr	r3, [pc, #32]	; (8001060 <SystemInit+0x74>)
 800103e:	490d      	ldr	r1, [pc, #52]	; (8001074 <SystemInit+0x88>)
 8001040:	400a      	ands	r2, r1
 8001042:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset HSI14 & HSI48 bit */
  RCC->CR2 &= (uint32_t)0xFFFEFFFE;
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <SystemInit+0x74>)
 8001046:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <SystemInit+0x74>)
 800104a:	490b      	ldr	r1, [pc, #44]	; (8001078 <SystemInit+0x8c>)
 800104c:	400a      	ands	r2, r1
 800104e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001050:	4b03      	ldr	r3, [pc, #12]	; (8001060 <SystemInit+0x74>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]

  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 8001056:	f000 f893 	bl	8001180 <SetSysClock>
}
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40021000 	.word	0x40021000
 8001064:	80ffb80c 	.word	0x80ffb80c
 8001068:	fef6ffff 	.word	0xfef6ffff
 800106c:	fffbffff 	.word	0xfffbffff
 8001070:	ffc07fff 	.word	0xffc07fff
 8001074:	fffffeac 	.word	0xfffffeac
 8001078:	fffefffe 	.word	0xfffefffe

0800107c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	2300      	movs	r3, #0
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	2300      	movs	r3, #0
 800108c:	607b      	str	r3, [r7, #4]
 800108e:	2300      	movs	r3, #0
 8001090:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001092:	4b36      	ldr	r3, [pc, #216]	; (800116c <SystemCoreClockUpdate+0xf0>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	220c      	movs	r2, #12
 8001098:	4013      	ands	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	2b0c      	cmp	r3, #12
 80010a0:	d048      	beq.n	8001134 <SystemCoreClockUpdate+0xb8>
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	2b0c      	cmp	r3, #12
 80010a6:	d849      	bhi.n	800113c <SystemCoreClockUpdate+0xc0>
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	2b08      	cmp	r3, #8
 80010ac:	d011      	beq.n	80010d2 <SystemCoreClockUpdate+0x56>
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	2b08      	cmp	r3, #8
 80010b2:	d843      	bhi.n	800113c <SystemCoreClockUpdate+0xc0>
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <SystemCoreClockUpdate+0x46>
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	2b04      	cmp	r3, #4
 80010be:	d004      	beq.n	80010ca <SystemCoreClockUpdate+0x4e>
 80010c0:	e03c      	b.n	800113c <SystemCoreClockUpdate+0xc0>
  {
  case 0x00:  /* HSI used as system clock */
    SystemCoreClock = HSI_VALUE;
 80010c2:	4b2b      	ldr	r3, [pc, #172]	; (8001170 <SystemCoreClockUpdate+0xf4>)
 80010c4:	4a2b      	ldr	r2, [pc, #172]	; (8001174 <SystemCoreClockUpdate+0xf8>)
 80010c6:	601a      	str	r2, [r3, #0]
    break;
 80010c8:	e03c      	b.n	8001144 <SystemCoreClockUpdate+0xc8>
  case 0x04:  /* HSE used as system clock */
    SystemCoreClock = HSE_VALUE;
 80010ca:	4b29      	ldr	r3, [pc, #164]	; (8001170 <SystemCoreClockUpdate+0xf4>)
 80010cc:	4a29      	ldr	r2, [pc, #164]	; (8001174 <SystemCoreClockUpdate+0xf8>)
 80010ce:	601a      	str	r2, [r3, #0]
    break;
 80010d0:	e038      	b.n	8001144 <SystemCoreClockUpdate+0xc8>
  case 0x08:  /* PLL used as system clock */
    /* Get PLL clock source and multiplication factor ----------------------*/
    pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80010d2:	4b26      	ldr	r3, [pc, #152]	; (800116c <SystemCoreClockUpdate+0xf0>)
 80010d4:	685a      	ldr	r2, [r3, #4]
 80010d6:	23f0      	movs	r3, #240	; 0xf0
 80010d8:	039b      	lsls	r3, r3, #14
 80010da:	4013      	ands	r3, r2
 80010dc:	60bb      	str	r3, [r7, #8]
    pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80010de:	4b23      	ldr	r3, [pc, #140]	; (800116c <SystemCoreClockUpdate+0xf0>)
 80010e0:	685a      	ldr	r2, [r3, #4]
 80010e2:	23c0      	movs	r3, #192	; 0xc0
 80010e4:	025b      	lsls	r3, r3, #9
 80010e6:	4013      	ands	r3, r2
 80010e8:	607b      	str	r3, [r7, #4]
    pllmull = ( pllmull >> 18) + 2;
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	0c9b      	lsrs	r3, r3, #18
 80010ee:	3302      	adds	r3, #2
 80010f0:	60bb      	str	r3, [r7, #8]

    if (pllsource == 0x00)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d10c      	bne.n	8001112 <SystemCoreClockUpdate+0x96>
    {
      /* HSI oscillator clock divided by 2 selected as PLL clock entry */
      SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 80010f8:	68b9      	ldr	r1, [r7, #8]
 80010fa:	000a      	movs	r2, r1
 80010fc:	0152      	lsls	r2, r2, #5
 80010fe:	1a52      	subs	r2, r2, r1
 8001100:	0193      	lsls	r3, r2, #6
 8001102:	1a9b      	subs	r3, r3, r2
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	185b      	adds	r3, r3, r1
 8001108:	021b      	lsls	r3, r3, #8
 800110a:	001a      	movs	r2, r3
 800110c:	4b18      	ldr	r3, [pc, #96]	; (8001170 <SystemCoreClockUpdate+0xf4>)
 800110e:	601a      	str	r2, [r3, #0]
    {
      prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
      /* HSE oscillator clock selected as PREDIV1 clock entry */
      SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
    }
    break;
 8001110:	e018      	b.n	8001144 <SystemCoreClockUpdate+0xc8>
      prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8001112:	4b16      	ldr	r3, [pc, #88]	; (800116c <SystemCoreClockUpdate+0xf0>)
 8001114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001116:	220f      	movs	r2, #15
 8001118:	4013      	ands	r3, r2
 800111a:	3301      	adds	r3, #1
 800111c:	603b      	str	r3, [r7, #0]
      SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 800111e:	6839      	ldr	r1, [r7, #0]
 8001120:	4814      	ldr	r0, [pc, #80]	; (8001174 <SystemCoreClockUpdate+0xf8>)
 8001122:	f7fe fff1 	bl	8000108 <__udivsi3>
 8001126:	0003      	movs	r3, r0
 8001128:	001a      	movs	r2, r3
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	435a      	muls	r2, r3
 800112e:	4b10      	ldr	r3, [pc, #64]	; (8001170 <SystemCoreClockUpdate+0xf4>)
 8001130:	601a      	str	r2, [r3, #0]
    break;
 8001132:	e007      	b.n	8001144 <SystemCoreClockUpdate+0xc8>
  case 0x0C:  /* HSI48 used as system clock */
    SystemCoreClock = HSI48_VALUE;
 8001134:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <SystemCoreClockUpdate+0xf4>)
 8001136:	4a10      	ldr	r2, [pc, #64]	; (8001178 <SystemCoreClockUpdate+0xfc>)
 8001138:	601a      	str	r2, [r3, #0]
    break;
 800113a:	e003      	b.n	8001144 <SystemCoreClockUpdate+0xc8>
  default: /* HSI used as system clock */
    SystemCoreClock = HSI_VALUE;
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <SystemCoreClockUpdate+0xf4>)
 800113e:	4a0d      	ldr	r2, [pc, #52]	; (8001174 <SystemCoreClockUpdate+0xf8>)
 8001140:	601a      	str	r2, [r3, #0]
    break;
 8001142:	46c0      	nop			; (mov r8, r8)

  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001144:	4b09      	ldr	r3, [pc, #36]	; (800116c <SystemCoreClockUpdate+0xf0>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	091b      	lsrs	r3, r3, #4
 800114a:	220f      	movs	r2, #15
 800114c:	4013      	ands	r3, r2
 800114e:	4a0b      	ldr	r2, [pc, #44]	; (800117c <SystemCoreClockUpdate+0x100>)
 8001150:	5cd3      	ldrb	r3, [r2, r3]
 8001152:	b2db      	uxtb	r3, r3
 8001154:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <SystemCoreClockUpdate+0xf4>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	40da      	lsrs	r2, r3
 800115e:	4b04      	ldr	r3, [pc, #16]	; (8001170 <SystemCoreClockUpdate+0xf4>)
 8001160:	601a      	str	r2, [r3, #0]
}
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	46bd      	mov	sp, r7
 8001166:	b004      	add	sp, #16
 8001168:	bd80      	pop	{r7, pc}
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	40021000 	.word	0x40021000
 8001170:	20000004 	.word	0x20000004
 8001174:	007a1200 	.word	0x007a1200
 8001178:	02dc6c00 	.word	0x02dc6c00
 800117c:	20000008 	.word	0x20000008

08001180 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
   /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
    /* At this stage the HSI is already enabled */
 
    /* Enable Prefetch Buffer and set Flash Latency */
    FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8001184:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <SetSysClock+0x54>)
 8001186:	2211      	movs	r2, #17
 8001188:	601a      	str	r2, [r3, #0]
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800118a:	4a13      	ldr	r2, [pc, #76]	; (80011d8 <SetSysClock+0x58>)
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <SetSysClock+0x58>)
 800118e:	6852      	ldr	r2, [r2, #4]
 8001190:	605a      	str	r2, [r3, #4]

    /* PCLK = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 8001192:	4a11      	ldr	r2, [pc, #68]	; (80011d8 <SetSysClock+0x58>)
 8001194:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <SetSysClock+0x58>)
 8001196:	6852      	ldr	r2, [r2, #4]
 8001198:	605a      	str	r2, [r3, #4]

   /* Enable HSI48 */
    RCC->CR2 |= RCC_CR2_HSI48ON;
 800119a:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <SetSysClock+0x58>)
 800119c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800119e:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <SetSysClock+0x58>)
 80011a0:	2180      	movs	r1, #128	; 0x80
 80011a2:	0249      	lsls	r1, r1, #9
 80011a4:	430a      	orrs	r2, r1
 80011a6:	635a      	str	r2, [r3, #52]	; 0x34
  /* Wait till HSI48RDY is set */
    while((RCC->CR2 & RCC_CR2_HSI48RDY) == 0)
 80011a8:	46c0      	nop			; (mov r8, r8)
 80011aa:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <SetSysClock+0x58>)
 80011ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011ae:	2380      	movs	r3, #128	; 0x80
 80011b0:	029b      	lsls	r3, r3, #10
 80011b2:	4013      	ands	r3, r2
 80011b4:	d0f9      	beq.n	80011aa <SetSysClock+0x2a>
    { }
  /* Select HSI48 as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80011b6:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <SetSysClock+0x58>)
 80011b8:	685a      	ldr	r2, [r3, #4]
 80011ba:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <SetSysClock+0x58>)
 80011bc:	2103      	movs	r1, #3
 80011be:	438a      	bics	r2, r1
 80011c0:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_HSI48;
 80011c2:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <SetSysClock+0x58>)
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <SetSysClock+0x58>)
 80011c8:	2103      	movs	r1, #3
 80011ca:	430a      	orrs	r2, r1
 80011cc:	605a      	str	r2, [r3, #4]

}
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40022000 	.word	0x40022000
 80011d8:	40021000 	.word	0x40021000

080011dc <apa102_init>:

#define LED_CNT		16
colorVrgb leds[LED_CNT];
uint8_t spiSendData[12 + 4 * LED_CNT];

void apa102_init() {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0

	//that's what a bare-metal implementation would look like:

	//enable clock for periphery modules
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_DMAEN;
 80011e2:	4b35      	ldr	r3, [pc, #212]	; (80012b8 <apa102_init+0xdc>)
 80011e4:	695a      	ldr	r2, [r3, #20]
 80011e6:	4b34      	ldr	r3, [pc, #208]	; (80012b8 <apa102_init+0xdc>)
 80011e8:	4934      	ldr	r1, [pc, #208]	; (80012bc <apa102_init+0xe0>)
 80011ea:	430a      	orrs	r2, r1
 80011ec:	615a      	str	r2, [r3, #20]
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 80011ee:	4b32      	ldr	r3, [pc, #200]	; (80012b8 <apa102_init+0xdc>)
 80011f0:	699a      	ldr	r2, [r3, #24]
 80011f2:	4b31      	ldr	r3, [pc, #196]	; (80012b8 <apa102_init+0xdc>)
 80011f4:	2180      	movs	r1, #128	; 0x80
 80011f6:	0149      	lsls	r1, r1, #5
 80011f8:	430a      	orrs	r2, r1
 80011fa:	619a      	str	r2, [r3, #24]

	//gpio
	//configure PINs PA7 and PA5 as AF out
	GPIOA->MODER &= ~(GPIO_MODER_MODER5 | GPIO_MODER_MODER7);
 80011fc:	2390      	movs	r3, #144	; 0x90
 80011fe:	05db      	lsls	r3, r3, #23
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	2390      	movs	r3, #144	; 0x90
 8001204:	05db      	lsls	r3, r3, #23
 8001206:	492e      	ldr	r1, [pc, #184]	; (80012c0 <apa102_init+0xe4>)
 8001208:	400a      	ands	r2, r1
 800120a:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= GPIO_MODER_MODER5_1 | GPIO_MODER_MODER7_1;
 800120c:	2390      	movs	r3, #144	; 0x90
 800120e:	05db      	lsls	r3, r3, #23
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	2390      	movs	r3, #144	; 0x90
 8001214:	05db      	lsls	r3, r3, #23
 8001216:	2188      	movs	r1, #136	; 0x88
 8001218:	0209      	lsls	r1, r1, #8
 800121a:	430a      	orrs	r2, r1
 800121c:	601a      	str	r2, [r3, #0]
	//configure PINs PA7 and PA5 as high speed out
	GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR5 | GPIO_OSPEEDER_OSPEEDR7;
 800121e:	2390      	movs	r3, #144	; 0x90
 8001220:	05db      	lsls	r3, r3, #23
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	2390      	movs	r3, #144	; 0x90
 8001226:	05db      	lsls	r3, r3, #23
 8001228:	21cc      	movs	r1, #204	; 0xcc
 800122a:	0209      	lsls	r1, r1, #8
 800122c:	430a      	orrs	r2, r1
 800122e:	609a      	str	r2, [r3, #8]

	//init the SPI module
	//Full-Duplex Master, NSS pin not used, Clock Prescaler 8, MSB first, Cpol 1, CPHA 1
	SPI1->CR1 = SPI_CR1_SSM | SPI_CR1_SSI | SPI_CR1_BR_1 | SPI_CR1_MSTR
 8001230:	4b24      	ldr	r3, [pc, #144]	; (80012c4 <apa102_init+0xe8>)
 8001232:	4a25      	ldr	r2, [pc, #148]	; (80012c8 <apa102_init+0xec>)
 8001234:	801a      	strh	r2, [r3, #0]
			| SPI_CR1_CPOL | SPI_CR1_CPHA;
	//data size 8b (default in CR2)
	//enable dma request for tx
	SPI1->CR2 = SPI_CR2_TXDMAEN;
 8001236:	4b23      	ldr	r3, [pc, #140]	; (80012c4 <apa102_init+0xe8>)
 8001238:	2202      	movs	r2, #2
 800123a:	809a      	strh	r2, [r3, #4]
	//enable SPI:
	SPI1->CR1 |= SPI_CR1_SPE;
 800123c:	4b21      	ldr	r3, [pc, #132]	; (80012c4 <apa102_init+0xe8>)
 800123e:	881b      	ldrh	r3, [r3, #0]
 8001240:	b29b      	uxth	r3, r3
 8001242:	4a20      	ldr	r2, [pc, #128]	; (80012c4 <apa102_init+0xe8>)
 8001244:	2140      	movs	r1, #64	; 0x40
 8001246:	430b      	orrs	r3, r1
 8001248:	b29b      	uxth	r3, r3
 800124a:	8013      	strh	r3, [r2, #0]

	//config DMA for SPI TX
	//priority high, memToPer, Memory Increment
	DMA1_Channel3->CCR |= DMA_CCR_PL_1 | DMA_CCR_MINC | DMA_CCR_DIR;
 800124c:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <apa102_init+0xf0>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	4b1e      	ldr	r3, [pc, #120]	; (80012cc <apa102_init+0xf0>)
 8001252:	491f      	ldr	r1, [pc, #124]	; (80012d0 <apa102_init+0xf4>)
 8001254:	430a      	orrs	r2, r1
 8001256:	601a      	str	r2, [r3, #0]
	//memory Address
	DMA1_Channel3->CMAR = (uint32_t) spiSendData;
 8001258:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <apa102_init+0xf0>)
 800125a:	4a1e      	ldr	r2, [pc, #120]	; (80012d4 <apa102_init+0xf8>)
 800125c:	60da      	str	r2, [r3, #12]
	//peripheral address
	DMA1_Channel3->CPAR = (uint32_t) &(SPI1->DR);
 800125e:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <apa102_init+0xf0>)
 8001260:	4a1d      	ldr	r2, [pc, #116]	; (80012d8 <apa102_init+0xfc>)
 8001262:	609a      	str	r2, [r3, #8]

	apa102_allOff();
 8001264:	f000 f9c6 	bl	80015f4 <apa102_allOff>
	globalColor.red = 255;
 8001268:	4b1c      	ldr	r3, [pc, #112]	; (80012dc <apa102_init+0x100>)
 800126a:	22ff      	movs	r2, #255	; 0xff
 800126c:	70da      	strb	r2, [r3, #3]
	globalColor.green = 255;
 800126e:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <apa102_init+0x100>)
 8001270:	22ff      	movs	r2, #255	; 0xff
 8001272:	709a      	strb	r2, [r3, #2]
	globalColor.blue = 255;
 8001274:	4b19      	ldr	r3, [pc, #100]	; (80012dc <apa102_init+0x100>)
 8001276:	22ff      	movs	r2, #255	; 0xff
 8001278:	705a      	strb	r2, [r3, #1]
	globalColor.global = 10;
 800127a:	4b18      	ldr	r3, [pc, #96]	; (80012dc <apa102_init+0x100>)
 800127c:	220a      	movs	r2, #10
 800127e:	701a      	strb	r2, [r3, #0]

	//LED-Test
	for(uint8_t i = 0; i<16; i++) {
 8001280:	1dfb      	adds	r3, r7, #7
 8001282:	2200      	movs	r2, #0
 8001284:	701a      	strb	r2, [r3, #0]
 8001286:	e00d      	b.n	80012a4 <apa102_init+0xc8>
		apa102_setSingle(i,10);
 8001288:	1dfb      	adds	r3, r7, #7
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	210a      	movs	r1, #10
 800128e:	0018      	movs	r0, r3
 8001290:	f000 f950 	bl	8001534 <apa102_setSingle>
		delay(20);
 8001294:	2014      	movs	r0, #20
 8001296:	f7ff fdf5 	bl	8000e84 <delay>
	for(uint8_t i = 0; i<16; i++) {
 800129a:	1dfb      	adds	r3, r7, #7
 800129c:	781a      	ldrb	r2, [r3, #0]
 800129e:	1dfb      	adds	r3, r7, #7
 80012a0:	3201      	adds	r2, #1
 80012a2:	701a      	strb	r2, [r3, #0]
 80012a4:	1dfb      	adds	r3, r7, #7
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b0f      	cmp	r3, #15
 80012aa:	d9ed      	bls.n	8001288 <apa102_init+0xac>
	}
}
 80012ac:	46c0      	nop			; (mov r8, r8)
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	46bd      	mov	sp, r7
 80012b2:	b002      	add	sp, #8
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	40021000 	.word	0x40021000
 80012bc:	00020001 	.word	0x00020001
 80012c0:	ffff33ff 	.word	0xffff33ff
 80012c4:	40013000 	.word	0x40013000
 80012c8:	00000317 	.word	0x00000317
 80012cc:	40020030 	.word	0x40020030
 80012d0:	00002090 	.word	0x00002090
 80012d4:	2000008c 	.word	0x2000008c
 80012d8:	4001300c 	.word	0x4001300c
 80012dc:	2000003c 	.word	0x2000003c

080012e0 <apa102_setGlobalColor>:

void apa102_setGlobalColor(uint8_t red, uint8_t green, uint8_t blue) {
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	0004      	movs	r4, r0
 80012e8:	0008      	movs	r0, r1
 80012ea:	0011      	movs	r1, r2
 80012ec:	1dfb      	adds	r3, r7, #7
 80012ee:	1c22      	adds	r2, r4, #0
 80012f0:	701a      	strb	r2, [r3, #0]
 80012f2:	1dbb      	adds	r3, r7, #6
 80012f4:	1c02      	adds	r2, r0, #0
 80012f6:	701a      	strb	r2, [r3, #0]
 80012f8:	1d7b      	adds	r3, r7, #5
 80012fa:	1c0a      	adds	r2, r1, #0
 80012fc:	701a      	strb	r2, [r3, #0]
	globalColor.red = red;
 80012fe:	4b08      	ldr	r3, [pc, #32]	; (8001320 <apa102_setGlobalColor+0x40>)
 8001300:	1dfa      	adds	r2, r7, #7
 8001302:	7812      	ldrb	r2, [r2, #0]
 8001304:	70da      	strb	r2, [r3, #3]
	globalColor.green = green;
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <apa102_setGlobalColor+0x40>)
 8001308:	1dba      	adds	r2, r7, #6
 800130a:	7812      	ldrb	r2, [r2, #0]
 800130c:	709a      	strb	r2, [r3, #2]
	globalColor.blue = blue;
 800130e:	4b04      	ldr	r3, [pc, #16]	; (8001320 <apa102_setGlobalColor+0x40>)
 8001310:	1d7a      	adds	r2, r7, #5
 8001312:	7812      	ldrb	r2, [r2, #0]
 8001314:	705a      	strb	r2, [r3, #1]
}
 8001316:	46c0      	nop			; (mov r8, r8)
 8001318:	46bd      	mov	sp, r7
 800131a:	b003      	add	sp, #12
 800131c:	bd90      	pop	{r4, r7, pc}
 800131e:	46c0      	nop			; (mov r8, r8)
 8001320:	2000003c 	.word	0x2000003c

08001324 <updateStripe>:

void updateStripe() {
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
	uint8_t ledIdx = 0;
 800132a:	1dfb      	adds	r3, r7, #7
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]
	uint8_t byteIdx = 0;
 8001330:	1dbb      	adds	r3, r7, #6
 8001332:	2200      	movs	r2, #0
 8001334:	701a      	strb	r2, [r3, #0]

	//disable the DMA channel
	DMA1_Channel3->CCR &= ~DMA_CCR_EN;
 8001336:	4b4a      	ldr	r3, [pc, #296]	; (8001460 <updateStripe+0x13c>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	4b49      	ldr	r3, [pc, #292]	; (8001460 <updateStripe+0x13c>)
 800133c:	2101      	movs	r1, #1
 800133e:	438a      	bics	r2, r1
 8001340:	601a      	str	r2, [r3, #0]
	//start frame
	for (uint8_t i = 0; i < 4; i++) {
 8001342:	1d7b      	adds	r3, r7, #5
 8001344:	2200      	movs	r2, #0
 8001346:	701a      	strb	r2, [r3, #0]
 8001348:	e00e      	b.n	8001368 <updateStripe+0x44>
		spiSendData[byteIdx] = 0x00;
 800134a:	1dbb      	adds	r3, r7, #6
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	4a45      	ldr	r2, [pc, #276]	; (8001464 <updateStripe+0x140>)
 8001350:	2100      	movs	r1, #0
 8001352:	54d1      	strb	r1, [r2, r3]
		byteIdx++;
 8001354:	1dbb      	adds	r3, r7, #6
 8001356:	781a      	ldrb	r2, [r3, #0]
 8001358:	1dbb      	adds	r3, r7, #6
 800135a:	3201      	adds	r2, #1
 800135c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 4; i++) {
 800135e:	1d7b      	adds	r3, r7, #5
 8001360:	781a      	ldrb	r2, [r3, #0]
 8001362:	1d7b      	adds	r3, r7, #5
 8001364:	3201      	adds	r2, #1
 8001366:	701a      	strb	r2, [r3, #0]
 8001368:	1d7b      	adds	r3, r7, #5
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b03      	cmp	r3, #3
 800136e:	d9ec      	bls.n	800134a <updateStripe+0x26>
	}

	for (uint8_t i = 0; i < LED_CNT; i++) {
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	2200      	movs	r2, #0
 8001374:	701a      	strb	r2, [r3, #0]
 8001376:	e04b      	b.n	8001410 <updateStripe+0xec>
		//led frame
		spiSendData[byteIdx] = 0xE0 | (leds[ledIdx].global & 0x1F); //global
 8001378:	1dfb      	adds	r3, r7, #7
 800137a:	781a      	ldrb	r2, [r3, #0]
 800137c:	4b3a      	ldr	r3, [pc, #232]	; (8001468 <updateStripe+0x144>)
 800137e:	0092      	lsls	r2, r2, #2
 8001380:	5cd2      	ldrb	r2, [r2, r3]
 8001382:	1dbb      	adds	r3, r7, #6
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2120      	movs	r1, #32
 8001388:	4249      	negs	r1, r1
 800138a:	430a      	orrs	r2, r1
 800138c:	b2d1      	uxtb	r1, r2
 800138e:	4a35      	ldr	r2, [pc, #212]	; (8001464 <updateStripe+0x140>)
 8001390:	54d1      	strb	r1, [r2, r3]
		byteIdx++;
 8001392:	1dbb      	adds	r3, r7, #6
 8001394:	781a      	ldrb	r2, [r3, #0]
 8001396:	1dbb      	adds	r3, r7, #6
 8001398:	3201      	adds	r2, #1
 800139a:	701a      	strb	r2, [r3, #0]
		spiSendData[byteIdx] = leds[ledIdx].blue;
 800139c:	1dfb      	adds	r3, r7, #7
 800139e:	781a      	ldrb	r2, [r3, #0]
 80013a0:	1dbb      	adds	r3, r7, #6
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	4930      	ldr	r1, [pc, #192]	; (8001468 <updateStripe+0x144>)
 80013a6:	0092      	lsls	r2, r2, #2
 80013a8:	188a      	adds	r2, r1, r2
 80013aa:	3201      	adds	r2, #1
 80013ac:	7811      	ldrb	r1, [r2, #0]
 80013ae:	4a2d      	ldr	r2, [pc, #180]	; (8001464 <updateStripe+0x140>)
 80013b0:	54d1      	strb	r1, [r2, r3]
		byteIdx++;
 80013b2:	1dbb      	adds	r3, r7, #6
 80013b4:	781a      	ldrb	r2, [r3, #0]
 80013b6:	1dbb      	adds	r3, r7, #6
 80013b8:	3201      	adds	r2, #1
 80013ba:	701a      	strb	r2, [r3, #0]
		spiSendData[byteIdx] = leds[ledIdx].green;
 80013bc:	1dfb      	adds	r3, r7, #7
 80013be:	781a      	ldrb	r2, [r3, #0]
 80013c0:	1dbb      	adds	r3, r7, #6
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	4928      	ldr	r1, [pc, #160]	; (8001468 <updateStripe+0x144>)
 80013c6:	0092      	lsls	r2, r2, #2
 80013c8:	188a      	adds	r2, r1, r2
 80013ca:	3202      	adds	r2, #2
 80013cc:	7811      	ldrb	r1, [r2, #0]
 80013ce:	4a25      	ldr	r2, [pc, #148]	; (8001464 <updateStripe+0x140>)
 80013d0:	54d1      	strb	r1, [r2, r3]
		byteIdx++;
 80013d2:	1dbb      	adds	r3, r7, #6
 80013d4:	781a      	ldrb	r2, [r3, #0]
 80013d6:	1dbb      	adds	r3, r7, #6
 80013d8:	3201      	adds	r2, #1
 80013da:	701a      	strb	r2, [r3, #0]
		spiSendData[byteIdx] = leds[ledIdx].red;
 80013dc:	1dfb      	adds	r3, r7, #7
 80013de:	781a      	ldrb	r2, [r3, #0]
 80013e0:	1dbb      	adds	r3, r7, #6
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	4920      	ldr	r1, [pc, #128]	; (8001468 <updateStripe+0x144>)
 80013e6:	0092      	lsls	r2, r2, #2
 80013e8:	188a      	adds	r2, r1, r2
 80013ea:	3203      	adds	r2, #3
 80013ec:	7811      	ldrb	r1, [r2, #0]
 80013ee:	4a1d      	ldr	r2, [pc, #116]	; (8001464 <updateStripe+0x140>)
 80013f0:	54d1      	strb	r1, [r2, r3]
		byteIdx++;
 80013f2:	1dbb      	adds	r3, r7, #6
 80013f4:	781a      	ldrb	r2, [r3, #0]
 80013f6:	1dbb      	adds	r3, r7, #6
 80013f8:	3201      	adds	r2, #1
 80013fa:	701a      	strb	r2, [r3, #0]
		ledIdx++;
 80013fc:	1dfb      	adds	r3, r7, #7
 80013fe:	781a      	ldrb	r2, [r3, #0]
 8001400:	1dfb      	adds	r3, r7, #7
 8001402:	3201      	adds	r2, #1
 8001404:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < LED_CNT; i++) {
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	781a      	ldrb	r2, [r3, #0]
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	3201      	adds	r2, #1
 800140e:	701a      	strb	r2, [r3, #0]
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b0f      	cmp	r3, #15
 8001416:	d9af      	bls.n	8001378 <updateStripe+0x54>
	}
	//end frame
	//this is not the Frame as stated in the Datasheet! our LEDs (SK9822) seem to be a bit different from the original APA102 here!
	//but it works this way...
	for (uint8_t i = 0; i < 8; i++) {
 8001418:	1cfb      	adds	r3, r7, #3
 800141a:	2200      	movs	r2, #0
 800141c:	701a      	strb	r2, [r3, #0]
 800141e:	e00e      	b.n	800143e <updateStripe+0x11a>
		spiSendData[byteIdx] = 0x00;
 8001420:	1dbb      	adds	r3, r7, #6
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	4a0f      	ldr	r2, [pc, #60]	; (8001464 <updateStripe+0x140>)
 8001426:	2100      	movs	r1, #0
 8001428:	54d1      	strb	r1, [r2, r3]
		byteIdx++;
 800142a:	1dbb      	adds	r3, r7, #6
 800142c:	781a      	ldrb	r2, [r3, #0]
 800142e:	1dbb      	adds	r3, r7, #6
 8001430:	3201      	adds	r2, #1
 8001432:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 8; i++) {
 8001434:	1cfb      	adds	r3, r7, #3
 8001436:	781a      	ldrb	r2, [r3, #0]
 8001438:	1cfb      	adds	r3, r7, #3
 800143a:	3201      	adds	r2, #1
 800143c:	701a      	strb	r2, [r3, #0]
 800143e:	1cfb      	adds	r3, r7, #3
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b07      	cmp	r3, #7
 8001444:	d9ec      	bls.n	8001420 <updateStripe+0xfc>
	}

	//now the DMA has to send the spiSendData to the SPI tx fifo :)
	DMA1_Channel3->CNDTR = 12 + 4 * LED_CNT;
 8001446:	4b06      	ldr	r3, [pc, #24]	; (8001460 <updateStripe+0x13c>)
 8001448:	224c      	movs	r2, #76	; 0x4c
 800144a:	605a      	str	r2, [r3, #4]
	DMA1_Channel3->CCR |= DMA_CCR_EN;
 800144c:	4b04      	ldr	r3, [pc, #16]	; (8001460 <updateStripe+0x13c>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4b03      	ldr	r3, [pc, #12]	; (8001460 <updateStripe+0x13c>)
 8001452:	2101      	movs	r1, #1
 8001454:	430a      	orrs	r2, r1
 8001456:	601a      	str	r2, [r3, #0]
}
 8001458:	46c0      	nop			; (mov r8, r8)
 800145a:	46bd      	mov	sp, r7
 800145c:	b002      	add	sp, #8
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40020030 	.word	0x40020030
 8001464:	2000008c 	.word	0x2000008c
 8001468:	2000004c 	.word	0x2000004c

0800146c <apa102_setPattern>:

//so far only one global color
void apa102_setPattern(uint16_t mask, uint8_t global) {
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	0002      	movs	r2, r0
 8001474:	1dbb      	adds	r3, r7, #6
 8001476:	801a      	strh	r2, [r3, #0]
 8001478:	1d7b      	adds	r3, r7, #5
 800147a:	1c0a      	adds	r2, r1, #0
 800147c:	701a      	strb	r2, [r3, #0]
	//the global-value in the Led-frame is only 5 bit (max.31)!
	if (global > 0x1F) {
 800147e:	1d7b      	adds	r3, r7, #5
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b1f      	cmp	r3, #31
 8001484:	d902      	bls.n	800148c <apa102_setPattern+0x20>
		global = 0x1F;
 8001486:	1d7b      	adds	r3, r7, #5
 8001488:	221f      	movs	r2, #31
 800148a:	701a      	strb	r2, [r3, #0]
	}
	globalColor.global = global;
 800148c:	4b27      	ldr	r3, [pc, #156]	; (800152c <apa102_setPattern+0xc0>)
 800148e:	1d7a      	adds	r2, r7, #5
 8001490:	7812      	ldrb	r2, [r2, #0]
 8001492:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < 16; i++) {
 8001494:	230e      	movs	r3, #14
 8001496:	18fb      	adds	r3, r7, r3
 8001498:	2200      	movs	r2, #0
 800149a:	801a      	strh	r2, [r3, #0]
 800149c:	e03a      	b.n	8001514 <apa102_setPattern+0xa8>
		if (mask & (1 << i)) {	//led shall be active
 800149e:	1dbb      	adds	r3, r7, #6
 80014a0:	881a      	ldrh	r2, [r3, #0]
 80014a2:	210e      	movs	r1, #14
 80014a4:	187b      	adds	r3, r7, r1
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	411a      	asrs	r2, r3
 80014aa:	0013      	movs	r3, r2
 80014ac:	2201      	movs	r2, #1
 80014ae:	4013      	ands	r3, r2
 80014b0:	d00a      	beq.n	80014c8 <apa102_setPattern+0x5c>
			leds[i] = globalColor;
 80014b2:	187b      	adds	r3, r7, r1
 80014b4:	881b      	ldrh	r3, [r3, #0]
 80014b6:	4a1e      	ldr	r2, [pc, #120]	; (8001530 <apa102_setPattern+0xc4>)
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	491c      	ldr	r1, [pc, #112]	; (800152c <apa102_setPattern+0xc0>)
 80014bc:	18d3      	adds	r3, r2, r3
 80014be:	2204      	movs	r2, #4
 80014c0:	0018      	movs	r0, r3
 80014c2:	f001 f8eb 	bl	800269c <memcpy>
 80014c6:	e01f      	b.n	8001508 <apa102_setPattern+0x9c>
		} else {	//led shall be off
			leds[i].global = 0;
 80014c8:	200e      	movs	r0, #14
 80014ca:	183b      	adds	r3, r7, r0
 80014cc:	881a      	ldrh	r2, [r3, #0]
 80014ce:	4b18      	ldr	r3, [pc, #96]	; (8001530 <apa102_setPattern+0xc4>)
 80014d0:	0092      	lsls	r2, r2, #2
 80014d2:	2100      	movs	r1, #0
 80014d4:	54d1      	strb	r1, [r2, r3]
			leds[i].blue = 0;
 80014d6:	0001      	movs	r1, r0
 80014d8:	187b      	adds	r3, r7, r1
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	4a14      	ldr	r2, [pc, #80]	; (8001530 <apa102_setPattern+0xc4>)
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	18d3      	adds	r3, r2, r3
 80014e2:	3301      	adds	r3, #1
 80014e4:	2200      	movs	r2, #0
 80014e6:	701a      	strb	r2, [r3, #0]
			leds[i].green = 0;
 80014e8:	187b      	adds	r3, r7, r1
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	4a10      	ldr	r2, [pc, #64]	; (8001530 <apa102_setPattern+0xc4>)
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	18d3      	adds	r3, r2, r3
 80014f2:	3302      	adds	r3, #2
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]
			leds[i].red = 0;
 80014f8:	187b      	adds	r3, r7, r1
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	4a0c      	ldr	r2, [pc, #48]	; (8001530 <apa102_setPattern+0xc4>)
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	18d3      	adds	r3, r2, r3
 8001502:	3303      	adds	r3, #3
 8001504:	2200      	movs	r2, #0
 8001506:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < 16; i++) {
 8001508:	210e      	movs	r1, #14
 800150a:	187b      	adds	r3, r7, r1
 800150c:	881a      	ldrh	r2, [r3, #0]
 800150e:	187b      	adds	r3, r7, r1
 8001510:	3201      	adds	r2, #1
 8001512:	801a      	strh	r2, [r3, #0]
 8001514:	230e      	movs	r3, #14
 8001516:	18fb      	adds	r3, r7, r3
 8001518:	881b      	ldrh	r3, [r3, #0]
 800151a:	2b0f      	cmp	r3, #15
 800151c:	d9bf      	bls.n	800149e <apa102_setPattern+0x32>
		}
	}
	updateStripe();
 800151e:	f7ff ff01 	bl	8001324 <updateStripe>
}
 8001522:	46c0      	nop			; (mov r8, r8)
 8001524:	46bd      	mov	sp, r7
 8001526:	b004      	add	sp, #16
 8001528:	bd80      	pop	{r7, pc}
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	2000003c 	.word	0x2000003c
 8001530:	2000004c 	.word	0x2000004c

08001534 <apa102_setSingle>:

void apa102_setSingle(uint8_t index, uint8_t global) {
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	0002      	movs	r2, r0
 800153c:	1dfb      	adds	r3, r7, #7
 800153e:	701a      	strb	r2, [r3, #0]
 8001540:	1dbb      	adds	r3, r7, #6
 8001542:	1c0a      	adds	r2, r1, #0
 8001544:	701a      	strb	r2, [r3, #0]
	apa102_setPattern(1 << index, global);
 8001546:	1dfb      	adds	r3, r7, #7
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2201      	movs	r2, #1
 800154c:	409a      	lsls	r2, r3
 800154e:	0013      	movs	r3, r2
 8001550:	b29a      	uxth	r2, r3
 8001552:	1dbb      	adds	r3, r7, #6
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	0019      	movs	r1, r3
 8001558:	0010      	movs	r0, r2
 800155a:	f7ff ff87 	bl	800146c <apa102_setPattern>
}
 800155e:	46c0      	nop			; (mov r8, r8)
 8001560:	46bd      	mov	sp, r7
 8001562:	b002      	add	sp, #8
 8001564:	bd80      	pop	{r7, pc}

08001566 <apa102_Bargraph>:

void apa102_Bargraph(uint8_t hight, uint8_t global)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b084      	sub	sp, #16
 800156a:	af00      	add	r7, sp, #0
 800156c:	0002      	movs	r2, r0
 800156e:	1dfb      	adds	r3, r7, #7
 8001570:	701a      	strb	r2, [r3, #0]
 8001572:	1dbb      	adds	r3, r7, #6
 8001574:	1c0a      	adds	r2, r1, #0
 8001576:	701a      	strb	r2, [r3, #0]
	if(!hight)
 8001578:	1dfb      	adds	r3, r7, #7
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d102      	bne.n	8001586 <apa102_Bargraph+0x20>
	{
		apa102_allOff();
 8001580:	f000 f838 	bl	80015f4 <apa102_allOff>
		return;
 8001584:	e032      	b.n	80015ec <apa102_Bargraph+0x86>
	}
	if(hight > 16)
 8001586:	1dfb      	adds	r3, r7, #7
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b10      	cmp	r3, #16
 800158c:	d902      	bls.n	8001594 <apa102_Bargraph+0x2e>
	{
		hight = 16;
 800158e:	1dfb      	adds	r3, r7, #7
 8001590:	2210      	movs	r2, #16
 8001592:	701a      	strb	r2, [r3, #0]
	}
	uint16_t pattern = 0;
 8001594:	230e      	movs	r3, #14
 8001596:	18fb      	adds	r3, r7, r3
 8001598:	2200      	movs	r2, #0
 800159a:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < hight; i++)
 800159c:	230d      	movs	r3, #13
 800159e:	18fb      	adds	r3, r7, r3
 80015a0:	2200      	movs	r2, #0
 80015a2:	701a      	strb	r2, [r3, #0]
 80015a4:	e011      	b.n	80015ca <apa102_Bargraph+0x64>
	{
		pattern += 1<<i;
 80015a6:	200d      	movs	r0, #13
 80015a8:	183b      	adds	r3, r7, r0
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2201      	movs	r2, #1
 80015ae:	409a      	lsls	r2, r3
 80015b0:	0013      	movs	r3, r2
 80015b2:	b299      	uxth	r1, r3
 80015b4:	220e      	movs	r2, #14
 80015b6:	18bb      	adds	r3, r7, r2
 80015b8:	18ba      	adds	r2, r7, r2
 80015ba:	8812      	ldrh	r2, [r2, #0]
 80015bc:	188a      	adds	r2, r1, r2
 80015be:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < hight; i++)
 80015c0:	183b      	adds	r3, r7, r0
 80015c2:	781a      	ldrb	r2, [r3, #0]
 80015c4:	183b      	adds	r3, r7, r0
 80015c6:	3201      	adds	r2, #1
 80015c8:	701a      	strb	r2, [r3, #0]
 80015ca:	230d      	movs	r3, #13
 80015cc:	18fa      	adds	r2, r7, r3
 80015ce:	1dfb      	adds	r3, r7, #7
 80015d0:	7812      	ldrb	r2, [r2, #0]
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d3e6      	bcc.n	80015a6 <apa102_Bargraph+0x40>
	}
	apa102_setPattern(pattern, global);
 80015d8:	1dbb      	adds	r3, r7, #6
 80015da:	781a      	ldrb	r2, [r3, #0]
 80015dc:	230e      	movs	r3, #14
 80015de:	18fb      	adds	r3, r7, r3
 80015e0:	881b      	ldrh	r3, [r3, #0]
 80015e2:	0011      	movs	r1, r2
 80015e4:	0018      	movs	r0, r3
 80015e6:	f7ff ff41 	bl	800146c <apa102_setPattern>
	return;
 80015ea:	46c0      	nop			; (mov r8, r8)
}
 80015ec:	46bd      	mov	sp, r7
 80015ee:	b004      	add	sp, #16
 80015f0:	bd80      	pop	{r7, pc}
	...

080015f4 <apa102_allOff>:

void apa102_allOff() {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
	for (uint16_t i = 0; i < 16; i++) {
 80015fa:	1dbb      	adds	r3, r7, #6
 80015fc:	2200      	movs	r2, #0
 80015fe:	801a      	strh	r2, [r3, #0]
 8001600:	e022      	b.n	8001648 <apa102_allOff+0x54>

		leds[i].global = 0;
 8001602:	1dbb      	adds	r3, r7, #6
 8001604:	881a      	ldrh	r2, [r3, #0]
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <apa102_allOff+0x68>)
 8001608:	0092      	lsls	r2, r2, #2
 800160a:	2100      	movs	r1, #0
 800160c:	54d1      	strb	r1, [r2, r3]
		leds[i].blue = 0;
 800160e:	1dbb      	adds	r3, r7, #6
 8001610:	881b      	ldrh	r3, [r3, #0]
 8001612:	4a12      	ldr	r2, [pc, #72]	; (800165c <apa102_allOff+0x68>)
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	18d3      	adds	r3, r2, r3
 8001618:	3301      	adds	r3, #1
 800161a:	2200      	movs	r2, #0
 800161c:	701a      	strb	r2, [r3, #0]
		leds[i].green = 0;
 800161e:	1dbb      	adds	r3, r7, #6
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	4a0e      	ldr	r2, [pc, #56]	; (800165c <apa102_allOff+0x68>)
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	18d3      	adds	r3, r2, r3
 8001628:	3302      	adds	r3, #2
 800162a:	2200      	movs	r2, #0
 800162c:	701a      	strb	r2, [r3, #0]
		leds[i].red = 0;
 800162e:	1dbb      	adds	r3, r7, #6
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	4a0a      	ldr	r2, [pc, #40]	; (800165c <apa102_allOff+0x68>)
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	18d3      	adds	r3, r2, r3
 8001638:	3303      	adds	r3, #3
 800163a:	2200      	movs	r2, #0
 800163c:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < 16; i++) {
 800163e:	1dbb      	adds	r3, r7, #6
 8001640:	881a      	ldrh	r2, [r3, #0]
 8001642:	1dbb      	adds	r3, r7, #6
 8001644:	3201      	adds	r2, #1
 8001646:	801a      	strh	r2, [r3, #0]
 8001648:	1dbb      	adds	r3, r7, #6
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	2b0f      	cmp	r3, #15
 800164e:	d9d8      	bls.n	8001602 <apa102_allOff+0xe>

	}
	updateStripe();
 8001650:	f7ff fe68 	bl	8001324 <updateStripe>
}
 8001654:	46c0      	nop			; (mov r8, r8)
 8001656:	46bd      	mov	sp, r7
 8001658:	b002      	add	sp, #8
 800165a:	bd80      	pop	{r7, pc}
 800165c:	2000004c 	.word	0x2000004c

08001660 <NVIC_EnableIRQ>:
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	0002      	movs	r2, r0
 8001668:	1dfb      	adds	r3, r7, #7
 800166a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (1 << ((uint32_t) (IRQn) & 0x1F));
 800166c:	1dfb      	adds	r3, r7, #7
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	001a      	movs	r2, r3
 8001672:	231f      	movs	r3, #31
 8001674:	4013      	ands	r3, r2
 8001676:	2201      	movs	r2, #1
 8001678:	409a      	lsls	r2, r3
 800167a:	4b03      	ldr	r3, [pc, #12]	; (8001688 <NVIC_EnableIRQ+0x28>)
 800167c:	601a      	str	r2, [r3, #0]
}
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	46bd      	mov	sp, r7
 8001682:	b002      	add	sp, #8
 8001684:	bd80      	pop	{r7, pc}
 8001686:	46c0      	nop			; (mov r8, r8)
 8001688:	e000e100 	.word	0xe000e100

0800168c <displayInit>:
 *
 *
 *TODO: test and optimize all the timings in this class
 */

void displayInit() {
 800168c:	b5b0      	push	{r4, r5, r7, lr}
 800168e:	af00      	add	r7, sp, #0
	//set up mma8653 with +-4g-Range, low res and high sampling rate
	//set up interrupt-driven sensor readout
	mma8653_setRange(RANGE_8G);
 8001690:	2002      	movs	r0, #2
 8001692:	f000 fd2d 	bl	80020f0 <mma8653_setRange>
	mma8653_setDataWidth(MMA8653_DATAWIDTH_8);
 8001696:	2000      	movs	r0, #0
 8001698:	f000 fd72 	bl	8002180 <mma8653_setDataWidth>
	mma8653_setDataRate(RATE_200Hz);
 800169c:	2002      	movs	r0, #2
 800169e:	f000 fd4a 	bl	8002136 <mma8653_setDataRate>
	mma8653_initIrq();
 80016a2:	f000 fddf 	bl	8002264 <mma8653_initIrq>

	apa102_allOff();
 80016a6:	f7ff ffa5 	bl	80015f4 <apa102_allOff>

	//set up timer TIM2 for measuring t_frame
	//upcounting,12MHz-> prescaler = 4,
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80016aa:	2101      	movs	r1, #1
 80016ac:	2001      	movs	r0, #1
 80016ae:	f7ff f951 	bl	8000954 <RCC_APB1PeriphClockCmd>
	TIM2->CR1 = 0;
 80016b2:	2380      	movs	r3, #128	; 0x80
 80016b4:	05db      	lsls	r3, r3, #23
 80016b6:	2200      	movs	r2, #0
 80016b8:	801a      	strh	r2, [r3, #0]
	TIM2->PSC = 48;
 80016ba:	2380      	movs	r3, #128	; 0x80
 80016bc:	05db      	lsls	r3, r3, #23
 80016be:	2230      	movs	r2, #48	; 0x30
 80016c0:	851a      	strh	r2, [r3, #40]	; 0x28
	//reset the counter:
	TIM2->EGR |= TIM_EGR_UG;
 80016c2:	2380      	movs	r3, #128	; 0x80
 80016c4:	05db      	lsls	r3, r3, #23
 80016c6:	8a9b      	ldrh	r3, [r3, #20]
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	2380      	movs	r3, #128	; 0x80
 80016cc:	05db      	lsls	r3, r3, #23
 80016ce:	2101      	movs	r1, #1
 80016d0:	430a      	orrs	r2, r1
 80016d2:	b292      	uxth	r2, r2
 80016d4:	829a      	strh	r2, [r3, #20]
	TIM2->CR1 |= TIM_CR1_CEN;
 80016d6:	2380      	movs	r3, #128	; 0x80
 80016d8:	05db      	lsls	r3, r3, #23
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	b29a      	uxth	r2, r3
 80016de:	2380      	movs	r3, #128	; 0x80
 80016e0:	05db      	lsls	r3, r3, #23
 80016e2:	2101      	movs	r1, #1
 80016e4:	430a      	orrs	r2, r1
 80016e6:	b292      	uxth	r2, r2
 80016e8:	801a      	strh	r2, [r3, #0]

	//setup TIM2 Compare Channel 1 for setting the length of the LockTime!
	//the data-ready interrupt from the sensor is ignored during that time
	//set to 30 ms (a faster swipe doesn't seem to be possible by hand)
	TIM2->DIER |= TIM_DIER_CC1IE;
 80016ea:	2380      	movs	r3, #128	; 0x80
 80016ec:	05db      	lsls	r3, r3, #23
 80016ee:	899b      	ldrh	r3, [r3, #12]
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	05db      	lsls	r3, r3, #23
 80016f6:	2102      	movs	r1, #2
 80016f8:	430a      	orrs	r2, r1
 80016fa:	b292      	uxth	r2, r2
 80016fc:	819a      	strh	r2, [r3, #12]
	TIM2->CCR1 = 30000;
 80016fe:	2380      	movs	r3, #128	; 0x80
 8001700:	05db      	lsls	r3, r3, #23
 8001702:	4a6f      	ldr	r2, [pc, #444]	; (80018c0 <displayInit+0x234>)
 8001704:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCER |= TIM_CCER_CC1E;
 8001706:	2380      	movs	r3, #128	; 0x80
 8001708:	05db      	lsls	r3, r3, #23
 800170a:	8c1b      	ldrh	r3, [r3, #32]
 800170c:	b29a      	uxth	r2, r3
 800170e:	2380      	movs	r3, #128	; 0x80
 8001710:	05db      	lsls	r3, r3, #23
 8001712:	2101      	movs	r1, #1
 8001714:	430a      	orrs	r2, r1
 8001716:	b292      	uxth	r2, r2
 8001718:	841a      	strh	r2, [r3, #32]
	NVIC_EnableIRQ(TIM2_IRQn);
 800171a:	200f      	movs	r0, #15
 800171c:	f7ff ffa0 	bl	8001660 <NVIC_EnableIRQ>

	//set up timer TIM3 for triggering the lines with t_line (= t_frame/LINECOUNT)
	//upcounting 12Mhz, autoreload @ t_frame/LINECOUNT, interrupt @ overflow
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8001720:	2101      	movs	r1, #1
 8001722:	2002      	movs	r0, #2
 8001724:	f7ff f916 	bl	8000954 <RCC_APB1PeriphClockCmd>
	TIM3->CR1 = 0;
 8001728:	4b66      	ldr	r3, [pc, #408]	; (80018c4 <displayInit+0x238>)
 800172a:	2200      	movs	r2, #0
 800172c:	801a      	strh	r2, [r3, #0]
	TIM3->PSC = 48;
 800172e:	4b65      	ldr	r3, [pc, #404]	; (80018c4 <displayInit+0x238>)
 8001730:	2230      	movs	r2, #48	; 0x30
 8001732:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM3->DIER |= TIM_DIER_UIE;
 8001734:	4b63      	ldr	r3, [pc, #396]	; (80018c4 <displayInit+0x238>)
 8001736:	899b      	ldrh	r3, [r3, #12]
 8001738:	b29b      	uxth	r3, r3
 800173a:	4a62      	ldr	r2, [pc, #392]	; (80018c4 <displayInit+0x238>)
 800173c:	2101      	movs	r1, #1
 800173e:	430b      	orrs	r3, r1
 8001740:	b29b      	uxth	r3, r3
 8001742:	8193      	strh	r3, [r2, #12]
	//clear interrupt flag
	TIM3->SR &= ~TIM_SR_UIF;
 8001744:	4b5f      	ldr	r3, [pc, #380]	; (80018c4 <displayInit+0x238>)
 8001746:	8a1b      	ldrh	r3, [r3, #16]
 8001748:	b29b      	uxth	r3, r3
 800174a:	4a5e      	ldr	r2, [pc, #376]	; (80018c4 <displayInit+0x238>)
 800174c:	2101      	movs	r1, #1
 800174e:	438b      	bics	r3, r1
 8001750:	b29b      	uxth	r3, r3
 8001752:	8213      	strh	r3, [r2, #16]
	//enable the IRQ
	NVIC_EnableIRQ(TIM3_IRQn);
 8001754:	2010      	movs	r0, #16
 8001756:	f7ff ff83 	bl	8001660 <NVIC_EnableIRQ>
	//don't activate this timer now, because an overflow would produce a line on the display!

	//if the device is unconfigured (rowsVisible = 0), set a smiley as default picture
	//TODO: this could be planted into flash directly (to save a bit of memory)
	if (NvMem_read(NVMEM_AD_ROWS_VISIBLE) > 32
 800175a:	2003      	movs	r0, #3
 800175c:	f000 fe02 	bl	8002364 <NvMem_read>
 8001760:	0003      	movs	r3, r0
 8001762:	2b20      	cmp	r3, #32
 8001764:	d804      	bhi.n	8001770 <displayInit+0xe4>
			|| NvMem_read(NVMEM_AD_ROWS_VISIBLE) == 0) {
 8001766:	2003      	movs	r0, #3
 8001768:	f000 fdfc 	bl	8002364 <NvMem_read>
 800176c:	1e03      	subs	r3, r0, #0
 800176e:	d15b      	bne.n	8001828 <displayInit+0x19c>
		NvMem_write(NVMEM_AD_ROWS_VISIBLE, 16);
 8001770:	2110      	movs	r1, #16
 8001772:	2003      	movs	r0, #3
 8001774:	f000 fe10 	bl	8002398 <NvMem_write>
		NvMem_write(NVMEM_AD_OVERSCAN, 0);
 8001778:	2100      	movs	r1, #0
 800177a:	2004      	movs	r0, #4
 800177c:	f000 fe0c 	bl	8002398 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 0, 0b0000001111000000);
 8001780:	23f0      	movs	r3, #240	; 0xf0
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	0019      	movs	r1, r3
 8001786:	2005      	movs	r0, #5
 8001788:	f000 fe06 	bl	8002398 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 1, 0b0000110000110000);
 800178c:	23c3      	movs	r3, #195	; 0xc3
 800178e:	011b      	lsls	r3, r3, #4
 8001790:	0019      	movs	r1, r3
 8001792:	2006      	movs	r0, #6
 8001794:	f000 fe00 	bl	8002398 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 2, 0b0001000000001000);
 8001798:	4b4b      	ldr	r3, [pc, #300]	; (80018c8 <displayInit+0x23c>)
 800179a:	0019      	movs	r1, r3
 800179c:	2007      	movs	r0, #7
 800179e:	f000 fdfb 	bl	8002398 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 3, 0b0010000000000100);
 80017a2:	4b4a      	ldr	r3, [pc, #296]	; (80018cc <displayInit+0x240>)
 80017a4:	0019      	movs	r1, r3
 80017a6:	2008      	movs	r0, #8
 80017a8:	f000 fdf6 	bl	8002398 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 4, 0b0100010000010010);
 80017ac:	4b48      	ldr	r3, [pc, #288]	; (80018d0 <displayInit+0x244>)
 80017ae:	0019      	movs	r1, r3
 80017b0:	2009      	movs	r0, #9
 80017b2:	f000 fdf1 	bl	8002398 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 5, 0b0100010000010010);
 80017b6:	4b46      	ldr	r3, [pc, #280]	; (80018d0 <displayInit+0x244>)
 80017b8:	0019      	movs	r1, r3
 80017ba:	200a      	movs	r0, #10
 80017bc:	f000 fdec 	bl	8002398 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 6, 0b1000000000001001);
 80017c0:	4b44      	ldr	r3, [pc, #272]	; (80018d4 <displayInit+0x248>)
 80017c2:	0019      	movs	r1, r3
 80017c4:	200b      	movs	r0, #11
 80017c6:	f000 fde7 	bl	8002398 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 7, 0b1000000110001001);
 80017ca:	4b43      	ldr	r3, [pc, #268]	; (80018d8 <displayInit+0x24c>)
 80017cc:	0019      	movs	r1, r3
 80017ce:	200c      	movs	r0, #12
 80017d0:	f000 fde2 	bl	8002398 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 8, 0b1000000000001001);
 80017d4:	4b3f      	ldr	r3, [pc, #252]	; (80018d4 <displayInit+0x248>)
 80017d6:	0019      	movs	r1, r3
 80017d8:	200d      	movs	r0, #13
 80017da:	f000 fddd 	bl	8002398 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 9, 0b1000000000001001);
 80017de:	4b3d      	ldr	r3, [pc, #244]	; (80018d4 <displayInit+0x248>)
 80017e0:	0019      	movs	r1, r3
 80017e2:	200e      	movs	r0, #14
 80017e4:	f000 fdd8 	bl	8002398 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 10, 0b0100010000010010);
 80017e8:	4b39      	ldr	r3, [pc, #228]	; (80018d0 <displayInit+0x244>)
 80017ea:	0019      	movs	r1, r3
 80017ec:	200f      	movs	r0, #15
 80017ee:	f000 fdd3 	bl	8002398 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 11, 0b0100010000010010);
 80017f2:	4b37      	ldr	r3, [pc, #220]	; (80018d0 <displayInit+0x244>)
 80017f4:	0019      	movs	r1, r3
 80017f6:	2010      	movs	r0, #16
 80017f8:	f000 fdce 	bl	8002398 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 12, 0b0010000000000100);
 80017fc:	4b33      	ldr	r3, [pc, #204]	; (80018cc <displayInit+0x240>)
 80017fe:	0019      	movs	r1, r3
 8001800:	2011      	movs	r0, #17
 8001802:	f000 fdc9 	bl	8002398 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 13, 0b0001000000001000);
 8001806:	4b30      	ldr	r3, [pc, #192]	; (80018c8 <displayInit+0x23c>)
 8001808:	0019      	movs	r1, r3
 800180a:	2012      	movs	r0, #18
 800180c:	f000 fdc4 	bl	8002398 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 14, 0b0000110000110000);
 8001810:	23c3      	movs	r3, #195	; 0xc3
 8001812:	011b      	lsls	r3, r3, #4
 8001814:	0019      	movs	r1, r3
 8001816:	2013      	movs	r0, #19
 8001818:	f000 fdbe 	bl	8002398 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 15, 0b0000001111000000);
 800181c:	23f0      	movs	r3, #240	; 0xf0
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	0019      	movs	r1, r3
 8001822:	2014      	movs	r0, #20
 8001824:	f000 fdb8 	bl	8002398 <NvMem_write>
	}
	//if the color has never been configured (or if somebody configured it to 0,0,0) the Lightshaker doesn't do anything visible, so let's change that
	if (!NvMem_read(NVMEM_AD_GLOBAL_BLUE) && !NvMem_read(NVMEM_AD_GLOBAL_GREEN)
 8001828:	2002      	movs	r0, #2
 800182a:	f000 fd9b 	bl	8002364 <NvMem_read>
 800182e:	1e03      	subs	r3, r0, #0
 8001830:	d115      	bne.n	800185e <displayInit+0x1d2>
 8001832:	2001      	movs	r0, #1
 8001834:	f000 fd96 	bl	8002364 <NvMem_read>
 8001838:	1e03      	subs	r3, r0, #0
 800183a:	d110      	bne.n	800185e <displayInit+0x1d2>
			&& !NvMem_read(NVMEM_AD_GLOBAL_RED)) {
 800183c:	2000      	movs	r0, #0
 800183e:	f000 fd91 	bl	8002364 <NvMem_read>
 8001842:	1e03      	subs	r3, r0, #0
 8001844:	d10b      	bne.n	800185e <displayInit+0x1d2>
		NvMem_write(NVMEM_AD_GLOBAL_BLUE, 255);
 8001846:	21ff      	movs	r1, #255	; 0xff
 8001848:	2002      	movs	r0, #2
 800184a:	f000 fda5 	bl	8002398 <NvMem_write>
		NvMem_write(NVMEM_AD_GLOBAL_GREEN, 255);
 800184e:	21ff      	movs	r1, #255	; 0xff
 8001850:	2001      	movs	r0, #1
 8001852:	f000 fda1 	bl	8002398 <NvMem_write>
		NvMem_write(NVMEM_AD_GLOBAL_RED, 255);
 8001856:	21ff      	movs	r1, #255	; 0xff
 8001858:	2000      	movs	r0, #0
 800185a:	f000 fd9d 	bl	8002398 <NvMem_write>
	}

	//init the display data
	RowsOverscan = NvMem_read(NVMEM_AD_OVERSCAN);
 800185e:	2004      	movs	r0, #4
 8001860:	f000 fd80 	bl	8002364 <NvMem_read>
 8001864:	0003      	movs	r3, r0
 8001866:	b2da      	uxtb	r2, r3
 8001868:	4b1c      	ldr	r3, [pc, #112]	; (80018dc <displayInit+0x250>)
 800186a:	701a      	strb	r2, [r3, #0]
	RowsVisible = NvMem_read(NVMEM_AD_ROWS_VISIBLE);
 800186c:	2003      	movs	r0, #3
 800186e:	f000 fd79 	bl	8002364 <NvMem_read>
 8001872:	0003      	movs	r3, r0
 8001874:	b2da      	uxtb	r2, r3
 8001876:	4b1a      	ldr	r3, [pc, #104]	; (80018e0 <displayInit+0x254>)
 8001878:	701a      	strb	r2, [r3, #0]

	RowsLogic = RowsVisible + 2 * RowsOverscan;
 800187a:	4b18      	ldr	r3, [pc, #96]	; (80018dc <displayInit+0x250>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	b2db      	uxtb	r3, r3
 8001880:	18db      	adds	r3, r3, r3
 8001882:	b2da      	uxtb	r2, r3
 8001884:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <displayInit+0x254>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	18d3      	adds	r3, r2, r3
 800188c:	b2da      	uxtb	r2, r3
 800188e:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <displayInit+0x258>)
 8001890:	701a      	strb	r2, [r3, #0]

	//set the color to whatever is defined in NvMem
	apa102_setGlobalColor(NvMem_read(NVMEM_AD_GLOBAL_RED),
 8001892:	2000      	movs	r0, #0
 8001894:	f000 fd66 	bl	8002364 <NvMem_read>
 8001898:	0003      	movs	r3, r0
 800189a:	b2dc      	uxtb	r4, r3
			NvMem_read(NVMEM_AD_GLOBAL_GREEN),
 800189c:	2001      	movs	r0, #1
 800189e:	f000 fd61 	bl	8002364 <NvMem_read>
 80018a2:	0003      	movs	r3, r0
	apa102_setGlobalColor(NvMem_read(NVMEM_AD_GLOBAL_RED),
 80018a4:	b2dd      	uxtb	r5, r3
			NvMem_read(NVMEM_AD_GLOBAL_BLUE));
 80018a6:	2002      	movs	r0, #2
 80018a8:	f000 fd5c 	bl	8002364 <NvMem_read>
 80018ac:	0003      	movs	r3, r0
	apa102_setGlobalColor(NvMem_read(NVMEM_AD_GLOBAL_RED),
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	001a      	movs	r2, r3
 80018b2:	0029      	movs	r1, r5
 80018b4:	0020      	movs	r0, r4
 80018b6:	f7ff fd13 	bl	80012e0 <apa102_setGlobalColor>

}
 80018ba:	46c0      	nop			; (mov r8, r8)
 80018bc:	46bd      	mov	sp, r7
 80018be:	bdb0      	pop	{r4, r5, r7, pc}
 80018c0:	00007530 	.word	0x00007530
 80018c4:	40000400 	.word	0x40000400
 80018c8:	00001008 	.word	0x00001008
 80018cc:	00002004 	.word	0x00002004
 80018d0:	00004412 	.word	0x00004412
 80018d4:	00008009 	.word	0x00008009
 80018d8:	00008189 	.word	0x00008189
 80018dc:	200000d8 	.word	0x200000d8
 80018e0:	2000011d 	.word	0x2000011d
 80018e4:	2000011e 	.word	0x2000011e

080018e8 <displaySendLine>:

//called 2 times for every row
//first call should switch on the LEDs according to rowData, 2nd should switch them off to insert a blank row
//without this blank row, the rows are squeezed together too much
void displaySendLine() {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
	//clear interrupt flag
	TIM3->SR &= ~TIM_SR_UIF;
 80018ec:	4b2d      	ldr	r3, [pc, #180]	; (80019a4 <displaySendLine+0xbc>)
 80018ee:	8a1b      	ldrh	r3, [r3, #16]
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	4a2c      	ldr	r2, [pc, #176]	; (80019a4 <displaySendLine+0xbc>)
 80018f4:	2101      	movs	r1, #1
 80018f6:	438b      	bics	r3, r1
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	8213      	strh	r3, [r2, #16]

	//left side is the row, right side the gap
	if (DisplayPosition == DISP_POS_ROW_START) {
 80018fc:	4b2a      	ldr	r3, [pc, #168]	; (80019a8 <displaySendLine+0xc0>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d12a      	bne.n	800195c <displaySendLine+0x74>
		//if row is in the visible area
		if (RowNumber >= RowsOverscan
 8001906:	4b29      	ldr	r3, [pc, #164]	; (80019ac <displaySendLine+0xc4>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	b2da      	uxtb	r2, r3
 800190c:	4b28      	ldr	r3, [pc, #160]	; (80019b0 <displaySendLine+0xc8>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	b2db      	uxtb	r3, r3
 8001912:	429a      	cmp	r2, r3
 8001914:	d31c      	bcc.n	8001950 <displaySendLine+0x68>
				&& RowNumber < RowsOverscan + RowsVisible) {
 8001916:	4b25      	ldr	r3, [pc, #148]	; (80019ac <displaySendLine+0xc4>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	b2db      	uxtb	r3, r3
 800191c:	001a      	movs	r2, r3
 800191e:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <displaySendLine+0xc8>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	b2db      	uxtb	r3, r3
 8001924:	0019      	movs	r1, r3
 8001926:	4b23      	ldr	r3, [pc, #140]	; (80019b4 <displaySendLine+0xcc>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	b2db      	uxtb	r3, r3
 800192c:	18cb      	adds	r3, r1, r3
 800192e:	429a      	cmp	r2, r3
 8001930:	da0e      	bge.n	8001950 <displaySendLine+0x68>
			apa102_setPattern(NvMem_read(NVMEM_AD_PICTURE_START + RowNumber),
 8001932:	4b1e      	ldr	r3, [pc, #120]	; (80019ac <displaySendLine+0xc4>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	b2db      	uxtb	r3, r3
 8001938:	b29b      	uxth	r3, r3
 800193a:	3305      	adds	r3, #5
 800193c:	b29b      	uxth	r3, r3
 800193e:	0018      	movs	r0, r3
 8001940:	f000 fd10 	bl	8002364 <NvMem_read>
 8001944:	0003      	movs	r3, r0
 8001946:	211f      	movs	r1, #31
 8001948:	0018      	movs	r0, r3
 800194a:	f7ff fd8f 	bl	800146c <apa102_setPattern>
 800194e:	e001      	b.n	8001954 <displaySendLine+0x6c>
					31);
		} else {
			//switch off the display
			apa102_allOff();
 8001950:	f7ff fe50 	bl	80015f4 <apa102_allOff>
		}
		DisplayPosition = DISP_POS_GAP_START;
 8001954:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <displaySendLine+0xc0>)
 8001956:	2201      	movs	r2, #1
 8001958:	701a      	strb	r2, [r3, #0]
			TIM3->CR1 &= ~TIM_CR1_CEN;
		}

	}

}
 800195a:	e01f      	b.n	800199c <displaySendLine+0xb4>
		apa102_allOff();
 800195c:	f7ff fe4a 	bl	80015f4 <apa102_allOff>
		RowNumber += rowStep;
 8001960:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <displaySendLine+0xd0>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	b25b      	sxtb	r3, r3
 8001966:	b2da      	uxtb	r2, r3
 8001968:	4b10      	ldr	r3, [pc, #64]	; (80019ac <displaySendLine+0xc4>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	b2db      	uxtb	r3, r3
 800196e:	18d3      	adds	r3, r2, r3
 8001970:	b2da      	uxtb	r2, r3
 8001972:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <displaySendLine+0xc4>)
 8001974:	701a      	strb	r2, [r3, #0]
		DisplayPosition = DISP_POS_ROW_START;
 8001976:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <displaySendLine+0xc0>)
 8001978:	2200      	movs	r2, #0
 800197a:	701a      	strb	r2, [r3, #0]
		if (RowNumber >= RowsLogic) {
 800197c:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <displaySendLine+0xc4>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	b2da      	uxtb	r2, r3
 8001982:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <displaySendLine+0xd4>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	b2db      	uxtb	r3, r3
 8001988:	429a      	cmp	r2, r3
 800198a:	d307      	bcc.n	800199c <displaySendLine+0xb4>
			TIM3->CR1 &= ~TIM_CR1_CEN;
 800198c:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <displaySendLine+0xbc>)
 800198e:	881b      	ldrh	r3, [r3, #0]
 8001990:	b29b      	uxth	r3, r3
 8001992:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <displaySendLine+0xbc>)
 8001994:	2101      	movs	r1, #1
 8001996:	438b      	bics	r3, r1
 8001998:	b29b      	uxth	r3, r3
 800199a:	8013      	strh	r3, [r2, #0]
}
 800199c:	46c0      	nop			; (mov r8, r8)
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	46c0      	nop			; (mov r8, r8)
 80019a4:	40000400 	.word	0x40000400
 80019a8:	2000011c 	.word	0x2000011c
 80019ac:	20000038 	.word	0x20000038
 80019b0:	200000d8 	.word	0x200000d8
 80019b4:	2000011d 	.word	0x2000011d
 80019b8:	20000037 	.word	0x20000037
 80019bc:	2000011e 	.word	0x2000011e

080019c0 <displayEndOfLocktime>:

//triggered by TIM2 CompareMatch
void displayEndOfLocktime() {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
	//clear the flag and read the data (so the sensor releases the INT line)
	EXTI->PR |= EXTI_PR_PR2;
 80019c4:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <displayEndOfLocktime+0x3c>)
 80019c6:	695a      	ldr	r2, [r3, #20]
 80019c8:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <displayEndOfLocktime+0x3c>)
 80019ca:	2104      	movs	r1, #4
 80019cc:	430a      	orrs	r2, r1
 80019ce:	615a      	str	r2, [r3, #20]
	mma8653_read8();
 80019d0:	f000 fc08 	bl	80021e4 <mma8653_read8>

	//reenable the EXTI interrupt
	EXTI->IMR |= EXTI_EMR_MR2;
 80019d4:	4b09      	ldr	r3, [pc, #36]	; (80019fc <displayEndOfLocktime+0x3c>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4b08      	ldr	r3, [pc, #32]	; (80019fc <displayEndOfLocktime+0x3c>)
 80019da:	2104      	movs	r1, #4
 80019dc:	430a      	orrs	r2, r1
 80019de:	601a      	str	r2, [r3, #0]

	//clear Flag for this Interrupt
	TIM2->SR &= ~TIM_SR_CC1IF;
 80019e0:	2380      	movs	r3, #128	; 0x80
 80019e2:	05db      	lsls	r3, r3, #23
 80019e4:	8a1b      	ldrh	r3, [r3, #16]
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	2380      	movs	r3, #128	; 0x80
 80019ea:	05db      	lsls	r3, r3, #23
 80019ec:	2102      	movs	r1, #2
 80019ee:	438a      	bics	r2, r1
 80019f0:	b292      	uxth	r2, r2
 80019f2:	821a      	strh	r2, [r3, #16]
}
 80019f4:	46c0      	nop			; (mov r8, r8)
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	40010400 	.word	0x40010400

08001a00 <displayFrameStart>:

void displayFrameStart() {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0

	//deactivate the peak detection for some time after a valid return point
	//by deactivating the EXTI interrupt
	EXTI->IMR &= ~EXTI_EMR_MR2;
 8001a06:	4b23      	ldr	r3, [pc, #140]	; (8001a94 <displayFrameStart+0x94>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	4b22      	ldr	r3, [pc, #136]	; (8001a94 <displayFrameStart+0x94>)
 8001a0c:	2104      	movs	r1, #4
 8001a0e:	438a      	bics	r2, r1
 8001a10:	601a      	str	r2, [r3, #0]

	//take the counter value from timer2:
	uint32_t tFrame = TIM2->CNT;
 8001a12:	2380      	movs	r3, #128	; 0x80
 8001a14:	05db      	lsls	r3, r3, #23
 8001a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a18:	607b      	str	r3, [r7, #4]

	//calculate t_row and save it to the auto-reload register of tim3
	TIM3->ARR = (uint16_t) (tFrame / (RowsLogic * 2));
 8001a1a:	4b1f      	ldr	r3, [pc, #124]	; (8001a98 <displayFrameStart+0x98>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	0019      	movs	r1, r3
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7fe fb6f 	bl	8000108 <__udivsi3>
 8001a2a:	0003      	movs	r3, r0
 8001a2c:	b29a      	uxth	r2, r3
 8001a2e:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <displayFrameStart+0x9c>)
 8001a30:	62da      	str	r2, [r3, #44]	; 0x2c
	//clear interrupt flag for TIM3
	TIM3->SR &= ~TIM_SR_UIF;
 8001a32:	4b1a      	ldr	r3, [pc, #104]	; (8001a9c <displayFrameStart+0x9c>)
 8001a34:	8a1b      	ldrh	r3, [r3, #16]
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	4a18      	ldr	r2, [pc, #96]	; (8001a9c <displayFrameStart+0x9c>)
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	438b      	bics	r3, r1
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	8213      	strh	r3, [r2, #16]
	//reset both timers
	TIM2->EGR |= TIM_EGR_UG;
 8001a42:	2380      	movs	r3, #128	; 0x80
 8001a44:	05db      	lsls	r3, r3, #23
 8001a46:	8a9b      	ldrh	r3, [r3, #20]
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	05db      	lsls	r3, r3, #23
 8001a4e:	2101      	movs	r1, #1
 8001a50:	430a      	orrs	r2, r1
 8001a52:	b292      	uxth	r2, r2
 8001a54:	829a      	strh	r2, [r3, #20]
	TIM3->EGR |= TIM_EGR_UG;
 8001a56:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <displayFrameStart+0x9c>)
 8001a58:	8a9b      	ldrh	r3, [r3, #20]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	4a0f      	ldr	r2, [pc, #60]	; (8001a9c <displayFrameStart+0x9c>)
 8001a5e:	2101      	movs	r1, #1
 8001a60:	430b      	orrs	r3, r1
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	8293      	strh	r3, [r2, #20]
	//start both timers
	TIM2->CR1 |= TIM_CR1_CEN;
 8001a66:	2380      	movs	r3, #128	; 0x80
 8001a68:	05db      	lsls	r3, r3, #23
 8001a6a:	881b      	ldrh	r3, [r3, #0]
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	2380      	movs	r3, #128	; 0x80
 8001a70:	05db      	lsls	r3, r3, #23
 8001a72:	2101      	movs	r1, #1
 8001a74:	430a      	orrs	r2, r1
 8001a76:	b292      	uxth	r2, r2
 8001a78:	801a      	strh	r2, [r3, #0]
	TIM3->CR1 |= TIM_CR1_CEN;
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <displayFrameStart+0x9c>)
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	4a06      	ldr	r2, [pc, #24]	; (8001a9c <displayFrameStart+0x9c>)
 8001a82:	2101      	movs	r1, #1
 8001a84:	430b      	orrs	r3, r1
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	8013      	strh	r3, [r2, #0]
}
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	b002      	add	sp, #8
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	46c0      	nop			; (mov r8, r8)
 8001a94:	40010400 	.word	0x40010400
 8001a98:	2000011e 	.word	0x2000011e
 8001a9c:	40000400 	.word	0x40000400

08001aa0 <displayFindReturnPoint>:

//now this should be called with the sensors IRQ
void displayFindReturnPoint() {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
	//the Interrupt-flag is not reset until the work in this ISR is done!

	//read the output of the sensor
	//the low-pass filtering is done by the sensor!
	//this also lets the sensor release the interrupt line
	int8_t acc = mma8653_read8().x;
 8001aa6:	f000 fb9d 	bl	80021e4 <mma8653_read8>
 8001aaa:	0003      	movs	r3, r0
 8001aac:	001a      	movs	r2, r3
 8001aae:	003b      	movs	r3, r7
 8001ab0:	1c11      	adds	r1, r2, #0
 8001ab2:	7019      	strb	r1, [r3, #0]
 8001ab4:	0411      	lsls	r1, r2, #16
 8001ab6:	0e09      	lsrs	r1, r1, #24
 8001ab8:	7059      	strb	r1, [r3, #1]
 8001aba:	0212      	lsls	r2, r2, #8
 8001abc:	0e12      	lsrs	r2, r2, #24
 8001abe:	709a      	strb	r2, [r3, #2]
 8001ac0:	1dbb      	adds	r3, r7, #6
 8001ac2:	003a      	movs	r2, r7
 8001ac4:	7812      	ldrb	r2, [r2, #0]
 8001ac6:	701a      	strb	r2, [r3, #0]

	//separate value and sign for faster calculations
	uint8_t accAbs;
	if (acc >= 0) {
 8001ac8:	1dbb      	adds	r3, r7, #6
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b7f      	cmp	r3, #127	; 0x7f
 8001ace:	d804      	bhi.n	8001ada <displayFindReturnPoint+0x3a>
		accAbs = acc;
 8001ad0:	1dfb      	adds	r3, r7, #7
 8001ad2:	1dba      	adds	r2, r7, #6
 8001ad4:	7812      	ldrb	r2, [r2, #0]
 8001ad6:	701a      	strb	r2, [r3, #0]
 8001ad8:	e004      	b.n	8001ae4 <displayFindReturnPoint+0x44>
	} else {
		accAbs = -acc;
 8001ada:	1dbb      	adds	r3, r7, #6
 8001adc:	781a      	ldrb	r2, [r3, #0]
 8001ade:	1dfb      	adds	r3, r7, #7
 8001ae0:	4252      	negs	r2, r2
 8001ae2:	701a      	strb	r2, [r3, #0]
	 * the return doesn't happen in one point, but takes some time (>10ms)
	 * ->stop the time measurement as soon as the acc gets higher that the threshold,
	 * ->start the next meas and the display if the acc gets lower than the threshold again
	 */

	switch (movementState) {
 8001ae4:	4b5f      	ldr	r3, [pc, #380]	; (8001c64 <displayFindReturnPoint+0x1c4>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	d900      	bls.n	8001af0 <displayFindReturnPoint+0x50>
 8001aee:	e093      	b.n	8001c18 <displayFindReturnPoint+0x178>
 8001af0:	009a      	lsls	r2, r3, #2
 8001af2:	4b5d      	ldr	r3, [pc, #372]	; (8001c68 <displayFindReturnPoint+0x1c8>)
 8001af4:	18d3      	adds	r3, r2, r3
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	469f      	mov	pc, r3
	case STATE_UNKNOWN:
		if (accAbs > ACC_RETURN_TH) {	//this could be the first return point
 8001afa:	1dfb      	adds	r3, r7, #7
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2b64      	cmp	r3, #100	; 0x64
 8001b00:	d800      	bhi.n	8001b04 <displayFindReturnPoint+0x64>
 8001b02:	e080      	b.n	8001c06 <displayFindReturnPoint+0x166>
										//stop TIM2
			TIM2->CR1 &= ~TIM_CR1_CEN;
 8001b04:	2380      	movs	r3, #128	; 0x80
 8001b06:	05db      	lsls	r3, r3, #23
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	2380      	movs	r3, #128	; 0x80
 8001b0e:	05db      	lsls	r3, r3, #23
 8001b10:	2101      	movs	r1, #1
 8001b12:	438a      	bics	r2, r1
 8001b14:	b292      	uxth	r2, r2
 8001b16:	801a      	strh	r2, [r3, #0]
			//prevent TIM3 from triggering a new row by stopping it
			TIM3->CR1 &= ~TIM_CR1_CEN;
 8001b18:	4b54      	ldr	r3, [pc, #336]	; (8001c6c <displayFindReturnPoint+0x1cc>)
 8001b1a:	881b      	ldrh	r3, [r3, #0]
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	4a53      	ldr	r2, [pc, #332]	; (8001c6c <displayFindReturnPoint+0x1cc>)
 8001b20:	2101      	movs	r1, #1
 8001b22:	438b      	bics	r3, r1
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	8013      	strh	r3, [r2, #0]

			if (acc > 0) {
 8001b28:	1dbb      	adds	r3, r7, #6
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	b25b      	sxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	dd03      	ble.n	8001b3a <displayFindReturnPoint+0x9a>
				movementState = STATE_RIGHT_END;
 8001b32:	4b4c      	ldr	r3, [pc, #304]	; (8001c64 <displayFindReturnPoint+0x1c4>)
 8001b34:	2203      	movs	r2, #3
 8001b36:	701a      	strb	r2, [r3, #0]
			} else {
				movementState = STATE_LEFT_END;
			}
		}
		break;
 8001b38:	e065      	b.n	8001c06 <displayFindReturnPoint+0x166>
				movementState = STATE_LEFT_END;
 8001b3a:	4b4a      	ldr	r3, [pc, #296]	; (8001c64 <displayFindReturnPoint+0x1c4>)
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	701a      	strb	r2, [r3, #0]
		break;
 8001b40:	e061      	b.n	8001c06 <displayFindReturnPoint+0x166>
	case STATE_LEFT_END:
		if (accAbs < ACC_RETURN_TH) {
 8001b42:	1dfb      	adds	r3, r7, #7
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b63      	cmp	r3, #99	; 0x63
 8001b48:	d85f      	bhi.n	8001c0a <displayFindReturnPoint+0x16a>
			rowStep = 1;
 8001b4a:	4b49      	ldr	r3, [pc, #292]	; (8001c70 <displayFindReturnPoint+0x1d0>)
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	701a      	strb	r2, [r3, #0]
			RowNumber = 0;
 8001b50:	4b48      	ldr	r3, [pc, #288]	; (8001c74 <displayFindReturnPoint+0x1d4>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	701a      	strb	r2, [r3, #0]
			DisplayPosition = DISP_POS_ROW_START;
 8001b56:	4b48      	ldr	r3, [pc, #288]	; (8001c78 <displayFindReturnPoint+0x1d8>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	701a      	strb	r2, [r3, #0]
			//end of return phase
			displayFrameStart();
 8001b5c:	f7ff ff50 	bl	8001a00 <displayFrameStart>
			movementState = STATE_MOVE_FORW;
 8001b60:	4b40      	ldr	r3, [pc, #256]	; (8001c64 <displayFindReturnPoint+0x1c4>)
 8001b62:	2202      	movs	r2, #2
 8001b64:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001b66:	e050      	b.n	8001c0a <displayFindReturnPoint+0x16a>
	case STATE_RIGHT_END:
		if (accAbs < ACC_RETURN_TH) {
 8001b68:	1dfb      	adds	r3, r7, #7
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b63      	cmp	r3, #99	; 0x63
 8001b6e:	d84e      	bhi.n	8001c0e <displayFindReturnPoint+0x16e>
			//end of return phase
			rowStep = -1;
 8001b70:	4b3f      	ldr	r3, [pc, #252]	; (8001c70 <displayFindReturnPoint+0x1d0>)
 8001b72:	22ff      	movs	r2, #255	; 0xff
 8001b74:	701a      	strb	r2, [r3, #0]
			RowNumber = RowsLogic;
 8001b76:	4b41      	ldr	r3, [pc, #260]	; (8001c7c <displayFindReturnPoint+0x1dc>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	4b3d      	ldr	r3, [pc, #244]	; (8001c74 <displayFindReturnPoint+0x1d4>)
 8001b7e:	701a      	strb	r2, [r3, #0]
			DisplayPosition = DISP_POS_GAP_START;
 8001b80:	4b3d      	ldr	r3, [pc, #244]	; (8001c78 <displayFindReturnPoint+0x1d8>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	701a      	strb	r2, [r3, #0]
			displayFrameStart();
 8001b86:	f7ff ff3b 	bl	8001a00 <displayFrameStart>

			movementState = STATE_MOVE_BACKW;
 8001b8a:	4b36      	ldr	r3, [pc, #216]	; (8001c64 <displayFindReturnPoint+0x1c4>)
 8001b8c:	2204      	movs	r2, #4
 8001b8e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001b90:	e03d      	b.n	8001c0e <displayFindReturnPoint+0x16e>
	case STATE_MOVE_FORW:
		if (acc > ACC_RETURN_TH) {
 8001b92:	1dbb      	adds	r3, r7, #6
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	b25b      	sxtb	r3, r3
 8001b98:	2b64      	cmp	r3, #100	; 0x64
 8001b9a:	dd3a      	ble.n	8001c12 <displayFindReturnPoint+0x172>
			//stop TIM2
			TIM2->CR1 &= ~TIM_CR1_CEN;
 8001b9c:	2380      	movs	r3, #128	; 0x80
 8001b9e:	05db      	lsls	r3, r3, #23
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	2380      	movs	r3, #128	; 0x80
 8001ba6:	05db      	lsls	r3, r3, #23
 8001ba8:	2101      	movs	r1, #1
 8001baa:	438a      	bics	r2, r1
 8001bac:	b292      	uxth	r2, r2
 8001bae:	801a      	strh	r2, [r3, #0]
			//prevent TIM3 from triggering a new row by stopping it
			TIM3->CR1 &= ~TIM_CR1_CEN;
 8001bb0:	4b2e      	ldr	r3, [pc, #184]	; (8001c6c <displayFindReturnPoint+0x1cc>)
 8001bb2:	881b      	ldrh	r3, [r3, #0]
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	4a2d      	ldr	r2, [pc, #180]	; (8001c6c <displayFindReturnPoint+0x1cc>)
 8001bb8:	2101      	movs	r1, #1
 8001bba:	438b      	bics	r3, r1
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	8013      	strh	r3, [r2, #0]
			//switch off the display
			apa102_allOff();
 8001bc0:	f7ff fd18 	bl	80015f4 <apa102_allOff>
			movementState = STATE_RIGHT_END;
 8001bc4:	4b27      	ldr	r3, [pc, #156]	; (8001c64 <displayFindReturnPoint+0x1c4>)
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001bca:	e022      	b.n	8001c12 <displayFindReturnPoint+0x172>
	case STATE_MOVE_BACKW:
		if (acc < -ACC_RETURN_TH) {
 8001bcc:	1dbb      	adds	r3, r7, #6
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	b25b      	sxtb	r3, r3
 8001bd2:	3364      	adds	r3, #100	; 0x64
 8001bd4:	da1f      	bge.n	8001c16 <displayFindReturnPoint+0x176>
			//stop TIM2
			TIM2->CR1 &= ~TIM_CR1_CEN;
 8001bd6:	2380      	movs	r3, #128	; 0x80
 8001bd8:	05db      	lsls	r3, r3, #23
 8001bda:	881b      	ldrh	r3, [r3, #0]
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	2380      	movs	r3, #128	; 0x80
 8001be0:	05db      	lsls	r3, r3, #23
 8001be2:	2101      	movs	r1, #1
 8001be4:	438a      	bics	r2, r1
 8001be6:	b292      	uxth	r2, r2
 8001be8:	801a      	strh	r2, [r3, #0]
			//prevent TIM3 from triggering a new row by stopping it
			TIM3->CR1 &= ~TIM_CR1_CEN;
 8001bea:	4b20      	ldr	r3, [pc, #128]	; (8001c6c <displayFindReturnPoint+0x1cc>)
 8001bec:	881b      	ldrh	r3, [r3, #0]
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	4a1e      	ldr	r2, [pc, #120]	; (8001c6c <displayFindReturnPoint+0x1cc>)
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	438b      	bics	r3, r1
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	8013      	strh	r3, [r2, #0]
			//switch off the display
			apa102_allOff();
 8001bfa:	f7ff fcfb 	bl	80015f4 <apa102_allOff>
			movementState = STATE_LEFT_END;
 8001bfe:	4b19      	ldr	r3, [pc, #100]	; (8001c64 <displayFindReturnPoint+0x1c4>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001c04:	e007      	b.n	8001c16 <displayFindReturnPoint+0x176>
		break;
 8001c06:	46c0      	nop			; (mov r8, r8)
 8001c08:	e006      	b.n	8001c18 <displayFindReturnPoint+0x178>
		break;
 8001c0a:	46c0      	nop			; (mov r8, r8)
 8001c0c:	e004      	b.n	8001c18 <displayFindReturnPoint+0x178>
		break;
 8001c0e:	46c0      	nop			; (mov r8, r8)
 8001c10:	e002      	b.n	8001c18 <displayFindReturnPoint+0x178>
		break;
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	e000      	b.n	8001c18 <displayFindReturnPoint+0x178>
		break;
 8001c16:	46c0      	nop			; (mov r8, r8)
	}

	//no state other than STATE_UNKNOWN should last longer than T_FRAME_MAX
	//-> if TIM2 exceeds this time, stop it and
	//if this value is out of bounds, reset TIM2 and return to STATE_UNKNOWN
	if (TIM2->CNT > T_FRAME_MAX) {	//reset the counter:
 8001c18:	2380      	movs	r3, #128	; 0x80
 8001c1a:	05db      	lsls	r3, r3, #23
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1e:	4a18      	ldr	r2, [pc, #96]	; (8001c80 <displayFindReturnPoint+0x1e0>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d918      	bls.n	8001c56 <displayFindReturnPoint+0x1b6>
		TIM2->EGR |= TIM_EGR_UG;
 8001c24:	2380      	movs	r3, #128	; 0x80
 8001c26:	05db      	lsls	r3, r3, #23
 8001c28:	8a9b      	ldrh	r3, [r3, #20]
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	2380      	movs	r3, #128	; 0x80
 8001c2e:	05db      	lsls	r3, r3, #23
 8001c30:	2101      	movs	r1, #1
 8001c32:	430a      	orrs	r2, r1
 8001c34:	b292      	uxth	r2, r2
 8001c36:	829a      	strh	r2, [r3, #20]
		//and stop it
		TIM2->CR1 |= TIM_CR1_CEN;
 8001c38:	2380      	movs	r3, #128	; 0x80
 8001c3a:	05db      	lsls	r3, r3, #23
 8001c3c:	881b      	ldrh	r3, [r3, #0]
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	2380      	movs	r3, #128	; 0x80
 8001c42:	05db      	lsls	r3, r3, #23
 8001c44:	2101      	movs	r1, #1
 8001c46:	430a      	orrs	r2, r1
 8001c48:	b292      	uxth	r2, r2
 8001c4a:	801a      	strh	r2, [r3, #0]
		//switch off the display
		apa102_allOff();
 8001c4c:	f7ff fcd2 	bl	80015f4 <apa102_allOff>
		//set state
		movementState = STATE_UNKNOWN;
 8001c50:	4b04      	ldr	r3, [pc, #16]	; (8001c64 <displayFindReturnPoint+0x1c4>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	701a      	strb	r2, [r3, #0]
	}

	EXTI_ClearITPendingBit(EXTI_Line2);
 8001c56:	2004      	movs	r0, #4
 8001c58:	f7fe fb6c 	bl	8000334 <EXTI_ClearITPendingBit>

}
 8001c5c:	46c0      	nop			; (mov r8, r8)
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	b002      	add	sp, #8
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	2000011f 	.word	0x2000011f
 8001c68:	080026c8 	.word	0x080026c8
 8001c6c:	40000400 	.word	0x40000400
 8001c70:	20000037 	.word	0x20000037
 8001c74:	20000038 	.word	0x20000038
 8001c78:	2000011c 	.word	0x2000011c
 8001c7c:	2000011e 	.word	0x2000011e
 8001c80:	003fffc0 	.word	0x003fffc0

08001c84 <NVIC_DisableIRQ>:
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn) {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	0002      	movs	r2, r0
 8001c8c:	1dfb      	adds	r3, r7, #7
 8001c8e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (1 << ((uint32_t) (IRQn) & 0x1F));
 8001c90:	1dfb      	adds	r3, r7, #7
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	001a      	movs	r2, r3
 8001c96:	231f      	movs	r3, #31
 8001c98:	4013      	ands	r3, r2
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	409a      	lsls	r2, r3
 8001c9e:	0013      	movs	r3, r2
 8001ca0:	4a03      	ldr	r2, [pc, #12]	; (8001cb0 <NVIC_DisableIRQ+0x2c>)
 8001ca2:	0019      	movs	r1, r3
 8001ca4:	2380      	movs	r3, #128	; 0x80
 8001ca6:	50d1      	str	r1, [r2, r3]
}
 8001ca8:	46c0      	nop			; (mov r8, r8)
 8001caa:	46bd      	mov	sp, r7
 8001cac:	b002      	add	sp, #8
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	e000e100 	.word	0xe000e100

08001cb4 <I2C_RdReg>:

/**
 * Origin of I2C_RdReg and I2C_WrReg:
 * https://hsel.co.uk/2014/08/13/stm32f0-mini-tutorial-using-the-i2c-peripheral-to-communicate-with-a-hmc5883l-digital-compass-ic/
 */
uint8_t I2C_RdReg(uint8_t Reg, uint8_t *Data, uint8_t DCnt) {
 8001cb4:	b590      	push	{r4, r7, lr}
 8001cb6:	b087      	sub	sp, #28
 8001cb8:	af02      	add	r7, sp, #8
 8001cba:	6039      	str	r1, [r7, #0]
 8001cbc:	0011      	movs	r1, r2
 8001cbe:	1dfb      	adds	r3, r7, #7
 8001cc0:	1c02      	adds	r2, r0, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
 8001cc4:	1dbb      	adds	r3, r7, #6
 8001cc6:	1c0a      	adds	r2, r1, #0
 8001cc8:	701a      	strb	r2, [r3, #0]
	uint8_t Cnt, SingleData = 0;
 8001cca:	230e      	movs	r3, #14
 8001ccc:	18fb      	adds	r3, r7, r3
 8001cce:	2200      	movs	r2, #0
 8001cd0:	701a      	strb	r2, [r3, #0]

	//Wait until I2C isn't busy
	//TODO: I2C connection breaks sometimes
	while (I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_BUSY) == SET)
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	2380      	movs	r3, #128	; 0x80
 8001cd6:	021b      	lsls	r3, r3, #8
 8001cd8:	4a3c      	ldr	r2, [pc, #240]	; (8001dcc <I2C_RdReg+0x118>)
 8001cda:	0019      	movs	r1, r3
 8001cdc:	0010      	movs	r0, r2
 8001cde:	f7fe fd59 	bl	8000794 <I2C_GetFlagStatus>
 8001ce2:	0003      	movs	r3, r0
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d0f5      	beq.n	8001cd4 <I2C_RdReg+0x20>
		;

	//first communication (try reading the status register)
	/* Configure slave address, nbytes, reload, end mode and start or stop generation */
	I2C_TransferHandling(I2C_MMA8653, ADDR_MMA8653, 1, I2C_SoftEnd_Mode,
 8001ce8:	4838      	ldr	r0, [pc, #224]	; (8001dcc <I2C_RdReg+0x118>)
 8001cea:	2380      	movs	r3, #128	; 0x80
 8001cec:	019b      	lsls	r3, r3, #6
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	213a      	movs	r1, #58	; 0x3a
 8001cf6:	f7fe fcff 	bl	80006f8 <I2C_TransferHandling>
	I2C_Generate_Start_Write);
	//Ensure the transmit interrupted flag is set
	while (I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_TXIS) == RESET)
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	4b33      	ldr	r3, [pc, #204]	; (8001dcc <I2C_RdReg+0x118>)
 8001cfe:	2102      	movs	r1, #2
 8001d00:	0018      	movs	r0, r3
 8001d02:	f7fe fd47 	bl	8000794 <I2C_GetFlagStatus>
 8001d06:	1e03      	subs	r3, r0, #0
 8001d08:	d0f8      	beq.n	8001cfc <I2C_RdReg+0x48>
		;
	//send reg address
	I2C_SendData(I2C_MMA8653, (uint8_t) Reg);
 8001d0a:	1dfb      	adds	r3, r7, #7
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	4a2f      	ldr	r2, [pc, #188]	; (8001dcc <I2C_RdReg+0x118>)
 8001d10:	0019      	movs	r1, r3
 8001d12:	0010      	movs	r0, r2
 8001d14:	f7fe fd24 	bl	8000760 <I2C_SendData>
	//Wait until transfer is complete!
	while (I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_TC) == RESET)
 8001d18:	46c0      	nop			; (mov r8, r8)
 8001d1a:	4b2c      	ldr	r3, [pc, #176]	; (8001dcc <I2C_RdReg+0x118>)
 8001d1c:	2140      	movs	r1, #64	; 0x40
 8001d1e:	0018      	movs	r0, r3
 8001d20:	f7fe fd38 	bl	8000794 <I2C_GetFlagStatus>
 8001d24:	1e03      	subs	r3, r0, #0
 8001d26:	d0f8      	beq.n	8001d1a <I2C_RdReg+0x66>
		;
	//initiate read
	I2C_TransferHandling(I2C_MMA8653, ADDR_MMA8653, DCnt, I2C_AutoEnd_Mode,
 8001d28:	2380      	movs	r3, #128	; 0x80
 8001d2a:	0499      	lsls	r1, r3, #18
 8001d2c:	1dbb      	adds	r3, r7, #6
 8001d2e:	781a      	ldrb	r2, [r3, #0]
 8001d30:	4826      	ldr	r0, [pc, #152]	; (8001dcc <I2C_RdReg+0x118>)
 8001d32:	2390      	movs	r3, #144	; 0x90
 8001d34:	019b      	lsls	r3, r3, #6
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	000b      	movs	r3, r1
 8001d3a:	213a      	movs	r1, #58	; 0x3a
 8001d3c:	f7fe fcdc 	bl	80006f8 <I2C_TransferHandling>
	I2C_Generate_Start_Read);

	//Read in DCnt pieces of data
	for (Cnt = 0; Cnt < DCnt; Cnt++) {
 8001d40:	230f      	movs	r3, #15
 8001d42:	18fb      	adds	r3, r7, r3
 8001d44:	2200      	movs	r2, #0
 8001d46:	701a      	strb	r2, [r3, #0]
 8001d48:	e025      	b.n	8001d96 <I2C_RdReg+0xe2>
		//Wait until the RX register is full of luscious data!
		while (I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_RXNE) == RESET)
 8001d4a:	46c0      	nop			; (mov r8, r8)
 8001d4c:	4b1f      	ldr	r3, [pc, #124]	; (8001dcc <I2C_RdReg+0x118>)
 8001d4e:	2104      	movs	r1, #4
 8001d50:	0018      	movs	r0, r3
 8001d52:	f7fe fd1f 	bl	8000794 <I2C_GetFlagStatus>
 8001d56:	1e03      	subs	r3, r0, #0
 8001d58:	d0f8      	beq.n	8001d4c <I2C_RdReg+0x98>
			;
		//If we're only reading one byte, place that data direct into the
		//SingleData variable. If we're reading more than 1 piece of data
		//store in the array "Data" (a pointer from main)
		if (DCnt > 1) {
 8001d5a:	1dbb      	adds	r3, r7, #6
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d90b      	bls.n	8001d7a <I2C_RdReg+0xc6>
			Data[Cnt] = I2C_ReceiveData(I2C_MMA8653);
 8001d62:	230f      	movs	r3, #15
 8001d64:	18fb      	adds	r3, r7, r3
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	18d4      	adds	r4, r2, r3
 8001d6c:	4b17      	ldr	r3, [pc, #92]	; (8001dcc <I2C_RdReg+0x118>)
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f7fe fd05 	bl	800077e <I2C_ReceiveData>
 8001d74:	0003      	movs	r3, r0
 8001d76:	7023      	strb	r3, [r4, #0]
 8001d78:	e007      	b.n	8001d8a <I2C_RdReg+0xd6>
		} else
			SingleData = I2C_ReceiveData(I2C_MMA8653);
 8001d7a:	230e      	movs	r3, #14
 8001d7c:	18fc      	adds	r4, r7, r3
 8001d7e:	4b13      	ldr	r3, [pc, #76]	; (8001dcc <I2C_RdReg+0x118>)
 8001d80:	0018      	movs	r0, r3
 8001d82:	f7fe fcfc 	bl	800077e <I2C_ReceiveData>
 8001d86:	0003      	movs	r3, r0
 8001d88:	7023      	strb	r3, [r4, #0]
	for (Cnt = 0; Cnt < DCnt; Cnt++) {
 8001d8a:	210f      	movs	r1, #15
 8001d8c:	187b      	adds	r3, r7, r1
 8001d8e:	781a      	ldrb	r2, [r3, #0]
 8001d90:	187b      	adds	r3, r7, r1
 8001d92:	3201      	adds	r2, #1
 8001d94:	701a      	strb	r2, [r3, #0]
 8001d96:	230f      	movs	r3, #15
 8001d98:	18fa      	adds	r2, r7, r3
 8001d9a:	1dbb      	adds	r3, r7, #6
 8001d9c:	7812      	ldrb	r2, [r2, #0]
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d3d2      	bcc.n	8001d4a <I2C_RdReg+0x96>
	}

	//Wait for the stop condition to be sent
	while (I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_STOPF) == RESET)
 8001da4:	46c0      	nop			; (mov r8, r8)
 8001da6:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <I2C_RdReg+0x118>)
 8001da8:	2120      	movs	r1, #32
 8001daa:	0018      	movs	r0, r3
 8001dac:	f7fe fcf2 	bl	8000794 <I2C_GetFlagStatus>
 8001db0:	1e03      	subs	r3, r0, #0
 8001db2:	d0f8      	beq.n	8001da6 <I2C_RdReg+0xf2>
		;

	//Clear the stop flag for next transfers
	I2C_ClearFlag(I2C_MMA8653, I2C_FLAG_STOPF);
 8001db4:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <I2C_RdReg+0x118>)
 8001db6:	2120      	movs	r1, #32
 8001db8:	0018      	movs	r0, r3
 8001dba:	f7fe fd0f 	bl	80007dc <I2C_ClearFlag>

	//Return a single piece of data if DCnt was
	//less than 1, otherwise 0 will be returned.
	return SingleData;
 8001dbe:	230e      	movs	r3, #14
 8001dc0:	18fb      	adds	r3, r7, r3
 8001dc2:	781b      	ldrb	r3, [r3, #0]
}
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	b005      	add	sp, #20
 8001dca:	bd90      	pop	{r4, r7, pc}
 8001dcc:	40005400 	.word	0x40005400

08001dd0 <I2C_WrReg>:

void I2C_WrReg(uint8_t Reg, uint8_t Val) {
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af02      	add	r7, sp, #8
 8001dd6:	0002      	movs	r2, r0
 8001dd8:	1dfb      	adds	r3, r7, #7
 8001dda:	701a      	strb	r2, [r3, #0]
 8001ddc:	1dbb      	adds	r3, r7, #6
 8001dde:	1c0a      	adds	r2, r1, #0
 8001de0:	701a      	strb	r2, [r3, #0]

	//Wait until I2C isn't busy
	while (I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_BUSY) == SET)
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	2380      	movs	r3, #128	; 0x80
 8001de6:	021b      	lsls	r3, r3, #8
 8001de8:	4a29      	ldr	r2, [pc, #164]	; (8001e90 <I2C_WrReg+0xc0>)
 8001dea:	0019      	movs	r1, r3
 8001dec:	0010      	movs	r0, r2
 8001dee:	f7fe fcd1 	bl	8000794 <I2C_GetFlagStatus>
 8001df2:	0003      	movs	r3, r0
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d0f5      	beq.n	8001de4 <I2C_WrReg+0x14>
	//I2C interface... Regardless! Send the address of the HMC
	//sensor down the I2C Bus and generate a start saying we're
	//going to write one byte. I'll be completely honest,
	//the I2C peripheral doesn't make too much sense to me
	//and a lot of the code is from the Std peripheral library
	I2C_TransferHandling(I2C_MMA8653, ADDR_MMA8653, 1, I2C_Reload_Mode,
 8001df8:	2380      	movs	r3, #128	; 0x80
 8001dfa:	045a      	lsls	r2, r3, #17
 8001dfc:	4824      	ldr	r0, [pc, #144]	; (8001e90 <I2C_WrReg+0xc0>)
 8001dfe:	2380      	movs	r3, #128	; 0x80
 8001e00:	019b      	lsls	r3, r3, #6
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	0013      	movs	r3, r2
 8001e06:	2201      	movs	r2, #1
 8001e08:	213a      	movs	r1, #58	; 0x3a
 8001e0a:	f7fe fc75 	bl	80006f8 <I2C_TransferHandling>
	I2C_Generate_Start_Write);

	//Ensure the transmit interrupted flag is set
	while (I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_TXIS) == RESET)
 8001e0e:	46c0      	nop			; (mov r8, r8)
 8001e10:	4b1f      	ldr	r3, [pc, #124]	; (8001e90 <I2C_WrReg+0xc0>)
 8001e12:	2102      	movs	r1, #2
 8001e14:	0018      	movs	r0, r3
 8001e16:	f7fe fcbd 	bl	8000794 <I2C_GetFlagStatus>
 8001e1a:	1e03      	subs	r3, r0, #0
 8001e1c:	d0f8      	beq.n	8001e10 <I2C_WrReg+0x40>
		;

	//Send the address of the register we wish to write to
	I2C_SendData(I2C_MMA8653, Reg);
 8001e1e:	1dfb      	adds	r3, r7, #7
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	4a1b      	ldr	r2, [pc, #108]	; (8001e90 <I2C_WrReg+0xc0>)
 8001e24:	0019      	movs	r1, r3
 8001e26:	0010      	movs	r0, r2
 8001e28:	f7fe fc9a 	bl	8000760 <I2C_SendData>

	//Ensure that the transfer complete reload flag is
	//set, essentially a standard TC flag
	while (I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_TCR) == RESET)
 8001e2c:	46c0      	nop			; (mov r8, r8)
 8001e2e:	4b18      	ldr	r3, [pc, #96]	; (8001e90 <I2C_WrReg+0xc0>)
 8001e30:	2180      	movs	r1, #128	; 0x80
 8001e32:	0018      	movs	r0, r3
 8001e34:	f7fe fcae 	bl	8000794 <I2C_GetFlagStatus>
 8001e38:	1e03      	subs	r3, r0, #0
 8001e3a:	d0f8      	beq.n	8001e2e <I2C_WrReg+0x5e>

	//Now that the HMC5883L knows which register
	//we want to write to, send the address again
	//and ensure the I2C peripheral doesn't add
	//any start or stop conditions
	I2C_TransferHandling(I2C_MMA8653, ADDR_MMA8653, 1, I2C_AutoEnd_Mode,
 8001e3c:	2380      	movs	r3, #128	; 0x80
 8001e3e:	049b      	lsls	r3, r3, #18
 8001e40:	4813      	ldr	r0, [pc, #76]	; (8001e90 <I2C_WrReg+0xc0>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	9200      	str	r2, [sp, #0]
 8001e46:	2201      	movs	r2, #1
 8001e48:	213a      	movs	r1, #58	; 0x3a
 8001e4a:	f7fe fc55 	bl	80006f8 <I2C_TransferHandling>
	I2C_No_StartStop);

	//Again, wait until the transmit interrupted flag is set
	while (I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_TXIS) == RESET)
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <I2C_WrReg+0xc0>)
 8001e52:	2102      	movs	r1, #2
 8001e54:	0018      	movs	r0, r3
 8001e56:	f7fe fc9d 	bl	8000794 <I2C_GetFlagStatus>
 8001e5a:	1e03      	subs	r3, r0, #0
 8001e5c:	d0f8      	beq.n	8001e50 <I2C_WrReg+0x80>
		;

	//Send the value you wish you write to the register
	I2C_SendData(I2C_MMA8653, Val);
 8001e5e:	1dbb      	adds	r3, r7, #6
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	4a0b      	ldr	r2, [pc, #44]	; (8001e90 <I2C_WrReg+0xc0>)
 8001e64:	0019      	movs	r1, r3
 8001e66:	0010      	movs	r0, r2
 8001e68:	f7fe fc7a 	bl	8000760 <I2C_SendData>

	//Wait for the stop flag to be set indicating
	//a stop condition has been sent
	while (I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_STOPF) == RESET)
 8001e6c:	46c0      	nop			; (mov r8, r8)
 8001e6e:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <I2C_WrReg+0xc0>)
 8001e70:	2120      	movs	r1, #32
 8001e72:	0018      	movs	r0, r3
 8001e74:	f7fe fc8e 	bl	8000794 <I2C_GetFlagStatus>
 8001e78:	1e03      	subs	r3, r0, #0
 8001e7a:	d0f8      	beq.n	8001e6e <I2C_WrReg+0x9e>
		;

	//Clear the stop flag for the next potential transfer
	I2C_ClearFlag(I2C_MMA8653, I2C_FLAG_STOPF);
 8001e7c:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <I2C_WrReg+0xc0>)
 8001e7e:	2120      	movs	r1, #32
 8001e80:	0018      	movs	r0, r3
 8001e82:	f7fe fcab 	bl	80007dc <I2C_ClearFlag>
}
 8001e86:	46c0      	nop			; (mov r8, r8)
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	b002      	add	sp, #8
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	40005400 	.word	0x40005400

08001e94 <I2C_BitHandling>:

void I2C_BitHandling(uint8_t reg, uint8_t bitmask, uint8_t set) {
 8001e94:	b5b0      	push	{r4, r5, r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	0004      	movs	r4, r0
 8001e9c:	0008      	movs	r0, r1
 8001e9e:	0011      	movs	r1, r2
 8001ea0:	1dfb      	adds	r3, r7, #7
 8001ea2:	1c22      	adds	r2, r4, #0
 8001ea4:	701a      	strb	r2, [r3, #0]
 8001ea6:	1dbb      	adds	r3, r7, #6
 8001ea8:	1c02      	adds	r2, r0, #0
 8001eaa:	701a      	strb	r2, [r3, #0]
 8001eac:	1d7b      	adds	r3, r7, #5
 8001eae:	1c0a      	adds	r2, r1, #0
 8001eb0:	701a      	strb	r2, [r3, #0]
	uint8_t tempReg = I2C_RdReg(reg, rxBuf, 1u);
 8001eb2:	250f      	movs	r5, #15
 8001eb4:	197c      	adds	r4, r7, r5
 8001eb6:	4917      	ldr	r1, [pc, #92]	; (8001f14 <I2C_BitHandling+0x80>)
 8001eb8:	1dfb      	adds	r3, r7, #7
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	f7ff fef8 	bl	8001cb4 <I2C_RdReg>
 8001ec4:	0003      	movs	r3, r0
 8001ec6:	7023      	strb	r3, [r4, #0]
	if (set) {
 8001ec8:	1d7b      	adds	r3, r7, #5
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d007      	beq.n	8001ee0 <I2C_BitHandling+0x4c>
		//set bits
		tempReg |= bitmask;
 8001ed0:	197b      	adds	r3, r7, r5
 8001ed2:	1979      	adds	r1, r7, r5
 8001ed4:	1dba      	adds	r2, r7, #6
 8001ed6:	7809      	ldrb	r1, [r1, #0]
 8001ed8:	7812      	ldrb	r2, [r2, #0]
 8001eda:	430a      	orrs	r2, r1
 8001edc:	701a      	strb	r2, [r3, #0]
 8001ede:	e00c      	b.n	8001efa <I2C_BitHandling+0x66>
	} else {
		//reset bits
		tempReg &= ~bitmask;
 8001ee0:	1dbb      	adds	r3, r7, #6
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	b25b      	sxtb	r3, r3
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	b25b      	sxtb	r3, r3
 8001eea:	210f      	movs	r1, #15
 8001eec:	187a      	adds	r2, r7, r1
 8001eee:	7812      	ldrb	r2, [r2, #0]
 8001ef0:	b252      	sxtb	r2, r2
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	b25a      	sxtb	r2, r3
 8001ef6:	187b      	adds	r3, r7, r1
 8001ef8:	701a      	strb	r2, [r3, #0]
	}
	//write back the register
	I2C_WrReg(reg, tempReg);
 8001efa:	230f      	movs	r3, #15
 8001efc:	18fb      	adds	r3, r7, r3
 8001efe:	781a      	ldrb	r2, [r3, #0]
 8001f00:	1dfb      	adds	r3, r7, #7
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	0011      	movs	r1, r2
 8001f06:	0018      	movs	r0, r3
 8001f08:	f7ff ff62 	bl	8001dd0 <I2C_WrReg>
}
 8001f0c:	46c0      	nop			; (mov r8, r8)
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	b004      	add	sp, #16
 8001f12:	bdb0      	pop	{r4, r5, r7, pc}
 8001f14:	20000120 	.word	0x20000120

08001f18 <mma8653_goStandby>:

uint8_t mma8653_goStandby() {
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
	if (!isActive) {
 8001f1c:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <mma8653_goStandby+0x44>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <mma8653_goStandby+0x10>
		return 0;
 8001f24:	2300      	movs	r3, #0
 8001f26:	e015      	b.n	8001f54 <mma8653_goStandby+0x3c>
	}
	//reset the Active-bit
	I2C_BitHandling(REG_CTRL_REG_1, 1 << 0, 0);
 8001f28:	2200      	movs	r2, #0
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	202a      	movs	r0, #42	; 0x2a
 8001f2e:	f7ff ffb1 	bl	8001e94 <I2C_BitHandling>
	delay(100);
 8001f32:	2064      	movs	r0, #100	; 0x64
 8001f34:	f7fe ffa6 	bl	8000e84 <delay>
	//check, if the sensor is inactive
	if (I2C_RdReg(REG_SYSMOD, rxBuf, 1) != 0) {
 8001f38:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <mma8653_goStandby+0x48>)
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	0019      	movs	r1, r3
 8001f3e:	200b      	movs	r0, #11
 8001f40:	f7ff feb8 	bl	8001cb4 <I2C_RdReg>
 8001f44:	1e03      	subs	r3, r0, #0
 8001f46:	d001      	beq.n	8001f4c <mma8653_goStandby+0x34>
		return 1;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e003      	b.n	8001f54 <mma8653_goStandby+0x3c>
	}
	isActive = 0;
 8001f4c:	4b03      	ldr	r3, [pc, #12]	; (8001f5c <mma8653_goStandby+0x44>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	701a      	strb	r2, [r3, #0]
	return 0;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	0018      	movs	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	20000039 	.word	0x20000039
 8001f60:	20000120 	.word	0x20000120

08001f64 <mma8653_goActive>:
uint8_t mma8653_goActive() {
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0

	if (isActive) {
 8001f68:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <mma8653_goActive+0x44>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <mma8653_goActive+0x10>
		return 0;
 8001f70:	2300      	movs	r3, #0
 8001f72:	e016      	b.n	8001fa2 <mma8653_goActive+0x3e>
	}
	//set the Active-bit
	I2C_BitHandling(REG_CTRL_REG_1, 1 << 0, 1);
 8001f74:	2201      	movs	r2, #1
 8001f76:	2101      	movs	r1, #1
 8001f78:	202a      	movs	r0, #42	; 0x2a
 8001f7a:	f7ff ff8b 	bl	8001e94 <I2C_BitHandling>
	delay(100);
 8001f7e:	2064      	movs	r0, #100	; 0x64
 8001f80:	f7fe ff80 	bl	8000e84 <delay>
	//check, if the sensor is active
	if (I2C_RdReg(REG_SYSMOD, rxBuf, 1) != 1) {
 8001f84:	4b09      	ldr	r3, [pc, #36]	; (8001fac <mma8653_goActive+0x48>)
 8001f86:	2201      	movs	r2, #1
 8001f88:	0019      	movs	r1, r3
 8001f8a:	200b      	movs	r0, #11
 8001f8c:	f7ff fe92 	bl	8001cb4 <I2C_RdReg>
 8001f90:	0003      	movs	r3, r0
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d001      	beq.n	8001f9a <mma8653_goActive+0x36>

		return 1;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e003      	b.n	8001fa2 <mma8653_goActive+0x3e>
	}
	isActive = 1;
 8001f9a:	4b03      	ldr	r3, [pc, #12]	; (8001fa8 <mma8653_goActive+0x44>)
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	701a      	strb	r2, [r3, #0]
	return 0;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	20000039 	.word	0x20000039
 8001fac:	20000120 	.word	0x20000120

08001fb0 <mma8653_init>:

uint8_t mma8653_init() {
 8001fb0:	b590      	push	{r4, r7, lr}
 8001fb2:	b08b      	sub	sp, #44	; 0x2c
 8001fb4:	af00      	add	r7, sp, #0

	//enable clock for periphery modules
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8001fb6:	2380      	movs	r3, #128	; 0x80
 8001fb8:	029b      	lsls	r3, r3, #10
 8001fba:	2101      	movs	r1, #1
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	f7fe fc89 	bl	80008d4 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 8001fc2:	2380      	movs	r3, #128	; 0x80
 8001fc4:	03db      	lsls	r3, r3, #15
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	0018      	movs	r0, r3
 8001fca:	f7fe fc83 	bl	80008d4 <RCC_AHBPeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 8001fce:	2380      	movs	r3, #128	; 0x80
 8001fd0:	039b      	lsls	r3, r3, #14
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	f7fe fcbd 	bl	8000954 <RCC_APB1PeriphClockCmd>

	//gpio init
	GPIO_InitTypeDef GPIO_InitStruct;
	//configure PINs PF0 and PF1 as AF OD out
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
 8001fda:	2420      	movs	r4, #32
 8001fdc:	193b      	adds	r3, r7, r4
 8001fde:	2203      	movs	r2, #3
 8001fe0:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8001fe2:	193b      	adds	r3, r7, r4
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	711a      	strb	r2, [r3, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;
 8001fe8:	193b      	adds	r3, r7, r4
 8001fea:	2201      	movs	r2, #1
 8001fec:	719a      	strb	r2, [r3, #6]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_Level_1;
 8001fee:	193b      	adds	r3, r7, r4
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	715a      	strb	r2, [r3, #5]
	GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ff4:	193b      	adds	r3, r7, r4
 8001ff6:	4a39      	ldr	r2, [pc, #228]	; (80020dc <mma8653_init+0x12c>)
 8001ff8:	0019      	movs	r1, r3
 8001ffa:	0010      	movs	r0, r2
 8001ffc:	f7fe f9a8 	bl	8000350 <GPIO_Init>

	//remap
	GPIO_PinAFConfig(GPIOF, GPIO_PinSource0, GPIO_AF_1);
 8002000:	4b36      	ldr	r3, [pc, #216]	; (80020dc <mma8653_init+0x12c>)
 8002002:	2201      	movs	r2, #1
 8002004:	2100      	movs	r1, #0
 8002006:	0018      	movs	r0, r3
 8002008:	f7fe fa76 	bl	80004f8 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOF, GPIO_PinSource1, GPIO_AF_1);
 800200c:	4b33      	ldr	r3, [pc, #204]	; (80020dc <mma8653_init+0x12c>)
 800200e:	2201      	movs	r2, #1
 8002010:	2101      	movs	r1, #1
 8002012:	0018      	movs	r0, r3
 8002014:	f7fe fa70 	bl	80004f8 <GPIO_PinAFConfig>

	//configure PINs PA2 and PA3 as inputs for the interrupt lines
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 8002018:	0021      	movs	r1, r4
 800201a:	187b      	adds	r3, r7, r1
 800201c:	220c      	movs	r2, #12
 800201e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 8002020:	187b      	adds	r3, r7, r1
 8002022:	2200      	movs	r2, #0
 8002024:	711a      	strb	r2, [r3, #4]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8002026:	187b      	adds	r3, r7, r1
 8002028:	2201      	movs	r2, #1
 800202a:	71da      	strb	r2, [r3, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 800202c:	187b      	adds	r3, r7, r1
 800202e:	2203      	movs	r2, #3
 8002030:	715a      	strb	r2, [r3, #5]
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002032:	187a      	adds	r2, r7, r1
 8002034:	2390      	movs	r3, #144	; 0x90
 8002036:	05db      	lsls	r3, r3, #23
 8002038:	0011      	movs	r1, r2
 800203a:	0018      	movs	r0, r3
 800203c:	f7fe f988 	bl	8000350 <GPIO_Init>

	//i2c init
	//I2C_DeInit(I2C1);
	I2C_InitTypeDef I2C_InitStruct;
	I2C_InitStruct.I2C_Ack = I2C_Ack_Enable;
 8002040:	1d3b      	adds	r3, r7, #4
 8002042:	2200      	movs	r2, #0
 8002044:	615a      	str	r2, [r3, #20]
	I2C_InitStruct.I2C_AnalogFilter = I2C_AnalogFilter_Enable;
 8002046:	1d3b      	adds	r3, r7, #4
 8002048:	2200      	movs	r2, #0
 800204a:	605a      	str	r2, [r3, #4]
	I2C_InitStruct.I2C_OwnAddress1 = 0xAB;
 800204c:	1d3b      	adds	r3, r7, #4
 800204e:	22ab      	movs	r2, #171	; 0xab
 8002050:	611a      	str	r2, [r3, #16]
	I2C_InitStruct.I2C_DigitalFilter = 0;
 8002052:	1d3b      	adds	r3, r7, #4
 8002054:	2200      	movs	r2, #0
 8002056:	609a      	str	r2, [r3, #8]
	I2C_InitStruct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8002058:	1d3b      	adds	r3, r7, #4
 800205a:	2200      	movs	r2, #0
 800205c:	619a      	str	r2, [r3, #24]
	I2C_InitStruct.I2C_Mode = I2C_Mode_I2C;
 800205e:	1d3b      	adds	r3, r7, #4
 8002060:	2200      	movs	r2, #0
 8002062:	60da      	str	r2, [r3, #12]
	I2C_InitStruct.I2C_Timing = 0x0010020A; //should be 400kHz for the 8Mhz HSI
 8002064:	1d3b      	adds	r3, r7, #4
 8002066:	4a1e      	ldr	r2, [pc, #120]	; (80020e0 <mma8653_init+0x130>)
 8002068:	601a      	str	r2, [r3, #0]
	I2C_Init(I2C_MMA8653, &I2C_InitStruct);
 800206a:	1d3b      	adds	r3, r7, #4
 800206c:	4a1d      	ldr	r2, [pc, #116]	; (80020e4 <mma8653_init+0x134>)
 800206e:	0019      	movs	r1, r3
 8002070:	0010      	movs	r0, r2
 8002072:	f7fe fabb 	bl	80005ec <I2C_Init>

	I2C_Cmd(I2C_MMA8653, ENABLE);
 8002076:	4b1b      	ldr	r3, [pc, #108]	; (80020e4 <mma8653_init+0x134>)
 8002078:	2101      	movs	r1, #1
 800207a:	0018      	movs	r0, r3
 800207c:	f7fe fb1e 	bl	80006bc <I2C_Cmd>

	delay(50);
 8002080:	2032      	movs	r0, #50	; 0x32
 8002082:	f7fe feff 	bl	8000e84 <delay>

	if (I2C_RdReg(REG_WHO_AM_I, rxBuf, 1) != 0x5A) //read the device ID to verify communication
 8002086:	4b18      	ldr	r3, [pc, #96]	; (80020e8 <mma8653_init+0x138>)
 8002088:	2201      	movs	r2, #1
 800208a:	0019      	movs	r1, r3
 800208c:	200d      	movs	r0, #13
 800208e:	f7ff fe11 	bl	8001cb4 <I2C_RdReg>
 8002092:	0003      	movs	r3, r0
 8002094:	2b5a      	cmp	r3, #90	; 0x5a
 8002096:	d001      	beq.n	800209c <mma8653_init+0xec>
			{
		return 1;
 8002098:	2301      	movs	r3, #1
 800209a:	e01b      	b.n	80020d4 <mma8653_init+0x124>
	}

	//set to highres mode
	I2C_BitHandling(REG_CTRL_REG_2, 1 << 1, SET);
 800209c:	2201      	movs	r2, #1
 800209e:	2102      	movs	r1, #2
 80020a0:	202b      	movs	r0, #43	; 0x2b
 80020a2:	f7ff fef7 	bl	8001e94 <I2C_BitHandling>

	//set the sensor as always active (disable auto sleep) <- default
	//set to active and 10 bit mode, DataRate to 12.5Hz
	I2C_BitHandling(REG_CTRL_REG_1, (1 << 0 | 1 << 3 | 1 << 5), SET);
 80020a6:	2201      	movs	r2, #1
 80020a8:	2129      	movs	r1, #41	; 0x29
 80020aa:	202a      	movs	r0, #42	; 0x2a
 80020ac:	f7ff fef2 	bl	8001e94 <I2C_BitHandling>

	//check, if the sensor is active
	if (I2C_RdReg(REG_SYSMOD, rxBuf, 1) != 1) {
 80020b0:	4b0d      	ldr	r3, [pc, #52]	; (80020e8 <mma8653_init+0x138>)
 80020b2:	2201      	movs	r2, #1
 80020b4:	0019      	movs	r1, r3
 80020b6:	200b      	movs	r0, #11
 80020b8:	f7ff fdfc 	bl	8001cb4 <I2C_RdReg>
 80020bc:	0003      	movs	r3, r0
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d004      	beq.n	80020cc <mma8653_init+0x11c>
		isActive = 0;
 80020c2:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <mma8653_init+0x13c>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	701a      	strb	r2, [r3, #0]
		return 2;
 80020c8:	2302      	movs	r3, #2
 80020ca:	e003      	b.n	80020d4 <mma8653_init+0x124>
	}
	isActive = 1;
 80020cc:	4b07      	ldr	r3, [pc, #28]	; (80020ec <mma8653_init+0x13c>)
 80020ce:	2201      	movs	r2, #1
 80020d0:	701a      	strb	r2, [r3, #0]
	return 0;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	0018      	movs	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	b00b      	add	sp, #44	; 0x2c
 80020da:	bd90      	pop	{r4, r7, pc}
 80020dc:	48001400 	.word	0x48001400
 80020e0:	0010020a 	.word	0x0010020a
 80020e4:	40005400 	.word	0x40005400
 80020e8:	20000120 	.word	0x20000120
 80020ec:	20000039 	.word	0x20000039

080020f0 <mma8653_setRange>:

uint8_t mma8653_setRange(mma8653_Ranges range) {
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	0002      	movs	r2, r0
 80020f8:	1dfb      	adds	r3, r7, #7
 80020fa:	701a      	strb	r2, [r3, #0]
	//deactivate the sensor
	if (mma8653_goStandby()) {
 80020fc:	f7ff ff0c 	bl	8001f18 <mma8653_goStandby>
 8002100:	1e03      	subs	r3, r0, #0
 8002102:	d001      	beq.n	8002108 <mma8653_setRange+0x18>
		return 1;
 8002104:	2301      	movs	r3, #1
 8002106:	e012      	b.n	800212e <mma8653_setRange+0x3e>
	}
	//clear bits in register to change
	I2C_BitHandling(REG_XYZ_DATA_CFG, 0x03, Bit_RESET);
 8002108:	2200      	movs	r2, #0
 800210a:	2103      	movs	r1, #3
 800210c:	200e      	movs	r0, #14
 800210e:	f7ff fec1 	bl	8001e94 <I2C_BitHandling>
	//set range
	I2C_BitHandling(REG_XYZ_DATA_CFG, range, Bit_SET);
 8002112:	1dfb      	adds	r3, r7, #7
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	2201      	movs	r2, #1
 8002118:	0019      	movs	r1, r3
 800211a:	200e      	movs	r0, #14
 800211c:	f7ff feba 	bl	8001e94 <I2C_BitHandling>

	if (mma8653_goActive()) {
 8002120:	f7ff ff20 	bl	8001f64 <mma8653_goActive>
 8002124:	1e03      	subs	r3, r0, #0
 8002126:	d001      	beq.n	800212c <mma8653_setRange+0x3c>
		return 3;
 8002128:	2303      	movs	r3, #3
 800212a:	e000      	b.n	800212e <mma8653_setRange+0x3e>
	}
	return 0;
 800212c:	2300      	movs	r3, #0
}
 800212e:	0018      	movs	r0, r3
 8002130:	46bd      	mov	sp, r7
 8002132:	b002      	add	sp, #8
 8002134:	bd80      	pop	{r7, pc}

08002136 <mma8653_setDataRate>:

uint8_t mma8653_setDataRate(mma8653_dataRates dataRate) {
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	0002      	movs	r2, r0
 800213e:	1dfb      	adds	r3, r7, #7
 8002140:	701a      	strb	r2, [r3, #0]
	//deactivate the sensor
	if (mma8653_goStandby()) {
 8002142:	f7ff fee9 	bl	8001f18 <mma8653_goStandby>
 8002146:	1e03      	subs	r3, r0, #0
 8002148:	d001      	beq.n	800214e <mma8653_setDataRate+0x18>
		return 1;
 800214a:	2301      	movs	r3, #1
 800214c:	e014      	b.n	8002178 <mma8653_setDataRate+0x42>
	}
	//clear bits in register to change
	I2C_BitHandling(REG_CTRL_REG_1, 0x38, Bit_RESET);
 800214e:	2200      	movs	r2, #0
 8002150:	2138      	movs	r1, #56	; 0x38
 8002152:	202a      	movs	r0, #42	; 0x2a
 8002154:	f7ff fe9e 	bl	8001e94 <I2C_BitHandling>
	//set range
	I2C_BitHandling(REG_CTRL_REG_1, dataRate << 3, Bit_SET);
 8002158:	1dfb      	adds	r3, r7, #7
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2201      	movs	r2, #1
 8002162:	0019      	movs	r1, r3
 8002164:	202a      	movs	r0, #42	; 0x2a
 8002166:	f7ff fe95 	bl	8001e94 <I2C_BitHandling>

	if (mma8653_goActive()) {
 800216a:	f7ff fefb 	bl	8001f64 <mma8653_goActive>
 800216e:	1e03      	subs	r3, r0, #0
 8002170:	d001      	beq.n	8002176 <mma8653_setDataRate+0x40>
		return 3;
 8002172:	2303      	movs	r3, #3
 8002174:	e000      	b.n	8002178 <mma8653_setDataRate+0x42>
	}
	return 0;
 8002176:	2300      	movs	r3, #0
}
 8002178:	0018      	movs	r0, r3
 800217a:	46bd      	mov	sp, r7
 800217c:	b002      	add	sp, #8
 800217e:	bd80      	pop	{r7, pc}

08002180 <mma8653_setDataWidth>:

uint8_t mma8653_setDataWidth(uint8_t DataWidth) {
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	0002      	movs	r2, r0
 8002188:	1dfb      	adds	r3, r7, #7
 800218a:	701a      	strb	r2, [r3, #0]
	//deactivate the sensor
	if (mma8653_goStandby()) {
 800218c:	f7ff fec4 	bl	8001f18 <mma8653_goStandby>
 8002190:	1e03      	subs	r3, r0, #0
 8002192:	d001      	beq.n	8002198 <mma8653_setDataWidth+0x18>
		return 1;
 8002194:	2301      	movs	r3, #1
 8002196:	e020      	b.n	80021da <mma8653_setDataWidth+0x5a>
	}
	//clear bits in register to change
	I2C_BitHandling(REG_CTRL_REG_1, 0x3E, Bit_RESET);
 8002198:	2200      	movs	r2, #0
 800219a:	213e      	movs	r1, #62	; 0x3e
 800219c:	202a      	movs	r0, #42	; 0x2a
 800219e:	f7ff fe79 	bl	8001e94 <I2C_BitHandling>

	//decide what to do
	switch (DataWidth) {
 80021a2:	1dfb      	adds	r3, r7, #7
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d002      	beq.n	80021b0 <mma8653_setDataWidth+0x30>
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d006      	beq.n	80021bc <mma8653_setDataWidth+0x3c>
 80021ae:	e00b      	b.n	80021c8 <mma8653_setDataWidth+0x48>
	case MMA8653_DATAWIDTH_8:
		//set F_READ and leave highest data rate
		I2C_BitHandling(REG_CTRL_REG_1, 1 << 1, Bit_SET);
 80021b0:	2201      	movs	r2, #1
 80021b2:	2102      	movs	r1, #2
 80021b4:	202a      	movs	r0, #42	; 0x2a
 80021b6:	f7ff fe6d 	bl	8001e94 <I2C_BitHandling>
		break;
 80021ba:	e007      	b.n	80021cc <mma8653_setDataWidth+0x4c>
	case MMA8653_DATAWIDTH_10:
		//limit output data rate to 12.5Hz and leave F_READ reset
		I2C_BitHandling(REG_CTRL_REG_1, (1 << 3 | 1 << 5), Bit_SET);
 80021bc:	2201      	movs	r2, #1
 80021be:	2128      	movs	r1, #40	; 0x28
 80021c0:	202a      	movs	r0, #42	; 0x2a
 80021c2:	f7ff fe67 	bl	8001e94 <I2C_BitHandling>
		break;
 80021c6:	e001      	b.n	80021cc <mma8653_setDataWidth+0x4c>
	default:
		return 2;
 80021c8:	2302      	movs	r3, #2
 80021ca:	e006      	b.n	80021da <mma8653_setDataWidth+0x5a>
		break;
	}
	if (mma8653_goActive()) {
 80021cc:	f7ff feca 	bl	8001f64 <mma8653_goActive>
 80021d0:	1e03      	subs	r3, r0, #0
 80021d2:	d001      	beq.n	80021d8 <mma8653_setDataWidth+0x58>
		return 3;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e000      	b.n	80021da <mma8653_setDataWidth+0x5a>
	}
	return 0;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	0018      	movs	r0, r3
 80021dc:	46bd      	mov	sp, r7
 80021de:	b002      	add	sp, #8
 80021e0:	bd80      	pop	{r7, pc}
	...

080021e4 <mma8653_read8>:

//read when in fast (8-bit) mode
//needs the fast-read mode enabled as well
//max. sample frequency (because of communication) ~ 7kHz
acc8_t mma8653_read8() {
 80021e4:	b590      	push	{r4, r7, lr}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
	uint8_t rxBuf[3];
	acc8_t acc_result;

	I2C_RdReg(REG_OUT_X_MSB, rxBuf, 3);
 80021ea:	2408      	movs	r4, #8
 80021ec:	193b      	adds	r3, r7, r4
 80021ee:	2203      	movs	r2, #3
 80021f0:	0019      	movs	r1, r3
 80021f2:	2001      	movs	r0, #1
 80021f4:	f7ff fd5e 	bl	8001cb4 <I2C_RdReg>
	//rxbuf[0] contains full 8 bit of data.
	//the first bit defines the sign!
	acc_result.x = rxBuf[0];
 80021f8:	0021      	movs	r1, r4
 80021fa:	187b      	adds	r3, r7, r1
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	b25a      	sxtb	r2, r3
 8002200:	1d3b      	adds	r3, r7, #4
 8002202:	701a      	strb	r2, [r3, #0]
	acc_result.y = rxBuf[1];
 8002204:	187b      	adds	r3, r7, r1
 8002206:	785b      	ldrb	r3, [r3, #1]
 8002208:	b25a      	sxtb	r2, r3
 800220a:	1d3b      	adds	r3, r7, #4
 800220c:	705a      	strb	r2, [r3, #1]
	acc_result.z = rxBuf[2];
 800220e:	187b      	adds	r3, r7, r1
 8002210:	789b      	ldrb	r3, [r3, #2]
 8002212:	b25a      	sxtb	r2, r3
 8002214:	1d3b      	adds	r3, r7, #4
 8002216:	709a      	strb	r2, [r3, #2]
	return acc_result;
 8002218:	200c      	movs	r0, #12
 800221a:	183b      	adds	r3, r7, r0
 800221c:	1d3a      	adds	r2, r7, #4
 800221e:	8811      	ldrh	r1, [r2, #0]
 8002220:	8019      	strh	r1, [r3, #0]
 8002222:	7892      	ldrb	r2, [r2, #2]
 8002224:	709a      	strb	r2, [r3, #2]
 8002226:	183a      	adds	r2, r7, r0
 8002228:	2300      	movs	r3, #0
 800222a:	7811      	ldrb	r1, [r2, #0]
 800222c:	20ff      	movs	r0, #255	; 0xff
 800222e:	4001      	ands	r1, r0
 8002230:	20ff      	movs	r0, #255	; 0xff
 8002232:	4383      	bics	r3, r0
 8002234:	430b      	orrs	r3, r1
 8002236:	7851      	ldrb	r1, [r2, #1]
 8002238:	20ff      	movs	r0, #255	; 0xff
 800223a:	4001      	ands	r1, r0
 800223c:	0209      	lsls	r1, r1, #8
 800223e:	4807      	ldr	r0, [pc, #28]	; (800225c <mma8653_read8+0x78>)
 8002240:	4003      	ands	r3, r0
 8002242:	430b      	orrs	r3, r1
 8002244:	7892      	ldrb	r2, [r2, #2]
 8002246:	21ff      	movs	r1, #255	; 0xff
 8002248:	400a      	ands	r2, r1
 800224a:	0412      	lsls	r2, r2, #16
 800224c:	4904      	ldr	r1, [pc, #16]	; (8002260 <mma8653_read8+0x7c>)
 800224e:	400b      	ands	r3, r1
 8002250:	4313      	orrs	r3, r2
}
 8002252:	0018      	movs	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	b005      	add	sp, #20
 8002258:	bd90      	pop	{r4, r7, pc}
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	ffff00ff 	.word	0xffff00ff
 8002260:	ff00ffff 	.word	0xff00ffff

08002264 <mma8653_initIrq>:
	acc_result.z = ((int16_t) rxBuf[4] << 2) | (rxBuf[5] & 0x60 >> 6);
	return acc_result;
}

//TODO: don't forget to implement and register the interrupt handler in startup code
void mma8653_initIrq() {
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
	mma8653_goStandby();
 800226a:	f7ff fe55 	bl	8001f18 <mma8653_goStandby>

	//interrupt pins are defined for push/pull low active by default -> leave that

	//enable the wanted interrupt source
	I2C_BitHandling(REG_CTRL_REG_4, 1 << 0, Bit_SET);
 800226e:	2201      	movs	r2, #1
 8002270:	2101      	movs	r1, #1
 8002272:	202d      	movs	r0, #45	; 0x2d
 8002274:	f7ff fe0e 	bl	8001e94 <I2C_BitHandling>
	//and route it to the corresponding pin
	I2C_BitHandling(REG_CTRL_REG_5, 1 << 0, Bit_SET);
 8002278:	2201      	movs	r2, #1
 800227a:	2101      	movs	r1, #1
 800227c:	202e      	movs	r0, #46	; 0x2e
 800227e:	f7ff fe09 	bl	8001e94 <I2C_BitHandling>

	//set up the Interrupt in the STM32!
	//INT1 is connected to PA2 -> EXTI2 line
	//enable the clock for the syscfg module
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8002282:	2101      	movs	r1, #1
 8002284:	2001      	movs	r0, #1
 8002286:	f7fe fb45 	bl	8000914 <RCC_APB2PeriphClockCmd>
	//enable PA2 interrupt source
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource2);
 800228a:	2102      	movs	r1, #2
 800228c:	2000      	movs	r0, #0
 800228e:	f7fe fba1 	bl	80009d4 <SYSCFG_EXTILineConfig>
	//configure and enable the exti2 line
	EXTI_InitTypeDef EXTI_InitStruct;
	EXTI_InitStruct.EXTI_Line = EXTI_Line2;
 8002292:	2108      	movs	r1, #8
 8002294:	187b      	adds	r3, r7, r1
 8002296:	2204      	movs	r2, #4
 8002298:	601a      	str	r2, [r3, #0]
	EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 800229a:	187b      	adds	r3, r7, r1
 800229c:	2200      	movs	r2, #0
 800229e:	711a      	strb	r2, [r3, #4]
	EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Falling;
 80022a0:	187b      	adds	r3, r7, r1
 80022a2:	220c      	movs	r2, #12
 80022a4:	715a      	strb	r2, [r3, #5]
	EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 80022a6:	187b      	adds	r3, r7, r1
 80022a8:	2201      	movs	r2, #1
 80022aa:	719a      	strb	r2, [r3, #6]
	EXTI_Init(&EXTI_InitStruct);
 80022ac:	187b      	adds	r3, r7, r1
 80022ae:	0018      	movs	r0, r3
 80022b0:	f7fd ffd0 	bl	8000254 <EXTI_Init>
	//enable and set exti2 interrupt
	NVIC_InitTypeDef NVIC_InitStruct;
	NVIC_InitStruct.NVIC_IRQChannel = EXTI2_3_IRQn;
 80022b4:	1d3b      	adds	r3, r7, #4
 80022b6:	2206      	movs	r2, #6
 80022b8:	701a      	strb	r2, [r3, #0]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 80022ba:	1d3b      	adds	r3, r7, #4
 80022bc:	2201      	movs	r2, #1
 80022be:	709a      	strb	r2, [r3, #2]
	NVIC_Init(&NVIC_InitStruct);
 80022c0:	1d3b      	adds	r3, r7, #4
 80022c2:	0018      	movs	r0, r3
 80022c4:	f7fe fa96 	bl	80007f4 <NVIC_Init>

	//activate sensor again
	mma8653_goActive();
 80022c8:	f7ff fe4c 	bl	8001f64 <mma8653_goActive>
}
 80022cc:	46c0      	nop			; (mov r8, r8)
 80022ce:	46bd      	mov	sp, r7
 80022d0:	b004      	add	sp, #16
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <mma6853_deInit>:

//sends sensor into standby, deactivates I2C and the interrupts
//important especially after using the interrupts
void mma6853_deInit()
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
	mma8653_goStandby();
 80022d8:	f7ff fe1e 	bl	8001f18 <mma8653_goStandby>
	I2C_DeInit(I2C_MMA8653);
 80022dc:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <mma6853_deInit+0x20>)
 80022de:	0018      	movs	r0, r3
 80022e0:	f7fe f95c 	bl	800059c <I2C_DeInit>
	EXTI_DeInit();
 80022e4:	f7fd ff9c 	bl	8000220 <EXTI_DeInit>
	NVIC_DisableIRQ(EXTI2_3_IRQn);
 80022e8:	2006      	movs	r0, #6
 80022ea:	f7ff fccb 	bl	8001c84 <NVIC_DisableIRQ>
}
 80022ee:	46c0      	nop			; (mov r8, r8)
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40005400 	.word	0x40005400

080022f8 <NvMem_init>:
bool NvMem_Writable;

/**
 * loads user data from flash into memory for easy access and change in the application
 */
void NvMem_init() {
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0

	//enable flash-if clock
	RCC->AHBENR |= RCC_AHBENR_FLITFEN;
 80022fe:	4b15      	ldr	r3, [pc, #84]	; (8002354 <NvMem_init+0x5c>)
 8002300:	695a      	ldr	r2, [r3, #20]
 8002302:	4b14      	ldr	r3, [pc, #80]	; (8002354 <NvMem_init+0x5c>)
 8002304:	2110      	movs	r1, #16
 8002306:	430a      	orrs	r2, r1
 8002308:	615a      	str	r2, [r3, #20]

	for (uint16_t ad = 0; ad <= NVMEM_AD_TOP; ad++) {
 800230a:	1dbb      	adds	r3, r7, #6
 800230c:	2200      	movs	r2, #0
 800230e:	801a      	strh	r2, [r3, #0]
 8002310:	e012      	b.n	8002338 <NvMem_init+0x40>
		NvMem_RamBuffer[ad] = ~READ16(NVMEM_FLASH_BASE+2*ad);
 8002312:	1dbb      	adds	r3, r7, #6
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	4a10      	ldr	r2, [pc, #64]	; (8002358 <NvMem_init+0x60>)
 8002318:	4694      	mov	ip, r2
 800231a:	4463      	add	r3, ip
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	881b      	ldrh	r3, [r3, #0]
 8002320:	1dba      	adds	r2, r7, #6
 8002322:	8812      	ldrh	r2, [r2, #0]
 8002324:	43db      	mvns	r3, r3
 8002326:	b299      	uxth	r1, r3
 8002328:	4b0c      	ldr	r3, [pc, #48]	; (800235c <NvMem_init+0x64>)
 800232a:	0052      	lsls	r2, r2, #1
 800232c:	52d1      	strh	r1, [r2, r3]
	for (uint16_t ad = 0; ad <= NVMEM_AD_TOP; ad++) {
 800232e:	1dbb      	adds	r3, r7, #6
 8002330:	881a      	ldrh	r2, [r3, #0]
 8002332:	1dbb      	adds	r3, r7, #6
 8002334:	3201      	adds	r2, #1
 8002336:	801a      	strh	r2, [r3, #0]
 8002338:	1dbb      	adds	r3, r7, #6
 800233a:	881a      	ldrh	r2, [r3, #0]
 800233c:	2380      	movs	r3, #128	; 0x80
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	429a      	cmp	r2, r3
 8002342:	d3e6      	bcc.n	8002312 <NvMem_init+0x1a>
	}
	NvMem_Writable = true;
 8002344:	4b06      	ldr	r3, [pc, #24]	; (8002360 <NvMem_init+0x68>)
 8002346:	2201      	movs	r2, #1
 8002348:	701a      	strb	r2, [r3, #0]
}
 800234a:	46c0      	nop			; (mov r8, r8)
 800234c:	46bd      	mov	sp, r7
 800234e:	b002      	add	sp, #8
 8002350:	bd80      	pop	{r7, pc}
 8002352:	46c0      	nop			; (mov r8, r8)
 8002354:	40021000 	.word	0x40021000
 8002358:	04003e00 	.word	0x04003e00
 800235c:	20000124 	.word	0x20000124
 8002360:	20000524 	.word	0x20000524

08002364 <NvMem_read>:

/**
 * Reads 16 bit form the user space in flash
 * address: 16-bit address (512 addresses per used flash page)
 */
uint16_t NvMem_read(uint16_t address) {
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	0002      	movs	r2, r0
 800236c:	1dbb      	adds	r3, r7, #6
 800236e:	801a      	strh	r2, [r3, #0]
	if (address > NVMEM_AD_TOP) {
 8002370:	1dbb      	adds	r3, r7, #6
 8002372:	881a      	ldrh	r2, [r3, #0]
 8002374:	2380      	movs	r3, #128	; 0x80
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	429a      	cmp	r2, r3
 800237a:	d301      	bcc.n	8002380 <NvMem_read+0x1c>
		return ERR_NVMEM_OUTOFRANGE;
 800237c:	2301      	movs	r3, #1
 800237e:	e004      	b.n	800238a <NvMem_read+0x26>
	}
	return NvMem_RamBuffer[address];
 8002380:	1dbb      	adds	r3, r7, #6
 8002382:	881a      	ldrh	r2, [r3, #0]
 8002384:	4b03      	ldr	r3, [pc, #12]	; (8002394 <NvMem_read+0x30>)
 8002386:	0052      	lsls	r2, r2, #1
 8002388:	5ad3      	ldrh	r3, [r2, r3]
}
 800238a:	0018      	movs	r0, r3
 800238c:	46bd      	mov	sp, r7
 800238e:	b002      	add	sp, #8
 8002390:	bd80      	pop	{r7, pc}
 8002392:	46c0      	nop			; (mov r8, r8)
 8002394:	20000124 	.word	0x20000124

08002398 <NvMem_write>:
 * Writes 16 bit to the user space in flash
 * address: 16-bit address (512 addresses per used flash page)
 * data: data to write
 * returns: errorcode
 */
uint8_t NvMem_write(uint16_t address, uint16_t data) {
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	0002      	movs	r2, r0
 80023a0:	1dbb      	adds	r3, r7, #6
 80023a2:	801a      	strh	r2, [r3, #0]
 80023a4:	1d3b      	adds	r3, r7, #4
 80023a6:	1c0a      	adds	r2, r1, #0
 80023a8:	801a      	strh	r2, [r3, #0]
	if (address > NVMEM_AD_TOP) {
 80023aa:	1dbb      	adds	r3, r7, #6
 80023ac:	881a      	ldrh	r2, [r3, #0]
 80023ae:	2380      	movs	r3, #128	; 0x80
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d301      	bcc.n	80023ba <NvMem_write+0x22>
		return ERR_NVMEM_OUTOFRANGE;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e010      	b.n	80023dc <NvMem_write+0x44>
	}
	if (!NvMem_Writable) {
 80023ba:	4b0a      	ldr	r3, [pc, #40]	; (80023e4 <NvMem_write+0x4c>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2201      	movs	r2, #1
 80023c0:	4053      	eors	r3, r2
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <NvMem_write+0x34>
		return ERR_NVMEM_ALREADYWRITTEN;
 80023c8:	2302      	movs	r3, #2
 80023ca:	e007      	b.n	80023dc <NvMem_write+0x44>
	}
	NvMem_RamBuffer[address] = data;
 80023cc:	1dbb      	adds	r3, r7, #6
 80023ce:	881a      	ldrh	r2, [r3, #0]
 80023d0:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <NvMem_write+0x50>)
 80023d2:	0052      	lsls	r2, r2, #1
 80023d4:	1d39      	adds	r1, r7, #4
 80023d6:	8809      	ldrh	r1, [r1, #0]
 80023d8:	52d1      	strh	r1, [r2, r3]
	return 0;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	0018      	movs	r0, r3
 80023de:	46bd      	mov	sp, r7
 80023e0:	b002      	add	sp, #8
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	20000524 	.word	0x20000524
 80023e8:	20000124 	.word	0x20000124

080023ec <power_init>:
volatile uint8_t power_timer;


uint8_t power_buttonState;

void power_init() {
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
	//enable clock for periphery modules
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80023f2:	2380      	movs	r3, #128	; 0x80
 80023f4:	029b      	lsls	r3, r3, #10
 80023f6:	2101      	movs	r1, #1
 80023f8:	0018      	movs	r0, r3
 80023fa:	f7fe fa6b 	bl	80008d4 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 80023fe:	2380      	movs	r3, #128	; 0x80
 8002400:	02db      	lsls	r3, r3, #11
 8002402:	2101      	movs	r1, #1
 8002404:	0018      	movs	r0, r3
 8002406:	f7fe fa65 	bl	80008d4 <RCC_AHBPeriphClockCmd>

	//init gpios
	//PB1
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_1;
 800240a:	003b      	movs	r3, r7
 800240c:	2202      	movs	r2, #2
 800240e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 8002410:	003b      	movs	r3, r7
 8002412:	2200      	movs	r2, #0
 8002414:	711a      	strb	r2, [r3, #4]
	GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002416:	003b      	movs	r3, r7
 8002418:	4a19      	ldr	r2, [pc, #100]	; (8002480 <power_init+0x94>)
 800241a:	0019      	movs	r1, r3
 800241c:	0010      	movs	r0, r2
 800241e:	f7fd ff97 	bl	8000350 <GPIO_Init>
	//PA4
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_4;
 8002422:	003b      	movs	r3, r7
 8002424:	2210      	movs	r2, #16
 8002426:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8002428:	003b      	movs	r3, r7
 800242a:	2201      	movs	r2, #1
 800242c:	711a      	strb	r2, [r3, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 800242e:	003b      	movs	r3, r7
 8002430:	2200      	movs	r2, #0
 8002432:	719a      	strb	r2, [r3, #6]
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002434:	003a      	movs	r2, r7
 8002436:	2390      	movs	r3, #144	; 0x90
 8002438:	05db      	lsls	r3, r3, #23
 800243a:	0011      	movs	r1, r2
 800243c:	0018      	movs	r0, r3
 800243e:	f7fd ff87 	bl	8000350 <GPIO_Init>
	GPIO_WriteBit(GPIOA, GPIO_Pin_4, Bit_SET);
 8002442:	2390      	movs	r3, #144	; 0x90
 8002444:	05db      	lsls	r3, r3, #23
 8002446:	2201      	movs	r2, #1
 8002448:	2110      	movs	r1, #16
 800244a:	0018      	movs	r0, r3
 800244c:	f7fe f837 	bl	80004be <GPIO_WriteBit>
	//PA1
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_1;
 8002450:	003b      	movs	r3, r7
 8002452:	2202      	movs	r2, #2
 8002454:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 8002456:	003b      	movs	r3, r7
 8002458:	2200      	movs	r2, #0
 800245a:	711a      	strb	r2, [r3, #4]
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 800245c:	003a      	movs	r2, r7
 800245e:	2390      	movs	r3, #144	; 0x90
 8002460:	05db      	lsls	r3, r3, #23
 8002462:	0011      	movs	r1, r2
 8002464:	0018      	movs	r0, r3
 8002466:	f7fd ff73 	bl	8000350 <GPIO_Init>

	//TODO: implement Vbat measurement
	power_timer = 100; //the system is always on for at least 10 sec
 800246a:	4b06      	ldr	r3, [pc, #24]	; (8002484 <power_init+0x98>)
 800246c:	2264      	movs	r2, #100	; 0x64
 800246e:	701a      	strb	r2, [r3, #0]
	power_flags = 0;
 8002470:	4b05      	ldr	r3, [pc, #20]	; (8002488 <power_init+0x9c>)
 8002472:	2200      	movs	r2, #0
 8002474:	701a      	strb	r2, [r3, #0]
}
 8002476:	46c0      	nop			; (mov r8, r8)
 8002478:	46bd      	mov	sp, r7
 800247a:	b002      	add	sp, #8
 800247c:	bd80      	pop	{r7, pc}
 800247e:	46c0      	nop			; (mov r8, r8)
 8002480:	48000400 	.word	0x48000400
 8002484:	20000525 	.word	0x20000525
 8002488:	20000043 	.word	0x20000043

0800248c <power_UsbPresent>:

uint8_t power_UsbPresent() {
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
	return GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_1);
 8002490:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <power_UsbPresent+0x18>)
 8002492:	2102      	movs	r1, #2
 8002494:	0018      	movs	r0, r3
 8002496:	f7fd ffef 	bl	8000478 <GPIO_ReadInputDataBit>
 800249a:	0003      	movs	r3, r0
}
 800249c:	0018      	movs	r0, r3
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	46c0      	nop			; (mov r8, r8)
 80024a4:	48000400 	.word	0x48000400

080024a8 <power_hold>:
 * after this time, the battery-supply is switched off
 * max time is 25seconds
 * 0 switches off immediatly
 */
void power_hold(uint8_t sec)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	0002      	movs	r2, r0
 80024b0:	1dfb      	adds	r3, r7, #7
 80024b2:	701a      	strb	r2, [r3, #0]
	if(sec > 25)
 80024b4:	1dfb      	adds	r3, r7, #7
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b19      	cmp	r3, #25
 80024ba:	d902      	bls.n	80024c2 <power_hold+0x1a>
	{
		sec = 25;
 80024bc:	1dfb      	adds	r3, r7, #7
 80024be:	2219      	movs	r2, #25
 80024c0:	701a      	strb	r2, [r3, #0]
	}
	power_timer = sec * 10;
 80024c2:	1dfb      	adds	r3, r7, #7
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	1c1a      	adds	r2, r3, #0
 80024c8:	0092      	lsls	r2, r2, #2
 80024ca:	18d3      	adds	r3, r2, r3
 80024cc:	18db      	adds	r3, r3, r3
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	4b02      	ldr	r3, [pc, #8]	; (80024dc <power_hold+0x34>)
 80024d2:	701a      	strb	r2, [r3, #0]
}
 80024d4:	46c0      	nop			; (mov r8, r8)
 80024d6:	46bd      	mov	sp, r7
 80024d8:	b002      	add	sp, #8
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	20000525 	.word	0x20000525

080024e0 <power_exec>:
/**
 * has to be called every 100ms - needed for the power_hold and button detection
 *
 */
void power_exec()
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
//========State-Machine for the Button=============================
	switch(power_buttonState)
 80024e4:	4b36      	ldr	r3, [pc, #216]	; (80025c0 <power_exec+0xe0>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d02b      	beq.n	8002544 <power_exec+0x64>
 80024ec:	dc51      	bgt.n	8002592 <power_exec+0xb2>
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d002      	beq.n	80024f8 <power_exec+0x18>
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d00c      	beq.n	8002510 <power_exec+0x30>
 80024f6:	e04c      	b.n	8002592 <power_exec+0xb2>
	{
	case 0: //released
		//detect button presses
		//the button pulls the pin down, so the logic is inverted!
		if(!GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_1))
 80024f8:	2390      	movs	r3, #144	; 0x90
 80024fa:	05db      	lsls	r3, r3, #23
 80024fc:	2102      	movs	r1, #2
 80024fe:	0018      	movs	r0, r3
 8002500:	f7fd ffba 	bl	8000478 <GPIO_ReadInputDataBit>
 8002504:	1e03      	subs	r3, r0, #0
 8002506:	d141      	bne.n	800258c <power_exec+0xac>
		{
			power_buttonState = 1;	//change state to bouncing
 8002508:	4b2d      	ldr	r3, [pc, #180]	; (80025c0 <power_exec+0xe0>)
 800250a:	2201      	movs	r2, #1
 800250c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800250e:	e03d      	b.n	800258c <power_exec+0xac>
	case 1: //bouncing
		//check if pin is still high
		if(!GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_1))
 8002510:	2390      	movs	r3, #144	; 0x90
 8002512:	05db      	lsls	r3, r3, #23
 8002514:	2102      	movs	r1, #2
 8002516:	0018      	movs	r0, r3
 8002518:	f7fd ffae 	bl	8000478 <GPIO_ReadInputDataBit>
 800251c:	1e03      	subs	r3, r0, #0
 800251e:	d10d      	bne.n	800253c <power_exec+0x5c>
		{
			//now the button is surely pressed
			power_flags |= POWER_FLAG_SW_PRESS;
 8002520:	4b28      	ldr	r3, [pc, #160]	; (80025c4 <power_exec+0xe4>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2202      	movs	r2, #2
 8002526:	4313      	orrs	r3, r2
 8002528:	b2da      	uxtb	r2, r3
 800252a:	4b26      	ldr	r3, [pc, #152]	; (80025c4 <power_exec+0xe4>)
 800252c:	701a      	strb	r2, [r3, #0]
			power_buttonHoldTime = 1;
 800252e:	4b26      	ldr	r3, [pc, #152]	; (80025c8 <power_exec+0xe8>)
 8002530:	2201      	movs	r2, #1
 8002532:	701a      	strb	r2, [r3, #0]
			power_buttonState = 2;	//change state to pressed / holding
 8002534:	4b22      	ldr	r3, [pc, #136]	; (80025c0 <power_exec+0xe0>)
 8002536:	2202      	movs	r2, #2
 8002538:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			power_buttonState = 0; //false alarm -> back to released
		}
		break;
 800253a:	e02a      	b.n	8002592 <power_exec+0xb2>
			power_buttonState = 0; //false alarm -> back to released
 800253c:	4b20      	ldr	r3, [pc, #128]	; (80025c0 <power_exec+0xe0>)
 800253e:	2200      	movs	r2, #0
 8002540:	701a      	strb	r2, [r3, #0]
		break;
 8002542:	e026      	b.n	8002592 <power_exec+0xb2>
	case 2: //pressed
		//count the holding-time
		power_buttonHoldTime++;
 8002544:	4b20      	ldr	r3, [pc, #128]	; (80025c8 <power_exec+0xe8>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	3301      	adds	r3, #1
 800254a:	b2da      	uxtb	r2, r3
 800254c:	4b1e      	ldr	r3, [pc, #120]	; (80025c8 <power_exec+0xe8>)
 800254e:	701a      	strb	r2, [r3, #0]
		if(power_buttonHoldTime >= 5)
 8002550:	4b1d      	ldr	r3, [pc, #116]	; (80025c8 <power_exec+0xe8>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b04      	cmp	r3, #4
 8002556:	d906      	bls.n	8002566 <power_exec+0x86>
		{
			power_flags |= POWER_FLAG_SW_HOLD;
 8002558:	4b1a      	ldr	r3, [pc, #104]	; (80025c4 <power_exec+0xe4>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2204      	movs	r2, #4
 800255e:	4313      	orrs	r3, r2
 8002560:	b2da      	uxtb	r2, r3
 8002562:	4b18      	ldr	r3, [pc, #96]	; (80025c4 <power_exec+0xe4>)
 8002564:	701a      	strb	r2, [r3, #0]
		}
		if(GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_1))
 8002566:	2390      	movs	r3, #144	; 0x90
 8002568:	05db      	lsls	r3, r3, #23
 800256a:	2102      	movs	r1, #2
 800256c:	0018      	movs	r0, r3
 800256e:	f7fd ff83 	bl	8000478 <GPIO_ReadInputDataBit>
 8002572:	1e03      	subs	r3, r0, #0
 8002574:	d00c      	beq.n	8002590 <power_exec+0xb0>
		{
			power_flags |= POWER_FLAG_SW_RELEASE;
 8002576:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <power_exec+0xe4>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2201      	movs	r2, #1
 800257c:	4313      	orrs	r3, r2
 800257e:	b2da      	uxtb	r2, r3
 8002580:	4b10      	ldr	r3, [pc, #64]	; (80025c4 <power_exec+0xe4>)
 8002582:	701a      	strb	r2, [r3, #0]
			power_buttonState = 0;	//pin is low -> button was just released
 8002584:	4b0e      	ldr	r3, [pc, #56]	; (80025c0 <power_exec+0xe0>)
 8002586:	2200      	movs	r2, #0
 8002588:	701a      	strb	r2, [r3, #0]
		}
		break;
 800258a:	e001      	b.n	8002590 <power_exec+0xb0>
		break;
 800258c:	46c0      	nop			; (mov r8, r8)
 800258e:	e000      	b.n	8002592 <power_exec+0xb2>
		break;
 8002590:	46c0      	nop			; (mov r8, r8)
	}
//=============================================================================

	//count power_hold time and shut down if exceeded
	if (power_timer)
 8002592:	4b0e      	ldr	r3, [pc, #56]	; (80025cc <power_exec+0xec>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b00      	cmp	r3, #0
 800259a:	d007      	beq.n	80025ac <power_exec+0xcc>
	{
		power_timer--;
 800259c:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <power_exec+0xec>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	3b01      	subs	r3, #1
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	4b09      	ldr	r3, [pc, #36]	; (80025cc <power_exec+0xec>)
 80025a8:	701a      	strb	r2, [r3, #0]
	else
	{
		//shut down the battery supply
		GPIO_WriteBit(GPIOA, GPIO_Pin_4, Bit_RESET);
	}
}
 80025aa:	e006      	b.n	80025ba <power_exec+0xda>
		GPIO_WriteBit(GPIOA, GPIO_Pin_4, Bit_RESET);
 80025ac:	2390      	movs	r3, #144	; 0x90
 80025ae:	05db      	lsls	r3, r3, #23
 80025b0:	2200      	movs	r2, #0
 80025b2:	2110      	movs	r1, #16
 80025b4:	0018      	movs	r0, r3
 80025b6:	f7fd ff82 	bl	80004be <GPIO_WriteBit>
}
 80025ba:	46c0      	nop			; (mov r8, r8)
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	20000526 	.word	0x20000526
 80025c4:	20000043 	.word	0x20000043
 80025c8:	20000044 	.word	0x20000044
 80025cc:	20000525 	.word	0x20000525

080025d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80025d0:	4813      	ldr	r0, [pc, #76]	; (8002620 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80025d2:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80025d4:	4813      	ldr	r0, [pc, #76]	; (8002624 <LoopForever+0x6>)
    LDR R1, [R0]
 80025d6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80025d8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80025da:	4a13      	ldr	r2, [pc, #76]	; (8002628 <LoopForever+0xa>)
    CMP R1, R2
 80025dc:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80025de:	d105      	bne.n	80025ec <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80025e0:	4812      	ldr	r0, [pc, #72]	; (800262c <LoopForever+0xe>)
    LDR R1,=0x00000001
 80025e2:	4913      	ldr	r1, [pc, #76]	; (8002630 <LoopForever+0x12>)
    STR R1, [R0]
 80025e4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80025e6:	4813      	ldr	r0, [pc, #76]	; (8002634 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80025e8:	4913      	ldr	r1, [pc, #76]	; (8002638 <LoopForever+0x1a>)
    STR R1, [R0]
 80025ea:	6001      	str	r1, [r0, #0]

080025ec <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025ec:	4813      	ldr	r0, [pc, #76]	; (800263c <LoopForever+0x1e>)
  ldr r1, =_edata
 80025ee:	4914      	ldr	r1, [pc, #80]	; (8002640 <LoopForever+0x22>)
  ldr r2, =_sidata
 80025f0:	4a14      	ldr	r2, [pc, #80]	; (8002644 <LoopForever+0x26>)
  movs r3, #0
 80025f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025f4:	e002      	b.n	80025fc <LoopCopyDataInit>

080025f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025fa:	3304      	adds	r3, #4

080025fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002600:	d3f9      	bcc.n	80025f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002602:	4a11      	ldr	r2, [pc, #68]	; (8002648 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8002604:	4c11      	ldr	r4, [pc, #68]	; (800264c <LoopForever+0x2e>)
  movs r3, #0
 8002606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002608:	e001      	b.n	800260e <LoopFillZerobss>

0800260a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800260a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800260c:	3204      	adds	r2, #4

0800260e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800260e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002610:	d3fb      	bcc.n	800260a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002612:	f7fe fceb 	bl	8000fec <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002616:	f000 f81d 	bl	8002654 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800261a:	f7fe fc47 	bl	8000eac <main>

0800261e <LoopForever>:

LoopForever:
    b LoopForever
 800261e:	e7fe      	b.n	800261e <LoopForever>
  ldr   r0, =_estack
 8002620:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8002624:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8002628:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 800262c:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8002630:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8002634:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8002638:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 800263c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002640:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8002644:	080026e4 	.word	0x080026e4
  ldr r2, =_sbss
 8002648:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800264c:	20000528 	.word	0x20000528

08002650 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002650:	e7fe      	b.n	8002650 <ADC1_IRQHandler>
	...

08002654 <__libc_init_array>:
 8002654:	b570      	push	{r4, r5, r6, lr}
 8002656:	2600      	movs	r6, #0
 8002658:	4d0c      	ldr	r5, [pc, #48]	; (800268c <__libc_init_array+0x38>)
 800265a:	4c0d      	ldr	r4, [pc, #52]	; (8002690 <__libc_init_array+0x3c>)
 800265c:	1b64      	subs	r4, r4, r5
 800265e:	10a4      	asrs	r4, r4, #2
 8002660:	42a6      	cmp	r6, r4
 8002662:	d109      	bne.n	8002678 <__libc_init_array+0x24>
 8002664:	2600      	movs	r6, #0
 8002666:	f000 f823 	bl	80026b0 <_init>
 800266a:	4d0a      	ldr	r5, [pc, #40]	; (8002694 <__libc_init_array+0x40>)
 800266c:	4c0a      	ldr	r4, [pc, #40]	; (8002698 <__libc_init_array+0x44>)
 800266e:	1b64      	subs	r4, r4, r5
 8002670:	10a4      	asrs	r4, r4, #2
 8002672:	42a6      	cmp	r6, r4
 8002674:	d105      	bne.n	8002682 <__libc_init_array+0x2e>
 8002676:	bd70      	pop	{r4, r5, r6, pc}
 8002678:	00b3      	lsls	r3, r6, #2
 800267a:	58eb      	ldr	r3, [r5, r3]
 800267c:	4798      	blx	r3
 800267e:	3601      	adds	r6, #1
 8002680:	e7ee      	b.n	8002660 <__libc_init_array+0xc>
 8002682:	00b3      	lsls	r3, r6, #2
 8002684:	58eb      	ldr	r3, [r5, r3]
 8002686:	4798      	blx	r3
 8002688:	3601      	adds	r6, #1
 800268a:	e7f2      	b.n	8002672 <__libc_init_array+0x1e>
 800268c:	080026dc 	.word	0x080026dc
 8002690:	080026dc 	.word	0x080026dc
 8002694:	080026dc 	.word	0x080026dc
 8002698:	080026e0 	.word	0x080026e0

0800269c <memcpy>:
 800269c:	2300      	movs	r3, #0
 800269e:	b510      	push	{r4, lr}
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d100      	bne.n	80026a6 <memcpy+0xa>
 80026a4:	bd10      	pop	{r4, pc}
 80026a6:	5ccc      	ldrb	r4, [r1, r3]
 80026a8:	54c4      	strb	r4, [r0, r3]
 80026aa:	3301      	adds	r3, #1
 80026ac:	e7f8      	b.n	80026a0 <memcpy+0x4>
	...

080026b0 <_init>:
 80026b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026b2:	46c0      	nop			; (mov r8, r8)
 80026b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026b6:	bc08      	pop	{r3}
 80026b8:	469e      	mov	lr, r3
 80026ba:	4770      	bx	lr

080026bc <_fini>:
 80026bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026be:	46c0      	nop			; (mov r8, r8)
 80026c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026c2:	bc08      	pop	{r3}
 80026c4:	469e      	mov	lr, r3
 80026c6:	4770      	bx	lr
