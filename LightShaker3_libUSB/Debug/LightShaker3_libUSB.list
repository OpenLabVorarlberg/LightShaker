
LightShaker3_libUSB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d14  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08002dd4  08002dd4  00012dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002de8  08002de8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08002de8  08002de8  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002de8  08002de8  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002de8  08002de8  00012de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002dec  08002dec  00012dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002df0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000518  2000001c  08002e0c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000534  08002e0c  00020534  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000695a  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e50  00000000  00000000  0002699e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f0  00000000  00000000  000287f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006a8  00000000  00000000  00028fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002f97  00000000  00000000  00029688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009ab9  00000000  00000000  0002c61f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00045d51  00000000  00000000  000360d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0007be29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018e4  00000000  00000000  0007be7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000001c 	.word	0x2000001c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002dbc 	.word	0x08002dbc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000020 	.word	0x20000020
 8000104:	08002dbc 	.word	0x08002dbc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <EXTI_DeInit>:
 * @brief  Deinitializes the EXTI peripheral registers to their default reset 
 *         values.
 * @param  None
 * @retval None
 */
void EXTI_DeInit(void) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
	EXTI->IMR = 0x0F940000;
 80003f8:	4b08      	ldr	r3, [pc, #32]	; (800041c <EXTI_DeInit+0x28>)
 80003fa:	4a09      	ldr	r2, [pc, #36]	; (8000420 <EXTI_DeInit+0x2c>)
 80003fc:	601a      	str	r2, [r3, #0]
	EXTI->EMR = 0x00000000;
 80003fe:	4b07      	ldr	r3, [pc, #28]	; (800041c <EXTI_DeInit+0x28>)
 8000400:	2200      	movs	r2, #0
 8000402:	605a      	str	r2, [r3, #4]
	EXTI->RTSR = 0x00000000;
 8000404:	4b05      	ldr	r3, [pc, #20]	; (800041c <EXTI_DeInit+0x28>)
 8000406:	2200      	movs	r2, #0
 8000408:	609a      	str	r2, [r3, #8]
	EXTI->FTSR = 0x00000000;
 800040a:	4b04      	ldr	r3, [pc, #16]	; (800041c <EXTI_DeInit+0x28>)
 800040c:	2200      	movs	r2, #0
 800040e:	60da      	str	r2, [r3, #12]
	EXTI->PR = 0x006BFFFF;
 8000410:	4b02      	ldr	r3, [pc, #8]	; (800041c <EXTI_DeInit+0x28>)
 8000412:	4a04      	ldr	r2, [pc, #16]	; (8000424 <EXTI_DeInit+0x30>)
 8000414:	615a      	str	r2, [r3, #20]
}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	40010400 	.word	0x40010400
 8000420:	0f940000 	.word	0x0f940000
 8000424:	006bffff 	.word	0x006bffff

08000428 <EXTI_Init>:
 *         parameters in the EXTI_InitStruct.
 * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure that 
 *         contains the configuration information for the EXTI peripheral.
 * @retval None
 */
void EXTI_Init(EXTI_InitTypeDef *EXTI_InitStruct) {
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
	uint32_t tmp = 0;
 8000430:	2300      	movs	r3, #0
 8000432:	60fb      	str	r3, [r7, #12]
	assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
	assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
	assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
	assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

	tmp = (uint32_t) EXTI_BASE;
 8000434:	4b33      	ldr	r3, [pc, #204]	; (8000504 <EXTI_Init+0xdc>)
 8000436:	60fb      	str	r3, [r7, #12]

	if (EXTI_InitStruct->EXTI_LineCmd != DISABLE) {
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	799b      	ldrb	r3, [r3, #6]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d04f      	beq.n	80004e0 <EXTI_Init+0xb8>
		/* Clear EXTI line configuration */
		EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000440:	4b30      	ldr	r3, [pc, #192]	; (8000504 <EXTI_Init+0xdc>)
 8000442:	681a      	ldr	r2, [r3, #0]
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	43d9      	mvns	r1, r3
 800044a:	4b2e      	ldr	r3, [pc, #184]	; (8000504 <EXTI_Init+0xdc>)
 800044c:	400a      	ands	r2, r1
 800044e:	601a      	str	r2, [r3, #0]
		EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000450:	4b2c      	ldr	r3, [pc, #176]	; (8000504 <EXTI_Init+0xdc>)
 8000452:	685a      	ldr	r2, [r3, #4]
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	43d9      	mvns	r1, r3
 800045a:	4b2a      	ldr	r3, [pc, #168]	; (8000504 <EXTI_Init+0xdc>)
 800045c:	400a      	ands	r2, r1
 800045e:	605a      	str	r2, [r3, #4]

		tmp += EXTI_InitStruct->EXTI_Mode;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	791b      	ldrb	r3, [r3, #4]
 8000464:	001a      	movs	r2, r3
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	189b      	adds	r3, r3, r2
 800046a:	60fb      	str	r3, [r7, #12]

		*(__IO uint32_t*) tmp |= EXTI_InitStruct->EXTI_Line;
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	6819      	ldr	r1, [r3, #0]
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681a      	ldr	r2, [r3, #0]
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	430a      	orrs	r2, r1
 8000478:	601a      	str	r2, [r3, #0]

		/* Clear Rising Falling edge configuration */
		EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800047a:	4b22      	ldr	r3, [pc, #136]	; (8000504 <EXTI_Init+0xdc>)
 800047c:	689a      	ldr	r2, [r3, #8]
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	43d9      	mvns	r1, r3
 8000484:	4b1f      	ldr	r3, [pc, #124]	; (8000504 <EXTI_Init+0xdc>)
 8000486:	400a      	ands	r2, r1
 8000488:	609a      	str	r2, [r3, #8]
		EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800048a:	4b1e      	ldr	r3, [pc, #120]	; (8000504 <EXTI_Init+0xdc>)
 800048c:	68da      	ldr	r2, [r3, #12]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	43d9      	mvns	r1, r3
 8000494:	4b1b      	ldr	r3, [pc, #108]	; (8000504 <EXTI_Init+0xdc>)
 8000496:	400a      	ands	r2, r1
 8000498:	60da      	str	r2, [r3, #12]

		/* Select the trigger for the selected interrupts */
		if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling) {
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	795b      	ldrb	r3, [r3, #5]
 800049e:	2b10      	cmp	r3, #16
 80004a0:	d10e      	bne.n	80004c0 <EXTI_Init+0x98>
			/* Rising Falling edge */
			EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80004a2:	4b18      	ldr	r3, [pc, #96]	; (8000504 <EXTI_Init+0xdc>)
 80004a4:	6899      	ldr	r1, [r3, #8]
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681a      	ldr	r2, [r3, #0]
 80004aa:	4b16      	ldr	r3, [pc, #88]	; (8000504 <EXTI_Init+0xdc>)
 80004ac:	430a      	orrs	r2, r1
 80004ae:	609a      	str	r2, [r3, #8]
			EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80004b0:	4b14      	ldr	r3, [pc, #80]	; (8000504 <EXTI_Init+0xdc>)
 80004b2:	68d9      	ldr	r1, [r3, #12]
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681a      	ldr	r2, [r3, #0]
 80004b8:	4b12      	ldr	r3, [pc, #72]	; (8000504 <EXTI_Init+0xdc>)
 80004ba:	430a      	orrs	r2, r1
 80004bc:	60da      	str	r2, [r3, #12]
		tmp += EXTI_InitStruct->EXTI_Mode;

		/* Disable the selected external lines */
		*(__IO uint32_t*) tmp &= ~EXTI_InitStruct->EXTI_Line;
	}
}
 80004be:	e01d      	b.n	80004fc <EXTI_Init+0xd4>
			tmp = (uint32_t) EXTI_BASE;
 80004c0:	4b10      	ldr	r3, [pc, #64]	; (8000504 <EXTI_Init+0xdc>)
 80004c2:	60fb      	str	r3, [r7, #12]
			tmp += EXTI_InitStruct->EXTI_Trigger;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	795b      	ldrb	r3, [r3, #5]
 80004c8:	001a      	movs	r2, r3
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	189b      	adds	r3, r3, r2
 80004ce:	60fb      	str	r3, [r7, #12]
			*(__IO uint32_t*) tmp |= EXTI_InitStruct->EXTI_Line;
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	6819      	ldr	r1, [r3, #0]
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681a      	ldr	r2, [r3, #0]
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	430a      	orrs	r2, r1
 80004dc:	601a      	str	r2, [r3, #0]
}
 80004de:	e00d      	b.n	80004fc <EXTI_Init+0xd4>
		tmp += EXTI_InitStruct->EXTI_Mode;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	791b      	ldrb	r3, [r3, #4]
 80004e4:	001a      	movs	r2, r3
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	189b      	adds	r3, r3, r2
 80004ea:	60fb      	str	r3, [r7, #12]
		*(__IO uint32_t*) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	681a      	ldr	r2, [r3, #0]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	43d9      	mvns	r1, r3
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	400a      	ands	r2, r1
 80004fa:	601a      	str	r2, [r3, #0]
}
 80004fc:	46c0      	nop			; (mov r8, r8)
 80004fe:	46bd      	mov	sp, r7
 8000500:	b004      	add	sp, #16
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40010400 	.word	0x40010400

08000508 <EXTI_ClearITPendingBit>:
 * @brief  Clears the EXTI's line pending bits.
 * @param  EXTI_Line: specifies the EXTI lines to clear.
 *          This parameter can be any combination of EXTI_Linex where x can be (0..27).
 * @retval None
 */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_EXTI_LINE(EXTI_Line));

	EXTI->PR = EXTI_Line;
 8000510:	4b03      	ldr	r3, [pc, #12]	; (8000520 <EXTI_ClearITPendingBit+0x18>)
 8000512:	687a      	ldr	r2, [r7, #4]
 8000514:	615a      	str	r2, [r3, #20]
}
 8000516:	46c0      	nop			; (mov r8, r8)
 8000518:	46bd      	mov	sp, r7
 800051a:	b002      	add	sp, #8
 800051c:	bd80      	pop	{r7, pc}
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	40010400 	.word	0x40010400

08000524 <GPIO_Init>:
 * @note   GPIOD is not available for STM32F031.   
 * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_InitStruct) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	6039      	str	r1, [r7, #0]
	uint32_t pinpos = 0x00, pos = 0x00, currentpin = 0x00;
 800052e:	2300      	movs	r3, #0
 8000530:	617b      	str	r3, [r7, #20]
 8000532:	2300      	movs	r3, #0
 8000534:	613b      	str	r3, [r7, #16]
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
	assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
	assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

	/*-------------------------- Configure the port pins -----------------------*/
	/*-- GPIO Mode Configuration --*/
	for (pinpos = 0x00; pinpos < 0x10; pinpos++) {
 800053a:	2300      	movs	r3, #0
 800053c:	617b      	str	r3, [r7, #20]
 800053e:	e07c      	b.n	800063a <GPIO_Init+0x116>
		pos = ((uint32_t) 0x01) << pinpos;
 8000540:	2201      	movs	r2, #1
 8000542:	697b      	ldr	r3, [r7, #20]
 8000544:	409a      	lsls	r2, r3
 8000546:	0013      	movs	r3, r2
 8000548:	613b      	str	r3, [r7, #16]

		/* Get the port pins position */
		currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	693b      	ldr	r3, [r7, #16]
 8000550:	4013      	ands	r3, r2
 8000552:	60fb      	str	r3, [r7, #12]

		if (currentpin == pos) {
 8000554:	68fa      	ldr	r2, [r7, #12]
 8000556:	693b      	ldr	r3, [r7, #16]
 8000558:	429a      	cmp	r2, r3
 800055a:	d16b      	bne.n	8000634 <GPIO_Init+0x110>
			if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT)
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	791b      	ldrb	r3, [r3, #4]
 8000560:	2b01      	cmp	r3, #1
 8000562:	d003      	beq.n	800056c <GPIO_Init+0x48>
					|| (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF)) {
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	791b      	ldrb	r3, [r3, #4]
 8000568:	2b02      	cmp	r3, #2
 800056a:	d134      	bne.n	80005d6 <GPIO_Init+0xb2>
				/* Check Speed mode parameters */
				assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

				/* Speed mode configuration */
				GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	689b      	ldr	r3, [r3, #8]
 8000570:	697a      	ldr	r2, [r7, #20]
 8000572:	0052      	lsls	r2, r2, #1
 8000574:	2103      	movs	r1, #3
 8000576:	4091      	lsls	r1, r2
 8000578:	000a      	movs	r2, r1
 800057a:	43d2      	mvns	r2, r2
 800057c:	401a      	ands	r2, r3
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	609a      	str	r2, [r3, #8]
				GPIOx->OSPEEDR |= ((uint32_t) (GPIO_InitStruct->GPIO_Speed)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	689a      	ldr	r2, [r3, #8]
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	795b      	ldrb	r3, [r3, #5]
 800058a:	0019      	movs	r1, r3
						<< (pinpos * 2));
 800058c:	697b      	ldr	r3, [r7, #20]
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	4099      	lsls	r1, r3
 8000592:	000b      	movs	r3, r1
				GPIOx->OSPEEDR |= ((uint32_t) (GPIO_InitStruct->GPIO_Speed)
 8000594:	431a      	orrs	r2, r3
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	609a      	str	r2, [r3, #8]

				/* Check Output mode parameters */
				assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

				/* Output mode configuration */
				GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t) pinpos));
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	889b      	ldrh	r3, [r3, #4]
 800059e:	b29b      	uxth	r3, r3
 80005a0:	697a      	ldr	r2, [r7, #20]
 80005a2:	b292      	uxth	r2, r2
 80005a4:	0011      	movs	r1, r2
 80005a6:	2201      	movs	r2, #1
 80005a8:	408a      	lsls	r2, r1
 80005aa:	b292      	uxth	r2, r2
 80005ac:	43d2      	mvns	r2, r2
 80005ae:	b292      	uxth	r2, r2
 80005b0:	4013      	ands	r3, r2
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	809a      	strh	r2, [r3, #4]
				GPIOx->OTYPER |=
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	889b      	ldrh	r3, [r3, #4]
 80005bc:	b29a      	uxth	r2, r3
						(uint16_t) (((uint16_t) GPIO_InitStruct->GPIO_OType)
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	799b      	ldrb	r3, [r3, #6]
 80005c2:	0019      	movs	r1, r3
								<< ((uint16_t) pinpos));
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	b29b      	uxth	r3, r3
 80005c8:	4099      	lsls	r1, r3
 80005ca:	000b      	movs	r3, r1
						(uint16_t) (((uint16_t) GPIO_InitStruct->GPIO_OType)
 80005cc:	b29b      	uxth	r3, r3
				GPIOx->OTYPER |=
 80005ce:	4313      	orrs	r3, r2
 80005d0:	b29a      	uxth	r2, r3
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	809a      	strh	r2, [r3, #4]
			}

			GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	697a      	ldr	r2, [r7, #20]
 80005dc:	0052      	lsls	r2, r2, #1
 80005de:	2103      	movs	r1, #3
 80005e0:	4091      	lsls	r1, r2
 80005e2:	000a      	movs	r2, r1
 80005e4:	43d2      	mvns	r2, r2
 80005e6:	401a      	ands	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	601a      	str	r2, [r3, #0]

			GPIOx->MODER |= (((uint32_t) GPIO_InitStruct->GPIO_Mode)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	791b      	ldrb	r3, [r3, #4]
 80005f4:	0019      	movs	r1, r3
					<< (pinpos * 2));
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	005b      	lsls	r3, r3, #1
 80005fa:	4099      	lsls	r1, r3
 80005fc:	000b      	movs	r3, r1
			GPIOx->MODER |= (((uint32_t) GPIO_InitStruct->GPIO_Mode)
 80005fe:	431a      	orrs	r2, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	601a      	str	r2, [r3, #0]

			/* Pull-up Pull down resistor configuration */
			GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t) pinpos * 2));
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	697a      	ldr	r2, [r7, #20]
 800060a:	b292      	uxth	r2, r2
 800060c:	0052      	lsls	r2, r2, #1
 800060e:	2103      	movs	r1, #3
 8000610:	4091      	lsls	r1, r2
 8000612:	000a      	movs	r2, r1
 8000614:	43d2      	mvns	r2, r2
 8000616:	401a      	ands	r2, r3
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	60da      	str	r2, [r3, #12]
			GPIOx->PUPDR |= (((uint32_t) GPIO_InitStruct->GPIO_PuPd)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	68da      	ldr	r2, [r3, #12]
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	79db      	ldrb	r3, [r3, #7]
 8000624:	0019      	movs	r1, r3
					<< (pinpos * 2));
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	005b      	lsls	r3, r3, #1
 800062a:	4099      	lsls	r1, r3
 800062c:	000b      	movs	r3, r1
			GPIOx->PUPDR |= (((uint32_t) GPIO_InitStruct->GPIO_PuPd)
 800062e:	431a      	orrs	r2, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	60da      	str	r2, [r3, #12]
	for (pinpos = 0x00; pinpos < 0x10; pinpos++) {
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	3301      	adds	r3, #1
 8000638:	617b      	str	r3, [r7, #20]
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	2b0f      	cmp	r3, #15
 800063e:	d800      	bhi.n	8000642 <GPIO_Init+0x11e>
 8000640:	e77e      	b.n	8000540 <GPIO_Init+0x1c>
		}
	}
}
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	46c0      	nop			; (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	b006      	add	sp, #24
 800064a:	bd80      	pop	{r7, pc}

0800064c <GPIO_ReadInputDataBit>:
 *         For STM32F051 and STM32F030: (0..15) for GPIOA, GPIOB, GPIOC, (2) for GPIOD and (0..1, 4..7) for GIIOF.
 *         For STM32F072: (0..15) for GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, (0..10) for GPIOF.
 *         For STM32F031: (0..15) for GPIOA, GPIOB, (13..15) for GPIOC and (0..1, 6..7) for GPIOF.  
 * @retval The input port pin value.
 */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	000a      	movs	r2, r1
 8000656:	1cbb      	adds	r3, r7, #2
 8000658:	801a      	strh	r2, [r3, #0]

	uint8_t bitstatus = 0x00;
 800065a:	210f      	movs	r1, #15
 800065c:	187b      	adds	r3, r7, r1
 800065e:	2200      	movs	r2, #0
 8000660:	701a      	strb	r2, [r3, #0]

	/* Check the parameters */
	assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
	assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

	if ((GPIOx->IDR & GPIO_Pin) != (uint32_t) Bit_RESET) {
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	8a1b      	ldrh	r3, [r3, #16]
 8000666:	b29b      	uxth	r3, r3
 8000668:	1cba      	adds	r2, r7, #2
 800066a:	8812      	ldrh	r2, [r2, #0]
 800066c:	4013      	ands	r3, r2
 800066e:	b29b      	uxth	r3, r3
 8000670:	2b00      	cmp	r3, #0
 8000672:	d003      	beq.n	800067c <GPIO_ReadInputDataBit+0x30>
		bitstatus = (uint8_t) Bit_SET;
 8000674:	187b      	adds	r3, r7, r1
 8000676:	2201      	movs	r2, #1
 8000678:	701a      	strb	r2, [r3, #0]
 800067a:	e003      	b.n	8000684 <GPIO_ReadInputDataBit+0x38>
	} else {
		bitstatus = (uint8_t) Bit_RESET;
 800067c:	230f      	movs	r3, #15
 800067e:	18fb      	adds	r3, r7, r3
 8000680:	2200      	movs	r2, #0
 8000682:	701a      	strb	r2, [r3, #0]
	}
	return bitstatus;
 8000684:	230f      	movs	r3, #15
 8000686:	18fb      	adds	r3, r7, r3
 8000688:	781b      	ldrb	r3, [r3, #0]
}
 800068a:	0018      	movs	r0, r3
 800068c:	46bd      	mov	sp, r7
 800068e:	b004      	add	sp, #16
 8000690:	bd80      	pop	{r7, pc}

08000692 <GPIO_WriteBit>:
 *         For STM32F051 and STM32F030: (0..15) for GPIOA, GPIOB, GPIOC, (2) for GPIOD and (0..1, 4..7) for GIIOF.
 *         For STM32F072: (0..15) for GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, (0..10) for GPIOF.
 *         For STM32F031: (0..15) for GPIOA, GPIOB, (13..15) for GPIOC and (0..1, 6..7) for GPIOF.
 * @retval None
 */
void GPIO_WriteBit(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, BitAction BitVal) {
 8000692:	b580      	push	{r7, lr}
 8000694:	b082      	sub	sp, #8
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
 800069a:	0008      	movs	r0, r1
 800069c:	0011      	movs	r1, r2
 800069e:	1cbb      	adds	r3, r7, #2
 80006a0:	1c02      	adds	r2, r0, #0
 80006a2:	801a      	strh	r2, [r3, #0]
 80006a4:	1c7b      	adds	r3, r7, #1
 80006a6:	1c0a      	adds	r2, r1, #0
 80006a8:	701a      	strb	r2, [r3, #0]
	/* Check the parameters */
	assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
	assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
	assert_param(IS_GPIO_BIT_ACTION(BitVal));

	if (BitVal != Bit_RESET) {
 80006aa:	1c7b      	adds	r3, r7, #1
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d004      	beq.n	80006bc <GPIO_WriteBit+0x2a>
		GPIOx->BSRR = GPIO_Pin;
 80006b2:	1cbb      	adds	r3, r7, #2
 80006b4:	881a      	ldrh	r2, [r3, #0]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	619a      	str	r2, [r3, #24]
	} else {
		GPIOx->BRR = GPIO_Pin;
	}
}
 80006ba:	e003      	b.n	80006c4 <GPIO_WriteBit+0x32>
		GPIOx->BRR = GPIO_Pin;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	1cba      	adds	r2, r7, #2
 80006c0:	8812      	ldrh	r2, [r2, #0]
 80006c2:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80006c4:	46c0      	nop			; (mov r8, r8)
 80006c6:	46bd      	mov	sp, r7
 80006c8:	b002      	add	sp, #8
 80006ca:	bd80      	pop	{r7, pc}

080006cc <GPIO_PinAFConfig>:
 *         for the detailed mapping of the system and peripherals'alternate 
 *         function I/O pins.
 * @retval None
 */
void GPIO_PinAFConfig(GPIO_TypeDef *GPIOx, uint16_t GPIO_PinSource,
		uint8_t GPIO_AF) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	0008      	movs	r0, r1
 80006d6:	0011      	movs	r1, r2
 80006d8:	1cbb      	adds	r3, r7, #2
 80006da:	1c02      	adds	r2, r0, #0
 80006dc:	801a      	strh	r2, [r3, #0]
 80006de:	1c7b      	adds	r3, r7, #1
 80006e0:	1c0a      	adds	r2, r1, #0
 80006e2:	701a      	strb	r2, [r3, #0]
	uint32_t temp = 0x00;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
	uint32_t temp_2 = 0x00;
 80006e8:	2300      	movs	r3, #0
 80006ea:	60bb      	str	r3, [r7, #8]
	/* Check the parameters */
	assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
	assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
	assert_param(IS_GPIO_AF(GPIO_AF));

	temp = ((uint32_t) (GPIO_AF)
 80006ec:	1c7b      	adds	r3, r7, #1
 80006ee:	781a      	ldrb	r2, [r3, #0]
			<< ((uint32_t) ((uint32_t) GPIO_PinSource & (uint32_t) 0x07) * 4));
 80006f0:	1cbb      	adds	r3, r7, #2
 80006f2:	881b      	ldrh	r3, [r3, #0]
 80006f4:	2107      	movs	r1, #7
 80006f6:	400b      	ands	r3, r1
 80006f8:	009b      	lsls	r3, r3, #2
	temp = ((uint32_t) (GPIO_AF)
 80006fa:	409a      	lsls	r2, r3
 80006fc:	0013      	movs	r3, r2
 80006fe:	60fb      	str	r3, [r7, #12]
	GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t) 0xF
 8000700:	1cbb      	adds	r3, r7, #2
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	08db      	lsrs	r3, r3, #3
 8000706:	b29b      	uxth	r3, r3
 8000708:	001a      	movs	r2, r3
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	3208      	adds	r2, #8
 800070e:	0092      	lsls	r2, r2, #2
 8000710:	58d3      	ldr	r3, [r2, r3]
			<< ((uint32_t) ((uint32_t) GPIO_PinSource & (uint32_t) 0x07) * 4));
 8000712:	1cba      	adds	r2, r7, #2
 8000714:	8812      	ldrh	r2, [r2, #0]
 8000716:	2107      	movs	r1, #7
 8000718:	400a      	ands	r2, r1
 800071a:	0092      	lsls	r2, r2, #2
 800071c:	210f      	movs	r1, #15
 800071e:	4091      	lsls	r1, r2
 8000720:	000a      	movs	r2, r1
	GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t) 0xF
 8000722:	43d2      	mvns	r2, r2
 8000724:	1cb9      	adds	r1, r7, #2
 8000726:	8809      	ldrh	r1, [r1, #0]
 8000728:	08c9      	lsrs	r1, r1, #3
 800072a:	b289      	uxth	r1, r1
 800072c:	0008      	movs	r0, r1
 800072e:	401a      	ands	r2, r3
 8000730:	0011      	movs	r1, r2
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	0002      	movs	r2, r0
 8000736:	3208      	adds	r2, #8
 8000738:	0092      	lsls	r2, r2, #2
 800073a:	50d1      	str	r1, [r2, r3]
	temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800073c:	1cbb      	adds	r3, r7, #2
 800073e:	881b      	ldrh	r3, [r3, #0]
 8000740:	08db      	lsrs	r3, r3, #3
 8000742:	b29b      	uxth	r3, r3
 8000744:	001a      	movs	r2, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	3208      	adds	r2, #8
 800074a:	0092      	lsls	r2, r2, #2
 800074c:	58d3      	ldr	r3, [r2, r3]
 800074e:	68fa      	ldr	r2, [r7, #12]
 8000750:	4313      	orrs	r3, r2
 8000752:	60bb      	str	r3, [r7, #8]
	GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000754:	1cbb      	adds	r3, r7, #2
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	08db      	lsrs	r3, r3, #3
 800075a:	b29b      	uxth	r3, r3
 800075c:	001a      	movs	r2, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	3208      	adds	r2, #8
 8000762:	0092      	lsls	r2, r2, #2
 8000764:	68b9      	ldr	r1, [r7, #8]
 8000766:	50d1      	str	r1, [r2, r3]
}
 8000768:	46c0      	nop			; (mov r8, r8)
 800076a:	46bd      	mov	sp, r7
 800076c:	b004      	add	sp, #16
 800076e:	bd80      	pop	{r7, pc}

08000770 <I2C_DeInit>:
/**
 * @brief  Deinitializes the I2Cx peripheral registers to their default reset values.
 * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 * @retval None
 */
void I2C_DeInit(I2C_TypeDef *I2Cx) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_I2C_ALL_PERIPH(I2Cx));

	if (I2Cx == I2C1) {
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4a10      	ldr	r2, [pc, #64]	; (80007bc <I2C_DeInit+0x4c>)
 800077c:	4293      	cmp	r3, r2
 800077e:	d10c      	bne.n	800079a <I2C_DeInit+0x2a>
		/* Enable I2C1 reset state */
		RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8000780:	2380      	movs	r3, #128	; 0x80
 8000782:	039b      	lsls	r3, r3, #14
 8000784:	2101      	movs	r1, #1
 8000786:	0018      	movs	r0, r3
 8000788:	f000 f9ee 	bl	8000b68 <RCC_APB1PeriphResetCmd>
		/* Release I2C1 from reset state */
		RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
 800078c:	2380      	movs	r3, #128	; 0x80
 800078e:	039b      	lsls	r3, r3, #14
 8000790:	2100      	movs	r1, #0
 8000792:	0018      	movs	r0, r3
 8000794:	f000 f9e8 	bl	8000b68 <RCC_APB1PeriphResetCmd>
		/* Enable I2C2 reset state */
		RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
		/* Release I2C2 from reset state */
		RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
	}
}
 8000798:	e00b      	b.n	80007b2 <I2C_DeInit+0x42>
		RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 800079a:	2380      	movs	r3, #128	; 0x80
 800079c:	03db      	lsls	r3, r3, #15
 800079e:	2101      	movs	r1, #1
 80007a0:	0018      	movs	r0, r3
 80007a2:	f000 f9e1 	bl	8000b68 <RCC_APB1PeriphResetCmd>
		RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
 80007a6:	2380      	movs	r3, #128	; 0x80
 80007a8:	03db      	lsls	r3, r3, #15
 80007aa:	2100      	movs	r1, #0
 80007ac:	0018      	movs	r0, r3
 80007ae:	f000 f9db 	bl	8000b68 <RCC_APB1PeriphResetCmd>
}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	46bd      	mov	sp, r7
 80007b6:	b002      	add	sp, #8
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	40005400 	.word	0x40005400

080007c0 <I2C_Init>:
 * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
 *         contains the configuration information for the specified I2C peripheral.
 * @retval None
 */
void I2C_Init(I2C_TypeDef *I2Cx, I2C_InitTypeDef *I2C_InitStruct) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
	uint32_t tmpreg = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
	assert_param(
			IS_I2C_ACKNOWLEDGE_ADDRESS(
					I2C_InitStruct->I2C_AcknowledgedAddress));

	/* Disable I2Cx Peripheral */
	I2Cx->CR1 &= (uint32_t) ~((uint32_t) I2C_CR1_PE);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	2201      	movs	r2, #1
 80007d4:	4393      	bics	r3, r2
 80007d6:	001a      	movs	r2, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	601a      	str	r2, [r3, #0]

	/*---------------------------- I2Cx FILTERS Configuration ------------------*/
	/* Get the I2Cx CR1 value */
	tmpreg = I2Cx->CR1;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	60fb      	str	r3, [r7, #12]
	/* Clear I2Cx CR1 register */
	tmpreg &= CR1_CLEAR_MASK;
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	4a27      	ldr	r2, [pc, #156]	; (8000884 <I2C_Init+0xc4>)
 80007e6:	4013      	ands	r3, r2
 80007e8:	60fb      	str	r3, [r7, #12]
	/* Configure I2Cx: analog and digital filter */
	/* Set ANFOFF bit according to I2C_AnalogFilter value */
	/* Set DFN bits according to I2C_DigitalFilter value */
	tmpreg |= (uint32_t) I2C_InitStruct->I2C_AnalogFilter
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	685a      	ldr	r2, [r3, #4]
			| (I2C_InitStruct->I2C_DigitalFilter << 8);
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	689b      	ldr	r3, [r3, #8]
 80007f2:	021b      	lsls	r3, r3, #8
 80007f4:	4313      	orrs	r3, r2
	tmpreg |= (uint32_t) I2C_InitStruct->I2C_AnalogFilter
 80007f6:	68fa      	ldr	r2, [r7, #12]
 80007f8:	4313      	orrs	r3, r2
 80007fa:	60fb      	str	r3, [r7, #12]

	/* Write to I2Cx CR1 */
	I2Cx->CR1 = tmpreg;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	68fa      	ldr	r2, [r7, #12]
 8000800:	601a      	str	r2, [r3, #0]

	/*---------------------------- I2Cx TIMING Configuration -------------------*/
	/* Configure I2Cx: Timing */
	/* Set TIMINGR bits according to I2C_Timing */
	/* Write to I2Cx TIMING */
	I2Cx->TIMINGR = I2C_InitStruct->I2C_Timing & TIMING_CLEAR_MASK;
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a20      	ldr	r2, [pc, #128]	; (8000888 <I2C_Init+0xc8>)
 8000808:	401a      	ands	r2, r3
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	611a      	str	r2, [r3, #16]

	/* Enable I2Cx Peripheral */
	I2Cx->CR1 |= I2C_CR1_PE;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	2201      	movs	r2, #1
 8000814:	431a      	orrs	r2, r3
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	601a      	str	r2, [r3, #0]

	/*---------------------------- I2Cx OAR1 Configuration ---------------------*/
	/* Clear tmpreg local variable */
	tmpreg = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
	/* Clear OAR1 register */
	I2Cx->OAR1 = (uint32_t) tmpreg;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	68fa      	ldr	r2, [r7, #12]
 8000822:	609a      	str	r2, [r3, #8]
	/* Clear OAR2 register */
	I2Cx->OAR2 = (uint32_t) tmpreg;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	68fa      	ldr	r2, [r7, #12]
 8000828:	60da      	str	r2, [r3, #12]
	/* Configure I2Cx: Own Address1 and acknowledged address */
	/* Set OA1MODE bit according to I2C_AcknowledgedAddress value */
	/* Set OA1 bits according to I2C_OwnAddress1 value */
	tmpreg = (uint32_t) ((uint32_t) I2C_InitStruct->I2C_AcknowledgedAddress
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	699a      	ldr	r2, [r3, #24]
			| (uint32_t) I2C_InitStruct->I2C_OwnAddress1);
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	691b      	ldr	r3, [r3, #16]
	tmpreg = (uint32_t) ((uint32_t) I2C_InitStruct->I2C_AcknowledgedAddress
 8000832:	4313      	orrs	r3, r2
 8000834:	60fb      	str	r3, [r7, #12]
	/* Write to I2Cx OAR1 */
	I2Cx->OAR1 = tmpreg;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	68fa      	ldr	r2, [r7, #12]
 800083a:	609a      	str	r2, [r3, #8]
	/* Enable Own Address1 acknowledgement */
	I2Cx->OAR1 |= I2C_OAR1_OA1EN;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	689b      	ldr	r3, [r3, #8]
 8000840:	2280      	movs	r2, #128	; 0x80
 8000842:	0212      	lsls	r2, r2, #8
 8000844:	431a      	orrs	r2, r3
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	609a      	str	r2, [r3, #8]

	/*---------------------------- I2Cx MODE Configuration ---------------------*/
	/* Configure I2Cx: mode */
	/* Set SMBDEN and SMBHEN bits according to I2C_Mode value */
	tmpreg = I2C_InitStruct->I2C_Mode;
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	68db      	ldr	r3, [r3, #12]
 800084e:	60fb      	str	r3, [r7, #12]
	/* Write to I2Cx CR1 */
	I2Cx->CR1 |= tmpreg;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	431a      	orrs	r2, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	601a      	str	r2, [r3, #0]

	/*---------------------------- I2Cx ACK Configuration ----------------------*/
	/* Get the I2Cx CR2 value */
	tmpreg = I2Cx->CR2;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	60fb      	str	r3, [r7, #12]
	/* Clear I2Cx CR2 register */
	tmpreg &= CR2_CLEAR_MASK;
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	4a09      	ldr	r2, [pc, #36]	; (800088c <I2C_Init+0xcc>)
 8000866:	4013      	ands	r3, r2
 8000868:	60fb      	str	r3, [r7, #12]
	/* Configure I2Cx: acknowledgement */
	/* Set NACK bit according to I2C_Ack value */
	tmpreg |= I2C_InitStruct->I2C_Ack;
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	68fa      	ldr	r2, [r7, #12]
 8000870:	4313      	orrs	r3, r2
 8000872:	60fb      	str	r3, [r7, #12]
	/* Write to I2Cx CR2 */
	I2Cx->CR2 = tmpreg;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	68fa      	ldr	r2, [r7, #12]
 8000878:	605a      	str	r2, [r3, #4]
}
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	46bd      	mov	sp, r7
 800087e:	b004      	add	sp, #16
 8000880:	bd80      	pop	{r7, pc}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	00cfe0ff 	.word	0x00cfe0ff
 8000888:	f0ffffff 	.word	0xf0ffffff
 800088c:	07ff7fff 	.word	0x07ff7fff

08000890 <I2C_Cmd>:
 * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 * @param  NewState: new state of the I2Cx peripheral. 
 *          This parameter can be: ENABLE or DISABLE.
 * @retval None
 */
void I2C_Cmd(I2C_TypeDef *I2Cx, FunctionalState NewState) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	000a      	movs	r2, r1
 800089a:	1cfb      	adds	r3, r7, #3
 800089c:	701a      	strb	r2, [r3, #0]
	/* Check the parameters */
	assert_param(IS_I2C_ALL_PERIPH(I2Cx));
	assert_param(IS_FUNCTIONAL_STATE(NewState));
	if (NewState != DISABLE) {
 800089e:	1cfb      	adds	r3, r7, #3
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d006      	beq.n	80008b4 <I2C_Cmd+0x24>
		/* Enable the selected I2C peripheral */
		I2Cx->CR1 |= I2C_CR1_PE;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2201      	movs	r2, #1
 80008ac:	431a      	orrs	r2, r3
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	601a      	str	r2, [r3, #0]
	} else {
		/* Disable the selected I2C peripheral */
		I2Cx->CR1 &= (uint32_t) ~((uint32_t) I2C_CR1_PE);
	}
}
 80008b2:	e006      	b.n	80008c2 <I2C_Cmd+0x32>
		I2Cx->CR1 &= (uint32_t) ~((uint32_t) I2C_CR1_PE);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2201      	movs	r2, #1
 80008ba:	4393      	bics	r3, r2
 80008bc:	001a      	movs	r2, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	601a      	str	r2, [r3, #0]
}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b002      	add	sp, #8
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <I2C_TransferHandling>:
 *            @arg I2C_Generate_Start_Read: Generate Restart for read request.
 *            @arg I2C_Generate_Start_Write: Generate Restart for write request.
 * @retval None
 */
void I2C_TransferHandling(I2C_TypeDef *I2Cx, uint16_t Address,
		uint8_t Number_Bytes, uint32_t ReloadEndMode, uint32_t StartStopMode) {
 80008cc:	b590      	push	{r4, r7, lr}
 80008ce:	b087      	sub	sp, #28
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	0008      	movs	r0, r1
 80008d6:	0011      	movs	r1, r2
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	240a      	movs	r4, #10
 80008dc:	193b      	adds	r3, r7, r4
 80008de:	1c02      	adds	r2, r0, #0
 80008e0:	801a      	strh	r2, [r3, #0]
 80008e2:	2009      	movs	r0, #9
 80008e4:	183b      	adds	r3, r7, r0
 80008e6:	1c0a      	adds	r2, r1, #0
 80008e8:	701a      	strb	r2, [r3, #0]
	uint32_t tmpreg = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	617b      	str	r3, [r7, #20]
	assert_param(IS_I2C_SLAVE_ADDRESS(Address));
	assert_param(IS_RELOAD_END_MODE(ReloadEndMode));
	assert_param(IS_START_STOP_MODE(StartStopMode));

	/* Get the CR2 register value */
	tmpreg = I2Cx->CR2;
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	617b      	str	r3, [r7, #20]

	/* clear tmpreg specific bits */
	tmpreg &= (uint32_t) ~((uint32_t) (I2C_CR2_SADD | I2C_CR2_NBYTES
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	4a0e      	ldr	r2, [pc, #56]	; (8000930 <I2C_TransferHandling+0x64>)
 80008f8:	4013      	ands	r3, r2
 80008fa:	617b      	str	r3, [r7, #20]
			| I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START
			| I2C_CR2_STOP));

	/* update tmpreg */
	tmpreg |= (uint32_t) (((uint32_t) Address & I2C_CR2_SADD)
 80008fc:	193b      	adds	r3, r7, r4
 80008fe:	881b      	ldrh	r3, [r3, #0]
 8000900:	059b      	lsls	r3, r3, #22
 8000902:	0d9a      	lsrs	r2, r3, #22
			| (((uint32_t) Number_Bytes << 16) & I2C_CR2_NBYTES)
 8000904:	183b      	adds	r3, r7, r0
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	0419      	lsls	r1, r3, #16
 800090a:	23ff      	movs	r3, #255	; 0xff
 800090c:	041b      	lsls	r3, r3, #16
 800090e:	400b      	ands	r3, r1
 8000910:	431a      	orrs	r2, r3
			| (uint32_t) ReloadEndMode | (uint32_t) StartStopMode);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	431a      	orrs	r2, r3
	tmpreg |= (uint32_t) (((uint32_t) Address & I2C_CR2_SADD)
 8000916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000918:	4313      	orrs	r3, r2
 800091a:	697a      	ldr	r2, [r7, #20]
 800091c:	4313      	orrs	r3, r2
 800091e:	617b      	str	r3, [r7, #20]

	/* update CR2 register */
	I2Cx->CR2 = tmpreg;
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	697a      	ldr	r2, [r7, #20]
 8000924:	605a      	str	r2, [r3, #4]
}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	46bd      	mov	sp, r7
 800092a:	b007      	add	sp, #28
 800092c:	bd90      	pop	{r4, r7, pc}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	fc009800 	.word	0xfc009800

08000934 <I2C_SendData>:
 * @brief  Sends a data byte through the I2Cx peripheral.
 * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 * @param  Data: Byte to be transmitted..
 * @retval None
 */
void I2C_SendData(I2C_TypeDef *I2Cx, uint8_t Data) {
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	000a      	movs	r2, r1
 800093e:	1cfb      	adds	r3, r7, #3
 8000940:	701a      	strb	r2, [r3, #0]
	/* Check the parameters */
	assert_param(IS_I2C_ALL_PERIPH(I2Cx));

	/* Write in the DR register the data to be sent */
	I2Cx->TXDR = (uint8_t) Data;
 8000942:	1cfb      	adds	r3, r7, #3
 8000944:	781a      	ldrb	r2, [r3, #0]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	629a      	str	r2, [r3, #40]	; 0x28
}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	46bd      	mov	sp, r7
 800094e:	b002      	add	sp, #8
 8000950:	bd80      	pop	{r7, pc}

08000952 <I2C_ReceiveData>:
/**
 * @brief  Returns the most recent received data by the I2Cx peripheral.
 * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 * @retval The value of the received data.
 */
uint8_t I2C_ReceiveData(I2C_TypeDef *I2Cx) {
 8000952:	b580      	push	{r7, lr}
 8000954:	b082      	sub	sp, #8
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_I2C_ALL_PERIPH(I2Cx));

	/* Return the data in the DR register */
	return (uint8_t) I2Cx->RXDR;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800095e:	b2db      	uxtb	r3, r3
}
 8000960:	0018      	movs	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	b002      	add	sp, #8
 8000966:	bd80      	pop	{r7, pc}

08000968 <I2C_GetFlagStatus>:
 *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow detection flag
 *            @arg I2C_FLAG_ALERT: SMBus Alert
 *            @arg I2C_FLAG_BUSY: Bus busy
 * @retval The new state of I2C_FLAG (SET or RESET).
 */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef *I2Cx, uint32_t I2C_FLAG) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	6039      	str	r1, [r7, #0]
	uint32_t tmpreg = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	60bb      	str	r3, [r7, #8]
	FlagStatus bitstatus = RESET;
 8000976:	210f      	movs	r1, #15
 8000978:	187b      	adds	r3, r7, r1
 800097a:	2200      	movs	r2, #0
 800097c:	701a      	strb	r2, [r3, #0]
	/* Check the parameters */
	assert_param(IS_I2C_ALL_PERIPH(I2Cx));
	assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

	/* Get the ISR register value */
	tmpreg = I2Cx->ISR;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	699b      	ldr	r3, [r3, #24]
 8000982:	60bb      	str	r3, [r7, #8]

	/* Get flag status */
	tmpreg &= I2C_FLAG;
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	683a      	ldr	r2, [r7, #0]
 8000988:	4013      	ands	r3, r2
 800098a:	60bb      	str	r3, [r7, #8]

	if (tmpreg != 0) {
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d003      	beq.n	800099a <I2C_GetFlagStatus+0x32>
		/* I2C_FLAG is set */
		bitstatus = SET;
 8000992:	187b      	adds	r3, r7, r1
 8000994:	2201      	movs	r2, #1
 8000996:	701a      	strb	r2, [r3, #0]
 8000998:	e003      	b.n	80009a2 <I2C_GetFlagStatus+0x3a>
	} else {
		/* I2C_FLAG is reset */
		bitstatus = RESET;
 800099a:	230f      	movs	r3, #15
 800099c:	18fb      	adds	r3, r7, r3
 800099e:	2200      	movs	r2, #0
 80009a0:	701a      	strb	r2, [r3, #0]
	}
	return bitstatus;
 80009a2:	230f      	movs	r3, #15
 80009a4:	18fb      	adds	r3, r7, r3
 80009a6:	781b      	ldrb	r3, [r3, #0]
}
 80009a8:	0018      	movs	r0, r3
 80009aa:	46bd      	mov	sp, r7
 80009ac:	b004      	add	sp, #16
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <I2C_ClearFlag>:
 *            @arg I2C_FLAG_PECERR: PEC error in reception
 *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow detection flag
 *            @arg I2C_FLAG_ALERT: SMBus Alert
 * @retval The new state of I2C_FLAG (SET or RESET).
 */
void I2C_ClearFlag(I2C_TypeDef *I2Cx, uint32_t I2C_FLAG) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	6039      	str	r1, [r7, #0]
	/* Check the parameters */
	assert_param(IS_I2C_ALL_PERIPH(I2Cx));
	assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));

	/* Clear the selected flag */
	I2Cx->ICR = I2C_FLAG;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	683a      	ldr	r2, [r7, #0]
 80009be:	61da      	str	r2, [r3, #28]
}
 80009c0:	46c0      	nop			; (mov r8, r8)
 80009c2:	46bd      	mov	sp, r7
 80009c4:	b002      	add	sp, #8
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <NVIC_Init>:
 *         parameters in the NVIC_InitStruct.
 * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
 *         the configuration information for the specified NVIC peripheral.
 * @retval None
 */
void NVIC_Init(NVIC_InitTypeDef *NVIC_InitStruct) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	uint32_t tmppriority = 0x00;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]

	/* Check the parameters */
	assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
	assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));

	if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE) {
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	789b      	ldrb	r3, [r3, #2]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d039      	beq.n	8000a50 <NVIC_Init+0x88>
		/* Compute the Corresponding IRQ Priority --------------------------------*/
		tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 80009dc:	4a24      	ldr	r2, [pc, #144]	; (8000a70 <NVIC_Init+0xa8>)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	089b      	lsrs	r3, r3, #2
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	33c0      	adds	r3, #192	; 0xc0
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	589b      	ldr	r3, [r3, r2]
 80009ec:	60fb      	str	r3, [r7, #12]
		tmppriority &= (uint32_t) (~(((uint32_t) 0xFF)
				<< ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	001a      	movs	r2, r3
 80009f4:	2303      	movs	r3, #3
 80009f6:	4013      	ands	r3, r2
 80009f8:	00db      	lsls	r3, r3, #3
 80009fa:	22ff      	movs	r2, #255	; 0xff
 80009fc:	409a      	lsls	r2, r3
 80009fe:	0013      	movs	r3, r2
		tmppriority &= (uint32_t) (~(((uint32_t) 0xFF)
 8000a00:	43da      	mvns	r2, r3
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	4013      	ands	r3, r2
 8000a06:	60fb      	str	r3, [r7, #12]
		tmppriority |=
				(uint32_t) ((((uint32_t) NVIC_InitStruct->NVIC_IRQChannelPriority
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	785b      	ldrb	r3, [r3, #1]
						<< 6) & 0xFF)
 8000a0c:	019b      	lsls	r3, r3, #6
 8000a0e:	22ff      	movs	r2, #255	; 0xff
 8000a10:	401a      	ands	r2, r3
						<< ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8));
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	0019      	movs	r1, r3
 8000a18:	2303      	movs	r3, #3
 8000a1a:	400b      	ands	r3, r1
 8000a1c:	00db      	lsls	r3, r3, #3
				(uint32_t) ((((uint32_t) NVIC_InitStruct->NVIC_IRQChannelPriority
 8000a1e:	409a      	lsls	r2, r3
 8000a20:	0013      	movs	r3, r2
		tmppriority |=
 8000a22:	68fa      	ldr	r2, [r7, #12]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	60fb      	str	r3, [r7, #12]

		NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02] = tmppriority;
 8000a28:	4911      	ldr	r1, [pc, #68]	; (8000a70 <NVIC_Init+0xa8>)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	089b      	lsrs	r3, r3, #2
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	33c0      	adds	r3, #192	; 0xc0
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	68fa      	ldr	r2, [r7, #12]
 8000a38:	505a      	str	r2, [r3, r1]

		/* Enable the Selected IRQ Channels --------------------------------------*/
		NVIC->ISER[0] = (uint32_t) 0x01
				<< (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t) 0x1F);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	001a      	movs	r2, r3
 8000a40:	231f      	movs	r3, #31
 8000a42:	401a      	ands	r2, r3
		NVIC->ISER[0] = (uint32_t) 0x01
 8000a44:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <NVIC_Init+0xa8>)
				<< (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t) 0x1F);
 8000a46:	2101      	movs	r1, #1
 8000a48:	4091      	lsls	r1, r2
 8000a4a:	000a      	movs	r2, r1
		NVIC->ISER[0] = (uint32_t) 0x01
 8000a4c:	601a      	str	r2, [r3, #0]
	} else {
		/* Disable the Selected IRQ Channels -------------------------------------*/
		NVIC->ICER[0] = (uint32_t) 0x01
				<< (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t) 0x1F);
	}
}
 8000a4e:	e00a      	b.n	8000a66 <NVIC_Init+0x9e>
				<< (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t) 0x1F);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	001a      	movs	r2, r3
 8000a56:	231f      	movs	r3, #31
 8000a58:	4013      	ands	r3, r2
		NVIC->ICER[0] = (uint32_t) 0x01
 8000a5a:	4905      	ldr	r1, [pc, #20]	; (8000a70 <NVIC_Init+0xa8>)
				<< (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t) 0x1F);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	409a      	lsls	r2, r3
 8000a60:	0013      	movs	r3, r2
		NVIC->ICER[0] = (uint32_t) 0x01
 8000a62:	2280      	movs	r2, #128	; 0x80
 8000a64:	508b      	str	r3, [r1, r2]
}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	b004      	add	sp, #16
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	e000e100 	.word	0xe000e100

08000a74 <SysTick_CLKSourceConfig>:
 *          This parameter can be one of the following values:
 *            @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
 *            @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
 * @retval None
 */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));

	if (SysTick_CLKSource == SysTick_CLKSource_HCLK) {
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2b04      	cmp	r3, #4
 8000a80:	d106      	bne.n	8000a90 <SysTick_CLKSourceConfig+0x1c>
		SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000a82:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <SysTick_CLKSourceConfig+0x30>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <SysTick_CLKSourceConfig+0x30>)
 8000a88:	2104      	movs	r1, #4
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	601a      	str	r2, [r3, #0]
	} else {
		SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
	}
}
 8000a8e:	e005      	b.n	8000a9c <SysTick_CLKSourceConfig+0x28>
		SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8000a90:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <SysTick_CLKSourceConfig+0x30>)
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	4b03      	ldr	r3, [pc, #12]	; (8000aa4 <SysTick_CLKSourceConfig+0x30>)
 8000a96:	2104      	movs	r1, #4
 8000a98:	438a      	bics	r2, r1
 8000a9a:	601a      	str	r2, [r3, #0]
}
 8000a9c:	46c0      	nop			; (mov r8, r8)
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	b002      	add	sp, #8
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	e000e010 	.word	0xe000e010

08000aa8 <RCC_AHBPeriphClockCmd>:
 *             @arg RCC_AHBPeriph_DMA1:  DMA1 clock
 * @param  NewState: new state of the specified peripheral clock.
 *          This parameter can be: ENABLE or DISABLE.
 * @retval None
 */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	000a      	movs	r2, r1
 8000ab2:	1cfb      	adds	r3, r7, #3
 8000ab4:	701a      	strb	r2, [r3, #0]
	/* Check the parameters */
	assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
	assert_param(IS_FUNCTIONAL_STATE(NewState));

	if (NewState != DISABLE) {
 8000ab6:	1cfb      	adds	r3, r7, #3
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d006      	beq.n	8000acc <RCC_AHBPeriphClockCmd+0x24>
		RCC->AHBENR |= RCC_AHBPeriph;
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <RCC_AHBPeriphClockCmd+0x3c>)
 8000ac0:	6959      	ldr	r1, [r3, #20]
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <RCC_AHBPeriphClockCmd+0x3c>)
 8000ac4:	687a      	ldr	r2, [r7, #4]
 8000ac6:	430a      	orrs	r2, r1
 8000ac8:	615a      	str	r2, [r3, #20]
	} else {
		RCC->AHBENR &= ~RCC_AHBPeriph;
	}
}
 8000aca:	e006      	b.n	8000ada <RCC_AHBPeriphClockCmd+0x32>
		RCC->AHBENR &= ~RCC_AHBPeriph;
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <RCC_AHBPeriphClockCmd+0x3c>)
 8000ace:	695a      	ldr	r2, [r3, #20]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	43d9      	mvns	r1, r3
 8000ad4:	4b03      	ldr	r3, [pc, #12]	; (8000ae4 <RCC_AHBPeriphClockCmd+0x3c>)
 8000ad6:	400a      	ands	r2, r1
 8000ad8:	615a      	str	r2, [r3, #20]
}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	46bd      	mov	sp, r7
 8000ade:	b002      	add	sp, #8
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <RCC_APB2PeriphClockCmd>:
 *             @arg RCC_APB2Periph_DBGMCU: DBGMCU clock
 * @param  NewState: new state of the specified peripheral clock.
 *          This parameter can be: ENABLE or DISABLE.
 * @retval None
 */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	000a      	movs	r2, r1
 8000af2:	1cfb      	adds	r3, r7, #3
 8000af4:	701a      	strb	r2, [r3, #0]
	/* Check the parameters */
	assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
	assert_param(IS_FUNCTIONAL_STATE(NewState));

	if (NewState != DISABLE) {
 8000af6:	1cfb      	adds	r3, r7, #3
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d006      	beq.n	8000b0c <RCC_APB2PeriphClockCmd+0x24>
		RCC->APB2ENR |= RCC_APB2Periph;
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <RCC_APB2PeriphClockCmd+0x3c>)
 8000b00:	6999      	ldr	r1, [r3, #24]
 8000b02:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <RCC_APB2PeriphClockCmd+0x3c>)
 8000b04:	687a      	ldr	r2, [r7, #4]
 8000b06:	430a      	orrs	r2, r1
 8000b08:	619a      	str	r2, [r3, #24]
	} else {
		RCC->APB2ENR &= ~RCC_APB2Periph;
	}
}
 8000b0a:	e006      	b.n	8000b1a <RCC_APB2PeriphClockCmd+0x32>
		RCC->APB2ENR &= ~RCC_APB2Periph;
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <RCC_APB2PeriphClockCmd+0x3c>)
 8000b0e:	699a      	ldr	r2, [r3, #24]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	43d9      	mvns	r1, r3
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <RCC_APB2PeriphClockCmd+0x3c>)
 8000b16:	400a      	ands	r2, r1
 8000b18:	619a      	str	r2, [r3, #24]
}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	b002      	add	sp, #8
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	40021000 	.word	0x40021000

08000b28 <RCC_APB1PeriphClockCmd>:
 *           @arg RCC_APB1Periph_CEC:    CEC clock, applicable only for STM32F051, STM32F042 and STM32F072 devices                               
 * @param  NewState: new state of the specified peripheral clock.
 *          This parameter can be: ENABLE or DISABLE.
 * @retval None
 */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	000a      	movs	r2, r1
 8000b32:	1cfb      	adds	r3, r7, #3
 8000b34:	701a      	strb	r2, [r3, #0]
	/* Check the parameters */
	assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
	assert_param(IS_FUNCTIONAL_STATE(NewState));

	if (NewState != DISABLE) {
 8000b36:	1cfb      	adds	r3, r7, #3
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d006      	beq.n	8000b4c <RCC_APB1PeriphClockCmd+0x24>
		RCC->APB1ENR |= RCC_APB1Periph;
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <RCC_APB1PeriphClockCmd+0x3c>)
 8000b40:	69d9      	ldr	r1, [r3, #28]
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <RCC_APB1PeriphClockCmd+0x3c>)
 8000b44:	687a      	ldr	r2, [r7, #4]
 8000b46:	430a      	orrs	r2, r1
 8000b48:	61da      	str	r2, [r3, #28]
	} else {
		RCC->APB1ENR &= ~RCC_APB1Periph;
	}
}
 8000b4a:	e006      	b.n	8000b5a <RCC_APB1PeriphClockCmd+0x32>
		RCC->APB1ENR &= ~RCC_APB1Periph;
 8000b4c:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <RCC_APB1PeriphClockCmd+0x3c>)
 8000b4e:	69da      	ldr	r2, [r3, #28]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	43d9      	mvns	r1, r3
 8000b54:	4b03      	ldr	r3, [pc, #12]	; (8000b64 <RCC_APB1PeriphClockCmd+0x3c>)
 8000b56:	400a      	ands	r2, r1
 8000b58:	61da      	str	r2, [r3, #28]
}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	b002      	add	sp, #8
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	40021000 	.word	0x40021000

08000b68 <RCC_APB1PeriphResetCmd>:
 *           @arg RCC_APB1Periph_CEC:    CEC clock, applicable only for STM32F051 and STM32F072 devices  
 * @param  NewState: new state of the specified peripheral clock.
 *          This parameter can be: ENABLE or DISABLE.
 * @retval None
 */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	000a      	movs	r2, r1
 8000b72:	1cfb      	adds	r3, r7, #3
 8000b74:	701a      	strb	r2, [r3, #0]
	/* Check the parameters */
	assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
	assert_param(IS_FUNCTIONAL_STATE(NewState));

	if (NewState != DISABLE) {
 8000b76:	1cfb      	adds	r3, r7, #3
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d006      	beq.n	8000b8c <RCC_APB1PeriphResetCmd+0x24>
		RCC->APB1RSTR |= RCC_APB1Periph;
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <RCC_APB1PeriphResetCmd+0x3c>)
 8000b80:	6919      	ldr	r1, [r3, #16]
 8000b82:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <RCC_APB1PeriphResetCmd+0x3c>)
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	430a      	orrs	r2, r1
 8000b88:	611a      	str	r2, [r3, #16]
	} else {
		RCC->APB1RSTR &= ~RCC_APB1Periph;
	}
}
 8000b8a:	e006      	b.n	8000b9a <RCC_APB1PeriphResetCmd+0x32>
		RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <RCC_APB1PeriphResetCmd+0x3c>)
 8000b8e:	691a      	ldr	r2, [r3, #16]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	43d9      	mvns	r1, r3
 8000b94:	4b03      	ldr	r3, [pc, #12]	; (8000ba4 <RCC_APB1PeriphResetCmd+0x3c>)
 8000b96:	400a      	ands	r2, r1
 8000b98:	611a      	str	r2, [r3, #16]
}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	b002      	add	sp, #8
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	40021000 	.word	0x40021000

08000ba8 <SYSCFG_EXTILineConfig>:
 *         For STM32F072: (0..15) for GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, (0..10) for GPIOF.
 *         For STM32F031: (0..15) for GPIOA, GPIOB, (13..15) for GPIOC and (0..1, 6..7) for GPIOF.
 * @retval None
 */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx,
		uint8_t EXTI_PinSourcex) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	0002      	movs	r2, r0
 8000bb0:	1dfb      	adds	r3, r7, #7
 8000bb2:	701a      	strb	r2, [r3, #0]
 8000bb4:	1dbb      	adds	r3, r7, #6
 8000bb6:	1c0a      	adds	r2, r1, #0
 8000bb8:	701a      	strb	r2, [r3, #0]
	uint32_t tmp = 0x00;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]

	/* Check the parameters */
	assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
	assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

	tmp = ((uint32_t) 0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t) 0x03));
 8000bbe:	1dbb      	adds	r3, r7, #6
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	2203      	movs	r2, #3
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	220f      	movs	r2, #15
 8000bca:	409a      	lsls	r2, r3
 8000bcc:	0013      	movs	r3, r2
 8000bce:	60fb      	str	r3, [r7, #12]
	SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8000bd0:	4a18      	ldr	r2, [pc, #96]	; (8000c34 <SYSCFG_EXTILineConfig+0x8c>)
 8000bd2:	1dbb      	adds	r3, r7, #6
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	089b      	lsrs	r3, r3, #2
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	3302      	adds	r3, #2
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	589b      	ldr	r3, [r3, r2]
 8000be0:	68fa      	ldr	r2, [r7, #12]
 8000be2:	43d2      	mvns	r2, r2
 8000be4:	4813      	ldr	r0, [pc, #76]	; (8000c34 <SYSCFG_EXTILineConfig+0x8c>)
 8000be6:	1db9      	adds	r1, r7, #6
 8000be8:	7809      	ldrb	r1, [r1, #0]
 8000bea:	0889      	lsrs	r1, r1, #2
 8000bec:	b2c9      	uxtb	r1, r1
 8000bee:	401a      	ands	r2, r3
 8000bf0:	1c8b      	adds	r3, r1, #2
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	501a      	str	r2, [r3, r0]
	SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |=
 8000bf6:	4a0f      	ldr	r2, [pc, #60]	; (8000c34 <SYSCFG_EXTILineConfig+0x8c>)
 8000bf8:	1dbb      	adds	r3, r7, #6
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	089b      	lsrs	r3, r3, #2
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	3302      	adds	r3, #2
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	589a      	ldr	r2, [r3, r2]
			(((uint32_t) EXTI_PortSourceGPIOx)
 8000c06:	1dfb      	adds	r3, r7, #7
 8000c08:	7819      	ldrb	r1, [r3, #0]
					<< (0x04 * (EXTI_PinSourcex & (uint8_t) 0x03)));
 8000c0a:	1dbb      	adds	r3, r7, #6
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	2003      	movs	r0, #3
 8000c10:	4003      	ands	r3, r0
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	4099      	lsls	r1, r3
 8000c16:	000b      	movs	r3, r1
	SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |=
 8000c18:	4806      	ldr	r0, [pc, #24]	; (8000c34 <SYSCFG_EXTILineConfig+0x8c>)
 8000c1a:	1db9      	adds	r1, r7, #6
 8000c1c:	7809      	ldrb	r1, [r1, #0]
 8000c1e:	0889      	lsrs	r1, r1, #2
 8000c20:	b2c9      	uxtb	r1, r1
 8000c22:	431a      	orrs	r2, r3
 8000c24:	1c8b      	adds	r3, r1, #2
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	501a      	str	r2, [r3, r0]
}
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	b004      	add	sp, #16
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	40010000 	.word	0x40010000

08000c38 <AppMgmt_AppInit>:
uint8_t app_active = 0;
bool	app_run = false;
#define APP_COUNT  	4

void AppMgmt_AppInit()
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	switch(app_active)
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <AppMgmt_AppInit+0x50>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b03      	cmp	r3, #3
 8000c42:	d015      	beq.n	8000c70 <AppMgmt_AppInit+0x38>
 8000c44:	dc19      	bgt.n	8000c7a <AppMgmt_AppInit+0x42>
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	d00d      	beq.n	8000c66 <AppMgmt_AppInit+0x2e>
 8000c4a:	dc16      	bgt.n	8000c7a <AppMgmt_AppInit+0x42>
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d002      	beq.n	8000c56 <AppMgmt_AppInit+0x1e>
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d005      	beq.n	8000c60 <AppMgmt_AppInit+0x28>
 8000c54:	e011      	b.n	8000c7a <AppMgmt_AppInit+0x42>
	{
		case 0:
			PovD_DeInit();
 8000c56:	f000 f9fe 	bl	8001056 <PovD_DeInit>
			Playground_Init();
 8000c5a:	f000 fa0f 	bl	800107c <Playground_Init>
			break;
 8000c5e:	e00c      	b.n	8000c7a <AppMgmt_AppInit+0x42>
		case 1:
			PovD_Init();
 8000c60:	f000 f9de 	bl	8001020 <PovD_Init>
			break;
 8000c64:	e009      	b.n	8000c7a <AppMgmt_AppInit+0x42>
		case 2:
			PovD_DeInit();
 8000c66:	f000 f9f6 	bl	8001056 <PovD_DeInit>
			Level_Init();
 8000c6a:	f000 f93f 	bl	8000eec <Level_Init>
			break;
 8000c6e:	e004      	b.n	8000c7a <AppMgmt_AppInit+0x42>
		case 3:
			PovD_DeInit();
 8000c70:	f000 f9f1 	bl	8001056 <PovD_DeInit>
			ColorPicker_Init();
 8000c74:	f000 f868 	bl	8000d48 <ColorPicker_Init>
			break;
 8000c78:	46c0      	nop			; (mov r8, r8)

	}
	app_run = true;
 8000c7a:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <AppMgmt_AppInit+0x54>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	701a      	strb	r2, [r3, #0]
}
 8000c80:	46c0      	nop			; (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	20000038 	.word	0x20000038
 8000c8c:	20000039 	.word	0x20000039

08000c90 <AppMgmt_AppExec>:

void AppMgmt_AppExec()
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
	if(!app_run)
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <AppMgmt_AppExec+0x4c>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2201      	movs	r2, #1
 8000c9a:	4053      	eors	r3, r2
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d118      	bne.n	8000cd4 <AppMgmt_AppExec+0x44>
	{
		return;
	}
	switch(app_active)
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <AppMgmt_AppExec+0x50>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b03      	cmp	r3, #3
 8000ca8:	d011      	beq.n	8000cce <AppMgmt_AppExec+0x3e>
 8000caa:	dc14      	bgt.n	8000cd6 <AppMgmt_AppExec+0x46>
 8000cac:	2b02      	cmp	r3, #2
 8000cae:	d00b      	beq.n	8000cc8 <AppMgmt_AppExec+0x38>
 8000cb0:	dc11      	bgt.n	8000cd6 <AppMgmt_AppExec+0x46>
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d002      	beq.n	8000cbc <AppMgmt_AppExec+0x2c>
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d003      	beq.n	8000cc2 <AppMgmt_AppExec+0x32>
 8000cba:	e00c      	b.n	8000cd6 <AppMgmt_AppExec+0x46>
	{
	case 0:
		Playground_Exec();
 8000cbc:	f000 fa00 	bl	80010c0 <Playground_Exec>
		break;
 8000cc0:	e009      	b.n	8000cd6 <AppMgmt_AppExec+0x46>
	case 1:
		PovD_Exec();
 8000cc2:	f000 f9c3 	bl	800104c <PovD_Exec>
		break;
 8000cc6:	e006      	b.n	8000cd6 <AppMgmt_AppExec+0x46>
	case 2:
		Level_Exec();
 8000cc8:	f000 f926 	bl	8000f18 <Level_Exec>
		break;
 8000ccc:	e003      	b.n	8000cd6 <AppMgmt_AppExec+0x46>
	case 3:
		ColorPicker_Exec();
 8000cce:	f000 f857 	bl	8000d80 <ColorPicker_Exec>
		break;
 8000cd2:	e000      	b.n	8000cd6 <AppMgmt_AppExec+0x46>
		return;
 8000cd4:	46c0      	nop			; (mov r8, r8)
	}
}
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	20000039 	.word	0x20000039
 8000ce0:	20000038 	.word	0x20000038

08000ce4 <AppMgmt_CycleApps>:


void AppMgmt_CycleApps()
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
	Neopixels_setColor(COLOR_WHITE);
 8000ce8:	2007      	movs	r0, #7
 8000cea:	f001 fbcf 	bl	800248c <Neopixels_setColor>
	Neopixels_setBrightness(2);
 8000cee:	2002      	movs	r0, #2
 8000cf0:	f001 fbf0 	bl	80024d4 <Neopixels_setBrightness>
	app_run = false;
 8000cf4:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <AppMgmt_CycleApps+0x48>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	701a      	strb	r2, [r3, #0]
	app_active++;
 8000cfa:	4b0d      	ldr	r3, [pc, #52]	; (8000d30 <AppMgmt_CycleApps+0x4c>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <AppMgmt_CycleApps+0x4c>)
 8000d04:	701a      	strb	r2, [r3, #0]
	if(app_active >= APP_COUNT)
 8000d06:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <AppMgmt_CycleApps+0x4c>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b03      	cmp	r3, #3
 8000d0c:	d902      	bls.n	8000d14 <AppMgmt_CycleApps+0x30>
	{
		app_active = 0;
 8000d0e:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <AppMgmt_CycleApps+0x4c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	701a      	strb	r2, [r3, #0]
	}
	Neopixels_Bargraph(app_active+1, true);
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <AppMgmt_CycleApps+0x4c>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f001 fcfd 	bl	800271e <Neopixels_Bargraph>
}
 8000d24:	46c0      	nop			; (mov r8, r8)
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	20000039 	.word	0x20000039
 8000d30:	20000038 	.word	0x20000038

08000d34 <AppMgmt_LoadApp>:

void AppMgmt_LoadApp()
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
	Neopixels_Off();
 8000d38:	f001 fd46 	bl	80027c8 <Neopixels_Off>
	AppMgmt_AppInit();
 8000d3c:	f7ff ff7c 	bl	8000c38 <AppMgmt_AppInit>
}
 8000d40:	46c0      	nop			; (mov r8, r8)
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <ColorPicker_Init>:

uint16_t h = 0;
uint8_t s = 128;

void ColorPicker_Init()
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
	AppMgmt_Timebase = 10;
 8000d4c:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <ColorPicker_Init+0x34>)
 8000d4e:	220a      	movs	r2, #10
 8000d50:	801a      	strh	r2, [r3, #0]
	Accelerometer_init();
 8000d52:	f000 fe1f 	bl	8001994 <Accelerometer_init>
	Accelerometer_setDataWidth(ACC_DATAWIDTH_8);
 8000d56:	2000      	movs	r0, #0
 8000d58:	f000 ff04 	bl	8001b64 <Accelerometer_setDataWidth>
	Accelerometer_setDataRate(RATE_400Hz);
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	f000 fedc 	bl	8001b1a <Accelerometer_setDataRate>
	Accelerometer_setRange(RANGE_2G);
 8000d62:	2000      	movs	r0, #0
 8000d64:	f000 feb6 	bl	8001ad4 <Accelerometer_setRange>
	Neopixels_setBrightness(2);
 8000d68:	2002      	movs	r0, #2
 8000d6a:	f001 fbb3 	bl	80024d4 <Neopixels_setBrightness>
	power_hold(20);
 8000d6e:	2014      	movs	r0, #20
 8000d70:	f001 fe40 	bl	80029f4 <power_hold>
}
 8000d74:	46c0      	nop			; (mov r8, r8)
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	20000044 	.word	0x20000044

08000d80 <ColorPicker_Exec>:


void ColorPicker_Exec()
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
	int8_t dh = Accelerometer_read8().x>>2;
 8000d86:	f000 ff1f 	bl	8001bc8 <Accelerometer_read8>
 8000d8a:	0003      	movs	r3, r0
 8000d8c:	001a      	movs	r2, r3
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	1c11      	adds	r1, r2, #0
 8000d92:	7019      	strb	r1, [r3, #0]
 8000d94:	0411      	lsls	r1, r2, #16
 8000d96:	0e09      	lsrs	r1, r1, #24
 8000d98:	7059      	strb	r1, [r3, #1]
 8000d9a:	0212      	lsls	r2, r2, #8
 8000d9c:	0e12      	lsrs	r2, r2, #24
 8000d9e:	709a      	strb	r2, [r3, #2]
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	2200      	movs	r2, #0
 8000da4:	569a      	ldrsb	r2, [r3, r2]
 8000da6:	210f      	movs	r1, #15
 8000da8:	187b      	adds	r3, r7, r1
 8000daa:	1092      	asrs	r2, r2, #2
 8000dac:	701a      	strb	r2, [r3, #0]
	if(dh < 0)
 8000dae:	187b      	adds	r3, r7, r1
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b7f      	cmp	r3, #127	; 0x7f
 8000db4:	d922      	bls.n	8000dfc <ColorPicker_Exec+0x7c>
	{
		if(h >= dh*-1)
 8000db6:	4b49      	ldr	r3, [pc, #292]	; (8000edc <ColorPicker_Exec+0x15c>)
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	001a      	movs	r2, r3
 8000dbc:	187b      	adds	r3, r7, r1
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	b25b      	sxtb	r3, r3
 8000dc2:	425b      	negs	r3, r3
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	db0a      	blt.n	8000dde <ColorPicker_Exec+0x5e>
		{
			h += dh;
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	b25b      	sxtb	r3, r3
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	4b42      	ldr	r3, [pc, #264]	; (8000edc <ColorPicker_Exec+0x15c>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	18d3      	adds	r3, r2, r3
 8000dd6:	b29a      	uxth	r2, r3
 8000dd8:	4b40      	ldr	r3, [pc, #256]	; (8000edc <ColorPicker_Exec+0x15c>)
 8000dda:	801a      	strh	r2, [r3, #0]
 8000ddc:	e00e      	b.n	8000dfc <ColorPicker_Exec+0x7c>
		}
		else
		{
			//it doesn't fit-> wrap araund
			h = h +dh+HSV_H_MAX;
 8000dde:	230f      	movs	r3, #15
 8000de0:	18fb      	adds	r3, r7, r3
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	b25b      	sxtb	r3, r3
 8000de6:	b29a      	uxth	r2, r3
 8000de8:	4b3c      	ldr	r3, [pc, #240]	; (8000edc <ColorPicker_Exec+0x15c>)
 8000dea:	881b      	ldrh	r3, [r3, #0]
 8000dec:	18d3      	adds	r3, r2, r3
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	4a3b      	ldr	r2, [pc, #236]	; (8000ee0 <ColorPicker_Exec+0x160>)
 8000df2:	4694      	mov	ip, r2
 8000df4:	4463      	add	r3, ip
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	4b38      	ldr	r3, [pc, #224]	; (8000edc <ColorPicker_Exec+0x15c>)
 8000dfa:	801a      	strh	r2, [r3, #0]
		}
	}
	if(dh > 0)
 8000dfc:	210f      	movs	r1, #15
 8000dfe:	187b      	adds	r3, r7, r1
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	b25b      	sxtb	r3, r3
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	dd0e      	ble.n	8000e26 <ColorPicker_Exec+0xa6>
	{
		h = (h + dh) % HSV_H_MAX;
 8000e08:	4b34      	ldr	r3, [pc, #208]	; (8000edc <ColorPicker_Exec+0x15c>)
 8000e0a:	881b      	ldrh	r3, [r3, #0]
 8000e0c:	001a      	movs	r2, r3
 8000e0e:	187b      	adds	r3, r7, r1
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	b25b      	sxtb	r3, r3
 8000e14:	18d3      	adds	r3, r2, r3
 8000e16:	4932      	ldr	r1, [pc, #200]	; (8000ee0 <ColorPicker_Exec+0x160>)
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f7ff fae5 	bl	80003e8 <__aeabi_idivmod>
 8000e1e:	000b      	movs	r3, r1
 8000e20:	b29a      	uxth	r2, r3
 8000e22:	4b2e      	ldr	r3, [pc, #184]	; (8000edc <ColorPicker_Exec+0x15c>)
 8000e24:	801a      	strh	r2, [r3, #0]
	}

	int8_t ds = Accelerometer_read8().y>>4;
 8000e26:	f000 fecf 	bl	8001bc8 <Accelerometer_read8>
 8000e2a:	0003      	movs	r3, r0
 8000e2c:	001a      	movs	r2, r3
 8000e2e:	2008      	movs	r0, #8
 8000e30:	183b      	adds	r3, r7, r0
 8000e32:	1c11      	adds	r1, r2, #0
 8000e34:	7019      	strb	r1, [r3, #0]
 8000e36:	0411      	lsls	r1, r2, #16
 8000e38:	0e09      	lsrs	r1, r1, #24
 8000e3a:	7059      	strb	r1, [r3, #1]
 8000e3c:	0212      	lsls	r2, r2, #8
 8000e3e:	0e12      	lsrs	r2, r2, #24
 8000e40:	709a      	strb	r2, [r3, #2]
 8000e42:	183b      	adds	r3, r7, r0
 8000e44:	2201      	movs	r2, #1
 8000e46:	569a      	ldrsb	r2, [r3, r2]
 8000e48:	210e      	movs	r1, #14
 8000e4a:	187b      	adds	r3, r7, r1
 8000e4c:	1112      	asrs	r2, r2, #4
 8000e4e:	701a      	strb	r2, [r3, #0]
	if(ds < 0)
 8000e50:	187b      	adds	r3, r7, r1
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b7f      	cmp	r3, #127	; 0x7f
 8000e56:	d914      	bls.n	8000e82 <ColorPicker_Exec+0x102>
	{
		if(s >= ds*-1)
 8000e58:	4b22      	ldr	r3, [pc, #136]	; (8000ee4 <ColorPicker_Exec+0x164>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	001a      	movs	r2, r3
 8000e5e:	187b      	adds	r3, r7, r1
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	b25b      	sxtb	r3, r3
 8000e64:	425b      	negs	r3, r3
 8000e66:	429a      	cmp	r2, r3
 8000e68:	db08      	blt.n	8000e7c <ColorPicker_Exec+0xfc>
		{
			s += ds;
 8000e6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ee4 <ColorPicker_Exec+0x164>)
 8000e6c:	781a      	ldrb	r2, [r3, #0]
 8000e6e:	187b      	adds	r3, r7, r1
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	18d3      	adds	r3, r2, r3
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	4b1b      	ldr	r3, [pc, #108]	; (8000ee4 <ColorPicker_Exec+0x164>)
 8000e78:	701a      	strb	r2, [r3, #0]
 8000e7a:	e002      	b.n	8000e82 <ColorPicker_Exec+0x102>
		}
		else
		{
			s = 0;
 8000e7c:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <ColorPicker_Exec+0x164>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	701a      	strb	r2, [r3, #0]
		}
	}
	if(ds > 0)
 8000e82:	210e      	movs	r1, #14
 8000e84:	187b      	adds	r3, r7, r1
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	b25b      	sxtb	r3, r3
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	dd15      	ble.n	8000eba <ColorPicker_Exec+0x13a>
	{
		if(255-s > ds)
 8000e8e:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <ColorPicker_Exec+0x164>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	001a      	movs	r2, r3
 8000e94:	23ff      	movs	r3, #255	; 0xff
 8000e96:	1a9a      	subs	r2, r3, r2
 8000e98:	187b      	adds	r3, r7, r1
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	b25b      	sxtb	r3, r3
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	dd08      	ble.n	8000eb4 <ColorPicker_Exec+0x134>
		{
			s += ds;
 8000ea2:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <ColorPicker_Exec+0x164>)
 8000ea4:	781a      	ldrb	r2, [r3, #0]
 8000ea6:	187b      	adds	r3, r7, r1
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	18d3      	adds	r3, r2, r3
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <ColorPicker_Exec+0x164>)
 8000eb0:	701a      	strb	r2, [r3, #0]
 8000eb2:	e002      	b.n	8000eba <ColorPicker_Exec+0x13a>
		}
		else
		{
			s = 255;
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <ColorPicker_Exec+0x164>)
 8000eb6:	22ff      	movs	r2, #255	; 0xff
 8000eb8:	701a      	strb	r2, [r3, #0]
		}
	}
	Neopixels_setColorHSV(h, s, 255);
 8000eba:	4b08      	ldr	r3, [pc, #32]	; (8000edc <ColorPicker_Exec+0x15c>)
 8000ebc:	8818      	ldrh	r0, [r3, #0]
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <ColorPicker_Exec+0x164>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	22ff      	movs	r2, #255	; 0xff
 8000ec4:	0019      	movs	r1, r3
 8000ec6:	f001 fa97 	bl	80023f8 <Neopixels_setColorHSV>
	Neopixels_setPattern(0xFFFF);
 8000eca:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <ColorPicker_Exec+0x168>)
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f001 fbbd 	bl	800264c <Neopixels_setPattern>
}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	b004      	add	sp, #16
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	2000003a 	.word	0x2000003a
 8000ee0:	000005ff 	.word	0x000005ff
 8000ee4:	20000000 	.word	0x20000000
 8000ee8:	0000ffff 	.word	0x0000ffff

08000eec <Level_Init>:

int16_t levelResult;
uint8_t led_pos;

void Level_Init()
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	AppMgmt_Timebase = 10;
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <Level_Init+0x28>)
 8000ef2:	220a      	movs	r2, #10
 8000ef4:	801a      	strh	r2, [r3, #0]
	Accelerometer_init();
 8000ef6:	f000 fd4d 	bl	8001994 <Accelerometer_init>
	Accelerometer_setDataWidth(ACC_DATAWIDTH_8);
 8000efa:	2000      	movs	r0, #0
 8000efc:	f000 fe32 	bl	8001b64 <Accelerometer_setDataWidth>
	Accelerometer_setRange(RANGE_2G);
 8000f00:	2000      	movs	r0, #0
 8000f02:	f000 fde7 	bl	8001ad4 <Accelerometer_setRange>
	Accelerometer_setDataRate(RATE_12Hz5);
 8000f06:	2005      	movs	r0, #5
 8000f08:	f000 fe07 	bl	8001b1a <Accelerometer_setDataRate>
}
 8000f0c:	46c0      	nop			; (mov r8, r8)
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	20000044 	.word	0x20000044

08000f18 <Level_Exec>:

void Level_Exec()
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
	levelResult = Accelerometer_read8().y;
 8000f1e:	f000 fe53 	bl	8001bc8 <Accelerometer_read8>
 8000f22:	0003      	movs	r3, r0
 8000f24:	001a      	movs	r2, r3
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	1c11      	adds	r1, r2, #0
 8000f2a:	7019      	strb	r1, [r3, #0]
 8000f2c:	0411      	lsls	r1, r2, #16
 8000f2e:	0e09      	lsrs	r1, r1, #24
 8000f30:	7059      	strb	r1, [r3, #1]
 8000f32:	0212      	lsls	r2, r2, #8
 8000f34:	0e12      	lsrs	r2, r2, #24
 8000f36:	709a      	strb	r2, [r3, #2]
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	785b      	ldrb	r3, [r3, #1]
 8000f3c:	b25b      	sxtb	r3, r3
 8000f3e:	b21a      	sxth	r2, r3
 8000f40:	4b1c      	ldr	r3, [pc, #112]	; (8000fb4 <Level_Exec+0x9c>)
 8000f42:	801a      	strh	r2, [r3, #0]
	if(levelResult == 0)
 8000f44:	4b1b      	ldr	r3, [pc, #108]	; (8000fb4 <Level_Exec+0x9c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	5e9b      	ldrsh	r3, [r3, r2]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d105      	bne.n	8000f5a <Level_Exec+0x42>
	{
		Neopixels_setPattern(0b0000000110000000);
 8000f4e:	23c0      	movs	r3, #192	; 0xc0
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	0018      	movs	r0, r3
 8000f54:	f001 fb7a 	bl	800264c <Neopixels_setPattern>
		return;
 8000f58:	e029      	b.n	8000fae <Level_Exec+0x96>
	}
	if(levelResult < 0)
 8000f5a:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <Level_Exec+0x9c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	5e9b      	ldrsh	r3, [r3, r2]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	da0f      	bge.n	8000f84 <Level_Exec+0x6c>
	{
		led_pos = levelResult + 8;
 8000f64:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <Level_Exec+0x9c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	5e9b      	ldrsh	r3, [r3, r2]
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	3308      	adds	r3, #8
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <Level_Exec+0xa0>)
 8000f72:	701a      	strb	r2, [r3, #0]
		//lower limit
		if(led_pos > 250)
 8000f74:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <Level_Exec+0xa0>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2bfa      	cmp	r3, #250	; 0xfa
 8000f7a:	d912      	bls.n	8000fa2 <Level_Exec+0x8a>
		{
			led_pos = 0;
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <Level_Exec+0xa0>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	701a      	strb	r2, [r3, #0]
 8000f82:	e00e      	b.n	8000fa2 <Level_Exec+0x8a>
		}
	}
	else
	{	//levelPos > 0
		led_pos = levelResult + 7;
 8000f84:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <Level_Exec+0x9c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	5e9b      	ldrsh	r3, [r3, r2]
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	3307      	adds	r3, #7
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <Level_Exec+0xa0>)
 8000f92:	701a      	strb	r2, [r3, #0]
		//upper limit
		if(led_pos > 15)
 8000f94:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <Level_Exec+0xa0>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b0f      	cmp	r3, #15
 8000f9a:	d902      	bls.n	8000fa2 <Level_Exec+0x8a>
		{
			led_pos = 15;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <Level_Exec+0xa0>)
 8000f9e:	220f      	movs	r2, #15
 8000fa0:	701a      	strb	r2, [r3, #0]
		}
	}
	Neopixels_Single(led_pos);
 8000fa2:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <Level_Exec+0xa0>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f001 fba6 	bl	80026f8 <Neopixels_Single>
	return;
 8000fac:	46c0      	nop			; (mov r8, r8)
}
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	b002      	add	sp, #8
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	2000004e 	.word	0x2000004e
 8000fb8:	20000050 	.word	0x20000050

08000fbc <NVIC_DisableIRQ>:

 The function disables a device-specific interrupt in the NVIC interrupt controller.

 \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	0002      	movs	r2, r0
 8000fc4:	1dfb      	adds	r3, r7, #7
 8000fc6:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (1 << ((uint32_t) (IRQn) & 0x1F));
 8000fc8:	1dfb      	adds	r3, r7, #7
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	001a      	movs	r2, r3
 8000fce:	231f      	movs	r3, #31
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	409a      	lsls	r2, r3
 8000fd6:	0013      	movs	r3, r2
 8000fd8:	4a03      	ldr	r2, [pc, #12]	; (8000fe8 <NVIC_DisableIRQ+0x2c>)
 8000fda:	0019      	movs	r1, r3
 8000fdc:	2380      	movs	r3, #128	; 0x80
 8000fde:	50d1      	str	r1, [r2, r3]
}
 8000fe0:	46c0      	nop			; (mov r8, r8)
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	b002      	add	sp, #8
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	e000e100 	.word	0xe000e100

08000fec <NVIC_ClearPendingIRQ>:

 The function clears the pending bit of an external interrupt.

 \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	0002      	movs	r2, r0
 8000ff4:	1dfb      	adds	r3, r7, #7
 8000ff6:	701a      	strb	r2, [r3, #0]
	NVIC->ICPR[0] = (1 << ((uint32_t) (IRQn) & 0x1F)); /* Clear pending interrupt */
 8000ff8:	1dfb      	adds	r3, r7, #7
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	001a      	movs	r2, r3
 8000ffe:	231f      	movs	r3, #31
 8001000:	4013      	ands	r3, r2
 8001002:	2201      	movs	r2, #1
 8001004:	409a      	lsls	r2, r3
 8001006:	0013      	movs	r3, r2
 8001008:	4a04      	ldr	r2, [pc, #16]	; (800101c <NVIC_ClearPendingIRQ+0x30>)
 800100a:	0019      	movs	r1, r3
 800100c:	23c0      	movs	r3, #192	; 0xc0
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	50d1      	str	r1, [r2, r3]
}
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	46bd      	mov	sp, r7
 8001016:	b002      	add	sp, #8
 8001018:	bd80      	pop	{r7, pc}
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	e000e100 	.word	0xe000e100

08001020 <PovD_Init>:
 * -> no more than 16x64 pixels!!
 * for full color rgb, the complete frame already takes 3kB!
 */

void PovD_Init()
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	AppMgmt_Timebase = 1;
 8001024:	4b08      	ldr	r3, [pc, #32]	; (8001048 <PovD_Init+0x28>)
 8001026:	2201      	movs	r2, #1
 8001028:	801a      	strh	r2, [r3, #0]
	NvMem_init();
 800102a:	f001 fc03 	bl	8002834 <NvMem_init>
	Accelerometer_init();
 800102e:	f000 fcb1 	bl	8001994 <Accelerometer_init>
	Neopixels_Off();
 8001032:	f001 fbc9 	bl	80027c8 <Neopixels_Off>
	displayInit();
 8001036:	f000 fe67 	bl	8001d08 <displayInit>

	power_hold(10);
 800103a:	200a      	movs	r0, #10
 800103c:	f001 fcda 	bl	80029f4 <power_hold>
}
 8001040:	46c0      	nop			; (mov r8, r8)
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	20000044 	.word	0x20000044

0800104c <PovD_Exec>:

void PovD_Exec()
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
			sprintf((char*)tempstring,"Error %i occured!\n",errorcode);
			USB_VCP_DataTx((uint8_t*)tempstring,0);
		}
		consoleExecute();
	}*/
}
 8001050:	46c0      	nop			; (mov r8, r8)
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <PovD_DeInit>:

void PovD_DeInit()
{
 8001056:	b580      	push	{r7, lr}
 8001058:	af00      	add	r7, sp, #0
	Accelerometer_deInit();
 800105a:	f000 fe2d 	bl	8001cb8 <Accelerometer_deInit>
	NVIC_DisableIRQ(TIM2_IRQn);
 800105e:	200f      	movs	r0, #15
 8001060:	f7ff ffac 	bl	8000fbc <NVIC_DisableIRQ>
	NVIC_ClearPendingIRQ(TIM2_IRQn);
 8001064:	200f      	movs	r0, #15
 8001066:	f7ff ffc1 	bl	8000fec <NVIC_ClearPendingIRQ>
	NVIC_DisableIRQ(TIM3_IRQn);
 800106a:	2010      	movs	r0, #16
 800106c:	f7ff ffa6 	bl	8000fbc <NVIC_DisableIRQ>
	NVIC_ClearPendingIRQ(TIM3_IRQn);
 8001070:	2010      	movs	r0, #16
 8001072:	f7ff ffbb 	bl	8000fec <NVIC_ClearPendingIRQ>

}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <Playground_Init>:
**  					This method is called only once at the very beginning
**
**===========================================================================
*/
void Playground_Init()
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
//-----------------don't chang this code-block!------------------
	AppMgmt_Timebase = LOOP_TIMEBASE;
 8001080:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <Playground_Init+0x38>)
 8001082:	2264      	movs	r2, #100	; 0x64
 8001084:	801a      	strh	r2, [r3, #0]
	Accelerometer_init();
 8001086:	f000 fc85 	bl	8001994 <Accelerometer_init>
	Accelerometer_setDataWidth(ACC_DATAWIDTH_8);
 800108a:	2000      	movs	r0, #0
 800108c:	f000 fd6a 	bl	8001b64 <Accelerometer_setDataWidth>
	Accelerometer_setDataRate(RATE_400Hz);
 8001090:	2001      	movs	r0, #1
 8001092:	f000 fd42 	bl	8001b1a <Accelerometer_setDataRate>
//--------------------------------------------------------------

	Neopixels_setColor(COLOR_RED);
 8001096:	2004      	movs	r0, #4
 8001098:	f001 f9f8 	bl	800248c <Neopixels_setColor>
	Neopixels_setBrightness(2);
 800109c:	2002      	movs	r0, #2
 800109e:	f001 fa19 	bl	80024d4 <Neopixels_setBrightness>
	pos = 0;
 80010a2:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <Playground_Init+0x3c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]
	step = 1;
 80010a8:	4b04      	ldr	r3, [pc, #16]	; (80010bc <Playground_Init+0x40>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	701a      	strb	r2, [r3, #0]
}
 80010ae:	46c0      	nop			; (mov r8, r8)
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000044 	.word	0x20000044
 80010b8:	2000003c 	.word	0x2000003c
 80010bc:	20000001 	.word	0x20000001

080010c0 <Playground_Exec>:
**  					- this can be changed with the method "SetTimebase()"
**
**===========================================================================
*/
void Playground_Exec()
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
	Neopixels_Single(pos);
 80010c4:	4b15      	ldr	r3, [pc, #84]	; (800111c <Playground_Exec+0x5c>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	0018      	movs	r0, r3
 80010ca:	f001 fb15 	bl	80026f8 <Neopixels_Single>
	pos += step;
 80010ce:	4b13      	ldr	r3, [pc, #76]	; (800111c <Playground_Exec+0x5c>)
 80010d0:	781a      	ldrb	r2, [r3, #0]
 80010d2:	4b13      	ldr	r3, [pc, #76]	; (8001120 <Playground_Exec+0x60>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	b25b      	sxtb	r3, r3
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	18d3      	adds	r3, r2, r3
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <Playground_Exec+0x5c>)
 80010e0:	701a      	strb	r2, [r3, #0]
	if(pos >= 15)
 80010e2:	4b0e      	ldr	r3, [pc, #56]	; (800111c <Playground_Exec+0x5c>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2b0e      	cmp	r3, #14
 80010e8:	d908      	bls.n	80010fc <Playground_Exec+0x3c>
	{
		step = -step;
 80010ea:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <Playground_Exec+0x60>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	b25b      	sxtb	r3, r3
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	425b      	negs	r3, r3
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	b25a      	sxtb	r2, r3
 80010f8:	4b09      	ldr	r3, [pc, #36]	; (8001120 <Playground_Exec+0x60>)
 80010fa:	701a      	strb	r2, [r3, #0]
	}
	if(pos == 0)
 80010fc:	4b07      	ldr	r3, [pc, #28]	; (800111c <Playground_Exec+0x5c>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d108      	bne.n	8001116 <Playground_Exec+0x56>
	{
		step = -step;
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <Playground_Exec+0x60>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	b25b      	sxtb	r3, r3
 800110a:	b2db      	uxtb	r3, r3
 800110c:	425b      	negs	r3, r3
 800110e:	b2db      	uxtb	r3, r3
 8001110:	b25a      	sxtb	r2, r3
 8001112:	4b03      	ldr	r3, [pc, #12]	; (8001120 <Playground_Exec+0x60>)
 8001114:	701a      	strb	r2, [r3, #0]
	}
}
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	2000003c 	.word	0x2000003c
 8001120:	20000001 	.word	0x20000001

08001124 <NVIC_SetPriority>:
 \note The priority cannot be set for every core interrupt.

 \param [in]      IRQn  Interrupt number.
 \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority) {
 8001124:	b590      	push	{r4, r7, lr}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	0002      	movs	r2, r0
 800112c:	6039      	str	r1, [r7, #0]
 800112e:	1dfb      	adds	r3, r7, #7
 8001130:	701a      	strb	r2, [r3, #0]
	if (IRQn < 0) {
 8001132:	1dfb      	adds	r3, r7, #7
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b7f      	cmp	r3, #127	; 0x7f
 8001138:	d932      	bls.n	80011a0 <NVIC_SetPriority+0x7c>
		SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)]
 800113a:	4a2f      	ldr	r2, [pc, #188]	; (80011f8 <NVIC_SetPriority+0xd4>)
 800113c:	1dfb      	adds	r3, r7, #7
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	0019      	movs	r1, r3
 8001142:	230f      	movs	r3, #15
 8001144:	400b      	ands	r3, r1
 8001146:	3b08      	subs	r3, #8
 8001148:	089b      	lsrs	r3, r3, #2
 800114a:	3306      	adds	r3, #6
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	18d3      	adds	r3, r2, r3
 8001150:	3304      	adds	r3, #4
 8001152:	681b      	ldr	r3, [r3, #0]
				& ~(0xFF << _BIT_SHIFT(IRQn)))
 8001154:	1dfa      	adds	r2, r7, #7
 8001156:	7812      	ldrb	r2, [r2, #0]
 8001158:	0011      	movs	r1, r2
 800115a:	2203      	movs	r2, #3
 800115c:	400a      	ands	r2, r1
 800115e:	00d2      	lsls	r2, r2, #3
 8001160:	21ff      	movs	r1, #255	; 0xff
 8001162:	4091      	lsls	r1, r2
 8001164:	000a      	movs	r2, r1
 8001166:	43d2      	mvns	r2, r2
 8001168:	401a      	ands	r2, r3
 800116a:	0011      	movs	r1, r2
				| (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	019b      	lsls	r3, r3, #6
 8001170:	22ff      	movs	r2, #255	; 0xff
 8001172:	401a      	ands	r2, r3
						<< _BIT_SHIFT(IRQn));
 8001174:	1dfb      	adds	r3, r7, #7
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	0018      	movs	r0, r3
 800117a:	2303      	movs	r3, #3
 800117c:	4003      	ands	r3, r0
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	409a      	lsls	r2, r3
		SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)]
 8001182:	481d      	ldr	r0, [pc, #116]	; (80011f8 <NVIC_SetPriority+0xd4>)
 8001184:	1dfb      	adds	r3, r7, #7
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	001c      	movs	r4, r3
 800118a:	230f      	movs	r3, #15
 800118c:	4023      	ands	r3, r4
 800118e:	3b08      	subs	r3, #8
 8001190:	089b      	lsrs	r3, r3, #2
				| (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF)
 8001192:	430a      	orrs	r2, r1
		SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)]
 8001194:	3306      	adds	r3, #6
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	18c3      	adds	r3, r0, r3
 800119a:	3304      	adds	r3, #4
 800119c:	601a      	str	r2, [r3, #0]
		NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)]
				& ~(0xFF << _BIT_SHIFT(IRQn)))
				| (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF)
						<< _BIT_SHIFT(IRQn));
	}
}
 800119e:	e027      	b.n	80011f0 <NVIC_SetPriority+0xcc>
		NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)]
 80011a0:	4a16      	ldr	r2, [pc, #88]	; (80011fc <NVIC_SetPriority+0xd8>)
 80011a2:	1dfb      	adds	r3, r7, #7
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	b25b      	sxtb	r3, r3
 80011a8:	089b      	lsrs	r3, r3, #2
 80011aa:	33c0      	adds	r3, #192	; 0xc0
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	589b      	ldr	r3, [r3, r2]
				& ~(0xFF << _BIT_SHIFT(IRQn)))
 80011b0:	1dfa      	adds	r2, r7, #7
 80011b2:	7812      	ldrb	r2, [r2, #0]
 80011b4:	0011      	movs	r1, r2
 80011b6:	2203      	movs	r2, #3
 80011b8:	400a      	ands	r2, r1
 80011ba:	00d2      	lsls	r2, r2, #3
 80011bc:	21ff      	movs	r1, #255	; 0xff
 80011be:	4091      	lsls	r1, r2
 80011c0:	000a      	movs	r2, r1
 80011c2:	43d2      	mvns	r2, r2
 80011c4:	401a      	ands	r2, r3
 80011c6:	0011      	movs	r1, r2
				| (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	019b      	lsls	r3, r3, #6
 80011cc:	22ff      	movs	r2, #255	; 0xff
 80011ce:	401a      	ands	r2, r3
						<< _BIT_SHIFT(IRQn));
 80011d0:	1dfb      	adds	r3, r7, #7
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	0018      	movs	r0, r3
 80011d6:	2303      	movs	r3, #3
 80011d8:	4003      	ands	r3, r0
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	409a      	lsls	r2, r3
		NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)]
 80011de:	4807      	ldr	r0, [pc, #28]	; (80011fc <NVIC_SetPriority+0xd8>)
 80011e0:	1dfb      	adds	r3, r7, #7
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	b25b      	sxtb	r3, r3
 80011e6:	089b      	lsrs	r3, r3, #2
				| (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF)
 80011e8:	430a      	orrs	r2, r1
		NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)]
 80011ea:	33c0      	adds	r3, #192	; 0xc0
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	501a      	str	r2, [r3, r0]
}
 80011f0:	46c0      	nop			; (mov r8, r8)
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b003      	add	sp, #12
 80011f6:	bd90      	pop	{r4, r7, pc}
 80011f8:	e000ed00 	.word	0xe000ed00
 80011fc:	e000e100 	.word	0xe000e100

08001200 <SysTick_Config>:
 \note     When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
 function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
 must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	1e5a      	subs	r2, r3, #1
 800120c:	2380      	movs	r3, #128	; 0x80
 800120e:	045b      	lsls	r3, r3, #17
 8001210:	429a      	cmp	r2, r3
 8001212:	d301      	bcc.n	8001218 <SysTick_Config+0x18>
		return (1); /* Reload value impossible */
 8001214:	2301      	movs	r3, #1
 8001216:	e010      	b.n	800123a <SysTick_Config+0x3a>

	SysTick->LOAD = ticks - 1; /* set reload register */
 8001218:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <SysTick_Config+0x44>)
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	3a01      	subs	r2, #1
 800121e:	605a      	str	r2, [r3, #4]
	NVIC_SetPriority(SysTick_IRQn, (1 << __NVIC_PRIO_BITS) - 1); /* set Priority for Systick Interrupt */
 8001220:	2301      	movs	r3, #1
 8001222:	425b      	negs	r3, r3
 8001224:	2103      	movs	r1, #3
 8001226:	0018      	movs	r0, r3
 8001228:	f7ff ff7c 	bl	8001124 <NVIC_SetPriority>
	SysTick->VAL = 0; /* Load the SysTick Counter Value */
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <SysTick_Config+0x44>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 8001232:	4b04      	ldr	r3, [pc, #16]	; (8001244 <SysTick_Config+0x44>)
 8001234:	2207      	movs	r2, #7
 8001236:	601a      	str	r2, [r3, #0]
	SysTick_CTRL_TICKINT_Msk |
	SysTick_CTRL_ENABLE_Msk; /* Enable SysTick IRQ and SysTick Timer */
	return (0); /* Function successful */
 8001238:	2300      	movs	r3, #0
}
 800123a:	0018      	movs	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	b002      	add	sp, #8
 8001240:	bd80      	pop	{r7, pc}
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	e000e010 	.word	0xe000e010

08001248 <SysTick_Handler>:
**	clearing of the flag has to be done in the application code!
**
**===========================================================================
*/
void SysTick_Handler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	if(delayTimer)
 800124c:	4b2a      	ldr	r3, [pc, #168]	; (80012f8 <SysTick_Handler+0xb0>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d004      	beq.n	800125e <SysTick_Handler+0x16>
	{
		delayTimer--;
 8001254:	4b28      	ldr	r3, [pc, #160]	; (80012f8 <SysTick_Handler+0xb0>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	1e5a      	subs	r2, r3, #1
 800125a:	4b27      	ldr	r3, [pc, #156]	; (80012f8 <SysTick_Handler+0xb0>)
 800125c:	601a      	str	r2, [r3, #0]
	}
	timer_ms--;
 800125e:	4b27      	ldr	r3, [pc, #156]	; (80012fc <SysTick_Handler+0xb4>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	3b01      	subs	r3, #1
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4b25      	ldr	r3, [pc, #148]	; (80012fc <SysTick_Handler+0xb4>)
 8001268:	701a      	strb	r2, [r3, #0]
	timerFlags |= TIMER_FLAG_1MS;
 800126a:	4b25      	ldr	r3, [pc, #148]	; (8001300 <SysTick_Handler+0xb8>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	2201      	movs	r2, #1
 8001272:	4313      	orrs	r3, r2
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4b22      	ldr	r3, [pc, #136]	; (8001300 <SysTick_Handler+0xb8>)
 8001278:	701a      	strb	r2, [r3, #0]

	//10ms timebase
	if(!timer_ms)
 800127a:	4b20      	ldr	r3, [pc, #128]	; (80012fc <SysTick_Handler+0xb4>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d110      	bne.n	80012a4 <SysTick_Handler+0x5c>
	{
		timerFlags |= TIMER_FLAG_10MS;
 8001282:	4b1f      	ldr	r3, [pc, #124]	; (8001300 <SysTick_Handler+0xb8>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	b2db      	uxtb	r3, r3
 8001288:	2202      	movs	r2, #2
 800128a:	4313      	orrs	r3, r2
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4b1c      	ldr	r3, [pc, #112]	; (8001300 <SysTick_Handler+0xb8>)
 8001290:	701a      	strb	r2, [r3, #0]
		timer_ms = 10;
 8001292:	4b1a      	ldr	r3, [pc, #104]	; (80012fc <SysTick_Handler+0xb4>)
 8001294:	220a      	movs	r2, #10
 8001296:	701a      	strb	r2, [r3, #0]
		timer_10ms--;
 8001298:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <SysTick_Handler+0xbc>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	3b01      	subs	r3, #1
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	4b18      	ldr	r3, [pc, #96]	; (8001304 <SysTick_Handler+0xbc>)
 80012a2:	701a      	strb	r2, [r3, #0]
	}
	//100ms timebase
	if(!timer_10ms)
 80012a4:	4b17      	ldr	r3, [pc, #92]	; (8001304 <SysTick_Handler+0xbc>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d10a      	bne.n	80012c2 <SysTick_Handler+0x7a>
	{
		timerFlags |= TIMER_FLAG_100MS;
 80012ac:	4b14      	ldr	r3, [pc, #80]	; (8001300 <SysTick_Handler+0xb8>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2204      	movs	r2, #4
 80012b4:	4313      	orrs	r3, r2
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <SysTick_Handler+0xb8>)
 80012ba:	701a      	strb	r2, [r3, #0]
		timer_10ms = 10;
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <SysTick_Handler+0xbc>)
 80012be:	220a      	movs	r2, #10
 80012c0:	701a      	strb	r2, [r3, #0]
	}
	//application timer
	if(appTimer)
 80012c2:	4b11      	ldr	r3, [pc, #68]	; (8001308 <SysTick_Handler+0xc0>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d005      	beq.n	80012d6 <SysTick_Handler+0x8e>
	{
		appTimer--;
 80012ca:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <SysTick_Handler+0xc0>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	1e5a      	subs	r2, r3, #1
 80012d0:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <SysTick_Handler+0xc0>)
 80012d2:	601a      	str	r2, [r3, #0]
	else
	{
		timerFlags |= TIMER_FLAG_APP;
		appTimer = AppMgmt_Timebase;
	}
}
 80012d4:	e00c      	b.n	80012f0 <SysTick_Handler+0xa8>
		timerFlags |= TIMER_FLAG_APP;
 80012d6:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <SysTick_Handler+0xb8>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	2208      	movs	r2, #8
 80012de:	4313      	orrs	r3, r2
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	4b07      	ldr	r3, [pc, #28]	; (8001300 <SysTick_Handler+0xb8>)
 80012e4:	701a      	strb	r2, [r3, #0]
		appTimer = AppMgmt_Timebase;
 80012e6:	4b09      	ldr	r3, [pc, #36]	; (800130c <SysTick_Handler+0xc4>)
 80012e8:	881b      	ldrh	r3, [r3, #0]
 80012ea:	001a      	movs	r2, r3
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <SysTick_Handler+0xc0>)
 80012ee:	601a      	str	r2, [r3, #0]
}
 80012f0:	46c0      	nop			; (mov r8, r8)
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	46c0      	nop			; (mov r8, r8)
 80012f8:	20000054 	.word	0x20000054
 80012fc:	20000002 	.word	0x20000002
 8001300:	2000003d 	.word	0x2000003d
 8001304:	20000003 	.word	0x20000003
 8001308:	20000004 	.word	0x20000004
 800130c:	20000044 	.word	0x20000044

08001310 <delay>:
/**
 * blocking delay loop
 * @param ticks: number of ticks (ms) to wait
 */
void delay(uint32_t ticks)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	delayTimer = ticks;
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <delay+0x24>)
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	601a      	str	r2, [r3, #0]
	while(delayTimer > 0);
 800131e:	46c0      	nop			; (mov r8, r8)
 8001320:	4b04      	ldr	r3, [pc, #16]	; (8001334 <delay+0x24>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d1fb      	bne.n	8001320 <delay+0x10>
}
 8001328:	46c0      	nop			; (mov r8, r8)
 800132a:	46c0      	nop			; (mov r8, r8)
 800132c:	46bd      	mov	sp, r7
 800132e:	b002      	add	sp, #8
 8001330:	bd80      	pop	{r7, pc}
 8001332:	46c0      	nop			; (mov r8, r8)
 8001334:	20000054 	.word	0x20000054

08001338 <main>:

int main(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
	SystemInit();
 800133c:	f000 f89c 	bl	8001478 <SystemInit>
	SystemCoreClockUpdate();
 8001340:	f000 f8e2 	bl	8001508 <SystemCoreClockUpdate>
	//the systick timer runs with 6MHz
	//config the timer for 1ms interval
	SysTick_Config(SystemCoreClock / 8 / 1000);
 8001344:	4b32      	ldr	r3, [pc, #200]	; (8001410 <main+0xd8>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	22fa      	movs	r2, #250	; 0xfa
 800134a:	0151      	lsls	r1, r2, #5
 800134c:	0018      	movs	r0, r3
 800134e:	f7fe fedb 	bl	8000108 <__udivsi3>
 8001352:	0003      	movs	r3, r0
 8001354:	0018      	movs	r0, r3
 8001356:	f7ff ff53 	bl	8001200 <SysTick_Config>
	//the systick_config just set the priority of the systick to 15  or so - very low!
	//set it back to 0
	NVIC_SetPriority(SysTick_IRQn,0);
 800135a:	2301      	movs	r3, #1
 800135c:	425b      	negs	r3, r3
 800135e:	2100      	movs	r1, #0
 8001360:	0018      	movs	r0, r3
 8001362:	f7ff fedf 	bl	8001124 <NVIC_SetPriority>
	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8);
 8001366:	2305      	movs	r3, #5
 8001368:	425b      	negs	r3, r3
 800136a:	0018      	movs	r0, r3
 800136c:	f7ff fb82 	bl	8000a74 <SysTick_CLKSourceConfig>

	power_init();
 8001370:	f001 fada 	bl	8002928 <power_init>
	Neopixels_init();	//this includes a quick led-test
 8001374:	f000 ffc6 	bl	8002304 <Neopixels_init>

	if(power_UsbPresent()) {
 8001378:	f001 fb2e 	bl	80029d8 <power_UsbPresent>
//		winusb_init_usbd();
//		usb_device_connect();
//		consoleInit();
	}
	//init application (run once)
	AppMgmt_AppInit();
 800137c:	f7ff fc5c 	bl	8000c38 <AppMgmt_AppInit>
//		if(power_UsbPresent()){
//			USB_Handler();
//		}

		//run application (called continously until button is held long enough to switch to another one or power is switched off)
		if(timerFlags & TIMER_FLAG_APP)
 8001380:	4b24      	ldr	r3, [pc, #144]	; (8001414 <main+0xdc>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	001a      	movs	r2, r3
 8001388:	2308      	movs	r3, #8
 800138a:	4013      	ands	r3, r2
 800138c:	d009      	beq.n	80013a2 <main+0x6a>
		{
			timerFlags &= ~TIMER_FLAG_APP;
 800138e:	4b21      	ldr	r3, [pc, #132]	; (8001414 <main+0xdc>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	b2db      	uxtb	r3, r3
 8001394:	2208      	movs	r2, #8
 8001396:	4393      	bics	r3, r2
 8001398:	b2da      	uxtb	r2, r3
 800139a:	4b1e      	ldr	r3, [pc, #120]	; (8001414 <main+0xdc>)
 800139c:	701a      	strb	r2, [r3, #0]
			AppMgmt_AppExec();
 800139e:	f7ff fc77 	bl	8000c90 <AppMgmt_AppExec>
		}
		if(timerFlags & TIMER_FLAG_100MS)
 80013a2:	4b1c      	ldr	r3, [pc, #112]	; (8001414 <main+0xdc>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	001a      	movs	r2, r3
 80013aa:	2304      	movs	r3, #4
 80013ac:	4013      	ands	r3, r2
 80013ae:	d0e7      	beq.n	8001380 <main+0x48>
		{
			timerFlags &= ~TIMER_FLAG_100MS;
 80013b0:	4b18      	ldr	r3, [pc, #96]	; (8001414 <main+0xdc>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	2204      	movs	r2, #4
 80013b8:	4393      	bics	r3, r2
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	4b15      	ldr	r3, [pc, #84]	; (8001414 <main+0xdc>)
 80013be:	701a      	strb	r2, [r3, #0]
			power_exec();
 80013c0:	f001 fb38 	bl	8002a34 <power_exec>

			if(power_flags & POWER_FLAG_SW_HOLD)
 80013c4:	4b14      	ldr	r3, [pc, #80]	; (8001418 <main+0xe0>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	001a      	movs	r2, r3
 80013ca:	2304      	movs	r3, #4
 80013cc:	4013      	ands	r3, r2
 80013ce:	d0d7      	beq.n	8001380 <main+0x48>
			{
				if(power_buttonHoldTime >= 5)
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <main+0xe4>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b04      	cmp	r3, #4
 80013d6:	d904      	bls.n	80013e2 <main+0xaa>
				{
					AppMgmt_CycleApps();
 80013d8:	f7ff fc84 	bl	8000ce4 <AppMgmt_CycleApps>
					power_buttonHoldTime = 0;
 80013dc:	4b0f      	ldr	r3, [pc, #60]	; (800141c <main+0xe4>)
 80013de:	2200      	movs	r2, #0
 80013e0:	701a      	strb	r2, [r3, #0]
				}
				//only if the swich is released after holding it for at least 0.5s
				if(power_flags & POWER_FLAG_SW_RELEASE)
 80013e2:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <main+0xe0>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	001a      	movs	r2, r3
 80013e8:	2301      	movs	r3, #1
 80013ea:	4013      	ands	r3, r2
 80013ec:	d0c8      	beq.n	8001380 <main+0x48>
				{
					power_flags &= ~POWER_FLAG_SW_HOLD;
 80013ee:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <main+0xe0>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2204      	movs	r2, #4
 80013f4:	4393      	bics	r3, r2
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	4b07      	ldr	r3, [pc, #28]	; (8001418 <main+0xe0>)
 80013fa:	701a      	strb	r2, [r3, #0]
					power_flags &= ~POWER_FLAG_SW_RELEASE;
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <main+0xe0>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2201      	movs	r2, #1
 8001402:	4393      	bics	r3, r2
 8001404:	b2da      	uxtb	r2, r3
 8001406:	4b04      	ldr	r3, [pc, #16]	; (8001418 <main+0xe0>)
 8001408:	701a      	strb	r2, [r3, #0]
					AppMgmt_LoadApp();
 800140a:	f7ff fc93 	bl	8000d34 <AppMgmt_LoadApp>
		if(timerFlags & TIMER_FLAG_APP)
 800140e:	e7b7      	b.n	8001380 <main+0x48>
 8001410:	20000008 	.word	0x20000008
 8001414:	2000003d 	.word	0x2000003d
 8001418:	2000004c 	.word	0x2000004c
 800141c:	2000004d 	.word	0x2000004d

08001420 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
}
 8001424:	46c0      	nop			; (mov r8, r8)
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HardFault_Handler>:
  * @param  None
  * @retval None
  */

void HardFault_Handler(void)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800142e:	e7fe      	b.n	800142e <HardFault_Handler+0x4>

08001430 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
}
 8001434:	46c0      	nop			; (mov r8, r8)
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	af00      	add	r7, sp, #0
}
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <USB_IRQHandler>:
  * @brief  This function handles USB FS Handler.
  * @param  None
  * @retval None
  */
void USB_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
	//USB_Istr();
}
 8001448:	46c0      	nop			; (mov r8, r8)
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	af00      	add	r7, sp, #0
	displayFindReturnPoint();
 8001452:	f000 fe65 	bl	8002120 <displayFindReturnPoint>
}
 8001456:	46c0      	nop			; (mov r8, r8)
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
	displayEndOfLocktime();
 8001460:	f000 fdee 	bl	8002040 <displayEndOfLocktime>
}
 8001464:	46c0      	nop			; (mov r8, r8)
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	af00      	add	r7, sp, #0
	displaySendLine();
 800146e:	f000 fd7d 	bl	8001f6c <displaySendLine>
}
 8001472:	46c0      	nop			; (mov r8, r8)
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800147c:	4b1b      	ldr	r3, [pc, #108]	; (80014ec <SystemInit+0x74>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <SystemInit+0x74>)
 8001482:	2101      	movs	r1, #1
 8001484:	430a      	orrs	r2, r1
 8001486:	601a      	str	r2, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[3:0] bits MCOPRE[2:0] */
  RCC->CFGR &= (uint32_t)0x80FFB80C;
 8001488:	4b18      	ldr	r3, [pc, #96]	; (80014ec <SystemInit+0x74>)
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	4b17      	ldr	r3, [pc, #92]	; (80014ec <SystemInit+0x74>)
 800148e:	4918      	ldr	r1, [pc, #96]	; (80014f0 <SystemInit+0x78>)
 8001490:	400a      	ands	r2, r1
 8001492:	605a      	str	r2, [r3, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001494:	4b15      	ldr	r3, [pc, #84]	; (80014ec <SystemInit+0x74>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4b14      	ldr	r3, [pc, #80]	; (80014ec <SystemInit+0x74>)
 800149a:	4916      	ldr	r1, [pc, #88]	; (80014f4 <SystemInit+0x7c>)
 800149c:	400a      	ands	r2, r1
 800149e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <SystemInit+0x74>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4b11      	ldr	r3, [pc, #68]	; (80014ec <SystemInit+0x74>)
 80014a6:	4914      	ldr	r1, [pc, #80]	; (80014f8 <SystemInit+0x80>)
 80014a8:	400a      	ands	r2, r1
 80014aa:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC07FFF;
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <SystemInit+0x74>)
 80014ae:	685a      	ldr	r2, [r3, #4]
 80014b0:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <SystemInit+0x74>)
 80014b2:	4912      	ldr	r1, [pc, #72]	; (80014fc <SystemInit+0x84>)
 80014b4:	400a      	ands	r2, r1
 80014b6:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <SystemInit+0x74>)
 80014ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014bc:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <SystemInit+0x74>)
 80014be:	210f      	movs	r1, #15
 80014c0:	438a      	bics	r2, r1
 80014c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 80014c4:	4b09      	ldr	r3, [pc, #36]	; (80014ec <SystemInit+0x74>)
 80014c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <SystemInit+0x74>)
 80014ca:	490d      	ldr	r1, [pc, #52]	; (8001500 <SystemInit+0x88>)
 80014cc:	400a      	ands	r2, r1
 80014ce:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset HSI14 & HSI48 bit */
  RCC->CR2 &= (uint32_t)0xFFFEFFFE;
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <SystemInit+0x74>)
 80014d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014d4:	4b05      	ldr	r3, [pc, #20]	; (80014ec <SystemInit+0x74>)
 80014d6:	490b      	ldr	r1, [pc, #44]	; (8001504 <SystemInit+0x8c>)
 80014d8:	400a      	ands	r2, r1
 80014da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80014dc:	4b03      	ldr	r3, [pc, #12]	; (80014ec <SystemInit+0x74>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]

  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 80014e2:	f000 f893 	bl	800160c <SetSysClock>
}
 80014e6:	46c0      	nop			; (mov r8, r8)
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40021000 	.word	0x40021000
 80014f0:	80ffb80c 	.word	0x80ffb80c
 80014f4:	fef6ffff 	.word	0xfef6ffff
 80014f8:	fffbffff 	.word	0xfffbffff
 80014fc:	ffc07fff 	.word	0xffc07fff
 8001500:	fffffeac 	.word	0xfffffeac
 8001504:	fffefffe 	.word	0xfffefffe

08001508 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	2300      	movs	r3, #0
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	2300      	movs	r3, #0
 8001518:	607b      	str	r3, [r7, #4]
 800151a:	2300      	movs	r3, #0
 800151c:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800151e:	4b36      	ldr	r3, [pc, #216]	; (80015f8 <SystemCoreClockUpdate+0xf0>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	220c      	movs	r2, #12
 8001524:	4013      	ands	r3, r2
 8001526:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2b0c      	cmp	r3, #12
 800152c:	d048      	beq.n	80015c0 <SystemCoreClockUpdate+0xb8>
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2b0c      	cmp	r3, #12
 8001532:	d849      	bhi.n	80015c8 <SystemCoreClockUpdate+0xc0>
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2b08      	cmp	r3, #8
 8001538:	d011      	beq.n	800155e <SystemCoreClockUpdate+0x56>
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2b08      	cmp	r3, #8
 800153e:	d843      	bhi.n	80015c8 <SystemCoreClockUpdate+0xc0>
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <SystemCoreClockUpdate+0x46>
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2b04      	cmp	r3, #4
 800154a:	d004      	beq.n	8001556 <SystemCoreClockUpdate+0x4e>
 800154c:	e03c      	b.n	80015c8 <SystemCoreClockUpdate+0xc0>
  {
  case 0x00:  /* HSI used as system clock */
    SystemCoreClock = HSI_VALUE;
 800154e:	4b2b      	ldr	r3, [pc, #172]	; (80015fc <SystemCoreClockUpdate+0xf4>)
 8001550:	4a2b      	ldr	r2, [pc, #172]	; (8001600 <SystemCoreClockUpdate+0xf8>)
 8001552:	601a      	str	r2, [r3, #0]
    break;
 8001554:	e03c      	b.n	80015d0 <SystemCoreClockUpdate+0xc8>
  case 0x04:  /* HSE used as system clock */
    SystemCoreClock = HSE_VALUE;
 8001556:	4b29      	ldr	r3, [pc, #164]	; (80015fc <SystemCoreClockUpdate+0xf4>)
 8001558:	4a29      	ldr	r2, [pc, #164]	; (8001600 <SystemCoreClockUpdate+0xf8>)
 800155a:	601a      	str	r2, [r3, #0]
    break;
 800155c:	e038      	b.n	80015d0 <SystemCoreClockUpdate+0xc8>
  case 0x08:  /* PLL used as system clock */
    /* Get PLL clock source and multiplication factor ----------------------*/
    pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800155e:	4b26      	ldr	r3, [pc, #152]	; (80015f8 <SystemCoreClockUpdate+0xf0>)
 8001560:	685a      	ldr	r2, [r3, #4]
 8001562:	23f0      	movs	r3, #240	; 0xf0
 8001564:	039b      	lsls	r3, r3, #14
 8001566:	4013      	ands	r3, r2
 8001568:	60bb      	str	r3, [r7, #8]
    pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800156a:	4b23      	ldr	r3, [pc, #140]	; (80015f8 <SystemCoreClockUpdate+0xf0>)
 800156c:	685a      	ldr	r2, [r3, #4]
 800156e:	23c0      	movs	r3, #192	; 0xc0
 8001570:	025b      	lsls	r3, r3, #9
 8001572:	4013      	ands	r3, r2
 8001574:	607b      	str	r3, [r7, #4]
    pllmull = ( pllmull >> 18) + 2;
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	0c9b      	lsrs	r3, r3, #18
 800157a:	3302      	adds	r3, #2
 800157c:	60bb      	str	r3, [r7, #8]

    if (pllsource == 0x00)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d10c      	bne.n	800159e <SystemCoreClockUpdate+0x96>
    {
      /* HSI oscillator clock divided by 2 selected as PLL clock entry */
      SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8001584:	68b9      	ldr	r1, [r7, #8]
 8001586:	000a      	movs	r2, r1
 8001588:	0152      	lsls	r2, r2, #5
 800158a:	1a52      	subs	r2, r2, r1
 800158c:	0193      	lsls	r3, r2, #6
 800158e:	1a9b      	subs	r3, r3, r2
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	185b      	adds	r3, r3, r1
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	001a      	movs	r2, r3
 8001598:	4b18      	ldr	r3, [pc, #96]	; (80015fc <SystemCoreClockUpdate+0xf4>)
 800159a:	601a      	str	r2, [r3, #0]
    {
      prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
      /* HSE oscillator clock selected as PREDIV1 clock entry */
      SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
    }
    break;
 800159c:	e018      	b.n	80015d0 <SystemCoreClockUpdate+0xc8>
      prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 800159e:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <SystemCoreClockUpdate+0xf0>)
 80015a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a2:	220f      	movs	r2, #15
 80015a4:	4013      	ands	r3, r2
 80015a6:	3301      	adds	r3, #1
 80015a8:	603b      	str	r3, [r7, #0]
      SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 80015aa:	6839      	ldr	r1, [r7, #0]
 80015ac:	4814      	ldr	r0, [pc, #80]	; (8001600 <SystemCoreClockUpdate+0xf8>)
 80015ae:	f7fe fdab 	bl	8000108 <__udivsi3>
 80015b2:	0003      	movs	r3, r0
 80015b4:	001a      	movs	r2, r3
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	435a      	muls	r2, r3
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <SystemCoreClockUpdate+0xf4>)
 80015bc:	601a      	str	r2, [r3, #0]
    break;
 80015be:	e007      	b.n	80015d0 <SystemCoreClockUpdate+0xc8>
  case 0x0C:  /* HSI48 used as system clock */
    SystemCoreClock = HSI48_VALUE;
 80015c0:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <SystemCoreClockUpdate+0xf4>)
 80015c2:	4a10      	ldr	r2, [pc, #64]	; (8001604 <SystemCoreClockUpdate+0xfc>)
 80015c4:	601a      	str	r2, [r3, #0]
    break;
 80015c6:	e003      	b.n	80015d0 <SystemCoreClockUpdate+0xc8>
  default: /* HSI used as system clock */
    SystemCoreClock = HSI_VALUE;
 80015c8:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <SystemCoreClockUpdate+0xf4>)
 80015ca:	4a0d      	ldr	r2, [pc, #52]	; (8001600 <SystemCoreClockUpdate+0xf8>)
 80015cc:	601a      	str	r2, [r3, #0]
    break;
 80015ce:	46c0      	nop			; (mov r8, r8)

  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80015d0:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <SystemCoreClockUpdate+0xf0>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	091b      	lsrs	r3, r3, #4
 80015d6:	220f      	movs	r2, #15
 80015d8:	4013      	ands	r3, r2
 80015da:	4a0b      	ldr	r2, [pc, #44]	; (8001608 <SystemCoreClockUpdate+0x100>)
 80015dc:	5cd3      	ldrb	r3, [r2, r3]
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <SystemCoreClockUpdate+0xf4>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	40da      	lsrs	r2, r3
 80015ea:	4b04      	ldr	r3, [pc, #16]	; (80015fc <SystemCoreClockUpdate+0xf4>)
 80015ec:	601a      	str	r2, [r3, #0]
}
 80015ee:	46c0      	nop			; (mov r8, r8)
 80015f0:	46bd      	mov	sp, r7
 80015f2:	b004      	add	sp, #16
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	46c0      	nop			; (mov r8, r8)
 80015f8:	40021000 	.word	0x40021000
 80015fc:	20000008 	.word	0x20000008
 8001600:	007a1200 	.word	0x007a1200
 8001604:	02dc6c00 	.word	0x02dc6c00
 8001608:	2000000c 	.word	0x2000000c

0800160c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
   /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
    /* At this stage the HSI is already enabled */
 
    /* Enable Prefetch Buffer and set Flash Latency */
    FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8001610:	4b13      	ldr	r3, [pc, #76]	; (8001660 <SetSysClock+0x54>)
 8001612:	2211      	movs	r2, #17
 8001614:	601a      	str	r2, [r3, #0]
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001616:	4a13      	ldr	r2, [pc, #76]	; (8001664 <SetSysClock+0x58>)
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <SetSysClock+0x58>)
 800161a:	6852      	ldr	r2, [r2, #4]
 800161c:	605a      	str	r2, [r3, #4]

    /* PCLK = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 800161e:	4a11      	ldr	r2, [pc, #68]	; (8001664 <SetSysClock+0x58>)
 8001620:	4b10      	ldr	r3, [pc, #64]	; (8001664 <SetSysClock+0x58>)
 8001622:	6852      	ldr	r2, [r2, #4]
 8001624:	605a      	str	r2, [r3, #4]

   /* Enable HSI48 */
    RCC->CR2 |= RCC_CR2_HSI48ON;
 8001626:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <SetSysClock+0x58>)
 8001628:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800162a:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <SetSysClock+0x58>)
 800162c:	2180      	movs	r1, #128	; 0x80
 800162e:	0249      	lsls	r1, r1, #9
 8001630:	430a      	orrs	r2, r1
 8001632:	635a      	str	r2, [r3, #52]	; 0x34
  /* Wait till HSI48RDY is set */
    while((RCC->CR2 & RCC_CR2_HSI48RDY) == 0)
 8001634:	46c0      	nop			; (mov r8, r8)
 8001636:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <SetSysClock+0x58>)
 8001638:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800163a:	2380      	movs	r3, #128	; 0x80
 800163c:	029b      	lsls	r3, r3, #10
 800163e:	4013      	ands	r3, r2
 8001640:	d0f9      	beq.n	8001636 <SetSysClock+0x2a>
    { }
  /* Select HSI48 as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001642:	4b08      	ldr	r3, [pc, #32]	; (8001664 <SetSysClock+0x58>)
 8001644:	685a      	ldr	r2, [r3, #4]
 8001646:	4b07      	ldr	r3, [pc, #28]	; (8001664 <SetSysClock+0x58>)
 8001648:	2103      	movs	r1, #3
 800164a:	438a      	bics	r2, r1
 800164c:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_HSI48;
 800164e:	4b05      	ldr	r3, [pc, #20]	; (8001664 <SetSysClock+0x58>)
 8001650:	685a      	ldr	r2, [r3, #4]
 8001652:	4b04      	ldr	r3, [pc, #16]	; (8001664 <SetSysClock+0x58>)
 8001654:	2103      	movs	r1, #3
 8001656:	430a      	orrs	r2, r1
 8001658:	605a      	str	r2, [r3, #4]

}
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40022000 	.word	0x40022000
 8001664:	40021000 	.word	0x40021000

08001668 <NVIC_DisableIRQ>:
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	0002      	movs	r2, r0
 8001670:	1dfb      	adds	r3, r7, #7
 8001672:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (1 << ((uint32_t) (IRQn) & 0x1F));
 8001674:	1dfb      	adds	r3, r7, #7
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	001a      	movs	r2, r3
 800167a:	231f      	movs	r3, #31
 800167c:	4013      	ands	r3, r2
 800167e:	2201      	movs	r2, #1
 8001680:	409a      	lsls	r2, r3
 8001682:	0013      	movs	r3, r2
 8001684:	4a03      	ldr	r2, [pc, #12]	; (8001694 <NVIC_DisableIRQ+0x2c>)
 8001686:	0019      	movs	r1, r3
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	50d1      	str	r1, [r2, r3]
}
 800168c:	46c0      	nop			; (mov r8, r8)
 800168e:	46bd      	mov	sp, r7
 8001690:	b002      	add	sp, #8
 8001692:	bd80      	pop	{r7, pc}
 8001694:	e000e100 	.word	0xe000e100

08001698 <I2C_RdReg>:

/**
 * Origin of I2C_RdReg and I2C_WrReg:
 * https://hsel.co.uk/2014/08/13/stm32f0-mini-tutorial-using-the-i2c-peripheral-to-communicate-with-a-hmc5883l-digital-compass-ic/
 */
uint8_t I2C_RdReg(uint8_t Reg, uint8_t *Data, uint8_t DCnt) {
 8001698:	b590      	push	{r4, r7, lr}
 800169a:	b087      	sub	sp, #28
 800169c:	af02      	add	r7, sp, #8
 800169e:	6039      	str	r1, [r7, #0]
 80016a0:	0011      	movs	r1, r2
 80016a2:	1dfb      	adds	r3, r7, #7
 80016a4:	1c02      	adds	r2, r0, #0
 80016a6:	701a      	strb	r2, [r3, #0]
 80016a8:	1dbb      	adds	r3, r7, #6
 80016aa:	1c0a      	adds	r2, r1, #0
 80016ac:	701a      	strb	r2, [r3, #0]
	uint8_t Cnt, SingleData = 0;
 80016ae:	230e      	movs	r3, #14
 80016b0:	18fb      	adds	r3, r7, r3
 80016b2:	2200      	movs	r2, #0
 80016b4:	701a      	strb	r2, [r3, #0]

	//Wait until I2C isn't busy
	//TODO: I2C connection breaks sometimes
	while (I2C_GetFlagStatus(I2C_ACC, I2C_FLAG_BUSY) == SET)
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	021b      	lsls	r3, r3, #8
 80016bc:	4a3c      	ldr	r2, [pc, #240]	; (80017b0 <I2C_RdReg+0x118>)
 80016be:	0019      	movs	r1, r3
 80016c0:	0010      	movs	r0, r2
 80016c2:	f7ff f951 	bl	8000968 <I2C_GetFlagStatus>
 80016c6:	0003      	movs	r3, r0
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d0f5      	beq.n	80016b8 <I2C_RdReg+0x20>
		;

	//first communication (try reading the status register)
	/* Configure slave address, nbytes, reload, end mode and start or stop generation */
	I2C_TransferHandling(I2C_ACC, ADDR_ACC, 1, I2C_SoftEnd_Mode,
 80016cc:	4838      	ldr	r0, [pc, #224]	; (80017b0 <I2C_RdReg+0x118>)
 80016ce:	2380      	movs	r3, #128	; 0x80
 80016d0:	019b      	lsls	r3, r3, #6
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	2300      	movs	r3, #0
 80016d6:	2201      	movs	r2, #1
 80016d8:	213a      	movs	r1, #58	; 0x3a
 80016da:	f7ff f8f7 	bl	80008cc <I2C_TransferHandling>
	I2C_Generate_Start_Write);
	//Ensure the transmit interrupted flag is set
	while (I2C_GetFlagStatus(I2C_ACC, I2C_FLAG_TXIS) == RESET)
 80016de:	46c0      	nop			; (mov r8, r8)
 80016e0:	4b33      	ldr	r3, [pc, #204]	; (80017b0 <I2C_RdReg+0x118>)
 80016e2:	2102      	movs	r1, #2
 80016e4:	0018      	movs	r0, r3
 80016e6:	f7ff f93f 	bl	8000968 <I2C_GetFlagStatus>
 80016ea:	1e03      	subs	r3, r0, #0
 80016ec:	d0f8      	beq.n	80016e0 <I2C_RdReg+0x48>
		;
	//send reg address
	I2C_SendData(I2C_ACC, (uint8_t) Reg);
 80016ee:	1dfb      	adds	r3, r7, #7
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	4a2f      	ldr	r2, [pc, #188]	; (80017b0 <I2C_RdReg+0x118>)
 80016f4:	0019      	movs	r1, r3
 80016f6:	0010      	movs	r0, r2
 80016f8:	f7ff f91c 	bl	8000934 <I2C_SendData>
	//Wait until transfer is complete!
	while (I2C_GetFlagStatus(I2C_ACC, I2C_FLAG_TC) == RESET)
 80016fc:	46c0      	nop			; (mov r8, r8)
 80016fe:	4b2c      	ldr	r3, [pc, #176]	; (80017b0 <I2C_RdReg+0x118>)
 8001700:	2140      	movs	r1, #64	; 0x40
 8001702:	0018      	movs	r0, r3
 8001704:	f7ff f930 	bl	8000968 <I2C_GetFlagStatus>
 8001708:	1e03      	subs	r3, r0, #0
 800170a:	d0f8      	beq.n	80016fe <I2C_RdReg+0x66>
		;
	//initiate read
	I2C_TransferHandling(I2C_ACC, ADDR_ACC, DCnt, I2C_AutoEnd_Mode,
 800170c:	2380      	movs	r3, #128	; 0x80
 800170e:	0499      	lsls	r1, r3, #18
 8001710:	1dbb      	adds	r3, r7, #6
 8001712:	781a      	ldrb	r2, [r3, #0]
 8001714:	4826      	ldr	r0, [pc, #152]	; (80017b0 <I2C_RdReg+0x118>)
 8001716:	2390      	movs	r3, #144	; 0x90
 8001718:	019b      	lsls	r3, r3, #6
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	000b      	movs	r3, r1
 800171e:	213a      	movs	r1, #58	; 0x3a
 8001720:	f7ff f8d4 	bl	80008cc <I2C_TransferHandling>
	I2C_Generate_Start_Read);

	//Read in DCnt pieces of data
	for (Cnt = 0; Cnt < DCnt; Cnt++) {
 8001724:	230f      	movs	r3, #15
 8001726:	18fb      	adds	r3, r7, r3
 8001728:	2200      	movs	r2, #0
 800172a:	701a      	strb	r2, [r3, #0]
 800172c:	e025      	b.n	800177a <I2C_RdReg+0xe2>
		//Wait until the RX register is full of luscious data!
		while (I2C_GetFlagStatus(I2C_ACC, I2C_FLAG_RXNE) == RESET)
 800172e:	46c0      	nop			; (mov r8, r8)
 8001730:	4b1f      	ldr	r3, [pc, #124]	; (80017b0 <I2C_RdReg+0x118>)
 8001732:	2104      	movs	r1, #4
 8001734:	0018      	movs	r0, r3
 8001736:	f7ff f917 	bl	8000968 <I2C_GetFlagStatus>
 800173a:	1e03      	subs	r3, r0, #0
 800173c:	d0f8      	beq.n	8001730 <I2C_RdReg+0x98>
			;
		//If we're only reading one byte, place that data direct into the
		//SingleData variable. If we're reading more than 1 piece of data
		//store in the array "Data" (a pointer from main)
		if (DCnt > 1) {
 800173e:	1dbb      	adds	r3, r7, #6
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d90b      	bls.n	800175e <I2C_RdReg+0xc6>
			Data[Cnt] = I2C_ReceiveData(I2C_ACC);
 8001746:	230f      	movs	r3, #15
 8001748:	18fb      	adds	r3, r7, r3
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	18d4      	adds	r4, r2, r3
 8001750:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <I2C_RdReg+0x118>)
 8001752:	0018      	movs	r0, r3
 8001754:	f7ff f8fd 	bl	8000952 <I2C_ReceiveData>
 8001758:	0003      	movs	r3, r0
 800175a:	7023      	strb	r3, [r4, #0]
 800175c:	e007      	b.n	800176e <I2C_RdReg+0xd6>
		} else
			SingleData = I2C_ReceiveData(I2C_ACC);
 800175e:	230e      	movs	r3, #14
 8001760:	18fc      	adds	r4, r7, r3
 8001762:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <I2C_RdReg+0x118>)
 8001764:	0018      	movs	r0, r3
 8001766:	f7ff f8f4 	bl	8000952 <I2C_ReceiveData>
 800176a:	0003      	movs	r3, r0
 800176c:	7023      	strb	r3, [r4, #0]
	for (Cnt = 0; Cnt < DCnt; Cnt++) {
 800176e:	210f      	movs	r1, #15
 8001770:	187b      	adds	r3, r7, r1
 8001772:	781a      	ldrb	r2, [r3, #0]
 8001774:	187b      	adds	r3, r7, r1
 8001776:	3201      	adds	r2, #1
 8001778:	701a      	strb	r2, [r3, #0]
 800177a:	230f      	movs	r3, #15
 800177c:	18fa      	adds	r2, r7, r3
 800177e:	1dbb      	adds	r3, r7, #6
 8001780:	7812      	ldrb	r2, [r2, #0]
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	429a      	cmp	r2, r3
 8001786:	d3d2      	bcc.n	800172e <I2C_RdReg+0x96>
	}

	//Wait for the stop condition to be sent
	while (I2C_GetFlagStatus(I2C_ACC, I2C_FLAG_STOPF) == RESET)
 8001788:	46c0      	nop			; (mov r8, r8)
 800178a:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <I2C_RdReg+0x118>)
 800178c:	2120      	movs	r1, #32
 800178e:	0018      	movs	r0, r3
 8001790:	f7ff f8ea 	bl	8000968 <I2C_GetFlagStatus>
 8001794:	1e03      	subs	r3, r0, #0
 8001796:	d0f8      	beq.n	800178a <I2C_RdReg+0xf2>
		;

	//Clear the stop flag for next transfers
	I2C_ClearFlag(I2C_ACC, I2C_FLAG_STOPF);
 8001798:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <I2C_RdReg+0x118>)
 800179a:	2120      	movs	r1, #32
 800179c:	0018      	movs	r0, r3
 800179e:	f7ff f907 	bl	80009b0 <I2C_ClearFlag>

	//Return a single piece of data if DCnt was
	//less than 1, otherwise 0 will be returned.
	return SingleData;
 80017a2:	230e      	movs	r3, #14
 80017a4:	18fb      	adds	r3, r7, r3
 80017a6:	781b      	ldrb	r3, [r3, #0]
}
 80017a8:	0018      	movs	r0, r3
 80017aa:	46bd      	mov	sp, r7
 80017ac:	b005      	add	sp, #20
 80017ae:	bd90      	pop	{r4, r7, pc}
 80017b0:	40005400 	.word	0x40005400

080017b4 <I2C_WrReg>:

void I2C_WrReg(uint8_t Reg, uint8_t Val) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af02      	add	r7, sp, #8
 80017ba:	0002      	movs	r2, r0
 80017bc:	1dfb      	adds	r3, r7, #7
 80017be:	701a      	strb	r2, [r3, #0]
 80017c0:	1dbb      	adds	r3, r7, #6
 80017c2:	1c0a      	adds	r2, r1, #0
 80017c4:	701a      	strb	r2, [r3, #0]

	//Wait until I2C isn't busy
	while (I2C_GetFlagStatus(I2C_ACC, I2C_FLAG_BUSY) == SET)
 80017c6:	46c0      	nop			; (mov r8, r8)
 80017c8:	2380      	movs	r3, #128	; 0x80
 80017ca:	021b      	lsls	r3, r3, #8
 80017cc:	4a29      	ldr	r2, [pc, #164]	; (8001874 <I2C_WrReg+0xc0>)
 80017ce:	0019      	movs	r1, r3
 80017d0:	0010      	movs	r0, r2
 80017d2:	f7ff f8c9 	bl	8000968 <I2C_GetFlagStatus>
 80017d6:	0003      	movs	r3, r0
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d0f5      	beq.n	80017c8 <I2C_WrReg+0x14>
	//I2C interface... Regardless! Send the address of the HMC
	//sensor down the I2C Bus and generate a start saying we're
	//going to write one byte. I'll be completely honest,
	//the I2C peripheral doesn't make too much sense to me
	//and a lot of the code is from the Std peripheral library
	I2C_TransferHandling(I2C_ACC, ADDR_ACC, 1, I2C_Reload_Mode,
 80017dc:	2380      	movs	r3, #128	; 0x80
 80017de:	045a      	lsls	r2, r3, #17
 80017e0:	4824      	ldr	r0, [pc, #144]	; (8001874 <I2C_WrReg+0xc0>)
 80017e2:	2380      	movs	r3, #128	; 0x80
 80017e4:	019b      	lsls	r3, r3, #6
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	0013      	movs	r3, r2
 80017ea:	2201      	movs	r2, #1
 80017ec:	213a      	movs	r1, #58	; 0x3a
 80017ee:	f7ff f86d 	bl	80008cc <I2C_TransferHandling>
	I2C_Generate_Start_Write);

	//Ensure the transmit interrupted flag is set
	while (I2C_GetFlagStatus(I2C_ACC, I2C_FLAG_TXIS) == RESET)
 80017f2:	46c0      	nop			; (mov r8, r8)
 80017f4:	4b1f      	ldr	r3, [pc, #124]	; (8001874 <I2C_WrReg+0xc0>)
 80017f6:	2102      	movs	r1, #2
 80017f8:	0018      	movs	r0, r3
 80017fa:	f7ff f8b5 	bl	8000968 <I2C_GetFlagStatus>
 80017fe:	1e03      	subs	r3, r0, #0
 8001800:	d0f8      	beq.n	80017f4 <I2C_WrReg+0x40>
		;

	//Send the address of the register we wish to write to
	I2C_SendData(I2C_ACC, Reg);
 8001802:	1dfb      	adds	r3, r7, #7
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	4a1b      	ldr	r2, [pc, #108]	; (8001874 <I2C_WrReg+0xc0>)
 8001808:	0019      	movs	r1, r3
 800180a:	0010      	movs	r0, r2
 800180c:	f7ff f892 	bl	8000934 <I2C_SendData>

	//Ensure that the transfer complete reload flag is
	//set, essentially a standard TC flag
	while (I2C_GetFlagStatus(I2C_ACC, I2C_FLAG_TCR) == RESET)
 8001810:	46c0      	nop			; (mov r8, r8)
 8001812:	4b18      	ldr	r3, [pc, #96]	; (8001874 <I2C_WrReg+0xc0>)
 8001814:	2180      	movs	r1, #128	; 0x80
 8001816:	0018      	movs	r0, r3
 8001818:	f7ff f8a6 	bl	8000968 <I2C_GetFlagStatus>
 800181c:	1e03      	subs	r3, r0, #0
 800181e:	d0f8      	beq.n	8001812 <I2C_WrReg+0x5e>

	//Now that the HMC5883L knows which register
	//we want to write to, send the address again
	//and ensure the I2C peripheral doesn't add
	//any start or stop conditions
	I2C_TransferHandling(I2C_ACC, ADDR_ACC, 1, I2C_AutoEnd_Mode,
 8001820:	2380      	movs	r3, #128	; 0x80
 8001822:	049b      	lsls	r3, r3, #18
 8001824:	4813      	ldr	r0, [pc, #76]	; (8001874 <I2C_WrReg+0xc0>)
 8001826:	2200      	movs	r2, #0
 8001828:	9200      	str	r2, [sp, #0]
 800182a:	2201      	movs	r2, #1
 800182c:	213a      	movs	r1, #58	; 0x3a
 800182e:	f7ff f84d 	bl	80008cc <I2C_TransferHandling>
	I2C_No_StartStop);

	//Again, wait until the transmit interrupted flag is set
	while (I2C_GetFlagStatus(I2C_ACC, I2C_FLAG_TXIS) == RESET)
 8001832:	46c0      	nop			; (mov r8, r8)
 8001834:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <I2C_WrReg+0xc0>)
 8001836:	2102      	movs	r1, #2
 8001838:	0018      	movs	r0, r3
 800183a:	f7ff f895 	bl	8000968 <I2C_GetFlagStatus>
 800183e:	1e03      	subs	r3, r0, #0
 8001840:	d0f8      	beq.n	8001834 <I2C_WrReg+0x80>
		;

	//Send the value you wish you write to the register
	I2C_SendData(I2C_ACC, Val);
 8001842:	1dbb      	adds	r3, r7, #6
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	4a0b      	ldr	r2, [pc, #44]	; (8001874 <I2C_WrReg+0xc0>)
 8001848:	0019      	movs	r1, r3
 800184a:	0010      	movs	r0, r2
 800184c:	f7ff f872 	bl	8000934 <I2C_SendData>

	//Wait for the stop flag to be set indicating
	//a stop condition has been sent
	while (I2C_GetFlagStatus(I2C_ACC, I2C_FLAG_STOPF) == RESET)
 8001850:	46c0      	nop			; (mov r8, r8)
 8001852:	4b08      	ldr	r3, [pc, #32]	; (8001874 <I2C_WrReg+0xc0>)
 8001854:	2120      	movs	r1, #32
 8001856:	0018      	movs	r0, r3
 8001858:	f7ff f886 	bl	8000968 <I2C_GetFlagStatus>
 800185c:	1e03      	subs	r3, r0, #0
 800185e:	d0f8      	beq.n	8001852 <I2C_WrReg+0x9e>
		;

	//Clear the stop flag for the next potential transfer
	I2C_ClearFlag(I2C_ACC, I2C_FLAG_STOPF);
 8001860:	4b04      	ldr	r3, [pc, #16]	; (8001874 <I2C_WrReg+0xc0>)
 8001862:	2120      	movs	r1, #32
 8001864:	0018      	movs	r0, r3
 8001866:	f7ff f8a3 	bl	80009b0 <I2C_ClearFlag>
}
 800186a:	46c0      	nop			; (mov r8, r8)
 800186c:	46bd      	mov	sp, r7
 800186e:	b002      	add	sp, #8
 8001870:	bd80      	pop	{r7, pc}
 8001872:	46c0      	nop			; (mov r8, r8)
 8001874:	40005400 	.word	0x40005400

08001878 <I2C_BitHandling>:

void I2C_BitHandling(uint8_t reg, uint8_t bitmask, uint8_t set) {
 8001878:	b5b0      	push	{r4, r5, r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	0004      	movs	r4, r0
 8001880:	0008      	movs	r0, r1
 8001882:	0011      	movs	r1, r2
 8001884:	1dfb      	adds	r3, r7, #7
 8001886:	1c22      	adds	r2, r4, #0
 8001888:	701a      	strb	r2, [r3, #0]
 800188a:	1dbb      	adds	r3, r7, #6
 800188c:	1c02      	adds	r2, r0, #0
 800188e:	701a      	strb	r2, [r3, #0]
 8001890:	1d7b      	adds	r3, r7, #5
 8001892:	1c0a      	adds	r2, r1, #0
 8001894:	701a      	strb	r2, [r3, #0]
	uint8_t tempReg = I2C_RdReg(reg, rxBuf, 1u);
 8001896:	250f      	movs	r5, #15
 8001898:	197c      	adds	r4, r7, r5
 800189a:	4917      	ldr	r1, [pc, #92]	; (80018f8 <I2C_BitHandling+0x80>)
 800189c:	1dfb      	adds	r3, r7, #7
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2201      	movs	r2, #1
 80018a2:	0018      	movs	r0, r3
 80018a4:	f7ff fef8 	bl	8001698 <I2C_RdReg>
 80018a8:	0003      	movs	r3, r0
 80018aa:	7023      	strb	r3, [r4, #0]
	if (set) {
 80018ac:	1d7b      	adds	r3, r7, #5
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d007      	beq.n	80018c4 <I2C_BitHandling+0x4c>
		//set bits
		tempReg |= bitmask;
 80018b4:	197b      	adds	r3, r7, r5
 80018b6:	1979      	adds	r1, r7, r5
 80018b8:	1dba      	adds	r2, r7, #6
 80018ba:	7809      	ldrb	r1, [r1, #0]
 80018bc:	7812      	ldrb	r2, [r2, #0]
 80018be:	430a      	orrs	r2, r1
 80018c0:	701a      	strb	r2, [r3, #0]
 80018c2:	e00c      	b.n	80018de <I2C_BitHandling+0x66>
	} else {
		//reset bits
		tempReg &= ~bitmask;
 80018c4:	1dbb      	adds	r3, r7, #6
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	b25b      	sxtb	r3, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	b25b      	sxtb	r3, r3
 80018ce:	210f      	movs	r1, #15
 80018d0:	187a      	adds	r2, r7, r1
 80018d2:	7812      	ldrb	r2, [r2, #0]
 80018d4:	b252      	sxtb	r2, r2
 80018d6:	4013      	ands	r3, r2
 80018d8:	b25a      	sxtb	r2, r3
 80018da:	187b      	adds	r3, r7, r1
 80018dc:	701a      	strb	r2, [r3, #0]
	}
	//write back the register
	I2C_WrReg(reg, tempReg);
 80018de:	230f      	movs	r3, #15
 80018e0:	18fb      	adds	r3, r7, r3
 80018e2:	781a      	ldrb	r2, [r3, #0]
 80018e4:	1dfb      	adds	r3, r7, #7
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	0011      	movs	r1, r2
 80018ea:	0018      	movs	r0, r3
 80018ec:	f7ff ff62 	bl	80017b4 <I2C_WrReg>
}
 80018f0:	46c0      	nop			; (mov r8, r8)
 80018f2:	46bd      	mov	sp, r7
 80018f4:	b004      	add	sp, #16
 80018f6:	bdb0      	pop	{r4, r5, r7, pc}
 80018f8:	20000058 	.word	0x20000058

080018fc <Accelerometer_goStandby>:

uint8_t Accelerometer_goStandby() {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
	if (!isActive) {
 8001900:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <Accelerometer_goStandby+0x44>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <Accelerometer_goStandby+0x10>
		return 0;
 8001908:	2300      	movs	r3, #0
 800190a:	e015      	b.n	8001938 <Accelerometer_goStandby+0x3c>
	}
	//reset the Active-bit
	I2C_BitHandling(REG_CTRL_REG_1, 1 << 0, 0);
 800190c:	2200      	movs	r2, #0
 800190e:	2101      	movs	r1, #1
 8001910:	202a      	movs	r0, #42	; 0x2a
 8001912:	f7ff ffb1 	bl	8001878 <I2C_BitHandling>
	delay(100);
 8001916:	2064      	movs	r0, #100	; 0x64
 8001918:	f7ff fcfa 	bl	8001310 <delay>
	//check, if the sensor is inactive
	if (I2C_RdReg(REG_SYSMOD, rxBuf, 1) != 0) {
 800191c:	4b09      	ldr	r3, [pc, #36]	; (8001944 <Accelerometer_goStandby+0x48>)
 800191e:	2201      	movs	r2, #1
 8001920:	0019      	movs	r1, r3
 8001922:	200b      	movs	r0, #11
 8001924:	f7ff feb8 	bl	8001698 <I2C_RdReg>
 8001928:	1e03      	subs	r3, r0, #0
 800192a:	d001      	beq.n	8001930 <Accelerometer_goStandby+0x34>
		return 1;
 800192c:	2301      	movs	r3, #1
 800192e:	e003      	b.n	8001938 <Accelerometer_goStandby+0x3c>
	}
	isActive = 0;
 8001930:	4b03      	ldr	r3, [pc, #12]	; (8001940 <Accelerometer_goStandby+0x44>)
 8001932:	2200      	movs	r2, #0
 8001934:	701a      	strb	r2, [r3, #0]
	return 0;
 8001936:	2300      	movs	r3, #0
}
 8001938:	0018      	movs	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	2000003e 	.word	0x2000003e
 8001944:	20000058 	.word	0x20000058

08001948 <Accelerometer_goActive>:
uint8_t Accelerometer_goActive() {
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0

	if (isActive) {
 800194c:	4b0f      	ldr	r3, [pc, #60]	; (800198c <Accelerometer_goActive+0x44>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <Accelerometer_goActive+0x10>
		return 0;
 8001954:	2300      	movs	r3, #0
 8001956:	e016      	b.n	8001986 <Accelerometer_goActive+0x3e>
	}
	//set the Active-bit
	I2C_BitHandling(REG_CTRL_REG_1, 1 << 0, 1);
 8001958:	2201      	movs	r2, #1
 800195a:	2101      	movs	r1, #1
 800195c:	202a      	movs	r0, #42	; 0x2a
 800195e:	f7ff ff8b 	bl	8001878 <I2C_BitHandling>
	delay(100);
 8001962:	2064      	movs	r0, #100	; 0x64
 8001964:	f7ff fcd4 	bl	8001310 <delay>
	//check, if the sensor is active
	if (I2C_RdReg(REG_SYSMOD, rxBuf, 1) != 1) {
 8001968:	4b09      	ldr	r3, [pc, #36]	; (8001990 <Accelerometer_goActive+0x48>)
 800196a:	2201      	movs	r2, #1
 800196c:	0019      	movs	r1, r3
 800196e:	200b      	movs	r0, #11
 8001970:	f7ff fe92 	bl	8001698 <I2C_RdReg>
 8001974:	0003      	movs	r3, r0
 8001976:	2b01      	cmp	r3, #1
 8001978:	d001      	beq.n	800197e <Accelerometer_goActive+0x36>

		return 1;
 800197a:	2301      	movs	r3, #1
 800197c:	e003      	b.n	8001986 <Accelerometer_goActive+0x3e>
	}
	isActive = 1;
 800197e:	4b03      	ldr	r3, [pc, #12]	; (800198c <Accelerometer_goActive+0x44>)
 8001980:	2201      	movs	r2, #1
 8001982:	701a      	strb	r2, [r3, #0]
	return 0;
 8001984:	2300      	movs	r3, #0
}
 8001986:	0018      	movs	r0, r3
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	2000003e 	.word	0x2000003e
 8001990:	20000058 	.word	0x20000058

08001994 <Accelerometer_init>:

uint8_t Accelerometer_init() {
 8001994:	b590      	push	{r4, r7, lr}
 8001996:	b08b      	sub	sp, #44	; 0x2c
 8001998:	af00      	add	r7, sp, #0

	//enable clock for periphery modules
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 800199a:	2380      	movs	r3, #128	; 0x80
 800199c:	029b      	lsls	r3, r3, #10
 800199e:	2101      	movs	r1, #1
 80019a0:	0018      	movs	r0, r3
 80019a2:	f7ff f881 	bl	8000aa8 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 80019a6:	2380      	movs	r3, #128	; 0x80
 80019a8:	03db      	lsls	r3, r3, #15
 80019aa:	2101      	movs	r1, #1
 80019ac:	0018      	movs	r0, r3
 80019ae:	f7ff f87b 	bl	8000aa8 <RCC_AHBPeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 80019b2:	2380      	movs	r3, #128	; 0x80
 80019b4:	039b      	lsls	r3, r3, #14
 80019b6:	2101      	movs	r1, #1
 80019b8:	0018      	movs	r0, r3
 80019ba:	f7ff f8b5 	bl	8000b28 <RCC_APB1PeriphClockCmd>

	//gpio init
	GPIO_InitTypeDef GPIO_InitStruct;
	//configure PINs PF0 and PF1 as AF OD out
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
 80019be:	2420      	movs	r4, #32
 80019c0:	193b      	adds	r3, r7, r4
 80019c2:	2203      	movs	r2, #3
 80019c4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 80019c6:	193b      	adds	r3, r7, r4
 80019c8:	2202      	movs	r2, #2
 80019ca:	711a      	strb	r2, [r3, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;
 80019cc:	193b      	adds	r3, r7, r4
 80019ce:	2201      	movs	r2, #1
 80019d0:	719a      	strb	r2, [r3, #6]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_Level_1;
 80019d2:	193b      	adds	r3, r7, r4
 80019d4:	2200      	movs	r2, #0
 80019d6:	715a      	strb	r2, [r3, #5]
	GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019d8:	193b      	adds	r3, r7, r4
 80019da:	4a39      	ldr	r2, [pc, #228]	; (8001ac0 <Accelerometer_init+0x12c>)
 80019dc:	0019      	movs	r1, r3
 80019de:	0010      	movs	r0, r2
 80019e0:	f7fe fda0 	bl	8000524 <GPIO_Init>

	//remap
	GPIO_PinAFConfig(GPIOF, GPIO_PinSource0, GPIO_AF_1);
 80019e4:	4b36      	ldr	r3, [pc, #216]	; (8001ac0 <Accelerometer_init+0x12c>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	2100      	movs	r1, #0
 80019ea:	0018      	movs	r0, r3
 80019ec:	f7fe fe6e 	bl	80006cc <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOF, GPIO_PinSource1, GPIO_AF_1);
 80019f0:	4b33      	ldr	r3, [pc, #204]	; (8001ac0 <Accelerometer_init+0x12c>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	2101      	movs	r1, #1
 80019f6:	0018      	movs	r0, r3
 80019f8:	f7fe fe68 	bl	80006cc <GPIO_PinAFConfig>

	//configure PINs PA2 and PA3 as inputs for the interrupt lines
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 80019fc:	0021      	movs	r1, r4
 80019fe:	187b      	adds	r3, r7, r1
 8001a00:	220c      	movs	r2, #12
 8001a02:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 8001a04:	187b      	adds	r3, r7, r1
 8001a06:	2200      	movs	r2, #0
 8001a08:	711a      	strb	r2, [r3, #4]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8001a0a:	187b      	adds	r3, r7, r1
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	71da      	strb	r2, [r3, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8001a10:	187b      	adds	r3, r7, r1
 8001a12:	2203      	movs	r2, #3
 8001a14:	715a      	strb	r2, [r3, #5]
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a16:	187a      	adds	r2, r7, r1
 8001a18:	2390      	movs	r3, #144	; 0x90
 8001a1a:	05db      	lsls	r3, r3, #23
 8001a1c:	0011      	movs	r1, r2
 8001a1e:	0018      	movs	r0, r3
 8001a20:	f7fe fd80 	bl	8000524 <GPIO_Init>

	//i2c init
	//I2C_DeInit(I2C1);
	I2C_InitTypeDef I2C_InitStruct;
	I2C_InitStruct.I2C_Ack = I2C_Ack_Enable;
 8001a24:	1d3b      	adds	r3, r7, #4
 8001a26:	2200      	movs	r2, #0
 8001a28:	615a      	str	r2, [r3, #20]
	I2C_InitStruct.I2C_AnalogFilter = I2C_AnalogFilter_Enable;
 8001a2a:	1d3b      	adds	r3, r7, #4
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	605a      	str	r2, [r3, #4]
	I2C_InitStruct.I2C_OwnAddress1 = 0xAB;
 8001a30:	1d3b      	adds	r3, r7, #4
 8001a32:	22ab      	movs	r2, #171	; 0xab
 8001a34:	611a      	str	r2, [r3, #16]
	I2C_InitStruct.I2C_DigitalFilter = 0;
 8001a36:	1d3b      	adds	r3, r7, #4
 8001a38:	2200      	movs	r2, #0
 8001a3a:	609a      	str	r2, [r3, #8]
	I2C_InitStruct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8001a3c:	1d3b      	adds	r3, r7, #4
 8001a3e:	2200      	movs	r2, #0
 8001a40:	619a      	str	r2, [r3, #24]
	I2C_InitStruct.I2C_Mode = I2C_Mode_I2C;
 8001a42:	1d3b      	adds	r3, r7, #4
 8001a44:	2200      	movs	r2, #0
 8001a46:	60da      	str	r2, [r3, #12]
	I2C_InitStruct.I2C_Timing = 0x0010020A; //should be 400kHz for the 8Mhz HSI
 8001a48:	1d3b      	adds	r3, r7, #4
 8001a4a:	4a1e      	ldr	r2, [pc, #120]	; (8001ac4 <Accelerometer_init+0x130>)
 8001a4c:	601a      	str	r2, [r3, #0]
	I2C_Init(I2C_ACC, &I2C_InitStruct);
 8001a4e:	1d3b      	adds	r3, r7, #4
 8001a50:	4a1d      	ldr	r2, [pc, #116]	; (8001ac8 <Accelerometer_init+0x134>)
 8001a52:	0019      	movs	r1, r3
 8001a54:	0010      	movs	r0, r2
 8001a56:	f7fe feb3 	bl	80007c0 <I2C_Init>

	I2C_Cmd(I2C_ACC, ENABLE);
 8001a5a:	4b1b      	ldr	r3, [pc, #108]	; (8001ac8 <Accelerometer_init+0x134>)
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	0018      	movs	r0, r3
 8001a60:	f7fe ff16 	bl	8000890 <I2C_Cmd>

	delay(50);
 8001a64:	2032      	movs	r0, #50	; 0x32
 8001a66:	f7ff fc53 	bl	8001310 <delay>

	if (I2C_RdReg(REG_WHO_AM_I, rxBuf, 1) != 0x5A) //read the device ID to verify communication
 8001a6a:	4b18      	ldr	r3, [pc, #96]	; (8001acc <Accelerometer_init+0x138>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	0019      	movs	r1, r3
 8001a70:	200d      	movs	r0, #13
 8001a72:	f7ff fe11 	bl	8001698 <I2C_RdReg>
 8001a76:	0003      	movs	r3, r0
 8001a78:	2b5a      	cmp	r3, #90	; 0x5a
 8001a7a:	d001      	beq.n	8001a80 <Accelerometer_init+0xec>
			{
		return 1;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e01b      	b.n	8001ab8 <Accelerometer_init+0x124>
	}

	//set to highres mode
	I2C_BitHandling(REG_CTRL_REG_2, 1 << 1, SET);
 8001a80:	2201      	movs	r2, #1
 8001a82:	2102      	movs	r1, #2
 8001a84:	202b      	movs	r0, #43	; 0x2b
 8001a86:	f7ff fef7 	bl	8001878 <I2C_BitHandling>

	//set the sensor as always active (disable auto sleep) <- default
	//set to active and 10 bit mode, DataRate to 12.5Hz
	I2C_BitHandling(REG_CTRL_REG_1, (1 << 0 | 1 << 3 | 1 << 5), SET);
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	2129      	movs	r1, #41	; 0x29
 8001a8e:	202a      	movs	r0, #42	; 0x2a
 8001a90:	f7ff fef2 	bl	8001878 <I2C_BitHandling>

	//check, if the sensor is active
	if (I2C_RdReg(REG_SYSMOD, rxBuf, 1) != 1) {
 8001a94:	4b0d      	ldr	r3, [pc, #52]	; (8001acc <Accelerometer_init+0x138>)
 8001a96:	2201      	movs	r2, #1
 8001a98:	0019      	movs	r1, r3
 8001a9a:	200b      	movs	r0, #11
 8001a9c:	f7ff fdfc 	bl	8001698 <I2C_RdReg>
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d004      	beq.n	8001ab0 <Accelerometer_init+0x11c>
		isActive = 0;
 8001aa6:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <Accelerometer_init+0x13c>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	701a      	strb	r2, [r3, #0]
		return 2;
 8001aac:	2302      	movs	r3, #2
 8001aae:	e003      	b.n	8001ab8 <Accelerometer_init+0x124>
	}
	isActive = 1;
 8001ab0:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <Accelerometer_init+0x13c>)
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	701a      	strb	r2, [r3, #0]
	return 0;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	0018      	movs	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	b00b      	add	sp, #44	; 0x2c
 8001abe:	bd90      	pop	{r4, r7, pc}
 8001ac0:	48001400 	.word	0x48001400
 8001ac4:	0010020a 	.word	0x0010020a
 8001ac8:	40005400 	.word	0x40005400
 8001acc:	20000058 	.word	0x20000058
 8001ad0:	2000003e 	.word	0x2000003e

08001ad4 <Accelerometer_setRange>:

uint8_t Accelerometer_setRange(Accelerometer_Ranges range) {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	0002      	movs	r2, r0
 8001adc:	1dfb      	adds	r3, r7, #7
 8001ade:	701a      	strb	r2, [r3, #0]
	//deactivate the sensor
	if (Accelerometer_goStandby()) {
 8001ae0:	f7ff ff0c 	bl	80018fc <Accelerometer_goStandby>
 8001ae4:	1e03      	subs	r3, r0, #0
 8001ae6:	d001      	beq.n	8001aec <Accelerometer_setRange+0x18>
		return 1;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e012      	b.n	8001b12 <Accelerometer_setRange+0x3e>
	}
	//clear bits in register to change
	I2C_BitHandling(REG_XYZ_DATA_CFG, 0x03, Bit_RESET);
 8001aec:	2200      	movs	r2, #0
 8001aee:	2103      	movs	r1, #3
 8001af0:	200e      	movs	r0, #14
 8001af2:	f7ff fec1 	bl	8001878 <I2C_BitHandling>
	//set range
	I2C_BitHandling(REG_XYZ_DATA_CFG, range, Bit_SET);
 8001af6:	1dfb      	adds	r3, r7, #7
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2201      	movs	r2, #1
 8001afc:	0019      	movs	r1, r3
 8001afe:	200e      	movs	r0, #14
 8001b00:	f7ff feba 	bl	8001878 <I2C_BitHandling>

	if (Accelerometer_goActive()) {
 8001b04:	f7ff ff20 	bl	8001948 <Accelerometer_goActive>
 8001b08:	1e03      	subs	r3, r0, #0
 8001b0a:	d001      	beq.n	8001b10 <Accelerometer_setRange+0x3c>
		return 3;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e000      	b.n	8001b12 <Accelerometer_setRange+0x3e>
	}
	return 0;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	0018      	movs	r0, r3
 8001b14:	46bd      	mov	sp, r7
 8001b16:	b002      	add	sp, #8
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <Accelerometer_setDataRate>:

uint8_t Accelerometer_setDataRate(Accelerometer_dataRates dataRate) {
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	0002      	movs	r2, r0
 8001b22:	1dfb      	adds	r3, r7, #7
 8001b24:	701a      	strb	r2, [r3, #0]
	//deactivate the sensor
	if (Accelerometer_goStandby()) {
 8001b26:	f7ff fee9 	bl	80018fc <Accelerometer_goStandby>
 8001b2a:	1e03      	subs	r3, r0, #0
 8001b2c:	d001      	beq.n	8001b32 <Accelerometer_setDataRate+0x18>
		return 1;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e014      	b.n	8001b5c <Accelerometer_setDataRate+0x42>
	}
	//clear bits in register to change
	I2C_BitHandling(REG_CTRL_REG_1, 0x38, Bit_RESET);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2138      	movs	r1, #56	; 0x38
 8001b36:	202a      	movs	r0, #42	; 0x2a
 8001b38:	f7ff fe9e 	bl	8001878 <I2C_BitHandling>
	//set range
	I2C_BitHandling(REG_CTRL_REG_1, dataRate << 3, Bit_SET);
 8001b3c:	1dfb      	adds	r3, r7, #7
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2201      	movs	r2, #1
 8001b46:	0019      	movs	r1, r3
 8001b48:	202a      	movs	r0, #42	; 0x2a
 8001b4a:	f7ff fe95 	bl	8001878 <I2C_BitHandling>

	if (Accelerometer_goActive()) {
 8001b4e:	f7ff fefb 	bl	8001948 <Accelerometer_goActive>
 8001b52:	1e03      	subs	r3, r0, #0
 8001b54:	d001      	beq.n	8001b5a <Accelerometer_setDataRate+0x40>
		return 3;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e000      	b.n	8001b5c <Accelerometer_setDataRate+0x42>
	}
	return 0;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	b002      	add	sp, #8
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <Accelerometer_setDataWidth>:

uint8_t Accelerometer_setDataWidth(uint8_t DataWidth) {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	0002      	movs	r2, r0
 8001b6c:	1dfb      	adds	r3, r7, #7
 8001b6e:	701a      	strb	r2, [r3, #0]
	//deactivate the sensor
	if (Accelerometer_goStandby()) {
 8001b70:	f7ff fec4 	bl	80018fc <Accelerometer_goStandby>
 8001b74:	1e03      	subs	r3, r0, #0
 8001b76:	d001      	beq.n	8001b7c <Accelerometer_setDataWidth+0x18>
		return 1;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e020      	b.n	8001bbe <Accelerometer_setDataWidth+0x5a>
	}
	//clear bits in register to change
	I2C_BitHandling(REG_CTRL_REG_1, 0x3E, Bit_RESET);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	213e      	movs	r1, #62	; 0x3e
 8001b80:	202a      	movs	r0, #42	; 0x2a
 8001b82:	f7ff fe79 	bl	8001878 <I2C_BitHandling>

	//decide what to do
	switch (DataWidth) {
 8001b86:	1dfb      	adds	r3, r7, #7
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d002      	beq.n	8001b94 <Accelerometer_setDataWidth+0x30>
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d006      	beq.n	8001ba0 <Accelerometer_setDataWidth+0x3c>
 8001b92:	e00b      	b.n	8001bac <Accelerometer_setDataWidth+0x48>
	case ACC_DATAWIDTH_8:
		//set F_READ and leave highest data rate
		I2C_BitHandling(REG_CTRL_REG_1, 1 << 1, Bit_SET);
 8001b94:	2201      	movs	r2, #1
 8001b96:	2102      	movs	r1, #2
 8001b98:	202a      	movs	r0, #42	; 0x2a
 8001b9a:	f7ff fe6d 	bl	8001878 <I2C_BitHandling>
		break;
 8001b9e:	e007      	b.n	8001bb0 <Accelerometer_setDataWidth+0x4c>
	case ACC_DATAWIDTH_10:
		//limit output data rate to 12.5Hz and leave F_READ reset
		I2C_BitHandling(REG_CTRL_REG_1, (1 << 3 | 1 << 5), Bit_SET);
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	2128      	movs	r1, #40	; 0x28
 8001ba4:	202a      	movs	r0, #42	; 0x2a
 8001ba6:	f7ff fe67 	bl	8001878 <I2C_BitHandling>
		break;
 8001baa:	e001      	b.n	8001bb0 <Accelerometer_setDataWidth+0x4c>
	default:
		return 2;
 8001bac:	2302      	movs	r3, #2
 8001bae:	e006      	b.n	8001bbe <Accelerometer_setDataWidth+0x5a>
		break;
	}
	if (Accelerometer_goActive()) {
 8001bb0:	f7ff feca 	bl	8001948 <Accelerometer_goActive>
 8001bb4:	1e03      	subs	r3, r0, #0
 8001bb6:	d001      	beq.n	8001bbc <Accelerometer_setDataWidth+0x58>
		return 3;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e000      	b.n	8001bbe <Accelerometer_setDataWidth+0x5a>
	}
	return 0;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	0018      	movs	r0, r3
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	b002      	add	sp, #8
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <Accelerometer_read8>:

//read when in fast (8-bit) mode
//needs the fast-read mode enabled as well
//max. sample frequency (because of communication) ~ 7kHz
acc8_t Accelerometer_read8() {
 8001bc8:	b590      	push	{r4, r7, lr}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
	uint8_t rxBuf[3];
	acc8_t acc_result;

	I2C_RdReg(REG_OUT_X_MSB, rxBuf, 3);
 8001bce:	2408      	movs	r4, #8
 8001bd0:	193b      	adds	r3, r7, r4
 8001bd2:	2203      	movs	r2, #3
 8001bd4:	0019      	movs	r1, r3
 8001bd6:	2001      	movs	r0, #1
 8001bd8:	f7ff fd5e 	bl	8001698 <I2C_RdReg>
	//rxbuf[0] contains full 8 bit of data.
	//the first bit defines the sign!
	acc_result.x = rxBuf[0];
 8001bdc:	0021      	movs	r1, r4
 8001bde:	187b      	adds	r3, r7, r1
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	b25a      	sxtb	r2, r3
 8001be4:	1d3b      	adds	r3, r7, #4
 8001be6:	701a      	strb	r2, [r3, #0]
	acc_result.y = rxBuf[1];
 8001be8:	187b      	adds	r3, r7, r1
 8001bea:	785b      	ldrb	r3, [r3, #1]
 8001bec:	b25a      	sxtb	r2, r3
 8001bee:	1d3b      	adds	r3, r7, #4
 8001bf0:	705a      	strb	r2, [r3, #1]
	acc_result.z = rxBuf[2];
 8001bf2:	187b      	adds	r3, r7, r1
 8001bf4:	789b      	ldrb	r3, [r3, #2]
 8001bf6:	b25a      	sxtb	r2, r3
 8001bf8:	1d3b      	adds	r3, r7, #4
 8001bfa:	709a      	strb	r2, [r3, #2]
	return acc_result;
 8001bfc:	200c      	movs	r0, #12
 8001bfe:	183b      	adds	r3, r7, r0
 8001c00:	1d3a      	adds	r2, r7, #4
 8001c02:	8811      	ldrh	r1, [r2, #0]
 8001c04:	8019      	strh	r1, [r3, #0]
 8001c06:	7892      	ldrb	r2, [r2, #2]
 8001c08:	709a      	strb	r2, [r3, #2]
 8001c0a:	183a      	adds	r2, r7, r0
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	7811      	ldrb	r1, [r2, #0]
 8001c10:	20ff      	movs	r0, #255	; 0xff
 8001c12:	4001      	ands	r1, r0
 8001c14:	20ff      	movs	r0, #255	; 0xff
 8001c16:	4383      	bics	r3, r0
 8001c18:	430b      	orrs	r3, r1
 8001c1a:	7851      	ldrb	r1, [r2, #1]
 8001c1c:	20ff      	movs	r0, #255	; 0xff
 8001c1e:	4001      	ands	r1, r0
 8001c20:	0209      	lsls	r1, r1, #8
 8001c22:	4807      	ldr	r0, [pc, #28]	; (8001c40 <Accelerometer_read8+0x78>)
 8001c24:	4003      	ands	r3, r0
 8001c26:	430b      	orrs	r3, r1
 8001c28:	7892      	ldrb	r2, [r2, #2]
 8001c2a:	21ff      	movs	r1, #255	; 0xff
 8001c2c:	400a      	ands	r2, r1
 8001c2e:	0412      	lsls	r2, r2, #16
 8001c30:	4904      	ldr	r1, [pc, #16]	; (8001c44 <Accelerometer_read8+0x7c>)
 8001c32:	400b      	ands	r3, r1
 8001c34:	4313      	orrs	r3, r2
}
 8001c36:	0018      	movs	r0, r3
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	b005      	add	sp, #20
 8001c3c:	bd90      	pop	{r4, r7, pc}
 8001c3e:	46c0      	nop			; (mov r8, r8)
 8001c40:	ffff00ff 	.word	0xffff00ff
 8001c44:	ff00ffff 	.word	0xff00ffff

08001c48 <Accelerometer_initIrq>:
	acc_result.z = ((int16_t) rxBuf[4] << 2) | (rxBuf[5] & 0x60 >> 6);
	return acc_result;
}

//TODO: don't forget to implement and register the interrupt handler in startup code
void Accelerometer_initIrq() {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
	Accelerometer_goStandby();
 8001c4e:	f7ff fe55 	bl	80018fc <Accelerometer_goStandby>

	//interrupt pins are defined for push/pull low active by default -> leave that

	//enable the wanted interrupt source
	I2C_BitHandling(REG_CTRL_REG_4, 1 << 0, Bit_SET);
 8001c52:	2201      	movs	r2, #1
 8001c54:	2101      	movs	r1, #1
 8001c56:	202d      	movs	r0, #45	; 0x2d
 8001c58:	f7ff fe0e 	bl	8001878 <I2C_BitHandling>
	//and route it to the corresponding pin
	I2C_BitHandling(REG_CTRL_REG_5, 1 << 0, Bit_SET);
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	2101      	movs	r1, #1
 8001c60:	202e      	movs	r0, #46	; 0x2e
 8001c62:	f7ff fe09 	bl	8001878 <I2C_BitHandling>

	//set up the Interrupt in the STM32!
	//INT1 is connected to PA2 -> EXTI2 line
	//enable the clock for the syscfg module
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8001c66:	2101      	movs	r1, #1
 8001c68:	2001      	movs	r0, #1
 8001c6a:	f7fe ff3d 	bl	8000ae8 <RCC_APB2PeriphClockCmd>
	//enable PA2 interrupt source
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource2);
 8001c6e:	2102      	movs	r1, #2
 8001c70:	2000      	movs	r0, #0
 8001c72:	f7fe ff99 	bl	8000ba8 <SYSCFG_EXTILineConfig>
	//configure and enable the exti2 line
	EXTI_InitTypeDef EXTI_InitStruct;
	EXTI_InitStruct.EXTI_Line = EXTI_Line2;
 8001c76:	2108      	movs	r1, #8
 8001c78:	187b      	adds	r3, r7, r1
 8001c7a:	2204      	movs	r2, #4
 8001c7c:	601a      	str	r2, [r3, #0]
	EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 8001c7e:	187b      	adds	r3, r7, r1
 8001c80:	2200      	movs	r2, #0
 8001c82:	711a      	strb	r2, [r3, #4]
	EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Falling;
 8001c84:	187b      	adds	r3, r7, r1
 8001c86:	220c      	movs	r2, #12
 8001c88:	715a      	strb	r2, [r3, #5]
	EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 8001c8a:	187b      	adds	r3, r7, r1
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	719a      	strb	r2, [r3, #6]
	EXTI_Init(&EXTI_InitStruct);
 8001c90:	187b      	adds	r3, r7, r1
 8001c92:	0018      	movs	r0, r3
 8001c94:	f7fe fbc8 	bl	8000428 <EXTI_Init>
	//enable and set exti2 interrupt
	NVIC_InitTypeDef NVIC_InitStruct;
	NVIC_InitStruct.NVIC_IRQChannel = EXTI2_3_IRQn;
 8001c98:	1d3b      	adds	r3, r7, #4
 8001c9a:	2206      	movs	r2, #6
 8001c9c:	701a      	strb	r2, [r3, #0]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8001c9e:	1d3b      	adds	r3, r7, #4
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	709a      	strb	r2, [r3, #2]
	NVIC_Init(&NVIC_InitStruct);
 8001ca4:	1d3b      	adds	r3, r7, #4
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	f7fe fe8e 	bl	80009c8 <NVIC_Init>

	//activate sensor again
	Accelerometer_goActive();
 8001cac:	f7ff fe4c 	bl	8001948 <Accelerometer_goActive>
}
 8001cb0:	46c0      	nop			; (mov r8, r8)
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	b004      	add	sp, #16
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <Accelerometer_deInit>:

//sends sensor into standby, deactivates I2C and the interrupts
//important especially after using the interrupts
void Accelerometer_deInit()
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
	Accelerometer_goStandby();
 8001cbc:	f7ff fe1e 	bl	80018fc <Accelerometer_goStandby>
	I2C_DeInit(I2C_ACC);
 8001cc0:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <Accelerometer_deInit+0x20>)
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	f7fe fd54 	bl	8000770 <I2C_DeInit>
	EXTI_DeInit();
 8001cc8:	f7fe fb94 	bl	80003f4 <EXTI_DeInit>
	NVIC_DisableIRQ(EXTI2_3_IRQn);
 8001ccc:	2006      	movs	r0, #6
 8001cce:	f7ff fccb 	bl	8001668 <NVIC_DisableIRQ>
}
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40005400 	.word	0x40005400

08001cdc <NVIC_EnableIRQ>:
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn) {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	0002      	movs	r2, r0
 8001ce4:	1dfb      	adds	r3, r7, #7
 8001ce6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (1 << ((uint32_t) (IRQn) & 0x1F));
 8001ce8:	1dfb      	adds	r3, r7, #7
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	001a      	movs	r2, r3
 8001cee:	231f      	movs	r3, #31
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	409a      	lsls	r2, r3
 8001cf6:	4b03      	ldr	r3, [pc, #12]	; (8001d04 <NVIC_EnableIRQ+0x28>)
 8001cf8:	601a      	str	r2, [r3, #0]
}
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	b002      	add	sp, #8
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	46c0      	nop			; (mov r8, r8)
 8001d04:	e000e100 	.word	0xe000e100

08001d08 <displayInit>:
 *
 *
 *TODO: test and optimize all the timings in this class
 */

void displayInit() {
 8001d08:	b5b0      	push	{r4, r5, r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
	//set up mma8653 with +-4g-Range, low res and high sampling rate
	//set up interrupt-driven sensor readout
	Accelerometer_setRange(RANGE_8G);
 8001d0c:	2002      	movs	r0, #2
 8001d0e:	f7ff fee1 	bl	8001ad4 <Accelerometer_setRange>
	Accelerometer_setDataWidth(ACC_DATAWIDTH_8);
 8001d12:	2000      	movs	r0, #0
 8001d14:	f7ff ff26 	bl	8001b64 <Accelerometer_setDataWidth>
	Accelerometer_setDataRate(RATE_200Hz);
 8001d18:	2002      	movs	r0, #2
 8001d1a:	f7ff fefe 	bl	8001b1a <Accelerometer_setDataRate>
	Accelerometer_initIrq();
 8001d1e:	f7ff ff93 	bl	8001c48 <Accelerometer_initIrq>

	Neopixels_Off();
 8001d22:	f000 fd51 	bl	80027c8 <Neopixels_Off>

	//set up timer TIM2 for measuring t_frame
	//upcounting,12MHz-> prescaler = 4,
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8001d26:	2101      	movs	r1, #1
 8001d28:	2001      	movs	r0, #1
 8001d2a:	f7fe fefd 	bl	8000b28 <RCC_APB1PeriphClockCmd>
	TIM2->CR1 = 0;
 8001d2e:	2380      	movs	r3, #128	; 0x80
 8001d30:	05db      	lsls	r3, r3, #23
 8001d32:	2200      	movs	r2, #0
 8001d34:	801a      	strh	r2, [r3, #0]
	TIM2->PSC = 48;
 8001d36:	2380      	movs	r3, #128	; 0x80
 8001d38:	05db      	lsls	r3, r3, #23
 8001d3a:	2230      	movs	r2, #48	; 0x30
 8001d3c:	851a      	strh	r2, [r3, #40]	; 0x28
	//reset the counter:
	TIM2->EGR |= TIM_EGR_UG;
 8001d3e:	2380      	movs	r3, #128	; 0x80
 8001d40:	05db      	lsls	r3, r3, #23
 8001d42:	8a9b      	ldrh	r3, [r3, #20]
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	2380      	movs	r3, #128	; 0x80
 8001d48:	05db      	lsls	r3, r3, #23
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	b292      	uxth	r2, r2
 8001d50:	829a      	strh	r2, [r3, #20]
	TIM2->CR1 |= TIM_CR1_CEN;
 8001d52:	2380      	movs	r3, #128	; 0x80
 8001d54:	05db      	lsls	r3, r3, #23
 8001d56:	881b      	ldrh	r3, [r3, #0]
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	2380      	movs	r3, #128	; 0x80
 8001d5c:	05db      	lsls	r3, r3, #23
 8001d5e:	2101      	movs	r1, #1
 8001d60:	430a      	orrs	r2, r1
 8001d62:	b292      	uxth	r2, r2
 8001d64:	801a      	strh	r2, [r3, #0]

	//setup TIM2 Compare Channel 1 for setting the length of the LockTime!
	//the data-ready interrupt from the sensor is ignored during that time
	//set to 30 ms (a faster swipe doesn't seem to be possible by hand)
	TIM2->DIER |= TIM_DIER_CC1IE;
 8001d66:	2380      	movs	r3, #128	; 0x80
 8001d68:	05db      	lsls	r3, r3, #23
 8001d6a:	899b      	ldrh	r3, [r3, #12]
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	2380      	movs	r3, #128	; 0x80
 8001d70:	05db      	lsls	r3, r3, #23
 8001d72:	2102      	movs	r1, #2
 8001d74:	430a      	orrs	r2, r1
 8001d76:	b292      	uxth	r2, r2
 8001d78:	819a      	strh	r2, [r3, #12]
	TIM2->CCR1 = 30000;
 8001d7a:	2380      	movs	r3, #128	; 0x80
 8001d7c:	05db      	lsls	r3, r3, #23
 8001d7e:	4a71      	ldr	r2, [pc, #452]	; (8001f44 <displayInit+0x23c>)
 8001d80:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCER |= TIM_CCER_CC1E;
 8001d82:	2380      	movs	r3, #128	; 0x80
 8001d84:	05db      	lsls	r3, r3, #23
 8001d86:	8c1b      	ldrh	r3, [r3, #32]
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	2380      	movs	r3, #128	; 0x80
 8001d8c:	05db      	lsls	r3, r3, #23
 8001d8e:	2101      	movs	r1, #1
 8001d90:	430a      	orrs	r2, r1
 8001d92:	b292      	uxth	r2, r2
 8001d94:	841a      	strh	r2, [r3, #32]
	NVIC_EnableIRQ(TIM2_IRQn);
 8001d96:	200f      	movs	r0, #15
 8001d98:	f7ff ffa0 	bl	8001cdc <NVIC_EnableIRQ>

	//set up timer TIM3 for triggering the lines with t_line (= t_frame/LINECOUNT)
	//upcounting 12Mhz, autoreload @ t_frame/LINECOUNT, interrupt @ overflow
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	2002      	movs	r0, #2
 8001da0:	f7fe fec2 	bl	8000b28 <RCC_APB1PeriphClockCmd>
	TIM3->CR1 = 0;
 8001da4:	4b68      	ldr	r3, [pc, #416]	; (8001f48 <displayInit+0x240>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	801a      	strh	r2, [r3, #0]
	TIM3->PSC = 48;
 8001daa:	4b67      	ldr	r3, [pc, #412]	; (8001f48 <displayInit+0x240>)
 8001dac:	2230      	movs	r2, #48	; 0x30
 8001dae:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM3->DIER |= TIM_DIER_UIE;
 8001db0:	4b65      	ldr	r3, [pc, #404]	; (8001f48 <displayInit+0x240>)
 8001db2:	899b      	ldrh	r3, [r3, #12]
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	4a64      	ldr	r2, [pc, #400]	; (8001f48 <displayInit+0x240>)
 8001db8:	2101      	movs	r1, #1
 8001dba:	430b      	orrs	r3, r1
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	8193      	strh	r3, [r2, #12]
	//clear interrupt flag
	TIM3->SR &= ~TIM_SR_UIF;
 8001dc0:	4b61      	ldr	r3, [pc, #388]	; (8001f48 <displayInit+0x240>)
 8001dc2:	8a1b      	ldrh	r3, [r3, #16]
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	4a60      	ldr	r2, [pc, #384]	; (8001f48 <displayInit+0x240>)
 8001dc8:	2101      	movs	r1, #1
 8001dca:	438b      	bics	r3, r1
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	8213      	strh	r3, [r2, #16]
	//enable the IRQ
	NVIC_EnableIRQ(TIM3_IRQn);
 8001dd0:	2010      	movs	r0, #16
 8001dd2:	f7ff ff83 	bl	8001cdc <NVIC_EnableIRQ>
	//don't activate this timer now, because an overflow would produce a line on the display!

	//if the device is unconfigured (rowsVisible = 0), set a smiley as default picture
	//TODO: this could be planted into flash directly (to save a bit of memory)
	if (NvMem_read(NVMEM_AD_ROWS_VISIBLE) > 32
 8001dd6:	2003      	movs	r0, #3
 8001dd8:	f000 fd62 	bl	80028a0 <NvMem_read>
 8001ddc:	0003      	movs	r3, r0
 8001dde:	2b20      	cmp	r3, #32
 8001de0:	d804      	bhi.n	8001dec <displayInit+0xe4>
			|| NvMem_read(NVMEM_AD_ROWS_VISIBLE) == 0) {
 8001de2:	2003      	movs	r0, #3
 8001de4:	f000 fd5c 	bl	80028a0 <NvMem_read>
 8001de8:	1e03      	subs	r3, r0, #0
 8001dea:	d15b      	bne.n	8001ea4 <displayInit+0x19c>
		NvMem_write(NVMEM_AD_ROWS_VISIBLE, 16);
 8001dec:	2110      	movs	r1, #16
 8001dee:	2003      	movs	r0, #3
 8001df0:	f000 fd70 	bl	80028d4 <NvMem_write>
		NvMem_write(NVMEM_AD_OVERSCAN, 0);
 8001df4:	2100      	movs	r1, #0
 8001df6:	2004      	movs	r0, #4
 8001df8:	f000 fd6c 	bl	80028d4 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 0, 0b0000001111000000);
 8001dfc:	23f0      	movs	r3, #240	; 0xf0
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	0019      	movs	r1, r3
 8001e02:	2005      	movs	r0, #5
 8001e04:	f000 fd66 	bl	80028d4 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 1, 0b0000110000110000);
 8001e08:	23c3      	movs	r3, #195	; 0xc3
 8001e0a:	011b      	lsls	r3, r3, #4
 8001e0c:	0019      	movs	r1, r3
 8001e0e:	2006      	movs	r0, #6
 8001e10:	f000 fd60 	bl	80028d4 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 2, 0b0001000000001000);
 8001e14:	4b4d      	ldr	r3, [pc, #308]	; (8001f4c <displayInit+0x244>)
 8001e16:	0019      	movs	r1, r3
 8001e18:	2007      	movs	r0, #7
 8001e1a:	f000 fd5b 	bl	80028d4 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 3, 0b0010000000000100);
 8001e1e:	4b4c      	ldr	r3, [pc, #304]	; (8001f50 <displayInit+0x248>)
 8001e20:	0019      	movs	r1, r3
 8001e22:	2008      	movs	r0, #8
 8001e24:	f000 fd56 	bl	80028d4 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 4, 0b0100010000010010);
 8001e28:	4b4a      	ldr	r3, [pc, #296]	; (8001f54 <displayInit+0x24c>)
 8001e2a:	0019      	movs	r1, r3
 8001e2c:	2009      	movs	r0, #9
 8001e2e:	f000 fd51 	bl	80028d4 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 5, 0b0100010000010010);
 8001e32:	4b48      	ldr	r3, [pc, #288]	; (8001f54 <displayInit+0x24c>)
 8001e34:	0019      	movs	r1, r3
 8001e36:	200a      	movs	r0, #10
 8001e38:	f000 fd4c 	bl	80028d4 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 6, 0b1000000000001001);
 8001e3c:	4b46      	ldr	r3, [pc, #280]	; (8001f58 <displayInit+0x250>)
 8001e3e:	0019      	movs	r1, r3
 8001e40:	200b      	movs	r0, #11
 8001e42:	f000 fd47 	bl	80028d4 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 7, 0b1000000110001001);
 8001e46:	4b45      	ldr	r3, [pc, #276]	; (8001f5c <displayInit+0x254>)
 8001e48:	0019      	movs	r1, r3
 8001e4a:	200c      	movs	r0, #12
 8001e4c:	f000 fd42 	bl	80028d4 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 8, 0b1000000000001001);
 8001e50:	4b41      	ldr	r3, [pc, #260]	; (8001f58 <displayInit+0x250>)
 8001e52:	0019      	movs	r1, r3
 8001e54:	200d      	movs	r0, #13
 8001e56:	f000 fd3d 	bl	80028d4 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 9, 0b1000000000001001);
 8001e5a:	4b3f      	ldr	r3, [pc, #252]	; (8001f58 <displayInit+0x250>)
 8001e5c:	0019      	movs	r1, r3
 8001e5e:	200e      	movs	r0, #14
 8001e60:	f000 fd38 	bl	80028d4 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 10, 0b0100010000010010);
 8001e64:	4b3b      	ldr	r3, [pc, #236]	; (8001f54 <displayInit+0x24c>)
 8001e66:	0019      	movs	r1, r3
 8001e68:	200f      	movs	r0, #15
 8001e6a:	f000 fd33 	bl	80028d4 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 11, 0b0100010000010010);
 8001e6e:	4b39      	ldr	r3, [pc, #228]	; (8001f54 <displayInit+0x24c>)
 8001e70:	0019      	movs	r1, r3
 8001e72:	2010      	movs	r0, #16
 8001e74:	f000 fd2e 	bl	80028d4 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 12, 0b0010000000000100);
 8001e78:	4b35      	ldr	r3, [pc, #212]	; (8001f50 <displayInit+0x248>)
 8001e7a:	0019      	movs	r1, r3
 8001e7c:	2011      	movs	r0, #17
 8001e7e:	f000 fd29 	bl	80028d4 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 13, 0b0001000000001000);
 8001e82:	4b32      	ldr	r3, [pc, #200]	; (8001f4c <displayInit+0x244>)
 8001e84:	0019      	movs	r1, r3
 8001e86:	2012      	movs	r0, #18
 8001e88:	f000 fd24 	bl	80028d4 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 14, 0b0000110000110000);
 8001e8c:	23c3      	movs	r3, #195	; 0xc3
 8001e8e:	011b      	lsls	r3, r3, #4
 8001e90:	0019      	movs	r1, r3
 8001e92:	2013      	movs	r0, #19
 8001e94:	f000 fd1e 	bl	80028d4 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 15, 0b0000001111000000);
 8001e98:	23f0      	movs	r3, #240	; 0xf0
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	0019      	movs	r1, r3
 8001e9e:	2014      	movs	r0, #20
 8001ea0:	f000 fd18 	bl	80028d4 <NvMem_write>
	}
	//if the color has never been configured (or if somebody configured it to 0,0,0) the Lightshaker doesn't do anything visible, so let's change that
	if (!NvMem_read(NVMEM_AD_GLOBAL_BLUE) && !NvMem_read(NVMEM_AD_GLOBAL_GREEN)
 8001ea4:	2002      	movs	r0, #2
 8001ea6:	f000 fcfb 	bl	80028a0 <NvMem_read>
 8001eaa:	1e03      	subs	r3, r0, #0
 8001eac:	d115      	bne.n	8001eda <displayInit+0x1d2>
 8001eae:	2001      	movs	r0, #1
 8001eb0:	f000 fcf6 	bl	80028a0 <NvMem_read>
 8001eb4:	1e03      	subs	r3, r0, #0
 8001eb6:	d110      	bne.n	8001eda <displayInit+0x1d2>
			&& !NvMem_read(NVMEM_AD_GLOBAL_RED)) {
 8001eb8:	2000      	movs	r0, #0
 8001eba:	f000 fcf1 	bl	80028a0 <NvMem_read>
 8001ebe:	1e03      	subs	r3, r0, #0
 8001ec0:	d10b      	bne.n	8001eda <displayInit+0x1d2>
		NvMem_write(NVMEM_AD_GLOBAL_BLUE, 255);
 8001ec2:	21ff      	movs	r1, #255	; 0xff
 8001ec4:	2002      	movs	r0, #2
 8001ec6:	f000 fd05 	bl	80028d4 <NvMem_write>
		NvMem_write(NVMEM_AD_GLOBAL_GREEN, 255);
 8001eca:	21ff      	movs	r1, #255	; 0xff
 8001ecc:	2001      	movs	r0, #1
 8001ece:	f000 fd01 	bl	80028d4 <NvMem_write>
		NvMem_write(NVMEM_AD_GLOBAL_RED, 255);
 8001ed2:	21ff      	movs	r1, #255	; 0xff
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	f000 fcfd 	bl	80028d4 <NvMem_write>
	}

	//init the display data
	RowsOverscan = NvMem_read(NVMEM_AD_OVERSCAN);
 8001eda:	2004      	movs	r0, #4
 8001edc:	f000 fce0 	bl	80028a0 <NvMem_read>
 8001ee0:	0003      	movs	r3, r0
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	4b1e      	ldr	r3, [pc, #120]	; (8001f60 <displayInit+0x258>)
 8001ee6:	701a      	strb	r2, [r3, #0]
	RowsVisible = NvMem_read(NVMEM_AD_ROWS_VISIBLE);
 8001ee8:	2003      	movs	r0, #3
 8001eea:	f000 fcd9 	bl	80028a0 <NvMem_read>
 8001eee:	0003      	movs	r3, r0
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	4b1c      	ldr	r3, [pc, #112]	; (8001f64 <displayInit+0x25c>)
 8001ef4:	701a      	strb	r2, [r3, #0]

	RowsLogic = RowsVisible + 2 * RowsOverscan;
 8001ef6:	4b1a      	ldr	r3, [pc, #104]	; (8001f60 <displayInit+0x258>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	18db      	adds	r3, r3, r3
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	4b18      	ldr	r3, [pc, #96]	; (8001f64 <displayInit+0x25c>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	18d3      	adds	r3, r2, r3
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	4b17      	ldr	r3, [pc, #92]	; (8001f68 <displayInit+0x260>)
 8001f0c:	701a      	strb	r2, [r3, #0]

	//set the color to whatever is defined in NvMem
	Neopixels_setColorFullRGB(NvMem_read(NVMEM_AD_GLOBAL_RED),
 8001f0e:	2000      	movs	r0, #0
 8001f10:	f000 fcc6 	bl	80028a0 <NvMem_read>
 8001f14:	0003      	movs	r3, r0
 8001f16:	b2dc      	uxtb	r4, r3
			NvMem_read(NVMEM_AD_GLOBAL_GREEN),
 8001f18:	2001      	movs	r0, #1
 8001f1a:	f000 fcc1 	bl	80028a0 <NvMem_read>
 8001f1e:	0003      	movs	r3, r0
	Neopixels_setColorFullRGB(NvMem_read(NVMEM_AD_GLOBAL_RED),
 8001f20:	b2dd      	uxtb	r5, r3
			NvMem_read(NVMEM_AD_GLOBAL_BLUE));
 8001f22:	2002      	movs	r0, #2
 8001f24:	f000 fcbc 	bl	80028a0 <NvMem_read>
 8001f28:	0003      	movs	r3, r0
	Neopixels_setColorFullRGB(NvMem_read(NVMEM_AD_GLOBAL_RED),
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	001a      	movs	r2, r3
 8001f2e:	0029      	movs	r1, r5
 8001f30:	0020      	movs	r0, r4
 8001f32:	f000 fa89 	bl	8002448 <Neopixels_setColorFullRGB>
	Neopixels_setBrightness(31);
 8001f36:	201f      	movs	r0, #31
 8001f38:	f000 facc 	bl	80024d4 <Neopixels_setBrightness>

}
 8001f3c:	46c0      	nop			; (mov r8, r8)
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bdb0      	pop	{r4, r5, r7, pc}
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	00007530 	.word	0x00007530
 8001f48:	40000400 	.word	0x40000400
 8001f4c:	00001008 	.word	0x00001008
 8001f50:	00002004 	.word	0x00002004
 8001f54:	00004412 	.word	0x00004412
 8001f58:	00008009 	.word	0x00008009
 8001f5c:	00008189 	.word	0x00008189
 8001f60:	2000005c 	.word	0x2000005c
 8001f64:	200000a1 	.word	0x200000a1
 8001f68:	200000a2 	.word	0x200000a2

08001f6c <displaySendLine>:

//called 2 times for every row
//first call should switch on the LEDs according to rowData, 2nd should switch them off to insert a blank row
//without this blank row, the rows are squeezed together too much
void displaySendLine() {
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
	//clear interrupt flag
	TIM3->SR &= ~TIM_SR_UIF;
 8001f70:	4b2c      	ldr	r3, [pc, #176]	; (8002024 <displaySendLine+0xb8>)
 8001f72:	8a1b      	ldrh	r3, [r3, #16]
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	4a2b      	ldr	r2, [pc, #172]	; (8002024 <displaySendLine+0xb8>)
 8001f78:	2101      	movs	r1, #1
 8001f7a:	438b      	bics	r3, r1
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	8213      	strh	r3, [r2, #16]

	//left side is the row, right side the gap
	if (DisplayPosition == DISP_POS_ROW_START) {
 8001f80:	4b29      	ldr	r3, [pc, #164]	; (8002028 <displaySendLine+0xbc>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d129      	bne.n	8001fde <displaySendLine+0x72>
		//if row is in the visible area
		if (RowNumber >= RowsOverscan
 8001f8a:	4b28      	ldr	r3, [pc, #160]	; (800202c <displaySendLine+0xc0>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	4b27      	ldr	r3, [pc, #156]	; (8002030 <displaySendLine+0xc4>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d31b      	bcc.n	8001fd2 <displaySendLine+0x66>
				&& RowNumber < RowsOverscan + RowsVisible) {
 8001f9a:	4b24      	ldr	r3, [pc, #144]	; (800202c <displaySendLine+0xc0>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	001a      	movs	r2, r3
 8001fa2:	4b23      	ldr	r3, [pc, #140]	; (8002030 <displaySendLine+0xc4>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	0019      	movs	r1, r3
 8001faa:	4b22      	ldr	r3, [pc, #136]	; (8002034 <displaySendLine+0xc8>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	18cb      	adds	r3, r1, r3
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	da0d      	bge.n	8001fd2 <displaySendLine+0x66>
			Neopixels_setPattern(NvMem_read(NVMEM_AD_PICTURE_START + RowNumber));
 8001fb6:	4b1d      	ldr	r3, [pc, #116]	; (800202c <displaySendLine+0xc0>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	3305      	adds	r3, #5
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	f000 fc6c 	bl	80028a0 <NvMem_read>
 8001fc8:	0003      	movs	r3, r0
 8001fca:	0018      	movs	r0, r3
 8001fcc:	f000 fb3e 	bl	800264c <Neopixels_setPattern>
 8001fd0:	e001      	b.n	8001fd6 <displaySendLine+0x6a>
		} else {
			//switch off the display
			Neopixels_Off();
 8001fd2:	f000 fbf9 	bl	80027c8 <Neopixels_Off>
		}
		DisplayPosition = DISP_POS_GAP_START;
 8001fd6:	4b14      	ldr	r3, [pc, #80]	; (8002028 <displaySendLine+0xbc>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	701a      	strb	r2, [r3, #0]
			TIM3->CR1 &= ~TIM_CR1_CEN;
		}

	}

}
 8001fdc:	e01f      	b.n	800201e <displaySendLine+0xb2>
		Neopixels_Off();
 8001fde:	f000 fbf3 	bl	80027c8 <Neopixels_Off>
		RowNumber += rowStep;
 8001fe2:	4b15      	ldr	r3, [pc, #84]	; (8002038 <displaySendLine+0xcc>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	b25b      	sxtb	r3, r3
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	4b10      	ldr	r3, [pc, #64]	; (800202c <displaySendLine+0xc0>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	18d3      	adds	r3, r2, r3
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	4b0d      	ldr	r3, [pc, #52]	; (800202c <displaySendLine+0xc0>)
 8001ff6:	701a      	strb	r2, [r3, #0]
		DisplayPosition = DISP_POS_ROW_START;
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <displaySendLine+0xbc>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	701a      	strb	r2, [r3, #0]
		if (RowNumber >= RowsLogic) {
 8001ffe:	4b0b      	ldr	r3, [pc, #44]	; (800202c <displaySendLine+0xc0>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	b2da      	uxtb	r2, r3
 8002004:	4b0d      	ldr	r3, [pc, #52]	; (800203c <displaySendLine+0xd0>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	b2db      	uxtb	r3, r3
 800200a:	429a      	cmp	r2, r3
 800200c:	d307      	bcc.n	800201e <displaySendLine+0xb2>
			TIM3->CR1 &= ~TIM_CR1_CEN;
 800200e:	4b05      	ldr	r3, [pc, #20]	; (8002024 <displaySendLine+0xb8>)
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	b29b      	uxth	r3, r3
 8002014:	4a03      	ldr	r2, [pc, #12]	; (8002024 <displaySendLine+0xb8>)
 8002016:	2101      	movs	r1, #1
 8002018:	438b      	bics	r3, r1
 800201a:	b29b      	uxth	r3, r3
 800201c:	8013      	strh	r3, [r2, #0]
}
 800201e:	46c0      	nop			; (mov r8, r8)
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40000400 	.word	0x40000400
 8002028:	200000a0 	.word	0x200000a0
 800202c:	20000040 	.word	0x20000040
 8002030:	2000005c 	.word	0x2000005c
 8002034:	200000a1 	.word	0x200000a1
 8002038:	2000003f 	.word	0x2000003f
 800203c:	200000a2 	.word	0x200000a2

08002040 <displayEndOfLocktime>:

//triggered by TIM2 CompareMatch
void displayEndOfLocktime() {
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
	//clear the flag and read the data (so the sensor releases the INT line)
	EXTI->PR |= EXTI_PR_PR2;
 8002044:	4b0d      	ldr	r3, [pc, #52]	; (800207c <displayEndOfLocktime+0x3c>)
 8002046:	695a      	ldr	r2, [r3, #20]
 8002048:	4b0c      	ldr	r3, [pc, #48]	; (800207c <displayEndOfLocktime+0x3c>)
 800204a:	2104      	movs	r1, #4
 800204c:	430a      	orrs	r2, r1
 800204e:	615a      	str	r2, [r3, #20]
	Accelerometer_read8();
 8002050:	f7ff fdba 	bl	8001bc8 <Accelerometer_read8>

	//reenable the EXTI interrupt
	EXTI->IMR |= EXTI_EMR_MR2;
 8002054:	4b09      	ldr	r3, [pc, #36]	; (800207c <displayEndOfLocktime+0x3c>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	4b08      	ldr	r3, [pc, #32]	; (800207c <displayEndOfLocktime+0x3c>)
 800205a:	2104      	movs	r1, #4
 800205c:	430a      	orrs	r2, r1
 800205e:	601a      	str	r2, [r3, #0]

	//clear Flag for this Interrupt
	TIM2->SR &= ~TIM_SR_CC1IF;
 8002060:	2380      	movs	r3, #128	; 0x80
 8002062:	05db      	lsls	r3, r3, #23
 8002064:	8a1b      	ldrh	r3, [r3, #16]
 8002066:	b29a      	uxth	r2, r3
 8002068:	2380      	movs	r3, #128	; 0x80
 800206a:	05db      	lsls	r3, r3, #23
 800206c:	2102      	movs	r1, #2
 800206e:	438a      	bics	r2, r1
 8002070:	b292      	uxth	r2, r2
 8002072:	821a      	strh	r2, [r3, #16]
}
 8002074:	46c0      	nop			; (mov r8, r8)
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	46c0      	nop			; (mov r8, r8)
 800207c:	40010400 	.word	0x40010400

08002080 <displayFrameStart>:

void displayFrameStart() {
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0

	//deactivate the peak detection for some time after a valid return point
	//by deactivating the EXTI interrupt
	EXTI->IMR &= ~EXTI_EMR_MR2;
 8002086:	4b23      	ldr	r3, [pc, #140]	; (8002114 <displayFrameStart+0x94>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	4b22      	ldr	r3, [pc, #136]	; (8002114 <displayFrameStart+0x94>)
 800208c:	2104      	movs	r1, #4
 800208e:	438a      	bics	r2, r1
 8002090:	601a      	str	r2, [r3, #0]

	//take the counter value from timer2:
	uint32_t tFrame = TIM2->CNT;
 8002092:	2380      	movs	r3, #128	; 0x80
 8002094:	05db      	lsls	r3, r3, #23
 8002096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002098:	607b      	str	r3, [r7, #4]

	//calculate t_row and save it to the auto-reload register of tim3
	TIM3->ARR = (uint16_t) (tFrame / (RowsLogic * 2));
 800209a:	4b1f      	ldr	r3, [pc, #124]	; (8002118 <displayFrameStart+0x98>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	0019      	movs	r1, r3
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f7fe f82f 	bl	8000108 <__udivsi3>
 80020aa:	0003      	movs	r3, r0
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	4b1b      	ldr	r3, [pc, #108]	; (800211c <displayFrameStart+0x9c>)
 80020b0:	62da      	str	r2, [r3, #44]	; 0x2c
	//clear interrupt flag for TIM3
	TIM3->SR &= ~TIM_SR_UIF;
 80020b2:	4b1a      	ldr	r3, [pc, #104]	; (800211c <displayFrameStart+0x9c>)
 80020b4:	8a1b      	ldrh	r3, [r3, #16]
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	4a18      	ldr	r2, [pc, #96]	; (800211c <displayFrameStart+0x9c>)
 80020ba:	2101      	movs	r1, #1
 80020bc:	438b      	bics	r3, r1
 80020be:	b29b      	uxth	r3, r3
 80020c0:	8213      	strh	r3, [r2, #16]
	//reset both timers
	TIM2->EGR |= TIM_EGR_UG;
 80020c2:	2380      	movs	r3, #128	; 0x80
 80020c4:	05db      	lsls	r3, r3, #23
 80020c6:	8a9b      	ldrh	r3, [r3, #20]
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	2380      	movs	r3, #128	; 0x80
 80020cc:	05db      	lsls	r3, r3, #23
 80020ce:	2101      	movs	r1, #1
 80020d0:	430a      	orrs	r2, r1
 80020d2:	b292      	uxth	r2, r2
 80020d4:	829a      	strh	r2, [r3, #20]
	TIM3->EGR |= TIM_EGR_UG;
 80020d6:	4b11      	ldr	r3, [pc, #68]	; (800211c <displayFrameStart+0x9c>)
 80020d8:	8a9b      	ldrh	r3, [r3, #20]
 80020da:	b29b      	uxth	r3, r3
 80020dc:	4a0f      	ldr	r2, [pc, #60]	; (800211c <displayFrameStart+0x9c>)
 80020de:	2101      	movs	r1, #1
 80020e0:	430b      	orrs	r3, r1
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	8293      	strh	r3, [r2, #20]
	//start both timers
	TIM2->CR1 |= TIM_CR1_CEN;
 80020e6:	2380      	movs	r3, #128	; 0x80
 80020e8:	05db      	lsls	r3, r3, #23
 80020ea:	881b      	ldrh	r3, [r3, #0]
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	2380      	movs	r3, #128	; 0x80
 80020f0:	05db      	lsls	r3, r3, #23
 80020f2:	2101      	movs	r1, #1
 80020f4:	430a      	orrs	r2, r1
 80020f6:	b292      	uxth	r2, r2
 80020f8:	801a      	strh	r2, [r3, #0]
	TIM3->CR1 |= TIM_CR1_CEN;
 80020fa:	4b08      	ldr	r3, [pc, #32]	; (800211c <displayFrameStart+0x9c>)
 80020fc:	881b      	ldrh	r3, [r3, #0]
 80020fe:	b29b      	uxth	r3, r3
 8002100:	4a06      	ldr	r2, [pc, #24]	; (800211c <displayFrameStart+0x9c>)
 8002102:	2101      	movs	r1, #1
 8002104:	430b      	orrs	r3, r1
 8002106:	b29b      	uxth	r3, r3
 8002108:	8013      	strh	r3, [r2, #0]
}
 800210a:	46c0      	nop			; (mov r8, r8)
 800210c:	46bd      	mov	sp, r7
 800210e:	b002      	add	sp, #8
 8002110:	bd80      	pop	{r7, pc}
 8002112:	46c0      	nop			; (mov r8, r8)
 8002114:	40010400 	.word	0x40010400
 8002118:	200000a2 	.word	0x200000a2
 800211c:	40000400 	.word	0x40000400

08002120 <displayFindReturnPoint>:

//now this should be called with the sensors IRQ
void displayFindReturnPoint() {
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
	//the Interrupt-flag is not reset until the work in this ISR is done!

	//read the output of the sensor
	//the low-pass filtering is done by the sensor!
	//this also lets the sensor release the interrupt line
	int8_t acc = Accelerometer_read8().x;
 8002126:	f7ff fd4f 	bl	8001bc8 <Accelerometer_read8>
 800212a:	0003      	movs	r3, r0
 800212c:	001a      	movs	r2, r3
 800212e:	003b      	movs	r3, r7
 8002130:	1c11      	adds	r1, r2, #0
 8002132:	7019      	strb	r1, [r3, #0]
 8002134:	0411      	lsls	r1, r2, #16
 8002136:	0e09      	lsrs	r1, r1, #24
 8002138:	7059      	strb	r1, [r3, #1]
 800213a:	0212      	lsls	r2, r2, #8
 800213c:	0e12      	lsrs	r2, r2, #24
 800213e:	709a      	strb	r2, [r3, #2]
 8002140:	1dbb      	adds	r3, r7, #6
 8002142:	003a      	movs	r2, r7
 8002144:	7812      	ldrb	r2, [r2, #0]
 8002146:	701a      	strb	r2, [r3, #0]

	//separate value and sign for faster calculations
	uint8_t accAbs;
	if (acc >= 0) {
 8002148:	1dbb      	adds	r3, r7, #6
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b7f      	cmp	r3, #127	; 0x7f
 800214e:	d804      	bhi.n	800215a <displayFindReturnPoint+0x3a>
		accAbs = acc;
 8002150:	1dfb      	adds	r3, r7, #7
 8002152:	1dba      	adds	r2, r7, #6
 8002154:	7812      	ldrb	r2, [r2, #0]
 8002156:	701a      	strb	r2, [r3, #0]
 8002158:	e004      	b.n	8002164 <displayFindReturnPoint+0x44>
	} else {
		accAbs = -acc;
 800215a:	1dbb      	adds	r3, r7, #6
 800215c:	781a      	ldrb	r2, [r3, #0]
 800215e:	1dfb      	adds	r3, r7, #7
 8002160:	4252      	negs	r2, r2
 8002162:	701a      	strb	r2, [r3, #0]
	 * the return doesn't happen in one point, but takes some time (>10ms)
	 * ->stop the time measurement as soon as the acc gets higher that the threshold,
	 * ->start the next meas and the display if the acc gets lower than the threshold again
	 */

	switch (movementState) {
 8002164:	4b5f      	ldr	r3, [pc, #380]	; (80022e4 <displayFindReturnPoint+0x1c4>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b04      	cmp	r3, #4
 800216c:	d900      	bls.n	8002170 <displayFindReturnPoint+0x50>
 800216e:	e093      	b.n	8002298 <displayFindReturnPoint+0x178>
 8002170:	009a      	lsls	r2, r3, #2
 8002172:	4b5d      	ldr	r3, [pc, #372]	; (80022e8 <displayFindReturnPoint+0x1c8>)
 8002174:	18d3      	adds	r3, r2, r3
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	469f      	mov	pc, r3
	case STATE_UNKNOWN:
		if (accAbs > ACC_RETURN_TH) {	//this could be the first return point
 800217a:	1dfb      	adds	r3, r7, #7
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b64      	cmp	r3, #100	; 0x64
 8002180:	d800      	bhi.n	8002184 <displayFindReturnPoint+0x64>
 8002182:	e080      	b.n	8002286 <displayFindReturnPoint+0x166>
										//stop TIM2
			TIM2->CR1 &= ~TIM_CR1_CEN;
 8002184:	2380      	movs	r3, #128	; 0x80
 8002186:	05db      	lsls	r3, r3, #23
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	b29a      	uxth	r2, r3
 800218c:	2380      	movs	r3, #128	; 0x80
 800218e:	05db      	lsls	r3, r3, #23
 8002190:	2101      	movs	r1, #1
 8002192:	438a      	bics	r2, r1
 8002194:	b292      	uxth	r2, r2
 8002196:	801a      	strh	r2, [r3, #0]
			//prevent TIM3 from triggering a new row by stopping it
			TIM3->CR1 &= ~TIM_CR1_CEN;
 8002198:	4b54      	ldr	r3, [pc, #336]	; (80022ec <displayFindReturnPoint+0x1cc>)
 800219a:	881b      	ldrh	r3, [r3, #0]
 800219c:	b29b      	uxth	r3, r3
 800219e:	4a53      	ldr	r2, [pc, #332]	; (80022ec <displayFindReturnPoint+0x1cc>)
 80021a0:	2101      	movs	r1, #1
 80021a2:	438b      	bics	r3, r1
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	8013      	strh	r3, [r2, #0]

			if (acc > 0) {
 80021a8:	1dbb      	adds	r3, r7, #6
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	b25b      	sxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	dd03      	ble.n	80021ba <displayFindReturnPoint+0x9a>
				movementState = STATE_RIGHT_END;
 80021b2:	4b4c      	ldr	r3, [pc, #304]	; (80022e4 <displayFindReturnPoint+0x1c4>)
 80021b4:	2203      	movs	r2, #3
 80021b6:	701a      	strb	r2, [r3, #0]
			} else {
				movementState = STATE_LEFT_END;
			}
		}
		break;
 80021b8:	e065      	b.n	8002286 <displayFindReturnPoint+0x166>
				movementState = STATE_LEFT_END;
 80021ba:	4b4a      	ldr	r3, [pc, #296]	; (80022e4 <displayFindReturnPoint+0x1c4>)
 80021bc:	2201      	movs	r2, #1
 80021be:	701a      	strb	r2, [r3, #0]
		break;
 80021c0:	e061      	b.n	8002286 <displayFindReturnPoint+0x166>
	case STATE_LEFT_END:
		if (accAbs < ACC_RETURN_TH) {
 80021c2:	1dfb      	adds	r3, r7, #7
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b63      	cmp	r3, #99	; 0x63
 80021c8:	d85f      	bhi.n	800228a <displayFindReturnPoint+0x16a>
			rowStep = 1;
 80021ca:	4b49      	ldr	r3, [pc, #292]	; (80022f0 <displayFindReturnPoint+0x1d0>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	701a      	strb	r2, [r3, #0]
			RowNumber = 0;
 80021d0:	4b48      	ldr	r3, [pc, #288]	; (80022f4 <displayFindReturnPoint+0x1d4>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	701a      	strb	r2, [r3, #0]
			DisplayPosition = DISP_POS_ROW_START;
 80021d6:	4b48      	ldr	r3, [pc, #288]	; (80022f8 <displayFindReturnPoint+0x1d8>)
 80021d8:	2200      	movs	r2, #0
 80021da:	701a      	strb	r2, [r3, #0]
			//end of return phase
			displayFrameStart();
 80021dc:	f7ff ff50 	bl	8002080 <displayFrameStart>
			movementState = STATE_MOVE_FORW;
 80021e0:	4b40      	ldr	r3, [pc, #256]	; (80022e4 <displayFindReturnPoint+0x1c4>)
 80021e2:	2202      	movs	r2, #2
 80021e4:	701a      	strb	r2, [r3, #0]
		}
		break;
 80021e6:	e050      	b.n	800228a <displayFindReturnPoint+0x16a>
	case STATE_RIGHT_END:
		if (accAbs < ACC_RETURN_TH) {
 80021e8:	1dfb      	adds	r3, r7, #7
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b63      	cmp	r3, #99	; 0x63
 80021ee:	d84e      	bhi.n	800228e <displayFindReturnPoint+0x16e>
			//end of return phase
			rowStep = -1;
 80021f0:	4b3f      	ldr	r3, [pc, #252]	; (80022f0 <displayFindReturnPoint+0x1d0>)
 80021f2:	22ff      	movs	r2, #255	; 0xff
 80021f4:	701a      	strb	r2, [r3, #0]
			RowNumber = RowsLogic;
 80021f6:	4b41      	ldr	r3, [pc, #260]	; (80022fc <displayFindReturnPoint+0x1dc>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	4b3d      	ldr	r3, [pc, #244]	; (80022f4 <displayFindReturnPoint+0x1d4>)
 80021fe:	701a      	strb	r2, [r3, #0]
			DisplayPosition = DISP_POS_GAP_START;
 8002200:	4b3d      	ldr	r3, [pc, #244]	; (80022f8 <displayFindReturnPoint+0x1d8>)
 8002202:	2201      	movs	r2, #1
 8002204:	701a      	strb	r2, [r3, #0]
			displayFrameStart();
 8002206:	f7ff ff3b 	bl	8002080 <displayFrameStart>

			movementState = STATE_MOVE_BACKW;
 800220a:	4b36      	ldr	r3, [pc, #216]	; (80022e4 <displayFindReturnPoint+0x1c4>)
 800220c:	2204      	movs	r2, #4
 800220e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002210:	e03d      	b.n	800228e <displayFindReturnPoint+0x16e>
	case STATE_MOVE_FORW:
		if (acc > ACC_RETURN_TH) {
 8002212:	1dbb      	adds	r3, r7, #6
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	b25b      	sxtb	r3, r3
 8002218:	2b64      	cmp	r3, #100	; 0x64
 800221a:	dd3a      	ble.n	8002292 <displayFindReturnPoint+0x172>
			//stop TIM2
			TIM2->CR1 &= ~TIM_CR1_CEN;
 800221c:	2380      	movs	r3, #128	; 0x80
 800221e:	05db      	lsls	r3, r3, #23
 8002220:	881b      	ldrh	r3, [r3, #0]
 8002222:	b29a      	uxth	r2, r3
 8002224:	2380      	movs	r3, #128	; 0x80
 8002226:	05db      	lsls	r3, r3, #23
 8002228:	2101      	movs	r1, #1
 800222a:	438a      	bics	r2, r1
 800222c:	b292      	uxth	r2, r2
 800222e:	801a      	strh	r2, [r3, #0]
			//prevent TIM3 from triggering a new row by stopping it
			TIM3->CR1 &= ~TIM_CR1_CEN;
 8002230:	4b2e      	ldr	r3, [pc, #184]	; (80022ec <displayFindReturnPoint+0x1cc>)
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	b29b      	uxth	r3, r3
 8002236:	4a2d      	ldr	r2, [pc, #180]	; (80022ec <displayFindReturnPoint+0x1cc>)
 8002238:	2101      	movs	r1, #1
 800223a:	438b      	bics	r3, r1
 800223c:	b29b      	uxth	r3, r3
 800223e:	8013      	strh	r3, [r2, #0]
			//switch off the display
			Neopixels_Off();
 8002240:	f000 fac2 	bl	80027c8 <Neopixels_Off>
			movementState = STATE_RIGHT_END;
 8002244:	4b27      	ldr	r3, [pc, #156]	; (80022e4 <displayFindReturnPoint+0x1c4>)
 8002246:	2203      	movs	r2, #3
 8002248:	701a      	strb	r2, [r3, #0]
		}
		break;
 800224a:	e022      	b.n	8002292 <displayFindReturnPoint+0x172>
	case STATE_MOVE_BACKW:
		if (acc < -ACC_RETURN_TH) {
 800224c:	1dbb      	adds	r3, r7, #6
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	b25b      	sxtb	r3, r3
 8002252:	3364      	adds	r3, #100	; 0x64
 8002254:	da1f      	bge.n	8002296 <displayFindReturnPoint+0x176>
			//stop TIM2
			TIM2->CR1 &= ~TIM_CR1_CEN;
 8002256:	2380      	movs	r3, #128	; 0x80
 8002258:	05db      	lsls	r3, r3, #23
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	b29a      	uxth	r2, r3
 800225e:	2380      	movs	r3, #128	; 0x80
 8002260:	05db      	lsls	r3, r3, #23
 8002262:	2101      	movs	r1, #1
 8002264:	438a      	bics	r2, r1
 8002266:	b292      	uxth	r2, r2
 8002268:	801a      	strh	r2, [r3, #0]
			//prevent TIM3 from triggering a new row by stopping it
			TIM3->CR1 &= ~TIM_CR1_CEN;
 800226a:	4b20      	ldr	r3, [pc, #128]	; (80022ec <displayFindReturnPoint+0x1cc>)
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	b29b      	uxth	r3, r3
 8002270:	4a1e      	ldr	r2, [pc, #120]	; (80022ec <displayFindReturnPoint+0x1cc>)
 8002272:	2101      	movs	r1, #1
 8002274:	438b      	bics	r3, r1
 8002276:	b29b      	uxth	r3, r3
 8002278:	8013      	strh	r3, [r2, #0]
			//switch off the display
			Neopixels_Off();
 800227a:	f000 faa5 	bl	80027c8 <Neopixels_Off>
			movementState = STATE_LEFT_END;
 800227e:	4b19      	ldr	r3, [pc, #100]	; (80022e4 <displayFindReturnPoint+0x1c4>)
 8002280:	2201      	movs	r2, #1
 8002282:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002284:	e007      	b.n	8002296 <displayFindReturnPoint+0x176>
		break;
 8002286:	46c0      	nop			; (mov r8, r8)
 8002288:	e006      	b.n	8002298 <displayFindReturnPoint+0x178>
		break;
 800228a:	46c0      	nop			; (mov r8, r8)
 800228c:	e004      	b.n	8002298 <displayFindReturnPoint+0x178>
		break;
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	e002      	b.n	8002298 <displayFindReturnPoint+0x178>
		break;
 8002292:	46c0      	nop			; (mov r8, r8)
 8002294:	e000      	b.n	8002298 <displayFindReturnPoint+0x178>
		break;
 8002296:	46c0      	nop			; (mov r8, r8)
	}

	//no state other than STATE_UNKNOWN should last longer than T_FRAME_MAX
	//-> if TIM2 exceeds this time, stop it and
	//if this value is out of bounds, reset TIM2 and return to STATE_UNKNOWN
	if (TIM2->CNT > T_FRAME_MAX) {	//reset the counter:
 8002298:	2380      	movs	r3, #128	; 0x80
 800229a:	05db      	lsls	r3, r3, #23
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229e:	4a18      	ldr	r2, [pc, #96]	; (8002300 <displayFindReturnPoint+0x1e0>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d918      	bls.n	80022d6 <displayFindReturnPoint+0x1b6>
		TIM2->EGR |= TIM_EGR_UG;
 80022a4:	2380      	movs	r3, #128	; 0x80
 80022a6:	05db      	lsls	r3, r3, #23
 80022a8:	8a9b      	ldrh	r3, [r3, #20]
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	2380      	movs	r3, #128	; 0x80
 80022ae:	05db      	lsls	r3, r3, #23
 80022b0:	2101      	movs	r1, #1
 80022b2:	430a      	orrs	r2, r1
 80022b4:	b292      	uxth	r2, r2
 80022b6:	829a      	strh	r2, [r3, #20]
		//and stop it
		TIM2->CR1 |= TIM_CR1_CEN;
 80022b8:	2380      	movs	r3, #128	; 0x80
 80022ba:	05db      	lsls	r3, r3, #23
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	b29a      	uxth	r2, r3
 80022c0:	2380      	movs	r3, #128	; 0x80
 80022c2:	05db      	lsls	r3, r3, #23
 80022c4:	2101      	movs	r1, #1
 80022c6:	430a      	orrs	r2, r1
 80022c8:	b292      	uxth	r2, r2
 80022ca:	801a      	strh	r2, [r3, #0]
		//switch off the display
		Neopixels_Off();
 80022cc:	f000 fa7c 	bl	80027c8 <Neopixels_Off>
		//set state
		movementState = STATE_UNKNOWN;
 80022d0:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <displayFindReturnPoint+0x1c4>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	701a      	strb	r2, [r3, #0]
	}

	EXTI_ClearITPendingBit(EXTI_Line2);
 80022d6:	2004      	movs	r0, #4
 80022d8:	f7fe f916 	bl	8000508 <EXTI_ClearITPendingBit>

}
 80022dc:	46c0      	nop			; (mov r8, r8)
 80022de:	46bd      	mov	sp, r7
 80022e0:	b002      	add	sp, #8
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	200000a3 	.word	0x200000a3
 80022e8:	08002dd4 	.word	0x08002dd4
 80022ec:	40000400 	.word	0x40000400
 80022f0:	2000003f 	.word	0x2000003f
 80022f4:	20000040 	.word	0x20000040
 80022f8:	200000a0 	.word	0x200000a0
 80022fc:	200000a2 	.word	0x200000a2
 8002300:	003fffc0 	.word	0x003fffc0

08002304 <Neopixels_init>:

#define LED_CNT		16
colorVrgb leds[LED_CNT];
uint8_t spiSendData[12 + 4 * LED_CNT];

void Neopixels_init() {
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0

	//that's what a bare-metal implementation would look like:

	//enable clock for periphery modules
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_DMAEN;
 800230a:	4b31      	ldr	r3, [pc, #196]	; (80023d0 <Neopixels_init+0xcc>)
 800230c:	695a      	ldr	r2, [r3, #20]
 800230e:	4b30      	ldr	r3, [pc, #192]	; (80023d0 <Neopixels_init+0xcc>)
 8002310:	4930      	ldr	r1, [pc, #192]	; (80023d4 <Neopixels_init+0xd0>)
 8002312:	430a      	orrs	r2, r1
 8002314:	615a      	str	r2, [r3, #20]
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8002316:	4b2e      	ldr	r3, [pc, #184]	; (80023d0 <Neopixels_init+0xcc>)
 8002318:	699a      	ldr	r2, [r3, #24]
 800231a:	4b2d      	ldr	r3, [pc, #180]	; (80023d0 <Neopixels_init+0xcc>)
 800231c:	2180      	movs	r1, #128	; 0x80
 800231e:	0149      	lsls	r1, r1, #5
 8002320:	430a      	orrs	r2, r1
 8002322:	619a      	str	r2, [r3, #24]

	//gpio
	//configure PINs PA7 and PA5 as AF out
	GPIOA->MODER &= ~(GPIO_MODER_MODER5 | GPIO_MODER_MODER7);
 8002324:	2390      	movs	r3, #144	; 0x90
 8002326:	05db      	lsls	r3, r3, #23
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	2390      	movs	r3, #144	; 0x90
 800232c:	05db      	lsls	r3, r3, #23
 800232e:	492a      	ldr	r1, [pc, #168]	; (80023d8 <Neopixels_init+0xd4>)
 8002330:	400a      	ands	r2, r1
 8002332:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= GPIO_MODER_MODER5_1 | GPIO_MODER_MODER7_1;
 8002334:	2390      	movs	r3, #144	; 0x90
 8002336:	05db      	lsls	r3, r3, #23
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	2390      	movs	r3, #144	; 0x90
 800233c:	05db      	lsls	r3, r3, #23
 800233e:	2188      	movs	r1, #136	; 0x88
 8002340:	0209      	lsls	r1, r1, #8
 8002342:	430a      	orrs	r2, r1
 8002344:	601a      	str	r2, [r3, #0]
	//configure PINs PA7 and PA5 as high speed out
	GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR5 | GPIO_OSPEEDER_OSPEEDR7;
 8002346:	2390      	movs	r3, #144	; 0x90
 8002348:	05db      	lsls	r3, r3, #23
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	2390      	movs	r3, #144	; 0x90
 800234e:	05db      	lsls	r3, r3, #23
 8002350:	21cc      	movs	r1, #204	; 0xcc
 8002352:	0209      	lsls	r1, r1, #8
 8002354:	430a      	orrs	r2, r1
 8002356:	609a      	str	r2, [r3, #8]

	//init the SPI module
	//Full-Duplex Master, NSS pin not used, Clock Prescaler 8, MSB first, Cpol 1, CPHA 1
	SPI1->CR1 = SPI_CR1_SSM | SPI_CR1_SSI | SPI_CR1_BR_1 | SPI_CR1_MSTR
 8002358:	4b20      	ldr	r3, [pc, #128]	; (80023dc <Neopixels_init+0xd8>)
 800235a:	4a21      	ldr	r2, [pc, #132]	; (80023e0 <Neopixels_init+0xdc>)
 800235c:	801a      	strh	r2, [r3, #0]
			| SPI_CR1_CPOL | SPI_CR1_CPHA;
	//data size 8b (default in CR2)
	//enable dma request for tx
	SPI1->CR2 = SPI_CR2_TXDMAEN;
 800235e:	4b1f      	ldr	r3, [pc, #124]	; (80023dc <Neopixels_init+0xd8>)
 8002360:	2202      	movs	r2, #2
 8002362:	809a      	strh	r2, [r3, #4]
	//enable SPI:
	SPI1->CR1 |= SPI_CR1_SPE;
 8002364:	4b1d      	ldr	r3, [pc, #116]	; (80023dc <Neopixels_init+0xd8>)
 8002366:	881b      	ldrh	r3, [r3, #0]
 8002368:	b29b      	uxth	r3, r3
 800236a:	4a1c      	ldr	r2, [pc, #112]	; (80023dc <Neopixels_init+0xd8>)
 800236c:	2140      	movs	r1, #64	; 0x40
 800236e:	430b      	orrs	r3, r1
 8002370:	b29b      	uxth	r3, r3
 8002372:	8013      	strh	r3, [r2, #0]

	//config DMA for SPI TX
	//priority high, memToPer, Memory Increment
	DMA1_Channel3->CCR |= DMA_CCR_PL_1 | DMA_CCR_MINC | DMA_CCR_DIR;
 8002374:	4b1b      	ldr	r3, [pc, #108]	; (80023e4 <Neopixels_init+0xe0>)
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	4b1a      	ldr	r3, [pc, #104]	; (80023e4 <Neopixels_init+0xe0>)
 800237a:	491b      	ldr	r1, [pc, #108]	; (80023e8 <Neopixels_init+0xe4>)
 800237c:	430a      	orrs	r2, r1
 800237e:	601a      	str	r2, [r3, #0]
	//memory Address
	DMA1_Channel3->CMAR = (uint32_t) spiSendData;
 8002380:	4b18      	ldr	r3, [pc, #96]	; (80023e4 <Neopixels_init+0xe0>)
 8002382:	4a1a      	ldr	r2, [pc, #104]	; (80023ec <Neopixels_init+0xe8>)
 8002384:	60da      	str	r2, [r3, #12]
	//peripheral address
	DMA1_Channel3->CPAR = (uint32_t) &(SPI1->DR);
 8002386:	4b17      	ldr	r3, [pc, #92]	; (80023e4 <Neopixels_init+0xe0>)
 8002388:	4a19      	ldr	r2, [pc, #100]	; (80023f0 <Neopixels_init+0xec>)
 800238a:	609a      	str	r2, [r3, #8]

	Neopixels_Off();
 800238c:	f000 fa1c 	bl	80027c8 <Neopixels_Off>
	Neopixels_setColor(COLOR_WHITE);
 8002390:	2007      	movs	r0, #7
 8002392:	f000 f87b 	bl	800248c <Neopixels_setColor>
	globalColor.global = 10;
 8002396:	4b17      	ldr	r3, [pc, #92]	; (80023f4 <Neopixels_init+0xf0>)
 8002398:	220a      	movs	r2, #10
 800239a:	701a      	strb	r2, [r3, #0]

	//LED-Test
	for(uint8_t i = 0; i<16; i++) {
 800239c:	1dfb      	adds	r3, r7, #7
 800239e:	2200      	movs	r2, #0
 80023a0:	701a      	strb	r2, [r3, #0]
 80023a2:	e00c      	b.n	80023be <Neopixels_init+0xba>
		Neopixels_Single(i);
 80023a4:	1dfb      	adds	r3, r7, #7
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	0018      	movs	r0, r3
 80023aa:	f000 f9a5 	bl	80026f8 <Neopixels_Single>
		delay(20);
 80023ae:	2014      	movs	r0, #20
 80023b0:	f7fe ffae 	bl	8001310 <delay>
	for(uint8_t i = 0; i<16; i++) {
 80023b4:	1dfb      	adds	r3, r7, #7
 80023b6:	781a      	ldrb	r2, [r3, #0]
 80023b8:	1dfb      	adds	r3, r7, #7
 80023ba:	3201      	adds	r2, #1
 80023bc:	701a      	strb	r2, [r3, #0]
 80023be:	1dfb      	adds	r3, r7, #7
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b0f      	cmp	r3, #15
 80023c4:	d9ee      	bls.n	80023a4 <Neopixels_init+0xa0>
	}
}
 80023c6:	46c0      	nop			; (mov r8, r8)
 80023c8:	46c0      	nop			; (mov r8, r8)
 80023ca:	46bd      	mov	sp, r7
 80023cc:	b002      	add	sp, #8
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40021000 	.word	0x40021000
 80023d4:	00020001 	.word	0x00020001
 80023d8:	ffff33ff 	.word	0xffff33ff
 80023dc:	40013000 	.word	0x40013000
 80023e0:	00000317 	.word	0x00000317
 80023e4:	40020030 	.word	0x40020030
 80023e8:	00002090 	.word	0x00002090
 80023ec:	200000e4 	.word	0x200000e4
 80023f0:	4001300c 	.word	0x4001300c
 80023f4:	20000048 	.word	0x20000048

080023f8 <Neopixels_setColorHSV>:
 * @param h: hue (position on a color-circle) 0...1535
 * @param s: saturation (how intense the color is. 0 is grey or white) 0...255
 * @param v: value (the brightness - 0 is black or off in case of leds) 0...255
 */
void Neopixels_setColorHSV(uint16_t h, uint8_t s, uint8_t v)
{
 80023f8:	b590      	push	{r4, r7, lr}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af02      	add	r7, sp, #8
 80023fe:	0004      	movs	r4, r0
 8002400:	0008      	movs	r0, r1
 8002402:	0011      	movs	r1, r2
 8002404:	1dbb      	adds	r3, r7, #6
 8002406:	1c22      	adds	r2, r4, #0
 8002408:	801a      	strh	r2, [r3, #0]
 800240a:	1d7b      	adds	r3, r7, #5
 800240c:	1c02      	adds	r2, r0, #0
 800240e:	701a      	strb	r2, [r3, #0]
 8002410:	1d3b      	adds	r3, r7, #4
 8002412:	1c0a      	adds	r2, r1, #0
 8002414:	701a      	strb	r2, [r3, #0]
	fast_hsv2rgb_32bit(h, s, v, &globalColor.red, &globalColor.green, &globalColor.blue);
 8002416:	4c09      	ldr	r4, [pc, #36]	; (800243c <Neopixels_setColorHSV+0x44>)
 8002418:	1d3b      	adds	r3, r7, #4
 800241a:	781a      	ldrb	r2, [r3, #0]
 800241c:	1d7b      	adds	r3, r7, #5
 800241e:	7819      	ldrb	r1, [r3, #0]
 8002420:	1dbb      	adds	r3, r7, #6
 8002422:	8818      	ldrh	r0, [r3, #0]
 8002424:	4b06      	ldr	r3, [pc, #24]	; (8002440 <Neopixels_setColorHSV+0x48>)
 8002426:	9301      	str	r3, [sp, #4]
 8002428:	4b06      	ldr	r3, [pc, #24]	; (8002444 <Neopixels_setColorHSV+0x4c>)
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	0023      	movs	r3, r4
 800242e:	f000 fb79 	bl	8002b24 <fast_hsv2rgb_32bit>
}
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	46bd      	mov	sp, r7
 8002436:	b003      	add	sp, #12
 8002438:	bd90      	pop	{r4, r7, pc}
 800243a:	46c0      	nop			; (mov r8, r8)
 800243c:	2000004b 	.word	0x2000004b
 8002440:	20000049 	.word	0x20000049
 8002444:	2000004a 	.word	0x2000004a

08002448 <Neopixels_setColorFullRGB>:
void Neopixels_setColorFullRGB(uint8_t red, uint8_t green, uint8_t blue) {
 8002448:	b590      	push	{r4, r7, lr}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	0004      	movs	r4, r0
 8002450:	0008      	movs	r0, r1
 8002452:	0011      	movs	r1, r2
 8002454:	1dfb      	adds	r3, r7, #7
 8002456:	1c22      	adds	r2, r4, #0
 8002458:	701a      	strb	r2, [r3, #0]
 800245a:	1dbb      	adds	r3, r7, #6
 800245c:	1c02      	adds	r2, r0, #0
 800245e:	701a      	strb	r2, [r3, #0]
 8002460:	1d7b      	adds	r3, r7, #5
 8002462:	1c0a      	adds	r2, r1, #0
 8002464:	701a      	strb	r2, [r3, #0]
	globalColor.red = red;
 8002466:	4b08      	ldr	r3, [pc, #32]	; (8002488 <Neopixels_setColorFullRGB+0x40>)
 8002468:	1dfa      	adds	r2, r7, #7
 800246a:	7812      	ldrb	r2, [r2, #0]
 800246c:	70da      	strb	r2, [r3, #3]
	globalColor.green = green;
 800246e:	4b06      	ldr	r3, [pc, #24]	; (8002488 <Neopixels_setColorFullRGB+0x40>)
 8002470:	1dba      	adds	r2, r7, #6
 8002472:	7812      	ldrb	r2, [r2, #0]
 8002474:	709a      	strb	r2, [r3, #2]
	globalColor.blue = blue;
 8002476:	4b04      	ldr	r3, [pc, #16]	; (8002488 <Neopixels_setColorFullRGB+0x40>)
 8002478:	1d7a      	adds	r2, r7, #5
 800247a:	7812      	ldrb	r2, [r2, #0]
 800247c:	705a      	strb	r2, [r3, #1]
}
 800247e:	46c0      	nop			; (mov r8, r8)
 8002480:	46bd      	mov	sp, r7
 8002482:	b003      	add	sp, #12
 8002484:	bd90      	pop	{r4, r7, pc}
 8002486:	46c0      	nop			; (mov r8, r8)
 8002488:	20000048 	.word	0x20000048

0800248c <Neopixels_setColor>:

void Neopixels_setColor(uint8_t color_idx)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	0002      	movs	r2, r0
 8002494:	1dfb      	adds	r3, r7, #7
 8002496:	701a      	strb	r2, [r3, #0]
	globalColor.blue = (color_idx&1)<<7;
 8002498:	1dfb      	adds	r3, r7, #7
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	01db      	lsls	r3, r3, #7
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <Neopixels_setColor+0x44>)
 80024a2:	705a      	strb	r2, [r3, #1]
	globalColor.green = (color_idx&2)<<6;
 80024a4:	1dfb      	adds	r3, r7, #7
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	019b      	lsls	r3, r3, #6
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	227f      	movs	r2, #127	; 0x7f
 80024ae:	4393      	bics	r3, r2
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	4b07      	ldr	r3, [pc, #28]	; (80024d0 <Neopixels_setColor+0x44>)
 80024b4:	709a      	strb	r2, [r3, #2]
	globalColor.red = (color_idx&4)<<5;
 80024b6:	1dfb      	adds	r3, r7, #7
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	015b      	lsls	r3, r3, #5
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	227f      	movs	r2, #127	; 0x7f
 80024c0:	4393      	bics	r3, r2
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	4b02      	ldr	r3, [pc, #8]	; (80024d0 <Neopixels_setColor+0x44>)
 80024c6:	70da      	strb	r2, [r3, #3]
}
 80024c8:	46c0      	nop			; (mov r8, r8)
 80024ca:	46bd      	mov	sp, r7
 80024cc:	b002      	add	sp, #8
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	20000048 	.word	0x20000048

080024d4 <Neopixels_setBrightness>:

void Neopixels_setBrightness(uint8_t brightness)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	0002      	movs	r2, r0
 80024dc:	1dfb      	adds	r3, r7, #7
 80024de:	701a      	strb	r2, [r3, #0]
	//the global-value in the Led-frame is only 5 bit (max.31)!
	if (brightness > 0x1F) {
 80024e0:	1dfb      	adds	r3, r7, #7
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2b1f      	cmp	r3, #31
 80024e6:	d902      	bls.n	80024ee <Neopixels_setBrightness+0x1a>
		brightness = 0x1F;
 80024e8:	1dfb      	adds	r3, r7, #7
 80024ea:	221f      	movs	r2, #31
 80024ec:	701a      	strb	r2, [r3, #0]
	}
	globalColor.global = brightness;
 80024ee:	4b04      	ldr	r3, [pc, #16]	; (8002500 <Neopixels_setBrightness+0x2c>)
 80024f0:	1dfa      	adds	r2, r7, #7
 80024f2:	7812      	ldrb	r2, [r2, #0]
 80024f4:	701a      	strb	r2, [r3, #0]
}
 80024f6:	46c0      	nop			; (mov r8, r8)
 80024f8:	46bd      	mov	sp, r7
 80024fa:	b002      	add	sp, #8
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	20000048 	.word	0x20000048

08002504 <updateStripe>:

void updateStripe() {
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
	uint8_t ledIdx = 0;
 800250a:	1dfb      	adds	r3, r7, #7
 800250c:	2200      	movs	r2, #0
 800250e:	701a      	strb	r2, [r3, #0]
	uint8_t byteIdx = 0;
 8002510:	1dbb      	adds	r3, r7, #6
 8002512:	2200      	movs	r2, #0
 8002514:	701a      	strb	r2, [r3, #0]

	//disable the DMA channel
	DMA1_Channel3->CCR &= ~DMA_CCR_EN;
 8002516:	4b4a      	ldr	r3, [pc, #296]	; (8002640 <updateStripe+0x13c>)
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	4b49      	ldr	r3, [pc, #292]	; (8002640 <updateStripe+0x13c>)
 800251c:	2101      	movs	r1, #1
 800251e:	438a      	bics	r2, r1
 8002520:	601a      	str	r2, [r3, #0]
	//start frame
	for (uint8_t i = 0; i < 4; i++) {
 8002522:	1d7b      	adds	r3, r7, #5
 8002524:	2200      	movs	r2, #0
 8002526:	701a      	strb	r2, [r3, #0]
 8002528:	e00e      	b.n	8002548 <updateStripe+0x44>
		spiSendData[byteIdx] = 0x00;
 800252a:	1dbb      	adds	r3, r7, #6
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	4a45      	ldr	r2, [pc, #276]	; (8002644 <updateStripe+0x140>)
 8002530:	2100      	movs	r1, #0
 8002532:	54d1      	strb	r1, [r2, r3]
		byteIdx++;
 8002534:	1dbb      	adds	r3, r7, #6
 8002536:	781a      	ldrb	r2, [r3, #0]
 8002538:	1dbb      	adds	r3, r7, #6
 800253a:	3201      	adds	r2, #1
 800253c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 4; i++) {
 800253e:	1d7b      	adds	r3, r7, #5
 8002540:	781a      	ldrb	r2, [r3, #0]
 8002542:	1d7b      	adds	r3, r7, #5
 8002544:	3201      	adds	r2, #1
 8002546:	701a      	strb	r2, [r3, #0]
 8002548:	1d7b      	adds	r3, r7, #5
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b03      	cmp	r3, #3
 800254e:	d9ec      	bls.n	800252a <updateStripe+0x26>
	}

	for (uint8_t i = 0; i < LED_CNT; i++) {
 8002550:	1d3b      	adds	r3, r7, #4
 8002552:	2200      	movs	r2, #0
 8002554:	701a      	strb	r2, [r3, #0]
 8002556:	e04b      	b.n	80025f0 <updateStripe+0xec>
		//led frame
		spiSendData[byteIdx] = 0xE0 | (leds[ledIdx].global & 0x1F); //global
 8002558:	1dfb      	adds	r3, r7, #7
 800255a:	781a      	ldrb	r2, [r3, #0]
 800255c:	4b3a      	ldr	r3, [pc, #232]	; (8002648 <updateStripe+0x144>)
 800255e:	0092      	lsls	r2, r2, #2
 8002560:	5cd2      	ldrb	r2, [r2, r3]
 8002562:	1dbb      	adds	r3, r7, #6
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	2120      	movs	r1, #32
 8002568:	4249      	negs	r1, r1
 800256a:	430a      	orrs	r2, r1
 800256c:	b2d1      	uxtb	r1, r2
 800256e:	4a35      	ldr	r2, [pc, #212]	; (8002644 <updateStripe+0x140>)
 8002570:	54d1      	strb	r1, [r2, r3]
		byteIdx++;
 8002572:	1dbb      	adds	r3, r7, #6
 8002574:	781a      	ldrb	r2, [r3, #0]
 8002576:	1dbb      	adds	r3, r7, #6
 8002578:	3201      	adds	r2, #1
 800257a:	701a      	strb	r2, [r3, #0]
		spiSendData[byteIdx] = leds[ledIdx].blue;
 800257c:	1dfb      	adds	r3, r7, #7
 800257e:	781a      	ldrb	r2, [r3, #0]
 8002580:	1dbb      	adds	r3, r7, #6
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	4930      	ldr	r1, [pc, #192]	; (8002648 <updateStripe+0x144>)
 8002586:	0092      	lsls	r2, r2, #2
 8002588:	188a      	adds	r2, r1, r2
 800258a:	3201      	adds	r2, #1
 800258c:	7811      	ldrb	r1, [r2, #0]
 800258e:	4a2d      	ldr	r2, [pc, #180]	; (8002644 <updateStripe+0x140>)
 8002590:	54d1      	strb	r1, [r2, r3]
		byteIdx++;
 8002592:	1dbb      	adds	r3, r7, #6
 8002594:	781a      	ldrb	r2, [r3, #0]
 8002596:	1dbb      	adds	r3, r7, #6
 8002598:	3201      	adds	r2, #1
 800259a:	701a      	strb	r2, [r3, #0]
		spiSendData[byteIdx] = leds[ledIdx].green;
 800259c:	1dfb      	adds	r3, r7, #7
 800259e:	781a      	ldrb	r2, [r3, #0]
 80025a0:	1dbb      	adds	r3, r7, #6
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	4928      	ldr	r1, [pc, #160]	; (8002648 <updateStripe+0x144>)
 80025a6:	0092      	lsls	r2, r2, #2
 80025a8:	188a      	adds	r2, r1, r2
 80025aa:	3202      	adds	r2, #2
 80025ac:	7811      	ldrb	r1, [r2, #0]
 80025ae:	4a25      	ldr	r2, [pc, #148]	; (8002644 <updateStripe+0x140>)
 80025b0:	54d1      	strb	r1, [r2, r3]
		byteIdx++;
 80025b2:	1dbb      	adds	r3, r7, #6
 80025b4:	781a      	ldrb	r2, [r3, #0]
 80025b6:	1dbb      	adds	r3, r7, #6
 80025b8:	3201      	adds	r2, #1
 80025ba:	701a      	strb	r2, [r3, #0]
		spiSendData[byteIdx] = leds[ledIdx].red;
 80025bc:	1dfb      	adds	r3, r7, #7
 80025be:	781a      	ldrb	r2, [r3, #0]
 80025c0:	1dbb      	adds	r3, r7, #6
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	4920      	ldr	r1, [pc, #128]	; (8002648 <updateStripe+0x144>)
 80025c6:	0092      	lsls	r2, r2, #2
 80025c8:	188a      	adds	r2, r1, r2
 80025ca:	3203      	adds	r2, #3
 80025cc:	7811      	ldrb	r1, [r2, #0]
 80025ce:	4a1d      	ldr	r2, [pc, #116]	; (8002644 <updateStripe+0x140>)
 80025d0:	54d1      	strb	r1, [r2, r3]
		byteIdx++;
 80025d2:	1dbb      	adds	r3, r7, #6
 80025d4:	781a      	ldrb	r2, [r3, #0]
 80025d6:	1dbb      	adds	r3, r7, #6
 80025d8:	3201      	adds	r2, #1
 80025da:	701a      	strb	r2, [r3, #0]
		ledIdx++;
 80025dc:	1dfb      	adds	r3, r7, #7
 80025de:	781a      	ldrb	r2, [r3, #0]
 80025e0:	1dfb      	adds	r3, r7, #7
 80025e2:	3201      	adds	r2, #1
 80025e4:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < LED_CNT; i++) {
 80025e6:	1d3b      	adds	r3, r7, #4
 80025e8:	781a      	ldrb	r2, [r3, #0]
 80025ea:	1d3b      	adds	r3, r7, #4
 80025ec:	3201      	adds	r2, #1
 80025ee:	701a      	strb	r2, [r3, #0]
 80025f0:	1d3b      	adds	r3, r7, #4
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b0f      	cmp	r3, #15
 80025f6:	d9af      	bls.n	8002558 <updateStripe+0x54>
	}
	//end frame
	//this is not the Frame as stated in the Datasheet! our LEDs (SK9822) seem to be a bit different from the original APA102 here!
	//but it works this way...
	for (uint8_t i = 0; i < 8; i++) {
 80025f8:	1cfb      	adds	r3, r7, #3
 80025fa:	2200      	movs	r2, #0
 80025fc:	701a      	strb	r2, [r3, #0]
 80025fe:	e00e      	b.n	800261e <updateStripe+0x11a>
		spiSendData[byteIdx] = 0x00;
 8002600:	1dbb      	adds	r3, r7, #6
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	4a0f      	ldr	r2, [pc, #60]	; (8002644 <updateStripe+0x140>)
 8002606:	2100      	movs	r1, #0
 8002608:	54d1      	strb	r1, [r2, r3]
		byteIdx++;
 800260a:	1dbb      	adds	r3, r7, #6
 800260c:	781a      	ldrb	r2, [r3, #0]
 800260e:	1dbb      	adds	r3, r7, #6
 8002610:	3201      	adds	r2, #1
 8002612:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 8; i++) {
 8002614:	1cfb      	adds	r3, r7, #3
 8002616:	781a      	ldrb	r2, [r3, #0]
 8002618:	1cfb      	adds	r3, r7, #3
 800261a:	3201      	adds	r2, #1
 800261c:	701a      	strb	r2, [r3, #0]
 800261e:	1cfb      	adds	r3, r7, #3
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b07      	cmp	r3, #7
 8002624:	d9ec      	bls.n	8002600 <updateStripe+0xfc>
	}

	//now the DMA has to send the spiSendData to the SPI tx fifo :)
	DMA1_Channel3->CNDTR = 12 + 4 * LED_CNT;
 8002626:	4b06      	ldr	r3, [pc, #24]	; (8002640 <updateStripe+0x13c>)
 8002628:	224c      	movs	r2, #76	; 0x4c
 800262a:	605a      	str	r2, [r3, #4]
	DMA1_Channel3->CCR |= DMA_CCR_EN;
 800262c:	4b04      	ldr	r3, [pc, #16]	; (8002640 <updateStripe+0x13c>)
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	4b03      	ldr	r3, [pc, #12]	; (8002640 <updateStripe+0x13c>)
 8002632:	2101      	movs	r1, #1
 8002634:	430a      	orrs	r2, r1
 8002636:	601a      	str	r2, [r3, #0]
}
 8002638:	46c0      	nop			; (mov r8, r8)
 800263a:	46bd      	mov	sp, r7
 800263c:	b002      	add	sp, #8
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40020030 	.word	0x40020030
 8002644:	200000e4 	.word	0x200000e4
 8002648:	200000a4 	.word	0x200000a4

0800264c <Neopixels_setPattern>:

//so far only one global color
void Neopixels_setPattern(uint16_t mask) {
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	0002      	movs	r2, r0
 8002654:	1dbb      	adds	r3, r7, #6
 8002656:	801a      	strh	r2, [r3, #0]

	for (uint16_t i = 0; i < 16; i++) {
 8002658:	230e      	movs	r3, #14
 800265a:	18fb      	adds	r3, r7, r3
 800265c:	2200      	movs	r2, #0
 800265e:	801a      	strh	r2, [r3, #0]
 8002660:	e03a      	b.n	80026d8 <Neopixels_setPattern+0x8c>
		if (mask & (1 << i)) {	//led shall be active
 8002662:	1dbb      	adds	r3, r7, #6
 8002664:	881a      	ldrh	r2, [r3, #0]
 8002666:	210e      	movs	r1, #14
 8002668:	187b      	adds	r3, r7, r1
 800266a:	881b      	ldrh	r3, [r3, #0]
 800266c:	411a      	asrs	r2, r3
 800266e:	0013      	movs	r3, r2
 8002670:	2201      	movs	r2, #1
 8002672:	4013      	ands	r3, r2
 8002674:	d00a      	beq.n	800268c <Neopixels_setPattern+0x40>
			leds[i] = globalColor;
 8002676:	187b      	adds	r3, r7, r1
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	4a1d      	ldr	r2, [pc, #116]	; (80026f0 <Neopixels_setPattern+0xa4>)
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	491d      	ldr	r1, [pc, #116]	; (80026f4 <Neopixels_setPattern+0xa8>)
 8002680:	18d3      	adds	r3, r2, r3
 8002682:	2204      	movs	r2, #4
 8002684:	0018      	movs	r0, r3
 8002686:	f000 fb8f 	bl	8002da8 <memcpy>
 800268a:	e01f      	b.n	80026cc <Neopixels_setPattern+0x80>
		} else {	//led shall be off
			leds[i].global = 0;
 800268c:	200e      	movs	r0, #14
 800268e:	183b      	adds	r3, r7, r0
 8002690:	881a      	ldrh	r2, [r3, #0]
 8002692:	4b17      	ldr	r3, [pc, #92]	; (80026f0 <Neopixels_setPattern+0xa4>)
 8002694:	0092      	lsls	r2, r2, #2
 8002696:	2100      	movs	r1, #0
 8002698:	54d1      	strb	r1, [r2, r3]
			leds[i].blue = 0;
 800269a:	0001      	movs	r1, r0
 800269c:	187b      	adds	r3, r7, r1
 800269e:	881b      	ldrh	r3, [r3, #0]
 80026a0:	4a13      	ldr	r2, [pc, #76]	; (80026f0 <Neopixels_setPattern+0xa4>)
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	18d3      	adds	r3, r2, r3
 80026a6:	3301      	adds	r3, #1
 80026a8:	2200      	movs	r2, #0
 80026aa:	701a      	strb	r2, [r3, #0]
			leds[i].green = 0;
 80026ac:	187b      	adds	r3, r7, r1
 80026ae:	881b      	ldrh	r3, [r3, #0]
 80026b0:	4a0f      	ldr	r2, [pc, #60]	; (80026f0 <Neopixels_setPattern+0xa4>)
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	18d3      	adds	r3, r2, r3
 80026b6:	3302      	adds	r3, #2
 80026b8:	2200      	movs	r2, #0
 80026ba:	701a      	strb	r2, [r3, #0]
			leds[i].red = 0;
 80026bc:	187b      	adds	r3, r7, r1
 80026be:	881b      	ldrh	r3, [r3, #0]
 80026c0:	4a0b      	ldr	r2, [pc, #44]	; (80026f0 <Neopixels_setPattern+0xa4>)
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	18d3      	adds	r3, r2, r3
 80026c6:	3303      	adds	r3, #3
 80026c8:	2200      	movs	r2, #0
 80026ca:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < 16; i++) {
 80026cc:	210e      	movs	r1, #14
 80026ce:	187b      	adds	r3, r7, r1
 80026d0:	881a      	ldrh	r2, [r3, #0]
 80026d2:	187b      	adds	r3, r7, r1
 80026d4:	3201      	adds	r2, #1
 80026d6:	801a      	strh	r2, [r3, #0]
 80026d8:	230e      	movs	r3, #14
 80026da:	18fb      	adds	r3, r7, r3
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	2b0f      	cmp	r3, #15
 80026e0:	d9bf      	bls.n	8002662 <Neopixels_setPattern+0x16>
		}
	}
	updateStripe();
 80026e2:	f7ff ff0f 	bl	8002504 <updateStripe>
}
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	46bd      	mov	sp, r7
 80026ea:	b004      	add	sp, #16
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	46c0      	nop			; (mov r8, r8)
 80026f0:	200000a4 	.word	0x200000a4
 80026f4:	20000048 	.word	0x20000048

080026f8 <Neopixels_Single>:

void Neopixels_Single(uint8_t index) {
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	0002      	movs	r2, r0
 8002700:	1dfb      	adds	r3, r7, #7
 8002702:	701a      	strb	r2, [r3, #0]
	Neopixels_setPattern(1 << index);
 8002704:	1dfb      	adds	r3, r7, #7
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2201      	movs	r2, #1
 800270a:	409a      	lsls	r2, r3
 800270c:	0013      	movs	r3, r2
 800270e:	b29b      	uxth	r3, r3
 8002710:	0018      	movs	r0, r3
 8002712:	f7ff ff9b 	bl	800264c <Neopixels_setPattern>
}
 8002716:	46c0      	nop			; (mov r8, r8)
 8002718:	46bd      	mov	sp, r7
 800271a:	b002      	add	sp, #8
 800271c:	bd80      	pop	{r7, pc}

0800271e <Neopixels_Bargraph>:
/**
 * @param group3: 3 lit pixels are grouped together (every 4th is a gap) to increase readability,
 * as humans are very good at counting up to 3, but poor at counting more than 3
 */
void Neopixels_Bargraph(uint8_t hight, bool group3)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b084      	sub	sp, #16
 8002722:	af00      	add	r7, sp, #0
 8002724:	0002      	movs	r2, r0
 8002726:	1dfb      	adds	r3, r7, #7
 8002728:	701a      	strb	r2, [r3, #0]
 800272a:	1dbb      	adds	r3, r7, #6
 800272c:	1c0a      	adds	r2, r1, #0
 800272e:	701a      	strb	r2, [r3, #0]
	uint16_t pattern = 0;
 8002730:	230e      	movs	r3, #14
 8002732:	18fb      	adds	r3, r7, r3
 8002734:	2200      	movs	r2, #0
 8002736:	801a      	strh	r2, [r3, #0]
	uint8_t leftouts = 0;
 8002738:	230d      	movs	r3, #13
 800273a:	18fb      	adds	r3, r7, r3
 800273c:	2200      	movs	r2, #0
 800273e:	701a      	strb	r2, [r3, #0]
	for(uint8_t ledidx = 0; ledidx < 16; ledidx++)
 8002740:	230c      	movs	r3, #12
 8002742:	18fb      	adds	r3, r7, r3
 8002744:	2200      	movs	r2, #0
 8002746:	701a      	strb	r2, [r3, #0]
 8002748:	e02f      	b.n	80027aa <Neopixels_Bargraph+0x8c>
	{
		if(group3)
 800274a:	1dbb      	adds	r3, r7, #6
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00e      	beq.n	8002770 <Neopixels_Bargraph+0x52>
		{
			if(ledidx % 4 == 3)
 8002752:	230c      	movs	r3, #12
 8002754:	18fb      	adds	r3, r7, r3
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2203      	movs	r2, #3
 800275a:	4013      	ands	r3, r2
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b03      	cmp	r3, #3
 8002760:	d106      	bne.n	8002770 <Neopixels_Bargraph+0x52>
			{
				//every 4th led shall be left out (never be lit and not be counted)
				leftouts++;
 8002762:	210d      	movs	r1, #13
 8002764:	187b      	adds	r3, r7, r1
 8002766:	781a      	ldrb	r2, [r3, #0]
 8002768:	187b      	adds	r3, r7, r1
 800276a:	3201      	adds	r2, #1
 800276c:	701a      	strb	r2, [r3, #0]
				continue;
 800276e:	e016      	b.n	800279e <Neopixels_Bargraph+0x80>
			}
		}
		if(ledidx-leftouts<hight)
 8002770:	210c      	movs	r1, #12
 8002772:	187b      	adds	r3, r7, r1
 8002774:	781a      	ldrb	r2, [r3, #0]
 8002776:	230d      	movs	r3, #13
 8002778:	18fb      	adds	r3, r7, r3
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	1ad2      	subs	r2, r2, r3
 800277e:	1dfb      	adds	r3, r7, #7
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	429a      	cmp	r2, r3
 8002784:	da0b      	bge.n	800279e <Neopixels_Bargraph+0x80>
		{
			pattern += 1<<ledidx;
 8002786:	187b      	adds	r3, r7, r1
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2201      	movs	r2, #1
 800278c:	409a      	lsls	r2, r3
 800278e:	0013      	movs	r3, r2
 8002790:	b299      	uxth	r1, r3
 8002792:	220e      	movs	r2, #14
 8002794:	18bb      	adds	r3, r7, r2
 8002796:	18ba      	adds	r2, r7, r2
 8002798:	8812      	ldrh	r2, [r2, #0]
 800279a:	188a      	adds	r2, r1, r2
 800279c:	801a      	strh	r2, [r3, #0]
	for(uint8_t ledidx = 0; ledidx < 16; ledidx++)
 800279e:	210c      	movs	r1, #12
 80027a0:	187b      	adds	r3, r7, r1
 80027a2:	781a      	ldrb	r2, [r3, #0]
 80027a4:	187b      	adds	r3, r7, r1
 80027a6:	3201      	adds	r2, #1
 80027a8:	701a      	strb	r2, [r3, #0]
 80027aa:	230c      	movs	r3, #12
 80027ac:	18fb      	adds	r3, r7, r3
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b0f      	cmp	r3, #15
 80027b2:	d9ca      	bls.n	800274a <Neopixels_Bargraph+0x2c>
		}

	}
	Neopixels_setPattern(pattern);
 80027b4:	230e      	movs	r3, #14
 80027b6:	18fb      	adds	r3, r7, r3
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	0018      	movs	r0, r3
 80027bc:	f7ff ff46 	bl	800264c <Neopixels_setPattern>
	return;
 80027c0:	46c0      	nop			; (mov r8, r8)
}
 80027c2:	46bd      	mov	sp, r7
 80027c4:	b004      	add	sp, #16
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <Neopixels_Off>:


void Neopixels_Off() {
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
	for (uint16_t i = 0; i < 16; i++) {
 80027ce:	1dbb      	adds	r3, r7, #6
 80027d0:	2200      	movs	r2, #0
 80027d2:	801a      	strh	r2, [r3, #0]
 80027d4:	e022      	b.n	800281c <Neopixels_Off+0x54>

		leds[i].global = 0;
 80027d6:	1dbb      	adds	r3, r7, #6
 80027d8:	881a      	ldrh	r2, [r3, #0]
 80027da:	4b15      	ldr	r3, [pc, #84]	; (8002830 <Neopixels_Off+0x68>)
 80027dc:	0092      	lsls	r2, r2, #2
 80027de:	2100      	movs	r1, #0
 80027e0:	54d1      	strb	r1, [r2, r3]
		leds[i].blue = 0;
 80027e2:	1dbb      	adds	r3, r7, #6
 80027e4:	881b      	ldrh	r3, [r3, #0]
 80027e6:	4a12      	ldr	r2, [pc, #72]	; (8002830 <Neopixels_Off+0x68>)
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	18d3      	adds	r3, r2, r3
 80027ec:	3301      	adds	r3, #1
 80027ee:	2200      	movs	r2, #0
 80027f0:	701a      	strb	r2, [r3, #0]
		leds[i].green = 0;
 80027f2:	1dbb      	adds	r3, r7, #6
 80027f4:	881b      	ldrh	r3, [r3, #0]
 80027f6:	4a0e      	ldr	r2, [pc, #56]	; (8002830 <Neopixels_Off+0x68>)
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	18d3      	adds	r3, r2, r3
 80027fc:	3302      	adds	r3, #2
 80027fe:	2200      	movs	r2, #0
 8002800:	701a      	strb	r2, [r3, #0]
		leds[i].red = 0;
 8002802:	1dbb      	adds	r3, r7, #6
 8002804:	881b      	ldrh	r3, [r3, #0]
 8002806:	4a0a      	ldr	r2, [pc, #40]	; (8002830 <Neopixels_Off+0x68>)
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	18d3      	adds	r3, r2, r3
 800280c:	3303      	adds	r3, #3
 800280e:	2200      	movs	r2, #0
 8002810:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < 16; i++) {
 8002812:	1dbb      	adds	r3, r7, #6
 8002814:	881a      	ldrh	r2, [r3, #0]
 8002816:	1dbb      	adds	r3, r7, #6
 8002818:	3201      	adds	r2, #1
 800281a:	801a      	strh	r2, [r3, #0]
 800281c:	1dbb      	adds	r3, r7, #6
 800281e:	881b      	ldrh	r3, [r3, #0]
 8002820:	2b0f      	cmp	r3, #15
 8002822:	d9d8      	bls.n	80027d6 <Neopixels_Off+0xe>

	}
	updateStripe();
 8002824:	f7ff fe6e 	bl	8002504 <updateStripe>
}
 8002828:	46c0      	nop			; (mov r8, r8)
 800282a:	46bd      	mov	sp, r7
 800282c:	b002      	add	sp, #8
 800282e:	bd80      	pop	{r7, pc}
 8002830:	200000a4 	.word	0x200000a4

08002834 <NvMem_init>:
bool NvMem_Writable;

/**
 * loads user data from flash into memory for easy access and change in the application
 */
void NvMem_init() {
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0

	//enable flash-if clock
	RCC->AHBENR |= RCC_AHBENR_FLITFEN;
 800283a:	4b15      	ldr	r3, [pc, #84]	; (8002890 <NvMem_init+0x5c>)
 800283c:	695a      	ldr	r2, [r3, #20]
 800283e:	4b14      	ldr	r3, [pc, #80]	; (8002890 <NvMem_init+0x5c>)
 8002840:	2110      	movs	r1, #16
 8002842:	430a      	orrs	r2, r1
 8002844:	615a      	str	r2, [r3, #20]

	for (uint16_t ad = 0; ad <= NVMEM_AD_TOP; ad++) {
 8002846:	1dbb      	adds	r3, r7, #6
 8002848:	2200      	movs	r2, #0
 800284a:	801a      	strh	r2, [r3, #0]
 800284c:	e012      	b.n	8002874 <NvMem_init+0x40>
		NvMem_RamBuffer[ad] = ~READ16(NVMEM_FLASH_BASE+2*ad);
 800284e:	1dbb      	adds	r3, r7, #6
 8002850:	881b      	ldrh	r3, [r3, #0]
 8002852:	4a10      	ldr	r2, [pc, #64]	; (8002894 <NvMem_init+0x60>)
 8002854:	4694      	mov	ip, r2
 8002856:	4463      	add	r3, ip
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	881b      	ldrh	r3, [r3, #0]
 800285c:	1dba      	adds	r2, r7, #6
 800285e:	8812      	ldrh	r2, [r2, #0]
 8002860:	43db      	mvns	r3, r3
 8002862:	b299      	uxth	r1, r3
 8002864:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <NvMem_init+0x64>)
 8002866:	0052      	lsls	r2, r2, #1
 8002868:	52d1      	strh	r1, [r2, r3]
	for (uint16_t ad = 0; ad <= NVMEM_AD_TOP; ad++) {
 800286a:	1dbb      	adds	r3, r7, #6
 800286c:	881a      	ldrh	r2, [r3, #0]
 800286e:	1dbb      	adds	r3, r7, #6
 8002870:	3201      	adds	r2, #1
 8002872:	801a      	strh	r2, [r3, #0]
 8002874:	1dbb      	adds	r3, r7, #6
 8002876:	881a      	ldrh	r2, [r3, #0]
 8002878:	2380      	movs	r3, #128	; 0x80
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	429a      	cmp	r2, r3
 800287e:	d3e6      	bcc.n	800284e <NvMem_init+0x1a>
	}
	NvMem_Writable = true;
 8002880:	4b06      	ldr	r3, [pc, #24]	; (800289c <NvMem_init+0x68>)
 8002882:	2201      	movs	r2, #1
 8002884:	701a      	strb	r2, [r3, #0]
}
 8002886:	46c0      	nop			; (mov r8, r8)
 8002888:	46bd      	mov	sp, r7
 800288a:	b002      	add	sp, #8
 800288c:	bd80      	pop	{r7, pc}
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	40021000 	.word	0x40021000
 8002894:	04003e00 	.word	0x04003e00
 8002898:	20000130 	.word	0x20000130
 800289c:	20000530 	.word	0x20000530

080028a0 <NvMem_read>:

/**
 * Reads 16 bit form the user space in flash
 * address: 16-bit address (512 addresses per used flash page)
 */
uint16_t NvMem_read(uint16_t address) {
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	0002      	movs	r2, r0
 80028a8:	1dbb      	adds	r3, r7, #6
 80028aa:	801a      	strh	r2, [r3, #0]
	if (address > NVMEM_AD_TOP) {
 80028ac:	1dbb      	adds	r3, r7, #6
 80028ae:	881a      	ldrh	r2, [r3, #0]
 80028b0:	2380      	movs	r3, #128	; 0x80
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d301      	bcc.n	80028bc <NvMem_read+0x1c>
		return ERR_NVMEM_OUTOFRANGE;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e004      	b.n	80028c6 <NvMem_read+0x26>
	}
	return NvMem_RamBuffer[address];
 80028bc:	1dbb      	adds	r3, r7, #6
 80028be:	881a      	ldrh	r2, [r3, #0]
 80028c0:	4b03      	ldr	r3, [pc, #12]	; (80028d0 <NvMem_read+0x30>)
 80028c2:	0052      	lsls	r2, r2, #1
 80028c4:	5ad3      	ldrh	r3, [r2, r3]
}
 80028c6:	0018      	movs	r0, r3
 80028c8:	46bd      	mov	sp, r7
 80028ca:	b002      	add	sp, #8
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	46c0      	nop			; (mov r8, r8)
 80028d0:	20000130 	.word	0x20000130

080028d4 <NvMem_write>:
 * Writes 16 bit to the user space in flash
 * address: 16-bit address (512 addresses per used flash page)
 * data: data to write
 * returns: errorcode
 */
uint8_t NvMem_write(uint16_t address, uint16_t data) {
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	0002      	movs	r2, r0
 80028dc:	1dbb      	adds	r3, r7, #6
 80028de:	801a      	strh	r2, [r3, #0]
 80028e0:	1d3b      	adds	r3, r7, #4
 80028e2:	1c0a      	adds	r2, r1, #0
 80028e4:	801a      	strh	r2, [r3, #0]
	if (address > NVMEM_AD_TOP) {
 80028e6:	1dbb      	adds	r3, r7, #6
 80028e8:	881a      	ldrh	r2, [r3, #0]
 80028ea:	2380      	movs	r3, #128	; 0x80
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d301      	bcc.n	80028f6 <NvMem_write+0x22>
		return ERR_NVMEM_OUTOFRANGE;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e010      	b.n	8002918 <NvMem_write+0x44>
	}
	if (!NvMem_Writable) {
 80028f6:	4b0a      	ldr	r3, [pc, #40]	; (8002920 <NvMem_write+0x4c>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2201      	movs	r2, #1
 80028fc:	4053      	eors	r3, r2
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <NvMem_write+0x34>
		return ERR_NVMEM_ALREADYWRITTEN;
 8002904:	2302      	movs	r3, #2
 8002906:	e007      	b.n	8002918 <NvMem_write+0x44>
	}
	NvMem_RamBuffer[address] = data;
 8002908:	1dbb      	adds	r3, r7, #6
 800290a:	881a      	ldrh	r2, [r3, #0]
 800290c:	4b05      	ldr	r3, [pc, #20]	; (8002924 <NvMem_write+0x50>)
 800290e:	0052      	lsls	r2, r2, #1
 8002910:	1d39      	adds	r1, r7, #4
 8002912:	8809      	ldrh	r1, [r1, #0]
 8002914:	52d1      	strh	r1, [r2, r3]
	return 0;
 8002916:	2300      	movs	r3, #0
}
 8002918:	0018      	movs	r0, r3
 800291a:	46bd      	mov	sp, r7
 800291c:	b002      	add	sp, #8
 800291e:	bd80      	pop	{r7, pc}
 8002920:	20000530 	.word	0x20000530
 8002924:	20000130 	.word	0x20000130

08002928 <power_init>:
volatile uint8_t power_timer;


uint8_t power_buttonState;

void power_init() {
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
	//enable clock for periphery modules
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 800292e:	2380      	movs	r3, #128	; 0x80
 8002930:	029b      	lsls	r3, r3, #10
 8002932:	2101      	movs	r1, #1
 8002934:	0018      	movs	r0, r3
 8002936:	f7fe f8b7 	bl	8000aa8 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 800293a:	2380      	movs	r3, #128	; 0x80
 800293c:	02db      	lsls	r3, r3, #11
 800293e:	2101      	movs	r1, #1
 8002940:	0018      	movs	r0, r3
 8002942:	f7fe f8b1 	bl	8000aa8 <RCC_AHBPeriphClockCmd>

	//init gpios
	//PB1
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_1;
 8002946:	003b      	movs	r3, r7
 8002948:	2202      	movs	r2, #2
 800294a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 800294c:	003b      	movs	r3, r7
 800294e:	2200      	movs	r2, #0
 8002950:	711a      	strb	r2, [r3, #4]
	GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002952:	003b      	movs	r3, r7
 8002954:	4a1d      	ldr	r2, [pc, #116]	; (80029cc <power_init+0xa4>)
 8002956:	0019      	movs	r1, r3
 8002958:	0010      	movs	r0, r2
 800295a:	f7fd fde3 	bl	8000524 <GPIO_Init>
	//PA4
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_4;
 800295e:	003b      	movs	r3, r7
 8002960:	2210      	movs	r2, #16
 8002962:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8002964:	003b      	movs	r3, r7
 8002966:	2201      	movs	r2, #1
 8002968:	711a      	strb	r2, [r3, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 800296a:	003b      	movs	r3, r7
 800296c:	2200      	movs	r2, #0
 800296e:	719a      	strb	r2, [r3, #6]
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002970:	003a      	movs	r2, r7
 8002972:	2390      	movs	r3, #144	; 0x90
 8002974:	05db      	lsls	r3, r3, #23
 8002976:	0011      	movs	r1, r2
 8002978:	0018      	movs	r0, r3
 800297a:	f7fd fdd3 	bl	8000524 <GPIO_Init>
	GPIO_WriteBit(GPIOA, GPIO_Pin_4, Bit_SET);
 800297e:	2390      	movs	r3, #144	; 0x90
 8002980:	05db      	lsls	r3, r3, #23
 8002982:	2201      	movs	r2, #1
 8002984:	2110      	movs	r1, #16
 8002986:	0018      	movs	r0, r3
 8002988:	f7fd fe83 	bl	8000692 <GPIO_WriteBit>
	//PA1
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_1;
 800298c:	003b      	movs	r3, r7
 800298e:	2202      	movs	r2, #2
 8002990:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 8002992:	003b      	movs	r3, r7
 8002994:	2200      	movs	r2, #0
 8002996:	711a      	strb	r2, [r3, #4]
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002998:	003a      	movs	r2, r7
 800299a:	2390      	movs	r3, #144	; 0x90
 800299c:	05db      	lsls	r3, r3, #23
 800299e:	0011      	movs	r1, r2
 80029a0:	0018      	movs	r0, r3
 80029a2:	f7fd fdbf 	bl	8000524 <GPIO_Init>

	//TODO: implement Vbat measurement

	if(power_UsbPresent())
 80029a6:	f000 f817 	bl	80029d8 <power_UsbPresent>
 80029aa:	1e03      	subs	r3, r0, #0
 80029ac:	d003      	beq.n	80029b6 <power_init+0x8e>
	{
		power_timer = 0;	//if connected to USB, the battery supply is switched off
 80029ae:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <power_init+0xa8>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	701a      	strb	r2, [r3, #0]
 80029b4:	e002      	b.n	80029bc <power_init+0x94>
	}
	else
	{
		power_timer = 100; //the system is always on for at least 10 sec
 80029b6:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <power_init+0xa8>)
 80029b8:	2264      	movs	r2, #100	; 0x64
 80029ba:	701a      	strb	r2, [r3, #0]
	}
	power_flags = 0;
 80029bc:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <power_init+0xac>)
 80029be:	2200      	movs	r2, #0
 80029c0:	701a      	strb	r2, [r3, #0]
}
 80029c2:	46c0      	nop			; (mov r8, r8)
 80029c4:	46bd      	mov	sp, r7
 80029c6:	b002      	add	sp, #8
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	46c0      	nop			; (mov r8, r8)
 80029cc:	48000400 	.word	0x48000400
 80029d0:	20000531 	.word	0x20000531
 80029d4:	2000004c 	.word	0x2000004c

080029d8 <power_UsbPresent>:

uint8_t power_UsbPresent() {
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
	return GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_1);
 80029dc:	4b04      	ldr	r3, [pc, #16]	; (80029f0 <power_UsbPresent+0x18>)
 80029de:	2102      	movs	r1, #2
 80029e0:	0018      	movs	r0, r3
 80029e2:	f7fd fe33 	bl	800064c <GPIO_ReadInputDataBit>
 80029e6:	0003      	movs	r3, r0
}
 80029e8:	0018      	movs	r0, r3
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	46c0      	nop			; (mov r8, r8)
 80029f0:	48000400 	.word	0x48000400

080029f4 <power_hold>:
 * after this time, the battery-supply is switched off
 * max time is 25seconds
 * 0 switches off immediatly
 */
void power_hold(uint8_t sec)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	0002      	movs	r2, r0
 80029fc:	1dfb      	adds	r3, r7, #7
 80029fe:	701a      	strb	r2, [r3, #0]
	if(sec > 25)
 8002a00:	1dfb      	adds	r3, r7, #7
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b19      	cmp	r3, #25
 8002a06:	d902      	bls.n	8002a0e <power_hold+0x1a>
	{
		sec = 25;
 8002a08:	1dfb      	adds	r3, r7, #7
 8002a0a:	2219      	movs	r2, #25
 8002a0c:	701a      	strb	r2, [r3, #0]
	}
	if(!power_UsbPresent())
 8002a0e:	f7ff ffe3 	bl	80029d8 <power_UsbPresent>
 8002a12:	1e03      	subs	r3, r0, #0
 8002a14:	d108      	bne.n	8002a28 <power_hold+0x34>
	{
		power_timer = sec * 10;
 8002a16:	1dfb      	adds	r3, r7, #7
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	1c1a      	adds	r2, r3, #0
 8002a1c:	0092      	lsls	r2, r2, #2
 8002a1e:	18d3      	adds	r3, r2, r3
 8002a20:	18db      	adds	r3, r3, r3
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	4b02      	ldr	r3, [pc, #8]	; (8002a30 <power_hold+0x3c>)
 8002a26:	701a      	strb	r2, [r3, #0]
	}
}
 8002a28:	46c0      	nop			; (mov r8, r8)
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	b002      	add	sp, #8
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	20000531 	.word	0x20000531

08002a34 <power_exec>:
/**
 * has to be called every 100ms - needed for the power_hold and button detection
 *
 */
void power_exec()
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
//========State-Machine for the Button=============================
	switch(power_buttonState)
 8002a38:	4b36      	ldr	r3, [pc, #216]	; (8002b14 <power_exec+0xe0>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d02b      	beq.n	8002a98 <power_exec+0x64>
 8002a40:	dc51      	bgt.n	8002ae6 <power_exec+0xb2>
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d002      	beq.n	8002a4c <power_exec+0x18>
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d00c      	beq.n	8002a64 <power_exec+0x30>
 8002a4a:	e04c      	b.n	8002ae6 <power_exec+0xb2>
	{
	case 0: //released
		//detect button presses
		//the button pulls the pin down, so the logic is inverted!
		if(!GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_1))
 8002a4c:	2390      	movs	r3, #144	; 0x90
 8002a4e:	05db      	lsls	r3, r3, #23
 8002a50:	2102      	movs	r1, #2
 8002a52:	0018      	movs	r0, r3
 8002a54:	f7fd fdfa 	bl	800064c <GPIO_ReadInputDataBit>
 8002a58:	1e03      	subs	r3, r0, #0
 8002a5a:	d141      	bne.n	8002ae0 <power_exec+0xac>
		{
			power_buttonState = 1;	//change state to bouncing
 8002a5c:	4b2d      	ldr	r3, [pc, #180]	; (8002b14 <power_exec+0xe0>)
 8002a5e:	2201      	movs	r2, #1
 8002a60:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002a62:	e03d      	b.n	8002ae0 <power_exec+0xac>
	case 1: //bouncing
		//check if pin is still high
		if(!GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_1))
 8002a64:	2390      	movs	r3, #144	; 0x90
 8002a66:	05db      	lsls	r3, r3, #23
 8002a68:	2102      	movs	r1, #2
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	f7fd fdee 	bl	800064c <GPIO_ReadInputDataBit>
 8002a70:	1e03      	subs	r3, r0, #0
 8002a72:	d10d      	bne.n	8002a90 <power_exec+0x5c>
		{
			//now the button is surely pressed
			power_flags |= POWER_FLAG_SW_PRESS;
 8002a74:	4b28      	ldr	r3, [pc, #160]	; (8002b18 <power_exec+0xe4>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2202      	movs	r2, #2
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	4b26      	ldr	r3, [pc, #152]	; (8002b18 <power_exec+0xe4>)
 8002a80:	701a      	strb	r2, [r3, #0]
			power_buttonHoldTime = 1;
 8002a82:	4b26      	ldr	r3, [pc, #152]	; (8002b1c <power_exec+0xe8>)
 8002a84:	2201      	movs	r2, #1
 8002a86:	701a      	strb	r2, [r3, #0]
			power_buttonState = 2;	//change state to pressed / holding
 8002a88:	4b22      	ldr	r3, [pc, #136]	; (8002b14 <power_exec+0xe0>)
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			power_buttonState = 0; //false alarm -> back to released
		}
		break;
 8002a8e:	e02a      	b.n	8002ae6 <power_exec+0xb2>
			power_buttonState = 0; //false alarm -> back to released
 8002a90:	4b20      	ldr	r3, [pc, #128]	; (8002b14 <power_exec+0xe0>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	701a      	strb	r2, [r3, #0]
		break;
 8002a96:	e026      	b.n	8002ae6 <power_exec+0xb2>
	case 2: //pressed
		//count the holding-time
		power_buttonHoldTime++;
 8002a98:	4b20      	ldr	r3, [pc, #128]	; (8002b1c <power_exec+0xe8>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	4b1e      	ldr	r3, [pc, #120]	; (8002b1c <power_exec+0xe8>)
 8002aa2:	701a      	strb	r2, [r3, #0]
		if(power_buttonHoldTime >= 5)
 8002aa4:	4b1d      	ldr	r3, [pc, #116]	; (8002b1c <power_exec+0xe8>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b04      	cmp	r3, #4
 8002aaa:	d906      	bls.n	8002aba <power_exec+0x86>
		{
			power_flags |= POWER_FLAG_SW_HOLD;
 8002aac:	4b1a      	ldr	r3, [pc, #104]	; (8002b18 <power_exec+0xe4>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2204      	movs	r2, #4
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	4b18      	ldr	r3, [pc, #96]	; (8002b18 <power_exec+0xe4>)
 8002ab8:	701a      	strb	r2, [r3, #0]
		}
		if(GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_1))
 8002aba:	2390      	movs	r3, #144	; 0x90
 8002abc:	05db      	lsls	r3, r3, #23
 8002abe:	2102      	movs	r1, #2
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	f7fd fdc3 	bl	800064c <GPIO_ReadInputDataBit>
 8002ac6:	1e03      	subs	r3, r0, #0
 8002ac8:	d00c      	beq.n	8002ae4 <power_exec+0xb0>
		{
			power_flags |= POWER_FLAG_SW_RELEASE;
 8002aca:	4b13      	ldr	r3, [pc, #76]	; (8002b18 <power_exec+0xe4>)
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	4b10      	ldr	r3, [pc, #64]	; (8002b18 <power_exec+0xe4>)
 8002ad6:	701a      	strb	r2, [r3, #0]
			power_buttonState = 0;	//pin is low -> button was just released
 8002ad8:	4b0e      	ldr	r3, [pc, #56]	; (8002b14 <power_exec+0xe0>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002ade:	e001      	b.n	8002ae4 <power_exec+0xb0>
		break;
 8002ae0:	46c0      	nop			; (mov r8, r8)
 8002ae2:	e000      	b.n	8002ae6 <power_exec+0xb2>
		break;
 8002ae4:	46c0      	nop			; (mov r8, r8)
	}
//=============================================================================

	//count power_hold time and shut down if exceeded
	if (power_timer)
 8002ae6:	4b0e      	ldr	r3, [pc, #56]	; (8002b20 <power_exec+0xec>)
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d007      	beq.n	8002b00 <power_exec+0xcc>
	{
		power_timer--;
 8002af0:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <power_exec+0xec>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	3b01      	subs	r3, #1
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <power_exec+0xec>)
 8002afc:	701a      	strb	r2, [r3, #0]
	else
	{
		//shut down the battery supply
		GPIO_WriteBit(GPIOA, GPIO_Pin_4, Bit_RESET);
	}
}
 8002afe:	e006      	b.n	8002b0e <power_exec+0xda>
		GPIO_WriteBit(GPIOA, GPIO_Pin_4, Bit_RESET);
 8002b00:	2390      	movs	r3, #144	; 0x90
 8002b02:	05db      	lsls	r3, r3, #23
 8002b04:	2200      	movs	r2, #0
 8002b06:	2110      	movs	r1, #16
 8002b08:	0018      	movs	r0, r3
 8002b0a:	f7fd fdc2 	bl	8000692 <GPIO_WriteBit>
}
 8002b0e:	46c0      	nop			; (mov r8, r8)
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	20000532 	.word	0x20000532
 8002b18:	2000004c 	.word	0x2000004c
 8002b1c:	2000004d 	.word	0x2000004d
 8002b20:	20000531 	.word	0x20000531

08002b24 <fast_hsv2rgb_32bit>:
 * IN THE SOFTWARE.
 */
#include "utilHsvToRgb.h"

void fast_hsv2rgb_32bit(uint16_t h, uint8_t s, uint8_t v, uint8_t *r, uint8_t *g , uint8_t *b)
{
 8002b24:	b590      	push	{r4, r7, lr}
 8002b26:	b08b      	sub	sp, #44	; 0x2c
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	0004      	movs	r4, r0
 8002b2c:	0008      	movs	r0, r1
 8002b2e:	0011      	movs	r1, r2
 8002b30:	603b      	str	r3, [r7, #0]
 8002b32:	1dbb      	adds	r3, r7, #6
 8002b34:	1c22      	adds	r2, r4, #0
 8002b36:	801a      	strh	r2, [r3, #0]
 8002b38:	1d7b      	adds	r3, r7, #5
 8002b3a:	1c02      	adds	r2, r0, #0
 8002b3c:	701a      	strb	r2, [r3, #0]
 8002b3e:	1d3b      	adds	r3, r7, #4
 8002b40:	1c0a      	adds	r2, r1, #0
 8002b42:	701a      	strb	r2, [r3, #0]
	HSV_MONOCHROMATIC_TEST(s, v, r, g, b);	// Exit with grayscale if s == 0
 8002b44:	1d7b      	adds	r3, r7, #5
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10c      	bne.n	8002b66 <fast_hsv2rgb_32bit+0x42>
 8002b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b4e:	1d3a      	adds	r2, r7, #4
 8002b50:	7812      	ldrb	r2, [r2, #0]
 8002b52:	701a      	strb	r2, [r3, #0]
 8002b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b56:	781a      	ldrb	r2, [r3, #0]
 8002b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b5a:	701a      	strb	r2, [r3, #0]
 8002b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b5e:	781a      	ldrb	r2, [r3, #0]
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	701a      	strb	r2, [r3, #0]
 8002b64:	e0b7      	b.n	8002cd6 <fast_hsv2rgb_32bit+0x1b2>

	uint8_t sextant = h >> 8;
 8002b66:	1dbb      	adds	r3, r7, #6
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	0a1b      	lsrs	r3, r3, #8
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	2127      	movs	r1, #39	; 0x27
 8002b70:	187b      	adds	r3, r7, r1
 8002b72:	701a      	strb	r2, [r3, #0]

	HSV_SEXTANT_TEST(sextant);		// Optional: Limit hue sextants to defined space
 8002b74:	000a      	movs	r2, r1
 8002b76:	18bb      	adds	r3, r7, r2
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	2b05      	cmp	r3, #5
 8002b7c:	d902      	bls.n	8002b84 <fast_hsv2rgb_32bit+0x60>
 8002b7e:	18bb      	adds	r3, r7, r2
 8002b80:	2205      	movs	r2, #5
 8002b82:	701a      	strb	r2, [r3, #0]

	HSV_POINTER_SWAP(sextant, r, g, b);	// Swap pointers depending which sextant we are in
 8002b84:	2327      	movs	r3, #39	; 0x27
 8002b86:	18fb      	adds	r3, r7, r3
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	d005      	beq.n	8002b9c <fast_hsv2rgb_32bit+0x78>
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	623b      	str	r3, [r7, #32]
 8002b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b96:	603b      	str	r3, [r7, #0]
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b9c:	2327      	movs	r3, #39	; 0x27
 8002b9e:	18fb      	adds	r3, r7, r3
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	2204      	movs	r2, #4
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	d005      	beq.n	8002bb4 <fast_hsv2rgb_32bit+0x90>
 8002ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002baa:	61fb      	str	r3, [r7, #28]
 8002bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bae:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bb4:	2127      	movs	r1, #39	; 0x27
 8002bb6:	187b      	adds	r3, r7, r1
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	2206      	movs	r2, #6
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d10b      	bne.n	8002bd8 <fast_hsv2rgb_32bit+0xb4>
 8002bc0:	187b      	adds	r3, r7, r1
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	d112      	bne.n	8002bf0 <fast_hsv2rgb_32bit+0xcc>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd0:	603b      	str	r3, [r7, #0]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bd6:	e00b      	b.n	8002bf0 <fast_hsv2rgb_32bit+0xcc>
 8002bd8:	2327      	movs	r3, #39	; 0x27
 8002bda:	18fb      	adds	r3, r7, r3
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2201      	movs	r2, #1
 8002be0:	4013      	ands	r3, r2
 8002be2:	d005      	beq.n	8002bf0 <fast_hsv2rgb_32bit+0xcc>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	61bb      	str	r3, [r7, #24]
 8002be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bea:	603b      	str	r3, [r7, #0]
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	63bb      	str	r3, [r7, #56]	; 0x38

	*g = v;		// Top level
 8002bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bf2:	1d3a      	adds	r2, r7, #4
 8002bf4:	7812      	ldrb	r2, [r2, #0]
 8002bf6:	701a      	strb	r2, [r3, #0]
	/*
	 * Bottom level: v * (1.0 - s)
	 * --> (v * (255 - s) + error_corr + 1) / 256
	 */
	uint16_t ww;		// Intermediate result
	ww = v * (255 - s);	// We don't use ~s to prevent size-promotion side effects
 8002bf8:	1d3b      	adds	r3, r7, #4
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	1d7b      	adds	r3, r7, #5
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	21ff      	movs	r1, #255	; 0xff
 8002c04:	1acb      	subs	r3, r1, r3
 8002c06:	b299      	uxth	r1, r3
 8002c08:	2012      	movs	r0, #18
 8002c0a:	183b      	adds	r3, r7, r0
 8002c0c:	434a      	muls	r2, r1
 8002c0e:	801a      	strh	r2, [r3, #0]
	ww += 1;		// Error correction
 8002c10:	183b      	adds	r3, r7, r0
 8002c12:	183a      	adds	r2, r7, r0
 8002c14:	8812      	ldrh	r2, [r2, #0]
 8002c16:	3201      	adds	r2, #1
 8002c18:	801a      	strh	r2, [r3, #0]
	ww += ww >> 8;		// Error correction
 8002c1a:	183b      	adds	r3, r7, r0
 8002c1c:	881b      	ldrh	r3, [r3, #0]
 8002c1e:	0a1b      	lsrs	r3, r3, #8
 8002c20:	b299      	uxth	r1, r3
 8002c22:	183b      	adds	r3, r7, r0
 8002c24:	183a      	adds	r2, r7, r0
 8002c26:	8812      	ldrh	r2, [r2, #0]
 8002c28:	188a      	adds	r2, r1, r2
 8002c2a:	801a      	strh	r2, [r3, #0]
	*b = ww >> 8;
 8002c2c:	183b      	adds	r3, r7, r0
 8002c2e:	881b      	ldrh	r3, [r3, #0]
 8002c30:	0a1b      	lsrs	r3, r3, #8
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c38:	701a      	strb	r2, [r3, #0]

	uint8_t h_fraction = h & 0xff;	// 0...255
 8002c3a:	2111      	movs	r1, #17
 8002c3c:	187b      	adds	r3, r7, r1
 8002c3e:	1dba      	adds	r2, r7, #6
 8002c40:	8812      	ldrh	r2, [r2, #0]
 8002c42:	701a      	strb	r2, [r3, #0]
	uint32_t d;			// Intermediate result

	if(!(sextant & 1)) {
 8002c44:	2327      	movs	r3, #39	; 0x27
 8002c46:	18fb      	adds	r3, r7, r3
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	d122      	bne.n	8002c96 <fast_hsv2rgb_32bit+0x172>
		// *r = ...slope_up...;
		d = v * (uint32_t)((255 << 8) - (uint16_t)(s * (256 - h_fraction)));
 8002c50:	1d3b      	adds	r3, r7, #4
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	1d7a      	adds	r2, r7, #5
 8002c56:	7812      	ldrb	r2, [r2, #0]
 8002c58:	b292      	uxth	r2, r2
 8002c5a:	1879      	adds	r1, r7, r1
 8002c5c:	7809      	ldrb	r1, [r1, #0]
 8002c5e:	2080      	movs	r0, #128	; 0x80
 8002c60:	0040      	lsls	r0, r0, #1
 8002c62:	1a41      	subs	r1, r0, r1
 8002c64:	b289      	uxth	r1, r1
 8002c66:	434a      	muls	r2, r1
 8002c68:	b292      	uxth	r2, r2
 8002c6a:	0011      	movs	r1, r2
 8002c6c:	22ff      	movs	r2, #255	; 0xff
 8002c6e:	0212      	lsls	r2, r2, #8
 8002c70:	1a52      	subs	r2, r2, r1
 8002c72:	4353      	muls	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]
		d += d >> 8;	// Error correction
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	0a1b      	lsrs	r3, r3, #8
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	18d3      	adds	r3, r2, r3
 8002c7e:	60fb      	str	r3, [r7, #12]
		d += v;		// Error correction
 8002c80:	1d3b      	adds	r3, r7, #4
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	18d3      	adds	r3, r2, r3
 8002c88:	60fb      	str	r3, [r7, #12]
		*r = d >> 16;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	0c1b      	lsrs	r3, r3, #16
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	701a      	strb	r2, [r3, #0]
 8002c94:	e01f      	b.n	8002cd6 <fast_hsv2rgb_32bit+0x1b2>
	} else {
		// *r = ...slope_down...;
		d = v * (uint32_t)((255 << 8) - (uint16_t)(s * h_fraction));
 8002c96:	1d3b      	adds	r3, r7, #4
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	1d7a      	adds	r2, r7, #5
 8002c9c:	7812      	ldrb	r2, [r2, #0]
 8002c9e:	b292      	uxth	r2, r2
 8002ca0:	2111      	movs	r1, #17
 8002ca2:	1879      	adds	r1, r7, r1
 8002ca4:	7809      	ldrb	r1, [r1, #0]
 8002ca6:	b289      	uxth	r1, r1
 8002ca8:	434a      	muls	r2, r1
 8002caa:	b292      	uxth	r2, r2
 8002cac:	0011      	movs	r1, r2
 8002cae:	22ff      	movs	r2, #255	; 0xff
 8002cb0:	0212      	lsls	r2, r2, #8
 8002cb2:	1a52      	subs	r2, r2, r1
 8002cb4:	4353      	muls	r3, r2
 8002cb6:	60fb      	str	r3, [r7, #12]
		d += d >> 8;	// Error correction
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	0a1b      	lsrs	r3, r3, #8
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	18d3      	adds	r3, r2, r3
 8002cc0:	60fb      	str	r3, [r7, #12]
		d += v;		// Error correction
 8002cc2:	1d3b      	adds	r3, r7, #4
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	18d3      	adds	r3, r2, r3
 8002cca:	60fb      	str	r3, [r7, #12]
		*r = d >> 16;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	0c1b      	lsrs	r3, r3, #16
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	701a      	strb	r2, [r3, #0]
	}
}
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	b00b      	add	sp, #44	; 0x2c
 8002cda:	bd90      	pop	{r4, r7, pc}

08002cdc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002cdc:	4813      	ldr	r0, [pc, #76]	; (8002d2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002cde:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8002ce0:	4813      	ldr	r0, [pc, #76]	; (8002d30 <LoopForever+0x6>)
    LDR R1, [R0]
 8002ce2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8002ce4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8002ce6:	4a13      	ldr	r2, [pc, #76]	; (8002d34 <LoopForever+0xa>)
    CMP R1, R2
 8002ce8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8002cea:	d105      	bne.n	8002cf8 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8002cec:	4812      	ldr	r0, [pc, #72]	; (8002d38 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8002cee:	4913      	ldr	r1, [pc, #76]	; (8002d3c <LoopForever+0x12>)
    STR R1, [R0]
 8002cf0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8002cf2:	4813      	ldr	r0, [pc, #76]	; (8002d40 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8002cf4:	4913      	ldr	r1, [pc, #76]	; (8002d44 <LoopForever+0x1a>)
    STR R1, [R0]
 8002cf6:	6001      	str	r1, [r0, #0]

08002cf8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cf8:	4813      	ldr	r0, [pc, #76]	; (8002d48 <LoopForever+0x1e>)
  ldr r1, =_edata
 8002cfa:	4914      	ldr	r1, [pc, #80]	; (8002d4c <LoopForever+0x22>)
  ldr r2, =_sidata
 8002cfc:	4a14      	ldr	r2, [pc, #80]	; (8002d50 <LoopForever+0x26>)
  movs r3, #0
 8002cfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d00:	e002      	b.n	8002d08 <LoopCopyDataInit>

08002d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d06:	3304      	adds	r3, #4

08002d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d0c:	d3f9      	bcc.n	8002d02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d0e:	4a11      	ldr	r2, [pc, #68]	; (8002d54 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8002d10:	4c11      	ldr	r4, [pc, #68]	; (8002d58 <LoopForever+0x2e>)
  movs r3, #0
 8002d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d14:	e001      	b.n	8002d1a <LoopFillZerobss>

08002d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d18:	3204      	adds	r2, #4

08002d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d1c:	d3fb      	bcc.n	8002d16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002d1e:	f7fe fbab 	bl	8001478 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002d22:	f000 f81d 	bl	8002d60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d26:	f7fe fb07 	bl	8001338 <main>

08002d2a <LoopForever>:

LoopForever:
    b LoopForever
 8002d2a:	e7fe      	b.n	8002d2a <LoopForever>
  ldr   r0, =_estack
 8002d2c:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8002d30:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8002d34:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8002d38:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8002d3c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8002d40:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8002d44:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8002d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d4c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8002d50:	08002df0 	.word	0x08002df0
  ldr r2, =_sbss
 8002d54:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8002d58:	20000534 	.word	0x20000534

08002d5c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d5c:	e7fe      	b.n	8002d5c <ADC1_IRQHandler>
	...

08002d60 <__libc_init_array>:
 8002d60:	b570      	push	{r4, r5, r6, lr}
 8002d62:	2600      	movs	r6, #0
 8002d64:	4d0c      	ldr	r5, [pc, #48]	; (8002d98 <__libc_init_array+0x38>)
 8002d66:	4c0d      	ldr	r4, [pc, #52]	; (8002d9c <__libc_init_array+0x3c>)
 8002d68:	1b64      	subs	r4, r4, r5
 8002d6a:	10a4      	asrs	r4, r4, #2
 8002d6c:	42a6      	cmp	r6, r4
 8002d6e:	d109      	bne.n	8002d84 <__libc_init_array+0x24>
 8002d70:	2600      	movs	r6, #0
 8002d72:	f000 f823 	bl	8002dbc <_init>
 8002d76:	4d0a      	ldr	r5, [pc, #40]	; (8002da0 <__libc_init_array+0x40>)
 8002d78:	4c0a      	ldr	r4, [pc, #40]	; (8002da4 <__libc_init_array+0x44>)
 8002d7a:	1b64      	subs	r4, r4, r5
 8002d7c:	10a4      	asrs	r4, r4, #2
 8002d7e:	42a6      	cmp	r6, r4
 8002d80:	d105      	bne.n	8002d8e <__libc_init_array+0x2e>
 8002d82:	bd70      	pop	{r4, r5, r6, pc}
 8002d84:	00b3      	lsls	r3, r6, #2
 8002d86:	58eb      	ldr	r3, [r5, r3]
 8002d88:	4798      	blx	r3
 8002d8a:	3601      	adds	r6, #1
 8002d8c:	e7ee      	b.n	8002d6c <__libc_init_array+0xc>
 8002d8e:	00b3      	lsls	r3, r6, #2
 8002d90:	58eb      	ldr	r3, [r5, r3]
 8002d92:	4798      	blx	r3
 8002d94:	3601      	adds	r6, #1
 8002d96:	e7f2      	b.n	8002d7e <__libc_init_array+0x1e>
 8002d98:	08002de8 	.word	0x08002de8
 8002d9c:	08002de8 	.word	0x08002de8
 8002da0:	08002de8 	.word	0x08002de8
 8002da4:	08002dec 	.word	0x08002dec

08002da8 <memcpy>:
 8002da8:	2300      	movs	r3, #0
 8002daa:	b510      	push	{r4, lr}
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d100      	bne.n	8002db2 <memcpy+0xa>
 8002db0:	bd10      	pop	{r4, pc}
 8002db2:	5ccc      	ldrb	r4, [r1, r3]
 8002db4:	54c4      	strb	r4, [r0, r3]
 8002db6:	3301      	adds	r3, #1
 8002db8:	e7f8      	b.n	8002dac <memcpy+0x4>
	...

08002dbc <_init>:
 8002dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dbe:	46c0      	nop			; (mov r8, r8)
 8002dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dc2:	bc08      	pop	{r3}
 8002dc4:	469e      	mov	lr, r3
 8002dc6:	4770      	bx	lr

08002dc8 <_fini>:
 8002dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dce:	bc08      	pop	{r3}
 8002dd0:	469e      	mov	lr, r3
 8002dd2:	4770      	bx	lr
