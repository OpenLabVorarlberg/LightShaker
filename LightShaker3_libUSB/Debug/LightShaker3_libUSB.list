
LightShaker3_libUSB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f78  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08004038  08004038  00014038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004230  08004230  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08004230  08004230  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004230  08004230  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004230  08004230  00014230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004234  08004234  00014234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004238  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000764  20000014  0800424c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000778  0800424c  00020778  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000baac  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027bf  00000000  00000000  0002bae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000940  00000000  00000000  0002e2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000828  00000000  00000000  0002ebe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001362d  00000000  00000000  0002f410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b12d  00000000  00000000  00042a3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000984b3  00000000  00000000  0004db6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e601d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e24  00000000  00000000  000e6070  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004020 	.word	0x08004020

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08004020 	.word	0x08004020

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <EXTI_Init>:
 *         parameters in the EXTI_InitStruct.
 * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure that 
 *         contains the configuration information for the EXTI peripheral.
 * @retval None
 */
void EXTI_Init(EXTI_InitTypeDef *EXTI_InitStruct) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	uint32_t tmp = 0;
 8000228:	2300      	movs	r3, #0
 800022a:	60fb      	str	r3, [r7, #12]
	assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
	assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
	assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
	assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

	tmp = (uint32_t) EXTI_BASE;
 800022c:	4b33      	ldr	r3, [pc, #204]	; (80002fc <EXTI_Init+0xdc>)
 800022e:	60fb      	str	r3, [r7, #12]

	if (EXTI_InitStruct->EXTI_LineCmd != DISABLE) {
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	799b      	ldrb	r3, [r3, #6]
 8000234:	2b00      	cmp	r3, #0
 8000236:	d04f      	beq.n	80002d8 <EXTI_Init+0xb8>
		/* Clear EXTI line configuration */
		EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000238:	4b30      	ldr	r3, [pc, #192]	; (80002fc <EXTI_Init+0xdc>)
 800023a:	681a      	ldr	r2, [r3, #0]
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	43d9      	mvns	r1, r3
 8000242:	4b2e      	ldr	r3, [pc, #184]	; (80002fc <EXTI_Init+0xdc>)
 8000244:	400a      	ands	r2, r1
 8000246:	601a      	str	r2, [r3, #0]
		EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000248:	4b2c      	ldr	r3, [pc, #176]	; (80002fc <EXTI_Init+0xdc>)
 800024a:	685a      	ldr	r2, [r3, #4]
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	43d9      	mvns	r1, r3
 8000252:	4b2a      	ldr	r3, [pc, #168]	; (80002fc <EXTI_Init+0xdc>)
 8000254:	400a      	ands	r2, r1
 8000256:	605a      	str	r2, [r3, #4]

		tmp += EXTI_InitStruct->EXTI_Mode;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	791b      	ldrb	r3, [r3, #4]
 800025c:	001a      	movs	r2, r3
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	189b      	adds	r3, r3, r2
 8000262:	60fb      	str	r3, [r7, #12]

		*(__IO uint32_t*) tmp |= EXTI_InitStruct->EXTI_Line;
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	6819      	ldr	r1, [r3, #0]
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	681a      	ldr	r2, [r3, #0]
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	430a      	orrs	r2, r1
 8000270:	601a      	str	r2, [r3, #0]

		/* Clear Rising Falling edge configuration */
		EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000272:	4b22      	ldr	r3, [pc, #136]	; (80002fc <EXTI_Init+0xdc>)
 8000274:	689a      	ldr	r2, [r3, #8]
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	43d9      	mvns	r1, r3
 800027c:	4b1f      	ldr	r3, [pc, #124]	; (80002fc <EXTI_Init+0xdc>)
 800027e:	400a      	ands	r2, r1
 8000280:	609a      	str	r2, [r3, #8]
		EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000282:	4b1e      	ldr	r3, [pc, #120]	; (80002fc <EXTI_Init+0xdc>)
 8000284:	68da      	ldr	r2, [r3, #12]
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	43d9      	mvns	r1, r3
 800028c:	4b1b      	ldr	r3, [pc, #108]	; (80002fc <EXTI_Init+0xdc>)
 800028e:	400a      	ands	r2, r1
 8000290:	60da      	str	r2, [r3, #12]

		/* Select the trigger for the selected interrupts */
		if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling) {
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	795b      	ldrb	r3, [r3, #5]
 8000296:	2b10      	cmp	r3, #16
 8000298:	d10e      	bne.n	80002b8 <EXTI_Init+0x98>
			/* Rising Falling edge */
			EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 800029a:	4b18      	ldr	r3, [pc, #96]	; (80002fc <EXTI_Init+0xdc>)
 800029c:	6899      	ldr	r1, [r3, #8]
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	681a      	ldr	r2, [r3, #0]
 80002a2:	4b16      	ldr	r3, [pc, #88]	; (80002fc <EXTI_Init+0xdc>)
 80002a4:	430a      	orrs	r2, r1
 80002a6:	609a      	str	r2, [r3, #8]
			EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80002a8:	4b14      	ldr	r3, [pc, #80]	; (80002fc <EXTI_Init+0xdc>)
 80002aa:	68d9      	ldr	r1, [r3, #12]
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	681a      	ldr	r2, [r3, #0]
 80002b0:	4b12      	ldr	r3, [pc, #72]	; (80002fc <EXTI_Init+0xdc>)
 80002b2:	430a      	orrs	r2, r1
 80002b4:	60da      	str	r2, [r3, #12]
		tmp += EXTI_InitStruct->EXTI_Mode;

		/* Disable the selected external lines */
		*(__IO uint32_t*) tmp &= ~EXTI_InitStruct->EXTI_Line;
	}
}
 80002b6:	e01d      	b.n	80002f4 <EXTI_Init+0xd4>
			tmp = (uint32_t) EXTI_BASE;
 80002b8:	4b10      	ldr	r3, [pc, #64]	; (80002fc <EXTI_Init+0xdc>)
 80002ba:	60fb      	str	r3, [r7, #12]
			tmp += EXTI_InitStruct->EXTI_Trigger;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	795b      	ldrb	r3, [r3, #5]
 80002c0:	001a      	movs	r2, r3
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	189b      	adds	r3, r3, r2
 80002c6:	60fb      	str	r3, [r7, #12]
			*(__IO uint32_t*) tmp |= EXTI_InitStruct->EXTI_Line;
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	6819      	ldr	r1, [r3, #0]
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	681a      	ldr	r2, [r3, #0]
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	430a      	orrs	r2, r1
 80002d4:	601a      	str	r2, [r3, #0]
}
 80002d6:	e00d      	b.n	80002f4 <EXTI_Init+0xd4>
		tmp += EXTI_InitStruct->EXTI_Mode;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	791b      	ldrb	r3, [r3, #4]
 80002dc:	001a      	movs	r2, r3
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	189b      	adds	r3, r3, r2
 80002e2:	60fb      	str	r3, [r7, #12]
		*(__IO uint32_t*) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	681a      	ldr	r2, [r3, #0]
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	43d9      	mvns	r1, r3
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	400a      	ands	r2, r1
 80002f2:	601a      	str	r2, [r3, #0]
}
 80002f4:	46c0      	nop			; (mov r8, r8)
 80002f6:	46bd      	mov	sp, r7
 80002f8:	b004      	add	sp, #16
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	40010400 	.word	0x40010400

08000300 <EXTI_ClearITPendingBit>:
 * @brief  Clears the EXTI's line pending bits.
 * @param  EXTI_Line: specifies the EXTI lines to clear.
 *          This parameter can be any combination of EXTI_Linex where x can be (0..27).
 * @retval None
 */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line) {
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_EXTI_LINE(EXTI_Line));

	EXTI->PR = EXTI_Line;
 8000308:	4b03      	ldr	r3, [pc, #12]	; (8000318 <EXTI_ClearITPendingBit+0x18>)
 800030a:	687a      	ldr	r2, [r7, #4]
 800030c:	615a      	str	r2, [r3, #20]
}
 800030e:	46c0      	nop			; (mov r8, r8)
 8000310:	46bd      	mov	sp, r7
 8000312:	b002      	add	sp, #8
 8000314:	bd80      	pop	{r7, pc}
 8000316:	46c0      	nop			; (mov r8, r8)
 8000318:	40010400 	.word	0x40010400

0800031c <GPIO_Init>:
 * @note   GPIOD is not available for STM32F031.   
 * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_InitStruct) {
 800031c:	b580      	push	{r7, lr}
 800031e:	b086      	sub	sp, #24
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
 8000324:	6039      	str	r1, [r7, #0]
	uint32_t pinpos = 0x00, pos = 0x00, currentpin = 0x00;
 8000326:	2300      	movs	r3, #0
 8000328:	617b      	str	r3, [r7, #20]
 800032a:	2300      	movs	r3, #0
 800032c:	613b      	str	r3, [r7, #16]
 800032e:	2300      	movs	r3, #0
 8000330:	60fb      	str	r3, [r7, #12]
	assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
	assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

	/*-------------------------- Configure the port pins -----------------------*/
	/*-- GPIO Mode Configuration --*/
	for (pinpos = 0x00; pinpos < 0x10; pinpos++) {
 8000332:	2300      	movs	r3, #0
 8000334:	617b      	str	r3, [r7, #20]
 8000336:	e07c      	b.n	8000432 <GPIO_Init+0x116>
		pos = ((uint32_t) 0x01) << pinpos;
 8000338:	2201      	movs	r2, #1
 800033a:	697b      	ldr	r3, [r7, #20]
 800033c:	409a      	lsls	r2, r3
 800033e:	0013      	movs	r3, r2
 8000340:	613b      	str	r3, [r7, #16]

		/* Get the port pins position */
		currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	681a      	ldr	r2, [r3, #0]
 8000346:	693b      	ldr	r3, [r7, #16]
 8000348:	4013      	ands	r3, r2
 800034a:	60fb      	str	r3, [r7, #12]

		if (currentpin == pos) {
 800034c:	68fa      	ldr	r2, [r7, #12]
 800034e:	693b      	ldr	r3, [r7, #16]
 8000350:	429a      	cmp	r2, r3
 8000352:	d16b      	bne.n	800042c <GPIO_Init+0x110>
			if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT)
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	791b      	ldrb	r3, [r3, #4]
 8000358:	2b01      	cmp	r3, #1
 800035a:	d003      	beq.n	8000364 <GPIO_Init+0x48>
					|| (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF)) {
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	791b      	ldrb	r3, [r3, #4]
 8000360:	2b02      	cmp	r3, #2
 8000362:	d134      	bne.n	80003ce <GPIO_Init+0xb2>
				/* Check Speed mode parameters */
				assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

				/* Speed mode configuration */
				GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	689b      	ldr	r3, [r3, #8]
 8000368:	697a      	ldr	r2, [r7, #20]
 800036a:	0052      	lsls	r2, r2, #1
 800036c:	2103      	movs	r1, #3
 800036e:	4091      	lsls	r1, r2
 8000370:	000a      	movs	r2, r1
 8000372:	43d2      	mvns	r2, r2
 8000374:	401a      	ands	r2, r3
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	609a      	str	r2, [r3, #8]
				GPIOx->OSPEEDR |= ((uint32_t) (GPIO_InitStruct->GPIO_Speed)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	689a      	ldr	r2, [r3, #8]
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	795b      	ldrb	r3, [r3, #5]
 8000382:	0019      	movs	r1, r3
						<< (pinpos * 2));
 8000384:	697b      	ldr	r3, [r7, #20]
 8000386:	005b      	lsls	r3, r3, #1
 8000388:	4099      	lsls	r1, r3
 800038a:	000b      	movs	r3, r1
				GPIOx->OSPEEDR |= ((uint32_t) (GPIO_InitStruct->GPIO_Speed)
 800038c:	431a      	orrs	r2, r3
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	609a      	str	r2, [r3, #8]

				/* Check Output mode parameters */
				assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

				/* Output mode configuration */
				GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t) pinpos));
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	889b      	ldrh	r3, [r3, #4]
 8000396:	b29b      	uxth	r3, r3
 8000398:	697a      	ldr	r2, [r7, #20]
 800039a:	b292      	uxth	r2, r2
 800039c:	0011      	movs	r1, r2
 800039e:	2201      	movs	r2, #1
 80003a0:	408a      	lsls	r2, r1
 80003a2:	b292      	uxth	r2, r2
 80003a4:	43d2      	mvns	r2, r2
 80003a6:	b292      	uxth	r2, r2
 80003a8:	4013      	ands	r3, r2
 80003aa:	b29a      	uxth	r2, r3
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	809a      	strh	r2, [r3, #4]
				GPIOx->OTYPER |=
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	889b      	ldrh	r3, [r3, #4]
 80003b4:	b29a      	uxth	r2, r3
						(uint16_t) (((uint16_t) GPIO_InitStruct->GPIO_OType)
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	799b      	ldrb	r3, [r3, #6]
 80003ba:	0019      	movs	r1, r3
								<< ((uint16_t) pinpos));
 80003bc:	697b      	ldr	r3, [r7, #20]
 80003be:	b29b      	uxth	r3, r3
 80003c0:	4099      	lsls	r1, r3
 80003c2:	000b      	movs	r3, r1
						(uint16_t) (((uint16_t) GPIO_InitStruct->GPIO_OType)
 80003c4:	b29b      	uxth	r3, r3
				GPIOx->OTYPER |=
 80003c6:	4313      	orrs	r3, r2
 80003c8:	b29a      	uxth	r2, r3
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	809a      	strh	r2, [r3, #4]
			}

			GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	697a      	ldr	r2, [r7, #20]
 80003d4:	0052      	lsls	r2, r2, #1
 80003d6:	2103      	movs	r1, #3
 80003d8:	4091      	lsls	r1, r2
 80003da:	000a      	movs	r2, r1
 80003dc:	43d2      	mvns	r2, r2
 80003de:	401a      	ands	r2, r3
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	601a      	str	r2, [r3, #0]

			GPIOx->MODER |= (((uint32_t) GPIO_InitStruct->GPIO_Mode)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681a      	ldr	r2, [r3, #0]
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	791b      	ldrb	r3, [r3, #4]
 80003ec:	0019      	movs	r1, r3
					<< (pinpos * 2));
 80003ee:	697b      	ldr	r3, [r7, #20]
 80003f0:	005b      	lsls	r3, r3, #1
 80003f2:	4099      	lsls	r1, r3
 80003f4:	000b      	movs	r3, r1
			GPIOx->MODER |= (((uint32_t) GPIO_InitStruct->GPIO_Mode)
 80003f6:	431a      	orrs	r2, r3
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	601a      	str	r2, [r3, #0]

			/* Pull-up Pull down resistor configuration */
			GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t) pinpos * 2));
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	68db      	ldr	r3, [r3, #12]
 8000400:	697a      	ldr	r2, [r7, #20]
 8000402:	b292      	uxth	r2, r2
 8000404:	0052      	lsls	r2, r2, #1
 8000406:	2103      	movs	r1, #3
 8000408:	4091      	lsls	r1, r2
 800040a:	000a      	movs	r2, r1
 800040c:	43d2      	mvns	r2, r2
 800040e:	401a      	ands	r2, r3
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	60da      	str	r2, [r3, #12]
			GPIOx->PUPDR |= (((uint32_t) GPIO_InitStruct->GPIO_PuPd)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	68da      	ldr	r2, [r3, #12]
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	79db      	ldrb	r3, [r3, #7]
 800041c:	0019      	movs	r1, r3
					<< (pinpos * 2));
 800041e:	697b      	ldr	r3, [r7, #20]
 8000420:	005b      	lsls	r3, r3, #1
 8000422:	4099      	lsls	r1, r3
 8000424:	000b      	movs	r3, r1
			GPIOx->PUPDR |= (((uint32_t) GPIO_InitStruct->GPIO_PuPd)
 8000426:	431a      	orrs	r2, r3
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	60da      	str	r2, [r3, #12]
	for (pinpos = 0x00; pinpos < 0x10; pinpos++) {
 800042c:	697b      	ldr	r3, [r7, #20]
 800042e:	3301      	adds	r3, #1
 8000430:	617b      	str	r3, [r7, #20]
 8000432:	697b      	ldr	r3, [r7, #20]
 8000434:	2b0f      	cmp	r3, #15
 8000436:	d800      	bhi.n	800043a <GPIO_Init+0x11e>
 8000438:	e77e      	b.n	8000338 <GPIO_Init+0x1c>
		}
	}
}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	46c0      	nop			; (mov r8, r8)
 800043e:	46bd      	mov	sp, r7
 8000440:	b006      	add	sp, #24
 8000442:	bd80      	pop	{r7, pc}

08000444 <GPIO_ReadInputDataBit>:
 *         For STM32F051 and STM32F030: (0..15) for GPIOA, GPIOB, GPIOC, (2) for GPIOD and (0..1, 4..7) for GIIOF.
 *         For STM32F072: (0..15) for GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, (0..10) for GPIOF.
 *         For STM32F031: (0..15) for GPIOA, GPIOB, (13..15) for GPIOC and (0..1, 6..7) for GPIOF.  
 * @retval The input port pin value.
 */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000444:	b580      	push	{r7, lr}
 8000446:	b084      	sub	sp, #16
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
 800044c:	000a      	movs	r2, r1
 800044e:	1cbb      	adds	r3, r7, #2
 8000450:	801a      	strh	r2, [r3, #0]

	uint8_t bitstatus = 0x00;
 8000452:	210f      	movs	r1, #15
 8000454:	187b      	adds	r3, r7, r1
 8000456:	2200      	movs	r2, #0
 8000458:	701a      	strb	r2, [r3, #0]

	/* Check the parameters */
	assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
	assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

	if ((GPIOx->IDR & GPIO_Pin) != (uint32_t) Bit_RESET) {
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	8a1b      	ldrh	r3, [r3, #16]
 800045e:	b29b      	uxth	r3, r3
 8000460:	1cba      	adds	r2, r7, #2
 8000462:	8812      	ldrh	r2, [r2, #0]
 8000464:	4013      	ands	r3, r2
 8000466:	b29b      	uxth	r3, r3
 8000468:	2b00      	cmp	r3, #0
 800046a:	d003      	beq.n	8000474 <GPIO_ReadInputDataBit+0x30>
		bitstatus = (uint8_t) Bit_SET;
 800046c:	187b      	adds	r3, r7, r1
 800046e:	2201      	movs	r2, #1
 8000470:	701a      	strb	r2, [r3, #0]
 8000472:	e003      	b.n	800047c <GPIO_ReadInputDataBit+0x38>
	} else {
		bitstatus = (uint8_t) Bit_RESET;
 8000474:	230f      	movs	r3, #15
 8000476:	18fb      	adds	r3, r7, r3
 8000478:	2200      	movs	r2, #0
 800047a:	701a      	strb	r2, [r3, #0]
	}
	return bitstatus;
 800047c:	230f      	movs	r3, #15
 800047e:	18fb      	adds	r3, r7, r3
 8000480:	781b      	ldrb	r3, [r3, #0]
}
 8000482:	0018      	movs	r0, r3
 8000484:	46bd      	mov	sp, r7
 8000486:	b004      	add	sp, #16
 8000488:	bd80      	pop	{r7, pc}

0800048a <GPIO_WriteBit>:
 *         For STM32F051 and STM32F030: (0..15) for GPIOA, GPIOB, GPIOC, (2) for GPIOD and (0..1, 4..7) for GIIOF.
 *         For STM32F072: (0..15) for GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, (0..10) for GPIOF.
 *         For STM32F031: (0..15) for GPIOA, GPIOB, (13..15) for GPIOC and (0..1, 6..7) for GPIOF.
 * @retval None
 */
void GPIO_WriteBit(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, BitAction BitVal) {
 800048a:	b580      	push	{r7, lr}
 800048c:	b082      	sub	sp, #8
 800048e:	af00      	add	r7, sp, #0
 8000490:	6078      	str	r0, [r7, #4]
 8000492:	0008      	movs	r0, r1
 8000494:	0011      	movs	r1, r2
 8000496:	1cbb      	adds	r3, r7, #2
 8000498:	1c02      	adds	r2, r0, #0
 800049a:	801a      	strh	r2, [r3, #0]
 800049c:	1c7b      	adds	r3, r7, #1
 800049e:	1c0a      	adds	r2, r1, #0
 80004a0:	701a      	strb	r2, [r3, #0]
	/* Check the parameters */
	assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
	assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
	assert_param(IS_GPIO_BIT_ACTION(BitVal));

	if (BitVal != Bit_RESET) {
 80004a2:	1c7b      	adds	r3, r7, #1
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d004      	beq.n	80004b4 <GPIO_WriteBit+0x2a>
		GPIOx->BSRR = GPIO_Pin;
 80004aa:	1cbb      	adds	r3, r7, #2
 80004ac:	881a      	ldrh	r2, [r3, #0]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	619a      	str	r2, [r3, #24]
	} else {
		GPIOx->BRR = GPIO_Pin;
	}
}
 80004b2:	e003      	b.n	80004bc <GPIO_WriteBit+0x32>
		GPIOx->BRR = GPIO_Pin;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	1cba      	adds	r2, r7, #2
 80004b8:	8812      	ldrh	r2, [r2, #0]
 80004ba:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80004bc:	46c0      	nop			; (mov r8, r8)
 80004be:	46bd      	mov	sp, r7
 80004c0:	b002      	add	sp, #8
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <GPIO_PinAFConfig>:
 *         for the detailed mapping of the system and peripherals'alternate 
 *         function I/O pins.
 * @retval None
 */
void GPIO_PinAFConfig(GPIO_TypeDef *GPIOx, uint16_t GPIO_PinSource,
		uint8_t GPIO_AF) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	0008      	movs	r0, r1
 80004ce:	0011      	movs	r1, r2
 80004d0:	1cbb      	adds	r3, r7, #2
 80004d2:	1c02      	adds	r2, r0, #0
 80004d4:	801a      	strh	r2, [r3, #0]
 80004d6:	1c7b      	adds	r3, r7, #1
 80004d8:	1c0a      	adds	r2, r1, #0
 80004da:	701a      	strb	r2, [r3, #0]
	uint32_t temp = 0x00;
 80004dc:	2300      	movs	r3, #0
 80004de:	60fb      	str	r3, [r7, #12]
	uint32_t temp_2 = 0x00;
 80004e0:	2300      	movs	r3, #0
 80004e2:	60bb      	str	r3, [r7, #8]
	/* Check the parameters */
	assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
	assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
	assert_param(IS_GPIO_AF(GPIO_AF));

	temp = ((uint32_t) (GPIO_AF)
 80004e4:	1c7b      	adds	r3, r7, #1
 80004e6:	781a      	ldrb	r2, [r3, #0]
			<< ((uint32_t) ((uint32_t) GPIO_PinSource & (uint32_t) 0x07) * 4));
 80004e8:	1cbb      	adds	r3, r7, #2
 80004ea:	881b      	ldrh	r3, [r3, #0]
 80004ec:	2107      	movs	r1, #7
 80004ee:	400b      	ands	r3, r1
 80004f0:	009b      	lsls	r3, r3, #2
	temp = ((uint32_t) (GPIO_AF)
 80004f2:	409a      	lsls	r2, r3
 80004f4:	0013      	movs	r3, r2
 80004f6:	60fb      	str	r3, [r7, #12]
	GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t) 0xF
 80004f8:	1cbb      	adds	r3, r7, #2
 80004fa:	881b      	ldrh	r3, [r3, #0]
 80004fc:	08db      	lsrs	r3, r3, #3
 80004fe:	b29b      	uxth	r3, r3
 8000500:	001a      	movs	r2, r3
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	3208      	adds	r2, #8
 8000506:	0092      	lsls	r2, r2, #2
 8000508:	58d3      	ldr	r3, [r2, r3]
			<< ((uint32_t) ((uint32_t) GPIO_PinSource & (uint32_t) 0x07) * 4));
 800050a:	1cba      	adds	r2, r7, #2
 800050c:	8812      	ldrh	r2, [r2, #0]
 800050e:	2107      	movs	r1, #7
 8000510:	400a      	ands	r2, r1
 8000512:	0092      	lsls	r2, r2, #2
 8000514:	210f      	movs	r1, #15
 8000516:	4091      	lsls	r1, r2
 8000518:	000a      	movs	r2, r1
	GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t) 0xF
 800051a:	43d2      	mvns	r2, r2
 800051c:	1cb9      	adds	r1, r7, #2
 800051e:	8809      	ldrh	r1, [r1, #0]
 8000520:	08c9      	lsrs	r1, r1, #3
 8000522:	b289      	uxth	r1, r1
 8000524:	0008      	movs	r0, r1
 8000526:	401a      	ands	r2, r3
 8000528:	0011      	movs	r1, r2
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	0002      	movs	r2, r0
 800052e:	3208      	adds	r2, #8
 8000530:	0092      	lsls	r2, r2, #2
 8000532:	50d1      	str	r1, [r2, r3]
	temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000534:	1cbb      	adds	r3, r7, #2
 8000536:	881b      	ldrh	r3, [r3, #0]
 8000538:	08db      	lsrs	r3, r3, #3
 800053a:	b29b      	uxth	r3, r3
 800053c:	001a      	movs	r2, r3
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	3208      	adds	r2, #8
 8000542:	0092      	lsls	r2, r2, #2
 8000544:	58d3      	ldr	r3, [r2, r3]
 8000546:	68fa      	ldr	r2, [r7, #12]
 8000548:	4313      	orrs	r3, r2
 800054a:	60bb      	str	r3, [r7, #8]
	GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800054c:	1cbb      	adds	r3, r7, #2
 800054e:	881b      	ldrh	r3, [r3, #0]
 8000550:	08db      	lsrs	r3, r3, #3
 8000552:	b29b      	uxth	r3, r3
 8000554:	001a      	movs	r2, r3
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	3208      	adds	r2, #8
 800055a:	0092      	lsls	r2, r2, #2
 800055c:	68b9      	ldr	r1, [r7, #8]
 800055e:	50d1      	str	r1, [r2, r3]
}
 8000560:	46c0      	nop			; (mov r8, r8)
 8000562:	46bd      	mov	sp, r7
 8000564:	b004      	add	sp, #16
 8000566:	bd80      	pop	{r7, pc}

08000568 <I2C_Init>:
 * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
 *         contains the configuration information for the specified I2C peripheral.
 * @retval None
 */
void I2C_Init(I2C_TypeDef *I2Cx, I2C_InitTypeDef *I2C_InitStruct) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	6039      	str	r1, [r7, #0]
	uint32_t tmpreg = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	60fb      	str	r3, [r7, #12]
	assert_param(
			IS_I2C_ACKNOWLEDGE_ADDRESS(
					I2C_InitStruct->I2C_AcknowledgedAddress));

	/* Disable I2Cx Peripheral */
	I2Cx->CR1 &= (uint32_t) ~((uint32_t) I2C_CR1_PE);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	2201      	movs	r2, #1
 800057c:	4393      	bics	r3, r2
 800057e:	001a      	movs	r2, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	601a      	str	r2, [r3, #0]

	/*---------------------------- I2Cx FILTERS Configuration ------------------*/
	/* Get the I2Cx CR1 value */
	tmpreg = I2Cx->CR1;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	60fb      	str	r3, [r7, #12]
	/* Clear I2Cx CR1 register */
	tmpreg &= CR1_CLEAR_MASK;
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	4a27      	ldr	r2, [pc, #156]	; (800062c <I2C_Init+0xc4>)
 800058e:	4013      	ands	r3, r2
 8000590:	60fb      	str	r3, [r7, #12]
	/* Configure I2Cx: analog and digital filter */
	/* Set ANFOFF bit according to I2C_AnalogFilter value */
	/* Set DFN bits according to I2C_DigitalFilter value */
	tmpreg |= (uint32_t) I2C_InitStruct->I2C_AnalogFilter
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	685a      	ldr	r2, [r3, #4]
			| (I2C_InitStruct->I2C_DigitalFilter << 8);
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	689b      	ldr	r3, [r3, #8]
 800059a:	021b      	lsls	r3, r3, #8
 800059c:	4313      	orrs	r3, r2
	tmpreg |= (uint32_t) I2C_InitStruct->I2C_AnalogFilter
 800059e:	68fa      	ldr	r2, [r7, #12]
 80005a0:	4313      	orrs	r3, r2
 80005a2:	60fb      	str	r3, [r7, #12]

	/* Write to I2Cx CR1 */
	I2Cx->CR1 = tmpreg;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	68fa      	ldr	r2, [r7, #12]
 80005a8:	601a      	str	r2, [r3, #0]

	/*---------------------------- I2Cx TIMING Configuration -------------------*/
	/* Configure I2Cx: Timing */
	/* Set TIMINGR bits according to I2C_Timing */
	/* Write to I2Cx TIMING */
	I2Cx->TIMINGR = I2C_InitStruct->I2C_Timing & TIMING_CLEAR_MASK;
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a20      	ldr	r2, [pc, #128]	; (8000630 <I2C_Init+0xc8>)
 80005b0:	401a      	ands	r2, r3
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	611a      	str	r2, [r3, #16]

	/* Enable I2Cx Peripheral */
	I2Cx->CR1 |= I2C_CR1_PE;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2201      	movs	r2, #1
 80005bc:	431a      	orrs	r2, r3
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	601a      	str	r2, [r3, #0]

	/*---------------------------- I2Cx OAR1 Configuration ---------------------*/
	/* Clear tmpreg local variable */
	tmpreg = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
	/* Clear OAR1 register */
	I2Cx->OAR1 = (uint32_t) tmpreg;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	68fa      	ldr	r2, [r7, #12]
 80005ca:	609a      	str	r2, [r3, #8]
	/* Clear OAR2 register */
	I2Cx->OAR2 = (uint32_t) tmpreg;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	68fa      	ldr	r2, [r7, #12]
 80005d0:	60da      	str	r2, [r3, #12]
	/* Configure I2Cx: Own Address1 and acknowledged address */
	/* Set OA1MODE bit according to I2C_AcknowledgedAddress value */
	/* Set OA1 bits according to I2C_OwnAddress1 value */
	tmpreg = (uint32_t) ((uint32_t) I2C_InitStruct->I2C_AcknowledgedAddress
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	699a      	ldr	r2, [r3, #24]
			| (uint32_t) I2C_InitStruct->I2C_OwnAddress1);
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	691b      	ldr	r3, [r3, #16]
	tmpreg = (uint32_t) ((uint32_t) I2C_InitStruct->I2C_AcknowledgedAddress
 80005da:	4313      	orrs	r3, r2
 80005dc:	60fb      	str	r3, [r7, #12]
	/* Write to I2Cx OAR1 */
	I2Cx->OAR1 = tmpreg;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	68fa      	ldr	r2, [r7, #12]
 80005e2:	609a      	str	r2, [r3, #8]
	/* Enable Own Address1 acknowledgement */
	I2Cx->OAR1 |= I2C_OAR1_OA1EN;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	689b      	ldr	r3, [r3, #8]
 80005e8:	2280      	movs	r2, #128	; 0x80
 80005ea:	0212      	lsls	r2, r2, #8
 80005ec:	431a      	orrs	r2, r3
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	609a      	str	r2, [r3, #8]

	/*---------------------------- I2Cx MODE Configuration ---------------------*/
	/* Configure I2Cx: mode */
	/* Set SMBDEN and SMBHEN bits according to I2C_Mode value */
	tmpreg = I2C_InitStruct->I2C_Mode;
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	68db      	ldr	r3, [r3, #12]
 80005f6:	60fb      	str	r3, [r7, #12]
	/* Write to I2Cx CR1 */
	I2Cx->CR1 |= tmpreg;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	431a      	orrs	r2, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	601a      	str	r2, [r3, #0]

	/*---------------------------- I2Cx ACK Configuration ----------------------*/
	/* Get the I2Cx CR2 value */
	tmpreg = I2Cx->CR2;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	60fb      	str	r3, [r7, #12]
	/* Clear I2Cx CR2 register */
	tmpreg &= CR2_CLEAR_MASK;
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	4a09      	ldr	r2, [pc, #36]	; (8000634 <I2C_Init+0xcc>)
 800060e:	4013      	ands	r3, r2
 8000610:	60fb      	str	r3, [r7, #12]
	/* Configure I2Cx: acknowledgement */
	/* Set NACK bit according to I2C_Ack value */
	tmpreg |= I2C_InitStruct->I2C_Ack;
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	68fa      	ldr	r2, [r7, #12]
 8000618:	4313      	orrs	r3, r2
 800061a:	60fb      	str	r3, [r7, #12]
	/* Write to I2Cx CR2 */
	I2Cx->CR2 = tmpreg;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	68fa      	ldr	r2, [r7, #12]
 8000620:	605a      	str	r2, [r3, #4]
}
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	46bd      	mov	sp, r7
 8000626:	b004      	add	sp, #16
 8000628:	bd80      	pop	{r7, pc}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	00cfe0ff 	.word	0x00cfe0ff
 8000630:	f0ffffff 	.word	0xf0ffffff
 8000634:	07ff7fff 	.word	0x07ff7fff

08000638 <I2C_Cmd>:
 * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 * @param  NewState: new state of the I2Cx peripheral. 
 *          This parameter can be: ENABLE or DISABLE.
 * @retval None
 */
void I2C_Cmd(I2C_TypeDef *I2Cx, FunctionalState NewState) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	000a      	movs	r2, r1
 8000642:	1cfb      	adds	r3, r7, #3
 8000644:	701a      	strb	r2, [r3, #0]
	/* Check the parameters */
	assert_param(IS_I2C_ALL_PERIPH(I2Cx));
	assert_param(IS_FUNCTIONAL_STATE(NewState));
	if (NewState != DISABLE) {
 8000646:	1cfb      	adds	r3, r7, #3
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d006      	beq.n	800065c <I2C_Cmd+0x24>
		/* Enable the selected I2C peripheral */
		I2Cx->CR1 |= I2C_CR1_PE;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2201      	movs	r2, #1
 8000654:	431a      	orrs	r2, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	601a      	str	r2, [r3, #0]
	} else {
		/* Disable the selected I2C peripheral */
		I2Cx->CR1 &= (uint32_t) ~((uint32_t) I2C_CR1_PE);
	}
}
 800065a:	e006      	b.n	800066a <I2C_Cmd+0x32>
		I2Cx->CR1 &= (uint32_t) ~((uint32_t) I2C_CR1_PE);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2201      	movs	r2, #1
 8000662:	4393      	bics	r3, r2
 8000664:	001a      	movs	r2, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	601a      	str	r2, [r3, #0]
}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	b002      	add	sp, #8
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <I2C_TransferHandling>:
 *            @arg I2C_Generate_Start_Read: Generate Restart for read request.
 *            @arg I2C_Generate_Start_Write: Generate Restart for write request.
 * @retval None
 */
void I2C_TransferHandling(I2C_TypeDef *I2Cx, uint16_t Address,
		uint8_t Number_Bytes, uint32_t ReloadEndMode, uint32_t StartStopMode) {
 8000674:	b590      	push	{r4, r7, lr}
 8000676:	b087      	sub	sp, #28
 8000678:	af00      	add	r7, sp, #0
 800067a:	60f8      	str	r0, [r7, #12]
 800067c:	0008      	movs	r0, r1
 800067e:	0011      	movs	r1, r2
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	240a      	movs	r4, #10
 8000684:	193b      	adds	r3, r7, r4
 8000686:	1c02      	adds	r2, r0, #0
 8000688:	801a      	strh	r2, [r3, #0]
 800068a:	2009      	movs	r0, #9
 800068c:	183b      	adds	r3, r7, r0
 800068e:	1c0a      	adds	r2, r1, #0
 8000690:	701a      	strb	r2, [r3, #0]
	uint32_t tmpreg = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]
	assert_param(IS_I2C_SLAVE_ADDRESS(Address));
	assert_param(IS_RELOAD_END_MODE(ReloadEndMode));
	assert_param(IS_START_STOP_MODE(StartStopMode));

	/* Get the CR2 register value */
	tmpreg = I2Cx->CR2;
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	685b      	ldr	r3, [r3, #4]
 800069a:	617b      	str	r3, [r7, #20]

	/* clear tmpreg specific bits */
	tmpreg &= (uint32_t) ~((uint32_t) (I2C_CR2_SADD | I2C_CR2_NBYTES
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	4a0e      	ldr	r2, [pc, #56]	; (80006d8 <I2C_TransferHandling+0x64>)
 80006a0:	4013      	ands	r3, r2
 80006a2:	617b      	str	r3, [r7, #20]
			| I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START
			| I2C_CR2_STOP));

	/* update tmpreg */
	tmpreg |= (uint32_t) (((uint32_t) Address & I2C_CR2_SADD)
 80006a4:	193b      	adds	r3, r7, r4
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	059b      	lsls	r3, r3, #22
 80006aa:	0d9a      	lsrs	r2, r3, #22
			| (((uint32_t) Number_Bytes << 16) & I2C_CR2_NBYTES)
 80006ac:	183b      	adds	r3, r7, r0
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	0419      	lsls	r1, r3, #16
 80006b2:	23ff      	movs	r3, #255	; 0xff
 80006b4:	041b      	lsls	r3, r3, #16
 80006b6:	400b      	ands	r3, r1
 80006b8:	431a      	orrs	r2, r3
			| (uint32_t) ReloadEndMode | (uint32_t) StartStopMode);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	431a      	orrs	r2, r3
	tmpreg |= (uint32_t) (((uint32_t) Address & I2C_CR2_SADD)
 80006be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006c0:	4313      	orrs	r3, r2
 80006c2:	697a      	ldr	r2, [r7, #20]
 80006c4:	4313      	orrs	r3, r2
 80006c6:	617b      	str	r3, [r7, #20]

	/* update CR2 register */
	I2Cx->CR2 = tmpreg;
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	697a      	ldr	r2, [r7, #20]
 80006cc:	605a      	str	r2, [r3, #4]
}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	46bd      	mov	sp, r7
 80006d2:	b007      	add	sp, #28
 80006d4:	bd90      	pop	{r4, r7, pc}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	fc009800 	.word	0xfc009800

080006dc <I2C_SendData>:
 * @brief  Sends a data byte through the I2Cx peripheral.
 * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 * @param  Data: Byte to be transmitted..
 * @retval None
 */
void I2C_SendData(I2C_TypeDef *I2Cx, uint8_t Data) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	000a      	movs	r2, r1
 80006e6:	1cfb      	adds	r3, r7, #3
 80006e8:	701a      	strb	r2, [r3, #0]
	/* Check the parameters */
	assert_param(IS_I2C_ALL_PERIPH(I2Cx));

	/* Write in the DR register the data to be sent */
	I2Cx->TXDR = (uint8_t) Data;
 80006ea:	1cfb      	adds	r3, r7, #3
 80006ec:	781a      	ldrb	r2, [r3, #0]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	46bd      	mov	sp, r7
 80006f6:	b002      	add	sp, #8
 80006f8:	bd80      	pop	{r7, pc}

080006fa <I2C_ReceiveData>:
/**
 * @brief  Returns the most recent received data by the I2Cx peripheral.
 * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 * @retval The value of the received data.
 */
uint8_t I2C_ReceiveData(I2C_TypeDef *I2Cx) {
 80006fa:	b580      	push	{r7, lr}
 80006fc:	b082      	sub	sp, #8
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_I2C_ALL_PERIPH(I2Cx));

	/* Return the data in the DR register */
	return (uint8_t) I2Cx->RXDR;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000706:	b2db      	uxtb	r3, r3
}
 8000708:	0018      	movs	r0, r3
 800070a:	46bd      	mov	sp, r7
 800070c:	b002      	add	sp, #8
 800070e:	bd80      	pop	{r7, pc}

08000710 <I2C_GetFlagStatus>:
 *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow detection flag
 *            @arg I2C_FLAG_ALERT: SMBus Alert
 *            @arg I2C_FLAG_BUSY: Bus busy
 * @retval The new state of I2C_FLAG (SET or RESET).
 */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef *I2Cx, uint32_t I2C_FLAG) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	6039      	str	r1, [r7, #0]
	uint32_t tmpreg = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	60bb      	str	r3, [r7, #8]
	FlagStatus bitstatus = RESET;
 800071e:	210f      	movs	r1, #15
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2200      	movs	r2, #0
 8000724:	701a      	strb	r2, [r3, #0]
	/* Check the parameters */
	assert_param(IS_I2C_ALL_PERIPH(I2Cx));
	assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

	/* Get the ISR register value */
	tmpreg = I2Cx->ISR;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	699b      	ldr	r3, [r3, #24]
 800072a:	60bb      	str	r3, [r7, #8]

	/* Get flag status */
	tmpreg &= I2C_FLAG;
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	683a      	ldr	r2, [r7, #0]
 8000730:	4013      	ands	r3, r2
 8000732:	60bb      	str	r3, [r7, #8]

	if (tmpreg != 0) {
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d003      	beq.n	8000742 <I2C_GetFlagStatus+0x32>
		/* I2C_FLAG is set */
		bitstatus = SET;
 800073a:	187b      	adds	r3, r7, r1
 800073c:	2201      	movs	r2, #1
 800073e:	701a      	strb	r2, [r3, #0]
 8000740:	e003      	b.n	800074a <I2C_GetFlagStatus+0x3a>
	} else {
		/* I2C_FLAG is reset */
		bitstatus = RESET;
 8000742:	230f      	movs	r3, #15
 8000744:	18fb      	adds	r3, r7, r3
 8000746:	2200      	movs	r2, #0
 8000748:	701a      	strb	r2, [r3, #0]
	}
	return bitstatus;
 800074a:	230f      	movs	r3, #15
 800074c:	18fb      	adds	r3, r7, r3
 800074e:	781b      	ldrb	r3, [r3, #0]
}
 8000750:	0018      	movs	r0, r3
 8000752:	46bd      	mov	sp, r7
 8000754:	b004      	add	sp, #16
 8000756:	bd80      	pop	{r7, pc}

08000758 <I2C_ClearFlag>:
 *            @arg I2C_FLAG_PECERR: PEC error in reception
 *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow detection flag
 *            @arg I2C_FLAG_ALERT: SMBus Alert
 * @retval The new state of I2C_FLAG (SET or RESET).
 */
void I2C_ClearFlag(I2C_TypeDef *I2Cx, uint32_t I2C_FLAG) {
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	6039      	str	r1, [r7, #0]
	/* Check the parameters */
	assert_param(IS_I2C_ALL_PERIPH(I2Cx));
	assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));

	/* Clear the selected flag */
	I2Cx->ICR = I2C_FLAG;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	683a      	ldr	r2, [r7, #0]
 8000766:	61da      	str	r2, [r3, #28]
}
 8000768:	46c0      	nop			; (mov r8, r8)
 800076a:	46bd      	mov	sp, r7
 800076c:	b002      	add	sp, #8
 800076e:	bd80      	pop	{r7, pc}

08000770 <NVIC_Init>:
 *         parameters in the NVIC_InitStruct.
 * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
 *         the configuration information for the specified NVIC peripheral.
 * @retval None
 */
void NVIC_Init(NVIC_InitTypeDef *NVIC_InitStruct) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	uint32_t tmppriority = 0x00;
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]

	/* Check the parameters */
	assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
	assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));

	if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE) {
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	789b      	ldrb	r3, [r3, #2]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d039      	beq.n	80007f8 <NVIC_Init+0x88>
		/* Compute the Corresponding IRQ Priority --------------------------------*/
		tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 8000784:	4a24      	ldr	r2, [pc, #144]	; (8000818 <NVIC_Init+0xa8>)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	089b      	lsrs	r3, r3, #2
 800078c:	b2db      	uxtb	r3, r3
 800078e:	33c0      	adds	r3, #192	; 0xc0
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	589b      	ldr	r3, [r3, r2]
 8000794:	60fb      	str	r3, [r7, #12]
		tmppriority &= (uint32_t) (~(((uint32_t) 0xFF)
				<< ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	001a      	movs	r2, r3
 800079c:	2303      	movs	r3, #3
 800079e:	4013      	ands	r3, r2
 80007a0:	00db      	lsls	r3, r3, #3
 80007a2:	22ff      	movs	r2, #255	; 0xff
 80007a4:	409a      	lsls	r2, r3
 80007a6:	0013      	movs	r3, r2
		tmppriority &= (uint32_t) (~(((uint32_t) 0xFF)
 80007a8:	43da      	mvns	r2, r3
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	4013      	ands	r3, r2
 80007ae:	60fb      	str	r3, [r7, #12]
		tmppriority |=
				(uint32_t) ((((uint32_t) NVIC_InitStruct->NVIC_IRQChannelPriority
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	785b      	ldrb	r3, [r3, #1]
						<< 6) & 0xFF)
 80007b4:	019b      	lsls	r3, r3, #6
 80007b6:	22ff      	movs	r2, #255	; 0xff
 80007b8:	401a      	ands	r2, r3
						<< ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8));
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	0019      	movs	r1, r3
 80007c0:	2303      	movs	r3, #3
 80007c2:	400b      	ands	r3, r1
 80007c4:	00db      	lsls	r3, r3, #3
				(uint32_t) ((((uint32_t) NVIC_InitStruct->NVIC_IRQChannelPriority
 80007c6:	409a      	lsls	r2, r3
 80007c8:	0013      	movs	r3, r2
		tmppriority |=
 80007ca:	68fa      	ldr	r2, [r7, #12]
 80007cc:	4313      	orrs	r3, r2
 80007ce:	60fb      	str	r3, [r7, #12]

		NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02] = tmppriority;
 80007d0:	4911      	ldr	r1, [pc, #68]	; (8000818 <NVIC_Init+0xa8>)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	089b      	lsrs	r3, r3, #2
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	33c0      	adds	r3, #192	; 0xc0
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	68fa      	ldr	r2, [r7, #12]
 80007e0:	505a      	str	r2, [r3, r1]

		/* Enable the Selected IRQ Channels --------------------------------------*/
		NVIC->ISER[0] = (uint32_t) 0x01
				<< (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t) 0x1F);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	001a      	movs	r2, r3
 80007e8:	231f      	movs	r3, #31
 80007ea:	401a      	ands	r2, r3
		NVIC->ISER[0] = (uint32_t) 0x01
 80007ec:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <NVIC_Init+0xa8>)
				<< (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t) 0x1F);
 80007ee:	2101      	movs	r1, #1
 80007f0:	4091      	lsls	r1, r2
 80007f2:	000a      	movs	r2, r1
		NVIC->ISER[0] = (uint32_t) 0x01
 80007f4:	601a      	str	r2, [r3, #0]
	} else {
		/* Disable the Selected IRQ Channels -------------------------------------*/
		NVIC->ICER[0] = (uint32_t) 0x01
				<< (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t) 0x1F);
	}
}
 80007f6:	e00a      	b.n	800080e <NVIC_Init+0x9e>
				<< (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t) 0x1F);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	001a      	movs	r2, r3
 80007fe:	231f      	movs	r3, #31
 8000800:	4013      	ands	r3, r2
		NVIC->ICER[0] = (uint32_t) 0x01
 8000802:	4905      	ldr	r1, [pc, #20]	; (8000818 <NVIC_Init+0xa8>)
				<< (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t) 0x1F);
 8000804:	2201      	movs	r2, #1
 8000806:	409a      	lsls	r2, r3
 8000808:	0013      	movs	r3, r2
		NVIC->ICER[0] = (uint32_t) 0x01
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	508b      	str	r3, [r1, r2]
}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	46bd      	mov	sp, r7
 8000812:	b004      	add	sp, #16
 8000814:	bd80      	pop	{r7, pc}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	e000e100 	.word	0xe000e100

0800081c <SysTick_CLKSourceConfig>:
 *          This parameter can be one of the following values:
 *            @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
 *            @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
 * @retval None
 */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource) {
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));

	if (SysTick_CLKSource == SysTick_CLKSource_HCLK) {
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2b04      	cmp	r3, #4
 8000828:	d106      	bne.n	8000838 <SysTick_CLKSourceConfig+0x1c>
		SysTick->CTRL |= SysTick_CLKSource_HCLK;
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <SysTick_CLKSourceConfig+0x30>)
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	4b07      	ldr	r3, [pc, #28]	; (800084c <SysTick_CLKSourceConfig+0x30>)
 8000830:	2104      	movs	r1, #4
 8000832:	430a      	orrs	r2, r1
 8000834:	601a      	str	r2, [r3, #0]
	} else {
		SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
	}
}
 8000836:	e005      	b.n	8000844 <SysTick_CLKSourceConfig+0x28>
		SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8000838:	4b04      	ldr	r3, [pc, #16]	; (800084c <SysTick_CLKSourceConfig+0x30>)
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	4b03      	ldr	r3, [pc, #12]	; (800084c <SysTick_CLKSourceConfig+0x30>)
 800083e:	2104      	movs	r1, #4
 8000840:	438a      	bics	r2, r1
 8000842:	601a      	str	r2, [r3, #0]
}
 8000844:	46c0      	nop			; (mov r8, r8)
 8000846:	46bd      	mov	sp, r7
 8000848:	b002      	add	sp, #8
 800084a:	bd80      	pop	{r7, pc}
 800084c:	e000e010 	.word	0xe000e010

08000850 <RCC_AHBPeriphClockCmd>:
 *             @arg RCC_AHBPeriph_DMA1:  DMA1 clock
 * @param  NewState: new state of the specified peripheral clock.
 *          This parameter can be: ENABLE or DISABLE.
 * @retval None
 */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	000a      	movs	r2, r1
 800085a:	1cfb      	adds	r3, r7, #3
 800085c:	701a      	strb	r2, [r3, #0]
	/* Check the parameters */
	assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
	assert_param(IS_FUNCTIONAL_STATE(NewState));

	if (NewState != DISABLE) {
 800085e:	1cfb      	adds	r3, r7, #3
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d006      	beq.n	8000874 <RCC_AHBPeriphClockCmd+0x24>
		RCC->AHBENR |= RCC_AHBPeriph;
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <RCC_AHBPeriphClockCmd+0x3c>)
 8000868:	6959      	ldr	r1, [r3, #20]
 800086a:	4b08      	ldr	r3, [pc, #32]	; (800088c <RCC_AHBPeriphClockCmd+0x3c>)
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	430a      	orrs	r2, r1
 8000870:	615a      	str	r2, [r3, #20]
	} else {
		RCC->AHBENR &= ~RCC_AHBPeriph;
	}
}
 8000872:	e006      	b.n	8000882 <RCC_AHBPeriphClockCmd+0x32>
		RCC->AHBENR &= ~RCC_AHBPeriph;
 8000874:	4b05      	ldr	r3, [pc, #20]	; (800088c <RCC_AHBPeriphClockCmd+0x3c>)
 8000876:	695a      	ldr	r2, [r3, #20]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	43d9      	mvns	r1, r3
 800087c:	4b03      	ldr	r3, [pc, #12]	; (800088c <RCC_AHBPeriphClockCmd+0x3c>)
 800087e:	400a      	ands	r2, r1
 8000880:	615a      	str	r2, [r3, #20]
}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	b002      	add	sp, #8
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	40021000 	.word	0x40021000

08000890 <RCC_APB2PeriphClockCmd>:
 *             @arg RCC_APB2Periph_DBGMCU: DBGMCU clock
 * @param  NewState: new state of the specified peripheral clock.
 *          This parameter can be: ENABLE or DISABLE.
 * @retval None
 */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	000a      	movs	r2, r1
 800089a:	1cfb      	adds	r3, r7, #3
 800089c:	701a      	strb	r2, [r3, #0]
	/* Check the parameters */
	assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
	assert_param(IS_FUNCTIONAL_STATE(NewState));

	if (NewState != DISABLE) {
 800089e:	1cfb      	adds	r3, r7, #3
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d006      	beq.n	80008b4 <RCC_APB2PeriphClockCmd+0x24>
		RCC->APB2ENR |= RCC_APB2Periph;
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <RCC_APB2PeriphClockCmd+0x3c>)
 80008a8:	6999      	ldr	r1, [r3, #24]
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <RCC_APB2PeriphClockCmd+0x3c>)
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	430a      	orrs	r2, r1
 80008b0:	619a      	str	r2, [r3, #24]
	} else {
		RCC->APB2ENR &= ~RCC_APB2Periph;
	}
}
 80008b2:	e006      	b.n	80008c2 <RCC_APB2PeriphClockCmd+0x32>
		RCC->APB2ENR &= ~RCC_APB2Periph;
 80008b4:	4b05      	ldr	r3, [pc, #20]	; (80008cc <RCC_APB2PeriphClockCmd+0x3c>)
 80008b6:	699a      	ldr	r2, [r3, #24]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	43d9      	mvns	r1, r3
 80008bc:	4b03      	ldr	r3, [pc, #12]	; (80008cc <RCC_APB2PeriphClockCmd+0x3c>)
 80008be:	400a      	ands	r2, r1
 80008c0:	619a      	str	r2, [r3, #24]
}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b002      	add	sp, #8
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	40021000 	.word	0x40021000

080008d0 <RCC_APB1PeriphClockCmd>:
 *           @arg RCC_APB1Periph_CEC:    CEC clock, applicable only for STM32F051, STM32F042 and STM32F072 devices                               
 * @param  NewState: new state of the specified peripheral clock.
 *          This parameter can be: ENABLE or DISABLE.
 * @retval None
 */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	000a      	movs	r2, r1
 80008da:	1cfb      	adds	r3, r7, #3
 80008dc:	701a      	strb	r2, [r3, #0]
	/* Check the parameters */
	assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
	assert_param(IS_FUNCTIONAL_STATE(NewState));

	if (NewState != DISABLE) {
 80008de:	1cfb      	adds	r3, r7, #3
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d006      	beq.n	80008f4 <RCC_APB1PeriphClockCmd+0x24>
		RCC->APB1ENR |= RCC_APB1Periph;
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <RCC_APB1PeriphClockCmd+0x3c>)
 80008e8:	69d9      	ldr	r1, [r3, #28]
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <RCC_APB1PeriphClockCmd+0x3c>)
 80008ec:	687a      	ldr	r2, [r7, #4]
 80008ee:	430a      	orrs	r2, r1
 80008f0:	61da      	str	r2, [r3, #28]
	} else {
		RCC->APB1ENR &= ~RCC_APB1Periph;
	}
}
 80008f2:	e006      	b.n	8000902 <RCC_APB1PeriphClockCmd+0x32>
		RCC->APB1ENR &= ~RCC_APB1Periph;
 80008f4:	4b05      	ldr	r3, [pc, #20]	; (800090c <RCC_APB1PeriphClockCmd+0x3c>)
 80008f6:	69da      	ldr	r2, [r3, #28]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	43d9      	mvns	r1, r3
 80008fc:	4b03      	ldr	r3, [pc, #12]	; (800090c <RCC_APB1PeriphClockCmd+0x3c>)
 80008fe:	400a      	ands	r2, r1
 8000900:	61da      	str	r2, [r3, #28]
}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	46bd      	mov	sp, r7
 8000906:	b002      	add	sp, #8
 8000908:	bd80      	pop	{r7, pc}
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	40021000 	.word	0x40021000

08000910 <SYSCFG_EXTILineConfig>:
 *         For STM32F072: (0..15) for GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, (0..10) for GPIOF.
 *         For STM32F031: (0..15) for GPIOA, GPIOB, (13..15) for GPIOC and (0..1, 6..7) for GPIOF.
 * @retval None
 */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx,
		uint8_t EXTI_PinSourcex) {
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	0002      	movs	r2, r0
 8000918:	1dfb      	adds	r3, r7, #7
 800091a:	701a      	strb	r2, [r3, #0]
 800091c:	1dbb      	adds	r3, r7, #6
 800091e:	1c0a      	adds	r2, r1, #0
 8000920:	701a      	strb	r2, [r3, #0]
	uint32_t tmp = 0x00;
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]

	/* Check the parameters */
	assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
	assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

	tmp = ((uint32_t) 0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t) 0x03));
 8000926:	1dbb      	adds	r3, r7, #6
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	2203      	movs	r2, #3
 800092c:	4013      	ands	r3, r2
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	220f      	movs	r2, #15
 8000932:	409a      	lsls	r2, r3
 8000934:	0013      	movs	r3, r2
 8000936:	60fb      	str	r3, [r7, #12]
	SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8000938:	4a18      	ldr	r2, [pc, #96]	; (800099c <SYSCFG_EXTILineConfig+0x8c>)
 800093a:	1dbb      	adds	r3, r7, #6
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	089b      	lsrs	r3, r3, #2
 8000940:	b2db      	uxtb	r3, r3
 8000942:	3302      	adds	r3, #2
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	589b      	ldr	r3, [r3, r2]
 8000948:	68fa      	ldr	r2, [r7, #12]
 800094a:	43d2      	mvns	r2, r2
 800094c:	4813      	ldr	r0, [pc, #76]	; (800099c <SYSCFG_EXTILineConfig+0x8c>)
 800094e:	1db9      	adds	r1, r7, #6
 8000950:	7809      	ldrb	r1, [r1, #0]
 8000952:	0889      	lsrs	r1, r1, #2
 8000954:	b2c9      	uxtb	r1, r1
 8000956:	401a      	ands	r2, r3
 8000958:	1c8b      	adds	r3, r1, #2
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	501a      	str	r2, [r3, r0]
	SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |=
 800095e:	4a0f      	ldr	r2, [pc, #60]	; (800099c <SYSCFG_EXTILineConfig+0x8c>)
 8000960:	1dbb      	adds	r3, r7, #6
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	089b      	lsrs	r3, r3, #2
 8000966:	b2db      	uxtb	r3, r3
 8000968:	3302      	adds	r3, #2
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	589a      	ldr	r2, [r3, r2]
			(((uint32_t) EXTI_PortSourceGPIOx)
 800096e:	1dfb      	adds	r3, r7, #7
 8000970:	7819      	ldrb	r1, [r3, #0]
					<< (0x04 * (EXTI_PinSourcex & (uint8_t) 0x03)));
 8000972:	1dbb      	adds	r3, r7, #6
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	2003      	movs	r0, #3
 8000978:	4003      	ands	r3, r0
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	4099      	lsls	r1, r3
 800097e:	000b      	movs	r3, r1
	SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |=
 8000980:	4806      	ldr	r0, [pc, #24]	; (800099c <SYSCFG_EXTILineConfig+0x8c>)
 8000982:	1db9      	adds	r1, r7, #6
 8000984:	7809      	ldrb	r1, [r1, #0]
 8000986:	0889      	lsrs	r1, r1, #2
 8000988:	b2c9      	uxtb	r1, r1
 800098a:	431a      	orrs	r2, r3
 800098c:	1c8b      	adds	r3, r1, #2
 800098e:	009b      	lsls	r3, r3, #2
 8000990:	501a      	str	r2, [r3, r0]
}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	46bd      	mov	sp, r7
 8000996:	b004      	add	sp, #16
 8000998:	bd80      	pop	{r7, pc}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	40010000 	.word	0x40010000

080009a0 <consoleInit>:
	return result;
}


void consoleInit()
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
	consoleStates = CSTATE_ROW_VIS;
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <consoleInit+0x20>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	701a      	strb	r2, [r3, #0]
	consoleFlags |= CFLAG_NEWSTATE;
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <consoleInit+0x24>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2201      	movs	r2, #1
 80009b0:	4313      	orrs	r3, r2
 80009b2:	b2da      	uxtb	r2, r3
 80009b4:	4b03      	ldr	r3, [pc, #12]	; (80009c4 <consoleInit+0x24>)
 80009b6:	701a      	strb	r2, [r3, #0]

}
 80009b8:	46c0      	nop			; (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	200001a8 	.word	0x200001a8
 80009c4:	200001ed 	.word	0x200001ed

080009c8 <NVIC_SetPriority>:
 \note The priority cannot be set for every core interrupt.

 \param [in]      IRQn  Interrupt number.
 \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority) {
 80009c8:	b590      	push	{r4, r7, lr}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	0002      	movs	r2, r0
 80009d0:	6039      	str	r1, [r7, #0]
 80009d2:	1dfb      	adds	r3, r7, #7
 80009d4:	701a      	strb	r2, [r3, #0]
	if (IRQn < 0) {
 80009d6:	1dfb      	adds	r3, r7, #7
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b7f      	cmp	r3, #127	; 0x7f
 80009dc:	d932      	bls.n	8000a44 <NVIC_SetPriority+0x7c>
		SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)]
 80009de:	4a2f      	ldr	r2, [pc, #188]	; (8000a9c <NVIC_SetPriority+0xd4>)
 80009e0:	1dfb      	adds	r3, r7, #7
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	0019      	movs	r1, r3
 80009e6:	230f      	movs	r3, #15
 80009e8:	400b      	ands	r3, r1
 80009ea:	3b08      	subs	r3, #8
 80009ec:	089b      	lsrs	r3, r3, #2
 80009ee:	3306      	adds	r3, #6
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	18d3      	adds	r3, r2, r3
 80009f4:	3304      	adds	r3, #4
 80009f6:	681b      	ldr	r3, [r3, #0]
				& ~(0xFF << _BIT_SHIFT(IRQn)))
 80009f8:	1dfa      	adds	r2, r7, #7
 80009fa:	7812      	ldrb	r2, [r2, #0]
 80009fc:	0011      	movs	r1, r2
 80009fe:	2203      	movs	r2, #3
 8000a00:	400a      	ands	r2, r1
 8000a02:	00d2      	lsls	r2, r2, #3
 8000a04:	21ff      	movs	r1, #255	; 0xff
 8000a06:	4091      	lsls	r1, r2
 8000a08:	000a      	movs	r2, r1
 8000a0a:	43d2      	mvns	r2, r2
 8000a0c:	401a      	ands	r2, r3
 8000a0e:	0011      	movs	r1, r2
				| (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF)
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	019b      	lsls	r3, r3, #6
 8000a14:	22ff      	movs	r2, #255	; 0xff
 8000a16:	401a      	ands	r2, r3
						<< _BIT_SHIFT(IRQn));
 8000a18:	1dfb      	adds	r3, r7, #7
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	2303      	movs	r3, #3
 8000a20:	4003      	ands	r3, r0
 8000a22:	00db      	lsls	r3, r3, #3
 8000a24:	409a      	lsls	r2, r3
		SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)]
 8000a26:	481d      	ldr	r0, [pc, #116]	; (8000a9c <NVIC_SetPriority+0xd4>)
 8000a28:	1dfb      	adds	r3, r7, #7
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	001c      	movs	r4, r3
 8000a2e:	230f      	movs	r3, #15
 8000a30:	4023      	ands	r3, r4
 8000a32:	3b08      	subs	r3, #8
 8000a34:	089b      	lsrs	r3, r3, #2
				| (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF)
 8000a36:	430a      	orrs	r2, r1
		SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)]
 8000a38:	3306      	adds	r3, #6
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	18c3      	adds	r3, r0, r3
 8000a3e:	3304      	adds	r3, #4
 8000a40:	601a      	str	r2, [r3, #0]
		NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)]
				& ~(0xFF << _BIT_SHIFT(IRQn)))
				| (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF)
						<< _BIT_SHIFT(IRQn));
	}
}
 8000a42:	e027      	b.n	8000a94 <NVIC_SetPriority+0xcc>
		NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)]
 8000a44:	4a16      	ldr	r2, [pc, #88]	; (8000aa0 <NVIC_SetPriority+0xd8>)
 8000a46:	1dfb      	adds	r3, r7, #7
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	b25b      	sxtb	r3, r3
 8000a4c:	089b      	lsrs	r3, r3, #2
 8000a4e:	33c0      	adds	r3, #192	; 0xc0
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	589b      	ldr	r3, [r3, r2]
				& ~(0xFF << _BIT_SHIFT(IRQn)))
 8000a54:	1dfa      	adds	r2, r7, #7
 8000a56:	7812      	ldrb	r2, [r2, #0]
 8000a58:	0011      	movs	r1, r2
 8000a5a:	2203      	movs	r2, #3
 8000a5c:	400a      	ands	r2, r1
 8000a5e:	00d2      	lsls	r2, r2, #3
 8000a60:	21ff      	movs	r1, #255	; 0xff
 8000a62:	4091      	lsls	r1, r2
 8000a64:	000a      	movs	r2, r1
 8000a66:	43d2      	mvns	r2, r2
 8000a68:	401a      	ands	r2, r3
 8000a6a:	0011      	movs	r1, r2
				| (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF)
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	019b      	lsls	r3, r3, #6
 8000a70:	22ff      	movs	r2, #255	; 0xff
 8000a72:	401a      	ands	r2, r3
						<< _BIT_SHIFT(IRQn));
 8000a74:	1dfb      	adds	r3, r7, #7
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	0018      	movs	r0, r3
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	4003      	ands	r3, r0
 8000a7e:	00db      	lsls	r3, r3, #3
 8000a80:	409a      	lsls	r2, r3
		NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)]
 8000a82:	4807      	ldr	r0, [pc, #28]	; (8000aa0 <NVIC_SetPriority+0xd8>)
 8000a84:	1dfb      	adds	r3, r7, #7
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	b25b      	sxtb	r3, r3
 8000a8a:	089b      	lsrs	r3, r3, #2
				| (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF)
 8000a8c:	430a      	orrs	r2, r1
		NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)]
 8000a8e:	33c0      	adds	r3, #192	; 0xc0
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	501a      	str	r2, [r3, r0]
}
 8000a94:	46c0      	nop			; (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	b003      	add	sp, #12
 8000a9a:	bd90      	pop	{r4, r7, pc}
 8000a9c:	e000ed00 	.word	0xe000ed00
 8000aa0:	e000e100 	.word	0xe000e100

08000aa4 <SysTick_Config>:
 \note     When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
 function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
 must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	1e5a      	subs	r2, r3, #1
 8000ab0:	2380      	movs	r3, #128	; 0x80
 8000ab2:	045b      	lsls	r3, r3, #17
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d301      	bcc.n	8000abc <SysTick_Config+0x18>
		return (1); /* Reload value impossible */
 8000ab8:	2301      	movs	r3, #1
 8000aba:	e010      	b.n	8000ade <SysTick_Config+0x3a>

	SysTick->LOAD = ticks - 1; /* set reload register */
 8000abc:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <SysTick_Config+0x44>)
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	3a01      	subs	r2, #1
 8000ac2:	605a      	str	r2, [r3, #4]
	NVIC_SetPriority(SysTick_IRQn, (1 << __NVIC_PRIO_BITS) - 1); /* set Priority for Systick Interrupt */
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	425b      	negs	r3, r3
 8000ac8:	2103      	movs	r1, #3
 8000aca:	0018      	movs	r0, r3
 8000acc:	f7ff ff7c 	bl	80009c8 <NVIC_SetPriority>
	SysTick->VAL = 0; /* Load the SysTick Counter Value */
 8000ad0:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <SysTick_Config+0x44>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 8000ad6:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <SysTick_Config+0x44>)
 8000ad8:	2207      	movs	r2, #7
 8000ada:	601a      	str	r2, [r3, #0]
	SysTick_CTRL_TICKINT_Msk |
	SysTick_CTRL_ENABLE_Msk; /* Enable SysTick IRQ and SysTick Timer */
	return (0); /* Function successful */
 8000adc:	2300      	movs	r3, #0
}
 8000ade:	0018      	movs	r0, r3
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	b002      	add	sp, #8
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	e000e010 	.word	0xe000e010

08000aec <SysTick_Handler>:
**  Abstract: SysTick interrupt handler
**
**===========================================================================
*/
void SysTick_Handler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
	if(delayTimer)
 8000af0:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <SysTick_Handler+0x3c>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d004      	beq.n	8000b02 <SysTick_Handler+0x16>
	{
		delayTimer--;
 8000af8:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <SysTick_Handler+0x3c>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	1e5a      	subs	r2, r3, #1
 8000afe:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <SysTick_Handler+0x3c>)
 8000b00:	601a      	str	r2, [r3, #0]
	}
	timer++;
 8000b02:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <SysTick_Handler+0x40>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	1c5a      	adds	r2, r3, #1
 8000b08:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <SysTick_Handler+0x40>)
 8000b0a:	601a      	str	r2, [r3, #0]

	if  (timer>100)
 8000b0c:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <SysTick_Handler+0x40>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b64      	cmp	r3, #100	; 0x64
 8000b12:	d905      	bls.n	8000b20 <SysTick_Handler+0x34>
	{
		timerFlag = 1;
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <SysTick_Handler+0x44>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	701a      	strb	r2, [r3, #0]
		timer = 0;
 8000b1a:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <SysTick_Handler+0x40>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
	}
}
 8000b20:	46c0      	nop			; (mov r8, r8)
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	200001f8 	.word	0x200001f8
 8000b2c:	20000030 	.word	0x20000030
 8000b30:	20000034 	.word	0x20000034

08000b34 <delay>:


void delay(uint32_t ticks)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	delayTimer = ticks;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <delay+0x24>)
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	601a      	str	r2, [r3, #0]
	while(delayTimer > 0);
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <delay+0x24>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d1fb      	bne.n	8000b44 <delay+0x10>
}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	46bd      	mov	sp, r7
 8000b52:	b002      	add	sp, #8
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	200001f8 	.word	0x200001f8

08000b5c <main>:
 * -> no more than 16x64 pixels!!
 * for full color rgb, the complete frame already takes 3kB!
 */

int main(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
	SystemInit();
 8000b62:	f000 f8b1 	bl	8000cc8 <SystemInit>
	SystemCoreClockUpdate();
 8000b66:	f000 f8f7 	bl	8000d58 <SystemCoreClockUpdate>
	//the systick timer runs with 6MHz
	//config the timer for 1ms interval
	SysTick_Config(SystemCoreClock / 8 / 1000);
 8000b6a:	4b3e      	ldr	r3, [pc, #248]	; (8000c64 <main+0x108>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	22fa      	movs	r2, #250	; 0xfa
 8000b70:	0151      	lsls	r1, r2, #5
 8000b72:	0018      	movs	r0, r3
 8000b74:	f7ff fac8 	bl	8000108 <__udivsi3>
 8000b78:	0003      	movs	r3, r0
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f7ff ff92 	bl	8000aa4 <SysTick_Config>
	//the systick_config just set the priority of the systick to 15  or so - very low!
	//set it back to 0
	NVIC_SetPriority(SysTick_IRQn,0);
 8000b80:	2301      	movs	r3, #1
 8000b82:	425b      	negs	r3, r3
 8000b84:	2100      	movs	r1, #0
 8000b86:	0018      	movs	r0, r3
 8000b88:	f7ff ff1e 	bl	80009c8 <NVIC_SetPriority>
	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8);
 8000b8c:	2305      	movs	r3, #5
 8000b8e:	425b      	negs	r3, r3
 8000b90:	0018      	movs	r0, r3
 8000b92:	f7ff fe43 	bl	800081c <SysTick_CLKSourceConfig>

	//init the drivers
	power_init();
 8000b96:	f001 fa0d 	bl	8001fb4 <power_init>
	apa102_init();
 8000b9a:	f000 f98d 	bl	8000eb8 <apa102_init>
	mma8653_init();
 8000b9e:	f000 fffd 	bl	8001b9c <mma8653_init>

	globalColor.red=0xFF;
 8000ba2:	4b31      	ldr	r3, [pc, #196]	; (8000c68 <main+0x10c>)
 8000ba4:	22ff      	movs	r2, #255	; 0xff
 8000ba6:	70da      	strb	r2, [r3, #3]
	globalColor.green=0xFF;
 8000ba8:	4b2f      	ldr	r3, [pc, #188]	; (8000c68 <main+0x10c>)
 8000baa:	22ff      	movs	r2, #255	; 0xff
 8000bac:	709a      	strb	r2, [r3, #2]
	globalColor.blue=0xFF;
 8000bae:	4b2e      	ldr	r3, [pc, #184]	; (8000c68 <main+0x10c>)
 8000bb0:	22ff      	movs	r2, #255	; 0xff
 8000bb2:	705a      	strb	r2, [r3, #1]

	if(power_UsbPresent()) {
 8000bb4:	f001 fa4e 	bl	8002054 <power_UsbPresent>
 8000bb8:	1e03      	subs	r3, r0, #0
 8000bba:	d005      	beq.n	8000bc8 <main+0x6c>
		//we are attached to a USB-Port!
		//USB_Init();
		winusb_init_usbd();
 8000bbc:	f003 f9a2 	bl	8003f04 <winusb_init_usbd>
		usb_device_connect();
 8000bc0:	f003 f9e2 	bl	8003f88 <usb_device_connect>
		consoleInit();
 8000bc4:	f7ff feec 	bl	80009a0 <consoleInit>
	}

	apa102_allOff();
 8000bc8:	f000 fb22 	bl	8001210 <apa102_allOff>

	//LED-Test
	for(uint8_t i = 0; i<16; i++) {
 8000bcc:	1dfb      	adds	r3, r7, #7
 8000bce:	2200      	movs	r2, #0
 8000bd0:	701a      	strb	r2, [r3, #0]
 8000bd2:	e00d      	b.n	8000bf0 <main+0x94>
		apa102_setSingle(i,10);
 8000bd4:	1dfb      	adds	r3, r7, #7
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	210a      	movs	r1, #10
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f000 fafe 	bl	80011dc <apa102_setSingle>
		delay(20);
 8000be0:	2014      	movs	r0, #20
 8000be2:	f7ff ffa7 	bl	8000b34 <delay>
	for(uint8_t i = 0; i<16; i++) {
 8000be6:	1dfb      	adds	r3, r7, #7
 8000be8:	781a      	ldrb	r2, [r3, #0]
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	3201      	adds	r2, #1
 8000bee:	701a      	strb	r2, [r3, #0]
 8000bf0:	1dfb      	adds	r3, r7, #7
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b0f      	cmp	r3, #15
 8000bf6:	d9ed      	bls.n	8000bd4 <main+0x78>
	}

	switch(progselect) {
 8000bf8:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <main+0x110>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d00b      	beq.n	8000c18 <main+0xbc>
 8000c00:	dc0d      	bgt.n	8000c1e <main+0xc2>
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d002      	beq.n	8000c0c <main+0xb0>
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d003      	beq.n	8000c12 <main+0xb6>
 8000c0a:	e008      	b.n	8000c1e <main+0xc2>
		case 0: init_povdisplay(); break;
 8000c0c:	f001 fa6c 	bl	80020e8 <init_povdisplay>
 8000c10:	e005      	b.n	8000c1e <main+0xc2>
		case 1: init_level(); break;
 8000c12:	f001 fa82 	bl	800211a <init_level>
 8000c16:	e002      	b.n	8000c1e <main+0xc2>
		case 2: init_test1(); break;
 8000c18:	f001 fa9a 	bl	8002150 <init_test1>
 8000c1c:	46c0      	nop			; (mov r8, r8)
	}

	while(1) {
		switch(progselect) {
 8000c1e:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <main+0x110>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	d00b      	beq.n	8000c3e <main+0xe2>
 8000c26:	dc0d      	bgt.n	8000c44 <main+0xe8>
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d002      	beq.n	8000c32 <main+0xd6>
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d003      	beq.n	8000c38 <main+0xdc>
 8000c30:	e008      	b.n	8000c44 <main+0xe8>
			case 0: povdisplay(); break;
 8000c32:	f001 faa1 	bl	8002178 <povdisplay>
 8000c36:	e005      	b.n	8000c44 <main+0xe8>
			case 1: level(); break;
 8000c38:	f001 faae 	bl	8002198 <level>
 8000c3c:	e002      	b.n	8000c44 <main+0xe8>
			case 2: test1(); break;
 8000c3e:	f001 fb11 	bl	8002264 <test1>
 8000c42:	46c0      	nop			; (mov r8, r8)
		}

		if(power_UsbPresent()){
 8000c44:	f001 fa06 	bl	8002054 <power_UsbPresent>
 8000c48:	1e03      	subs	r3, r0, #0
 8000c4a:	d001      	beq.n	8000c50 <main+0xf4>
			USB_Handler();
 8000c4c:	f003 f9ae 	bl	8003fac <USB_Handler>
		}

		progselect = switch_exec(progselect);
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <main+0x110>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	0018      	movs	r0, r3
 8000c56:	f001 fb54 	bl	8002302 <switch_exec>
 8000c5a:	0003      	movs	r3, r0
 8000c5c:	001a      	movs	r2, r3
 8000c5e:	4b03      	ldr	r3, [pc, #12]	; (8000c6c <main+0x110>)
 8000c60:	701a      	strb	r2, [r3, #0]
		switch(progselect) {
 8000c62:	e7dc      	b.n	8000c1e <main+0xc2>
 8000c64:	20000000 	.word	0x20000000
 8000c68:	200001f0 	.word	0x200001f0
 8000c6c:	20000035 	.word	0x20000035

08000c70 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
}
 8000c74:	46c0      	nop			; (mov r8, r8)
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <HardFault_Handler>:
  * @param  None
  * @retval None
  */

void HardFault_Handler(void)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000c7e:	e7fe      	b.n	8000c7e <HardFault_Handler+0x4>

08000c80 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
}
 8000c84:	46c0      	nop			; (mov r8, r8)
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	af00      	add	r7, sp, #0
}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <USB_IRQHandler>:
  * @brief  This function handles USB FS Handler.
  * @param  None
  * @retval None
  */
void USB_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
	//USB_Istr();
}
 8000c98:	46c0      	nop			; (mov r8, r8)
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	af00      	add	r7, sp, #0
	displayFindReturnPoint();
 8000ca2:	f000 fd0b 	bl	80016bc <displayFindReturnPoint>
}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	displayEndOfLocktime();
 8000cb0:	f000 fc94 	bl	80015dc <displayEndOfLocktime>
}
 8000cb4:	46c0      	nop			; (mov r8, r8)
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	af00      	add	r7, sp, #0
	displaySendLine();
 8000cbe:	f000 fc21 	bl	8001504 <displaySendLine>
}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000ccc:	4b1b      	ldr	r3, [pc, #108]	; (8000d3c <SystemInit+0x74>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <SystemInit+0x74>)
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	601a      	str	r2, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[3:0] bits MCOPRE[2:0] */
  RCC->CFGR &= (uint32_t)0x80FFB80C;
 8000cd8:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <SystemInit+0x74>)
 8000cda:	685a      	ldr	r2, [r3, #4]
 8000cdc:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <SystemInit+0x74>)
 8000cde:	4918      	ldr	r1, [pc, #96]	; (8000d40 <SystemInit+0x78>)
 8000ce0:	400a      	ands	r2, r1
 8000ce2:	605a      	str	r2, [r3, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000ce4:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <SystemInit+0x74>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <SystemInit+0x74>)
 8000cea:	4916      	ldr	r1, [pc, #88]	; (8000d44 <SystemInit+0x7c>)
 8000cec:	400a      	ands	r2, r1
 8000cee:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <SystemInit+0x74>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <SystemInit+0x74>)
 8000cf6:	4914      	ldr	r1, [pc, #80]	; (8000d48 <SystemInit+0x80>)
 8000cf8:	400a      	ands	r2, r1
 8000cfa:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC07FFF;
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <SystemInit+0x74>)
 8000cfe:	685a      	ldr	r2, [r3, #4]
 8000d00:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <SystemInit+0x74>)
 8000d02:	4912      	ldr	r1, [pc, #72]	; (8000d4c <SystemInit+0x84>)
 8000d04:	400a      	ands	r2, r1
 8000d06:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <SystemInit+0x74>)
 8000d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <SystemInit+0x74>)
 8000d0e:	210f      	movs	r1, #15
 8000d10:	438a      	bics	r2, r1
 8000d12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 8000d14:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <SystemInit+0x74>)
 8000d16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <SystemInit+0x74>)
 8000d1a:	490d      	ldr	r1, [pc, #52]	; (8000d50 <SystemInit+0x88>)
 8000d1c:	400a      	ands	r2, r1
 8000d1e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset HSI14 & HSI48 bit */
  RCC->CR2 &= (uint32_t)0xFFFEFFFE;
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <SystemInit+0x74>)
 8000d22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <SystemInit+0x74>)
 8000d26:	490b      	ldr	r1, [pc, #44]	; (8000d54 <SystemInit+0x8c>)
 8000d28:	400a      	ands	r2, r1
 8000d2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000d2c:	4b03      	ldr	r3, [pc, #12]	; (8000d3c <SystemInit+0x74>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]

  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 8000d32:	f000 f893 	bl	8000e5c <SetSysClock>
}
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	80ffb80c 	.word	0x80ffb80c
 8000d44:	fef6ffff 	.word	0xfef6ffff
 8000d48:	fffbffff 	.word	0xfffbffff
 8000d4c:	ffc07fff 	.word	0xffc07fff
 8000d50:	fffffeac 	.word	0xfffffeac
 8000d54:	fffefffe 	.word	0xfffefffe

08000d58 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	2300      	movs	r3, #0
 8000d64:	60bb      	str	r3, [r7, #8]
 8000d66:	2300      	movs	r3, #0
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000d6e:	4b36      	ldr	r3, [pc, #216]	; (8000e48 <SystemCoreClockUpdate+0xf0>)
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	220c      	movs	r2, #12
 8000d74:	4013      	ands	r3, r2
 8000d76:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	2b0c      	cmp	r3, #12
 8000d7c:	d048      	beq.n	8000e10 <SystemCoreClockUpdate+0xb8>
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	2b0c      	cmp	r3, #12
 8000d82:	d849      	bhi.n	8000e18 <SystemCoreClockUpdate+0xc0>
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	2b08      	cmp	r3, #8
 8000d88:	d011      	beq.n	8000dae <SystemCoreClockUpdate+0x56>
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	2b08      	cmp	r3, #8
 8000d8e:	d843      	bhi.n	8000e18 <SystemCoreClockUpdate+0xc0>
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d003      	beq.n	8000d9e <SystemCoreClockUpdate+0x46>
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	2b04      	cmp	r3, #4
 8000d9a:	d004      	beq.n	8000da6 <SystemCoreClockUpdate+0x4e>
 8000d9c:	e03c      	b.n	8000e18 <SystemCoreClockUpdate+0xc0>
  {
  case 0x00:  /* HSI used as system clock */
    SystemCoreClock = HSI_VALUE;
 8000d9e:	4b2b      	ldr	r3, [pc, #172]	; (8000e4c <SystemCoreClockUpdate+0xf4>)
 8000da0:	4a2b      	ldr	r2, [pc, #172]	; (8000e50 <SystemCoreClockUpdate+0xf8>)
 8000da2:	601a      	str	r2, [r3, #0]
    break;
 8000da4:	e03c      	b.n	8000e20 <SystemCoreClockUpdate+0xc8>
  case 0x04:  /* HSE used as system clock */
    SystemCoreClock = HSE_VALUE;
 8000da6:	4b29      	ldr	r3, [pc, #164]	; (8000e4c <SystemCoreClockUpdate+0xf4>)
 8000da8:	4a29      	ldr	r2, [pc, #164]	; (8000e50 <SystemCoreClockUpdate+0xf8>)
 8000daa:	601a      	str	r2, [r3, #0]
    break;
 8000dac:	e038      	b.n	8000e20 <SystemCoreClockUpdate+0xc8>
  case 0x08:  /* PLL used as system clock */
    /* Get PLL clock source and multiplication factor ----------------------*/
    pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000dae:	4b26      	ldr	r3, [pc, #152]	; (8000e48 <SystemCoreClockUpdate+0xf0>)
 8000db0:	685a      	ldr	r2, [r3, #4]
 8000db2:	23f0      	movs	r3, #240	; 0xf0
 8000db4:	039b      	lsls	r3, r3, #14
 8000db6:	4013      	ands	r3, r2
 8000db8:	60bb      	str	r3, [r7, #8]
    pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000dba:	4b23      	ldr	r3, [pc, #140]	; (8000e48 <SystemCoreClockUpdate+0xf0>)
 8000dbc:	685a      	ldr	r2, [r3, #4]
 8000dbe:	23c0      	movs	r3, #192	; 0xc0
 8000dc0:	025b      	lsls	r3, r3, #9
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	607b      	str	r3, [r7, #4]
    pllmull = ( pllmull >> 18) + 2;
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	0c9b      	lsrs	r3, r3, #18
 8000dca:	3302      	adds	r3, #2
 8000dcc:	60bb      	str	r3, [r7, #8]

    if (pllsource == 0x00)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d10c      	bne.n	8000dee <SystemCoreClockUpdate+0x96>
    {
      /* HSI oscillator clock divided by 2 selected as PLL clock entry */
      SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8000dd4:	68b9      	ldr	r1, [r7, #8]
 8000dd6:	000a      	movs	r2, r1
 8000dd8:	0152      	lsls	r2, r2, #5
 8000dda:	1a52      	subs	r2, r2, r1
 8000ddc:	0193      	lsls	r3, r2, #6
 8000dde:	1a9b      	subs	r3, r3, r2
 8000de0:	00db      	lsls	r3, r3, #3
 8000de2:	185b      	adds	r3, r3, r1
 8000de4:	021b      	lsls	r3, r3, #8
 8000de6:	001a      	movs	r2, r3
 8000de8:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <SystemCoreClockUpdate+0xf4>)
 8000dea:	601a      	str	r2, [r3, #0]
    {
      prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
      /* HSE oscillator clock selected as PREDIV1 clock entry */
      SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
    }
    break;
 8000dec:	e018      	b.n	8000e20 <SystemCoreClockUpdate+0xc8>
      prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000dee:	4b16      	ldr	r3, [pc, #88]	; (8000e48 <SystemCoreClockUpdate+0xf0>)
 8000df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df2:	220f      	movs	r2, #15
 8000df4:	4013      	ands	r3, r2
 8000df6:	3301      	adds	r3, #1
 8000df8:	603b      	str	r3, [r7, #0]
      SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 8000dfa:	6839      	ldr	r1, [r7, #0]
 8000dfc:	4814      	ldr	r0, [pc, #80]	; (8000e50 <SystemCoreClockUpdate+0xf8>)
 8000dfe:	f7ff f983 	bl	8000108 <__udivsi3>
 8000e02:	0003      	movs	r3, r0
 8000e04:	001a      	movs	r2, r3
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	435a      	muls	r2, r3
 8000e0a:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <SystemCoreClockUpdate+0xf4>)
 8000e0c:	601a      	str	r2, [r3, #0]
    break;
 8000e0e:	e007      	b.n	8000e20 <SystemCoreClockUpdate+0xc8>
  case 0x0C:  /* HSI48 used as system clock */
    SystemCoreClock = HSI48_VALUE;
 8000e10:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <SystemCoreClockUpdate+0xf4>)
 8000e12:	4a10      	ldr	r2, [pc, #64]	; (8000e54 <SystemCoreClockUpdate+0xfc>)
 8000e14:	601a      	str	r2, [r3, #0]
    break;
 8000e16:	e003      	b.n	8000e20 <SystemCoreClockUpdate+0xc8>
  default: /* HSI used as system clock */
    SystemCoreClock = HSI_VALUE;
 8000e18:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <SystemCoreClockUpdate+0xf4>)
 8000e1a:	4a0d      	ldr	r2, [pc, #52]	; (8000e50 <SystemCoreClockUpdate+0xf8>)
 8000e1c:	601a      	str	r2, [r3, #0]
    break;
 8000e1e:	46c0      	nop			; (mov r8, r8)

  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000e20:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <SystemCoreClockUpdate+0xf0>)
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	091b      	lsrs	r3, r3, #4
 8000e26:	220f      	movs	r2, #15
 8000e28:	4013      	ands	r3, r2
 8000e2a:	4a0b      	ldr	r2, [pc, #44]	; (8000e58 <SystemCoreClockUpdate+0x100>)
 8000e2c:	5cd3      	ldrb	r3, [r2, r3]
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <SystemCoreClockUpdate+0xf4>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	40da      	lsrs	r2, r3
 8000e3a:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <SystemCoreClockUpdate+0xf4>)
 8000e3c:	601a      	str	r2, [r3, #0]
}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	46bd      	mov	sp, r7
 8000e42:	b004      	add	sp, #16
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	20000000 	.word	0x20000000
 8000e50:	007a1200 	.word	0x007a1200
 8000e54:	02dc6c00 	.word	0x02dc6c00
 8000e58:	20000004 	.word	0x20000004

08000e5c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
   /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
    /* At this stage the HSI is already enabled */
 
    /* Enable Prefetch Buffer and set Flash Latency */
    FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8000e60:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <SetSysClock+0x54>)
 8000e62:	2211      	movs	r2, #17
 8000e64:	601a      	str	r2, [r3, #0]
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000e66:	4a13      	ldr	r2, [pc, #76]	; (8000eb4 <SetSysClock+0x58>)
 8000e68:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <SetSysClock+0x58>)
 8000e6a:	6852      	ldr	r2, [r2, #4]
 8000e6c:	605a      	str	r2, [r3, #4]

    /* PCLK = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 8000e6e:	4a11      	ldr	r2, [pc, #68]	; (8000eb4 <SetSysClock+0x58>)
 8000e70:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <SetSysClock+0x58>)
 8000e72:	6852      	ldr	r2, [r2, #4]
 8000e74:	605a      	str	r2, [r3, #4]

   /* Enable HSI48 */
    RCC->CR2 |= RCC_CR2_HSI48ON;
 8000e76:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <SetSysClock+0x58>)
 8000e78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <SetSysClock+0x58>)
 8000e7c:	2180      	movs	r1, #128	; 0x80
 8000e7e:	0249      	lsls	r1, r1, #9
 8000e80:	430a      	orrs	r2, r1
 8000e82:	635a      	str	r2, [r3, #52]	; 0x34
  /* Wait till HSI48RDY is set */
    while((RCC->CR2 & RCC_CR2_HSI48RDY) == 0)
 8000e84:	46c0      	nop			; (mov r8, r8)
 8000e86:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <SetSysClock+0x58>)
 8000e88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e8a:	2380      	movs	r3, #128	; 0x80
 8000e8c:	029b      	lsls	r3, r3, #10
 8000e8e:	4013      	ands	r3, r2
 8000e90:	d0f9      	beq.n	8000e86 <SetSysClock+0x2a>
    { }
  /* Select HSI48 as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000e92:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <SetSysClock+0x58>)
 8000e94:	685a      	ldr	r2, [r3, #4]
 8000e96:	4b07      	ldr	r3, [pc, #28]	; (8000eb4 <SetSysClock+0x58>)
 8000e98:	2103      	movs	r1, #3
 8000e9a:	438a      	bics	r2, r1
 8000e9c:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_HSI48;
 8000e9e:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <SetSysClock+0x58>)
 8000ea0:	685a      	ldr	r2, [r3, #4]
 8000ea2:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <SetSysClock+0x58>)
 8000ea4:	2103      	movs	r1, #3
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	605a      	str	r2, [r3, #4]

}
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40022000 	.word	0x40022000
 8000eb4:	40021000 	.word	0x40021000

08000eb8 <apa102_init>:

#define LED_CNT		16
colorVrgb leds[LED_CNT];
uint8_t spiSendData[12 + 4 * LED_CNT];

void apa102_init() {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0

	//that's what a bare-metal implementation would look like:

	//enable clock for periphery modules
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_DMAEN;
 8000ebc:	4b28      	ldr	r3, [pc, #160]	; (8000f60 <apa102_init+0xa8>)
 8000ebe:	695a      	ldr	r2, [r3, #20]
 8000ec0:	4b27      	ldr	r3, [pc, #156]	; (8000f60 <apa102_init+0xa8>)
 8000ec2:	4928      	ldr	r1, [pc, #160]	; (8000f64 <apa102_init+0xac>)
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	615a      	str	r2, [r3, #20]
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8000ec8:	4b25      	ldr	r3, [pc, #148]	; (8000f60 <apa102_init+0xa8>)
 8000eca:	699a      	ldr	r2, [r3, #24]
 8000ecc:	4b24      	ldr	r3, [pc, #144]	; (8000f60 <apa102_init+0xa8>)
 8000ece:	2180      	movs	r1, #128	; 0x80
 8000ed0:	0149      	lsls	r1, r1, #5
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	619a      	str	r2, [r3, #24]

	//gpio
	//configure PINs PA7 and PA5 as AF out
	GPIOA->MODER &= ~(GPIO_MODER_MODER5 | GPIO_MODER_MODER7);
 8000ed6:	2390      	movs	r3, #144	; 0x90
 8000ed8:	05db      	lsls	r3, r3, #23
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	2390      	movs	r3, #144	; 0x90
 8000ede:	05db      	lsls	r3, r3, #23
 8000ee0:	4921      	ldr	r1, [pc, #132]	; (8000f68 <apa102_init+0xb0>)
 8000ee2:	400a      	ands	r2, r1
 8000ee4:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= GPIO_MODER_MODER5_1 | GPIO_MODER_MODER7_1;
 8000ee6:	2390      	movs	r3, #144	; 0x90
 8000ee8:	05db      	lsls	r3, r3, #23
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	2390      	movs	r3, #144	; 0x90
 8000eee:	05db      	lsls	r3, r3, #23
 8000ef0:	2188      	movs	r1, #136	; 0x88
 8000ef2:	0209      	lsls	r1, r1, #8
 8000ef4:	430a      	orrs	r2, r1
 8000ef6:	601a      	str	r2, [r3, #0]
	//configure PINs PA7 and PA5 as high speed out
	GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR5 | GPIO_OSPEEDER_OSPEEDR7;
 8000ef8:	2390      	movs	r3, #144	; 0x90
 8000efa:	05db      	lsls	r3, r3, #23
 8000efc:	689a      	ldr	r2, [r3, #8]
 8000efe:	2390      	movs	r3, #144	; 0x90
 8000f00:	05db      	lsls	r3, r3, #23
 8000f02:	21cc      	movs	r1, #204	; 0xcc
 8000f04:	0209      	lsls	r1, r1, #8
 8000f06:	430a      	orrs	r2, r1
 8000f08:	609a      	str	r2, [r3, #8]

	//init the SPI module
	//Full-Duplex Master, NSS pin not used, Clock Prescaler 8, MSB first, Cpol 1, CPHA 1
	SPI1->CR1 = SPI_CR1_SSM | SPI_CR1_SSI | SPI_CR1_BR_1 | SPI_CR1_MSTR
 8000f0a:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <apa102_init+0xb4>)
 8000f0c:	4a18      	ldr	r2, [pc, #96]	; (8000f70 <apa102_init+0xb8>)
 8000f0e:	801a      	strh	r2, [r3, #0]
			| SPI_CR1_CPOL | SPI_CR1_CPHA;
	//data size 8b (default in CR2)
	//enable dma request for tx
	SPI1->CR2 = SPI_CR2_TXDMAEN;
 8000f10:	4b16      	ldr	r3, [pc, #88]	; (8000f6c <apa102_init+0xb4>)
 8000f12:	2202      	movs	r2, #2
 8000f14:	809a      	strh	r2, [r3, #4]
	//enable SPI:
	SPI1->CR1 |= SPI_CR1_SPE;
 8000f16:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <apa102_init+0xb4>)
 8000f18:	881b      	ldrh	r3, [r3, #0]
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	4a13      	ldr	r2, [pc, #76]	; (8000f6c <apa102_init+0xb4>)
 8000f1e:	2140      	movs	r1, #64	; 0x40
 8000f20:	430b      	orrs	r3, r1
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	8013      	strh	r3, [r2, #0]

	//config DMA for SPI TX
	//priority high, memToPer, Memory Increment
	DMA1_Channel3->CCR |= DMA_CCR_PL_1 | DMA_CCR_MINC | DMA_CCR_DIR;
 8000f26:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <apa102_init+0xbc>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <apa102_init+0xbc>)
 8000f2c:	4912      	ldr	r1, [pc, #72]	; (8000f78 <apa102_init+0xc0>)
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	601a      	str	r2, [r3, #0]
	//memory Address
	DMA1_Channel3->CMAR = (uint32_t) spiSendData;
 8000f32:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <apa102_init+0xbc>)
 8000f34:	4a11      	ldr	r2, [pc, #68]	; (8000f7c <apa102_init+0xc4>)
 8000f36:	60da      	str	r2, [r3, #12]
	//peripheral address
	DMA1_Channel3->CPAR = (uint32_t) &(SPI1->DR);
 8000f38:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <apa102_init+0xbc>)
 8000f3a:	4a11      	ldr	r2, [pc, #68]	; (8000f80 <apa102_init+0xc8>)
 8000f3c:	609a      	str	r2, [r3, #8]

	apa102_allOff();
 8000f3e:	f000 f967 	bl	8001210 <apa102_allOff>
	globalColor.red = 255;
 8000f42:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <apa102_init+0xcc>)
 8000f44:	22ff      	movs	r2, #255	; 0xff
 8000f46:	70da      	strb	r2, [r3, #3]
	globalColor.green = 255;
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <apa102_init+0xcc>)
 8000f4a:	22ff      	movs	r2, #255	; 0xff
 8000f4c:	709a      	strb	r2, [r3, #2]
	globalColor.blue = 255;
 8000f4e:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <apa102_init+0xcc>)
 8000f50:	22ff      	movs	r2, #255	; 0xff
 8000f52:	705a      	strb	r2, [r3, #1]
	globalColor.global = 10;
 8000f54:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <apa102_init+0xcc>)
 8000f56:	220a      	movs	r2, #10
 8000f58:	701a      	strb	r2, [r3, #0]
}
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40021000 	.word	0x40021000
 8000f64:	00020001 	.word	0x00020001
 8000f68:	ffff33ff 	.word	0xffff33ff
 8000f6c:	40013000 	.word	0x40013000
 8000f70:	00000317 	.word	0x00000317
 8000f74:	40020030 	.word	0x40020030
 8000f78:	00002090 	.word	0x00002090
 8000f7c:	2000025c 	.word	0x2000025c
 8000f80:	4001300c 	.word	0x4001300c
 8000f84:	200001f0 	.word	0x200001f0

08000f88 <apa102_setGlobalColor>:

void apa102_setGlobalColor(uint8_t red, uint8_t green, uint8_t blue) {
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	0004      	movs	r4, r0
 8000f90:	0008      	movs	r0, r1
 8000f92:	0011      	movs	r1, r2
 8000f94:	1dfb      	adds	r3, r7, #7
 8000f96:	1c22      	adds	r2, r4, #0
 8000f98:	701a      	strb	r2, [r3, #0]
 8000f9a:	1dbb      	adds	r3, r7, #6
 8000f9c:	1c02      	adds	r2, r0, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
 8000fa0:	1d7b      	adds	r3, r7, #5
 8000fa2:	1c0a      	adds	r2, r1, #0
 8000fa4:	701a      	strb	r2, [r3, #0]
	globalColor.red = red;
 8000fa6:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <apa102_setGlobalColor+0x40>)
 8000fa8:	1dfa      	adds	r2, r7, #7
 8000faa:	7812      	ldrb	r2, [r2, #0]
 8000fac:	70da      	strb	r2, [r3, #3]
	globalColor.green = green;
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <apa102_setGlobalColor+0x40>)
 8000fb0:	1dba      	adds	r2, r7, #6
 8000fb2:	7812      	ldrb	r2, [r2, #0]
 8000fb4:	709a      	strb	r2, [r3, #2]
	globalColor.blue = blue;
 8000fb6:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <apa102_setGlobalColor+0x40>)
 8000fb8:	1d7a      	adds	r2, r7, #5
 8000fba:	7812      	ldrb	r2, [r2, #0]
 8000fbc:	705a      	strb	r2, [r3, #1]
}
 8000fbe:	46c0      	nop			; (mov r8, r8)
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	b003      	add	sp, #12
 8000fc4:	bd90      	pop	{r4, r7, pc}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	200001f0 	.word	0x200001f0

08000fcc <updateStripe>:

void updateStripe() {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
	uint8_t ledIdx = 0;
 8000fd2:	1dfb      	adds	r3, r7, #7
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	701a      	strb	r2, [r3, #0]
	uint8_t byteIdx = 0;
 8000fd8:	1dbb      	adds	r3, r7, #6
 8000fda:	2200      	movs	r2, #0
 8000fdc:	701a      	strb	r2, [r3, #0]

	//disable the DMA channel
	DMA1_Channel3->CCR &= ~DMA_CCR_EN;
 8000fde:	4b4a      	ldr	r3, [pc, #296]	; (8001108 <updateStripe+0x13c>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	4b49      	ldr	r3, [pc, #292]	; (8001108 <updateStripe+0x13c>)
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	438a      	bics	r2, r1
 8000fe8:	601a      	str	r2, [r3, #0]
	//start frame
	for (uint8_t i = 0; i < 4; i++) {
 8000fea:	1d7b      	adds	r3, r7, #5
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]
 8000ff0:	e00e      	b.n	8001010 <updateStripe+0x44>
		spiSendData[byteIdx] = 0x00;
 8000ff2:	1dbb      	adds	r3, r7, #6
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	4a45      	ldr	r2, [pc, #276]	; (800110c <updateStripe+0x140>)
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	54d1      	strb	r1, [r2, r3]
		byteIdx++;
 8000ffc:	1dbb      	adds	r3, r7, #6
 8000ffe:	781a      	ldrb	r2, [r3, #0]
 8001000:	1dbb      	adds	r3, r7, #6
 8001002:	3201      	adds	r2, #1
 8001004:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 4; i++) {
 8001006:	1d7b      	adds	r3, r7, #5
 8001008:	781a      	ldrb	r2, [r3, #0]
 800100a:	1d7b      	adds	r3, r7, #5
 800100c:	3201      	adds	r2, #1
 800100e:	701a      	strb	r2, [r3, #0]
 8001010:	1d7b      	adds	r3, r7, #5
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b03      	cmp	r3, #3
 8001016:	d9ec      	bls.n	8000ff2 <updateStripe+0x26>
	}

	for (uint8_t i = 0; i < LED_CNT; i++) {
 8001018:	1d3b      	adds	r3, r7, #4
 800101a:	2200      	movs	r2, #0
 800101c:	701a      	strb	r2, [r3, #0]
 800101e:	e04b      	b.n	80010b8 <updateStripe+0xec>
		//led frame
		spiSendData[byteIdx] = 0xE0 | (leds[ledIdx].global & 0x1F); //global
 8001020:	1dfb      	adds	r3, r7, #7
 8001022:	781a      	ldrb	r2, [r3, #0]
 8001024:	4b3a      	ldr	r3, [pc, #232]	; (8001110 <updateStripe+0x144>)
 8001026:	0092      	lsls	r2, r2, #2
 8001028:	5cd2      	ldrb	r2, [r2, r3]
 800102a:	1dbb      	adds	r3, r7, #6
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2120      	movs	r1, #32
 8001030:	4249      	negs	r1, r1
 8001032:	430a      	orrs	r2, r1
 8001034:	b2d1      	uxtb	r1, r2
 8001036:	4a35      	ldr	r2, [pc, #212]	; (800110c <updateStripe+0x140>)
 8001038:	54d1      	strb	r1, [r2, r3]
		byteIdx++;
 800103a:	1dbb      	adds	r3, r7, #6
 800103c:	781a      	ldrb	r2, [r3, #0]
 800103e:	1dbb      	adds	r3, r7, #6
 8001040:	3201      	adds	r2, #1
 8001042:	701a      	strb	r2, [r3, #0]
		spiSendData[byteIdx] = leds[ledIdx].blue;
 8001044:	1dfb      	adds	r3, r7, #7
 8001046:	781a      	ldrb	r2, [r3, #0]
 8001048:	1dbb      	adds	r3, r7, #6
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	4930      	ldr	r1, [pc, #192]	; (8001110 <updateStripe+0x144>)
 800104e:	0092      	lsls	r2, r2, #2
 8001050:	188a      	adds	r2, r1, r2
 8001052:	3201      	adds	r2, #1
 8001054:	7811      	ldrb	r1, [r2, #0]
 8001056:	4a2d      	ldr	r2, [pc, #180]	; (800110c <updateStripe+0x140>)
 8001058:	54d1      	strb	r1, [r2, r3]
		byteIdx++;
 800105a:	1dbb      	adds	r3, r7, #6
 800105c:	781a      	ldrb	r2, [r3, #0]
 800105e:	1dbb      	adds	r3, r7, #6
 8001060:	3201      	adds	r2, #1
 8001062:	701a      	strb	r2, [r3, #0]
		spiSendData[byteIdx] = leds[ledIdx].green;
 8001064:	1dfb      	adds	r3, r7, #7
 8001066:	781a      	ldrb	r2, [r3, #0]
 8001068:	1dbb      	adds	r3, r7, #6
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	4928      	ldr	r1, [pc, #160]	; (8001110 <updateStripe+0x144>)
 800106e:	0092      	lsls	r2, r2, #2
 8001070:	188a      	adds	r2, r1, r2
 8001072:	3202      	adds	r2, #2
 8001074:	7811      	ldrb	r1, [r2, #0]
 8001076:	4a25      	ldr	r2, [pc, #148]	; (800110c <updateStripe+0x140>)
 8001078:	54d1      	strb	r1, [r2, r3]
		byteIdx++;
 800107a:	1dbb      	adds	r3, r7, #6
 800107c:	781a      	ldrb	r2, [r3, #0]
 800107e:	1dbb      	adds	r3, r7, #6
 8001080:	3201      	adds	r2, #1
 8001082:	701a      	strb	r2, [r3, #0]
		spiSendData[byteIdx] = leds[ledIdx].red;
 8001084:	1dfb      	adds	r3, r7, #7
 8001086:	781a      	ldrb	r2, [r3, #0]
 8001088:	1dbb      	adds	r3, r7, #6
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	4920      	ldr	r1, [pc, #128]	; (8001110 <updateStripe+0x144>)
 800108e:	0092      	lsls	r2, r2, #2
 8001090:	188a      	adds	r2, r1, r2
 8001092:	3203      	adds	r2, #3
 8001094:	7811      	ldrb	r1, [r2, #0]
 8001096:	4a1d      	ldr	r2, [pc, #116]	; (800110c <updateStripe+0x140>)
 8001098:	54d1      	strb	r1, [r2, r3]
		byteIdx++;
 800109a:	1dbb      	adds	r3, r7, #6
 800109c:	781a      	ldrb	r2, [r3, #0]
 800109e:	1dbb      	adds	r3, r7, #6
 80010a0:	3201      	adds	r2, #1
 80010a2:	701a      	strb	r2, [r3, #0]
		ledIdx++;
 80010a4:	1dfb      	adds	r3, r7, #7
 80010a6:	781a      	ldrb	r2, [r3, #0]
 80010a8:	1dfb      	adds	r3, r7, #7
 80010aa:	3201      	adds	r2, #1
 80010ac:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < LED_CNT; i++) {
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	781a      	ldrb	r2, [r3, #0]
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	3201      	adds	r2, #1
 80010b6:	701a      	strb	r2, [r3, #0]
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b0f      	cmp	r3, #15
 80010be:	d9af      	bls.n	8001020 <updateStripe+0x54>
	}
	//end frame
	//this is not the Frame as stated in the Datasheet! our LEDs (SK9822) seem to be a bit different from the original APA102 here!
	//but it works this way...
	for (uint8_t i = 0; i < 8; i++) {
 80010c0:	1cfb      	adds	r3, r7, #3
 80010c2:	2200      	movs	r2, #0
 80010c4:	701a      	strb	r2, [r3, #0]
 80010c6:	e00e      	b.n	80010e6 <updateStripe+0x11a>
		spiSendData[byteIdx] = 0x00;
 80010c8:	1dbb      	adds	r3, r7, #6
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	4a0f      	ldr	r2, [pc, #60]	; (800110c <updateStripe+0x140>)
 80010ce:	2100      	movs	r1, #0
 80010d0:	54d1      	strb	r1, [r2, r3]
		byteIdx++;
 80010d2:	1dbb      	adds	r3, r7, #6
 80010d4:	781a      	ldrb	r2, [r3, #0]
 80010d6:	1dbb      	adds	r3, r7, #6
 80010d8:	3201      	adds	r2, #1
 80010da:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 8; i++) {
 80010dc:	1cfb      	adds	r3, r7, #3
 80010de:	781a      	ldrb	r2, [r3, #0]
 80010e0:	1cfb      	adds	r3, r7, #3
 80010e2:	3201      	adds	r2, #1
 80010e4:	701a      	strb	r2, [r3, #0]
 80010e6:	1cfb      	adds	r3, r7, #3
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b07      	cmp	r3, #7
 80010ec:	d9ec      	bls.n	80010c8 <updateStripe+0xfc>
	}

	//now the DMA has to send the spiSendData to the SPI tx fifo :)
	DMA1_Channel3->CNDTR = 12 + 4 * LED_CNT;
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <updateStripe+0x13c>)
 80010f0:	224c      	movs	r2, #76	; 0x4c
 80010f2:	605a      	str	r2, [r3, #4]
	DMA1_Channel3->CCR |= DMA_CCR_EN;
 80010f4:	4b04      	ldr	r3, [pc, #16]	; (8001108 <updateStripe+0x13c>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b03      	ldr	r3, [pc, #12]	; (8001108 <updateStripe+0x13c>)
 80010fa:	2101      	movs	r1, #1
 80010fc:	430a      	orrs	r2, r1
 80010fe:	601a      	str	r2, [r3, #0]
}
 8001100:	46c0      	nop			; (mov r8, r8)
 8001102:	46bd      	mov	sp, r7
 8001104:	b002      	add	sp, #8
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40020030 	.word	0x40020030
 800110c:	2000025c 	.word	0x2000025c
 8001110:	2000021c 	.word	0x2000021c

08001114 <apa102_setPattern>:

//so far only one global color
void apa102_setPattern(uint16_t mask, uint8_t global) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	0002      	movs	r2, r0
 800111c:	1dbb      	adds	r3, r7, #6
 800111e:	801a      	strh	r2, [r3, #0]
 8001120:	1d7b      	adds	r3, r7, #5
 8001122:	1c0a      	adds	r2, r1, #0
 8001124:	701a      	strb	r2, [r3, #0]
	//the global-value in the Led-frame is only 5 bit (max.31)!
	if (global > 0x1F) {
 8001126:	1d7b      	adds	r3, r7, #5
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b1f      	cmp	r3, #31
 800112c:	d902      	bls.n	8001134 <apa102_setPattern+0x20>
		global = 0x1F;
 800112e:	1d7b      	adds	r3, r7, #5
 8001130:	221f      	movs	r2, #31
 8001132:	701a      	strb	r2, [r3, #0]
	}
	globalColor.global = global;
 8001134:	4b27      	ldr	r3, [pc, #156]	; (80011d4 <apa102_setPattern+0xc0>)
 8001136:	1d7a      	adds	r2, r7, #5
 8001138:	7812      	ldrb	r2, [r2, #0]
 800113a:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < 16; i++) {
 800113c:	230e      	movs	r3, #14
 800113e:	18fb      	adds	r3, r7, r3
 8001140:	2200      	movs	r2, #0
 8001142:	801a      	strh	r2, [r3, #0]
 8001144:	e03a      	b.n	80011bc <apa102_setPattern+0xa8>
		if (mask & (1 << i)) {	//led shall be active
 8001146:	1dbb      	adds	r3, r7, #6
 8001148:	881a      	ldrh	r2, [r3, #0]
 800114a:	210e      	movs	r1, #14
 800114c:	187b      	adds	r3, r7, r1
 800114e:	881b      	ldrh	r3, [r3, #0]
 8001150:	411a      	asrs	r2, r3
 8001152:	0013      	movs	r3, r2
 8001154:	2201      	movs	r2, #1
 8001156:	4013      	ands	r3, r2
 8001158:	d00a      	beq.n	8001170 <apa102_setPattern+0x5c>
			leds[i] = globalColor;
 800115a:	187b      	adds	r3, r7, r1
 800115c:	881b      	ldrh	r3, [r3, #0]
 800115e:	4a1e      	ldr	r2, [pc, #120]	; (80011d8 <apa102_setPattern+0xc4>)
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	491c      	ldr	r1, [pc, #112]	; (80011d4 <apa102_setPattern+0xc0>)
 8001164:	18d3      	adds	r3, r2, r3
 8001166:	2204      	movs	r2, #4
 8001168:	0018      	movs	r0, r3
 800116a:	f002 ff4f 	bl	800400c <memcpy>
 800116e:	e01f      	b.n	80011b0 <apa102_setPattern+0x9c>
		} else {	//led shall be off
			leds[i].global = 0;
 8001170:	200e      	movs	r0, #14
 8001172:	183b      	adds	r3, r7, r0
 8001174:	881a      	ldrh	r2, [r3, #0]
 8001176:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <apa102_setPattern+0xc4>)
 8001178:	0092      	lsls	r2, r2, #2
 800117a:	2100      	movs	r1, #0
 800117c:	54d1      	strb	r1, [r2, r3]
			leds[i].blue = 0;
 800117e:	0001      	movs	r1, r0
 8001180:	187b      	adds	r3, r7, r1
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	4a14      	ldr	r2, [pc, #80]	; (80011d8 <apa102_setPattern+0xc4>)
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	18d3      	adds	r3, r2, r3
 800118a:	3301      	adds	r3, #1
 800118c:	2200      	movs	r2, #0
 800118e:	701a      	strb	r2, [r3, #0]
			leds[i].green = 0;
 8001190:	187b      	adds	r3, r7, r1
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	4a10      	ldr	r2, [pc, #64]	; (80011d8 <apa102_setPattern+0xc4>)
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	18d3      	adds	r3, r2, r3
 800119a:	3302      	adds	r3, #2
 800119c:	2200      	movs	r2, #0
 800119e:	701a      	strb	r2, [r3, #0]
			leds[i].red = 0;
 80011a0:	187b      	adds	r3, r7, r1
 80011a2:	881b      	ldrh	r3, [r3, #0]
 80011a4:	4a0c      	ldr	r2, [pc, #48]	; (80011d8 <apa102_setPattern+0xc4>)
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	18d3      	adds	r3, r2, r3
 80011aa:	3303      	adds	r3, #3
 80011ac:	2200      	movs	r2, #0
 80011ae:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < 16; i++) {
 80011b0:	210e      	movs	r1, #14
 80011b2:	187b      	adds	r3, r7, r1
 80011b4:	881a      	ldrh	r2, [r3, #0]
 80011b6:	187b      	adds	r3, r7, r1
 80011b8:	3201      	adds	r2, #1
 80011ba:	801a      	strh	r2, [r3, #0]
 80011bc:	230e      	movs	r3, #14
 80011be:	18fb      	adds	r3, r7, r3
 80011c0:	881b      	ldrh	r3, [r3, #0]
 80011c2:	2b0f      	cmp	r3, #15
 80011c4:	d9bf      	bls.n	8001146 <apa102_setPattern+0x32>
		}
	}
	updateStripe();
 80011c6:	f7ff ff01 	bl	8000fcc <updateStripe>
}
 80011ca:	46c0      	nop			; (mov r8, r8)
 80011cc:	46bd      	mov	sp, r7
 80011ce:	b004      	add	sp, #16
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	46c0      	nop			; (mov r8, r8)
 80011d4:	200001f0 	.word	0x200001f0
 80011d8:	2000021c 	.word	0x2000021c

080011dc <apa102_setSingle>:

void apa102_setSingle(uint8_t index, uint8_t global) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	0002      	movs	r2, r0
 80011e4:	1dfb      	adds	r3, r7, #7
 80011e6:	701a      	strb	r2, [r3, #0]
 80011e8:	1dbb      	adds	r3, r7, #6
 80011ea:	1c0a      	adds	r2, r1, #0
 80011ec:	701a      	strb	r2, [r3, #0]
	apa102_setPattern(1 << index, global);
 80011ee:	1dfb      	adds	r3, r7, #7
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2201      	movs	r2, #1
 80011f4:	409a      	lsls	r2, r3
 80011f6:	0013      	movs	r3, r2
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	1dbb      	adds	r3, r7, #6
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	0019      	movs	r1, r3
 8001200:	0010      	movs	r0, r2
 8001202:	f7ff ff87 	bl	8001114 <apa102_setPattern>
}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	46bd      	mov	sp, r7
 800120a:	b002      	add	sp, #8
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <apa102_allOff>:

void apa102_allOff() {
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
	for (uint16_t i = 0; i < 16; i++) {
 8001216:	1dbb      	adds	r3, r7, #6
 8001218:	2200      	movs	r2, #0
 800121a:	801a      	strh	r2, [r3, #0]
 800121c:	e022      	b.n	8001264 <apa102_allOff+0x54>

		leds[i].global = 0;
 800121e:	1dbb      	adds	r3, r7, #6
 8001220:	881a      	ldrh	r2, [r3, #0]
 8001222:	4b15      	ldr	r3, [pc, #84]	; (8001278 <apa102_allOff+0x68>)
 8001224:	0092      	lsls	r2, r2, #2
 8001226:	2100      	movs	r1, #0
 8001228:	54d1      	strb	r1, [r2, r3]
		leds[i].blue = 0;
 800122a:	1dbb      	adds	r3, r7, #6
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	4a12      	ldr	r2, [pc, #72]	; (8001278 <apa102_allOff+0x68>)
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	18d3      	adds	r3, r2, r3
 8001234:	3301      	adds	r3, #1
 8001236:	2200      	movs	r2, #0
 8001238:	701a      	strb	r2, [r3, #0]
		leds[i].green = 0;
 800123a:	1dbb      	adds	r3, r7, #6
 800123c:	881b      	ldrh	r3, [r3, #0]
 800123e:	4a0e      	ldr	r2, [pc, #56]	; (8001278 <apa102_allOff+0x68>)
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	18d3      	adds	r3, r2, r3
 8001244:	3302      	adds	r3, #2
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]
		leds[i].red = 0;
 800124a:	1dbb      	adds	r3, r7, #6
 800124c:	881b      	ldrh	r3, [r3, #0]
 800124e:	4a0a      	ldr	r2, [pc, #40]	; (8001278 <apa102_allOff+0x68>)
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	18d3      	adds	r3, r2, r3
 8001254:	3303      	adds	r3, #3
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < 16; i++) {
 800125a:	1dbb      	adds	r3, r7, #6
 800125c:	881a      	ldrh	r2, [r3, #0]
 800125e:	1dbb      	adds	r3, r7, #6
 8001260:	3201      	adds	r2, #1
 8001262:	801a      	strh	r2, [r3, #0]
 8001264:	1dbb      	adds	r3, r7, #6
 8001266:	881b      	ldrh	r3, [r3, #0]
 8001268:	2b0f      	cmp	r3, #15
 800126a:	d9d8      	bls.n	800121e <apa102_allOff+0xe>

	}
	updateStripe();
 800126c:	f7ff feae 	bl	8000fcc <updateStripe>
}
 8001270:	46c0      	nop			; (mov r8, r8)
 8001272:	46bd      	mov	sp, r7
 8001274:	b002      	add	sp, #8
 8001276:	bd80      	pop	{r7, pc}
 8001278:	2000021c 	.word	0x2000021c

0800127c <NVIC_EnableIRQ>:
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	0002      	movs	r2, r0
 8001284:	1dfb      	adds	r3, r7, #7
 8001286:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (1 << ((uint32_t) (IRQn) & 0x1F));
 8001288:	1dfb      	adds	r3, r7, #7
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	001a      	movs	r2, r3
 800128e:	231f      	movs	r3, #31
 8001290:	4013      	ands	r3, r2
 8001292:	2201      	movs	r2, #1
 8001294:	409a      	lsls	r2, r3
 8001296:	4b03      	ldr	r3, [pc, #12]	; (80012a4 <NVIC_EnableIRQ+0x28>)
 8001298:	601a      	str	r2, [r3, #0]
}
 800129a:	46c0      	nop			; (mov r8, r8)
 800129c:	46bd      	mov	sp, r7
 800129e:	b002      	add	sp, #8
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	e000e100 	.word	0xe000e100

080012a8 <displayInit>:
 *
 *
 *TODO: test and optimize all the timings in this class
 */

void displayInit() {
 80012a8:	b5b0      	push	{r4, r5, r7, lr}
 80012aa:	af00      	add	r7, sp, #0
	//set up mma8653 with +-4g-Range, low res and high sampling rate
	//set up interrupt-driven sensor readout
	mma8653_setRange(RANGE_8G);
 80012ac:	2002      	movs	r0, #2
 80012ae:	f000 fd15 	bl	8001cdc <mma8653_setRange>
	mma8653_setDataWidth(MMA8653_DATAWIDTH_8);
 80012b2:	2000      	movs	r0, #0
 80012b4:	f000 fd5a 	bl	8001d6c <mma8653_setDataWidth>
	mma8653_setDataRate(RATE_200Hz);
 80012b8:	2002      	movs	r0, #2
 80012ba:	f000 fd32 	bl	8001d22 <mma8653_setDataRate>
	mma8653_initIrq();
 80012be:	f000 fdc7 	bl	8001e50 <mma8653_initIrq>

	apa102_allOff();
 80012c2:	f7ff ffa5 	bl	8001210 <apa102_allOff>

	//set up timer TIM2 for measuring t_frame
	//upcounting,12MHz-> prescaler = 4,
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80012c6:	2101      	movs	r1, #1
 80012c8:	2001      	movs	r0, #1
 80012ca:	f7ff fb01 	bl	80008d0 <RCC_APB1PeriphClockCmd>
	TIM2->CR1 = 0;
 80012ce:	2380      	movs	r3, #128	; 0x80
 80012d0:	05db      	lsls	r3, r3, #23
 80012d2:	2200      	movs	r2, #0
 80012d4:	801a      	strh	r2, [r3, #0]
	TIM2->PSC = 48;
 80012d6:	2380      	movs	r3, #128	; 0x80
 80012d8:	05db      	lsls	r3, r3, #23
 80012da:	2230      	movs	r2, #48	; 0x30
 80012dc:	851a      	strh	r2, [r3, #40]	; 0x28
	//reset the counter:
	TIM2->EGR |= TIM_EGR_UG;
 80012de:	2380      	movs	r3, #128	; 0x80
 80012e0:	05db      	lsls	r3, r3, #23
 80012e2:	8a9b      	ldrh	r3, [r3, #20]
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	2380      	movs	r3, #128	; 0x80
 80012e8:	05db      	lsls	r3, r3, #23
 80012ea:	2101      	movs	r1, #1
 80012ec:	430a      	orrs	r2, r1
 80012ee:	b292      	uxth	r2, r2
 80012f0:	829a      	strh	r2, [r3, #20]
	TIM2->CR1 |= TIM_CR1_CEN;
 80012f2:	2380      	movs	r3, #128	; 0x80
 80012f4:	05db      	lsls	r3, r3, #23
 80012f6:	881b      	ldrh	r3, [r3, #0]
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	2380      	movs	r3, #128	; 0x80
 80012fc:	05db      	lsls	r3, r3, #23
 80012fe:	2101      	movs	r1, #1
 8001300:	430a      	orrs	r2, r1
 8001302:	b292      	uxth	r2, r2
 8001304:	801a      	strh	r2, [r3, #0]

	//setup TIM2 Compare Channel 1 for setting the length of the LockTime!
	//the data-ready interrupt from the sensor is ignored during that time
	//set to 30 ms (a faster swipe doesn't seem to be possible by hand)
	TIM2->DIER |= TIM_DIER_CC1IE;
 8001306:	2380      	movs	r3, #128	; 0x80
 8001308:	05db      	lsls	r3, r3, #23
 800130a:	899b      	ldrh	r3, [r3, #12]
 800130c:	b29a      	uxth	r2, r3
 800130e:	2380      	movs	r3, #128	; 0x80
 8001310:	05db      	lsls	r3, r3, #23
 8001312:	2102      	movs	r1, #2
 8001314:	430a      	orrs	r2, r1
 8001316:	b292      	uxth	r2, r2
 8001318:	819a      	strh	r2, [r3, #12]
	TIM2->CCR1 = 30000;
 800131a:	2380      	movs	r3, #128	; 0x80
 800131c:	05db      	lsls	r3, r3, #23
 800131e:	4a6f      	ldr	r2, [pc, #444]	; (80014dc <displayInit+0x234>)
 8001320:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCER |= TIM_CCER_CC1E;
 8001322:	2380      	movs	r3, #128	; 0x80
 8001324:	05db      	lsls	r3, r3, #23
 8001326:	8c1b      	ldrh	r3, [r3, #32]
 8001328:	b29a      	uxth	r2, r3
 800132a:	2380      	movs	r3, #128	; 0x80
 800132c:	05db      	lsls	r3, r3, #23
 800132e:	2101      	movs	r1, #1
 8001330:	430a      	orrs	r2, r1
 8001332:	b292      	uxth	r2, r2
 8001334:	841a      	strh	r2, [r3, #32]
	NVIC_EnableIRQ(TIM2_IRQn);
 8001336:	200f      	movs	r0, #15
 8001338:	f7ff ffa0 	bl	800127c <NVIC_EnableIRQ>

	//set up timer TIM3 for triggering the lines with t_line (= t_frame/LINECOUNT)
	//upcounting 12Mhz, autoreload @ t_frame/LINECOUNT, interrupt @ overflow
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 800133c:	2101      	movs	r1, #1
 800133e:	2002      	movs	r0, #2
 8001340:	f7ff fac6 	bl	80008d0 <RCC_APB1PeriphClockCmd>
	TIM3->CR1 = 0;
 8001344:	4b66      	ldr	r3, [pc, #408]	; (80014e0 <displayInit+0x238>)
 8001346:	2200      	movs	r2, #0
 8001348:	801a      	strh	r2, [r3, #0]
	TIM3->PSC = 48;
 800134a:	4b65      	ldr	r3, [pc, #404]	; (80014e0 <displayInit+0x238>)
 800134c:	2230      	movs	r2, #48	; 0x30
 800134e:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM3->DIER |= TIM_DIER_UIE;
 8001350:	4b63      	ldr	r3, [pc, #396]	; (80014e0 <displayInit+0x238>)
 8001352:	899b      	ldrh	r3, [r3, #12]
 8001354:	b29b      	uxth	r3, r3
 8001356:	4a62      	ldr	r2, [pc, #392]	; (80014e0 <displayInit+0x238>)
 8001358:	2101      	movs	r1, #1
 800135a:	430b      	orrs	r3, r1
 800135c:	b29b      	uxth	r3, r3
 800135e:	8193      	strh	r3, [r2, #12]
	//clear interrupt flag
	TIM3->SR &= ~TIM_SR_UIF;
 8001360:	4b5f      	ldr	r3, [pc, #380]	; (80014e0 <displayInit+0x238>)
 8001362:	8a1b      	ldrh	r3, [r3, #16]
 8001364:	b29b      	uxth	r3, r3
 8001366:	4a5e      	ldr	r2, [pc, #376]	; (80014e0 <displayInit+0x238>)
 8001368:	2101      	movs	r1, #1
 800136a:	438b      	bics	r3, r1
 800136c:	b29b      	uxth	r3, r3
 800136e:	8213      	strh	r3, [r2, #16]
	//enable the IRQ
	NVIC_EnableIRQ(TIM3_IRQn);
 8001370:	2010      	movs	r0, #16
 8001372:	f7ff ff83 	bl	800127c <NVIC_EnableIRQ>
	//don't activate this timer now, because an overflow would produce a line on the display!

	//if the device is unconfigured (rowsVisible = 0), set a smiley as default picture
	//TODO: this could be planted into flash directly (to save a bit of memory)
	if (NvMem_read(NVMEM_AD_ROWS_VISIBLE) > 32
 8001376:	2003      	movs	r0, #3
 8001378:	f000 fdd8 	bl	8001f2c <NvMem_read>
 800137c:	0003      	movs	r3, r0
 800137e:	2b20      	cmp	r3, #32
 8001380:	d804      	bhi.n	800138c <displayInit+0xe4>
			|| NvMem_read(NVMEM_AD_ROWS_VISIBLE) == 0) {
 8001382:	2003      	movs	r0, #3
 8001384:	f000 fdd2 	bl	8001f2c <NvMem_read>
 8001388:	1e03      	subs	r3, r0, #0
 800138a:	d15b      	bne.n	8001444 <displayInit+0x19c>
		NvMem_write(NVMEM_AD_ROWS_VISIBLE, 16);
 800138c:	2110      	movs	r1, #16
 800138e:	2003      	movs	r0, #3
 8001390:	f000 fde6 	bl	8001f60 <NvMem_write>
		NvMem_write(NVMEM_AD_OVERSCAN, 0);
 8001394:	2100      	movs	r1, #0
 8001396:	2004      	movs	r0, #4
 8001398:	f000 fde2 	bl	8001f60 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 0, 0b0000001111000000);
 800139c:	23f0      	movs	r3, #240	; 0xf0
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	0019      	movs	r1, r3
 80013a2:	2005      	movs	r0, #5
 80013a4:	f000 fddc 	bl	8001f60 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 1, 0b0000110000110000);
 80013a8:	23c3      	movs	r3, #195	; 0xc3
 80013aa:	011b      	lsls	r3, r3, #4
 80013ac:	0019      	movs	r1, r3
 80013ae:	2006      	movs	r0, #6
 80013b0:	f000 fdd6 	bl	8001f60 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 2, 0b0001000000001000);
 80013b4:	4b4b      	ldr	r3, [pc, #300]	; (80014e4 <displayInit+0x23c>)
 80013b6:	0019      	movs	r1, r3
 80013b8:	2007      	movs	r0, #7
 80013ba:	f000 fdd1 	bl	8001f60 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 3, 0b0010000000000100);
 80013be:	4b4a      	ldr	r3, [pc, #296]	; (80014e8 <displayInit+0x240>)
 80013c0:	0019      	movs	r1, r3
 80013c2:	2008      	movs	r0, #8
 80013c4:	f000 fdcc 	bl	8001f60 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 4, 0b0100010000010010);
 80013c8:	4b48      	ldr	r3, [pc, #288]	; (80014ec <displayInit+0x244>)
 80013ca:	0019      	movs	r1, r3
 80013cc:	2009      	movs	r0, #9
 80013ce:	f000 fdc7 	bl	8001f60 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 5, 0b0100010000010010);
 80013d2:	4b46      	ldr	r3, [pc, #280]	; (80014ec <displayInit+0x244>)
 80013d4:	0019      	movs	r1, r3
 80013d6:	200a      	movs	r0, #10
 80013d8:	f000 fdc2 	bl	8001f60 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 6, 0b1000000000001001);
 80013dc:	4b44      	ldr	r3, [pc, #272]	; (80014f0 <displayInit+0x248>)
 80013de:	0019      	movs	r1, r3
 80013e0:	200b      	movs	r0, #11
 80013e2:	f000 fdbd 	bl	8001f60 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 7, 0b1000000110001001);
 80013e6:	4b43      	ldr	r3, [pc, #268]	; (80014f4 <displayInit+0x24c>)
 80013e8:	0019      	movs	r1, r3
 80013ea:	200c      	movs	r0, #12
 80013ec:	f000 fdb8 	bl	8001f60 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 8, 0b1000000000001001);
 80013f0:	4b3f      	ldr	r3, [pc, #252]	; (80014f0 <displayInit+0x248>)
 80013f2:	0019      	movs	r1, r3
 80013f4:	200d      	movs	r0, #13
 80013f6:	f000 fdb3 	bl	8001f60 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 9, 0b1000000000001001);
 80013fa:	4b3d      	ldr	r3, [pc, #244]	; (80014f0 <displayInit+0x248>)
 80013fc:	0019      	movs	r1, r3
 80013fe:	200e      	movs	r0, #14
 8001400:	f000 fdae 	bl	8001f60 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 10, 0b0100010000010010);
 8001404:	4b39      	ldr	r3, [pc, #228]	; (80014ec <displayInit+0x244>)
 8001406:	0019      	movs	r1, r3
 8001408:	200f      	movs	r0, #15
 800140a:	f000 fda9 	bl	8001f60 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 11, 0b0100010000010010);
 800140e:	4b37      	ldr	r3, [pc, #220]	; (80014ec <displayInit+0x244>)
 8001410:	0019      	movs	r1, r3
 8001412:	2010      	movs	r0, #16
 8001414:	f000 fda4 	bl	8001f60 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 12, 0b0010000000000100);
 8001418:	4b33      	ldr	r3, [pc, #204]	; (80014e8 <displayInit+0x240>)
 800141a:	0019      	movs	r1, r3
 800141c:	2011      	movs	r0, #17
 800141e:	f000 fd9f 	bl	8001f60 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 13, 0b0001000000001000);
 8001422:	4b30      	ldr	r3, [pc, #192]	; (80014e4 <displayInit+0x23c>)
 8001424:	0019      	movs	r1, r3
 8001426:	2012      	movs	r0, #18
 8001428:	f000 fd9a 	bl	8001f60 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 14, 0b0000110000110000);
 800142c:	23c3      	movs	r3, #195	; 0xc3
 800142e:	011b      	lsls	r3, r3, #4
 8001430:	0019      	movs	r1, r3
 8001432:	2013      	movs	r0, #19
 8001434:	f000 fd94 	bl	8001f60 <NvMem_write>
		NvMem_write(NVMEM_AD_PICTURE_START + 15, 0b0000001111000000);
 8001438:	23f0      	movs	r3, #240	; 0xf0
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	0019      	movs	r1, r3
 800143e:	2014      	movs	r0, #20
 8001440:	f000 fd8e 	bl	8001f60 <NvMem_write>
	}
	//if the color has never been configured (or if somebody configured it to 0,0,0) the Lightshaker doesn't do anything visible, so let's change that
	if (!NvMem_read(NVMEM_AD_GLOBAL_BLUE) && !NvMem_read(NVMEM_AD_GLOBAL_GREEN)
 8001444:	2002      	movs	r0, #2
 8001446:	f000 fd71 	bl	8001f2c <NvMem_read>
 800144a:	1e03      	subs	r3, r0, #0
 800144c:	d115      	bne.n	800147a <displayInit+0x1d2>
 800144e:	2001      	movs	r0, #1
 8001450:	f000 fd6c 	bl	8001f2c <NvMem_read>
 8001454:	1e03      	subs	r3, r0, #0
 8001456:	d110      	bne.n	800147a <displayInit+0x1d2>
			&& !NvMem_read(NVMEM_AD_GLOBAL_RED)) {
 8001458:	2000      	movs	r0, #0
 800145a:	f000 fd67 	bl	8001f2c <NvMem_read>
 800145e:	1e03      	subs	r3, r0, #0
 8001460:	d10b      	bne.n	800147a <displayInit+0x1d2>
		NvMem_write(NVMEM_AD_GLOBAL_BLUE, 255);
 8001462:	21ff      	movs	r1, #255	; 0xff
 8001464:	2002      	movs	r0, #2
 8001466:	f000 fd7b 	bl	8001f60 <NvMem_write>
		NvMem_write(NVMEM_AD_GLOBAL_GREEN, 255);
 800146a:	21ff      	movs	r1, #255	; 0xff
 800146c:	2001      	movs	r0, #1
 800146e:	f000 fd77 	bl	8001f60 <NvMem_write>
		NvMem_write(NVMEM_AD_GLOBAL_RED, 255);
 8001472:	21ff      	movs	r1, #255	; 0xff
 8001474:	2000      	movs	r0, #0
 8001476:	f000 fd73 	bl	8001f60 <NvMem_write>
	}

	//init the display data
	RowsOverscan = NvMem_read(NVMEM_AD_OVERSCAN);
 800147a:	2004      	movs	r0, #4
 800147c:	f000 fd56 	bl	8001f2c <NvMem_read>
 8001480:	0003      	movs	r3, r0
 8001482:	b2da      	uxtb	r2, r3
 8001484:	4b1c      	ldr	r3, [pc, #112]	; (80014f8 <displayInit+0x250>)
 8001486:	701a      	strb	r2, [r3, #0]
	RowsVisible = NvMem_read(NVMEM_AD_ROWS_VISIBLE);
 8001488:	2003      	movs	r0, #3
 800148a:	f000 fd4f 	bl	8001f2c <NvMem_read>
 800148e:	0003      	movs	r3, r0
 8001490:	b2da      	uxtb	r2, r3
 8001492:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <displayInit+0x254>)
 8001494:	701a      	strb	r2, [r3, #0]

	RowsLogic = RowsVisible + 2 * RowsOverscan;
 8001496:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <displayInit+0x250>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	b2db      	uxtb	r3, r3
 800149c:	18db      	adds	r3, r3, r3
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	4b16      	ldr	r3, [pc, #88]	; (80014fc <displayInit+0x254>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	18d3      	adds	r3, r2, r3
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	4b15      	ldr	r3, [pc, #84]	; (8001500 <displayInit+0x258>)
 80014ac:	701a      	strb	r2, [r3, #0]

	//set the color to whatever is defined in NvMem
	apa102_setGlobalColor(NvMem_read(NVMEM_AD_GLOBAL_RED),
 80014ae:	2000      	movs	r0, #0
 80014b0:	f000 fd3c 	bl	8001f2c <NvMem_read>
 80014b4:	0003      	movs	r3, r0
 80014b6:	b2dc      	uxtb	r4, r3
			NvMem_read(NVMEM_AD_GLOBAL_GREEN),
 80014b8:	2001      	movs	r0, #1
 80014ba:	f000 fd37 	bl	8001f2c <NvMem_read>
 80014be:	0003      	movs	r3, r0
	apa102_setGlobalColor(NvMem_read(NVMEM_AD_GLOBAL_RED),
 80014c0:	b2dd      	uxtb	r5, r3
			NvMem_read(NVMEM_AD_GLOBAL_BLUE));
 80014c2:	2002      	movs	r0, #2
 80014c4:	f000 fd32 	bl	8001f2c <NvMem_read>
 80014c8:	0003      	movs	r3, r0
	apa102_setGlobalColor(NvMem_read(NVMEM_AD_GLOBAL_RED),
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	001a      	movs	r2, r3
 80014ce:	0029      	movs	r1, r5
 80014d0:	0020      	movs	r0, r4
 80014d2:	f7ff fd59 	bl	8000f88 <apa102_setGlobalColor>

}
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	46bd      	mov	sp, r7
 80014da:	bdb0      	pop	{r4, r5, r7, pc}
 80014dc:	00007530 	.word	0x00007530
 80014e0:	40000400 	.word	0x40000400
 80014e4:	00001008 	.word	0x00001008
 80014e8:	00002004 	.word	0x00002004
 80014ec:	00004412 	.word	0x00004412
 80014f0:	00008009 	.word	0x00008009
 80014f4:	00008189 	.word	0x00008189
 80014f8:	200002a8 	.word	0x200002a8
 80014fc:	200002ed 	.word	0x200002ed
 8001500:	200002ee 	.word	0x200002ee

08001504 <displaySendLine>:

//called 2 times for every row
//first call should switch on the LEDs according to rowData, 2nd should switch them off to insert a blank row
//without this blank row, the rows are squeezed together too much
void displaySendLine() {
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
	//clear interrupt flag
	TIM3->SR &= ~TIM_SR_UIF;
 8001508:	4b2d      	ldr	r3, [pc, #180]	; (80015c0 <displaySendLine+0xbc>)
 800150a:	8a1b      	ldrh	r3, [r3, #16]
 800150c:	b29b      	uxth	r3, r3
 800150e:	4a2c      	ldr	r2, [pc, #176]	; (80015c0 <displaySendLine+0xbc>)
 8001510:	2101      	movs	r1, #1
 8001512:	438b      	bics	r3, r1
 8001514:	b29b      	uxth	r3, r3
 8001516:	8213      	strh	r3, [r2, #16]

	//left side is the row, right side the gap
	if (DisplayPosition == DISP_POS_ROW_START) {
 8001518:	4b2a      	ldr	r3, [pc, #168]	; (80015c4 <displaySendLine+0xc0>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d12a      	bne.n	8001578 <displaySendLine+0x74>
		//if row is in the visible area
		if (RowNumber >= RowsOverscan
 8001522:	4b29      	ldr	r3, [pc, #164]	; (80015c8 <displaySendLine+0xc4>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	b2da      	uxtb	r2, r3
 8001528:	4b28      	ldr	r3, [pc, #160]	; (80015cc <displaySendLine+0xc8>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	429a      	cmp	r2, r3
 8001530:	d31c      	bcc.n	800156c <displaySendLine+0x68>
				&& RowNumber < RowsOverscan + RowsVisible) {
 8001532:	4b25      	ldr	r3, [pc, #148]	; (80015c8 <displaySendLine+0xc4>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	b2db      	uxtb	r3, r3
 8001538:	001a      	movs	r2, r3
 800153a:	4b24      	ldr	r3, [pc, #144]	; (80015cc <displaySendLine+0xc8>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	b2db      	uxtb	r3, r3
 8001540:	0019      	movs	r1, r3
 8001542:	4b23      	ldr	r3, [pc, #140]	; (80015d0 <displaySendLine+0xcc>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	b2db      	uxtb	r3, r3
 8001548:	18cb      	adds	r3, r1, r3
 800154a:	429a      	cmp	r2, r3
 800154c:	da0e      	bge.n	800156c <displaySendLine+0x68>
			apa102_setPattern(NvMem_read(NVMEM_AD_PICTURE_START + RowNumber),
 800154e:	4b1e      	ldr	r3, [pc, #120]	; (80015c8 <displaySendLine+0xc4>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	b2db      	uxtb	r3, r3
 8001554:	b29b      	uxth	r3, r3
 8001556:	3305      	adds	r3, #5
 8001558:	b29b      	uxth	r3, r3
 800155a:	0018      	movs	r0, r3
 800155c:	f000 fce6 	bl	8001f2c <NvMem_read>
 8001560:	0003      	movs	r3, r0
 8001562:	211f      	movs	r1, #31
 8001564:	0018      	movs	r0, r3
 8001566:	f7ff fdd5 	bl	8001114 <apa102_setPattern>
 800156a:	e001      	b.n	8001570 <displaySendLine+0x6c>
					31);
		} else {
			//switch off the display
			apa102_allOff();
 800156c:	f7ff fe50 	bl	8001210 <apa102_allOff>
		}
		DisplayPosition = DISP_POS_GAP_START;
 8001570:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <displaySendLine+0xc0>)
 8001572:	2201      	movs	r2, #1
 8001574:	701a      	strb	r2, [r3, #0]
			TIM3->CR1 &= ~TIM_CR1_CEN;
		}

	}

}
 8001576:	e01f      	b.n	80015b8 <displaySendLine+0xb4>
		apa102_allOff();
 8001578:	f7ff fe4a 	bl	8001210 <apa102_allOff>
		RowNumber += rowStep;
 800157c:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <displaySendLine+0xd0>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	b25b      	sxtb	r3, r3
 8001582:	b2da      	uxtb	r2, r3
 8001584:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <displaySendLine+0xc4>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	18d3      	adds	r3, r2, r3
 800158c:	b2da      	uxtb	r2, r3
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <displaySendLine+0xc4>)
 8001590:	701a      	strb	r2, [r3, #0]
		DisplayPosition = DISP_POS_ROW_START;
 8001592:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <displaySendLine+0xc0>)
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]
		if (RowNumber >= RowsLogic) {
 8001598:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <displaySendLine+0xc4>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	b2da      	uxtb	r2, r3
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <displaySendLine+0xd4>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d307      	bcc.n	80015b8 <displaySendLine+0xb4>
			TIM3->CR1 &= ~TIM_CR1_CEN;
 80015a8:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <displaySendLine+0xbc>)
 80015aa:	881b      	ldrh	r3, [r3, #0]
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <displaySendLine+0xbc>)
 80015b0:	2101      	movs	r1, #1
 80015b2:	438b      	bics	r3, r1
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	8013      	strh	r3, [r2, #0]
}
 80015b8:	46c0      	nop			; (mov r8, r8)
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	46c0      	nop			; (mov r8, r8)
 80015c0:	40000400 	.word	0x40000400
 80015c4:	200002ec 	.word	0x200002ec
 80015c8:	20000037 	.word	0x20000037
 80015cc:	200002a8 	.word	0x200002a8
 80015d0:	200002ed 	.word	0x200002ed
 80015d4:	20000036 	.word	0x20000036
 80015d8:	200002ee 	.word	0x200002ee

080015dc <displayEndOfLocktime>:

//triggered by TIM2 CompareMatch
void displayEndOfLocktime() {
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
	//clear the flag and read the data (so the sensor releases the INT line)
	EXTI->PR |= EXTI_PR_PR2;
 80015e0:	4b0d      	ldr	r3, [pc, #52]	; (8001618 <displayEndOfLocktime+0x3c>)
 80015e2:	695a      	ldr	r2, [r3, #20]
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <displayEndOfLocktime+0x3c>)
 80015e6:	2104      	movs	r1, #4
 80015e8:	430a      	orrs	r2, r1
 80015ea:	615a      	str	r2, [r3, #20]
	mma8653_read8();
 80015ec:	f000 fbf0 	bl	8001dd0 <mma8653_read8>

	//reenable the EXTI interrupt
	EXTI->IMR |= EXTI_EMR_MR2;
 80015f0:	4b09      	ldr	r3, [pc, #36]	; (8001618 <displayEndOfLocktime+0x3c>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4b08      	ldr	r3, [pc, #32]	; (8001618 <displayEndOfLocktime+0x3c>)
 80015f6:	2104      	movs	r1, #4
 80015f8:	430a      	orrs	r2, r1
 80015fa:	601a      	str	r2, [r3, #0]

	//clear Flag for this Interrupt
	TIM2->SR &= ~TIM_SR_CC1IF;
 80015fc:	2380      	movs	r3, #128	; 0x80
 80015fe:	05db      	lsls	r3, r3, #23
 8001600:	8a1b      	ldrh	r3, [r3, #16]
 8001602:	b29a      	uxth	r2, r3
 8001604:	2380      	movs	r3, #128	; 0x80
 8001606:	05db      	lsls	r3, r3, #23
 8001608:	2102      	movs	r1, #2
 800160a:	438a      	bics	r2, r1
 800160c:	b292      	uxth	r2, r2
 800160e:	821a      	strh	r2, [r3, #16]
}
 8001610:	46c0      	nop			; (mov r8, r8)
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	46c0      	nop			; (mov r8, r8)
 8001618:	40010400 	.word	0x40010400

0800161c <displayFrameStart>:

void displayFrameStart() {
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0

	//deactivate the peak detection for some time after a valid return point
	//by deactivating the EXTI interrupt
	EXTI->IMR &= ~EXTI_EMR_MR2;
 8001622:	4b23      	ldr	r3, [pc, #140]	; (80016b0 <displayFrameStart+0x94>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	4b22      	ldr	r3, [pc, #136]	; (80016b0 <displayFrameStart+0x94>)
 8001628:	2104      	movs	r1, #4
 800162a:	438a      	bics	r2, r1
 800162c:	601a      	str	r2, [r3, #0]

	//take the counter value from timer2:
	uint32_t tFrame = TIM2->CNT;
 800162e:	2380      	movs	r3, #128	; 0x80
 8001630:	05db      	lsls	r3, r3, #23
 8001632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001634:	607b      	str	r3, [r7, #4]

	//calculate t_row and save it to the auto-reload register of tim3
	TIM3->ARR = (uint16_t) (tFrame / (RowsLogic * 2));
 8001636:	4b1f      	ldr	r3, [pc, #124]	; (80016b4 <displayFrameStart+0x98>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	b2db      	uxtb	r3, r3
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	0019      	movs	r1, r3
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7fe fd61 	bl	8000108 <__udivsi3>
 8001646:	0003      	movs	r3, r0
 8001648:	b29a      	uxth	r2, r3
 800164a:	4b1b      	ldr	r3, [pc, #108]	; (80016b8 <displayFrameStart+0x9c>)
 800164c:	62da      	str	r2, [r3, #44]	; 0x2c
	//clear interrupt flag for TIM3
	TIM3->SR &= ~TIM_SR_UIF;
 800164e:	4b1a      	ldr	r3, [pc, #104]	; (80016b8 <displayFrameStart+0x9c>)
 8001650:	8a1b      	ldrh	r3, [r3, #16]
 8001652:	b29b      	uxth	r3, r3
 8001654:	4a18      	ldr	r2, [pc, #96]	; (80016b8 <displayFrameStart+0x9c>)
 8001656:	2101      	movs	r1, #1
 8001658:	438b      	bics	r3, r1
 800165a:	b29b      	uxth	r3, r3
 800165c:	8213      	strh	r3, [r2, #16]
	//reset both timers
	TIM2->EGR |= TIM_EGR_UG;
 800165e:	2380      	movs	r3, #128	; 0x80
 8001660:	05db      	lsls	r3, r3, #23
 8001662:	8a9b      	ldrh	r3, [r3, #20]
 8001664:	b29a      	uxth	r2, r3
 8001666:	2380      	movs	r3, #128	; 0x80
 8001668:	05db      	lsls	r3, r3, #23
 800166a:	2101      	movs	r1, #1
 800166c:	430a      	orrs	r2, r1
 800166e:	b292      	uxth	r2, r2
 8001670:	829a      	strh	r2, [r3, #20]
	TIM3->EGR |= TIM_EGR_UG;
 8001672:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <displayFrameStart+0x9c>)
 8001674:	8a9b      	ldrh	r3, [r3, #20]
 8001676:	b29b      	uxth	r3, r3
 8001678:	4a0f      	ldr	r2, [pc, #60]	; (80016b8 <displayFrameStart+0x9c>)
 800167a:	2101      	movs	r1, #1
 800167c:	430b      	orrs	r3, r1
 800167e:	b29b      	uxth	r3, r3
 8001680:	8293      	strh	r3, [r2, #20]
	//start both timers
	TIM2->CR1 |= TIM_CR1_CEN;
 8001682:	2380      	movs	r3, #128	; 0x80
 8001684:	05db      	lsls	r3, r3, #23
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	b29a      	uxth	r2, r3
 800168a:	2380      	movs	r3, #128	; 0x80
 800168c:	05db      	lsls	r3, r3, #23
 800168e:	2101      	movs	r1, #1
 8001690:	430a      	orrs	r2, r1
 8001692:	b292      	uxth	r2, r2
 8001694:	801a      	strh	r2, [r3, #0]
	TIM3->CR1 |= TIM_CR1_CEN;
 8001696:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <displayFrameStart+0x9c>)
 8001698:	881b      	ldrh	r3, [r3, #0]
 800169a:	b29b      	uxth	r3, r3
 800169c:	4a06      	ldr	r2, [pc, #24]	; (80016b8 <displayFrameStart+0x9c>)
 800169e:	2101      	movs	r1, #1
 80016a0:	430b      	orrs	r3, r1
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	8013      	strh	r3, [r2, #0]
}
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	46bd      	mov	sp, r7
 80016aa:	b002      	add	sp, #8
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	40010400 	.word	0x40010400
 80016b4:	200002ee 	.word	0x200002ee
 80016b8:	40000400 	.word	0x40000400

080016bc <displayFindReturnPoint>:

//now this should be called with the sensors IRQ
void displayFindReturnPoint() {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
	//the Interrupt-flag is not reset until the work in this ISR is done!

	//read the output of the sensor
	//the low-pass filtering is done by the sensor!
	//this also lets the sensor release the interrupt line
	int8_t acc = mma8653_read8().x;
 80016c2:	f000 fb85 	bl	8001dd0 <mma8653_read8>
 80016c6:	0003      	movs	r3, r0
 80016c8:	001a      	movs	r2, r3
 80016ca:	003b      	movs	r3, r7
 80016cc:	1c11      	adds	r1, r2, #0
 80016ce:	7019      	strb	r1, [r3, #0]
 80016d0:	0411      	lsls	r1, r2, #16
 80016d2:	0e09      	lsrs	r1, r1, #24
 80016d4:	7059      	strb	r1, [r3, #1]
 80016d6:	0212      	lsls	r2, r2, #8
 80016d8:	0e12      	lsrs	r2, r2, #24
 80016da:	709a      	strb	r2, [r3, #2]
 80016dc:	1dbb      	adds	r3, r7, #6
 80016de:	003a      	movs	r2, r7
 80016e0:	7812      	ldrb	r2, [r2, #0]
 80016e2:	701a      	strb	r2, [r3, #0]

	//separate value and sign for faster calculations
	uint8_t accAbs;
	if (acc >= 0) {
 80016e4:	1dbb      	adds	r3, r7, #6
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b7f      	cmp	r3, #127	; 0x7f
 80016ea:	d804      	bhi.n	80016f6 <displayFindReturnPoint+0x3a>
		accAbs = acc;
 80016ec:	1dfb      	adds	r3, r7, #7
 80016ee:	1dba      	adds	r2, r7, #6
 80016f0:	7812      	ldrb	r2, [r2, #0]
 80016f2:	701a      	strb	r2, [r3, #0]
 80016f4:	e004      	b.n	8001700 <displayFindReturnPoint+0x44>
	} else {
		accAbs = -acc;
 80016f6:	1dbb      	adds	r3, r7, #6
 80016f8:	781a      	ldrb	r2, [r3, #0]
 80016fa:	1dfb      	adds	r3, r7, #7
 80016fc:	4252      	negs	r2, r2
 80016fe:	701a      	strb	r2, [r3, #0]
	 * the return doesn't happen in one point, but takes some time (>10ms)
	 * ->stop the time measurement as soon as the acc gets higher that the threshold,
	 * ->start the next meas and the display if the acc gets lower than the threshold again
	 */

	switch (movementState) {
 8001700:	4b5f      	ldr	r3, [pc, #380]	; (8001880 <displayFindReturnPoint+0x1c4>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b04      	cmp	r3, #4
 8001708:	d900      	bls.n	800170c <displayFindReturnPoint+0x50>
 800170a:	e093      	b.n	8001834 <displayFindReturnPoint+0x178>
 800170c:	009a      	lsls	r2, r3, #2
 800170e:	4b5d      	ldr	r3, [pc, #372]	; (8001884 <displayFindReturnPoint+0x1c8>)
 8001710:	18d3      	adds	r3, r2, r3
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	469f      	mov	pc, r3
	case STATE_UNKNOWN:
		if (accAbs > ACC_RETURN_TH) {	//this could be the first return point
 8001716:	1dfb      	adds	r3, r7, #7
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b64      	cmp	r3, #100	; 0x64
 800171c:	d800      	bhi.n	8001720 <displayFindReturnPoint+0x64>
 800171e:	e080      	b.n	8001822 <displayFindReturnPoint+0x166>
										//stop TIM2
			TIM2->CR1 &= ~TIM_CR1_CEN;
 8001720:	2380      	movs	r3, #128	; 0x80
 8001722:	05db      	lsls	r3, r3, #23
 8001724:	881b      	ldrh	r3, [r3, #0]
 8001726:	b29a      	uxth	r2, r3
 8001728:	2380      	movs	r3, #128	; 0x80
 800172a:	05db      	lsls	r3, r3, #23
 800172c:	2101      	movs	r1, #1
 800172e:	438a      	bics	r2, r1
 8001730:	b292      	uxth	r2, r2
 8001732:	801a      	strh	r2, [r3, #0]
			//prevent TIM3 from triggering a new row by stopping it
			TIM3->CR1 &= ~TIM_CR1_CEN;
 8001734:	4b54      	ldr	r3, [pc, #336]	; (8001888 <displayFindReturnPoint+0x1cc>)
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	b29b      	uxth	r3, r3
 800173a:	4a53      	ldr	r2, [pc, #332]	; (8001888 <displayFindReturnPoint+0x1cc>)
 800173c:	2101      	movs	r1, #1
 800173e:	438b      	bics	r3, r1
 8001740:	b29b      	uxth	r3, r3
 8001742:	8013      	strh	r3, [r2, #0]

			if (acc > 0) {
 8001744:	1dbb      	adds	r3, r7, #6
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	b25b      	sxtb	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	dd03      	ble.n	8001756 <displayFindReturnPoint+0x9a>
				movementState = STATE_RIGHT_END;
 800174e:	4b4c      	ldr	r3, [pc, #304]	; (8001880 <displayFindReturnPoint+0x1c4>)
 8001750:	2203      	movs	r2, #3
 8001752:	701a      	strb	r2, [r3, #0]
			} else {
				movementState = STATE_LEFT_END;
			}
		}
		break;
 8001754:	e065      	b.n	8001822 <displayFindReturnPoint+0x166>
				movementState = STATE_LEFT_END;
 8001756:	4b4a      	ldr	r3, [pc, #296]	; (8001880 <displayFindReturnPoint+0x1c4>)
 8001758:	2201      	movs	r2, #1
 800175a:	701a      	strb	r2, [r3, #0]
		break;
 800175c:	e061      	b.n	8001822 <displayFindReturnPoint+0x166>
	case STATE_LEFT_END:
		if (accAbs < ACC_RETURN_TH) {
 800175e:	1dfb      	adds	r3, r7, #7
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b63      	cmp	r3, #99	; 0x63
 8001764:	d85f      	bhi.n	8001826 <displayFindReturnPoint+0x16a>
			rowStep = 1;
 8001766:	4b49      	ldr	r3, [pc, #292]	; (800188c <displayFindReturnPoint+0x1d0>)
 8001768:	2201      	movs	r2, #1
 800176a:	701a      	strb	r2, [r3, #0]
			RowNumber = 0;
 800176c:	4b48      	ldr	r3, [pc, #288]	; (8001890 <displayFindReturnPoint+0x1d4>)
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
			DisplayPosition = DISP_POS_ROW_START;
 8001772:	4b48      	ldr	r3, [pc, #288]	; (8001894 <displayFindReturnPoint+0x1d8>)
 8001774:	2200      	movs	r2, #0
 8001776:	701a      	strb	r2, [r3, #0]
			//end of return phase
			displayFrameStart();
 8001778:	f7ff ff50 	bl	800161c <displayFrameStart>
			movementState = STATE_MOVE_FORW;
 800177c:	4b40      	ldr	r3, [pc, #256]	; (8001880 <displayFindReturnPoint+0x1c4>)
 800177e:	2202      	movs	r2, #2
 8001780:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001782:	e050      	b.n	8001826 <displayFindReturnPoint+0x16a>
	case STATE_RIGHT_END:
		if (accAbs < ACC_RETURN_TH) {
 8001784:	1dfb      	adds	r3, r7, #7
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b63      	cmp	r3, #99	; 0x63
 800178a:	d84e      	bhi.n	800182a <displayFindReturnPoint+0x16e>
			//end of return phase
			rowStep = -1;
 800178c:	4b3f      	ldr	r3, [pc, #252]	; (800188c <displayFindReturnPoint+0x1d0>)
 800178e:	22ff      	movs	r2, #255	; 0xff
 8001790:	701a      	strb	r2, [r3, #0]
			RowNumber = RowsLogic;
 8001792:	4b41      	ldr	r3, [pc, #260]	; (8001898 <displayFindReturnPoint+0x1dc>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	b2da      	uxtb	r2, r3
 8001798:	4b3d      	ldr	r3, [pc, #244]	; (8001890 <displayFindReturnPoint+0x1d4>)
 800179a:	701a      	strb	r2, [r3, #0]
			DisplayPosition = DISP_POS_GAP_START;
 800179c:	4b3d      	ldr	r3, [pc, #244]	; (8001894 <displayFindReturnPoint+0x1d8>)
 800179e:	2201      	movs	r2, #1
 80017a0:	701a      	strb	r2, [r3, #0]
			displayFrameStart();
 80017a2:	f7ff ff3b 	bl	800161c <displayFrameStart>

			movementState = STATE_MOVE_BACKW;
 80017a6:	4b36      	ldr	r3, [pc, #216]	; (8001880 <displayFindReturnPoint+0x1c4>)
 80017a8:	2204      	movs	r2, #4
 80017aa:	701a      	strb	r2, [r3, #0]
		}
		break;
 80017ac:	e03d      	b.n	800182a <displayFindReturnPoint+0x16e>
	case STATE_MOVE_FORW:
		if (acc > ACC_RETURN_TH) {
 80017ae:	1dbb      	adds	r3, r7, #6
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	b25b      	sxtb	r3, r3
 80017b4:	2b64      	cmp	r3, #100	; 0x64
 80017b6:	dd3a      	ble.n	800182e <displayFindReturnPoint+0x172>
			//stop TIM2
			TIM2->CR1 &= ~TIM_CR1_CEN;
 80017b8:	2380      	movs	r3, #128	; 0x80
 80017ba:	05db      	lsls	r3, r3, #23
 80017bc:	881b      	ldrh	r3, [r3, #0]
 80017be:	b29a      	uxth	r2, r3
 80017c0:	2380      	movs	r3, #128	; 0x80
 80017c2:	05db      	lsls	r3, r3, #23
 80017c4:	2101      	movs	r1, #1
 80017c6:	438a      	bics	r2, r1
 80017c8:	b292      	uxth	r2, r2
 80017ca:	801a      	strh	r2, [r3, #0]
			//prevent TIM3 from triggering a new row by stopping it
			TIM3->CR1 &= ~TIM_CR1_CEN;
 80017cc:	4b2e      	ldr	r3, [pc, #184]	; (8001888 <displayFindReturnPoint+0x1cc>)
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	4a2d      	ldr	r2, [pc, #180]	; (8001888 <displayFindReturnPoint+0x1cc>)
 80017d4:	2101      	movs	r1, #1
 80017d6:	438b      	bics	r3, r1
 80017d8:	b29b      	uxth	r3, r3
 80017da:	8013      	strh	r3, [r2, #0]
			//switch off the display
			apa102_allOff();
 80017dc:	f7ff fd18 	bl	8001210 <apa102_allOff>
			movementState = STATE_RIGHT_END;
 80017e0:	4b27      	ldr	r3, [pc, #156]	; (8001880 <displayFindReturnPoint+0x1c4>)
 80017e2:	2203      	movs	r2, #3
 80017e4:	701a      	strb	r2, [r3, #0]
		}
		break;
 80017e6:	e022      	b.n	800182e <displayFindReturnPoint+0x172>
	case STATE_MOVE_BACKW:
		if (acc < -ACC_RETURN_TH) {
 80017e8:	1dbb      	adds	r3, r7, #6
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	b25b      	sxtb	r3, r3
 80017ee:	3364      	adds	r3, #100	; 0x64
 80017f0:	da1f      	bge.n	8001832 <displayFindReturnPoint+0x176>
			//stop TIM2
			TIM2->CR1 &= ~TIM_CR1_CEN;
 80017f2:	2380      	movs	r3, #128	; 0x80
 80017f4:	05db      	lsls	r3, r3, #23
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	2380      	movs	r3, #128	; 0x80
 80017fc:	05db      	lsls	r3, r3, #23
 80017fe:	2101      	movs	r1, #1
 8001800:	438a      	bics	r2, r1
 8001802:	b292      	uxth	r2, r2
 8001804:	801a      	strh	r2, [r3, #0]
			//prevent TIM3 from triggering a new row by stopping it
			TIM3->CR1 &= ~TIM_CR1_CEN;
 8001806:	4b20      	ldr	r3, [pc, #128]	; (8001888 <displayFindReturnPoint+0x1cc>)
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	b29b      	uxth	r3, r3
 800180c:	4a1e      	ldr	r2, [pc, #120]	; (8001888 <displayFindReturnPoint+0x1cc>)
 800180e:	2101      	movs	r1, #1
 8001810:	438b      	bics	r3, r1
 8001812:	b29b      	uxth	r3, r3
 8001814:	8013      	strh	r3, [r2, #0]
			//switch off the display
			apa102_allOff();
 8001816:	f7ff fcfb 	bl	8001210 <apa102_allOff>
			movementState = STATE_LEFT_END;
 800181a:	4b19      	ldr	r3, [pc, #100]	; (8001880 <displayFindReturnPoint+0x1c4>)
 800181c:	2201      	movs	r2, #1
 800181e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001820:	e007      	b.n	8001832 <displayFindReturnPoint+0x176>
		break;
 8001822:	46c0      	nop			; (mov r8, r8)
 8001824:	e006      	b.n	8001834 <displayFindReturnPoint+0x178>
		break;
 8001826:	46c0      	nop			; (mov r8, r8)
 8001828:	e004      	b.n	8001834 <displayFindReturnPoint+0x178>
		break;
 800182a:	46c0      	nop			; (mov r8, r8)
 800182c:	e002      	b.n	8001834 <displayFindReturnPoint+0x178>
		break;
 800182e:	46c0      	nop			; (mov r8, r8)
 8001830:	e000      	b.n	8001834 <displayFindReturnPoint+0x178>
		break;
 8001832:	46c0      	nop			; (mov r8, r8)
	}

	//no state other than STATE_UNKNOWN should last longer than T_FRAME_MAX
	//-> if TIM2 exceeds this time, stop it and
	//if this value is out of bounds, reset TIM2 and return to STATE_UNKNOWN
	if (TIM2->CNT > T_FRAME_MAX) {	//reset the counter:
 8001834:	2380      	movs	r3, #128	; 0x80
 8001836:	05db      	lsls	r3, r3, #23
 8001838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183a:	4a18      	ldr	r2, [pc, #96]	; (800189c <displayFindReturnPoint+0x1e0>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d918      	bls.n	8001872 <displayFindReturnPoint+0x1b6>
		TIM2->EGR |= TIM_EGR_UG;
 8001840:	2380      	movs	r3, #128	; 0x80
 8001842:	05db      	lsls	r3, r3, #23
 8001844:	8a9b      	ldrh	r3, [r3, #20]
 8001846:	b29a      	uxth	r2, r3
 8001848:	2380      	movs	r3, #128	; 0x80
 800184a:	05db      	lsls	r3, r3, #23
 800184c:	2101      	movs	r1, #1
 800184e:	430a      	orrs	r2, r1
 8001850:	b292      	uxth	r2, r2
 8001852:	829a      	strh	r2, [r3, #20]
		//and stop it
		TIM2->CR1 |= TIM_CR1_CEN;
 8001854:	2380      	movs	r3, #128	; 0x80
 8001856:	05db      	lsls	r3, r3, #23
 8001858:	881b      	ldrh	r3, [r3, #0]
 800185a:	b29a      	uxth	r2, r3
 800185c:	2380      	movs	r3, #128	; 0x80
 800185e:	05db      	lsls	r3, r3, #23
 8001860:	2101      	movs	r1, #1
 8001862:	430a      	orrs	r2, r1
 8001864:	b292      	uxth	r2, r2
 8001866:	801a      	strh	r2, [r3, #0]
		//switch off the display
		apa102_allOff();
 8001868:	f7ff fcd2 	bl	8001210 <apa102_allOff>
		//set state
		movementState = STATE_UNKNOWN;
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <displayFindReturnPoint+0x1c4>)
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]
	}

	EXTI_ClearITPendingBit(EXTI_Line2);
 8001872:	2004      	movs	r0, #4
 8001874:	f7fe fd44 	bl	8000300 <EXTI_ClearITPendingBit>

}
 8001878:	46c0      	nop			; (mov r8, r8)
 800187a:	46bd      	mov	sp, r7
 800187c:	b002      	add	sp, #8
 800187e:	bd80      	pop	{r7, pc}
 8001880:	200002ef 	.word	0x200002ef
 8001884:	08004038 	.word	0x08004038
 8001888:	40000400 	.word	0x40000400
 800188c:	20000036 	.word	0x20000036
 8001890:	20000037 	.word	0x20000037
 8001894:	200002ec 	.word	0x200002ec
 8001898:	200002ee 	.word	0x200002ee
 800189c:	003fffc0 	.word	0x003fffc0

080018a0 <I2C_RdReg>:

/**
 * Origin of I2C_RdReg and I2C_WrReg:
 * https://hsel.co.uk/2014/08/13/stm32f0-mini-tutorial-using-the-i2c-peripheral-to-communicate-with-a-hmc5883l-digital-compass-ic/
 */
uint8_t I2C_RdReg(uint8_t Reg, uint8_t *Data, uint8_t DCnt) {
 80018a0:	b590      	push	{r4, r7, lr}
 80018a2:	b087      	sub	sp, #28
 80018a4:	af02      	add	r7, sp, #8
 80018a6:	6039      	str	r1, [r7, #0]
 80018a8:	0011      	movs	r1, r2
 80018aa:	1dfb      	adds	r3, r7, #7
 80018ac:	1c02      	adds	r2, r0, #0
 80018ae:	701a      	strb	r2, [r3, #0]
 80018b0:	1dbb      	adds	r3, r7, #6
 80018b2:	1c0a      	adds	r2, r1, #0
 80018b4:	701a      	strb	r2, [r3, #0]
	uint8_t Cnt, SingleData = 0;
 80018b6:	230e      	movs	r3, #14
 80018b8:	18fb      	adds	r3, r7, r3
 80018ba:	2200      	movs	r2, #0
 80018bc:	701a      	strb	r2, [r3, #0]

	//Wait until I2C isn't busy
	//TODO: I2C connection breaks sometimes
	while (I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_BUSY) == SET)
 80018be:	46c0      	nop			; (mov r8, r8)
 80018c0:	2380      	movs	r3, #128	; 0x80
 80018c2:	021b      	lsls	r3, r3, #8
 80018c4:	4a3c      	ldr	r2, [pc, #240]	; (80019b8 <I2C_RdReg+0x118>)
 80018c6:	0019      	movs	r1, r3
 80018c8:	0010      	movs	r0, r2
 80018ca:	f7fe ff21 	bl	8000710 <I2C_GetFlagStatus>
 80018ce:	0003      	movs	r3, r0
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d0f5      	beq.n	80018c0 <I2C_RdReg+0x20>
		;

	//first communication (try reading the status register)
	/* Configure slave address, nbytes, reload, end mode and start or stop generation */
	I2C_TransferHandling(I2C_MMA8653, ADDR_MMA8653, 1, I2C_SoftEnd_Mode,
 80018d4:	4838      	ldr	r0, [pc, #224]	; (80019b8 <I2C_RdReg+0x118>)
 80018d6:	2380      	movs	r3, #128	; 0x80
 80018d8:	019b      	lsls	r3, r3, #6
 80018da:	9300      	str	r3, [sp, #0]
 80018dc:	2300      	movs	r3, #0
 80018de:	2201      	movs	r2, #1
 80018e0:	213a      	movs	r1, #58	; 0x3a
 80018e2:	f7fe fec7 	bl	8000674 <I2C_TransferHandling>
	I2C_Generate_Start_Write);
	//Ensure the transmit interrupted flag is set
	while (I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_TXIS) == RESET)
 80018e6:	46c0      	nop			; (mov r8, r8)
 80018e8:	4b33      	ldr	r3, [pc, #204]	; (80019b8 <I2C_RdReg+0x118>)
 80018ea:	2102      	movs	r1, #2
 80018ec:	0018      	movs	r0, r3
 80018ee:	f7fe ff0f 	bl	8000710 <I2C_GetFlagStatus>
 80018f2:	1e03      	subs	r3, r0, #0
 80018f4:	d0f8      	beq.n	80018e8 <I2C_RdReg+0x48>
		;
	//send reg address
	I2C_SendData(I2C_MMA8653, (uint8_t) Reg);
 80018f6:	1dfb      	adds	r3, r7, #7
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	4a2f      	ldr	r2, [pc, #188]	; (80019b8 <I2C_RdReg+0x118>)
 80018fc:	0019      	movs	r1, r3
 80018fe:	0010      	movs	r0, r2
 8001900:	f7fe feec 	bl	80006dc <I2C_SendData>
	//Wait until transfer is complete!
	while (I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_TC) == RESET)
 8001904:	46c0      	nop			; (mov r8, r8)
 8001906:	4b2c      	ldr	r3, [pc, #176]	; (80019b8 <I2C_RdReg+0x118>)
 8001908:	2140      	movs	r1, #64	; 0x40
 800190a:	0018      	movs	r0, r3
 800190c:	f7fe ff00 	bl	8000710 <I2C_GetFlagStatus>
 8001910:	1e03      	subs	r3, r0, #0
 8001912:	d0f8      	beq.n	8001906 <I2C_RdReg+0x66>
		;
	//initiate read
	I2C_TransferHandling(I2C_MMA8653, ADDR_MMA8653, DCnt, I2C_AutoEnd_Mode,
 8001914:	2380      	movs	r3, #128	; 0x80
 8001916:	0499      	lsls	r1, r3, #18
 8001918:	1dbb      	adds	r3, r7, #6
 800191a:	781a      	ldrb	r2, [r3, #0]
 800191c:	4826      	ldr	r0, [pc, #152]	; (80019b8 <I2C_RdReg+0x118>)
 800191e:	2390      	movs	r3, #144	; 0x90
 8001920:	019b      	lsls	r3, r3, #6
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	000b      	movs	r3, r1
 8001926:	213a      	movs	r1, #58	; 0x3a
 8001928:	f7fe fea4 	bl	8000674 <I2C_TransferHandling>
	I2C_Generate_Start_Read);

	//Read in DCnt pieces of data
	for (Cnt = 0; Cnt < DCnt; Cnt++) {
 800192c:	230f      	movs	r3, #15
 800192e:	18fb      	adds	r3, r7, r3
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]
 8001934:	e025      	b.n	8001982 <I2C_RdReg+0xe2>
		//Wait until the RX register is full of luscious data!
		while (I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_RXNE) == RESET)
 8001936:	46c0      	nop			; (mov r8, r8)
 8001938:	4b1f      	ldr	r3, [pc, #124]	; (80019b8 <I2C_RdReg+0x118>)
 800193a:	2104      	movs	r1, #4
 800193c:	0018      	movs	r0, r3
 800193e:	f7fe fee7 	bl	8000710 <I2C_GetFlagStatus>
 8001942:	1e03      	subs	r3, r0, #0
 8001944:	d0f8      	beq.n	8001938 <I2C_RdReg+0x98>
			;
		//If we're only reading one byte, place that data direct into the
		//SingleData variable. If we're reading more than 1 piece of data
		//store in the array "Data" (a pointer from main)
		if (DCnt > 1) {
 8001946:	1dbb      	adds	r3, r7, #6
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d90b      	bls.n	8001966 <I2C_RdReg+0xc6>
			Data[Cnt] = I2C_ReceiveData(I2C_MMA8653);
 800194e:	230f      	movs	r3, #15
 8001950:	18fb      	adds	r3, r7, r3
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	18d4      	adds	r4, r2, r3
 8001958:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <I2C_RdReg+0x118>)
 800195a:	0018      	movs	r0, r3
 800195c:	f7fe fecd 	bl	80006fa <I2C_ReceiveData>
 8001960:	0003      	movs	r3, r0
 8001962:	7023      	strb	r3, [r4, #0]
 8001964:	e007      	b.n	8001976 <I2C_RdReg+0xd6>
		} else
			SingleData = I2C_ReceiveData(I2C_MMA8653);
 8001966:	230e      	movs	r3, #14
 8001968:	18fc      	adds	r4, r7, r3
 800196a:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <I2C_RdReg+0x118>)
 800196c:	0018      	movs	r0, r3
 800196e:	f7fe fec4 	bl	80006fa <I2C_ReceiveData>
 8001972:	0003      	movs	r3, r0
 8001974:	7023      	strb	r3, [r4, #0]
	for (Cnt = 0; Cnt < DCnt; Cnt++) {
 8001976:	210f      	movs	r1, #15
 8001978:	187b      	adds	r3, r7, r1
 800197a:	781a      	ldrb	r2, [r3, #0]
 800197c:	187b      	adds	r3, r7, r1
 800197e:	3201      	adds	r2, #1
 8001980:	701a      	strb	r2, [r3, #0]
 8001982:	230f      	movs	r3, #15
 8001984:	18fa      	adds	r2, r7, r3
 8001986:	1dbb      	adds	r3, r7, #6
 8001988:	7812      	ldrb	r2, [r2, #0]
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	429a      	cmp	r2, r3
 800198e:	d3d2      	bcc.n	8001936 <I2C_RdReg+0x96>
	}

	//Wait for the stop condition to be sent
	while (I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_STOPF) == RESET)
 8001990:	46c0      	nop			; (mov r8, r8)
 8001992:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <I2C_RdReg+0x118>)
 8001994:	2120      	movs	r1, #32
 8001996:	0018      	movs	r0, r3
 8001998:	f7fe feba 	bl	8000710 <I2C_GetFlagStatus>
 800199c:	1e03      	subs	r3, r0, #0
 800199e:	d0f8      	beq.n	8001992 <I2C_RdReg+0xf2>
		;

	//Clear the stop flag for next transfers
	I2C_ClearFlag(I2C_MMA8653, I2C_FLAG_STOPF);
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <I2C_RdReg+0x118>)
 80019a2:	2120      	movs	r1, #32
 80019a4:	0018      	movs	r0, r3
 80019a6:	f7fe fed7 	bl	8000758 <I2C_ClearFlag>

	//Return a single piece of data if DCnt was
	//less than 1, otherwise 0 will be returned.
	return SingleData;
 80019aa:	230e      	movs	r3, #14
 80019ac:	18fb      	adds	r3, r7, r3
 80019ae:	781b      	ldrb	r3, [r3, #0]
}
 80019b0:	0018      	movs	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	b005      	add	sp, #20
 80019b6:	bd90      	pop	{r4, r7, pc}
 80019b8:	40005400 	.word	0x40005400

080019bc <I2C_WrReg>:

void I2C_WrReg(uint8_t Reg, uint8_t Val) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af02      	add	r7, sp, #8
 80019c2:	0002      	movs	r2, r0
 80019c4:	1dfb      	adds	r3, r7, #7
 80019c6:	701a      	strb	r2, [r3, #0]
 80019c8:	1dbb      	adds	r3, r7, #6
 80019ca:	1c0a      	adds	r2, r1, #0
 80019cc:	701a      	strb	r2, [r3, #0]

	//Wait until I2C isn't busy
	while (I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_BUSY) == SET)
 80019ce:	46c0      	nop			; (mov r8, r8)
 80019d0:	2380      	movs	r3, #128	; 0x80
 80019d2:	021b      	lsls	r3, r3, #8
 80019d4:	4a29      	ldr	r2, [pc, #164]	; (8001a7c <I2C_WrReg+0xc0>)
 80019d6:	0019      	movs	r1, r3
 80019d8:	0010      	movs	r0, r2
 80019da:	f7fe fe99 	bl	8000710 <I2C_GetFlagStatus>
 80019de:	0003      	movs	r3, r0
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d0f5      	beq.n	80019d0 <I2C_WrReg+0x14>
	//I2C interface... Regardless! Send the address of the HMC
	//sensor down the I2C Bus and generate a start saying we're
	//going to write one byte. I'll be completely honest,
	//the I2C peripheral doesn't make too much sense to me
	//and a lot of the code is from the Std peripheral library
	I2C_TransferHandling(I2C_MMA8653, ADDR_MMA8653, 1, I2C_Reload_Mode,
 80019e4:	2380      	movs	r3, #128	; 0x80
 80019e6:	045a      	lsls	r2, r3, #17
 80019e8:	4824      	ldr	r0, [pc, #144]	; (8001a7c <I2C_WrReg+0xc0>)
 80019ea:	2380      	movs	r3, #128	; 0x80
 80019ec:	019b      	lsls	r3, r3, #6
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	0013      	movs	r3, r2
 80019f2:	2201      	movs	r2, #1
 80019f4:	213a      	movs	r1, #58	; 0x3a
 80019f6:	f7fe fe3d 	bl	8000674 <I2C_TransferHandling>
	I2C_Generate_Start_Write);

	//Ensure the transmit interrupted flag is set
	while (I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_TXIS) == RESET)
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	4b1f      	ldr	r3, [pc, #124]	; (8001a7c <I2C_WrReg+0xc0>)
 80019fe:	2102      	movs	r1, #2
 8001a00:	0018      	movs	r0, r3
 8001a02:	f7fe fe85 	bl	8000710 <I2C_GetFlagStatus>
 8001a06:	1e03      	subs	r3, r0, #0
 8001a08:	d0f8      	beq.n	80019fc <I2C_WrReg+0x40>
		;

	//Send the address of the register we wish to write to
	I2C_SendData(I2C_MMA8653, Reg);
 8001a0a:	1dfb      	adds	r3, r7, #7
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	4a1b      	ldr	r2, [pc, #108]	; (8001a7c <I2C_WrReg+0xc0>)
 8001a10:	0019      	movs	r1, r3
 8001a12:	0010      	movs	r0, r2
 8001a14:	f7fe fe62 	bl	80006dc <I2C_SendData>

	//Ensure that the transfer complete reload flag is
	//set, essentially a standard TC flag
	while (I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_TCR) == RESET)
 8001a18:	46c0      	nop			; (mov r8, r8)
 8001a1a:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <I2C_WrReg+0xc0>)
 8001a1c:	2180      	movs	r1, #128	; 0x80
 8001a1e:	0018      	movs	r0, r3
 8001a20:	f7fe fe76 	bl	8000710 <I2C_GetFlagStatus>
 8001a24:	1e03      	subs	r3, r0, #0
 8001a26:	d0f8      	beq.n	8001a1a <I2C_WrReg+0x5e>

	//Now that the HMC5883L knows which register
	//we want to write to, send the address again
	//and ensure the I2C peripheral doesn't add
	//any start or stop conditions
	I2C_TransferHandling(I2C_MMA8653, ADDR_MMA8653, 1, I2C_AutoEnd_Mode,
 8001a28:	2380      	movs	r3, #128	; 0x80
 8001a2a:	049b      	lsls	r3, r3, #18
 8001a2c:	4813      	ldr	r0, [pc, #76]	; (8001a7c <I2C_WrReg+0xc0>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	9200      	str	r2, [sp, #0]
 8001a32:	2201      	movs	r2, #1
 8001a34:	213a      	movs	r1, #58	; 0x3a
 8001a36:	f7fe fe1d 	bl	8000674 <I2C_TransferHandling>
	I2C_No_StartStop);

	//Again, wait until the transmit interrupted flag is set
	while (I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_TXIS) == RESET)
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <I2C_WrReg+0xc0>)
 8001a3e:	2102      	movs	r1, #2
 8001a40:	0018      	movs	r0, r3
 8001a42:	f7fe fe65 	bl	8000710 <I2C_GetFlagStatus>
 8001a46:	1e03      	subs	r3, r0, #0
 8001a48:	d0f8      	beq.n	8001a3c <I2C_WrReg+0x80>
		;

	//Send the value you wish you write to the register
	I2C_SendData(I2C_MMA8653, Val);
 8001a4a:	1dbb      	adds	r3, r7, #6
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	4a0b      	ldr	r2, [pc, #44]	; (8001a7c <I2C_WrReg+0xc0>)
 8001a50:	0019      	movs	r1, r3
 8001a52:	0010      	movs	r0, r2
 8001a54:	f7fe fe42 	bl	80006dc <I2C_SendData>

	//Wait for the stop flag to be set indicating
	//a stop condition has been sent
	while (I2C_GetFlagStatus(I2C_MMA8653, I2C_FLAG_STOPF) == RESET)
 8001a58:	46c0      	nop			; (mov r8, r8)
 8001a5a:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <I2C_WrReg+0xc0>)
 8001a5c:	2120      	movs	r1, #32
 8001a5e:	0018      	movs	r0, r3
 8001a60:	f7fe fe56 	bl	8000710 <I2C_GetFlagStatus>
 8001a64:	1e03      	subs	r3, r0, #0
 8001a66:	d0f8      	beq.n	8001a5a <I2C_WrReg+0x9e>
		;

	//Clear the stop flag for the next potential transfer
	I2C_ClearFlag(I2C_MMA8653, I2C_FLAG_STOPF);
 8001a68:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <I2C_WrReg+0xc0>)
 8001a6a:	2120      	movs	r1, #32
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f7fe fe73 	bl	8000758 <I2C_ClearFlag>
}
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	46bd      	mov	sp, r7
 8001a76:	b002      	add	sp, #8
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	46c0      	nop			; (mov r8, r8)
 8001a7c:	40005400 	.word	0x40005400

08001a80 <I2C_BitHandling>:

void I2C_BitHandling(uint8_t reg, uint8_t bitmask, uint8_t set) {
 8001a80:	b5b0      	push	{r4, r5, r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	0004      	movs	r4, r0
 8001a88:	0008      	movs	r0, r1
 8001a8a:	0011      	movs	r1, r2
 8001a8c:	1dfb      	adds	r3, r7, #7
 8001a8e:	1c22      	adds	r2, r4, #0
 8001a90:	701a      	strb	r2, [r3, #0]
 8001a92:	1dbb      	adds	r3, r7, #6
 8001a94:	1c02      	adds	r2, r0, #0
 8001a96:	701a      	strb	r2, [r3, #0]
 8001a98:	1d7b      	adds	r3, r7, #5
 8001a9a:	1c0a      	adds	r2, r1, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
	uint8_t tempReg = I2C_RdReg(reg, rxBuf, 1u);
 8001a9e:	250f      	movs	r5, #15
 8001aa0:	197c      	adds	r4, r7, r5
 8001aa2:	4917      	ldr	r1, [pc, #92]	; (8001b00 <I2C_BitHandling+0x80>)
 8001aa4:	1dfb      	adds	r3, r7, #7
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	0018      	movs	r0, r3
 8001aac:	f7ff fef8 	bl	80018a0 <I2C_RdReg>
 8001ab0:	0003      	movs	r3, r0
 8001ab2:	7023      	strb	r3, [r4, #0]
	if (set) {
 8001ab4:	1d7b      	adds	r3, r7, #5
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d007      	beq.n	8001acc <I2C_BitHandling+0x4c>
		//set bits
		tempReg |= bitmask;
 8001abc:	197b      	adds	r3, r7, r5
 8001abe:	1979      	adds	r1, r7, r5
 8001ac0:	1dba      	adds	r2, r7, #6
 8001ac2:	7809      	ldrb	r1, [r1, #0]
 8001ac4:	7812      	ldrb	r2, [r2, #0]
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	701a      	strb	r2, [r3, #0]
 8001aca:	e00c      	b.n	8001ae6 <I2C_BitHandling+0x66>
	} else {
		//reset bits
		tempReg &= ~bitmask;
 8001acc:	1dbb      	adds	r3, r7, #6
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	b25b      	sxtb	r3, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	b25b      	sxtb	r3, r3
 8001ad6:	210f      	movs	r1, #15
 8001ad8:	187a      	adds	r2, r7, r1
 8001ada:	7812      	ldrb	r2, [r2, #0]
 8001adc:	b252      	sxtb	r2, r2
 8001ade:	4013      	ands	r3, r2
 8001ae0:	b25a      	sxtb	r2, r3
 8001ae2:	187b      	adds	r3, r7, r1
 8001ae4:	701a      	strb	r2, [r3, #0]
	}
	//write back the register
	I2C_WrReg(reg, tempReg);
 8001ae6:	230f      	movs	r3, #15
 8001ae8:	18fb      	adds	r3, r7, r3
 8001aea:	781a      	ldrb	r2, [r3, #0]
 8001aec:	1dfb      	adds	r3, r7, #7
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	0011      	movs	r1, r2
 8001af2:	0018      	movs	r0, r3
 8001af4:	f7ff ff62 	bl	80019bc <I2C_WrReg>
}
 8001af8:	46c0      	nop			; (mov r8, r8)
 8001afa:	46bd      	mov	sp, r7
 8001afc:	b004      	add	sp, #16
 8001afe:	bdb0      	pop	{r4, r5, r7, pc}
 8001b00:	200002f0 	.word	0x200002f0

08001b04 <mma8653_goStandby>:

uint8_t mma8653_goStandby() {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
	if (!isActive) {
 8001b08:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <mma8653_goStandby+0x44>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d101      	bne.n	8001b14 <mma8653_goStandby+0x10>
		return 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	e015      	b.n	8001b40 <mma8653_goStandby+0x3c>
	}
	//reset the Active-bit
	I2C_BitHandling(REG_CTRL_REG_1, 1 << 0, 0);
 8001b14:	2200      	movs	r2, #0
 8001b16:	2101      	movs	r1, #1
 8001b18:	202a      	movs	r0, #42	; 0x2a
 8001b1a:	f7ff ffb1 	bl	8001a80 <I2C_BitHandling>
	delay(100);
 8001b1e:	2064      	movs	r0, #100	; 0x64
 8001b20:	f7ff f808 	bl	8000b34 <delay>
	//check, if the sensor is inactive
	if (I2C_RdReg(REG_SYSMOD, rxBuf, 1) != 0) {
 8001b24:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <mma8653_goStandby+0x48>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	0019      	movs	r1, r3
 8001b2a:	200b      	movs	r0, #11
 8001b2c:	f7ff feb8 	bl	80018a0 <I2C_RdReg>
 8001b30:	1e03      	subs	r3, r0, #0
 8001b32:	d001      	beq.n	8001b38 <mma8653_goStandby+0x34>
		return 1;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e003      	b.n	8001b40 <mma8653_goStandby+0x3c>
	}
	isActive = 0;
 8001b38:	4b03      	ldr	r3, [pc, #12]	; (8001b48 <mma8653_goStandby+0x44>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	701a      	strb	r2, [r3, #0]
	return 0;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	0018      	movs	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	46c0      	nop			; (mov r8, r8)
 8001b48:	20000038 	.word	0x20000038
 8001b4c:	200002f0 	.word	0x200002f0

08001b50 <mma8653_goActive>:
uint8_t mma8653_goActive() {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0

	if (isActive) {
 8001b54:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <mma8653_goActive+0x44>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <mma8653_goActive+0x10>
		return 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	e016      	b.n	8001b8e <mma8653_goActive+0x3e>
	}
	//set the Active-bit
	I2C_BitHandling(REG_CTRL_REG_1, 1 << 0, 1);
 8001b60:	2201      	movs	r2, #1
 8001b62:	2101      	movs	r1, #1
 8001b64:	202a      	movs	r0, #42	; 0x2a
 8001b66:	f7ff ff8b 	bl	8001a80 <I2C_BitHandling>
	delay(100);
 8001b6a:	2064      	movs	r0, #100	; 0x64
 8001b6c:	f7fe ffe2 	bl	8000b34 <delay>
	//check, if the sensor is active
	if (I2C_RdReg(REG_SYSMOD, rxBuf, 1) != 1) {
 8001b70:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <mma8653_goActive+0x48>)
 8001b72:	2201      	movs	r2, #1
 8001b74:	0019      	movs	r1, r3
 8001b76:	200b      	movs	r0, #11
 8001b78:	f7ff fe92 	bl	80018a0 <I2C_RdReg>
 8001b7c:	0003      	movs	r3, r0
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d001      	beq.n	8001b86 <mma8653_goActive+0x36>

		return 1;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e003      	b.n	8001b8e <mma8653_goActive+0x3e>
	}
	isActive = 1;
 8001b86:	4b03      	ldr	r3, [pc, #12]	; (8001b94 <mma8653_goActive+0x44>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	701a      	strb	r2, [r3, #0]
	return 0;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	0018      	movs	r0, r3
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	20000038 	.word	0x20000038
 8001b98:	200002f0 	.word	0x200002f0

08001b9c <mma8653_init>:

uint8_t mma8653_init() {
 8001b9c:	b590      	push	{r4, r7, lr}
 8001b9e:	b08b      	sub	sp, #44	; 0x2c
 8001ba0:	af00      	add	r7, sp, #0

	//enable clock for periphery modules
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8001ba2:	2380      	movs	r3, #128	; 0x80
 8001ba4:	029b      	lsls	r3, r3, #10
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	0018      	movs	r0, r3
 8001baa:	f7fe fe51 	bl	8000850 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 8001bae:	2380      	movs	r3, #128	; 0x80
 8001bb0:	03db      	lsls	r3, r3, #15
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	f7fe fe4b 	bl	8000850 <RCC_AHBPeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 8001bba:	2380      	movs	r3, #128	; 0x80
 8001bbc:	039b      	lsls	r3, r3, #14
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f7fe fe85 	bl	80008d0 <RCC_APB1PeriphClockCmd>

	//gpio init
	GPIO_InitTypeDef GPIO_InitStruct;
	//configure PINs PF0 and PF1 as AF OD out
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
 8001bc6:	2420      	movs	r4, #32
 8001bc8:	193b      	adds	r3, r7, r4
 8001bca:	2203      	movs	r2, #3
 8001bcc:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8001bce:	193b      	adds	r3, r7, r4
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	711a      	strb	r2, [r3, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;
 8001bd4:	193b      	adds	r3, r7, r4
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	719a      	strb	r2, [r3, #6]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_Level_1;
 8001bda:	193b      	adds	r3, r7, r4
 8001bdc:	2200      	movs	r2, #0
 8001bde:	715a      	strb	r2, [r3, #5]
	GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001be0:	193b      	adds	r3, r7, r4
 8001be2:	4a39      	ldr	r2, [pc, #228]	; (8001cc8 <mma8653_init+0x12c>)
 8001be4:	0019      	movs	r1, r3
 8001be6:	0010      	movs	r0, r2
 8001be8:	f7fe fb98 	bl	800031c <GPIO_Init>

	//remap
	GPIO_PinAFConfig(GPIOF, GPIO_PinSource0, GPIO_AF_1);
 8001bec:	4b36      	ldr	r3, [pc, #216]	; (8001cc8 <mma8653_init+0x12c>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	0018      	movs	r0, r3
 8001bf4:	f7fe fc66 	bl	80004c4 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOF, GPIO_PinSource1, GPIO_AF_1);
 8001bf8:	4b33      	ldr	r3, [pc, #204]	; (8001cc8 <mma8653_init+0x12c>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	0018      	movs	r0, r3
 8001c00:	f7fe fc60 	bl	80004c4 <GPIO_PinAFConfig>

	//configure PINs PA2 and PA3 as inputs for the interrupt lines
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 8001c04:	0021      	movs	r1, r4
 8001c06:	187b      	adds	r3, r7, r1
 8001c08:	220c      	movs	r2, #12
 8001c0a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 8001c0c:	187b      	adds	r3, r7, r1
 8001c0e:	2200      	movs	r2, #0
 8001c10:	711a      	strb	r2, [r3, #4]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8001c12:	187b      	adds	r3, r7, r1
 8001c14:	2201      	movs	r2, #1
 8001c16:	71da      	strb	r2, [r3, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8001c18:	187b      	adds	r3, r7, r1
 8001c1a:	2203      	movs	r2, #3
 8001c1c:	715a      	strb	r2, [r3, #5]
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1e:	187a      	adds	r2, r7, r1
 8001c20:	2390      	movs	r3, #144	; 0x90
 8001c22:	05db      	lsls	r3, r3, #23
 8001c24:	0011      	movs	r1, r2
 8001c26:	0018      	movs	r0, r3
 8001c28:	f7fe fb78 	bl	800031c <GPIO_Init>

	//i2c init
	//I2C_DeInit(I2C1);
	I2C_InitTypeDef I2C_InitStruct;
	I2C_InitStruct.I2C_Ack = I2C_Ack_Enable;
 8001c2c:	1d3b      	adds	r3, r7, #4
 8001c2e:	2200      	movs	r2, #0
 8001c30:	615a      	str	r2, [r3, #20]
	I2C_InitStruct.I2C_AnalogFilter = I2C_AnalogFilter_Enable;
 8001c32:	1d3b      	adds	r3, r7, #4
 8001c34:	2200      	movs	r2, #0
 8001c36:	605a      	str	r2, [r3, #4]
	I2C_InitStruct.I2C_OwnAddress1 = 0xAB;
 8001c38:	1d3b      	adds	r3, r7, #4
 8001c3a:	22ab      	movs	r2, #171	; 0xab
 8001c3c:	611a      	str	r2, [r3, #16]
	I2C_InitStruct.I2C_DigitalFilter = 0;
 8001c3e:	1d3b      	adds	r3, r7, #4
 8001c40:	2200      	movs	r2, #0
 8001c42:	609a      	str	r2, [r3, #8]
	I2C_InitStruct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8001c44:	1d3b      	adds	r3, r7, #4
 8001c46:	2200      	movs	r2, #0
 8001c48:	619a      	str	r2, [r3, #24]
	I2C_InitStruct.I2C_Mode = I2C_Mode_I2C;
 8001c4a:	1d3b      	adds	r3, r7, #4
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	60da      	str	r2, [r3, #12]
	I2C_InitStruct.I2C_Timing = 0x0010020A; //should be 400kHz for the 8Mhz HSI
 8001c50:	1d3b      	adds	r3, r7, #4
 8001c52:	4a1e      	ldr	r2, [pc, #120]	; (8001ccc <mma8653_init+0x130>)
 8001c54:	601a      	str	r2, [r3, #0]
	I2C_Init(I2C_MMA8653, &I2C_InitStruct);
 8001c56:	1d3b      	adds	r3, r7, #4
 8001c58:	4a1d      	ldr	r2, [pc, #116]	; (8001cd0 <mma8653_init+0x134>)
 8001c5a:	0019      	movs	r1, r3
 8001c5c:	0010      	movs	r0, r2
 8001c5e:	f7fe fc83 	bl	8000568 <I2C_Init>

	I2C_Cmd(I2C_MMA8653, ENABLE);
 8001c62:	4b1b      	ldr	r3, [pc, #108]	; (8001cd0 <mma8653_init+0x134>)
 8001c64:	2101      	movs	r1, #1
 8001c66:	0018      	movs	r0, r3
 8001c68:	f7fe fce6 	bl	8000638 <I2C_Cmd>

	delay(50);
 8001c6c:	2032      	movs	r0, #50	; 0x32
 8001c6e:	f7fe ff61 	bl	8000b34 <delay>

	if (I2C_RdReg(REG_WHO_AM_I, rxBuf, 1) != 0x5A) //read the device ID to verify communication
 8001c72:	4b18      	ldr	r3, [pc, #96]	; (8001cd4 <mma8653_init+0x138>)
 8001c74:	2201      	movs	r2, #1
 8001c76:	0019      	movs	r1, r3
 8001c78:	200d      	movs	r0, #13
 8001c7a:	f7ff fe11 	bl	80018a0 <I2C_RdReg>
 8001c7e:	0003      	movs	r3, r0
 8001c80:	2b5a      	cmp	r3, #90	; 0x5a
 8001c82:	d001      	beq.n	8001c88 <mma8653_init+0xec>
			{
		return 1;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e01b      	b.n	8001cc0 <mma8653_init+0x124>
	}

	//set to highres mode
	I2C_BitHandling(REG_CTRL_REG_2, 1 << 1, SET);
 8001c88:	2201      	movs	r2, #1
 8001c8a:	2102      	movs	r1, #2
 8001c8c:	202b      	movs	r0, #43	; 0x2b
 8001c8e:	f7ff fef7 	bl	8001a80 <I2C_BitHandling>

	//set the sensor as always active (disable auto sleep) <- default
	//set to active and 10 bit mode, DataRate to 12.5Hz
	I2C_BitHandling(REG_CTRL_REG_1, (1 << 0 | 1 << 3 | 1 << 5), SET);
 8001c92:	2201      	movs	r2, #1
 8001c94:	2129      	movs	r1, #41	; 0x29
 8001c96:	202a      	movs	r0, #42	; 0x2a
 8001c98:	f7ff fef2 	bl	8001a80 <I2C_BitHandling>

	//check, if the sensor is active
	if (I2C_RdReg(REG_SYSMOD, rxBuf, 1) != 1) {
 8001c9c:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <mma8653_init+0x138>)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	0019      	movs	r1, r3
 8001ca2:	200b      	movs	r0, #11
 8001ca4:	f7ff fdfc 	bl	80018a0 <I2C_RdReg>
 8001ca8:	0003      	movs	r3, r0
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d004      	beq.n	8001cb8 <mma8653_init+0x11c>
		isActive = 0;
 8001cae:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <mma8653_init+0x13c>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]
		return 2;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	e003      	b.n	8001cc0 <mma8653_init+0x124>
	}
	isActive = 1;
 8001cb8:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <mma8653_init+0x13c>)
 8001cba:	2201      	movs	r2, #1
 8001cbc:	701a      	strb	r2, [r3, #0]
	return 0;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	b00b      	add	sp, #44	; 0x2c
 8001cc6:	bd90      	pop	{r4, r7, pc}
 8001cc8:	48001400 	.word	0x48001400
 8001ccc:	0010020a 	.word	0x0010020a
 8001cd0:	40005400 	.word	0x40005400
 8001cd4:	200002f0 	.word	0x200002f0
 8001cd8:	20000038 	.word	0x20000038

08001cdc <mma8653_setRange>:

uint8_t mma8653_setRange(mma8653_Ranges range) {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	0002      	movs	r2, r0
 8001ce4:	1dfb      	adds	r3, r7, #7
 8001ce6:	701a      	strb	r2, [r3, #0]
	//deactivate the sensor
	if (mma8653_goStandby()) {
 8001ce8:	f7ff ff0c 	bl	8001b04 <mma8653_goStandby>
 8001cec:	1e03      	subs	r3, r0, #0
 8001cee:	d001      	beq.n	8001cf4 <mma8653_setRange+0x18>
		return 1;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e012      	b.n	8001d1a <mma8653_setRange+0x3e>
	}
	//clear bits in register to change
	I2C_BitHandling(REG_XYZ_DATA_CFG, 0x03, Bit_RESET);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2103      	movs	r1, #3
 8001cf8:	200e      	movs	r0, #14
 8001cfa:	f7ff fec1 	bl	8001a80 <I2C_BitHandling>
	//set range
	I2C_BitHandling(REG_XYZ_DATA_CFG, range, Bit_SET);
 8001cfe:	1dfb      	adds	r3, r7, #7
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	2201      	movs	r2, #1
 8001d04:	0019      	movs	r1, r3
 8001d06:	200e      	movs	r0, #14
 8001d08:	f7ff feba 	bl	8001a80 <I2C_BitHandling>

	if (mma8653_goActive()) {
 8001d0c:	f7ff ff20 	bl	8001b50 <mma8653_goActive>
 8001d10:	1e03      	subs	r3, r0, #0
 8001d12:	d001      	beq.n	8001d18 <mma8653_setRange+0x3c>
		return 3;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e000      	b.n	8001d1a <mma8653_setRange+0x3e>
	}
	return 0;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	b002      	add	sp, #8
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <mma8653_setDataRate>:

uint8_t mma8653_setDataRate(mma8653_dataRates dataRate) {
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	0002      	movs	r2, r0
 8001d2a:	1dfb      	adds	r3, r7, #7
 8001d2c:	701a      	strb	r2, [r3, #0]
	//deactivate the sensor
	if (mma8653_goStandby()) {
 8001d2e:	f7ff fee9 	bl	8001b04 <mma8653_goStandby>
 8001d32:	1e03      	subs	r3, r0, #0
 8001d34:	d001      	beq.n	8001d3a <mma8653_setDataRate+0x18>
		return 1;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e014      	b.n	8001d64 <mma8653_setDataRate+0x42>
	}
	//clear bits in register to change
	I2C_BitHandling(REG_CTRL_REG_1, 0x38, Bit_RESET);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2138      	movs	r1, #56	; 0x38
 8001d3e:	202a      	movs	r0, #42	; 0x2a
 8001d40:	f7ff fe9e 	bl	8001a80 <I2C_BitHandling>
	//set range
	I2C_BitHandling(REG_CTRL_REG_1, dataRate << 3, Bit_SET);
 8001d44:	1dfb      	adds	r3, r7, #7
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	0019      	movs	r1, r3
 8001d50:	202a      	movs	r0, #42	; 0x2a
 8001d52:	f7ff fe95 	bl	8001a80 <I2C_BitHandling>

	if (mma8653_goActive()) {
 8001d56:	f7ff fefb 	bl	8001b50 <mma8653_goActive>
 8001d5a:	1e03      	subs	r3, r0, #0
 8001d5c:	d001      	beq.n	8001d62 <mma8653_setDataRate+0x40>
		return 3;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e000      	b.n	8001d64 <mma8653_setDataRate+0x42>
	}
	return 0;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	0018      	movs	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	b002      	add	sp, #8
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <mma8653_setDataWidth>:

uint8_t mma8653_setDataWidth(uint8_t DataWidth) {
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	0002      	movs	r2, r0
 8001d74:	1dfb      	adds	r3, r7, #7
 8001d76:	701a      	strb	r2, [r3, #0]
	//deactivate the sensor
	if (mma8653_goStandby()) {
 8001d78:	f7ff fec4 	bl	8001b04 <mma8653_goStandby>
 8001d7c:	1e03      	subs	r3, r0, #0
 8001d7e:	d001      	beq.n	8001d84 <mma8653_setDataWidth+0x18>
		return 1;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e020      	b.n	8001dc6 <mma8653_setDataWidth+0x5a>
	}
	//clear bits in register to change
	I2C_BitHandling(REG_CTRL_REG_1, 0x3E, Bit_RESET);
 8001d84:	2200      	movs	r2, #0
 8001d86:	213e      	movs	r1, #62	; 0x3e
 8001d88:	202a      	movs	r0, #42	; 0x2a
 8001d8a:	f7ff fe79 	bl	8001a80 <I2C_BitHandling>

	//decide what to do
	switch (DataWidth) {
 8001d8e:	1dfb      	adds	r3, r7, #7
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d002      	beq.n	8001d9c <mma8653_setDataWidth+0x30>
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d006      	beq.n	8001da8 <mma8653_setDataWidth+0x3c>
 8001d9a:	e00b      	b.n	8001db4 <mma8653_setDataWidth+0x48>
	case MMA8653_DATAWIDTH_8:
		//set F_READ and leave highest data rate
		I2C_BitHandling(REG_CTRL_REG_1, 1 << 1, Bit_SET);
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	2102      	movs	r1, #2
 8001da0:	202a      	movs	r0, #42	; 0x2a
 8001da2:	f7ff fe6d 	bl	8001a80 <I2C_BitHandling>
		break;
 8001da6:	e007      	b.n	8001db8 <mma8653_setDataWidth+0x4c>
	case MMA8653_DATAWIDTH_10:
		//limit output data rate to 12.5Hz and leave F_READ reset
		I2C_BitHandling(REG_CTRL_REG_1, (1 << 3 | 1 << 5), Bit_SET);
 8001da8:	2201      	movs	r2, #1
 8001daa:	2128      	movs	r1, #40	; 0x28
 8001dac:	202a      	movs	r0, #42	; 0x2a
 8001dae:	f7ff fe67 	bl	8001a80 <I2C_BitHandling>
		break;
 8001db2:	e001      	b.n	8001db8 <mma8653_setDataWidth+0x4c>
	default:
		return 2;
 8001db4:	2302      	movs	r3, #2
 8001db6:	e006      	b.n	8001dc6 <mma8653_setDataWidth+0x5a>
		break;
	}
	if (mma8653_goActive()) {
 8001db8:	f7ff feca 	bl	8001b50 <mma8653_goActive>
 8001dbc:	1e03      	subs	r3, r0, #0
 8001dbe:	d001      	beq.n	8001dc4 <mma8653_setDataWidth+0x58>
		return 3;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e000      	b.n	8001dc6 <mma8653_setDataWidth+0x5a>
	}
	return 0;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	b002      	add	sp, #8
 8001dcc:	bd80      	pop	{r7, pc}
	...

08001dd0 <mma8653_read8>:

//read when in fast (8-bit) mode
//needs the fast-read mode enabled as well
//max. sample frequency (because of communication) ~ 7kHz
acc8_t mma8653_read8() {
 8001dd0:	b590      	push	{r4, r7, lr}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
	uint8_t rxBuf[3];
	acc8_t acc_result;

	I2C_RdReg(REG_OUT_X_MSB, rxBuf, 3);
 8001dd6:	2408      	movs	r4, #8
 8001dd8:	193b      	adds	r3, r7, r4
 8001dda:	2203      	movs	r2, #3
 8001ddc:	0019      	movs	r1, r3
 8001dde:	2001      	movs	r0, #1
 8001de0:	f7ff fd5e 	bl	80018a0 <I2C_RdReg>
	//rxbuf[0] contains full 8 bit of data.
	//the first bit defines the sign!
	acc_result.x = rxBuf[0];
 8001de4:	0021      	movs	r1, r4
 8001de6:	187b      	adds	r3, r7, r1
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	b25a      	sxtb	r2, r3
 8001dec:	1d3b      	adds	r3, r7, #4
 8001dee:	701a      	strb	r2, [r3, #0]
	acc_result.y = rxBuf[1];
 8001df0:	187b      	adds	r3, r7, r1
 8001df2:	785b      	ldrb	r3, [r3, #1]
 8001df4:	b25a      	sxtb	r2, r3
 8001df6:	1d3b      	adds	r3, r7, #4
 8001df8:	705a      	strb	r2, [r3, #1]
	acc_result.z = rxBuf[2];
 8001dfa:	187b      	adds	r3, r7, r1
 8001dfc:	789b      	ldrb	r3, [r3, #2]
 8001dfe:	b25a      	sxtb	r2, r3
 8001e00:	1d3b      	adds	r3, r7, #4
 8001e02:	709a      	strb	r2, [r3, #2]
	return acc_result;
 8001e04:	200c      	movs	r0, #12
 8001e06:	183b      	adds	r3, r7, r0
 8001e08:	1d3a      	adds	r2, r7, #4
 8001e0a:	8811      	ldrh	r1, [r2, #0]
 8001e0c:	8019      	strh	r1, [r3, #0]
 8001e0e:	7892      	ldrb	r2, [r2, #2]
 8001e10:	709a      	strb	r2, [r3, #2]
 8001e12:	183a      	adds	r2, r7, r0
 8001e14:	2300      	movs	r3, #0
 8001e16:	7811      	ldrb	r1, [r2, #0]
 8001e18:	20ff      	movs	r0, #255	; 0xff
 8001e1a:	4001      	ands	r1, r0
 8001e1c:	20ff      	movs	r0, #255	; 0xff
 8001e1e:	4383      	bics	r3, r0
 8001e20:	430b      	orrs	r3, r1
 8001e22:	7851      	ldrb	r1, [r2, #1]
 8001e24:	20ff      	movs	r0, #255	; 0xff
 8001e26:	4001      	ands	r1, r0
 8001e28:	0209      	lsls	r1, r1, #8
 8001e2a:	4807      	ldr	r0, [pc, #28]	; (8001e48 <mma8653_read8+0x78>)
 8001e2c:	4003      	ands	r3, r0
 8001e2e:	430b      	orrs	r3, r1
 8001e30:	7892      	ldrb	r2, [r2, #2]
 8001e32:	21ff      	movs	r1, #255	; 0xff
 8001e34:	400a      	ands	r2, r1
 8001e36:	0412      	lsls	r2, r2, #16
 8001e38:	4904      	ldr	r1, [pc, #16]	; (8001e4c <mma8653_read8+0x7c>)
 8001e3a:	400b      	ands	r3, r1
 8001e3c:	4313      	orrs	r3, r2
}
 8001e3e:	0018      	movs	r0, r3
 8001e40:	46bd      	mov	sp, r7
 8001e42:	b005      	add	sp, #20
 8001e44:	bd90      	pop	{r4, r7, pc}
 8001e46:	46c0      	nop			; (mov r8, r8)
 8001e48:	ffff00ff 	.word	0xffff00ff
 8001e4c:	ff00ffff 	.word	0xff00ffff

08001e50 <mma8653_initIrq>:
	acc_result.z = ((int16_t) rxBuf[4] << 2) | (rxBuf[5] & 0x60 >> 6);
	return acc_result;
}

//TODO: don't forget to implement and register the interrupt handler in startup code
void mma8653_initIrq() {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
	mma8653_goStandby();
 8001e56:	f7ff fe55 	bl	8001b04 <mma8653_goStandby>

	//interrupt pins are defined for push/pull low active by default -> leave that

	//enable the wanted interrupt source
	I2C_BitHandling(REG_CTRL_REG_4, 1 << 0, Bit_SET);
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	202d      	movs	r0, #45	; 0x2d
 8001e60:	f7ff fe0e 	bl	8001a80 <I2C_BitHandling>
	//and route it to the corresponding pin
	I2C_BitHandling(REG_CTRL_REG_5, 1 << 0, Bit_SET);
 8001e64:	2201      	movs	r2, #1
 8001e66:	2101      	movs	r1, #1
 8001e68:	202e      	movs	r0, #46	; 0x2e
 8001e6a:	f7ff fe09 	bl	8001a80 <I2C_BitHandling>

	//set up the Interrupt in the STM32!
	//INT1 is connected to PA2 -> EXTI2 line
	//enable the clock for the syscfg module
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8001e6e:	2101      	movs	r1, #1
 8001e70:	2001      	movs	r0, #1
 8001e72:	f7fe fd0d 	bl	8000890 <RCC_APB2PeriphClockCmd>
	//enable PA2 interrupt source
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource2);
 8001e76:	2102      	movs	r1, #2
 8001e78:	2000      	movs	r0, #0
 8001e7a:	f7fe fd49 	bl	8000910 <SYSCFG_EXTILineConfig>
	//configure and enable the exti2 line
	EXTI_InitTypeDef EXTI_InitStruct;
	EXTI_InitStruct.EXTI_Line = EXTI_Line2;
 8001e7e:	2108      	movs	r1, #8
 8001e80:	187b      	adds	r3, r7, r1
 8001e82:	2204      	movs	r2, #4
 8001e84:	601a      	str	r2, [r3, #0]
	EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 8001e86:	187b      	adds	r3, r7, r1
 8001e88:	2200      	movs	r2, #0
 8001e8a:	711a      	strb	r2, [r3, #4]
	EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Falling;
 8001e8c:	187b      	adds	r3, r7, r1
 8001e8e:	220c      	movs	r2, #12
 8001e90:	715a      	strb	r2, [r3, #5]
	EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 8001e92:	187b      	adds	r3, r7, r1
 8001e94:	2201      	movs	r2, #1
 8001e96:	719a      	strb	r2, [r3, #6]
	EXTI_Init(&EXTI_InitStruct);
 8001e98:	187b      	adds	r3, r7, r1
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f7fe f9c0 	bl	8000220 <EXTI_Init>
	//enable and set exti2 interrupt
	NVIC_InitTypeDef NVIC_InitStruct;
	NVIC_InitStruct.NVIC_IRQChannel = EXTI2_3_IRQn;
 8001ea0:	1d3b      	adds	r3, r7, #4
 8001ea2:	2206      	movs	r2, #6
 8001ea4:	701a      	strb	r2, [r3, #0]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8001ea6:	1d3b      	adds	r3, r7, #4
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	709a      	strb	r2, [r3, #2]
	NVIC_Init(&NVIC_InitStruct);
 8001eac:	1d3b      	adds	r3, r7, #4
 8001eae:	0018      	movs	r0, r3
 8001eb0:	f7fe fc5e 	bl	8000770 <NVIC_Init>

	//activate sensor again
	mma8653_goActive();
 8001eb4:	f7ff fe4c 	bl	8001b50 <mma8653_goActive>
}
 8001eb8:	46c0      	nop			; (mov r8, r8)
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	b004      	add	sp, #16
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <NvMem_init>:
bool NvMem_Writable;

/**
 * loads user data from flash into memory for easy access and change in the application
 */
void NvMem_init() {
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0

	//enable flash-if clock
	RCC->AHBENR |= RCC_AHBENR_FLITFEN;
 8001ec6:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <NvMem_init+0x5c>)
 8001ec8:	695a      	ldr	r2, [r3, #20]
 8001eca:	4b14      	ldr	r3, [pc, #80]	; (8001f1c <NvMem_init+0x5c>)
 8001ecc:	2110      	movs	r1, #16
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	615a      	str	r2, [r3, #20]

	for (uint16_t ad = 0; ad <= NVMEM_AD_TOP; ad++) {
 8001ed2:	1dbb      	adds	r3, r7, #6
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	801a      	strh	r2, [r3, #0]
 8001ed8:	e012      	b.n	8001f00 <NvMem_init+0x40>
		NvMem_RamBuffer[ad] = ~READ16(NVMEM_FLASH_BASE+2*ad);
 8001eda:	1dbb      	adds	r3, r7, #6
 8001edc:	881b      	ldrh	r3, [r3, #0]
 8001ede:	4a10      	ldr	r2, [pc, #64]	; (8001f20 <NvMem_init+0x60>)
 8001ee0:	4694      	mov	ip, r2
 8001ee2:	4463      	add	r3, ip
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	1dba      	adds	r2, r7, #6
 8001eea:	8812      	ldrh	r2, [r2, #0]
 8001eec:	43db      	mvns	r3, r3
 8001eee:	b299      	uxth	r1, r3
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <NvMem_init+0x64>)
 8001ef2:	0052      	lsls	r2, r2, #1
 8001ef4:	52d1      	strh	r1, [r2, r3]
	for (uint16_t ad = 0; ad <= NVMEM_AD_TOP; ad++) {
 8001ef6:	1dbb      	adds	r3, r7, #6
 8001ef8:	881a      	ldrh	r2, [r3, #0]
 8001efa:	1dbb      	adds	r3, r7, #6
 8001efc:	3201      	adds	r2, #1
 8001efe:	801a      	strh	r2, [r3, #0]
 8001f00:	1dbb      	adds	r3, r7, #6
 8001f02:	881a      	ldrh	r2, [r3, #0]
 8001f04:	2380      	movs	r3, #128	; 0x80
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d3e6      	bcc.n	8001eda <NvMem_init+0x1a>
	}
	NvMem_Writable = true;
 8001f0c:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <NvMem_init+0x68>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	701a      	strb	r2, [r3, #0]
}
 8001f12:	46c0      	nop			; (mov r8, r8)
 8001f14:	46bd      	mov	sp, r7
 8001f16:	b002      	add	sp, #8
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	04003e00 	.word	0x04003e00
 8001f24:	200002f4 	.word	0x200002f4
 8001f28:	200006f4 	.word	0x200006f4

08001f2c <NvMem_read>:

/**
 * Reads 16 bit form the user space in flash
 * address: 16-bit address (512 addresses per used flash page)
 */
uint16_t NvMem_read(uint16_t address) {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	0002      	movs	r2, r0
 8001f34:	1dbb      	adds	r3, r7, #6
 8001f36:	801a      	strh	r2, [r3, #0]
	if (address > NVMEM_AD_TOP) {
 8001f38:	1dbb      	adds	r3, r7, #6
 8001f3a:	881a      	ldrh	r2, [r3, #0]
 8001f3c:	2380      	movs	r3, #128	; 0x80
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d301      	bcc.n	8001f48 <NvMem_read+0x1c>
		return ERR_NVMEM_OUTOFRANGE;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e004      	b.n	8001f52 <NvMem_read+0x26>
	}
	return NvMem_RamBuffer[address];
 8001f48:	1dbb      	adds	r3, r7, #6
 8001f4a:	881a      	ldrh	r2, [r3, #0]
 8001f4c:	4b03      	ldr	r3, [pc, #12]	; (8001f5c <NvMem_read+0x30>)
 8001f4e:	0052      	lsls	r2, r2, #1
 8001f50:	5ad3      	ldrh	r3, [r2, r3]
}
 8001f52:	0018      	movs	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	b002      	add	sp, #8
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	200002f4 	.word	0x200002f4

08001f60 <NvMem_write>:
 * Writes 16 bit to the user space in flash
 * address: 16-bit address (512 addresses per used flash page)
 * data: data to write
 * returns: errorcode
 */
uint8_t NvMem_write(uint16_t address, uint16_t data) {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	0002      	movs	r2, r0
 8001f68:	1dbb      	adds	r3, r7, #6
 8001f6a:	801a      	strh	r2, [r3, #0]
 8001f6c:	1d3b      	adds	r3, r7, #4
 8001f6e:	1c0a      	adds	r2, r1, #0
 8001f70:	801a      	strh	r2, [r3, #0]
	if (address > NVMEM_AD_TOP) {
 8001f72:	1dbb      	adds	r3, r7, #6
 8001f74:	881a      	ldrh	r2, [r3, #0]
 8001f76:	2380      	movs	r3, #128	; 0x80
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d301      	bcc.n	8001f82 <NvMem_write+0x22>
		return ERR_NVMEM_OUTOFRANGE;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e010      	b.n	8001fa4 <NvMem_write+0x44>
	}
	if (!NvMem_Writable) {
 8001f82:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <NvMem_write+0x4c>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2201      	movs	r2, #1
 8001f88:	4053      	eors	r3, r2
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <NvMem_write+0x34>
		return ERR_NVMEM_ALREADYWRITTEN;
 8001f90:	2302      	movs	r3, #2
 8001f92:	e007      	b.n	8001fa4 <NvMem_write+0x44>
	}
	NvMem_RamBuffer[address] = data;
 8001f94:	1dbb      	adds	r3, r7, #6
 8001f96:	881a      	ldrh	r2, [r3, #0]
 8001f98:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <NvMem_write+0x50>)
 8001f9a:	0052      	lsls	r2, r2, #1
 8001f9c:	1d39      	adds	r1, r7, #4
 8001f9e:	8809      	ldrh	r1, [r1, #0]
 8001fa0:	52d1      	strh	r1, [r2, r3]
	return 0;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	b002      	add	sp, #8
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	200006f4 	.word	0x200006f4
 8001fb0:	200002f4 	.word	0x200002f4

08001fb4 <power_init>:
#include "stm32f0xx_rcc.h"

volatile uint8_t cnt_time;
volatile uint8_t power_timer;

void power_init() {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
	//enable clock for periphery modules
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8001fba:	2380      	movs	r3, #128	; 0x80
 8001fbc:	029b      	lsls	r3, r3, #10
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	f7fe fc45 	bl	8000850 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8001fc6:	2380      	movs	r3, #128	; 0x80
 8001fc8:	02db      	lsls	r3, r3, #11
 8001fca:	2101      	movs	r1, #1
 8001fcc:	0018      	movs	r0, r3
 8001fce:	f7fe fc3f 	bl	8000850 <RCC_AHBPeriphClockCmd>

	//init gpios
	//PB1
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_1;
 8001fd2:	003b      	movs	r3, r7
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 8001fd8:	003b      	movs	r3, r7
 8001fda:	2200      	movs	r2, #0
 8001fdc:	711a      	strb	r2, [r3, #4]
	GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fde:	003b      	movs	r3, r7
 8001fe0:	4a19      	ldr	r2, [pc, #100]	; (8002048 <power_init+0x94>)
 8001fe2:	0019      	movs	r1, r3
 8001fe4:	0010      	movs	r0, r2
 8001fe6:	f7fe f999 	bl	800031c <GPIO_Init>
	//PA4
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_4;
 8001fea:	003b      	movs	r3, r7
 8001fec:	2210      	movs	r2, #16
 8001fee:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8001ff0:	003b      	movs	r3, r7
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	711a      	strb	r2, [r3, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8001ff6:	003b      	movs	r3, r7
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	719a      	strb	r2, [r3, #6]
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffc:	003a      	movs	r2, r7
 8001ffe:	2390      	movs	r3, #144	; 0x90
 8002000:	05db      	lsls	r3, r3, #23
 8002002:	0011      	movs	r1, r2
 8002004:	0018      	movs	r0, r3
 8002006:	f7fe f989 	bl	800031c <GPIO_Init>
	GPIO_WriteBit(GPIOA, GPIO_Pin_4, Bit_SET);
 800200a:	2390      	movs	r3, #144	; 0x90
 800200c:	05db      	lsls	r3, r3, #23
 800200e:	2201      	movs	r2, #1
 8002010:	2110      	movs	r1, #16
 8002012:	0018      	movs	r0, r3
 8002014:	f7fe fa39 	bl	800048a <GPIO_WriteBit>
	//PA1
	//TODO: implement Vbat measurement
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_1;
 8002018:	003b      	movs	r3, r7
 800201a:	2202      	movs	r2, #2
 800201c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 800201e:	003b      	movs	r3, r7
 8002020:	2200      	movs	r2, #0
 8002022:	711a      	strb	r2, [r3, #4]
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002024:	003a      	movs	r2, r7
 8002026:	2390      	movs	r3, #144	; 0x90
 8002028:	05db      	lsls	r3, r3, #23
 800202a:	0011      	movs	r1, r2
 800202c:	0018      	movs	r0, r3
 800202e:	f7fe f975 	bl	800031c <GPIO_Init>
	cnt_time = 0;
 8002032:	4b06      	ldr	r3, [pc, #24]	; (800204c <power_init+0x98>)
 8002034:	2200      	movs	r2, #0
 8002036:	701a      	strb	r2, [r3, #0]
	power_timer = 10; //the system is always on for at least 10 sec
 8002038:	4b05      	ldr	r3, [pc, #20]	; (8002050 <power_init+0x9c>)
 800203a:	220a      	movs	r2, #10
 800203c:	701a      	strb	r2, [r3, #0]
}
 800203e:	46c0      	nop			; (mov r8, r8)
 8002040:	46bd      	mov	sp, r7
 8002042:	b002      	add	sp, #8
 8002044:	bd80      	pop	{r7, pc}
 8002046:	46c0      	nop			; (mov r8, r8)
 8002048:	48000400 	.word	0x48000400
 800204c:	200006f6 	.word	0x200006f6
 8002050:	200006f5 	.word	0x200006f5

08002054 <power_UsbPresent>:

uint8_t power_UsbPresent() {
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
	return GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_1);
 8002058:	4b04      	ldr	r3, [pc, #16]	; (800206c <power_UsbPresent+0x18>)
 800205a:	2102      	movs	r1, #2
 800205c:	0018      	movs	r0, r3
 800205e:	f7fe f9f1 	bl	8000444 <GPIO_ReadInputDataBit>
 8002062:	0003      	movs	r3, r0
}
 8002064:	0018      	movs	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	46c0      	nop			; (mov r8, r8)
 800206c:	48000400 	.word	0x48000400

08002070 <power_hold>:
/**
 * sets the shutdown-timer to sec seconds
 * after this time, the battery-supply is switched off
 * 0 switches off immediatly
 */
void power_hold(uint8_t sec) {
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	0002      	movs	r2, r0
 8002078:	1dfb      	adds	r3, r7, #7
 800207a:	701a      	strb	r2, [r3, #0]
	power_timer = sec;
 800207c:	4b03      	ldr	r3, [pc, #12]	; (800208c <power_hold+0x1c>)
 800207e:	1dfa      	adds	r2, r7, #7
 8002080:	7812      	ldrb	r2, [r2, #0]
 8002082:	701a      	strb	r2, [r3, #0]
}
 8002084:	46c0      	nop			; (mov r8, r8)
 8002086:	46bd      	mov	sp, r7
 8002088:	b002      	add	sp, #8
 800208a:	bd80      	pop	{r7, pc}
 800208c:	200006f5 	.word	0x200006f5

08002090 <power_exec>:

/**
 * has to be called every 100ms - needed for the power_hold
 */
void power_exec() {
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
	cnt_time++;
 8002094:	4b12      	ldr	r3, [pc, #72]	; (80020e0 <power_exec+0x50>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	b2db      	uxtb	r3, r3
 800209a:	3301      	adds	r3, #1
 800209c:	b2da      	uxtb	r2, r3
 800209e:	4b10      	ldr	r3, [pc, #64]	; (80020e0 <power_exec+0x50>)
 80020a0:	701a      	strb	r2, [r3, #0]
	if (cnt_time >= 10) {
 80020a2:	4b0f      	ldr	r3, [pc, #60]	; (80020e0 <power_exec+0x50>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b09      	cmp	r3, #9
 80020aa:	d916      	bls.n	80020da <power_exec+0x4a>
		cnt_time = 0;
 80020ac:	4b0c      	ldr	r3, [pc, #48]	; (80020e0 <power_exec+0x50>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	701a      	strb	r2, [r3, #0]

		if (power_timer) {
 80020b2:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <power_exec+0x54>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d007      	beq.n	80020cc <power_exec+0x3c>
			power_timer--;
 80020bc:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <power_exec+0x54>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	3b01      	subs	r3, #1
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <power_exec+0x54>)
 80020c8:	701a      	strb	r2, [r3, #0]
		else {
			//shut down the battery supply
			GPIO_WriteBit(GPIOA, GPIO_Pin_4, Bit_RESET);
		}
	}
}
 80020ca:	e006      	b.n	80020da <power_exec+0x4a>
			GPIO_WriteBit(GPIOA, GPIO_Pin_4, Bit_RESET);
 80020cc:	2390      	movs	r3, #144	; 0x90
 80020ce:	05db      	lsls	r3, r3, #23
 80020d0:	2200      	movs	r2, #0
 80020d2:	2110      	movs	r1, #16
 80020d4:	0018      	movs	r0, r3
 80020d6:	f7fe f9d8 	bl	800048a <GPIO_WriteBit>
}
 80020da:	46c0      	nop			; (mov r8, r8)
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	200006f6 	.word	0x200006f6
 80020e4:	200006f5 	.word	0x200006f5

080020e8 <init_povdisplay>:

extern uint8_t errorcode;

extern uint8_t tempstring[32];

void init_povdisplay() {
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
	apa102_setPattern(0b1000000000000000,2);
 80020ec:	2380      	movs	r3, #128	; 0x80
 80020ee:	021b      	lsls	r3, r3, #8
 80020f0:	2102      	movs	r1, #2
 80020f2:	0018      	movs	r0, r3
 80020f4:	f7ff f80e 	bl	8001114 <apa102_setPattern>
	delay(500);
 80020f8:	23fa      	movs	r3, #250	; 0xfa
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	0018      	movs	r0, r3
 80020fe:	f7fe fd19 	bl	8000b34 <delay>

	NvMem_init();
 8002102:	f7ff fedd 	bl	8001ec0 <NvMem_init>
	apa102_allOff();
 8002106:	f7ff f883 	bl	8001210 <apa102_allOff>
	//TODO: battery-check is still missing
	displayInit();
 800210a:	f7ff f8cd 	bl	80012a8 <displayInit>

	power_hold(10);
 800210e:	200a      	movs	r0, #10
 8002110:	f7ff ffae 	bl	8002070 <power_hold>
}
 8002114:	46c0      	nop			; (mov r8, r8)
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <init_level>:

void init_level() {
 800211a:	b580      	push	{r7, lr}
 800211c:	af00      	add	r7, sp, #0
	mma8653_setDataWidth(MMA8653_DATAWIDTH_8);
 800211e:	2000      	movs	r0, #0
 8002120:	f7ff fe24 	bl	8001d6c <mma8653_setDataWidth>
	mma8653_setDataRate(RATE_12Hz5);
 8002124:	2005      	movs	r0, #5
 8002126:	f7ff fdfc 	bl	8001d22 <mma8653_setDataRate>

	apa102_setPattern(0b1100000000000000,2);
 800212a:	23c0      	movs	r3, #192	; 0xc0
 800212c:	021b      	lsls	r3, r3, #8
 800212e:	2102      	movs	r1, #2
 8002130:	0018      	movs	r0, r3
 8002132:	f7fe ffef 	bl	8001114 <apa102_setPattern>
	delay(500);
 8002136:	23fa      	movs	r3, #250	; 0xfa
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	0018      	movs	r0, r3
 800213c:	f7fe fcfa 	bl	8000b34 <delay>
	apa102_allOff();
 8002140:	f7ff f866 	bl	8001210 <apa102_allOff>

	power_hold(10);
 8002144:	200a      	movs	r0, #10
 8002146:	f7ff ff93 	bl	8002070 <power_hold>
}
 800214a:	46c0      	nop			; (mov r8, r8)
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <init_test1>:

void init_test1() {
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
	apa102_setPattern(0b1110000000000000,2);
 8002154:	23e0      	movs	r3, #224	; 0xe0
 8002156:	021b      	lsls	r3, r3, #8
 8002158:	2102      	movs	r1, #2
 800215a:	0018      	movs	r0, r3
 800215c:	f7fe ffda 	bl	8001114 <apa102_setPattern>
	delay(500);
 8002160:	23fa      	movs	r3, #250	; 0xfa
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	0018      	movs	r0, r3
 8002166:	f7fe fce5 	bl	8000b34 <delay>

	power_hold(10);
 800216a:	200a      	movs	r0, #10
 800216c:	f7ff ff80 	bl	8002070 <power_hold>
}
 8002170:	46c0      	nop			; (mov r8, r8)
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <povdisplay>:

void povdisplay() {
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
	if(timerFlag){
 800217c:	4b05      	ldr	r3, [pc, #20]	; (8002194 <povdisplay+0x1c>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d004      	beq.n	800218e <povdisplay+0x16>
				sprintf((char*)tempstring,"Error %i occured!\n",errorcode);
				USB_VCP_DataTx((uint8_t*)tempstring,0);
			}
			consoleExecute();
		}*/
		power_exec();
 8002184:	f7ff ff84 	bl	8002090 <power_exec>
		timerFlag = 0;
 8002188:	4b02      	ldr	r3, [pc, #8]	; (8002194 <povdisplay+0x1c>)
 800218a:	2200      	movs	r2, #0
 800218c:	701a      	strb	r2, [r3, #0]

	}
}
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	20000034 	.word	0x20000034

08002198 <level>:

void level() {
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
	if(timerFlag) {
 800219e:	4b2e      	ldr	r3, [pc, #184]	; (8002258 <level+0xc0>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d053      	beq.n	800224e <level+0xb6>
		power_exec();
 80021a6:	f7ff ff73 	bl	8002090 <power_exec>
		timerFlag = 0;
 80021aa:	4b2b      	ldr	r3, [pc, #172]	; (8002258 <level+0xc0>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	701a      	strb	r2, [r3, #0]
		levelResult = mma8653_read8().y;
 80021b0:	f7ff fe0e 	bl	8001dd0 <mma8653_read8>
 80021b4:	0003      	movs	r3, r0
 80021b6:	001a      	movs	r2, r3
 80021b8:	1d3b      	adds	r3, r7, #4
 80021ba:	1c11      	adds	r1, r2, #0
 80021bc:	7019      	strb	r1, [r3, #0]
 80021be:	0411      	lsls	r1, r2, #16
 80021c0:	0e09      	lsrs	r1, r1, #24
 80021c2:	7059      	strb	r1, [r3, #1]
 80021c4:	0212      	lsls	r2, r2, #8
 80021c6:	0e12      	lsrs	r2, r2, #24
 80021c8:	709a      	strb	r2, [r3, #2]
 80021ca:	1d3b      	adds	r3, r7, #4
 80021cc:	785b      	ldrb	r3, [r3, #1]
 80021ce:	b25b      	sxtb	r3, r3
 80021d0:	b21a      	sxth	r2, r3
 80021d2:	4b22      	ldr	r3, [pc, #136]	; (800225c <level+0xc4>)
 80021d4:	801a      	strh	r2, [r3, #0]
		if(levelResult == 0) {
 80021d6:	4b21      	ldr	r3, [pc, #132]	; (800225c <level+0xc4>)
 80021d8:	2200      	movs	r2, #0
 80021da:	5e9b      	ldrsh	r3, [r3, r2]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d106      	bne.n	80021ee <level+0x56>
			apa102_setPattern(0b0000000110000000,2);
 80021e0:	23c0      	movs	r3, #192	; 0xc0
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	2102      	movs	r1, #2
 80021e6:	0018      	movs	r0, r3
 80021e8:	f7fe ff94 	bl	8001114 <apa102_setPattern>
				led_pos = 15;
			}
			apa102_setSingle(led_pos,2);
		}
	}
}
 80021ec:	e02f      	b.n	800224e <level+0xb6>
		else if(levelResult < 0) {
 80021ee:	4b1b      	ldr	r3, [pc, #108]	; (800225c <level+0xc4>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	5e9b      	ldrsh	r3, [r3, r2]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	da15      	bge.n	8002224 <level+0x8c>
			led_pos = levelResult + 8;
 80021f8:	4b18      	ldr	r3, [pc, #96]	; (800225c <level+0xc4>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	5e9b      	ldrsh	r3, [r3, r2]
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	3308      	adds	r3, #8
 8002202:	b2da      	uxtb	r2, r3
 8002204:	4b16      	ldr	r3, [pc, #88]	; (8002260 <level+0xc8>)
 8002206:	701a      	strb	r2, [r3, #0]
			if(led_pos > 250) {
 8002208:	4b15      	ldr	r3, [pc, #84]	; (8002260 <level+0xc8>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	2bfa      	cmp	r3, #250	; 0xfa
 800220e:	d902      	bls.n	8002216 <level+0x7e>
				led_pos = 0;
 8002210:	4b13      	ldr	r3, [pc, #76]	; (8002260 <level+0xc8>)
 8002212:	2200      	movs	r2, #0
 8002214:	701a      	strb	r2, [r3, #0]
			apa102_setSingle(led_pos,2);
 8002216:	4b12      	ldr	r3, [pc, #72]	; (8002260 <level+0xc8>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2102      	movs	r1, #2
 800221c:	0018      	movs	r0, r3
 800221e:	f7fe ffdd 	bl	80011dc <apa102_setSingle>
}
 8002222:	e014      	b.n	800224e <level+0xb6>
			led_pos = levelResult + 7;
 8002224:	4b0d      	ldr	r3, [pc, #52]	; (800225c <level+0xc4>)
 8002226:	2200      	movs	r2, #0
 8002228:	5e9b      	ldrsh	r3, [r3, r2]
 800222a:	b2db      	uxtb	r3, r3
 800222c:	3307      	adds	r3, #7
 800222e:	b2da      	uxtb	r2, r3
 8002230:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <level+0xc8>)
 8002232:	701a      	strb	r2, [r3, #0]
			if(led_pos > 15) {
 8002234:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <level+0xc8>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b0f      	cmp	r3, #15
 800223a:	d902      	bls.n	8002242 <level+0xaa>
				led_pos = 15;
 800223c:	4b08      	ldr	r3, [pc, #32]	; (8002260 <level+0xc8>)
 800223e:	220f      	movs	r2, #15
 8002240:	701a      	strb	r2, [r3, #0]
			apa102_setSingle(led_pos,2);
 8002242:	4b07      	ldr	r3, [pc, #28]	; (8002260 <level+0xc8>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2102      	movs	r1, #2
 8002248:	0018      	movs	r0, r3
 800224a:	f7fe ffc7 	bl	80011dc <apa102_setSingle>
}
 800224e:	46c0      	nop			; (mov r8, r8)
 8002250:	46bd      	mov	sp, r7
 8002252:	b002      	add	sp, #8
 8002254:	bd80      	pop	{r7, pc}
 8002256:	46c0      	nop			; (mov r8, r8)
 8002258:	20000034 	.word	0x20000034
 800225c:	200001f4 	.word	0x200001f4
 8002260:	200001f7 	.word	0x200001f7

08002264 <test1>:

void test1() {
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
	if(timerFlag) {
 8002268:	4b08      	ldr	r3, [pc, #32]	; (800228c <test1+0x28>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d009      	beq.n	8002284 <test1+0x20>
		power_exec();
 8002270:	f7ff ff0e 	bl	8002090 <power_exec>
		timerFlag = 0;
 8002274:	4b05      	ldr	r3, [pc, #20]	; (800228c <test1+0x28>)
 8002276:	2200      	movs	r2, #0
 8002278:	701a      	strb	r2, [r3, #0]
		apa102_setPattern(0b1010101010101010,2);
 800227a:	4b05      	ldr	r3, [pc, #20]	; (8002290 <test1+0x2c>)
 800227c:	2102      	movs	r1, #2
 800227e:	0018      	movs	r0, r3
 8002280:	f7fe ff48 	bl	8001114 <apa102_setPattern>
	}
}
 8002284:	46c0      	nop			; (mov r8, r8)
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	46c0      	nop			; (mov r8, r8)
 800228c:	20000034 	.word	0x20000034
 8002290:	0000aaaa 	.word	0x0000aaaa

08002294 <debounce>:
#include "stm32f0xx_rcc.h"
#include "drvProgram.h"
#include "main.h"


void debounce(volatile uint16_t *port, uint16_t pin) {
 8002294:	b5b0      	push	{r4, r5, r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	000a      	movs	r2, r1
 800229e:	1cbb      	adds	r3, r7, #2
 80022a0:	801a      	strh	r2, [r3, #0]
	uint16_t   port_buffer;
  	uint16_t   debounce_buffer;

  	for(debounce_buffer = 0; debounce_buffer != 0xff;) {
 80022a2:	230e      	movs	r3, #14
 80022a4:	18fb      	adds	r3, r7, r3
 80022a6:	2200      	movs	r2, #0
 80022a8:	801a      	strh	r2, [r3, #0]
 80022aa:	e020      	b.n	80022ee <debounce+0x5a>
  		debounce_buffer <<= 1;
 80022ac:	240e      	movs	r4, #14
 80022ae:	193a      	adds	r2, r7, r4
 80022b0:	193b      	adds	r3, r7, r4
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	18db      	adds	r3, r3, r3
 80022b6:	8013      	strh	r3, [r2, #0]
	  	port_buffer = *port;
 80022b8:	250c      	movs	r5, #12
 80022ba:	197b      	adds	r3, r7, r5
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	8812      	ldrh	r2, [r2, #0]
 80022c0:	801a      	strh	r2, [r3, #0]
	  	delay(150);
 80022c2:	2096      	movs	r0, #150	; 0x96
 80022c4:	f7fe fc36 	bl	8000b34 <delay>
	    if((*port & pin) == (port_buffer & pin)) {
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	881b      	ldrh	r3, [r3, #0]
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	197b      	adds	r3, r7, r5
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	4053      	eors	r3, r2
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	1cba      	adds	r2, r7, #2
 80022d8:	8812      	ldrh	r2, [r2, #0]
 80022da:	4013      	ands	r3, r2
 80022dc:	b29b      	uxth	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d105      	bne.n	80022ee <debounce+0x5a>
	    	debounce_buffer |= 0x01;
 80022e2:	193b      	adds	r3, r7, r4
 80022e4:	193a      	adds	r2, r7, r4
 80022e6:	8812      	ldrh	r2, [r2, #0]
 80022e8:	2101      	movs	r1, #1
 80022ea:	430a      	orrs	r2, r1
 80022ec:	801a      	strh	r2, [r3, #0]
  	for(debounce_buffer = 0; debounce_buffer != 0xff;) {
 80022ee:	230e      	movs	r3, #14
 80022f0:	18fb      	adds	r3, r7, r3
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	2bff      	cmp	r3, #255	; 0xff
 80022f6:	d1d9      	bne.n	80022ac <debounce+0x18>
	  	}
  	}
}
 80022f8:	46c0      	nop			; (mov r8, r8)
 80022fa:	46c0      	nop			; (mov r8, r8)
 80022fc:	46bd      	mov	sp, r7
 80022fe:	b004      	add	sp, #16
 8002300:	bdb0      	pop	{r4, r5, r7, pc}

08002302 <switch_exec>:

// change program when battery supply on and user button pressed
// progselect = 0: POV-Display
// progselect = 1: Level
// progselect = 2: Test-pattern
uint8_t switch_exec(uint8_t progselect) {
 8002302:	b580      	push	{r7, lr}
 8002304:	b082      	sub	sp, #8
 8002306:	af00      	add	r7, sp, #0
 8002308:	0002      	movs	r2, r0
 800230a:	1dfb      	adds	r3, r7, #7
 800230c:	701a      	strb	r2, [r3, #0]
	if(GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_4) && (GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_1) == 0)) {
 800230e:	2390      	movs	r3, #144	; 0x90
 8002310:	05db      	lsls	r3, r3, #23
 8002312:	2110      	movs	r1, #16
 8002314:	0018      	movs	r0, r3
 8002316:	f7fe f895 	bl	8000444 <GPIO_ReadInputDataBit>
 800231a:	1e03      	subs	r3, r0, #0
 800231c:	d039      	beq.n	8002392 <switch_exec+0x90>
 800231e:	2390      	movs	r3, #144	; 0x90
 8002320:	05db      	lsls	r3, r3, #23
 8002322:	2102      	movs	r1, #2
 8002324:	0018      	movs	r0, r3
 8002326:	f7fe f88d 	bl	8000444 <GPIO_ReadInputDataBit>
 800232a:	1e03      	subs	r3, r0, #0
 800232c:	d131      	bne.n	8002392 <switch_exec+0x90>
		debounce(GPIOA, GPIO_Pin_4);
 800232e:	2390      	movs	r3, #144	; 0x90
 8002330:	05db      	lsls	r3, r3, #23
 8002332:	2110      	movs	r1, #16
 8002334:	0018      	movs	r0, r3
 8002336:	f7ff ffad 	bl	8002294 <debounce>
		if(GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_4) && (GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_1) == 0)) {
 800233a:	2390      	movs	r3, #144	; 0x90
 800233c:	05db      	lsls	r3, r3, #23
 800233e:	2110      	movs	r1, #16
 8002340:	0018      	movs	r0, r3
 8002342:	f7fe f87f 	bl	8000444 <GPIO_ReadInputDataBit>
 8002346:	1e03      	subs	r3, r0, #0
 8002348:	d023      	beq.n	8002392 <switch_exec+0x90>
 800234a:	2390      	movs	r3, #144	; 0x90
 800234c:	05db      	lsls	r3, r3, #23
 800234e:	2102      	movs	r1, #2
 8002350:	0018      	movs	r0, r3
 8002352:	f7fe f877 	bl	8000444 <GPIO_ReadInputDataBit>
 8002356:	1e03      	subs	r3, r0, #0
 8002358:	d11b      	bne.n	8002392 <switch_exec+0x90>
			switch(progselect) {
 800235a:	1dfb      	adds	r3, r7, #7
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b02      	cmp	r3, #2
 8002360:	d011      	beq.n	8002386 <switch_exec+0x84>
 8002362:	dc17      	bgt.n	8002394 <switch_exec+0x92>
 8002364:	2b00      	cmp	r3, #0
 8002366:	d002      	beq.n	800236e <switch_exec+0x6c>
 8002368:	2b01      	cmp	r3, #1
 800236a:	d006      	beq.n	800237a <switch_exec+0x78>
 800236c:	e012      	b.n	8002394 <switch_exec+0x92>
				case 0: progselect = 1; init_level(); break;
 800236e:	1dfb      	adds	r3, r7, #7
 8002370:	2201      	movs	r2, #1
 8002372:	701a      	strb	r2, [r3, #0]
 8002374:	f7ff fed1 	bl	800211a <init_level>
 8002378:	e00c      	b.n	8002394 <switch_exec+0x92>
				case 1: progselect = 2; init_test1(); break;
 800237a:	1dfb      	adds	r3, r7, #7
 800237c:	2202      	movs	r2, #2
 800237e:	701a      	strb	r2, [r3, #0]
 8002380:	f7ff fee6 	bl	8002150 <init_test1>
 8002384:	e006      	b.n	8002394 <switch_exec+0x92>
				case 2: progselect = 0; init_povdisplay(); break;
 8002386:	1dfb      	adds	r3, r7, #7
 8002388:	2200      	movs	r2, #0
 800238a:	701a      	strb	r2, [r3, #0]
 800238c:	f7ff feac 	bl	80020e8 <init_povdisplay>
 8002390:	e000      	b.n	8002394 <switch_exec+0x92>
			}
		}
 8002392:	46c0      	nop			; (mov r8, r8)
	}
	return progselect;
 8002394:	1dfb      	adds	r3, r7, #7
 8002396:	781b      	ldrb	r3, [r3, #0]
}
 8002398:	0018      	movs	r0, r3
 800239a:	46bd      	mov	sp, r7
 800239c:	b002      	add	sp, #8
 800239e:	bd80      	pop	{r7, pc}

080023a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80023a0:	4813      	ldr	r0, [pc, #76]	; (80023f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80023a2:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80023a4:	4813      	ldr	r0, [pc, #76]	; (80023f4 <LoopForever+0x6>)
    LDR R1, [R0]
 80023a6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80023a8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80023aa:	4a13      	ldr	r2, [pc, #76]	; (80023f8 <LoopForever+0xa>)
    CMP R1, R2
 80023ac:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80023ae:	d105      	bne.n	80023bc <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80023b0:	4812      	ldr	r0, [pc, #72]	; (80023fc <LoopForever+0xe>)
    LDR R1,=0x00000001
 80023b2:	4913      	ldr	r1, [pc, #76]	; (8002400 <LoopForever+0x12>)
    STR R1, [R0]
 80023b4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80023b6:	4813      	ldr	r0, [pc, #76]	; (8002404 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80023b8:	4913      	ldr	r1, [pc, #76]	; (8002408 <LoopForever+0x1a>)
    STR R1, [R0]
 80023ba:	6001      	str	r1, [r0, #0]

080023bc <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023bc:	4813      	ldr	r0, [pc, #76]	; (800240c <LoopForever+0x1e>)
  ldr r1, =_edata
 80023be:	4914      	ldr	r1, [pc, #80]	; (8002410 <LoopForever+0x22>)
  ldr r2, =_sidata
 80023c0:	4a14      	ldr	r2, [pc, #80]	; (8002414 <LoopForever+0x26>)
  movs r3, #0
 80023c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023c4:	e002      	b.n	80023cc <LoopCopyDataInit>

080023c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ca:	3304      	adds	r3, #4

080023cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023d0:	d3f9      	bcc.n	80023c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023d2:	4a11      	ldr	r2, [pc, #68]	; (8002418 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80023d4:	4c11      	ldr	r4, [pc, #68]	; (800241c <LoopForever+0x2e>)
  movs r3, #0
 80023d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023d8:	e001      	b.n	80023de <LoopFillZerobss>

080023da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023dc:	3204      	adds	r2, #4

080023de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023e0:	d3fb      	bcc.n	80023da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80023e2:	f7fe fc71 	bl	8000cc8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80023e6:	f001 fded 	bl	8003fc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023ea:	f7fe fbb7 	bl	8000b5c <main>

080023ee <LoopForever>:

LoopForever:
    b LoopForever
 80023ee:	e7fe      	b.n	80023ee <LoopForever>
  ldr   r0, =_estack
 80023f0:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80023f4:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80023f8:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80023fc:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8002400:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8002404:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8002408:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 800240c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002410:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002414:	08004238 	.word	0x08004238
  ldr r2, =_sbss
 8002418:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800241c:	20000778 	.word	0x20000778

08002420 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002420:	e7fe      	b.n	8002420 <ADC1_IRQHandler>

08002422 <USBD_GetInfo>:


///@brief	retrace status and capabilities
///@param	pDev pointer to device structure
///@return	current hardware status, enumeration speed and capabilities of USB device
inline static uint32_t USBD_GetInfo(usbd_device *pDev){
 8002422:	b580      	push	{r7, lr}
 8002424:	b082      	sub	sp, #8
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
	return pDev->pDriver->getInfo();
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4798      	blx	r3
 8002432:	0003      	movs	r3, r0
}
 8002434:	0018      	movs	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	b002      	add	sp, #8
 800243a:	bd80      	pop	{r7, pc}

0800243c <USBD_Process_Reset>:


///@brief	USB reset device state
///@param	pDev pointer to USB device structure
///@return	none
static void USBD_Process_Reset(usbd_device *pDev){
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
	pDev->deviceStatus.device_machine_state = usbd_state_default;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2262      	movs	r2, #98	; 0x62
 8002448:	2102      	movs	r1, #2
 800244a:	5499      	strb	r1, [r3, r2]
	pDev->deviceStatus.control_state = usbd_ctl_idle;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2263      	movs	r2, #99	; 0x63
 8002450:	2100      	movs	r1, #0
 8002452:	5499      	strb	r1, [r3, r2]
	pDev->deviceStatus.device_configuration = 0;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2261      	movs	r2, #97	; 0x61
 8002458:	2100      	movs	r1, #0
 800245a:	5499      	strb	r1, [r3, r2]
	pDev->pDriver->epConfig(0, USB_EP_TYPE_CONTROL, pDev->deviceStatus.ep0_size);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	2160      	movs	r1, #96	; 0x60
 8002466:	5c52      	ldrb	r2, [r2, r1]
 8002468:	b292      	uxth	r2, r2
 800246a:	2100      	movs	r1, #0
 800246c:	2000      	movs	r0, #0
 800246e:	4798      	blx	r3
	pDev->endpoint[0] = USBD_Process_EP0;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a05      	ldr	r2, [pc, #20]	; (8002488 <USBD_Process_Reset+0x4c>)
 8002474:	635a      	str	r2, [r3, #52]	; 0x34
	pDev->pDriver->setAddress(0);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	2000      	movs	r0, #0
 800247e:	4798      	blx	r3
}
 8002480:	46c0      	nop			; (mov r8, r8)
 8002482:	46bd      	mov	sp, r7
 8002484:	b002      	add	sp, #8
 8002486:	bd80      	pop	{r7, pc}
 8002488:	08002aa9 	.word	0x08002aa9

0800248c <USBD_Set_Address>:

///@brief	callback to set USB device address
///@param	pDev pointer to USB device structure
///@param	pReq pointer to USB control request data
///@return	none
static void USBD_Set_Address (usbd_device *pDev, usbd_control_request *pReq){
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
	pDev->pDriver->setAddress(pReq->wValue);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	8852      	ldrh	r2, [r2, #2]
 80024a0:	b2d2      	uxtb	r2, r2
 80024a2:	0010      	movs	r0, r2
 80024a4:	4798      	blx	r3
	if(pReq->wValue) {
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	885b      	ldrh	r3, [r3, #2]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d004      	beq.n	80024b8 <USBD_Set_Address+0x2c>
		pDev->deviceStatus.device_machine_state = usbd_state_addressed;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2262      	movs	r2, #98	; 0x62
 80024b2:	2103      	movs	r1, #3
 80024b4:	5499      	strb	r1, [r3, r2]
	} else {
		pDev->deviceStatus.device_machine_state = usbd_state_default;
	}
}
 80024b6:	e003      	b.n	80024c0 <USBD_Set_Address+0x34>
		pDev->deviceStatus.device_machine_state = usbd_state_default;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2262      	movs	r2, #98	; 0x62
 80024bc:	2102      	movs	r1, #2
 80024be:	5499      	strb	r1, [r3, r2]
}
 80024c0:	46c0      	nop			; (mov r8, r8)
 80024c2:	46bd      	mov	sp, r7
 80024c4:	b002      	add	sp, #8
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <USBD_Process_Callback>:


///@brief	control transfer completion callback processing
///@param	pDev pointer to USB device structure
///@return	none
static void USBD_Process_Callback (usbd_device *pDev){
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
	if(pDev->reqCompCallback){
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d009      	beq.n	80024ec <USBD_Process_Callback+0x24>
		pDev->reqCompCallback(pDev, pDev->deviceStatus.pDataBuffer);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	0018      	movs	r0, r3
 80024e4:	4790      	blx	r2
		pDev->reqCompCallback = 0;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	609a      	str	r2, [r3, #8]
	}
}
 80024ec:	46c0      	nop			; (mov r8, r8)
 80024ee:	46bd      	mov	sp, r7
 80024f0:	b002      	add	sp, #8
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <USBD_Configure>:

///@brief	set configuration request processing
///@param	pDev pointer to USB device structure
///@param	config configuration number from request
///@return	usbd_ack if successfuly requested
static usbd_status_respond USBD_Configure (usbd_device *pDev, uint8_t config){
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	000a      	movs	r2, r1
 80024fe:	1cfb      	adds	r3, r7, #3
 8002500:	701a      	strb	r2, [r3, #0]
	if(pDev->configCallback){
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d01d      	beq.n	8002546 <USBD_Configure+0x52>
		if(pDev->configCallback(pDev, config) == usbd_acknowledged){
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	1cfa      	adds	r2, r7, #3
 8002510:	7811      	ldrb	r1, [r2, #0]
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	0010      	movs	r0, r2
 8002516:	4798      	blx	r3
 8002518:	0003      	movs	r3, r0
 800251a:	2b01      	cmp	r3, #1
 800251c:	d113      	bne.n	8002546 <USBD_Configure+0x52>
			pDev->deviceStatus.device_configuration = config;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	1cfa      	adds	r2, r7, #3
 8002522:	2161      	movs	r1, #97	; 0x61
 8002524:	7812      	ldrb	r2, [r2, #0]
 8002526:	545a      	strb	r2, [r3, r1]
			if(config){
 8002528:	1cfb      	adds	r3, r7, #3
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d004      	beq.n	800253a <USBD_Configure+0x46>
				pDev->deviceStatus.device_machine_state =  usbd_state_configured;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2262      	movs	r2, #98	; 0x62
 8002534:	2104      	movs	r1, #4
 8002536:	5499      	strb	r1, [r3, r2]
 8002538:	e003      	b.n	8002542 <USBD_Configure+0x4e>
			} else {
				pDev->deviceStatus.device_machine_state = usbd_state_addressed;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2262      	movs	r2, #98	; 0x62
 800253e:	2103      	movs	r1, #3
 8002540:	5499      	strb	r1, [r3, r2]
			}
			return usbd_acknowledged;
 8002542:	2301      	movs	r3, #1
 8002544:	e000      	b.n	8002548 <USBD_Configure+0x54>
		}
	}
	return usbd_failed;
 8002546:	2300      	movs	r3, #0
}
 8002548:	0018      	movs	r0, r3
 800254a:	46bd      	mov	sp, r7
 800254c:	b002      	add	sp, #8
 800254e:	bd80      	pop	{r7, pc}

08002550 <USBD_Process_Device_Request>:

///@brief	standard control request processing for device
///@param	pDev pointer to USB device structure
///@param	pReq pointer to USB control request
///@return	TRUE if the request is handled
static usbd_status_respond USBD_Process_Device_Request (usbd_device *pDev, usbd_control_request *pReq){
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
	switch(pReq->bRequest){
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	785b      	ldrb	r3, [r3, #1]
 800255e:	2b09      	cmp	r3, #9
 8002560:	d853      	bhi.n	800260a <USBD_Process_Device_Request+0xba>
 8002562:	009a      	lsls	r2, r3, #2
 8002564:	4b2d      	ldr	r3, [pc, #180]	; (800261c <USBD_Process_Device_Request+0xcc>)
 8002566:	18d3      	adds	r3, r2, r3
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	469f      	mov	pc, r3
	case USB_STANDARD_CLEAR_FEATURE:
		break;
	case USB_STANDARD_GET_CONFIG:
		pReq->data[0] = pDev->deviceStatus.device_configuration;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2261      	movs	r2, #97	; 0x61
 8002570:	5c9a      	ldrb	r2, [r3, r2]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	721a      	strb	r2, [r3, #8]
		return usbd_acknowledged;
 8002576:	2301      	movs	r3, #1
 8002578:	e04b      	b.n	8002612 <USBD_Process_Device_Request+0xc2>
	case USB_STANDARD_GET_DESCRIPTOR:
		if(pReq->wValue == ((USB_DESCRIPTOR_TYPE_STRING << 8) | INTERNAL_SERIAL_NO_DESCRIPTOR)){
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	885b      	ldrh	r3, [r3, #2]
 800257e:	4a28      	ldr	r2, [pc, #160]	; (8002620 <USBD_Process_Device_Request+0xd0>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d10d      	bne.n	80025a0 <USBD_Process_Device_Request+0x50>
			pDev->deviceStatus.data_count = pDev->pDriver->get_serial_num_desc(pReq->data);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	3208      	adds	r2, #8
 800258e:	0010      	movs	r0, r2
 8002590:	4798      	blx	r3
 8002592:	0003      	movs	r3, r0
 8002594:	0019      	movs	r1, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	225c      	movs	r2, #92	; 0x5c
 800259a:	5299      	strh	r1, [r3, r2]
			return usbd_acknowledged;
 800259c:	2301      	movs	r3, #1
 800259e:	e038      	b.n	8002612 <USBD_Process_Device_Request+0xc2>
		} else {
			if(pDev->descriptorCallback){
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d032      	beq.n	800260e <USBD_Process_Device_Request+0xbe>
				return pDev->descriptorCallback(pReq, &(pDev->deviceStatus.pData), &(pDev->deviceStatus.data_count));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	3258      	adds	r2, #88	; 0x58
 80025b0:	0011      	movs	r1, r2
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	325c      	adds	r2, #92	; 0x5c
 80025b6:	6838      	ldr	r0, [r7, #0]
 80025b8:	4798      	blx	r3
 80025ba:	0003      	movs	r3, r0
 80025bc:	e029      	b.n	8002612 <USBD_Process_Device_Request+0xc2>
			}
		}
		break;
	case USB_STANDARD_GET_STATUS:
		pReq->data[0] = 0;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	2200      	movs	r2, #0
 80025c2:	721a      	strb	r2, [r3, #8]
		pReq->data[1] = 0;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	2200      	movs	r2, #0
 80025c8:	725a      	strb	r2, [r3, #9]
		return usbd_acknowledged;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e021      	b.n	8002612 <USBD_Process_Device_Request+0xc2>
	case USB_STANDARD_SET_ADDRESS:
		if(USBD_GetInfo(pDev) & USBD_HW_ADDRESS_BEFORE_STATUS_OUT){
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	0018      	movs	r0, r3
 80025d2:	f7ff ff26 	bl	8002422 <USBD_GetInfo>
 80025d6:	0003      	movs	r3, r0
 80025d8:	2201      	movs	r2, #1
 80025da:	4013      	ands	r3, r2
 80025dc:	d006      	beq.n	80025ec <USBD_Process_Device_Request+0x9c>
			USBD_Set_Address(pDev, pReq);
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	0011      	movs	r1, r2
 80025e4:	0018      	movs	r0, r3
 80025e6:	f7ff ff51 	bl	800248c <USBD_Set_Address>
 80025ea:	e002      	b.n	80025f2 <USBD_Process_Device_Request+0xa2>
		} else {
			pDev->reqCompCallback = USBD_Set_Address;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a0d      	ldr	r2, [pc, #52]	; (8002624 <USBD_Process_Device_Request+0xd4>)
 80025f0:	609a      	str	r2, [r3, #8]
		}
		return usbd_acknowledged;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e00d      	b.n	8002612 <USBD_Process_Device_Request+0xc2>
	case USB_STANDARD_SET_CONFIG:
		return USBD_Configure(pDev, pReq->wValue);
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	885b      	ldrh	r3, [r3, #2]
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	0011      	movs	r1, r2
 8002600:	0018      	movs	r0, r3
 8002602:	f7ff ff77 	bl	80024f4 <USBD_Configure>
 8002606:	0003      	movs	r3, r0
 8002608:	e003      	b.n	8002612 <USBD_Process_Device_Request+0xc2>
	case USB_STANDARD_SET_DESCRIPTOR:
		break;
	case USB_STANDARD_SET_FEATURE:
		break;
	default:
		break;
 800260a:	46c0      	nop			; (mov r8, r8)
 800260c:	e000      	b.n	8002610 <USBD_Process_Device_Request+0xc0>
		break;
 800260e:	46c0      	nop			; (mov r8, r8)
	}
	return usbd_failed;
 8002610:	2300      	movs	r3, #0
}
 8002612:	0018      	movs	r0, r3
 8002614:	46bd      	mov	sp, r7
 8002616:	b002      	add	sp, #8
 8002618:	bd80      	pop	{r7, pc}
 800261a:	46c0      	nop			; (mov r8, r8)
 800261c:	0800404c 	.word	0x0800404c
 8002620:	000003fe 	.word	0x000003fe
 8002624:	0800248d 	.word	0x0800248d

08002628 <USBD_Process_Interface_Request>:

///@brief	standard control request processing for interface
///@param	pDev pointer to USB device structure
///@param	pReq pointer to USB control request
///@return	TRUE if request is handled
static usbd_status_respond USBD_Process_Interface_Request (usbd_device *pDev, usbd_control_request *pReq){
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
	(void)pDev;
	switch (pReq->bRequest){
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	785b      	ldrb	r3, [r3, #1]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d107      	bne.n	800264a <USBD_Process_Interface_Request+0x22>
	case USB_STANDARD_GET_STATUS:
		pReq->data[0] = 0;
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	2200      	movs	r2, #0
 800263e:	721a      	strb	r2, [r3, #8]
		pReq->data[1] = 0;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	2200      	movs	r2, #0
 8002644:	725a      	strb	r2, [r3, #9]
		return usbd_acknowledged;
 8002646:	2301      	movs	r3, #1
 8002648:	e001      	b.n	800264e <USBD_Process_Interface_Request+0x26>
	default:
		break;
 800264a:	46c0      	nop			; (mov r8, r8)
	}
	return usbd_failed;
 800264c:	2300      	movs	r3, #0
}
 800264e:	0018      	movs	r0, r3
 8002650:	46bd      	mov	sp, r7
 8002652:	b002      	add	sp, #8
 8002654:	bd80      	pop	{r7, pc}

08002656 <USBD_Process_EP_Request>:

///@brief	standard control request processing for endpoint
///@param	pDev pointer to USB device structure
///@param	pReq pointer to USB control request
///@return	TRUE if the request is handled
static usbd_status_respond USBD_Process_EP_Request(usbd_device *pDev, usbd_control_request *pReq){
 8002656:	b580      	push	{r7, lr}
 8002658:	b082      	sub	sp, #8
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
 800265e:	6039      	str	r1, [r7, #0]
	switch (pReq->bRequest){
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	785b      	ldrb	r3, [r3, #1]
 8002664:	2b03      	cmp	r3, #3
 8002666:	d005      	beq.n	8002674 <USBD_Process_EP_Request+0x1e>
 8002668:	dc30      	bgt.n	80026cc <USBD_Process_EP_Request+0x76>
 800266a:	2b00      	cmp	r3, #0
 800266c:	d018      	beq.n	80026a0 <USBD_Process_EP_Request+0x4a>
 800266e:	2b01      	cmp	r3, #1
 8002670:	d00b      	beq.n	800268a <USBD_Process_EP_Request+0x34>
			pReq->data[0] = 0;
		}
		pReq->data[1] = 0;
		return usbd_acknowledged;
	default:
		break;
 8002672:	e02b      	b.n	80026cc <USBD_Process_EP_Request+0x76>
		pDev->pDriver->epSetStall(pReq->wIndex, 1);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	8892      	ldrh	r2, [r2, #4]
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	2101      	movs	r1, #1
 8002682:	0010      	movs	r0, r2
 8002684:	4798      	blx	r3
		return usbd_acknowledged;
 8002686:	2301      	movs	r3, #1
 8002688:	e022      	b.n	80026d0 <USBD_Process_EP_Request+0x7a>
		pDev->pDriver->epSetStall(pReq->wIndex, 0);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	8892      	ldrh	r2, [r2, #4]
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	2100      	movs	r1, #0
 8002698:	0010      	movs	r0, r2
 800269a:	4798      	blx	r3
		return usbd_acknowledged;
 800269c:	2301      	movs	r3, #1
 800269e:	e017      	b.n	80026d0 <USBD_Process_EP_Request+0x7a>
		if(pDev->pDriver->epIsStalled(pReq->wIndex)){
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	8892      	ldrh	r2, [r2, #4]
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	0010      	movs	r0, r2
 80026ae:	4798      	blx	r3
 80026b0:	1e03      	subs	r3, r0, #0
 80026b2:	d003      	beq.n	80026bc <USBD_Process_EP_Request+0x66>
			pReq->data[0] = 1;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	2201      	movs	r2, #1
 80026b8:	721a      	strb	r2, [r3, #8]
 80026ba:	e002      	b.n	80026c2 <USBD_Process_EP_Request+0x6c>
			pReq->data[0] = 0;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	2200      	movs	r2, #0
 80026c0:	721a      	strb	r2, [r3, #8]
		pReq->data[1] = 0;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	2200      	movs	r2, #0
 80026c6:	725a      	strb	r2, [r3, #9]
		return usbd_acknowledged;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e001      	b.n	80026d0 <USBD_Process_EP_Request+0x7a>
		break;
 80026cc:	46c0      	nop			; (mov r8, r8)
	}
	return usbd_failed;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	0018      	movs	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	b002      	add	sp, #8
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <USBD_Process_Request>:

///@brief	processing control request
///@param	pDev pointer to USB device structure
///@param	pReq pointer to USB control request
///@return	TRUE if request is handled
static usbd_status_respond USBD_Process_Request (usbd_device *pDev, usbd_control_request *pReq){
 80026d8:	b5b0      	push	{r4, r5, r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
	if(pDev->controlCallback){
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d011      	beq.n	800270e <USBD_Process_Request+0x36>
		usbd_status_respond resp = pDev->controlCallback(pDev, pReq, &(pDev->reqCompCallback));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	3208      	adds	r2, #8
 80026f2:	250f      	movs	r5, #15
 80026f4:	197c      	adds	r4, r7, r5
 80026f6:	6839      	ldr	r1, [r7, #0]
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	4798      	blx	r3
 80026fc:	0003      	movs	r3, r0
 80026fe:	7023      	strb	r3, [r4, #0]
		if(resp != usbd_failed){
 8002700:	197b      	adds	r3, r7, r5
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d002      	beq.n	800270e <USBD_Process_Request+0x36>
			return resp;
 8002708:	197b      	adds	r3, r7, r5
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	e026      	b.n	800275c <USBD_Process_Request+0x84>
		}
	}
	switch (pReq->bmRequestType & (USB_REQ_TYPE_RECIPIENT | USB_REQ_TYPE_TYPE)){
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	001a      	movs	r2, r3
 8002714:	2363      	movs	r3, #99	; 0x63
 8002716:	4013      	ands	r3, r2
 8002718:	2b02      	cmp	r3, #2
 800271a:	d015      	beq.n	8002748 <USBD_Process_Request+0x70>
 800271c:	dc1c      	bgt.n	8002758 <USBD_Process_Request+0x80>
 800271e:	2b00      	cmp	r3, #0
 8002720:	d002      	beq.n	8002728 <USBD_Process_Request+0x50>
 8002722:	2b01      	cmp	r3, #1
 8002724:	d008      	beq.n	8002738 <USBD_Process_Request+0x60>
	case USB_REQ_TYPE_STANDARD | USB_REQ_TYPE_INTERFACE:
		return USBD_Process_Interface_Request(pDev, pReq);
	case USB_REQ_TYPE_STANDARD | USB_REQ_TYPE_ENDPOINT:
		return USBD_Process_EP_Request(pDev, pReq);
	default:
		break;
 8002726:	e017      	b.n	8002758 <USBD_Process_Request+0x80>
		return USBD_Process_Device_Request(pDev, pReq);
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	0011      	movs	r1, r2
 800272e:	0018      	movs	r0, r3
 8002730:	f7ff ff0e 	bl	8002550 <USBD_Process_Device_Request>
 8002734:	0003      	movs	r3, r0
 8002736:	e011      	b.n	800275c <USBD_Process_Request+0x84>
		return USBD_Process_Interface_Request(pDev, pReq);
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	0011      	movs	r1, r2
 800273e:	0018      	movs	r0, r3
 8002740:	f7ff ff72 	bl	8002628 <USBD_Process_Interface_Request>
 8002744:	0003      	movs	r3, r0
 8002746:	e009      	b.n	800275c <USBD_Process_Request+0x84>
		return USBD_Process_EP_Request(pDev, pReq);
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	0011      	movs	r1, r2
 800274e:	0018      	movs	r0, r3
 8002750:	f7ff ff81 	bl	8002656 <USBD_Process_EP_Request>
 8002754:	0003      	movs	r3, r0
 8002756:	e001      	b.n	800275c <USBD_Process_Request+0x84>
		break;
 8002758:	46c0      	nop			; (mov r8, r8)
	}
	return usbd_failed;
 800275a:	2300      	movs	r3, #0
}
 800275c:	0018      	movs	r0, r3
 800275e:	46bd      	mov	sp, r7
 8002760:	b004      	add	sp, #16
 8002762:	bdb0      	pop	{r4, r5, r7, pc}

08002764 <USBD_Delay_PID>:

///@brief	control endpoint delay
///@param	pDev pointer to USB device structure
///@param	ep endpoint number
///@return	none
static void USBD_Delay_PID (usbd_device *pDev, uint8_t ep){
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	000a      	movs	r2, r1
 800276e:	1cfb      	adds	r3, r7, #3
 8002770:	701a      	strb	r2, [r3, #0]
	pDev->pDriver->epSetStall(ep & 0x7F, 1);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	1cfa      	adds	r2, r7, #3
 800277a:	7812      	ldrb	r2, [r2, #0]
 800277c:	217f      	movs	r1, #127	; 0x7f
 800277e:	400a      	ands	r2, r1
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	2101      	movs	r1, #1
 8002784:	0010      	movs	r0, r2
 8002786:	4798      	blx	r3
	pDev->pDriver->epSetStall(ep | 0x80, 1);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	1cfa      	adds	r2, r7, #3
 8002790:	7812      	ldrb	r2, [r2, #0]
 8002792:	2180      	movs	r1, #128	; 0x80
 8002794:	4249      	negs	r1, r1
 8002796:	430a      	orrs	r2, r1
 8002798:	b2d2      	uxtb	r2, r2
 800279a:	2101      	movs	r1, #1
 800279c:	0010      	movs	r0, r2
 800279e:	4798      	blx	r3
	pDev->deviceStatus.control_state = usbd_ctl_idle;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2263      	movs	r2, #99	; 0x63
 80027a4:	2100      	movs	r1, #0
 80027a6:	5499      	strb	r1, [r3, r2]
}
 80027a8:	46c0      	nop			; (mov r8, r8)
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b002      	add	sp, #8
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <USBD_Process_EP_Tx>:

///@brief	control endpoint TX event processing
///@param	pDev pointer to USB device structure
///@param	ep endpoint number
///@return	none
static void USBD_Process_EP_Tx (usbd_device *pDev, uint8_t ep){
 80027b0:	b590      	push	{r4, r7, lr}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	000a      	movs	r2, r1
 80027ba:	1cfb      	adds	r3, r7, #3
 80027bc:	701a      	strb	r2, [r3, #0]
	int32_t _t = 0;
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
	switch (pDev->deviceStatus.control_state){
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2263      	movs	r2, #99	; 0x63
 80027c6:	5c9b      	ldrb	r3, [r3, r2]
 80027c8:	2b05      	cmp	r3, #5
 80027ca:	d04f      	beq.n	800286c <USBD_Process_EP_Tx+0xbc>
 80027cc:	dc57      	bgt.n	800287e <USBD_Process_EP_Tx+0xce>
 80027ce:	2b03      	cmp	r3, #3
 80027d0:	dc02      	bgt.n	80027d8 <USBD_Process_EP_Tx+0x28>
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	da03      	bge.n	80027de <USBD_Process_EP_Tx+0x2e>
	case usbd_ctl_status_in:
		pDev->deviceStatus.control_state = usbd_ctl_idle;
		USBD_Process_Callback(pDev);
		break;
	default:
		break;
 80027d6:	e052      	b.n	800287e <USBD_Process_EP_Tx+0xce>
	switch (pDev->deviceStatus.control_state){
 80027d8:	2b04      	cmp	r3, #4
 80027da:	d042      	beq.n	8002862 <USBD_Process_EP_Tx+0xb2>
		break;
 80027dc:	e04f      	b.n	800287e <USBD_Process_EP_Tx+0xce>
		_t = _MIN(pDev->deviceStatus.data_count, pDev->deviceStatus.ep0_size);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	225c      	movs	r2, #92	; 0x5c
 80027e2:	5a9a      	ldrh	r2, [r3, r2]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2160      	movs	r1, #96	; 0x60
 80027e8:	5c5b      	ldrb	r3, [r3, r1]
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d203      	bcs.n	80027f8 <USBD_Process_EP_Tx+0x48>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	225c      	movs	r2, #92	; 0x5c
 80027f4:	5a9b      	ldrh	r3, [r3, r2]
 80027f6:	e002      	b.n	80027fe <USBD_Process_EP_Tx+0x4e>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2260      	movs	r2, #96	; 0x60
 80027fc:	5c9b      	ldrb	r3, [r3, r2]
 80027fe:	60fb      	str	r3, [r7, #12]
		pDev->pDriver->epWrite(ep, pDev->deviceStatus.pData, _t);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	69dc      	ldr	r4, [r3, #28]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	b29a      	uxth	r2, r3
 800280e:	1cfb      	adds	r3, r7, #3
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	0018      	movs	r0, r3
 8002814:	47a0      	blx	r4
		pDev->deviceStatus.pData = (uint8_t*)pDev->deviceStatus.pData + _t;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	18d2      	adds	r2, r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	659a      	str	r2, [r3, #88]	; 0x58
		pDev->deviceStatus.data_count -= _t;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	225c      	movs	r2, #92	; 0x5c
 8002826:	5a9a      	ldrh	r2, [r3, r2]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	b29b      	uxth	r3, r3
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	b299      	uxth	r1, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	225c      	movs	r2, #92	; 0x5c
 8002834:	5299      	strh	r1, [r3, r2]
		if(0 != pDev->deviceStatus.data_count){
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	225c      	movs	r2, #92	; 0x5c
 800283a:	5a9b      	ldrh	r3, [r3, r2]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d120      	bne.n	8002882 <USBD_Process_EP_Tx+0xd2>
		if(usbd_ctl_data_tx == pDev->deviceStatus.control_state || _t != pDev->deviceStatus.ep0_size){
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2263      	movs	r2, #99	; 0x63
 8002844:	5c9b      	ldrb	r3, [r3, r2]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d006      	beq.n	8002858 <USBD_Process_EP_Tx+0xa8>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2260      	movs	r2, #96	; 0x60
 800284e:	5c9b      	ldrb	r3, [r3, r2]
 8002850:	001a      	movs	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	4293      	cmp	r3, r2
 8002856:	d016      	beq.n	8002886 <USBD_Process_EP_Tx+0xd6>
			pDev->deviceStatus.control_state = usbd_ctl_data_last;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2263      	movs	r2, #99	; 0x63
 800285c:	2104      	movs	r1, #4
 800285e:	5499      	strb	r1, [r3, r2]
		break;
 8002860:	e011      	b.n	8002886 <USBD_Process_EP_Tx+0xd6>
		pDev->deviceStatus.control_state = usbd_ctl_status_out;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2263      	movs	r2, #99	; 0x63
 8002866:	2106      	movs	r1, #6
 8002868:	5499      	strb	r1, [r3, r2]
		break;
 800286a:	e00d      	b.n	8002888 <USBD_Process_EP_Tx+0xd8>
		pDev->deviceStatus.control_state = usbd_ctl_idle;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2263      	movs	r2, #99	; 0x63
 8002870:	2100      	movs	r1, #0
 8002872:	5499      	strb	r1, [r3, r2]
		USBD_Process_Callback(pDev);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	0018      	movs	r0, r3
 8002878:	f7ff fe26 	bl	80024c8 <USBD_Process_Callback>
		break;
 800287c:	e004      	b.n	8002888 <USBD_Process_EP_Tx+0xd8>
		break;
 800287e:	46c0      	nop			; (mov r8, r8)
 8002880:	e002      	b.n	8002888 <USBD_Process_EP_Tx+0xd8>
			break;
 8002882:	46c0      	nop			; (mov r8, r8)
 8002884:	e000      	b.n	8002888 <USBD_Process_EP_Tx+0xd8>
		break;
 8002886:	46c0      	nop			; (mov r8, r8)
	}
}
 8002888:	46c0      	nop			; (mov r8, r8)
 800288a:	46bd      	mov	sp, r7
 800288c:	b005      	add	sp, #20
 800288e:	bd90      	pop	{r4, r7, pc}

08002890 <USBD_Process_EP_Rx>:

///@brief	control endpoint RX event processing
///@param	pDev pointer to USB device structure
///@param	ep endpoint number
///@return 	none
static void USBD_Process_EP_Rx (usbd_device *pDev, uint8_t ep){
 8002890:	b590      	push	{r4, r7, lr}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	000a      	movs	r2, r1
 800289a:	1cfb      	adds	r3, r7, #3
 800289c:	701a      	strb	r2, [r3, #0]
	uint16_t _t = 0;
 800289e:	230e      	movs	r3, #14
 80028a0:	18fb      	adds	r3, r7, r3
 80028a2:	2200      	movs	r2, #0
 80028a4:	801a      	strh	r2, [r3, #0]
	usbd_control_request *const pReq = pDev->deviceStatus.pDataBuffer;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028aa:	60bb      	str	r3, [r7, #8]
	switch (pDev->deviceStatus.control_state){
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2263      	movs	r2, #99	; 0x63
 80028b0:	5c9b      	ldrb	r3, [r3, r2]
 80028b2:	2b06      	cmp	r3, #6
 80028b4:	d100      	bne.n	80028b8 <USBD_Process_EP_Rx+0x28>
 80028b6:	e07d      	b.n	80029b4 <USBD_Process_EP_Rx+0x124>
 80028b8:	dd00      	ble.n	80028bc <USBD_Process_EP_Rx+0x2c>
 80028ba:	e08c      	b.n	80029d6 <USBD_Process_EP_Rx+0x146>
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d002      	beq.n	80028c6 <USBD_Process_EP_Rx+0x36>
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d03e      	beq.n	8002942 <USBD_Process_EP_Rx+0xb2>
 80028c4:	e087      	b.n	80029d6 <USBD_Process_EP_Rx+0x146>
	case usbd_ctl_idle:
		if(0x08 != pDev->pDriver->epRead(ep, pReq, pDev->deviceStatus.data_max_size)){
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	215e      	movs	r1, #94	; 0x5e
 80028d0:	5a54      	ldrh	r4, [r2, r1]
 80028d2:	68b9      	ldr	r1, [r7, #8]
 80028d4:	1cfa      	adds	r2, r7, #3
 80028d6:	7810      	ldrb	r0, [r2, #0]
 80028d8:	0022      	movs	r2, r4
 80028da:	4798      	blx	r3
 80028dc:	0003      	movs	r3, r0
 80028de:	2b08      	cmp	r3, #8
 80028e0:	d007      	beq.n	80028f2 <USBD_Process_EP_Rx+0x62>
			USBD_Delay_PID(pDev, ep);
 80028e2:	1cfb      	adds	r3, r7, #3
 80028e4:	781a      	ldrb	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	0011      	movs	r1, r2
 80028ea:	0018      	movs	r0, r3
 80028ec:	f7ff ff3a 	bl	8002764 <USBD_Delay_PID>
			return;
 80028f0:	e0d7      	b.n	8002aa2 <USBD_Process_EP_Rx+0x212>
		}
		pDev->deviceStatus.pData = pReq->data;
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	3308      	adds	r3, #8
 80028f6:	001a      	movs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	659a      	str	r2, [r3, #88]	; 0x58
		pDev->deviceStatus.data_count = pReq->wLength;
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	88d9      	ldrh	r1, [r3, #6]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	225c      	movs	r2, #92	; 0x5c
 8002904:	5299      	strh	r1, [r3, r2]
		if((pReq->bmRequestType & USB_REQ_TYPE_DEVTOHOST) || (0 == pReq->wLength)){
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	b25b      	sxtb	r3, r3
 800290c:	2b00      	cmp	r3, #0
 800290e:	da00      	bge.n	8002912 <USBD_Process_EP_Rx+0x82>
 8002910:	e069      	b.n	80029e6 <USBD_Process_EP_Rx+0x156>
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	88db      	ldrh	r3, [r3, #6]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d065      	beq.n	80029e6 <USBD_Process_EP_Rx+0x156>
			break;
		}
		if(pReq->wLength > pDev->deviceStatus.data_max_size){
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	88da      	ldrh	r2, [r3, #6]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	215e      	movs	r1, #94	; 0x5e
 8002922:	5a5b      	ldrh	r3, [r3, r1]
 8002924:	429a      	cmp	r2, r3
 8002926:	d907      	bls.n	8002938 <USBD_Process_EP_Rx+0xa8>
			USBD_Delay_PID(pDev, ep);
 8002928:	1cfb      	adds	r3, r7, #3
 800292a:	781a      	ldrb	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	0011      	movs	r1, r2
 8002930:	0018      	movs	r0, r3
 8002932:	f7ff ff17 	bl	8002764 <USBD_Delay_PID>
			return;
 8002936:	e0b4      	b.n	8002aa2 <USBD_Process_EP_Rx+0x212>
		}
		pDev->deviceStatus.control_state = usbd_ctl_data_rx;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2263      	movs	r2, #99	; 0x63
 800293c:	2101      	movs	r1, #1
 800293e:	5499      	strb	r1, [r3, r2]
		return;
 8002940:	e0af      	b.n	8002aa2 <USBD_Process_EP_Rx+0x212>
	case usbd_ctl_data_rx:
		_t = pDev->pDriver->epRead(ep, pDev->deviceStatus.pData, pDev->deviceStatus.data_count);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	699c      	ldr	r4, [r3, #24]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	225c      	movs	r2, #92	; 0x5c
 8002950:	5a9a      	ldrh	r2, [r3, r2]
 8002952:	1cfb      	adds	r3, r7, #3
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	0018      	movs	r0, r3
 8002958:	47a0      	blx	r4
 800295a:	0002      	movs	r2, r0
 800295c:	210e      	movs	r1, #14
 800295e:	187b      	adds	r3, r7, r1
 8002960:	801a      	strh	r2, [r3, #0]
		if(pDev->deviceStatus.data_count < _t){
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	225c      	movs	r2, #92	; 0x5c
 8002966:	5a9b      	ldrh	r3, [r3, r2]
 8002968:	187a      	adds	r2, r7, r1
 800296a:	8812      	ldrh	r2, [r2, #0]
 800296c:	429a      	cmp	r2, r3
 800296e:	d907      	bls.n	8002980 <USBD_Process_EP_Rx+0xf0>
			USBD_Delay_PID(pDev, ep);
 8002970:	1cfb      	adds	r3, r7, #3
 8002972:	781a      	ldrb	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	0011      	movs	r1, r2
 8002978:	0018      	movs	r0, r3
 800297a:	f7ff fef3 	bl	8002764 <USBD_Delay_PID>
			return;
 800297e:	e090      	b.n	8002aa2 <USBD_Process_EP_Rx+0x212>
		} else if (pDev->deviceStatus.data_count != _t){
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	225c      	movs	r2, #92	; 0x5c
 8002984:	5a9b      	ldrh	r3, [r3, r2]
 8002986:	200e      	movs	r0, #14
 8002988:	183a      	adds	r2, r7, r0
 800298a:	8812      	ldrh	r2, [r2, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d02c      	beq.n	80029ea <USBD_Process_EP_Rx+0x15a>
			pDev->deviceStatus.data_count -= _t;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	225c      	movs	r2, #92	; 0x5c
 8002994:	5a9a      	ldrh	r2, [r3, r2]
 8002996:	183b      	adds	r3, r7, r0
 8002998:	881b      	ldrh	r3, [r3, #0]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	b299      	uxth	r1, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	225c      	movs	r2, #92	; 0x5c
 80029a2:	5299      	strh	r1, [r3, r2]
			pDev->deviceStatus.pData = (uint8_t*)pDev->deviceStatus.pData + _t;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80029a8:	183b      	adds	r3, r7, r0
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	18d2      	adds	r2, r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	659a      	str	r2, [r3, #88]	; 0x58
			return;
 80029b2:	e076      	b.n	8002aa2 <USBD_Process_EP_Rx+0x212>
		}
		break;
	case usbd_ctl_status_out:
		pDev->pDriver->epRead(ep, 0, 0);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	1cfa      	adds	r2, r7, #3
 80029bc:	7810      	ldrb	r0, [r2, #0]
 80029be:	2200      	movs	r2, #0
 80029c0:	2100      	movs	r1, #0
 80029c2:	4798      	blx	r3
		pDev->deviceStatus.control_state = usbd_ctl_idle;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2263      	movs	r2, #99	; 0x63
 80029c8:	2100      	movs	r1, #0
 80029ca:	5499      	strb	r1, [r3, r2]
		USBD_Process_Callback(pDev);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	0018      	movs	r0, r3
 80029d0:	f7ff fd7a 	bl	80024c8 <USBD_Process_Callback>
		return;
 80029d4:	e065      	b.n	8002aa2 <USBD_Process_EP_Rx+0x212>
	default:
		USBD_Delay_PID(pDev, ep);
 80029d6:	1cfb      	adds	r3, r7, #3
 80029d8:	781a      	ldrb	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	0011      	movs	r1, r2
 80029de:	0018      	movs	r0, r3
 80029e0:	f7ff fec0 	bl	8002764 <USBD_Delay_PID>
		return;
 80029e4:	e05d      	b.n	8002aa2 <USBD_Process_EP_Rx+0x212>
	}
	pDev->deviceStatus.pData = pReq->data;
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	e000      	b.n	80029ec <USBD_Process_EP_Rx+0x15c>
		break;
 80029ea:	46c0      	nop			; (mov r8, r8)
	pDev->deviceStatus.pData = pReq->data;
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	3308      	adds	r3, #8
 80029f0:	001a      	movs	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	659a      	str	r2, [r3, #88]	; 0x58
	pDev->deviceStatus.data_count = pDev->deviceStatus.data_max_size;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	225e      	movs	r2, #94	; 0x5e
 80029fa:	5a99      	ldrh	r1, [r3, r2]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	225c      	movs	r2, #92	; 0x5c
 8002a00:	5299      	strh	r1, [r3, r2]
	switch(USBD_Process_Request(pDev, pReq)){
 8002a02:	68ba      	ldr	r2, [r7, #8]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	0011      	movs	r1, r2
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f7ff fe65 	bl	80026d8 <USBD_Process_Request>
 8002a0e:	0003      	movs	r3, r0
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d002      	beq.n	8002a1a <USBD_Process_EP_Rx+0x18a>
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d037      	beq.n	8002a88 <USBD_Process_EP_Rx+0x1f8>
 8002a18:	e03b      	b.n	8002a92 <USBD_Process_EP_Rx+0x202>
	case usbd_acknowledged:
		if(pReq->bmRequestType & USB_REQ_TYPE_DEVTOHOST){
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	b25b      	sxtb	r3, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	da20      	bge.n	8002a66 <USBD_Process_EP_Rx+0x1d6>
			if(pDev->deviceStatus.data_count >= pReq->wLength){
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	225c      	movs	r2, #92	; 0x5c
 8002a28:	5a9a      	ldrh	r2, [r3, r2]
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	88db      	ldrh	r3, [r3, #6]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d309      	bcc.n	8002a46 <USBD_Process_EP_Rx+0x1b6>
				pDev->deviceStatus.data_count = pReq->wLength;
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	88d9      	ldrh	r1, [r3, #6]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	225c      	movs	r2, #92	; 0x5c
 8002a3a:	5299      	strh	r1, [r3, r2]
				pDev->deviceStatus.control_state = usbd_ctl_data_tx;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2263      	movs	r2, #99	; 0x63
 8002a40:	2102      	movs	r1, #2
 8002a42:	5499      	strb	r1, [r3, r2]
 8002a44:	e003      	b.n	8002a4e <USBD_Process_EP_Rx+0x1be>
			} else {
				pDev->deviceStatus.control_state = usbd_ctl_data_tx_zero_len_packet;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2263      	movs	r2, #99	; 0x63
 8002a4a:	2103      	movs	r1, #3
 8002a4c:	5499      	strb	r1, [r3, r2]
			}
			USBD_Process_EP_Tx(pDev, ep | 0x80);
 8002a4e:	1cfb      	adds	r3, r7, #3
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2280      	movs	r2, #128	; 0x80
 8002a54:	4252      	negs	r2, r2
 8002a56:	4313      	orrs	r3, r2
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	0011      	movs	r1, r2
 8002a5e:	0018      	movs	r0, r3
 8002a60:	f7ff fea6 	bl	80027b0 <USBD_Process_EP_Tx>
		} else {
			pDev->pDriver->epWrite(ep | 0x80, 0, 0);
			pDev->deviceStatus.control_state = usbd_ctl_status_in;
		}
		break;
 8002a64:	e01d      	b.n	8002aa2 <USBD_Process_EP_Rx+0x212>
			pDev->pDriver->epWrite(ep | 0x80, 0, 0);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	69db      	ldr	r3, [r3, #28]
 8002a6c:	1cfa      	adds	r2, r7, #3
 8002a6e:	7812      	ldrb	r2, [r2, #0]
 8002a70:	2180      	movs	r1, #128	; 0x80
 8002a72:	4249      	negs	r1, r1
 8002a74:	430a      	orrs	r2, r1
 8002a76:	b2d0      	uxtb	r0, r2
 8002a78:	2200      	movs	r2, #0
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	4798      	blx	r3
			pDev->deviceStatus.control_state = usbd_ctl_status_in;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2263      	movs	r2, #99	; 0x63
 8002a82:	2105      	movs	r1, #5
 8002a84:	5499      	strb	r1, [r3, r2]
		break;
 8002a86:	e00c      	b.n	8002aa2 <USBD_Process_EP_Rx+0x212>
	case usbd_not_acknowledged:
		pDev->deviceStatus.control_state = usbd_ctl_status_in;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2263      	movs	r2, #99	; 0x63
 8002a8c:	2105      	movs	r1, #5
 8002a8e:	5499      	strb	r1, [r3, r2]
		break;
 8002a90:	e007      	b.n	8002aa2 <USBD_Process_EP_Rx+0x212>
	default:
		USBD_Delay_PID(pDev, ep);
 8002a92:	1cfb      	adds	r3, r7, #3
 8002a94:	781a      	ldrb	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	0011      	movs	r1, r2
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	f7ff fe62 	bl	8002764 <USBD_Delay_PID>
		break;
 8002aa0:	46c0      	nop			; (mov r8, r8)
	}
}
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	b005      	add	sp, #20
 8002aa6:	bd90      	pop	{r4, r7, pc}

08002aa8 <USBD_Process_EP0>:
///@brief	control endpoint 0 event processing callback
///@param	pDev pointer to USB device structure
///@param 	event endpoint event
///@param	ep endpoint number
///@return	none
static void USBD_Process_EP0 (usbd_device *pDev, uint8_t event, uint8_t ep){
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	0008      	movs	r0, r1
 8002ab2:	0011      	movs	r1, r2
 8002ab4:	1cfb      	adds	r3, r7, #3
 8002ab6:	1c02      	adds	r2, r0, #0
 8002ab8:	701a      	strb	r2, [r3, #0]
 8002aba:	1cbb      	adds	r3, r7, #2
 8002abc:	1c0a      	adds	r2, r1, #0
 8002abe:	701a      	strb	r2, [r3, #0]
	switch (event){
 8002ac0:	1cfb      	adds	r3, r7, #3
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b06      	cmp	r3, #6
 8002ac6:	d005      	beq.n	8002ad4 <USBD_Process_EP0+0x2c>
 8002ac8:	dc1b      	bgt.n	8002b02 <USBD_Process_EP0+0x5a>
 8002aca:	2b04      	cmp	r3, #4
 8002acc:	d011      	beq.n	8002af2 <USBD_Process_EP0+0x4a>
 8002ace:	2b05      	cmp	r3, #5
 8002ad0:	d007      	beq.n	8002ae2 <USBD_Process_EP0+0x3a>
		break;
	case USBD_EVENT_PACKET_TX:
		USBD_Process_EP_Tx(pDev, ep);
		break;
	default:
		break;
 8002ad2:	e016      	b.n	8002b02 <USBD_Process_EP0+0x5a>
		pDev->deviceStatus.control_state = usbd_ctl_idle;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2263      	movs	r2, #99	; 0x63
 8002ad8:	2100      	movs	r1, #0
 8002ada:	5499      	strb	r1, [r3, r2]
		pDev->reqCompCallback = 0;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	609a      	str	r2, [r3, #8]
		USBD_Process_EP_Rx(pDev, ep);
 8002ae2:	1cbb      	adds	r3, r7, #2
 8002ae4:	781a      	ldrb	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	0011      	movs	r1, r2
 8002aea:	0018      	movs	r0, r3
 8002aec:	f7ff fed0 	bl	8002890 <USBD_Process_EP_Rx>
		break;
 8002af0:	e008      	b.n	8002b04 <USBD_Process_EP0+0x5c>
		USBD_Process_EP_Tx(pDev, ep);
 8002af2:	1cbb      	adds	r3, r7, #2
 8002af4:	781a      	ldrb	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	0011      	movs	r1, r2
 8002afa:	0018      	movs	r0, r3
 8002afc:	f7ff fe58 	bl	80027b0 <USBD_Process_EP_Tx>
		break;
 8002b00:	e000      	b.n	8002b04 <USBD_Process_EP0+0x5c>
		break;
 8002b02:	46c0      	nop			; (mov r8, r8)
	}
}
 8002b04:	46c0      	nop			; (mov r8, r8)
 8002b06:	46bd      	mov	sp, r7
 8002b08:	b002      	add	sp, #8
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <USBD_Process_Event>:
///@brief	general event processing callback
///@param	pDev pointer to USB device structure
///@param	event endpoint event
///@param	ep endpoint number
///@return	none
static void USBD_Process_Event (usbd_device *pDev, uint8_t event, uint8_t ep){
 8002b0c:	b590      	push	{r4, r7, lr}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	0008      	movs	r0, r1
 8002b16:	0011      	movs	r1, r2
 8002b18:	1cfb      	adds	r3, r7, #3
 8002b1a:	1c02      	adds	r2, r0, #0
 8002b1c:	701a      	strb	r2, [r3, #0]
 8002b1e:	1cbb      	adds	r3, r7, #2
 8002b20:	1c0a      	adds	r2, r1, #0
 8002b22:	701a      	strb	r2, [r3, #0]
	switch (event){
 8002b24:	1cfb      	adds	r3, r7, #3
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d004      	beq.n	8002b36 <USBD_Process_Event+0x2a>
 8002b2c:	db26      	blt.n	8002b7c <USBD_Process_Event+0x70>
 8002b2e:	3b04      	subs	r3, #4
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d823      	bhi.n	8002b7c <USBD_Process_Event+0x70>
 8002b34:	e004      	b.n	8002b40 <USBD_Process_Event+0x34>
	case USBD_EVENT_RESET:
		USBD_Process_Reset(pDev);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	0018      	movs	r0, r3
 8002b3a:	f7ff fc7f 	bl	800243c <USBD_Process_Reset>
		break;
 8002b3e:	e020      	b.n	8002b82 <USBD_Process_Event+0x76>
	case USBD_EVENT_PACKET_RX:
	case USBD_EVENT_PACKET_TX:
	case USBD_EVENT_PACKET_SETUP:
		if(pDev->endpoint[ep & 0x07]){
 8002b40:	1cbb      	adds	r3, r7, #2
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2207      	movs	r2, #7
 8002b46:	4013      	ands	r3, r2
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	330c      	adds	r3, #12
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	18d3      	adds	r3, r2, r3
 8002b50:	3304      	adds	r3, #4
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d013      	beq.n	8002b80 <USBD_Process_Event+0x74>
			pDev->endpoint[ep & 0x07] (pDev, event, ep);
 8002b58:	1cbb      	adds	r3, r7, #2
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2207      	movs	r2, #7
 8002b5e:	4013      	ands	r3, r2
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	330c      	adds	r3, #12
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	18d3      	adds	r3, r2, r3
 8002b68:	3304      	adds	r3, #4
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	1cba      	adds	r2, r7, #2
 8002b6e:	7814      	ldrb	r4, [r2, #0]
 8002b70:	1cfa      	adds	r2, r7, #3
 8002b72:	7811      	ldrb	r1, [r2, #0]
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	0022      	movs	r2, r4
 8002b78:	4798      	blx	r3
		}
		break;
 8002b7a:	e001      	b.n	8002b80 <USBD_Process_Event+0x74>
	default:
		break;
 8002b7c:	46c0      	nop			; (mov r8, r8)
 8002b7e:	e000      	b.n	8002b82 <USBD_Process_Event+0x76>
		break;
 8002b80:	46c0      	nop			; (mov r8, r8)
	}
	if(pDev->events[event]){
 8002b82:	1cfb      	adds	r3, r7, #3
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	3304      	adds	r3, #4
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	18d3      	adds	r3, r2, r3
 8002b8e:	3304      	adds	r3, #4
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00e      	beq.n	8002bb4 <USBD_Process_Event+0xa8>
		pDev->events[event] (pDev, event, ep);
 8002b96:	1cfb      	adds	r3, r7, #3
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	18d3      	adds	r3, r2, r3
 8002ba2:	3304      	adds	r3, #4
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	1cba      	adds	r2, r7, #2
 8002ba8:	7814      	ldrb	r4, [r2, #0]
 8002baa:	1cfa      	adds	r2, r7, #3
 8002bac:	7811      	ldrb	r1, [r2, #0]
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	0022      	movs	r2, r4
 8002bb2:	4798      	blx	r3
	}
}
 8002bb4:	46c0      	nop			; (mov r8, r8)
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	b003      	add	sp, #12
 8002bba:	bd90      	pop	{r4, r7, pc}

08002bbc <USBD_Poll>:


__attribute__((externally_visible)) void USBD_Poll(usbd_device *pDev){
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
		pDev->pDriver->poll(pDev, USBD_Process_Event);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bca:	4904      	ldr	r1, [pc, #16]	; (8002bdc <USBD_Poll+0x20>)
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	0010      	movs	r0, r2
 8002bd0:	4798      	blx	r3
	}
 8002bd2:	46c0      	nop			; (mov r8, r8)
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	b002      	add	sp, #8
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	46c0      	nop			; (mov r8, r8)
 8002bdc:	08002b0d 	.word	0x08002b0d

08002be0 <EPT>:


///@brief	helper function for the buffer descriptor table
///@param	ep endpoint number
///@return	pointer to the buffer descriptor table
inline static pma_table *EPT(uint8_t ep){
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	0002      	movs	r2, r0
 8002be8:	1dfb      	adds	r3, r7, #7
 8002bea:	701a      	strb	r2, [r3, #0]
	return (pma_table*)((ep & 0x07) * 8 + USB_PMAADDR);
 8002bec:	1dfb      	adds	r3, r7, #7
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2207      	movs	r2, #7
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	4a03      	ldr	r2, [pc, #12]	; (8002c04 <EPT+0x24>)
 8002bf8:	4694      	mov	ip, r2
 8002bfa:	4463      	add	r3, ip
}
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	b002      	add	sp, #8
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40006000 	.word	0x40006000

08002c08 <EPR>:


///@brief	helper function for the endpoint control register
///@param	ep endpoint number
///@return	pointer to the endpoint control register
inline static volatile uint16_t *EPR(uint8_t ep){
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	0002      	movs	r2, r0
 8002c10:	1dfb      	adds	r3, r7, #7
 8002c12:	701a      	strb	r2, [r3, #0]
	return (uint16_t*)((ep & 0x07) * 4 + USB_BASE);
 8002c14:	1dfb      	adds	r3, r7, #7
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2207      	movs	r2, #7
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4a03      	ldr	r2, [pc, #12]	; (8002c2c <EPR+0x24>)
 8002c20:	4694      	mov	ip, r2
 8002c22:	4463      	add	r3, ip
}
 8002c24:	0018      	movs	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	b002      	add	sp, #8
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40005c00 	.word	0x40005c00

08002c30 <get_next_pma>:

///@brief	helper function to find the next available PMA buffer
///@param	sz
///@return	buffer address for PMA table in uint16_t format
///@note	The PMA buffer grows from top to bottom like a stack.
static uint16_t get_next_pma(uint16_t sz){
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	0002      	movs	r2, r0
 8002c38:	1dbb      	adds	r3, r7, #6
 8002c3a:	801a      	strh	r2, [r3, #0]
	unsigned _result = USB_PMA_SIZE;
 8002c3c:	2380      	movs	r3, #128	; 0x80
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < 8; i++){
 8002c42:	2313      	movs	r3, #19
 8002c44:	18fb      	adds	r3, r7, r3
 8002c46:	2200      	movs	r2, #0
 8002c48:	701a      	strb	r2, [r3, #0]
 8002c4a:	e027      	b.n	8002c9c <get_next_pma+0x6c>
		pma_table *pTbl = EPT(i);
 8002c4c:	2313      	movs	r3, #19
 8002c4e:	18fb      	adds	r3, r7, r3
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	0018      	movs	r0, r3
 8002c54:	f7ff ffc4 	bl	8002be0 <EPT>
 8002c58:	0003      	movs	r3, r0
 8002c5a:	60fb      	str	r3, [r7, #12]
		if((pTbl->rx.address) && (pTbl->rx.address < _result)){
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	889b      	ldrh	r3, [r3, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d008      	beq.n	8002c76 <get_next_pma+0x46>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	889b      	ldrh	r3, [r3, #4]
 8002c68:	001a      	movs	r2, r3
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d902      	bls.n	8002c76 <get_next_pma+0x46>
			_result = pTbl->rx.address;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	889b      	ldrh	r3, [r3, #4]
 8002c74:	617b      	str	r3, [r7, #20]
		}
		if((pTbl->tx.address) && (pTbl->tx.address < _result)){
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	881b      	ldrh	r3, [r3, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d008      	beq.n	8002c90 <get_next_pma+0x60>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	881b      	ldrh	r3, [r3, #0]
 8002c82:	001a      	movs	r2, r3
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d902      	bls.n	8002c90 <get_next_pma+0x60>
			_result = pTbl->tx.address;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	881b      	ldrh	r3, [r3, #0]
 8002c8e:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < 8; i++){
 8002c90:	2113      	movs	r1, #19
 8002c92:	187b      	adds	r3, r7, r1
 8002c94:	781a      	ldrb	r2, [r3, #0]
 8002c96:	187b      	adds	r3, r7, r1
 8002c98:	3201      	adds	r2, #1
 8002c9a:	701a      	strb	r2, [r3, #0]
 8002c9c:	2313      	movs	r3, #19
 8002c9e:	18fb      	adds	r3, r7, r3
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b07      	cmp	r3, #7
 8002ca4:	d9d2      	bls.n	8002c4c <get_next_pma+0x1c>
		}
	}
	return (_result < (0x020 + sz)) ? 0 : (_result - sz);
 8002ca6:	1dbb      	adds	r3, r7, #6
 8002ca8:	881b      	ldrh	r3, [r3, #0]
 8002caa:	3320      	adds	r3, #32
 8002cac:	001a      	movs	r2, r3
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d306      	bcc.n	8002cc2 <get_next_pma+0x92>
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	1dbb      	adds	r3, r7, #6
 8002cba:	881b      	ldrh	r3, [r3, #0]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	e000      	b.n	8002cc4 <get_next_pma+0x94>
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	b006      	add	sp, #24
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <getInfo>:


///@brief	function to get the information if the USB's device register is enabled
///@param	none
///@return	status value as an unsigned integer value
uint32_t getInfo(void){
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
	if(!(RCC->APB1ENR & RCC_APB1ENR_USBEN)){
 8002cd0:	4b0a      	ldr	r3, [pc, #40]	; (8002cfc <getInfo+0x30>)
 8002cd2:	69da      	ldr	r2, [r3, #28]
 8002cd4:	2380      	movs	r3, #128	; 0x80
 8002cd6:	041b      	lsls	r3, r3, #16
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d101      	bne.n	8002ce0 <getInfo+0x14>
		return STATUS_VAL(0);
 8002cdc:	2302      	movs	r3, #2
 8002cde:	e009      	b.n	8002cf4 <getInfo+0x28>
	}
	if(USB->BCDR & USB_BCDR_DPPU){
 8002ce0:	4a07      	ldr	r2, [pc, #28]	; (8002d00 <getInfo+0x34>)
 8002ce2:	2358      	movs	r3, #88	; 0x58
 8002ce4:	5ad3      	ldrh	r3, [r2, r3]
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	b21b      	sxth	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	da01      	bge.n	8002cf2 <getInfo+0x26>
		return STATUS_VAL(USBD_HW_DEVICE_ENABLE | USBD_HW_SPEED_FULL_SPEED);
 8002cee:	232a      	movs	r3, #42	; 0x2a
 8002cf0:	e000      	b.n	8002cf4 <getInfo+0x28>
	}
	return STATUS_VAL(USBD_HW_DEVICE_ENABLE);
 8002cf2:	230a      	movs	r3, #10
}
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	40005c00 	.word	0x40005c00

08002d04 <ep_setStall>:

///@brief	function to set a stall to indicate that the endpoint has halted
///@param	ep endpint number
///@param	stall flag, whether the endpoint is already stalled or not
///@return	none
void ep_setStall(uint8_t ep, bool stall){
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	0002      	movs	r2, r0
 8002d0c:	1dfb      	adds	r3, r7, #7
 8002d0e:	701a      	strb	r2, [r3, #0]
 8002d10:	1dbb      	adds	r3, r7, #6
 8002d12:	1c0a      	adds	r2, r1, #0
 8002d14:	701a      	strb	r2, [r3, #0]
	volatile uint16_t *pReg = EPR(ep);
 8002d16:	1dfb      	adds	r3, r7, #7
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	0018      	movs	r0, r3
 8002d1c:	f7ff ff74 	bl	8002c08 <EPR>
 8002d20:	0003      	movs	r3, r0
 8002d22:	60fb      	str	r3, [r7, #12]
	if(USB_EP_ISOCHRONOUS == (*pReg & USB_EP_T_FIELD)){
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	881b      	ldrh	r3, [r3, #0]
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	001a      	movs	r2, r3
 8002d2c:	23c0      	movs	r3, #192	; 0xc0
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	401a      	ands	r2, r3
 8002d32:	2380      	movs	r3, #128	; 0x80
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d100      	bne.n	8002d3c <ep_setStall+0x38>
 8002d3a:	e07d      	b.n	8002e38 <ep_setStall+0x134>
		return;
	}
	if (ep & 0x80){
 8002d3c:	1dfb      	adds	r3, r7, #7
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	b25b      	sxtb	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	da3a      	bge.n	8002dbc <ep_setStall+0xb8>
		if(USB_EP_TX_DIS == (*pReg & USB_EPTX_STAT)){
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	881b      	ldrh	r3, [r3, #0]
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	001a      	movs	r2, r3
 8002d4e:	2330      	movs	r3, #48	; 0x30
 8002d50:	4013      	ands	r3, r2
 8002d52:	d100      	bne.n	8002d56 <ep_setStall+0x52>
 8002d54:	e072      	b.n	8002e3c <ep_setStall+0x138>
			return;
		}
		if(stall){
 8002d56:	1dbb      	adds	r3, r7, #6
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00b      	beq.n	8002d76 <ep_setStall+0x72>
			EP_TX_STALL(pReg);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	881b      	ldrh	r3, [r3, #0]
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	2210      	movs	r2, #16
 8002d66:	4053      	eors	r3, r2
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	4a37      	ldr	r2, [pc, #220]	; (8002e48 <ep_setStall+0x144>)
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	801a      	strh	r2, [r3, #0]
 8002d74:	e065      	b.n	8002e42 <ep_setStall+0x13e>
		} else {
			if((USB_EP_KIND | USB_EP_BULK) == (*pReg & (USB_EP_T_FIELD | USB_EP_KIND))){
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	881b      	ldrh	r3, [r3, #0]
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	001a      	movs	r2, r3
 8002d7e:	23e0      	movs	r3, #224	; 0xe0
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	401a      	ands	r2, r3
 8002d84:	2380      	movs	r3, #128	; 0x80
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d10b      	bne.n	8002da4 <ep_setStall+0xa0>
				EP_DTX_UNSTALL(pReg);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	881b      	ldrh	r3, [r3, #0]
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	2230      	movs	r2, #48	; 0x30
 8002d94:	4053      	eors	r3, r2
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	4a2c      	ldr	r2, [pc, #176]	; (8002e4c <ep_setStall+0x148>)
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	801a      	strh	r2, [r3, #0]
 8002da2:	e04e      	b.n	8002e42 <ep_setStall+0x13e>
			} else {
				EP_TX_UNSTALL(pReg);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	881b      	ldrh	r3, [r3, #0]
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	2220      	movs	r2, #32
 8002dac:	4053      	eors	r3, r2
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	4a27      	ldr	r2, [pc, #156]	; (8002e50 <ep_setStall+0x14c>)
 8002db2:	4013      	ands	r3, r2
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	801a      	strh	r2, [r3, #0]
 8002dba:	e042      	b.n	8002e42 <ep_setStall+0x13e>
			}
		}
	} else {
		if(USB_EP_RX_DIS == (*pReg & USB_EPRX_STAT)){
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	881b      	ldrh	r3, [r3, #0]
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	001a      	movs	r2, r3
 8002dc4:	23c0      	movs	r3, #192	; 0xc0
 8002dc6:	019b      	lsls	r3, r3, #6
 8002dc8:	4013      	ands	r3, r2
 8002dca:	d039      	beq.n	8002e40 <ep_setStall+0x13c>
			return;
		}
		if(stall){
 8002dcc:	1dbb      	adds	r3, r7, #6
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00c      	beq.n	8002dee <ep_setStall+0xea>
			EP_RX_STALL(pReg);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	881b      	ldrh	r3, [r3, #0]
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	2280      	movs	r2, #128	; 0x80
 8002ddc:	0152      	lsls	r2, r2, #5
 8002dde:	4053      	eors	r3, r2
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	4a1c      	ldr	r2, [pc, #112]	; (8002e54 <ep_setStall+0x150>)
 8002de4:	4013      	ands	r3, r2
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	801a      	strh	r2, [r3, #0]
 8002dec:	e029      	b.n	8002e42 <ep_setStall+0x13e>
		} else {
			if((USB_EP_KIND | USB_EP_BULK) == (*pReg & (USB_EP_T_FIELD | USB_EP_KIND))){
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	881b      	ldrh	r3, [r3, #0]
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	001a      	movs	r2, r3
 8002df6:	23e0      	movs	r3, #224	; 0xe0
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	401a      	ands	r2, r3
 8002dfc:	2380      	movs	r3, #128	; 0x80
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d10c      	bne.n	8002e1e <ep_setStall+0x11a>
				EP_DRX_UNSTALL(pReg);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	881b      	ldrh	r3, [r3, #0]
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	22c1      	movs	r2, #193	; 0xc1
 8002e0c:	0192      	lsls	r2, r2, #6
 8002e0e:	4053      	eors	r3, r2
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	2230      	movs	r2, #48	; 0x30
 8002e14:	4393      	bics	r3, r2
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	801a      	strh	r2, [r3, #0]
 8002e1c:	e011      	b.n	8002e42 <ep_setStall+0x13e>
			} else {
				EP_RX_UNSTALL(pReg);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	881b      	ldrh	r3, [r3, #0]
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	22c0      	movs	r2, #192	; 0xc0
 8002e26:	0192      	lsls	r2, r2, #6
 8002e28:	4053      	eors	r3, r2
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	2270      	movs	r2, #112	; 0x70
 8002e2e:	4393      	bics	r3, r2
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	801a      	strh	r2, [r3, #0]
 8002e36:	e004      	b.n	8002e42 <ep_setStall+0x13e>
		return;
 8002e38:	46c0      	nop			; (mov r8, r8)
 8002e3a:	e002      	b.n	8002e42 <ep_setStall+0x13e>
			return;
 8002e3c:	46c0      	nop			; (mov r8, r8)
 8002e3e:	e000      	b.n	8002e42 <ep_setStall+0x13e>
			return;
 8002e40:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
}
 8002e42:	46bd      	mov	sp, r7
 8002e44:	b004      	add	sp, #16
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	ffff8fbf 	.word	0xffff8fbf
 8002e4c:	ffffcfff 	.word	0xffffcfff
 8002e50:	ffff8fff 	.word	0xffff8fff
 8002e54:	ffffbf8f 	.word	0xffffbf8f

08002e58 <ep_isStalled>:


///@brief	function checks, if the endpoint is stalled or not
///@param	ep endpoint number
///@return	flag, whether the endpoint is stalled or not
bool ep_isStalled(uint8_t ep){
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	0002      	movs	r2, r0
 8002e60:	1dfb      	adds	r3, r7, #7
 8002e62:	701a      	strb	r2, [r3, #0]
	if(ep & 0x80){
 8002e64:	1dfb      	adds	r3, r7, #7
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	b25b      	sxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	da0f      	bge.n	8002e8e <ep_isStalled+0x36>
		return (USB_EP_TX_STALL == (USB_EPTX_STAT & *EPR(ep)));
 8002e6e:	1dfb      	adds	r3, r7, #7
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	0018      	movs	r0, r3
 8002e74:	f7ff fec8 	bl	8002c08 <EPR>
 8002e78:	0003      	movs	r3, r0
 8002e7a:	881b      	ldrh	r3, [r3, #0]
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	2230      	movs	r2, #48	; 0x30
 8002e80:	4013      	ands	r3, r2
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	3b10      	subs	r3, #16
 8002e86:	425a      	negs	r2, r3
 8002e88:	4153      	adcs	r3, r2
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	e011      	b.n	8002eb2 <ep_isStalled+0x5a>
	} else {
		return (USB_EP_RX_STALL == (USB_EPRX_STAT & *EPR(ep)));
 8002e8e:	1dfb      	adds	r3, r7, #7
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	0018      	movs	r0, r3
 8002e94:	f7ff feb8 	bl	8002c08 <EPR>
 8002e98:	0003      	movs	r3, r0
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	23c0      	movs	r3, #192	; 0xc0
 8002ea0:	019b      	lsls	r3, r3, #6
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	4a05      	ldr	r2, [pc, #20]	; (8002ebc <ep_isStalled+0x64>)
 8002ea8:	4694      	mov	ip, r2
 8002eaa:	4463      	add	r3, ip
 8002eac:	425a      	negs	r2, r3
 8002eae:	4153      	adcs	r3, r2
 8002eb0:	b2db      	uxtb	r3, r3
	}
}
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	b002      	add	sp, #8
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	fffff000 	.word	0xfffff000

08002ec0 <enable>:

///@brief		enable the clock for the USB communication and do USB register configurations
///@param		enable function is only executed when the enable flag is true
///@return		none
///@attention	remap pin PA11 and PA12 for USB communication with the STM32f042f6p6
void enable(bool enable) {
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	0002      	movs	r2, r0
 8002ec8:	1dfb      	adds	r3, r7, #7
 8002eca:	701a      	strb	r2, [r3, #0]
	if(enable){
 8002ecc:	1dfb      	adds	r3, r7, #7
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d018      	beq.n	8002f06 <enable+0x46>
		RCC->APB1ENR |= RCC_APB1ENR_USBEN;
 8002ed4:	4b19      	ldr	r3, [pc, #100]	; (8002f3c <enable+0x7c>)
 8002ed6:	69da      	ldr	r2, [r3, #28]
 8002ed8:	4b18      	ldr	r3, [pc, #96]	; (8002f3c <enable+0x7c>)
 8002eda:	2180      	movs	r1, #128	; 0x80
 8002edc:	0409      	lsls	r1, r1, #16
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	61da      	str	r2, [r3, #28]
		RCC->APB1RSTR |= RCC_APB1RSTR_USBRST;
 8002ee2:	4b16      	ldr	r3, [pc, #88]	; (8002f3c <enable+0x7c>)
 8002ee4:	691a      	ldr	r2, [r3, #16]
 8002ee6:	4b15      	ldr	r3, [pc, #84]	; (8002f3c <enable+0x7c>)
 8002ee8:	2180      	movs	r1, #128	; 0x80
 8002eea:	0409      	lsls	r1, r1, #16
 8002eec:	430a      	orrs	r2, r1
 8002eee:	611a      	str	r2, [r3, #16]
		RCC->APB1RSTR &= ~RCC_APB1RSTR_USBRST;
 8002ef0:	4b12      	ldr	r3, [pc, #72]	; (8002f3c <enable+0x7c>)
 8002ef2:	691a      	ldr	r2, [r3, #16]
 8002ef4:	4b11      	ldr	r3, [pc, #68]	; (8002f3c <enable+0x7c>)
 8002ef6:	4912      	ldr	r1, [pc, #72]	; (8002f40 <enable+0x80>)
 8002ef8:	400a      	ands	r2, r1
 8002efa:	611a      	str	r2, [r3, #16]

		USB->CNTR = USB_CNTR_CTRM | USB_CNTR_RESETM | USB_CNTR_ERRM |
 8002efc:	4a11      	ldr	r2, [pc, #68]	; (8002f44 <enable+0x84>)
 8002efe:	2340      	movs	r3, #64	; 0x40
 8002f00:	4911      	ldr	r1, [pc, #68]	; (8002f48 <enable+0x88>)
 8002f02:	52d1      	strh	r1, [r2, r3]
	} else if (RCC->APB1ENR & RCC_APB1ENR_USBEN){
		USB->BCDR = 0;
		RCC->APB1RSTR |= RCC_APB1RSTR_USBRST;
		RCC->APB1ENR &= ~RCC_APB1ENR_USBEN;
	}
}
 8002f04:	e016      	b.n	8002f34 <enable+0x74>
	} else if (RCC->APB1ENR & RCC_APB1ENR_USBEN){
 8002f06:	4b0d      	ldr	r3, [pc, #52]	; (8002f3c <enable+0x7c>)
 8002f08:	69da      	ldr	r2, [r3, #28]
 8002f0a:	2380      	movs	r3, #128	; 0x80
 8002f0c:	041b      	lsls	r3, r3, #16
 8002f0e:	4013      	ands	r3, r2
 8002f10:	d010      	beq.n	8002f34 <enable+0x74>
		USB->BCDR = 0;
 8002f12:	4a0c      	ldr	r2, [pc, #48]	; (8002f44 <enable+0x84>)
 8002f14:	2358      	movs	r3, #88	; 0x58
 8002f16:	2100      	movs	r1, #0
 8002f18:	52d1      	strh	r1, [r2, r3]
		RCC->APB1RSTR |= RCC_APB1RSTR_USBRST;
 8002f1a:	4b08      	ldr	r3, [pc, #32]	; (8002f3c <enable+0x7c>)
 8002f1c:	691a      	ldr	r2, [r3, #16]
 8002f1e:	4b07      	ldr	r3, [pc, #28]	; (8002f3c <enable+0x7c>)
 8002f20:	2180      	movs	r1, #128	; 0x80
 8002f22:	0409      	lsls	r1, r1, #16
 8002f24:	430a      	orrs	r2, r1
 8002f26:	611a      	str	r2, [r3, #16]
		RCC->APB1ENR &= ~RCC_APB1ENR_USBEN;
 8002f28:	4b04      	ldr	r3, [pc, #16]	; (8002f3c <enable+0x7c>)
 8002f2a:	69da      	ldr	r2, [r3, #28]
 8002f2c:	4b03      	ldr	r3, [pc, #12]	; (8002f3c <enable+0x7c>)
 8002f2e:	4904      	ldr	r1, [pc, #16]	; (8002f40 <enable+0x80>)
 8002f30:	400a      	ands	r2, r1
 8002f32:	61da      	str	r2, [r3, #28]
}
 8002f34:	46c0      	nop			; (mov r8, r8)
 8002f36:	46bd      	mov	sp, r7
 8002f38:	b002      	add	sp, #8
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	ff7fffff 	.word	0xff7fffff
 8002f44:	40005c00 	.word	0x40005c00
 8002f48:	ffffbe00 	.word	0xffffbe00

08002f4c <connect>:


///@brief	function connects the USB device
///@param	connect function is only executed if the connect flag is true
///@return	connection state as integer value
uint8_t connect(bool connect){
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	0002      	movs	r2, r0
 8002f54:	1dfb      	adds	r3, r7, #7
 8002f56:	701a      	strb	r2, [r3, #0]
	uint8_t res;
	USB->BCDR = USB_BCDR_BCDEN | USB_BCDR_DCDEN;
 8002f58:	4a2a      	ldr	r2, [pc, #168]	; (8003004 <connect+0xb8>)
 8002f5a:	2358      	movs	r3, #88	; 0x58
 8002f5c:	2103      	movs	r1, #3
 8002f5e:	52d1      	strh	r1, [r2, r3]
	if(USB->BCDR & USB_BCDR_DCDET){
 8002f60:	4a28      	ldr	r2, [pc, #160]	; (8003004 <connect+0xb8>)
 8002f62:	2358      	movs	r3, #88	; 0x58
 8002f64:	5ad3      	ldrh	r3, [r2, r3]
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	001a      	movs	r2, r3
 8002f6a:	2310      	movs	r3, #16
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	d033      	beq.n	8002fd8 <connect+0x8c>
		USB->BCDR = USB_BCDR_BCDEN | USB_BCDR_PDEN;
 8002f70:	4a24      	ldr	r2, [pc, #144]	; (8003004 <connect+0xb8>)
 8002f72:	2358      	movs	r3, #88	; 0x58
 8002f74:	2105      	movs	r1, #5
 8002f76:	52d1      	strh	r1, [r2, r3]
		if(USB->BCDR & USB_BCDR_PS2DET){
 8002f78:	4a22      	ldr	r2, [pc, #136]	; (8003004 <connect+0xb8>)
 8002f7a:	2358      	movs	r3, #88	; 0x58
 8002f7c:	5ad3      	ldrh	r3, [r2, r3]
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	001a      	movs	r2, r3
 8002f82:	2380      	movs	r3, #128	; 0x80
 8002f84:	4013      	ands	r3, r2
 8002f86:	d004      	beq.n	8002f92 <connect+0x46>
			res = USBD_LANE_UNKNOW;
 8002f88:	230f      	movs	r3, #15
 8002f8a:	18fb      	adds	r3, r7, r3
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	701a      	strb	r2, [r3, #0]
 8002f90:	e026      	b.n	8002fe0 <connect+0x94>
		} else if (USB->BCDR & USB_BCDR_PDET){
 8002f92:	4a1c      	ldr	r2, [pc, #112]	; (8003004 <connect+0xb8>)
 8002f94:	2358      	movs	r3, #88	; 0x58
 8002f96:	5ad3      	ldrh	r3, [r2, r3]
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	001a      	movs	r2, r3
 8002f9c:	2320      	movs	r3, #32
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	d015      	beq.n	8002fce <connect+0x82>
			USB->BCDR = USB_BCDR_BCDEN | USB_BCDR_SDEN;
 8002fa2:	4a18      	ldr	r2, [pc, #96]	; (8003004 <connect+0xb8>)
 8002fa4:	2358      	movs	r3, #88	; 0x58
 8002fa6:	2109      	movs	r1, #9
 8002fa8:	52d1      	strh	r1, [r2, r3]
			if(USB->BCDR & USB_BCDR_SDET){
 8002faa:	4a16      	ldr	r2, [pc, #88]	; (8003004 <connect+0xb8>)
 8002fac:	2358      	movs	r3, #88	; 0x58
 8002fae:	5ad3      	ldrh	r3, [r2, r3]
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	001a      	movs	r2, r3
 8002fb4:	2340      	movs	r3, #64	; 0x40
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d004      	beq.n	8002fc4 <connect+0x78>
				res = USBD_LANE_CARGING_DEDICATED;
 8002fba:	230f      	movs	r3, #15
 8002fbc:	18fb      	adds	r3, r7, r3
 8002fbe:	2204      	movs	r2, #4
 8002fc0:	701a      	strb	r2, [r3, #0]
 8002fc2:	e00d      	b.n	8002fe0 <connect+0x94>
			} else {
				res = USBD_LANE_CARGING_DOWNSTREAM;
 8002fc4:	230f      	movs	r3, #15
 8002fc6:	18fb      	adds	r3, r7, r3
 8002fc8:	2203      	movs	r2, #3
 8002fca:	701a      	strb	r2, [r3, #0]
 8002fcc:	e008      	b.n	8002fe0 <connect+0x94>
			}
		} else {
			res = USBD_LANE_STD_DOWNSTREAM;
 8002fce:	230f      	movs	r3, #15
 8002fd0:	18fb      	adds	r3, r7, r3
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	701a      	strb	r2, [r3, #0]
 8002fd6:	e003      	b.n	8002fe0 <connect+0x94>
		}
	} else {
		res = USBD_LANE_DISCONNECTED;
 8002fd8:	230f      	movs	r3, #15
 8002fda:	18fb      	adds	r3, r7, r3
 8002fdc:	2201      	movs	r2, #1
 8002fde:	701a      	strb	r2, [r3, #0]
	}
	USB->BCDR = (connect) ? USB_BCDR_DPPU : 0;
 8002fe0:	1dfb      	adds	r3, r7, #7
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d002      	beq.n	8002fee <connect+0xa2>
 8002fe8:	2380      	movs	r3, #128	; 0x80
 8002fea:	021b      	lsls	r3, r3, #8
 8002fec:	e000      	b.n	8002ff0 <connect+0xa4>
 8002fee:	2300      	movs	r3, #0
 8002ff0:	4904      	ldr	r1, [pc, #16]	; (8003004 <connect+0xb8>)
 8002ff2:	2258      	movs	r2, #88	; 0x58
 8002ff4:	528b      	strh	r3, [r1, r2]
	return res;
 8002ff6:	230f      	movs	r3, #15
 8002ff8:	18fb      	adds	r3, r7, r3
 8002ffa:	781b      	ldrb	r3, [r3, #0]
}
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	46bd      	mov	sp, r7
 8003000:	b004      	add	sp, #16
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40005c00 	.word	0x40005c00

08003008 <set_address>:


///@brief	function sets the USB function address, set by the host PC during the enumeration process
///@param	address	address from the host pc as integer value
///@return 	none
void set_address (uint8_t address){
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	0002      	movs	r2, r0
 8003010:	1dfb      	adds	r3, r7, #7
 8003012:	701a      	strb	r2, [r3, #0]
	USB->DADDR = USB_DADDR_EF | address;
 8003014:	1dfb      	adds	r3, r7, #7
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2280      	movs	r2, #128	; 0x80
 800301a:	4252      	negs	r2, r2
 800301c:	4313      	orrs	r3, r2
 800301e:	b2db      	uxtb	r3, r3
 8003020:	4a03      	ldr	r2, [pc, #12]	; (8003030 <set_address+0x28>)
 8003022:	b299      	uxth	r1, r3
 8003024:	234c      	movs	r3, #76	; 0x4c
 8003026:	52d1      	strh	r1, [r2, r3]
}
 8003028:	46c0      	nop			; (mov r8, r8)
 800302a:	46bd      	mov	sp, r7
 800302c:	b002      	add	sp, #8
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40005c00 	.word	0x40005c00

08003034 <ep_config>:
///@brief	function configures the endpoint
///@param	ep endpoint number
///@param	epType type of the endpoint
///@param	epSize size of the endpoint
///@return	flag, wheather the endpoint configuration was successful or not
bool ep_config (uint8_t ep, uint8_t epType, uint16_t epSize){
 8003034:	b5b0      	push	{r4, r5, r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	0004      	movs	r4, r0
 800303c:	0008      	movs	r0, r1
 800303e:	0011      	movs	r1, r2
 8003040:	1dfb      	adds	r3, r7, #7
 8003042:	1c22      	adds	r2, r4, #0
 8003044:	701a      	strb	r2, [r3, #0]
 8003046:	1dbb      	adds	r3, r7, #6
 8003048:	1c02      	adds	r2, r0, #0
 800304a:	701a      	strb	r2, [r3, #0]
 800304c:	1d3b      	adds	r3, r7, #4
 800304e:	1c0a      	adds	r2, r1, #0
 8003050:	801a      	strh	r2, [r3, #0]
	volatile uint16_t *pReg = EPR(ep);
 8003052:	1dfb      	adds	r3, r7, #7
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	0018      	movs	r0, r3
 8003058:	f7ff fdd6 	bl	8002c08 <EPR>
 800305c:	0003      	movs	r3, r0
 800305e:	613b      	str	r3, [r7, #16]
	pma_table *pTbl = EPT(ep);
 8003060:	1dfb      	adds	r3, r7, #7
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	0018      	movs	r0, r3
 8003066:	f7ff fdbb 	bl	8002be0 <EPT>
 800306a:	0003      	movs	r3, r0
 800306c:	60fb      	str	r3, [r7, #12]
	if(epSize & 0x01){
 800306e:	1d3b      	adds	r3, r7, #4
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	2201      	movs	r2, #1
 8003074:	4013      	ands	r3, r2
 8003076:	d004      	beq.n	8003082 <ep_config+0x4e>
		epSize++;
 8003078:	1d3b      	adds	r3, r7, #4
 800307a:	881a      	ldrh	r2, [r3, #0]
 800307c:	1d3b      	adds	r3, r7, #4
 800307e:	3201      	adds	r2, #1
 8003080:	801a      	strh	r2, [r3, #0]
	}

	switch (epType){
 8003082:	1dbb      	adds	r3, r7, #6
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	2b06      	cmp	r3, #6
 8003088:	d02d      	beq.n	80030e6 <ep_config+0xb2>
 800308a:	dc3a      	bgt.n	8003102 <ep_config+0xce>
 800308c:	2b02      	cmp	r3, #2
 800308e:	d021      	beq.n	80030d4 <ep_config+0xa0>
 8003090:	dc37      	bgt.n	8003102 <ep_config+0xce>
 8003092:	2b00      	cmp	r3, #0
 8003094:	d002      	beq.n	800309c <ep_config+0x68>
 8003096:	2b01      	cmp	r3, #1
 8003098:	d00e      	beq.n	80030b8 <ep_config+0x84>
 800309a:	e032      	b.n	8003102 <ep_config+0xce>
	case USB_EP_TYPE_CONTROL:
		*pReg = USB_EP_CONTROL | (ep & 0x07);
 800309c:	1dfb      	adds	r3, r7, #7
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	b21b      	sxth	r3, r3
 80030a2:	2207      	movs	r2, #7
 80030a4:	4013      	ands	r3, r2
 80030a6:	b21b      	sxth	r3, r3
 80030a8:	2280      	movs	r2, #128	; 0x80
 80030aa:	0092      	lsls	r2, r2, #2
 80030ac:	4313      	orrs	r3, r2
 80030ae:	b21b      	sxth	r3, r3
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	801a      	strh	r2, [r3, #0]
		break;
 80030b6:	e032      	b.n	800311e <ep_config+0xea>
	case USB_EP_TYPE_ISYNCHRONOUS:
		*pReg = USB_EP_ISOCHRONOUS | (ep & 0x07);
 80030b8:	1dfb      	adds	r3, r7, #7
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	b21b      	sxth	r3, r3
 80030be:	2207      	movs	r2, #7
 80030c0:	4013      	ands	r3, r2
 80030c2:	b21b      	sxth	r3, r3
 80030c4:	2280      	movs	r2, #128	; 0x80
 80030c6:	00d2      	lsls	r2, r2, #3
 80030c8:	4313      	orrs	r3, r2
 80030ca:	b21b      	sxth	r3, r3
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	801a      	strh	r2, [r3, #0]
		break;
 80030d2:	e024      	b.n	800311e <ep_config+0xea>
	case USB_EP_TYPE_BULK:
		*pReg = USB_EP_BULK | (ep & 0x07);
 80030d4:	1dfb      	adds	r3, r7, #7
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	b29b      	uxth	r3, r3
 80030da:	2207      	movs	r2, #7
 80030dc:	4013      	ands	r3, r2
 80030de:	b29a      	uxth	r2, r3
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	801a      	strh	r2, [r3, #0]
		break;
 80030e4:	e01b      	b.n	800311e <ep_config+0xea>
	case USB_EP_TYPE_BULK | USB_EP_TYPE_DBL_BUF:
		*pReg = USB_EP_BULK | USB_EP_KIND | (ep & 0x07);
 80030e6:	1dfb      	adds	r3, r7, #7
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	b21b      	sxth	r3, r3
 80030ec:	2207      	movs	r2, #7
 80030ee:	4013      	ands	r3, r2
 80030f0:	b21b      	sxth	r3, r3
 80030f2:	2280      	movs	r2, #128	; 0x80
 80030f4:	0052      	lsls	r2, r2, #1
 80030f6:	4313      	orrs	r3, r2
 80030f8:	b21b      	sxth	r3, r3
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	801a      	strh	r2, [r3, #0]
		break;
 8003100:	e00d      	b.n	800311e <ep_config+0xea>
	default:
		*pReg = USB_EP_INTERRUPT | (ep & 0x07);
 8003102:	1dfb      	adds	r3, r7, #7
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	b21b      	sxth	r3, r3
 8003108:	2207      	movs	r2, #7
 800310a:	4013      	ands	r3, r2
 800310c:	b21b      	sxth	r3, r3
 800310e:	22c0      	movs	r2, #192	; 0xc0
 8003110:	00d2      	lsls	r2, r2, #3
 8003112:	4313      	orrs	r3, r2
 8003114:	b21b      	sxth	r3, r3
 8003116:	b29a      	uxth	r2, r3
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	801a      	strh	r2, [r3, #0]
		break;
 800311c:	46c0      	nop			; (mov r8, r8)
	}
	if((ep & 0x80) || (epType == USB_EP_TYPE_CONTROL)){
 800311e:	1dfb      	adds	r3, r7, #7
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	b25b      	sxtb	r3, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	db03      	blt.n	8003130 <ep_config+0xfc>
 8003128:	1dbb      	adds	r3, r7, #6
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d14c      	bne.n	80031ca <ep_config+0x196>
		uint16_t _pma;
		_pma = get_next_pma(epSize);
 8003130:	250a      	movs	r5, #10
 8003132:	197c      	adds	r4, r7, r5
 8003134:	1d3b      	adds	r3, r7, #4
 8003136:	881b      	ldrh	r3, [r3, #0]
 8003138:	0018      	movs	r0, r3
 800313a:	f7ff fd79 	bl	8002c30 <get_next_pma>
 800313e:	0003      	movs	r3, r0
 8003140:	8023      	strh	r3, [r4, #0]
		if(_pma == 0){
 8003142:	197b      	adds	r3, r7, r5
 8003144:	881b      	ldrh	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <ep_config+0x11a>
			return false;
 800314a:	2300      	movs	r3, #0
 800314c:	e0c2      	b.n	80032d4 <ep_config+0x2a0>
		}
		pTbl->tx.address = _pma;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	220a      	movs	r2, #10
 8003152:	18ba      	adds	r2, r7, r2
 8003154:	8812      	ldrh	r2, [r2, #0]
 8003156:	801a      	strh	r2, [r3, #0]
		pTbl->tx.count = 0;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	805a      	strh	r2, [r3, #2]
		if((epType == USB_EP_TYPE_ISYNCHRONOUS) || (epType == (USB_EP_TYPE_BULK | USB_EP_TYPE_DBL_BUF))){
 800315e:	1dbb      	adds	r3, r7, #6
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d003      	beq.n	800316e <ep_config+0x13a>
 8003166:	1dbb      	adds	r3, r7, #6
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	2b06      	cmp	r3, #6
 800316c:	d122      	bne.n	80031b4 <ep_config+0x180>
			_pma = get_next_pma(epSize);
 800316e:	250a      	movs	r5, #10
 8003170:	197c      	adds	r4, r7, r5
 8003172:	1d3b      	adds	r3, r7, #4
 8003174:	881b      	ldrh	r3, [r3, #0]
 8003176:	0018      	movs	r0, r3
 8003178:	f7ff fd5a 	bl	8002c30 <get_next_pma>
 800317c:	0003      	movs	r3, r0
 800317e:	8023      	strh	r3, [r4, #0]
			if(_pma == 0){
 8003180:	197b      	adds	r3, r7, r5
 8003182:	881b      	ldrh	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <ep_config+0x158>
				return false;
 8003188:	2300      	movs	r3, #0
 800318a:	e0a3      	b.n	80032d4 <ep_config+0x2a0>
			}
			pTbl->tx1.address = _pma;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	220a      	movs	r2, #10
 8003190:	18ba      	adds	r2, r7, r2
 8003192:	8812      	ldrh	r2, [r2, #0]
 8003194:	809a      	strh	r2, [r3, #4]
			pTbl->tx1.count = 0;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	80da      	strh	r2, [r3, #6]
			EP_DTX_UNSTALL(pReg);
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	881b      	ldrh	r3, [r3, #0]
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	2230      	movs	r2, #48	; 0x30
 80031a4:	4053      	eors	r3, r2
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	4a4c      	ldr	r2, [pc, #304]	; (80032dc <ep_config+0x2a8>)
 80031aa:	4013      	ands	r3, r2
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	801a      	strh	r2, [r3, #0]
 80031b2:	e00a      	b.n	80031ca <ep_config+0x196>
		} else {
			EP_TX_UNSTALL(pReg);
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	881b      	ldrh	r3, [r3, #0]
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	2220      	movs	r2, #32
 80031bc:	4053      	eors	r3, r2
 80031be:	b29b      	uxth	r3, r3
 80031c0:	4a47      	ldr	r2, [pc, #284]	; (80032e0 <ep_config+0x2ac>)
 80031c2:	4013      	ands	r3, r2
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	801a      	strh	r2, [r3, #0]
		}
	}
	if (!(ep & 0x80)){
 80031ca:	1dfb      	adds	r3, r7, #7
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	b25b      	sxtb	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	da00      	bge.n	80031d6 <ep_config+0x1a2>
 80031d4:	e07d      	b.n	80032d2 <ep_config+0x29e>
		uint16_t _rxCount;
		uint16_t _pma;
		if(epSize > 62){
 80031d6:	1d3b      	adds	r3, r7, #4
 80031d8:	881b      	ldrh	r3, [r3, #0]
 80031da:	2b3e      	cmp	r3, #62	; 0x3e
 80031dc:	d920      	bls.n	8003220 <ep_config+0x1ec>
			if(epSize & 0x1F){
 80031de:	1d3b      	adds	r3, r7, #4
 80031e0:	881b      	ldrh	r3, [r3, #0]
 80031e2:	221f      	movs	r2, #31
 80031e4:	4013      	ands	r3, r2
 80031e6:	d006      	beq.n	80031f6 <ep_config+0x1c2>
				epSize &= 0x1F;
 80031e8:	1d3b      	adds	r3, r7, #4
 80031ea:	1d3a      	adds	r2, r7, #4
 80031ec:	8812      	ldrh	r2, [r2, #0]
 80031ee:	211f      	movs	r1, #31
 80031f0:	400a      	ands	r2, r1
 80031f2:	801a      	strh	r2, [r3, #0]
 80031f4:	e004      	b.n	8003200 <ep_config+0x1cc>
			} else {
				epSize -= 0x20;
 80031f6:	1d3b      	adds	r3, r7, #4
 80031f8:	1d3a      	adds	r2, r7, #4
 80031fa:	8812      	ldrh	r2, [r2, #0]
 80031fc:	3a20      	subs	r2, #32
 80031fe:	801a      	strh	r2, [r3, #0]
			}
			_rxCount = 0x8000 | (epSize << 5);
 8003200:	1d3b      	adds	r3, r7, #4
 8003202:	881b      	ldrh	r3, [r3, #0]
 8003204:	015b      	lsls	r3, r3, #5
 8003206:	b21b      	sxth	r3, r3
 8003208:	4a36      	ldr	r2, [pc, #216]	; (80032e4 <ep_config+0x2b0>)
 800320a:	4313      	orrs	r3, r2
 800320c:	b21a      	sxth	r2, r3
 800320e:	2316      	movs	r3, #22
 8003210:	18fb      	adds	r3, r7, r3
 8003212:	801a      	strh	r2, [r3, #0]
			epSize += 0x20;
 8003214:	1d3b      	adds	r3, r7, #4
 8003216:	1d3a      	adds	r2, r7, #4
 8003218:	8812      	ldrh	r2, [r2, #0]
 800321a:	3220      	adds	r2, #32
 800321c:	801a      	strh	r2, [r3, #0]
 800321e:	e005      	b.n	800322c <ep_config+0x1f8>
		} else {
			_rxCount = epSize << 9;
 8003220:	2316      	movs	r3, #22
 8003222:	18fb      	adds	r3, r7, r3
 8003224:	1d3a      	adds	r2, r7, #4
 8003226:	8812      	ldrh	r2, [r2, #0]
 8003228:	0252      	lsls	r2, r2, #9
 800322a:	801a      	strh	r2, [r3, #0]
		}
		_pma = get_next_pma(epSize);
 800322c:	2508      	movs	r5, #8
 800322e:	197c      	adds	r4, r7, r5
 8003230:	1d3b      	adds	r3, r7, #4
 8003232:	881b      	ldrh	r3, [r3, #0]
 8003234:	0018      	movs	r0, r3
 8003236:	f7ff fcfb 	bl	8002c30 <get_next_pma>
 800323a:	0003      	movs	r3, r0
 800323c:	8023      	strh	r3, [r4, #0]
		if(_pma == 0){
 800323e:	197b      	adds	r3, r7, r5
 8003240:	881b      	ldrh	r3, [r3, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <ep_config+0x216>
			return false;
 8003246:	2300      	movs	r3, #0
 8003248:	e044      	b.n	80032d4 <ep_config+0x2a0>
		}
		pTbl->rx.address = _pma;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2208      	movs	r2, #8
 800324e:	18ba      	adds	r2, r7, r2
 8003250:	8812      	ldrh	r2, [r2, #0]
 8003252:	809a      	strh	r2, [r3, #4]
		pTbl->rx.count = _rxCount;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2216      	movs	r2, #22
 8003258:	18ba      	adds	r2, r7, r2
 800325a:	8812      	ldrh	r2, [r2, #0]
 800325c:	80da      	strh	r2, [r3, #6]
		if((epType == USB_EP_TYPE_ISYNCHRONOUS) || (epType == (USB_EP_TYPE_BULK | USB_EP_TYPE_DBL_BUF))){
 800325e:	1dbb      	adds	r3, r7, #6
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d003      	beq.n	800326e <ep_config+0x23a>
 8003266:	1dbb      	adds	r3, r7, #6
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b06      	cmp	r3, #6
 800326c:	d125      	bne.n	80032ba <ep_config+0x286>
			_pma = get_next_pma(epSize);
 800326e:	2508      	movs	r5, #8
 8003270:	197c      	adds	r4, r7, r5
 8003272:	1d3b      	adds	r3, r7, #4
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	0018      	movs	r0, r3
 8003278:	f7ff fcda 	bl	8002c30 <get_next_pma>
 800327c:	0003      	movs	r3, r0
 800327e:	8023      	strh	r3, [r4, #0]
			if(_pma == 0){
 8003280:	197b      	adds	r3, r7, r5
 8003282:	881b      	ldrh	r3, [r3, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <ep_config+0x258>
				return false;
 8003288:	2300      	movs	r3, #0
 800328a:	e023      	b.n	80032d4 <ep_config+0x2a0>
			}
			pTbl->rx0.address = _pma;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2208      	movs	r2, #8
 8003290:	18ba      	adds	r2, r7, r2
 8003292:	8812      	ldrh	r2, [r2, #0]
 8003294:	801a      	strh	r2, [r3, #0]
			pTbl->rx0.count = _rxCount;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2216      	movs	r2, #22
 800329a:	18ba      	adds	r2, r7, r2
 800329c:	8812      	ldrh	r2, [r2, #0]
 800329e:	805a      	strh	r2, [r3, #2]
			EP_DRX_UNSTALL(pReg);
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	881b      	ldrh	r3, [r3, #0]
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	22c1      	movs	r2, #193	; 0xc1
 80032a8:	0192      	lsls	r2, r2, #6
 80032aa:	4053      	eors	r3, r2
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	2230      	movs	r2, #48	; 0x30
 80032b0:	4393      	bics	r3, r2
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	801a      	strh	r2, [r3, #0]
 80032b8:	e00b      	b.n	80032d2 <ep_config+0x29e>
		} else {
			EP_RX_UNSTALL(pReg);
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	881b      	ldrh	r3, [r3, #0]
 80032be:	b29b      	uxth	r3, r3
 80032c0:	22c0      	movs	r2, #192	; 0xc0
 80032c2:	0192      	lsls	r2, r2, #6
 80032c4:	4053      	eors	r3, r2
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	2270      	movs	r2, #112	; 0x70
 80032ca:	4393      	bics	r3, r2
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	801a      	strh	r2, [r3, #0]
		}
	}
	return true;
 80032d2:	2301      	movs	r3, #1
}
 80032d4:	0018      	movs	r0, r3
 80032d6:	46bd      	mov	sp, r7
 80032d8:	b006      	add	sp, #24
 80032da:	bdb0      	pop	{r4, r5, r7, pc}
 80032dc:	ffffcfff 	.word	0xffffcfff
 80032e0:	ffff8fff 	.word	0xffff8fff
 80032e4:	ffff8000 	.word	0xffff8000

080032e8 <ep_deConfig>:


///@brief	function de-configures a configured endpoint
///@param	ep endpoint number
///@return	none
void ep_deConfig(uint8_t ep){
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	0002      	movs	r2, r0
 80032f0:	1dfb      	adds	r3, r7, #7
 80032f2:	701a      	strb	r2, [r3, #0]
	pma_table *pEpt = EPT(ep);
 80032f4:	1dfb      	adds	r3, r7, #7
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	0018      	movs	r0, r3
 80032fa:	f7ff fc71 	bl	8002be0 <EPT>
 80032fe:	0003      	movs	r3, r0
 8003300:	60fb      	str	r3, [r7, #12]
	*EPR(ep) &= ~USB_EPREG_MASK;
 8003302:	1dfb      	adds	r3, r7, #7
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	0018      	movs	r0, r3
 8003308:	f7ff fc7e 	bl	8002c08 <EPR>
 800330c:	0003      	movs	r3, r0
 800330e:	881a      	ldrh	r2, [r3, #0]
 8003310:	b292      	uxth	r2, r2
 8003312:	490a      	ldr	r1, [pc, #40]	; (800333c <ep_deConfig+0x54>)
 8003314:	400a      	ands	r2, r1
 8003316:	b292      	uxth	r2, r2
 8003318:	801a      	strh	r2, [r3, #0]
	pEpt->rx.address = 0;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	809a      	strh	r2, [r3, #4]
	pEpt->rx.count = 0;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	80da      	strh	r2, [r3, #6]
	pEpt->tx.address = 0;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	801a      	strh	r2, [r3, #0]
	pEpt->tx.count = 0;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	805a      	strh	r2, [r3, #2]
}
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	46bd      	mov	sp, r7
 8003336:	b004      	add	sp, #16
 8003338:	bd80      	pop	{r7, pc}
 800333a:	46c0      	nop			; (mov r8, r8)
 800333c:	00007070 	.word	0x00007070

08003340 <pma_read>:



static uint16_t pma_read(uint8_t *pBuf, uint16_t bufLen, pma_rec *pRx){
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	607a      	str	r2, [r7, #4]
 800334a:	200a      	movs	r0, #10
 800334c:	183b      	adds	r3, r7, r0
 800334e:	1c0a      	adds	r2, r1, #0
 8003350:	801a      	strh	r2, [r3, #0]
	uint16_t *pPma = (void*)(USB_PMAADDR + pRx->address);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	881b      	ldrh	r3, [r3, #0]
 8003356:	4a2c      	ldr	r2, [pc, #176]	; (8003408 <pma_read+0xc8>)
 8003358:	4694      	mov	ip, r2
 800335a:	4463      	add	r3, ip
 800335c:	617b      	str	r3, [r7, #20]
	uint16_t rxCount = pRx->count & 0x03FF;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	885a      	ldrh	r2, [r3, #2]
 8003362:	2112      	movs	r1, #18
 8003364:	187b      	adds	r3, r7, r1
 8003366:	0592      	lsls	r2, r2, #22
 8003368:	0d92      	lsrs	r2, r2, #22
 800336a:	801a      	strh	r2, [r3, #0]
	pRx->count &= ~0x3FF;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	885b      	ldrh	r3, [r3, #2]
 8003370:	0a9b      	lsrs	r3, r3, #10
 8003372:	029b      	lsls	r3, r3, #10
 8003374:	b29a      	uxth	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	805a      	strh	r2, [r3, #2]

	if(bufLen > rxCount){
 800337a:	183a      	adds	r2, r7, r0
 800337c:	187b      	adds	r3, r7, r1
 800337e:	8812      	ldrh	r2, [r2, #0]
 8003380:	881b      	ldrh	r3, [r3, #0]
 8003382:	429a      	cmp	r2, r3
 8003384:	d903      	bls.n	800338e <pma_read+0x4e>
		bufLen = rxCount;
 8003386:	183b      	adds	r3, r7, r0
 8003388:	187a      	adds	r2, r7, r1
 800338a:	8812      	ldrh	r2, [r2, #0]
 800338c:	801a      	strh	r2, [r3, #0]
	}
	rxCount = bufLen;
 800338e:	2312      	movs	r3, #18
 8003390:	18fb      	adds	r3, r7, r3
 8003392:	220a      	movs	r2, #10
 8003394:	18ba      	adds	r2, r7, r2
 8003396:	8812      	ldrh	r2, [r2, #0]
 8003398:	801a      	strh	r2, [r3, #0]
	while(bufLen){
 800339a:	e026      	b.n	80033ea <pma_read+0xaa>
		uint16_t _t = *pPma;
 800339c:	2110      	movs	r1, #16
 800339e:	187b      	adds	r3, r7, r1
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	8812      	ldrh	r2, [r2, #0]
 80033a4:	801a      	strh	r2, [r3, #0]
		*pBuf++ = _t & 0xFF;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	1c5a      	adds	r2, r3, #1
 80033aa:	60fa      	str	r2, [r7, #12]
 80033ac:	187a      	adds	r2, r7, r1
 80033ae:	8812      	ldrh	r2, [r2, #0]
 80033b0:	b2d2      	uxtb	r2, r2
 80033b2:	701a      	strb	r2, [r3, #0]
		if(--bufLen){
 80033b4:	200a      	movs	r0, #10
 80033b6:	183b      	adds	r3, r7, r0
 80033b8:	183a      	adds	r2, r7, r0
 80033ba:	8812      	ldrh	r2, [r2, #0]
 80033bc:	3a01      	subs	r2, #1
 80033be:	801a      	strh	r2, [r3, #0]
 80033c0:	183b      	adds	r3, r7, r0
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d016      	beq.n	80033f6 <pma_read+0xb6>
			*pBuf++ = _t >> 8;
 80033c8:	187b      	adds	r3, r7, r1
 80033ca:	881b      	ldrh	r3, [r3, #0]
 80033cc:	0a1b      	lsrs	r3, r3, #8
 80033ce:	b299      	uxth	r1, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	1c5a      	adds	r2, r3, #1
 80033d4:	60fa      	str	r2, [r7, #12]
 80033d6:	b2ca      	uxtb	r2, r1
 80033d8:	701a      	strb	r2, [r3, #0]
			pPma++;
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	3302      	adds	r3, #2
 80033de:	617b      	str	r3, [r7, #20]
			bufLen--;
 80033e0:	183b      	adds	r3, r7, r0
 80033e2:	881a      	ldrh	r2, [r3, #0]
 80033e4:	183b      	adds	r3, r7, r0
 80033e6:	3a01      	subs	r2, #1
 80033e8:	801a      	strh	r2, [r3, #0]
	while(bufLen){
 80033ea:	230a      	movs	r3, #10
 80033ec:	18fb      	adds	r3, r7, r3
 80033ee:	881b      	ldrh	r3, [r3, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1d3      	bne.n	800339c <pma_read+0x5c>
 80033f4:	e000      	b.n	80033f8 <pma_read+0xb8>
		} else {
			break;
 80033f6:	46c0      	nop			; (mov r8, r8)
		}
	}
	return rxCount;
 80033f8:	2312      	movs	r3, #18
 80033fa:	18fb      	adds	r3, r7, r3
 80033fc:	881b      	ldrh	r3, [r3, #0]
}
 80033fe:	0018      	movs	r0, r3
 8003400:	46bd      	mov	sp, r7
 8003402:	b006      	add	sp, #24
 8003404:	bd80      	pop	{r7, pc}
 8003406:	46c0      	nop			; (mov r8, r8)
 8003408:	40006000 	.word	0x40006000

0800340c <ep_read>:



int32_t ep_read (uint8_t ep, void* pBuf, uint16_t bufLen){
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	6039      	str	r1, [r7, #0]
 8003414:	0011      	movs	r1, r2
 8003416:	1dfb      	adds	r3, r7, #7
 8003418:	1c02      	adds	r2, r0, #0
 800341a:	701a      	strb	r2, [r3, #0]
 800341c:	1d3b      	adds	r3, r7, #4
 800341e:	1c0a      	adds	r2, r1, #0
 8003420:	801a      	strh	r2, [r3, #0]
	pma_table *pTbl = EPT(ep);
 8003422:	1dfb      	adds	r3, r7, #7
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	0018      	movs	r0, r3
 8003428:	f7ff fbda 	bl	8002be0 <EPT>
 800342c:	0003      	movs	r3, r0
 800342e:	617b      	str	r3, [r7, #20]
	volatile uint16_t *pReg = EPR(ep);
 8003430:	1dfb      	adds	r3, r7, #7
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	0018      	movs	r0, r3
 8003436:	f7ff fbe7 	bl	8002c08 <EPR>
 800343a:	0003      	movs	r3, r0
 800343c:	613b      	str	r3, [r7, #16]
	switch(*pReg & (USB_EPRX_STAT | USB_EP_T_FIELD | USB_EP_KIND)){
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	881b      	ldrh	r3, [r3, #0]
 8003442:	b29b      	uxth	r3, r3
 8003444:	001a      	movs	r2, r3
 8003446:	23dc      	movs	r3, #220	; 0xdc
 8003448:	019b      	lsls	r3, r3, #6
 800344a:	4013      	ands	r3, r2
 800344c:	22d0      	movs	r2, #208	; 0xd0
 800344e:	0192      	lsls	r2, r2, #6
 8003450:	4293      	cmp	r3, r2
 8003452:	d051      	beq.n	80034f8 <ep_read+0xec>
 8003454:	22d0      	movs	r2, #208	; 0xd0
 8003456:	0192      	lsls	r2, r2, #6
 8003458:	4293      	cmp	r3, r2
 800345a:	dd00      	ble.n	800345e <ep_read+0x52>
 800345c:	e07f      	b.n	800355e <ep_read+0x152>
 800345e:	22c4      	movs	r2, #196	; 0xc4
 8003460:	0192      	lsls	r2, r2, #6
 8003462:	4293      	cmp	r3, r2
 8003464:	d016      	beq.n	8003494 <ep_read+0x88>
 8003466:	22c4      	movs	r2, #196	; 0xc4
 8003468:	0192      	lsls	r2, r2, #6
 800346a:	4293      	cmp	r3, r2
 800346c:	dd00      	ble.n	8003470 <ep_read+0x64>
 800346e:	e076      	b.n	800355e <ep_read+0x152>
 8003470:	2298      	movs	r2, #152	; 0x98
 8003472:	0192      	lsls	r2, r2, #6
 8003474:	4293      	cmp	r3, r2
 8003476:	d05a      	beq.n	800352e <ep_read+0x122>
 8003478:	2298      	movs	r2, #152	; 0x98
 800347a:	0192      	lsls	r2, r2, #6
 800347c:	4293      	cmp	r3, r2
 800347e:	dd00      	ble.n	8003482 <ep_read+0x76>
 8003480:	e06d      	b.n	800355e <ep_read+0x152>
 8003482:	2280      	movs	r2, #128	; 0x80
 8003484:	0192      	lsls	r2, r2, #6
 8003486:	4293      	cmp	r3, r2
 8003488:	d051      	beq.n	800352e <ep_read+0x122>
 800348a:	2288      	movs	r2, #136	; 0x88
 800348c:	0192      	lsls	r2, r2, #6
 800348e:	4293      	cmp	r3, r2
 8003490:	d04d      	beq.n	800352e <ep_read+0x122>
 8003492:	e064      	b.n	800355e <ep_read+0x152>
	case (USB_EP_RX_VALID | USB_EP_BULK | USB_EP_KIND):
			switch(*pReg & (USB_EP_DTOG_RX | USB_EP_SW_BUF_RX)){
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	881b      	ldrh	r3, [r3, #0]
 8003498:	b29b      	uxth	r3, r3
 800349a:	001a      	movs	r2, r3
 800349c:	4b33      	ldr	r3, [pc, #204]	; (800356c <ep_read+0x160>)
 800349e:	4013      	ands	r3, r2
 80034a0:	d002      	beq.n	80034a8 <ep_read+0x9c>
 80034a2:	4a32      	ldr	r2, [pc, #200]	; (800356c <ep_read+0x160>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d10c      	bne.n	80034c2 <ep_read+0xb6>
			case 0:
			case (USB_EP_DTOG_RX | USB_EP_SW_BUF_RX):
				*pReg = (*pReg & USB_EPREG_MASK) | USB_EP_SW_BUF_RX;
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	881b      	ldrh	r3, [r3, #0]
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	b21b      	sxth	r3, r3
 80034b0:	4a2f      	ldr	r2, [pc, #188]	; (8003570 <ep_read+0x164>)
 80034b2:	4013      	ands	r3, r2
 80034b4:	b21b      	sxth	r3, r3
 80034b6:	2240      	movs	r2, #64	; 0x40
 80034b8:	4313      	orrs	r3, r2
 80034ba:	b21b      	sxth	r3, r3
 80034bc:	b29a      	uxth	r2, r3
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	801a      	strh	r2, [r3, #0]
			default:
				break;
 80034c2:	46c0      	nop			; (mov r8, r8)
			}
	if(*pReg & USB_EP_SW_BUF_RX){
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	881b      	ldrh	r3, [r3, #0]
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	001a      	movs	r2, r3
 80034cc:	2340      	movs	r3, #64	; 0x40
 80034ce:	4013      	ands	r3, r2
 80034d0:	d009      	beq.n	80034e6 <ep_read+0xda>
		return pma_read(pBuf, bufLen, &(pTbl->rx1));
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	1d1a      	adds	r2, r3, #4
 80034d6:	1d3b      	adds	r3, r7, #4
 80034d8:	8819      	ldrh	r1, [r3, #0]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	0018      	movs	r0, r3
 80034de:	f7ff ff2f 	bl	8003340 <pma_read>
 80034e2:	0003      	movs	r3, r0
 80034e4:	e03d      	b.n	8003562 <ep_read+0x156>
	} else {
		return pma_read(pBuf, bufLen, &(pTbl->rx0));
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	1d3b      	adds	r3, r7, #4
 80034ea:	8819      	ldrh	r1, [r3, #0]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	0018      	movs	r0, r3
 80034f0:	f7ff ff26 	bl	8003340 <pma_read>
 80034f4:	0003      	movs	r3, r0
 80034f6:	e034      	b.n	8003562 <ep_read+0x156>
	}
	case (USB_EP_RX_VALID | USB_EP_ISOCHRONOUS):
			if(*pReg & USB_EP_DTOG_RX){
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	881b      	ldrh	r3, [r3, #0]
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	001a      	movs	r2, r3
 8003500:	2380      	movs	r3, #128	; 0x80
 8003502:	01db      	lsls	r3, r3, #7
 8003504:	4013      	ands	r3, r2
 8003506:	d009      	beq.n	800351c <ep_read+0x110>
				return pma_read(pBuf, bufLen, &(pTbl->rx1));
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	1d1a      	adds	r2, r3, #4
 800350c:	1d3b      	adds	r3, r7, #4
 800350e:	8819      	ldrh	r1, [r3, #0]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	0018      	movs	r0, r3
 8003514:	f7ff ff14 	bl	8003340 <pma_read>
 8003518:	0003      	movs	r3, r0
 800351a:	e022      	b.n	8003562 <ep_read+0x156>
			} else {
				return pma_read(pBuf, bufLen, &(pTbl->rx0));
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	1d3b      	adds	r3, r7, #4
 8003520:	8819      	ldrh	r1, [r3, #0]
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	0018      	movs	r0, r3
 8003526:	f7ff ff0b 	bl	8003340 <pma_read>
 800352a:	0003      	movs	r3, r0
 800352c:	e019      	b.n	8003562 <ep_read+0x156>
			}
	case (USB_EP_RX_NAK | USB_EP_BULK):
	case (USB_EP_RX_NAK | USB_EP_CONTROL):
	case (USB_EP_RX_NAK | USB_EP_INTERRUPT):
	{
		int32_t res = pma_read(pBuf, bufLen, &(pTbl->rx));
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	1d1a      	adds	r2, r3, #4
 8003532:	1d3b      	adds	r3, r7, #4
 8003534:	8819      	ldrh	r1, [r3, #0]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	0018      	movs	r0, r3
 800353a:	f7ff ff01 	bl	8003340 <pma_read>
 800353e:	0003      	movs	r3, r0
 8003540:	60fb      	str	r3, [r7, #12]
		EP_RX_VALID(pReg);
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	881b      	ldrh	r3, [r3, #0]
 8003546:	b29b      	uxth	r3, r3
 8003548:	22c0      	movs	r2, #192	; 0xc0
 800354a:	0192      	lsls	r2, r2, #6
 800354c:	4053      	eors	r3, r2
 800354e:	b29b      	uxth	r3, r3
 8003550:	4a08      	ldr	r2, [pc, #32]	; (8003574 <ep_read+0x168>)
 8003552:	4013      	ands	r3, r2
 8003554:	b29a      	uxth	r2, r3
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	801a      	strh	r2, [r3, #0]
		return res;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	e001      	b.n	8003562 <ep_read+0x156>
	}
	default:
		return -1;
 800355e:	2301      	movs	r3, #1
 8003560:	425b      	negs	r3, r3
	}
}
 8003562:	0018      	movs	r0, r3
 8003564:	46bd      	mov	sp, r7
 8003566:	b006      	add	sp, #24
 8003568:	bd80      	pop	{r7, pc}
 800356a:	46c0      	nop			; (mov r8, r8)
 800356c:	00004040 	.word	0x00004040
 8003570:	ffff8f8f 	.word	0xffff8f8f
 8003574:	ffffbf8f 	.word	0xffffbf8f

08003578 <pma_write>:


static void pma_write (uint8_t *pBuf, uint16_t bufLen, pma_rec *pTx){
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	607a      	str	r2, [r7, #4]
 8003582:	200a      	movs	r0, #10
 8003584:	183b      	adds	r3, r7, r0
 8003586:	1c0a      	adds	r2, r1, #0
 8003588:	801a      	strh	r2, [r3, #0]
	uint16_t *pPma = (void*)(USB_PMAADDR + pTx->address);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	4a19      	ldr	r2, [pc, #100]	; (80035f4 <pma_write+0x7c>)
 8003590:	4694      	mov	ip, r2
 8003592:	4463      	add	r3, ip
 8003594:	617b      	str	r3, [r7, #20]
	pTx->count = bufLen;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	183a      	adds	r2, r7, r0
 800359a:	8812      	ldrh	r2, [r2, #0]
 800359c:	805a      	strh	r2, [r3, #2]

	while(bufLen > 1){
 800359e:	e017      	b.n	80035d0 <pma_write+0x58>
		*pPma++ = pBuf[1] << 8 | pBuf[0];
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	3301      	adds	r3, #1
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	021b      	lsls	r3, r3, #8
 80035a8:	b21a      	sxth	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	b21b      	sxth	r3, r3
 80035b0:	4313      	orrs	r3, r2
 80035b2:	b219      	sxth	r1, r3
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	1c9a      	adds	r2, r3, #2
 80035b8:	617a      	str	r2, [r7, #20]
 80035ba:	b28a      	uxth	r2, r1
 80035bc:	801a      	strh	r2, [r3, #0]
		pBuf += 2;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	3302      	adds	r3, #2
 80035c2:	60fb      	str	r3, [r7, #12]
		bufLen -= 2;
 80035c4:	220a      	movs	r2, #10
 80035c6:	18bb      	adds	r3, r7, r2
 80035c8:	18ba      	adds	r2, r7, r2
 80035ca:	8812      	ldrh	r2, [r2, #0]
 80035cc:	3a02      	subs	r2, #2
 80035ce:	801a      	strh	r2, [r3, #0]
	while(bufLen > 1){
 80035d0:	220a      	movs	r2, #10
 80035d2:	18bb      	adds	r3, r7, r2
 80035d4:	881b      	ldrh	r3, [r3, #0]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d8e2      	bhi.n	80035a0 <pma_write+0x28>
	}
	if(bufLen){
 80035da:	18bb      	adds	r3, r7, r2
 80035dc:	881b      	ldrh	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d004      	beq.n	80035ec <pma_write+0x74>
		*pPma = *pBuf;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	801a      	strh	r2, [r3, #0]
	}
}
 80035ec:	46c0      	nop			; (mov r8, r8)
 80035ee:	46bd      	mov	sp, r7
 80035f0:	b006      	add	sp, #24
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	40006000 	.word	0x40006000

080035f8 <ep_write>:


int32_t ep_write (uint8_t ep, void *pBuf, uint16_t bufLen){
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6039      	str	r1, [r7, #0]
 8003600:	0011      	movs	r1, r2
 8003602:	1dfb      	adds	r3, r7, #7
 8003604:	1c02      	adds	r2, r0, #0
 8003606:	701a      	strb	r2, [r3, #0]
 8003608:	1d3b      	adds	r3, r7, #4
 800360a:	1c0a      	adds	r2, r1, #0
 800360c:	801a      	strh	r2, [r3, #0]
	pma_table *pTbl = EPT(ep);
 800360e:	1dfb      	adds	r3, r7, #7
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	0018      	movs	r0, r3
 8003614:	f7ff fae4 	bl	8002be0 <EPT>
 8003618:	0003      	movs	r3, r0
 800361a:	60fb      	str	r3, [r7, #12]
	volatile uint16_t *pReg = EPR(ep);
 800361c:	1dfb      	adds	r3, r7, #7
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	0018      	movs	r0, r3
 8003622:	f7ff faf1 	bl	8002c08 <EPR>
 8003626:	0003      	movs	r3, r0
 8003628:	60bb      	str	r3, [r7, #8]
	switch(*pReg & (USB_EPTX_STAT | USB_EP_T_FIELD | USB_EP_KIND)){
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	881b      	ldrh	r3, [r3, #0]
 800362e:	b29b      	uxth	r3, r3
 8003630:	001a      	movs	r2, r3
 8003632:	23e6      	movs	r3, #230	; 0xe6
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	4013      	ands	r3, r2
 8003638:	22c4      	movs	r2, #196	; 0xc4
 800363a:	00d2      	lsls	r2, r2, #3
 800363c:	4293      	cmp	r3, r2
 800363e:	d059      	beq.n	80036f4 <ep_write+0xfc>
 8003640:	22c4      	movs	r2, #196	; 0xc4
 8003642:	00d2      	lsls	r2, r2, #3
 8003644:	4293      	cmp	r3, r2
 8003646:	dd00      	ble.n	800364a <ep_write+0x52>
 8003648:	e067      	b.n	800371a <ep_write+0x122>
 800364a:	2286      	movs	r2, #134	; 0x86
 800364c:	00d2      	lsls	r2, r2, #3
 800364e:	4293      	cmp	r3, r2
 8003650:	d038      	beq.n	80036c4 <ep_write+0xcc>
 8003652:	2286      	movs	r2, #134	; 0x86
 8003654:	00d2      	lsls	r2, r2, #3
 8003656:	4293      	cmp	r3, r2
 8003658:	dc5f      	bgt.n	800371a <ep_write+0x122>
 800365a:	2288      	movs	r2, #136	; 0x88
 800365c:	0092      	lsls	r2, r2, #2
 800365e:	4293      	cmp	r3, r2
 8003660:	d048      	beq.n	80036f4 <ep_write+0xfc>
 8003662:	2288      	movs	r2, #136	; 0x88
 8003664:	0092      	lsls	r2, r2, #2
 8003666:	4293      	cmp	r3, r2
 8003668:	dc57      	bgt.n	800371a <ep_write+0x122>
 800366a:	2b20      	cmp	r3, #32
 800366c:	d042      	beq.n	80036f4 <ep_write+0xfc>
 800366e:	2290      	movs	r2, #144	; 0x90
 8003670:	0052      	lsls	r2, r2, #1
 8003672:	4293      	cmp	r3, r2
 8003674:	d151      	bne.n	800371a <ep_write+0x122>
	case (USB_EP_TX_NAK | USB_EP_BULK | USB_EP_KIND):
			if(*pReg & USB_EP_SW_BUF_TX){
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	881b      	ldrh	r3, [r3, #0]
 800367a:	b29b      	uxth	r3, r3
 800367c:	001a      	movs	r2, r3
 800367e:	2380      	movs	r3, #128	; 0x80
 8003680:	01db      	lsls	r3, r3, #7
 8003682:	4013      	ands	r3, r2
 8003684:	d008      	beq.n	8003698 <ep_write+0xa0>
				pma_write(pBuf, bufLen, &(pTbl->tx1));
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	1d1a      	adds	r2, r3, #4
 800368a:	1d3b      	adds	r3, r7, #4
 800368c:	8819      	ldrh	r1, [r3, #0]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	0018      	movs	r0, r3
 8003692:	f7ff ff71 	bl	8003578 <pma_write>
 8003696:	e006      	b.n	80036a6 <ep_write+0xae>
			} else {
				pma_write(pBuf, bufLen, &(pTbl->tx0));
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	1d3b      	adds	r3, r7, #4
 800369c:	8819      	ldrh	r1, [r3, #0]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	0018      	movs	r0, r3
 80036a2:	f7ff ff69 	bl	8003578 <pma_write>
			}
	*pReg = (*pReg & USB_EPREG_MASK) | USB_EP_SW_BUF_TX;
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	881b      	ldrh	r3, [r3, #0]
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	b21b      	sxth	r3, r3
 80036ae:	4a1f      	ldr	r2, [pc, #124]	; (800372c <ep_write+0x134>)
 80036b0:	4013      	ands	r3, r2
 80036b2:	b21b      	sxth	r3, r3
 80036b4:	2280      	movs	r2, #128	; 0x80
 80036b6:	01d2      	lsls	r2, r2, #7
 80036b8:	4313      	orrs	r3, r2
 80036ba:	b21b      	sxth	r3, r3
 80036bc:	b29a      	uxth	r2, r3
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	801a      	strh	r2, [r3, #0]
	break;
 80036c2:	e02d      	b.n	8003720 <ep_write+0x128>
	case (USB_EP_TX_VALID | USB_EP_ISOCHRONOUS):
			if(!(*pReg & USB_EP_DTOG_TX)){
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	881b      	ldrh	r3, [r3, #0]
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	001a      	movs	r2, r3
 80036cc:	2340      	movs	r3, #64	; 0x40
 80036ce:	4013      	ands	r3, r2
 80036d0:	d108      	bne.n	80036e4 <ep_write+0xec>
				pma_write(pBuf, bufLen, &(pTbl->tx1));
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	1d1a      	adds	r2, r3, #4
 80036d6:	1d3b      	adds	r3, r7, #4
 80036d8:	8819      	ldrh	r1, [r3, #0]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	0018      	movs	r0, r3
 80036de:	f7ff ff4b 	bl	8003578 <pma_write>
			} else {
				pma_write(pBuf, bufLen, &(pTbl->tx0));
			}
	break;
 80036e2:	e01d      	b.n	8003720 <ep_write+0x128>
				pma_write(pBuf, bufLen, &(pTbl->tx0));
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	1d3b      	adds	r3, r7, #4
 80036e8:	8819      	ldrh	r1, [r3, #0]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	0018      	movs	r0, r3
 80036ee:	f7ff ff43 	bl	8003578 <pma_write>
	break;
 80036f2:	e015      	b.n	8003720 <ep_write+0x128>
	case (USB_EP_TX_NAK | USB_EP_BULK):
	case (USB_EP_TX_NAK | USB_EP_CONTROL):
	case (USB_EP_TX_NAK | USB_EP_INTERRUPT):
		pma_write(pBuf, bufLen, &(pTbl->tx));
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	1d3b      	adds	r3, r7, #4
 80036f8:	8819      	ldrh	r1, [r3, #0]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	0018      	movs	r0, r3
 80036fe:	f7ff ff3b 	bl	8003578 <pma_write>
		EP_TX_VALID(pReg);
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	881b      	ldrh	r3, [r3, #0]
 8003706:	b29b      	uxth	r3, r3
 8003708:	2230      	movs	r2, #48	; 0x30
 800370a:	4053      	eors	r3, r2
 800370c:	b29b      	uxth	r3, r3
 800370e:	4a08      	ldr	r2, [pc, #32]	; (8003730 <ep_write+0x138>)
 8003710:	4013      	ands	r3, r2
 8003712:	b29a      	uxth	r2, r3
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	801a      	strh	r2, [r3, #0]
		break;
 8003718:	e002      	b.n	8003720 <ep_write+0x128>
	default:
		return -1;
 800371a:	2301      	movs	r3, #1
 800371c:	425b      	negs	r3, r3
 800371e:	e001      	b.n	8003724 <ep_write+0x12c>
	}
	return bufLen;
 8003720:	1d3b      	adds	r3, r7, #4
 8003722:	881b      	ldrh	r3, [r3, #0]
}
 8003724:	0018      	movs	r0, r3
 8003726:	46bd      	mov	sp, r7
 8003728:	b004      	add	sp, #16
 800372a:	bd80      	pop	{r7, pc}
 800372c:	ffff8f8f 	.word	0xffff8f8f
 8003730:	ffff8fbf 	.word	0xffff8fbf

08003734 <get_frame>:


uint16_t get_frame (void){
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
	return USB->FNR & USB_FNR_FN;
 8003738:	4a04      	ldr	r2, [pc, #16]	; (800374c <get_frame+0x18>)
 800373a:	2348      	movs	r3, #72	; 0x48
 800373c:	5ad3      	ldrh	r3, [r2, r3]
 800373e:	b29b      	uxth	r3, r3
 8003740:	055b      	lsls	r3, r3, #21
 8003742:	0d5b      	lsrs	r3, r3, #21
 8003744:	b29b      	uxth	r3, r3
}
 8003746:	0018      	movs	r0, r3
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40005c00 	.word	0x40005c00

08003750 <event_poll>:


void event_poll (usbd_device *pDev, usbd_event_callback callback){
 8003750:	b590      	push	{r4, r7, lr}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
	uint8_t _event;
	uint8_t _ep;
	uint16_t _istr = USB->ISTR;
 800375a:	497c      	ldr	r1, [pc, #496]	; (800394c <event_poll+0x1fc>)
 800375c:	2012      	movs	r0, #18
 800375e:	183b      	adds	r3, r7, r0
 8003760:	2244      	movs	r2, #68	; 0x44
 8003762:	5a8a      	ldrh	r2, [r1, r2]
 8003764:	801a      	strh	r2, [r3, #0]
	_ep = _istr & USB_ISTR_EP_ID;
 8003766:	183b      	adds	r3, r7, r0
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	b2da      	uxtb	r2, r3
 800376c:	2416      	movs	r4, #22
 800376e:	193b      	adds	r3, r7, r4
 8003770:	210f      	movs	r1, #15
 8003772:	400a      	ands	r2, r1
 8003774:	701a      	strb	r2, [r3, #0]
	if(_istr & USB_ISTR_CTR){
 8003776:	183b      	adds	r3, r7, r0
 8003778:	2200      	movs	r2, #0
 800377a:	5e9b      	ldrsh	r3, [r3, r2]
 800377c:	2b00      	cmp	r3, #0
 800377e:	da3b      	bge.n	80037f8 <event_poll+0xa8>
		volatile uint16_t *pReg = EPR(_ep);
 8003780:	193b      	adds	r3, r7, r4
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	0018      	movs	r0, r3
 8003786:	f7ff fa3f 	bl	8002c08 <EPR>
 800378a:	0003      	movs	r3, r0
 800378c:	60fb      	str	r3, [r7, #12]
		if(*pReg & USB_EP_CTR_TX){
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	881b      	ldrh	r3, [r3, #0]
 8003792:	b29b      	uxth	r3, r3
 8003794:	001a      	movs	r2, r3
 8003796:	2380      	movs	r3, #128	; 0x80
 8003798:	4013      	ands	r3, r2
 800379a:	d013      	beq.n	80037c4 <event_poll+0x74>
			*pReg &= (USB_EPREG_MASK ^ USB_EP_CTR_TX);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	881b      	ldrh	r3, [r3, #0]
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	4a6b      	ldr	r2, [pc, #428]	; (8003950 <event_poll+0x200>)
 80037a4:	4013      	ands	r3, r2
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	801a      	strh	r2, [r3, #0]
			_ep |= 0x80;
 80037ac:	193b      	adds	r3, r7, r4
 80037ae:	193a      	adds	r2, r7, r4
 80037b0:	7812      	ldrb	r2, [r2, #0]
 80037b2:	2180      	movs	r1, #128	; 0x80
 80037b4:	4249      	negs	r1, r1
 80037b6:	430a      	orrs	r2, r1
 80037b8:	701a      	strb	r2, [r3, #0]
			_event = USBD_EVENT_PACKET_TX;
 80037ba:	2317      	movs	r3, #23
 80037bc:	18fb      	adds	r3, r7, r3
 80037be:	2204      	movs	r2, #4
 80037c0:	701a      	strb	r2, [r3, #0]
 80037c2:	e0b4      	b.n	800392e <event_poll+0x1de>
		} else {
			*pReg &= (USB_EPREG_MASK ^ USB_EP_CTR_RX);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	881b      	ldrh	r3, [r3, #0]
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	4a62      	ldr	r2, [pc, #392]	; (8003954 <event_poll+0x204>)
 80037cc:	4013      	ands	r3, r2
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	801a      	strh	r2, [r3, #0]
			if(*pReg & USB_EP_SETUP){
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	b29b      	uxth	r3, r3
 80037da:	001a      	movs	r2, r3
 80037dc:	2380      	movs	r3, #128	; 0x80
 80037de:	011b      	lsls	r3, r3, #4
 80037e0:	4013      	ands	r3, r2
 80037e2:	d004      	beq.n	80037ee <event_poll+0x9e>
				_event = USBD_EVENT_PACKET_SETUP;
 80037e4:	2317      	movs	r3, #23
 80037e6:	18fb      	adds	r3, r7, r3
 80037e8:	2206      	movs	r2, #6
 80037ea:	701a      	strb	r2, [r3, #0]
 80037ec:	e09f      	b.n	800392e <event_poll+0x1de>
			} else {
				_event = USBD_EVENT_PACKET_RX;
 80037ee:	2317      	movs	r3, #23
 80037f0:	18fb      	adds	r3, r7, r3
 80037f2:	2205      	movs	r2, #5
 80037f4:	701a      	strb	r2, [r3, #0]
 80037f6:	e09a      	b.n	800392e <event_poll+0x1de>
			}
		}
	} else if (_istr & USB_ISTR_RESET){
 80037f8:	2312      	movs	r3, #18
 80037fa:	18fb      	adds	r3, r7, r3
 80037fc:	881a      	ldrh	r2, [r3, #0]
 80037fe:	2380      	movs	r3, #128	; 0x80
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	4013      	ands	r3, r2
 8003804:	d028      	beq.n	8003858 <event_poll+0x108>
		USB->ISTR &= ~USB_ISTR_RESET;
 8003806:	4a51      	ldr	r2, [pc, #324]	; (800394c <event_poll+0x1fc>)
 8003808:	2344      	movs	r3, #68	; 0x44
 800380a:	5ad3      	ldrh	r3, [r2, r3]
 800380c:	b29b      	uxth	r3, r3
 800380e:	4a4f      	ldr	r2, [pc, #316]	; (800394c <event_poll+0x1fc>)
 8003810:	4951      	ldr	r1, [pc, #324]	; (8003958 <event_poll+0x208>)
 8003812:	400b      	ands	r3, r1
 8003814:	b299      	uxth	r1, r3
 8003816:	2344      	movs	r3, #68	; 0x44
 8003818:	52d1      	strh	r1, [r2, r3]
		USB->BTABLE = 0;
 800381a:	4a4c      	ldr	r2, [pc, #304]	; (800394c <event_poll+0x1fc>)
 800381c:	2350      	movs	r3, #80	; 0x50
 800381e:	2100      	movs	r1, #0
 8003820:	52d1      	strh	r1, [r2, r3]
		for(uint8_t i = 0; i < 8; i++){
 8003822:	2315      	movs	r3, #21
 8003824:	18fb      	adds	r3, r7, r3
 8003826:	2200      	movs	r2, #0
 8003828:	701a      	strb	r2, [r3, #0]
 800382a:	e00b      	b.n	8003844 <event_poll+0xf4>
			ep_deConfig(i);
 800382c:	2415      	movs	r4, #21
 800382e:	193b      	adds	r3, r7, r4
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	0018      	movs	r0, r3
 8003834:	f7ff fd58 	bl	80032e8 <ep_deConfig>
		for(uint8_t i = 0; i < 8; i++){
 8003838:	0021      	movs	r1, r4
 800383a:	187b      	adds	r3, r7, r1
 800383c:	781a      	ldrb	r2, [r3, #0]
 800383e:	187b      	adds	r3, r7, r1
 8003840:	3201      	adds	r2, #1
 8003842:	701a      	strb	r2, [r3, #0]
 8003844:	2315      	movs	r3, #21
 8003846:	18fb      	adds	r3, r7, r3
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	2b07      	cmp	r3, #7
 800384c:	d9ee      	bls.n	800382c <event_poll+0xdc>
		}
		_event = USBD_EVENT_RESET;
 800384e:	2317      	movs	r3, #23
 8003850:	18fb      	adds	r3, r7, r3
 8003852:	2200      	movs	r2, #0
 8003854:	701a      	strb	r2, [r3, #0]
 8003856:	e06a      	b.n	800392e <event_poll+0x1de>
#if !defined(USBD_SOF_DISABLED)
	} else if (_istr & USB_ISTR_SOF){
 8003858:	2312      	movs	r3, #18
 800385a:	18fb      	adds	r3, r7, r3
 800385c:	881a      	ldrh	r2, [r3, #0]
 800385e:	2380      	movs	r3, #128	; 0x80
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4013      	ands	r3, r2
 8003864:	d00e      	beq.n	8003884 <event_poll+0x134>
		_event = USBD_EVENT_SOF;
 8003866:	2317      	movs	r3, #23
 8003868:	18fb      	adds	r3, r7, r3
 800386a:	2201      	movs	r2, #1
 800386c:	701a      	strb	r2, [r3, #0]
		USB->ISTR &= ~USB_ISTR_SOF;
 800386e:	4a37      	ldr	r2, [pc, #220]	; (800394c <event_poll+0x1fc>)
 8003870:	2344      	movs	r3, #68	; 0x44
 8003872:	5ad3      	ldrh	r3, [r2, r3]
 8003874:	b29b      	uxth	r3, r3
 8003876:	4a35      	ldr	r2, [pc, #212]	; (800394c <event_poll+0x1fc>)
 8003878:	4938      	ldr	r1, [pc, #224]	; (800395c <event_poll+0x20c>)
 800387a:	400b      	ands	r3, r1
 800387c:	b299      	uxth	r1, r3
 800387e:	2344      	movs	r3, #68	; 0x44
 8003880:	52d1      	strh	r1, [r2, r3]
 8003882:	e054      	b.n	800392e <event_poll+0x1de>
#endif
	} else if (_istr & USB_ISTR_WKUP){
 8003884:	2312      	movs	r3, #18
 8003886:	18fb      	adds	r3, r7, r3
 8003888:	881a      	ldrh	r2, [r3, #0]
 800388a:	2380      	movs	r3, #128	; 0x80
 800388c:	015b      	lsls	r3, r3, #5
 800388e:	4013      	ands	r3, r2
 8003890:	d018      	beq.n	80038c4 <event_poll+0x174>
		_event = USBD_EVENT_WAKEUP;
 8003892:	2317      	movs	r3, #23
 8003894:	18fb      	adds	r3, r7, r3
 8003896:	2203      	movs	r2, #3
 8003898:	701a      	strb	r2, [r3, #0]
		USB->CNTR &= ~USB_CNTR_FSUSP;
 800389a:	4a2c      	ldr	r2, [pc, #176]	; (800394c <event_poll+0x1fc>)
 800389c:	2340      	movs	r3, #64	; 0x40
 800389e:	5ad3      	ldrh	r3, [r2, r3]
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	4a2a      	ldr	r2, [pc, #168]	; (800394c <event_poll+0x1fc>)
 80038a4:	2108      	movs	r1, #8
 80038a6:	438b      	bics	r3, r1
 80038a8:	b299      	uxth	r1, r3
 80038aa:	2340      	movs	r3, #64	; 0x40
 80038ac:	52d1      	strh	r1, [r2, r3]
		USB->ISTR &= ~USB_ISTR_WKUP;
 80038ae:	4a27      	ldr	r2, [pc, #156]	; (800394c <event_poll+0x1fc>)
 80038b0:	2344      	movs	r3, #68	; 0x44
 80038b2:	5ad3      	ldrh	r3, [r2, r3]
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	4a25      	ldr	r2, [pc, #148]	; (800394c <event_poll+0x1fc>)
 80038b8:	4929      	ldr	r1, [pc, #164]	; (8003960 <event_poll+0x210>)
 80038ba:	400b      	ands	r3, r1
 80038bc:	b299      	uxth	r1, r3
 80038be:	2344      	movs	r3, #68	; 0x44
 80038c0:	52d1      	strh	r1, [r2, r3]
 80038c2:	e034      	b.n	800392e <event_poll+0x1de>
	} else if (_istr & USB_ISTR_SUSP){
 80038c4:	2312      	movs	r3, #18
 80038c6:	18fb      	adds	r3, r7, r3
 80038c8:	881a      	ldrh	r2, [r3, #0]
 80038ca:	2380      	movs	r3, #128	; 0x80
 80038cc:	011b      	lsls	r3, r3, #4
 80038ce:	4013      	ands	r3, r2
 80038d0:	d018      	beq.n	8003904 <event_poll+0x1b4>
		_event = USBD_EVENT_SUSPEND;
 80038d2:	2317      	movs	r3, #23
 80038d4:	18fb      	adds	r3, r7, r3
 80038d6:	2202      	movs	r2, #2
 80038d8:	701a      	strb	r2, [r3, #0]
		USB->CNTR |= USB_CNTR_FSUSP;
 80038da:	4a1c      	ldr	r2, [pc, #112]	; (800394c <event_poll+0x1fc>)
 80038dc:	2340      	movs	r3, #64	; 0x40
 80038de:	5ad3      	ldrh	r3, [r2, r3]
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	4a1a      	ldr	r2, [pc, #104]	; (800394c <event_poll+0x1fc>)
 80038e4:	2108      	movs	r1, #8
 80038e6:	430b      	orrs	r3, r1
 80038e8:	b299      	uxth	r1, r3
 80038ea:	2340      	movs	r3, #64	; 0x40
 80038ec:	52d1      	strh	r1, [r2, r3]
		USB->ISTR &= ~USB_ISTR_SUSP;
 80038ee:	4a17      	ldr	r2, [pc, #92]	; (800394c <event_poll+0x1fc>)
 80038f0:	2344      	movs	r3, #68	; 0x44
 80038f2:	5ad3      	ldrh	r3, [r2, r3]
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	4a15      	ldr	r2, [pc, #84]	; (800394c <event_poll+0x1fc>)
 80038f8:	491a      	ldr	r1, [pc, #104]	; (8003964 <event_poll+0x214>)
 80038fa:	400b      	ands	r3, r1
 80038fc:	b299      	uxth	r1, r3
 80038fe:	2344      	movs	r3, #68	; 0x44
 8003900:	52d1      	strh	r1, [r2, r3]
 8003902:	e014      	b.n	800392e <event_poll+0x1de>
	} else if (_istr & USB_ISTR_ERR){
 8003904:	2312      	movs	r3, #18
 8003906:	18fb      	adds	r3, r7, r3
 8003908:	881a      	ldrh	r2, [r3, #0]
 800390a:	2380      	movs	r3, #128	; 0x80
 800390c:	019b      	lsls	r3, r3, #6
 800390e:	4013      	ands	r3, r2
 8003910:	d017      	beq.n	8003942 <event_poll+0x1f2>
		USB->ISTR &= ~USB_ISTR_ERR;
 8003912:	4a0e      	ldr	r2, [pc, #56]	; (800394c <event_poll+0x1fc>)
 8003914:	2344      	movs	r3, #68	; 0x44
 8003916:	5ad3      	ldrh	r3, [r2, r3]
 8003918:	b29b      	uxth	r3, r3
 800391a:	4a0c      	ldr	r2, [pc, #48]	; (800394c <event_poll+0x1fc>)
 800391c:	4912      	ldr	r1, [pc, #72]	; (8003968 <event_poll+0x218>)
 800391e:	400b      	ands	r3, r1
 8003920:	b299      	uxth	r1, r3
 8003922:	2344      	movs	r3, #68	; 0x44
 8003924:	52d1      	strh	r1, [r2, r3]
		_event = USBD_EVENT_ERROR;
 8003926:	2317      	movs	r3, #23
 8003928:	18fb      	adds	r3, r7, r3
 800392a:	2207      	movs	r2, #7
 800392c:	701a      	strb	r2, [r3, #0]
	} else {
		return;
	}
	callback(pDev, _event, _ep);
 800392e:	2316      	movs	r3, #22
 8003930:	18fb      	adds	r3, r7, r3
 8003932:	781a      	ldrb	r2, [r3, #0]
 8003934:	2317      	movs	r3, #23
 8003936:	18fb      	adds	r3, r7, r3
 8003938:	7819      	ldrb	r1, [r3, #0]
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	4798      	blx	r3
 8003940:	e000      	b.n	8003944 <event_poll+0x1f4>
		return;
 8003942:	46c0      	nop			; (mov r8, r8)
}
 8003944:	46bd      	mov	sp, r7
 8003946:	b007      	add	sp, #28
 8003948:	bd90      	pop	{r4, r7, pc}
 800394a:	46c0      	nop			; (mov r8, r8)
 800394c:	40005c00 	.word	0x40005c00
 8003950:	ffff8f0f 	.word	0xffff8f0f
 8003954:	00000f8f 	.word	0x00000f8f
 8003958:	fffffbff 	.word	0xfffffbff
 800395c:	fffffdff 	.word	0xfffffdff
 8003960:	ffffefff 	.word	0xffffefff
 8003964:	fffff7ff 	.word	0xfffff7ff
 8003968:	ffffdfff 	.word	0xffffdfff

0800396c <fnv1a32_turn>:


static uint32_t fnv1a32_turn (uint32_t fnv, uint32_t data){
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < 4; i++){
 8003976:	230f      	movs	r3, #15
 8003978:	18fb      	adds	r3, r7, r3
 800397a:	2200      	movs	r2, #0
 800397c:	701a      	strb	r2, [r3, #0]
 800397e:	e01b      	b.n	80039b8 <fnv1a32_turn+0x4c>
		fnv ^= (data & 0xFF);
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	22ff      	movs	r2, #255	; 0xff
 8003984:	4013      	ands	r3, r2
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	4053      	eors	r3, r2
 800398a:	607b      	str	r3, [r7, #4]
		fnv *= 16777619;
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	0013      	movs	r3, r2
 8003990:	041b      	lsls	r3, r3, #16
 8003992:	189b      	adds	r3, r3, r2
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	189b      	adds	r3, r3, r2
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	189b      	adds	r3, r3, r2
 800399c:	00db      	lsls	r3, r3, #3
 800399e:	189b      	adds	r3, r3, r2
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	189b      	adds	r3, r3, r2
 80039a4:	607b      	str	r3, [r7, #4]
		data >>= 8;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	0a1b      	lsrs	r3, r3, #8
 80039aa:	603b      	str	r3, [r7, #0]
	for (uint8_t i = 0; i < 4; i++){
 80039ac:	210f      	movs	r1, #15
 80039ae:	187b      	adds	r3, r7, r1
 80039b0:	781a      	ldrb	r2, [r3, #0]
 80039b2:	187b      	adds	r3, r7, r1
 80039b4:	3201      	adds	r2, #1
 80039b6:	701a      	strb	r2, [r3, #0]
 80039b8:	230f      	movs	r3, #15
 80039ba:	18fb      	adds	r3, r7, r3
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	2b03      	cmp	r3, #3
 80039c0:	d9de      	bls.n	8003980 <fnv1a32_turn+0x14>
	}
	return fnv;
 80039c2:	687b      	ldr	r3, [r7, #4]
}
 80039c4:	0018      	movs	r0, r3
 80039c6:	46bd      	mov	sp, r7
 80039c8:	b004      	add	sp, #16
 80039ca:	bd80      	pop	{r7, pc}

080039cc <get_serial_num_desc>:


uint16_t get_serial_num_desc (void *pBuffer){
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b088      	sub	sp, #32
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
	struct usb_string_descriptor *pDesc = pBuffer;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	617b      	str	r3, [r7, #20]
	uint16_t *pStr = pDesc->wString;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	3302      	adds	r3, #2
 80039dc:	61fb      	str	r3, [r7, #28]
	uint32_t fnv = 2166136261;
 80039de:	4b23      	ldr	r3, [pc, #140]	; (8003a6c <get_serial_num_desc+0xa0>)
 80039e0:	613b      	str	r3, [r7, #16]
	fnv = fnv1a32_turn(fnv, *(uint32_t*)(UID_BASE + 0x00));
 80039e2:	4b23      	ldr	r3, [pc, #140]	; (8003a70 <get_serial_num_desc+0xa4>)
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	0011      	movs	r1, r2
 80039ea:	0018      	movs	r0, r3
 80039ec:	f7ff ffbe 	bl	800396c <fnv1a32_turn>
 80039f0:	0003      	movs	r3, r0
 80039f2:	613b      	str	r3, [r7, #16]
	fnv = fnv1a32_turn(fnv, *(uint32_t*)(UID_BASE + 0x04));
 80039f4:	4b1f      	ldr	r3, [pc, #124]	; (8003a74 <get_serial_num_desc+0xa8>)
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	0011      	movs	r1, r2
 80039fc:	0018      	movs	r0, r3
 80039fe:	f7ff ffb5 	bl	800396c <fnv1a32_turn>
 8003a02:	0003      	movs	r3, r0
 8003a04:	613b      	str	r3, [r7, #16]
	fnv = fnv1a32_turn(fnv, *(uint32_t*)(UID_BASE + 0x14));
 8003a06:	4b1c      	ldr	r3, [pc, #112]	; (8003a78 <get_serial_num_desc+0xac>)
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	0011      	movs	r1, r2
 8003a0e:	0018      	movs	r0, r3
 8003a10:	f7ff ffac 	bl	800396c <fnv1a32_turn>
 8003a14:	0003      	movs	r3, r0
 8003a16:	613b      	str	r3, [r7, #16]
	for(uint8_t i = 28; i >= 0; i -= 4){
 8003a18:	231b      	movs	r3, #27
 8003a1a:	18fb      	adds	r3, r7, r3
 8003a1c:	221c      	movs	r2, #28
 8003a1e:	701a      	strb	r2, [r3, #0]
		uint16_t c = (fnv >> i) & 0x0F;
 8003a20:	231b      	movs	r3, #27
 8003a22:	18fb      	adds	r3, r7, r3
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	40da      	lsrs	r2, r3
 8003a2a:	0013      	movs	r3, r2
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	200e      	movs	r0, #14
 8003a30:	183b      	adds	r3, r7, r0
 8003a32:	210f      	movs	r1, #15
 8003a34:	400a      	ands	r2, r1
 8003a36:	801a      	strh	r2, [r3, #0]
		c += (c < 10) ? '0' : ('A' - 10);
 8003a38:	183b      	adds	r3, r7, r0
 8003a3a:	881b      	ldrh	r3, [r3, #0]
 8003a3c:	2b09      	cmp	r3, #9
 8003a3e:	d801      	bhi.n	8003a44 <get_serial_num_desc+0x78>
 8003a40:	2330      	movs	r3, #48	; 0x30
 8003a42:	e000      	b.n	8003a46 <get_serial_num_desc+0x7a>
 8003a44:	2337      	movs	r3, #55	; 0x37
 8003a46:	200e      	movs	r0, #14
 8003a48:	183a      	adds	r2, r7, r0
 8003a4a:	1839      	adds	r1, r7, r0
 8003a4c:	8809      	ldrh	r1, [r1, #0]
 8003a4e:	185b      	adds	r3, r3, r1
 8003a50:	8013      	strh	r3, [r2, #0]
		*pStr++ = c;
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	1c9a      	adds	r2, r3, #2
 8003a56:	61fa      	str	r2, [r7, #28]
 8003a58:	183a      	adds	r2, r7, r0
 8003a5a:	8812      	ldrh	r2, [r2, #0]
 8003a5c:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 28; i >= 0; i -= 4){
 8003a5e:	221b      	movs	r2, #27
 8003a60:	18bb      	adds	r3, r7, r2
 8003a62:	18ba      	adds	r2, r7, r2
 8003a64:	7812      	ldrb	r2, [r2, #0]
 8003a66:	3a04      	subs	r2, #4
 8003a68:	701a      	strb	r2, [r3, #0]
 8003a6a:	e7d9      	b.n	8003a20 <get_serial_num_desc+0x54>
 8003a6c:	811c9dc5 	.word	0x811c9dc5
 8003a70:	1ffff7ac 	.word	0x1ffff7ac
 8003a74:	1ffff7b0 	.word	0x1ffff7b0
 8003a78:	1ffff7c0 	.word	0x1ffff7c0

08003a7c <USBD_Init>:
inline static void USBD_Init(usbd_device *pDev, const struct usbd_driver *pDrv, const uint8_t ep0size, uint32_t *pBuf, const uint16_t bufLen){
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	603b      	str	r3, [r7, #0]
 8003a88:	1dfb      	adds	r3, r7, #7
 8003a8a:	701a      	strb	r2, [r3, #0]
	pDev->pDriver = pDrv;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	601a      	str	r2, [r3, #0]
	pDev->deviceStatus.ep0_size = ep0size;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	1dfa      	adds	r2, r7, #7
 8003a96:	2160      	movs	r1, #96	; 0x60
 8003a98:	7812      	ldrb	r2, [r2, #0]
 8003a9a:	545a      	strb	r2, [r3, r1]
	pDev->deviceStatus.pData = pBuf;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	659a      	str	r2, [r3, #88]	; 0x58
	pDev->deviceStatus.pDataBuffer = pBuf;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	655a      	str	r2, [r3, #84]	; 0x54
	pDev->deviceStatus.data_max_size = bufLen - __builtin_offsetof(usbd_control_request, data);
 8003aa8:	2318      	movs	r3, #24
 8003aaa:	18fb      	adds	r3, r7, r3
 8003aac:	881b      	ldrh	r3, [r3, #0]
 8003aae:	3b08      	subs	r3, #8
 8003ab0:	b299      	uxth	r1, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	225e      	movs	r2, #94	; 0x5e
 8003ab6:	5299      	strh	r1, [r3, r2]
}
 8003ab8:	46c0      	nop			; (mov r8, r8)
 8003aba:	46bd      	mov	sp, r7
 8003abc:	b004      	add	sp, #16
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <USBD_Register_Control>:
inline static void USBD_Register_Control(usbd_device *pDev, usbd_controll_callback callback){
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
	pDev->controlCallback = callback;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	605a      	str	r2, [r3, #4]
}
 8003ad0:	46c0      	nop			; (mov r8, r8)
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	b002      	add	sp, #8
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <USBD_Register_Config>:
inline static void USBD_Register_Config(usbd_device *pDev, usbd_config_callback callback){
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
	pDev->configCallback = callback;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	60da      	str	r2, [r3, #12]
}
 8003ae8:	46c0      	nop			; (mov r8, r8)
 8003aea:	46bd      	mov	sp, r7
 8003aec:	b002      	add	sp, #8
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <USBD_Register_Descriptor>:
inline static void USBD_Register_Descriptor(usbd_device *pDev, usbd_descriptor_callback callback){
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
	pDev->descriptorCallback = callback;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	611a      	str	r2, [r3, #16]
}
 8003b00:	46c0      	nop			; (mov r8, r8)
 8003b02:	46bd      	mov	sp, r7
 8003b04:	b002      	add	sp, #8
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <USBD_EP_Config>:
inline static bool USBD_EP_Config(usbd_device *pDev, uint8_t ep, uint8_t epType, uint16_t epSize){
 8003b08:	b590      	push	{r4, r7, lr}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	000c      	movs	r4, r1
 8003b12:	0010      	movs	r0, r2
 8003b14:	0019      	movs	r1, r3
 8003b16:	1cfb      	adds	r3, r7, #3
 8003b18:	1c22      	adds	r2, r4, #0
 8003b1a:	701a      	strb	r2, [r3, #0]
 8003b1c:	1cbb      	adds	r3, r7, #2
 8003b1e:	1c02      	adds	r2, r0, #0
 8003b20:	701a      	strb	r2, [r3, #0]
 8003b22:	003b      	movs	r3, r7
 8003b24:	1c0a      	adds	r2, r1, #0
 8003b26:	801a      	strh	r2, [r3, #0]
	return pDev->pDriver->epConfig(ep, epType, epSize);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	003a      	movs	r2, r7
 8003b30:	8814      	ldrh	r4, [r2, #0]
 8003b32:	1cba      	adds	r2, r7, #2
 8003b34:	7811      	ldrb	r1, [r2, #0]
 8003b36:	1cfa      	adds	r2, r7, #3
 8003b38:	7810      	ldrb	r0, [r2, #0]
 8003b3a:	0022      	movs	r2, r4
 8003b3c:	4798      	blx	r3
 8003b3e:	0003      	movs	r3, r0
}
 8003b40:	0018      	movs	r0, r3
 8003b42:	46bd      	mov	sp, r7
 8003b44:	b003      	add	sp, #12
 8003b46:	bd90      	pop	{r4, r7, pc}

08003b48 <USBD_EP_Deconfig>:
inline static void USBD_EP_Deconfig(usbd_device *pDev, uint8_t ep){
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	000a      	movs	r2, r1
 8003b52:	1cfb      	adds	r3, r7, #3
 8003b54:	701a      	strb	r2, [r3, #0]
	pDev->pDriver->epDeConfig(ep);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	1cfa      	adds	r2, r7, #3
 8003b5e:	7812      	ldrb	r2, [r2, #0]
 8003b60:	0010      	movs	r0, r2
 8003b62:	4798      	blx	r3
}
 8003b64:	46c0      	nop			; (mov r8, r8)
 8003b66:	46bd      	mov	sp, r7
 8003b68:	b002      	add	sp, #8
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <USBD_Register_Endpoint>:
inline static void USBD_Register_Endpoint(usbd_device *pDev, uint8_t ep, usbd_event_callback callback){
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	607a      	str	r2, [r7, #4]
 8003b76:	200b      	movs	r0, #11
 8003b78:	183b      	adds	r3, r7, r0
 8003b7a:	1c0a      	adds	r2, r1, #0
 8003b7c:	701a      	strb	r2, [r3, #0]
	pDev->endpoint[ep & 0x07] = callback;
 8003b7e:	183b      	adds	r3, r7, r0
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	2207      	movs	r2, #7
 8003b84:	4013      	ands	r3, r2
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	330c      	adds	r3, #12
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	18d3      	adds	r3, r2, r3
 8003b8e:	3304      	adds	r3, #4
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	601a      	str	r2, [r3, #0]
}
 8003b94:	46c0      	nop			; (mov r8, r8)
 8003b96:	46bd      	mov	sp, r7
 8003b98:	b004      	add	sp, #16
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <USBD_EP_Read>:
inline static int32_t USBD_EP_Read(usbd_device *pDev, uint8_t ep, void *pBuf, uint16_t bufLen){
 8003b9c:	b5b0      	push	{r4, r5, r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	0008      	movs	r0, r1
 8003ba6:	607a      	str	r2, [r7, #4]
 8003ba8:	0019      	movs	r1, r3
 8003baa:	250b      	movs	r5, #11
 8003bac:	197b      	adds	r3, r7, r5
 8003bae:	1c02      	adds	r2, r0, #0
 8003bb0:	701a      	strb	r2, [r3, #0]
 8003bb2:	2008      	movs	r0, #8
 8003bb4:	183b      	adds	r3, r7, r0
 8003bb6:	1c0a      	adds	r2, r1, #0
 8003bb8:	801a      	strh	r2, [r3, #0]
	return pDev->pDriver->epRead(ep, pBuf, bufLen);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	183a      	adds	r2, r7, r0
 8003bc2:	8814      	ldrh	r4, [r2, #0]
 8003bc4:	6879      	ldr	r1, [r7, #4]
 8003bc6:	197a      	adds	r2, r7, r5
 8003bc8:	7810      	ldrb	r0, [r2, #0]
 8003bca:	0022      	movs	r2, r4
 8003bcc:	4798      	blx	r3
 8003bce:	0003      	movs	r3, r0
}
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	b004      	add	sp, #16
 8003bd6:	bdb0      	pop	{r4, r5, r7, pc}

08003bd8 <USBD_Enable>:
inline static void USBD_Enable(usbd_device *pDev, bool enable){
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	000a      	movs	r2, r1
 8003be2:	1cfb      	adds	r3, r7, #3
 8003be4:	701a      	strb	r2, [r3, #0]
	pDev->pDriver->enable(enable);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	1cfa      	adds	r2, r7, #3
 8003bee:	7812      	ldrb	r2, [r2, #0]
 8003bf0:	0010      	movs	r0, r2
 8003bf2:	4798      	blx	r3
}
 8003bf4:	46c0      	nop			; (mov r8, r8)
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	b002      	add	sp, #8
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <USBD_Connect>:
inline static uint8_t USBD_Connect(usbd_device *pDev, bool connect){
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	000a      	movs	r2, r1
 8003c06:	1cfb      	adds	r3, r7, #3
 8003c08:	701a      	strb	r2, [r3, #0]
	return pDev->pDriver->connect(connect);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	1cfa      	adds	r2, r7, #3
 8003c12:	7812      	ldrb	r2, [r2, #0]
 8003c14:	0010      	movs	r0, r2
 8003c16:	4798      	blx	r3
 8003c18:	0003      	movs	r3, r0
}
 8003c1a:	0018      	movs	r0, r3
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	b002      	add	sp, #8
 8003c20:	bd80      	pop	{r7, pc}
	...

08003c24 <winusb_get_desc>:
///@brief	function to get the WinUSB device descriptor
///@param	pReq pointer to the USB device control request structure
///@param	ppAddress pointer for the device descriptor
///@param	pLength pointer to return the length of the USB device configuration
///@return	status result of the USB
static usbd_status_respond winusb_get_desc(usbd_control_request *pReq, void** ppAddress, uint16_t *pLength){
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b088      	sub	sp, #32
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
	const uint8_t dType = pReq->wValue >> 8;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	885b      	ldrh	r3, [r3, #2]
 8003c34:	0a1b      	lsrs	r3, r3, #8
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	2019      	movs	r0, #25
 8003c3a:	183b      	adds	r3, r7, r0
 8003c3c:	701a      	strb	r2, [r3, #0]
	const uint16_t dNumber = pReq->wValue & 0xFF;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	885a      	ldrh	r2, [r3, #2]
 8003c42:	2316      	movs	r3, #22
 8003c44:	18fb      	adds	r3, r7, r3
 8003c46:	21ff      	movs	r1, #255	; 0xff
 8003c48:	400a      	ands	r2, r1
 8003c4a:	801a      	strh	r2, [r3, #0]
	const void *pDesc;
	uint16_t len = 0;
 8003c4c:	231a      	movs	r3, #26
 8003c4e:	18fb      	adds	r3, r7, r3
 8003c50:	2200      	movs	r2, #0
 8003c52:	801a      	strh	r2, [r3, #0]
	switch(dType){
 8003c54:	183b      	adds	r3, r7, r0
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	2b03      	cmp	r3, #3
 8003c5a:	d00f      	beq.n	8003c7c <winusb_get_desc+0x58>
 8003c5c:	dc24      	bgt.n	8003ca8 <winusb_get_desc+0x84>
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d002      	beq.n	8003c68 <winusb_get_desc+0x44>
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d003      	beq.n	8003c6e <winusb_get_desc+0x4a>
 8003c66:	e01f      	b.n	8003ca8 <winusb_get_desc+0x84>
	case USB_DESCRIPTOR_TYPE_DEVICE:
		pDesc = &device_desc;
 8003c68:	4b1b      	ldr	r3, [pc, #108]	; (8003cd8 <winusb_get_desc+0xb4>)
 8003c6a:	61fb      	str	r3, [r7, #28]
		break;
 8003c6c:	e01e      	b.n	8003cac <winusb_get_desc+0x88>
	case USB_DESCRIPTOR_TYPE_CONFIG:
		pDesc = &config_desc;
 8003c6e:	4b1b      	ldr	r3, [pc, #108]	; (8003cdc <winusb_get_desc+0xb8>)
 8003c70:	61fb      	str	r3, [r7, #28]
		len = sizeof(config_desc);
 8003c72:	231a      	movs	r3, #26
 8003c74:	18fb      	adds	r3, r7, r3
 8003c76:	2227      	movs	r2, #39	; 0x27
 8003c78:	801a      	strh	r2, [r3, #0]
		break;
 8003c7a:	e017      	b.n	8003cac <winusb_get_desc+0x88>
	case USB_DESCRIPTOR_TYPE_STRING:
		if(dNumber < 4){
 8003c7c:	2216      	movs	r2, #22
 8003c7e:	18bb      	adds	r3, r7, r2
 8003c80:	881b      	ldrh	r3, [r3, #0]
 8003c82:	2b03      	cmp	r3, #3
 8003c84:	d806      	bhi.n	8003c94 <winusb_get_desc+0x70>
			pDesc = dTable[dNumber];
 8003c86:	18bb      	adds	r3, r7, r2
 8003c88:	881a      	ldrh	r2, [r3, #0]
 8003c8a:	4b15      	ldr	r3, [pc, #84]	; (8003ce0 <winusb_get_desc+0xbc>)
 8003c8c:	0092      	lsls	r2, r2, #2
 8003c8e:	58d3      	ldr	r3, [r2, r3]
 8003c90:	61fb      	str	r3, [r7, #28]
		} else if(dNumber == 0xEE){
			pDesc = &ms_os_desc;
		} else {
			return usbd_failed;
		}
		break;
 8003c92:	e00b      	b.n	8003cac <winusb_get_desc+0x88>
		} else if(dNumber == 0xEE){
 8003c94:	2316      	movs	r3, #22
 8003c96:	18fb      	adds	r3, r7, r3
 8003c98:	881b      	ldrh	r3, [r3, #0]
 8003c9a:	2bee      	cmp	r3, #238	; 0xee
 8003c9c:	d102      	bne.n	8003ca4 <winusb_get_desc+0x80>
			pDesc = &ms_os_desc;
 8003c9e:	4b11      	ldr	r3, [pc, #68]	; (8003ce4 <winusb_get_desc+0xc0>)
 8003ca0:	61fb      	str	r3, [r7, #28]
		break;
 8003ca2:	e003      	b.n	8003cac <winusb_get_desc+0x88>
			return usbd_failed;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	e013      	b.n	8003cd0 <winusb_get_desc+0xac>
	default:
		return usbd_failed;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	e011      	b.n	8003cd0 <winusb_get_desc+0xac>
	}
	if(len == 0){
 8003cac:	211a      	movs	r1, #26
 8003cae:	187b      	adds	r3, r7, r1
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d103      	bne.n	8003cbe <winusb_get_desc+0x9a>
		len = ((struct usb_header_descriptor*)pDesc)->bLength;
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	781a      	ldrb	r2, [r3, #0]
 8003cba:	187b      	adds	r3, r7, r1
 8003cbc:	801a      	strh	r2, [r3, #0]
	}
	*ppAddress = (void*)pDesc;
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	69fa      	ldr	r2, [r7, #28]
 8003cc2:	601a      	str	r2, [r3, #0]
	*pLength = len;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	221a      	movs	r2, #26
 8003cc8:	18ba      	adds	r2, r7, r2
 8003cca:	8812      	ldrh	r2, [r2, #0]
 8003ccc:	801a      	strh	r2, [r3, #0]
	return usbd_acknowledged;
 8003cce:	2301      	movs	r3, #1
}
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	b008      	add	sp, #32
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	080040a8 	.word	0x080040a8
 8003cdc:	080040bc 	.word	0x080040bc
 8003ce0:	08004168 	.word	0x08004168
 8003ce4:	080040e4 	.word	0x080040e4

08003ce8 <winusb_set_config>:

///@brief	function set the WinUSB configuration
///@param	pDev pointer to the USB device structure
///@param	config flag to configure (true) or de-configure (false) the USB device
///@return 	status result of the USB
static usbd_status_respond winusb_set_config(usbd_device *pDev, uint8_t config){
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	000a      	movs	r2, r1
 8003cf2:	1cfb      	adds	r3, r7, #3
 8003cf4:	701a      	strb	r2, [r3, #0]
	switch(config){
 8003cf6:	1cfb      	adds	r3, r7, #3
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d002      	beq.n	8003d04 <winusb_set_config+0x1c>
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d026      	beq.n	8003d50 <winusb_set_config+0x68>
 8003d02:	e04e      	b.n	8003da2 <winusb_set_config+0xba>
	//de-configure device
	case 0:
		USBD_EP_Deconfig(pDev, WINUSB_EP1_TX);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2182      	movs	r1, #130	; 0x82
 8003d08:	0018      	movs	r0, r3
 8003d0a:	f7ff ff1d 	bl	8003b48 <USBD_EP_Deconfig>
		USBD_EP_Deconfig(pDev, WINUSB_EP1_RX);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2101      	movs	r1, #1
 8003d12:	0018      	movs	r0, r3
 8003d14:	f7ff ff18 	bl	8003b48 <USBD_EP_Deconfig>
		USBD_EP_Deconfig(pDev, WINUSB_EP2_TX);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2183      	movs	r1, #131	; 0x83
 8003d1c:	0018      	movs	r0, r3
 8003d1e:	f7ff ff13 	bl	8003b48 <USBD_EP_Deconfig>
		USBD_Register_Endpoint(pDev, WINUSB_EP1_RX, 0);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	2101      	movs	r1, #1
 8003d28:	0018      	movs	r0, r3
 8003d2a:	f7ff ff1f 	bl	8003b6c <USBD_Register_Endpoint>
		USBD_Register_Endpoint(pDev, WINUSB_EP1_TX, 0);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	2182      	movs	r1, #130	; 0x82
 8003d34:	0018      	movs	r0, r3
 8003d36:	f7ff ff19 	bl	8003b6c <USBD_Register_Endpoint>
		USBD_Register_Endpoint(pDev, WINUSB_EP2_TX, 0);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	2183      	movs	r1, #131	; 0x83
 8003d40:	0018      	movs	r0, r3
 8003d42:	f7ff ff13 	bl	8003b6c <USBD_Register_Endpoint>

		//set to false, because device is not configured
		usb_device_state.isConfigured = false;
 8003d46:	4b19      	ldr	r3, [pc, #100]	; (8003dac <winusb_set_config+0xc4>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	701a      	strb	r2, [r3, #0]
		return usbd_acknowledged;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e029      	b.n	8003da4 <winusb_set_config+0xbc>


		//configure device
	case 1:
		USBD_EP_Config(pDev, WINUSB_EP1_RX, USB_EP_TYPE_BULK | USB_EP_TYPE_DBL_BUF, WINUSB_EP1_MAXPACKET_SIZE);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	2340      	movs	r3, #64	; 0x40
 8003d54:	2206      	movs	r2, #6
 8003d56:	2101      	movs	r1, #1
 8003d58:	f7ff fed6 	bl	8003b08 <USBD_EP_Config>
		USBD_EP_Config(pDev, WINUSB_EP1_TX, USB_EP_TYPE_BULK | USB_EP_TYPE_DBL_BUF, WINUSB_EP1_MAXPACKET_SIZE);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	2340      	movs	r3, #64	; 0x40
 8003d60:	2206      	movs	r2, #6
 8003d62:	2182      	movs	r1, #130	; 0x82
 8003d64:	f7ff fed0 	bl	8003b08 <USBD_EP_Config>
		USBD_EP_Config(pDev, WINUSB_EP2_TX, USB_EP_TYPE_INTERRUPT, WINUSB_EP2_MAXPACKET_SIZE);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	2308      	movs	r3, #8
 8003d6c:	2203      	movs	r2, #3
 8003d6e:	2183      	movs	r1, #131	; 0x83
 8003d70:	f7ff feca 	bl	8003b08 <USBD_EP_Config>
		USBD_Register_Endpoint(pDev, WINUSB_EP1_RX, bulk_from_host);
 8003d74:	4a0e      	ldr	r2, [pc, #56]	; (8003db0 <winusb_set_config+0xc8>)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2101      	movs	r1, #1
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	f7ff fef6 	bl	8003b6c <USBD_Register_Endpoint>
		USBD_Register_Endpoint(pDev, WINUSB_EP1_TX, bulk_to_host);
 8003d80:	4a0c      	ldr	r2, [pc, #48]	; (8003db4 <winusb_set_config+0xcc>)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2182      	movs	r1, #130	; 0x82
 8003d86:	0018      	movs	r0, r3
 8003d88:	f7ff fef0 	bl	8003b6c <USBD_Register_Endpoint>
		USBD_Register_Endpoint(pDev, WINUSB_EP2_TX, 0);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	2183      	movs	r1, #131	; 0x83
 8003d92:	0018      	movs	r0, r3
 8003d94:	f7ff feea 	bl	8003b6c <USBD_Register_Endpoint>
//
//		USBD_EP_Write(pDev, WINUSB_EP1_TX, 0, 0);
//		USBD_EP_Write(pDev, WINUSB_EP2_TX, 0, 0);
		//set to true, because device is configured
		usb_device_state.isConfigured = true;
 8003d98:	4b04      	ldr	r3, [pc, #16]	; (8003dac <winusb_set_config+0xc4>)
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	701a      	strb	r2, [r3, #0]
		return usbd_acknowledged;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e000      	b.n	8003da4 <winusb_set_config+0xbc>

	default:
		return usbd_failed;
 8003da2:	2300      	movs	r3, #0
	}
//	return usbd_failed;
}
 8003da4:	0018      	movs	r0, r3
 8003da6:	46bd      	mov	sp, r7
 8003da8:	b002      	add	sp, #8
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	2000003c 	.word	0x2000003c
 8003db0:	08003e85 	.word	0x08003e85
 8003db4:	08003ee5 	.word	0x08003ee5

08003db8 <winusb_control>:
///@param	pReq pointer to the USB control request structure
///@param 	pCallback pointer to the USB device request completion callback
///@return	status result of the USB

//TODO: It seems that this function is not called - at this point the enumeration process breaks
static usbd_status_respond winusb_control(usbd_device *pDev, usbd_control_request *pReq, usbd_req_complete_callback *pCallback){
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
	if((pReq->bmRequestType & USB_REQ_TYPE_TYPE) != USB_REQ_TYPE_VENDOR){
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	001a      	movs	r2, r3
 8003dca:	2360      	movs	r3, #96	; 0x60
 8003dcc:	4013      	ands	r3, r2
 8003dce:	2b40      	cmp	r3, #64	; 0x40
 8003dd0:	d001      	beq.n	8003dd6 <winusb_control+0x1e>
		return usbd_failed;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	e04a      	b.n	8003e6c <winusb_control+0xb4>
	}
	if(((pReq->bmRequestType & USB_REQ_TYPE_DIRECTION) == USB_REQ_TYPE_DEVTOHOST) || pReq->bmRequestType == (USB_REQ_TYPE_DEVTOHOST | USB_REQ_TYPE_VENDOR | USB_REQ_TYPE_DEVICE)){
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	b25b      	sxtb	r3, r3
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	db03      	blt.n	8003de8 <winusb_control+0x30>
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	2bc0      	cmp	r3, #192	; 0xc0
 8003de6:	d12c      	bne.n	8003e42 <winusb_control+0x8a>
		switch(pReq->bRequest){
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	785b      	ldrb	r3, [r3, #1]
 8003dec:	2b20      	cmp	r3, #32
 8003dee:	d002      	beq.n	8003df6 <winusb_control+0x3e>
 8003df0:	2b93      	cmp	r3, #147	; 0x93
 8003df2:	d01b      	beq.n	8003e2c <winusb_control+0x74>
 8003df4:	e023      	b.n	8003e3e <winusb_control+0x86>
		case MS_VENDOR_CODE:
			switch(pReq->wIndex){
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	889b      	ldrh	r3, [r3, #4]
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d002      	beq.n	8003e04 <winusb_control+0x4c>
 8003dfe:	2b05      	cmp	r3, #5
 8003e00:	d009      	beq.n	8003e16 <winusb_control+0x5e>
 8003e02:	e011      	b.n	8003e28 <winusb_control+0x70>
			case 0x04:
				pDev->deviceStatus.pData = (void*)&compatid_desc;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	4a1b      	ldr	r2, [pc, #108]	; (8003e74 <winusb_control+0xbc>)
 8003e08:	659a      	str	r2, [r3, #88]	; 0x58
				pDev->deviceStatus.data_count = sizeof(compatid_desc);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	225c      	movs	r2, #92	; 0x5c
 8003e0e:	2128      	movs	r1, #40	; 0x28
 8003e10:	5299      	strh	r1, [r3, r2]
				return usbd_acknowledged;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e02a      	b.n	8003e6c <winusb_control+0xb4>
			case 0x05:
				pDev->deviceStatus.pData = (void*)&devguid_ext_prop_feature_desc;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	4a17      	ldr	r2, [pc, #92]	; (8003e78 <winusb_control+0xc0>)
 8003e1a:	659a      	str	r2, [r3, #88]	; 0x58
				pDev->deviceStatus.data_count = sizeof(devguid_ext_prop_feature_desc);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	225c      	movs	r2, #92	; 0x5c
 8003e20:	218e      	movs	r1, #142	; 0x8e
 8003e22:	5299      	strh	r1, [r3, r2]
				return usbd_acknowledged;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e021      	b.n	8003e6c <winusb_control+0xb4>
			default:
				return usbd_failed;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	e01f      	b.n	8003e6c <winusb_control+0xb4>
			}
			break;
		case USB_APPLICATION_REQUEST_GET_FIFO_STATUS:
			pDev->deviceStatus.pData = &fpos;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4a13      	ldr	r2, [pc, #76]	; (8003e7c <winusb_control+0xc4>)
 8003e30:	659a      	str	r2, [r3, #88]	; 0x58
			pDev->deviceStatus.data_count = sizeof(fpos);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	225c      	movs	r2, #92	; 0x5c
 8003e36:	2104      	movs	r1, #4
 8003e38:	5299      	strh	r1, [r3, r2]
			return usbd_acknowledged;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e016      	b.n	8003e6c <winusb_control+0xb4>
		default:
			return usbd_failed;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	e014      	b.n	8003e6c <winusb_control+0xb4>
		}
	}

	if((pReq->bmRequestType & USB_REQ_TYPE_DIRECTION) == USB_REQ_TYPE_HOSTTODEV){
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	b25b      	sxtb	r3, r3
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	db0e      	blt.n	8003e6a <winusb_control+0xb2>
		switch(pReq->bRequest){
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	785b      	ldrb	r3, [r3, #1]
 8003e50:	2b90      	cmp	r3, #144	; 0x90
 8003e52:	d108      	bne.n	8003e66 <winusb_control+0xae>
		case USB_APPLICATION_REQUEST_INTERRUPT_STATE:
			usb_device_state.isInterruptEnabled = pReq->wValue > 0 ? true : false;
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	885b      	ldrh	r3, [r3, #2]
 8003e58:	1e5a      	subs	r2, r3, #1
 8003e5a:	4193      	sbcs	r3, r2
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	4b08      	ldr	r3, [pc, #32]	; (8003e80 <winusb_control+0xc8>)
 8003e60:	709a      	strb	r2, [r3, #2]
			return usbd_acknowledged;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e002      	b.n	8003e6c <winusb_control+0xb4>
		default:
			return usbd_failed;
 8003e66:	2300      	movs	r3, #0
 8003e68:	e000      	b.n	8003e6c <winusb_control+0xb4>
		}
	}
	return usbd_failed;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	b004      	add	sp, #16
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	08004208 	.word	0x08004208
 8003e78:	08004178 	.word	0x08004178
 8003e7c:	200001a4 	.word	0x200001a4
 8003e80:	2000003c 	.word	0x2000003c

08003e84 <bulk_from_host>:
///@param	event check if the event is set to receive data from the host
///@param	ep endpoint number
///@return	none

//TODO: function not testet - enumeration does not work properly
static void bulk_from_host(usbd_device *pDev, uint8_t event, uint8_t ep){
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	0008      	movs	r0, r1
 8003e8e:	0011      	movs	r1, r2
 8003e90:	1cfb      	adds	r3, r7, #3
 8003e92:	1c02      	adds	r2, r0, #0
 8003e94:	701a      	strb	r2, [r3, #0]
 8003e96:	1cbb      	adds	r3, r7, #2
 8003e98:	1c0a      	adds	r2, r1, #0
 8003e9a:	701a      	strb	r2, [r3, #0]
	if(event == USBD_EVENT_PACKET_RX){
 8003e9c:	1cfb      	adds	r3, r7, #3
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	2b05      	cmp	r3, #5
 8003ea2:	d117      	bne.n	8003ed4 <bulk_from_host+0x50>
		//TODO: finish function to receive data from host when enumeration works
		if(fpos >= FIFO_SIZE){
 8003ea4:	4b0d      	ldr	r3, [pc, #52]	; (8003edc <bulk_from_host+0x58>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2bff      	cmp	r3, #255	; 0xff
 8003eaa:	d902      	bls.n	8003eb2 <bulk_from_host+0x2e>
			fpos = 0;
 8003eac:	4b0b      	ldr	r3, [pc, #44]	; (8003edc <bulk_from_host+0x58>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	601a      	str	r2, [r3, #0]
		}
		uint32_t dataReceived = USBD_EP_Read(pDev, WINUSB_EP1_RX, &fifo[fpos], WINUSB_EP1_MAXPACKET_SIZE);
 8003eb2:	4b0a      	ldr	r3, [pc, #40]	; (8003edc <bulk_from_host+0x58>)
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	4b0a      	ldr	r3, [pc, #40]	; (8003ee0 <bulk_from_host+0x5c>)
 8003eb8:	18d2      	adds	r2, r2, r3
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	2340      	movs	r3, #64	; 0x40
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	f7ff fe6c 	bl	8003b9c <USBD_EP_Read>
 8003ec4:	0003      	movs	r3, r0
 8003ec6:	60fb      	str	r3, [r7, #12]
		fpos += dataReceived;
 8003ec8:	4b04      	ldr	r3, [pc, #16]	; (8003edc <bulk_from_host+0x58>)
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	18d2      	adds	r2, r2, r3
 8003ed0:	4b02      	ldr	r3, [pc, #8]	; (8003edc <bulk_from_host+0x58>)
 8003ed2:	601a      	str	r2, [r3, #0]
	}
}
 8003ed4:	46c0      	nop			; (mov r8, r8)
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	b004      	add	sp, #16
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	200001a4 	.word	0x200001a4
 8003ee0:	200000a4 	.word	0x200000a4

08003ee4 <bulk_to_host>:
///@brief	callback for the host to request data from device
///@param	pDev pointer to the USB device structure
///@param	event check if the event is set to receive data from the host
///@param	ep endpoint number
///@return	none
static void bulk_to_host(usbd_device *pDev, uint8_t event, uint8_t ep){
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	0008      	movs	r0, r1
 8003eee:	0011      	movs	r1, r2
 8003ef0:	1cfb      	adds	r3, r7, #3
 8003ef2:	1c02      	adds	r2, r0, #0
 8003ef4:	701a      	strb	r2, [r3, #0]
 8003ef6:	1cbb      	adds	r3, r7, #2
 8003ef8:	1c0a      	adds	r2, r1, #0
 8003efa:	701a      	strb	r2, [r3, #0]
	//TODO: implement function for host request to receive data when enumeration works
}
 8003efc:	46c0      	nop			; (mov r8, r8)
 8003efe:	46bd      	mov	sp, r7
 8003f00:	b002      	add	sp, #8
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <winusb_init_usbd>:

///@brief	function combines all initialisations for the USB communication
///@param	none
///@return	none
///@note	remap the pins PA11 and PA12 to the GPIOA P8 and P9 for the STM32F042F6P6
void winusb_init_usbd(void){
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af02      	add	r7, sp, #8
	//remap the pins for USB communication (DP and DN) - necessarry for the STM32F042F6P6
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGCOMPEN;
 8003f0a:	4b17      	ldr	r3, [pc, #92]	; (8003f68 <winusb_init_usbd+0x64>)
 8003f0c:	699a      	ldr	r2, [r3, #24]
 8003f0e:	4b16      	ldr	r3, [pc, #88]	; (8003f68 <winusb_init_usbd+0x64>)
 8003f10:	2101      	movs	r1, #1
 8003f12:	430a      	orrs	r2, r1
 8003f14:	619a      	str	r2, [r3, #24]
	SYSCFG->CFGR1 |= SYSCFG_CFGR1_PA11_PA12_RMP;
 8003f16:	4b15      	ldr	r3, [pc, #84]	; (8003f6c <winusb_init_usbd+0x68>)
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	4b14      	ldr	r3, [pc, #80]	; (8003f6c <winusb_init_usbd+0x68>)
 8003f1c:	2110      	movs	r1, #16
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	601a      	str	r2, [r3, #0]

	USBD_Init(&winusb_dev, &usbd_hw, WINUSB_EP0_MAXPACKET_SIZE, winusb_controll_buffer, sizeof(winusb_controll_buffer));
 8003f22:	4b13      	ldr	r3, [pc, #76]	; (8003f70 <winusb_init_usbd+0x6c>)
 8003f24:	4913      	ldr	r1, [pc, #76]	; (8003f74 <winusb_init_usbd+0x70>)
 8003f26:	4814      	ldr	r0, [pc, #80]	; (8003f78 <winusb_init_usbd+0x74>)
 8003f28:	2280      	movs	r2, #128	; 0x80
 8003f2a:	9200      	str	r2, [sp, #0]
 8003f2c:	2208      	movs	r2, #8
 8003f2e:	f7ff fda5 	bl	8003a7c <USBD_Init>
	USBD_Register_Config(&winusb_dev, winusb_set_config);
 8003f32:	4a12      	ldr	r2, [pc, #72]	; (8003f7c <winusb_init_usbd+0x78>)
 8003f34:	4b10      	ldr	r3, [pc, #64]	; (8003f78 <winusb_init_usbd+0x74>)
 8003f36:	0011      	movs	r1, r2
 8003f38:	0018      	movs	r0, r3
 8003f3a:	f7ff fdcd 	bl	8003ad8 <USBD_Register_Config>
	USBD_Register_Control(&winusb_dev, winusb_control);
 8003f3e:	4a10      	ldr	r2, [pc, #64]	; (8003f80 <winusb_init_usbd+0x7c>)
 8003f40:	4b0d      	ldr	r3, [pc, #52]	; (8003f78 <winusb_init_usbd+0x74>)
 8003f42:	0011      	movs	r1, r2
 8003f44:	0018      	movs	r0, r3
 8003f46:	f7ff fdbb 	bl	8003ac0 <USBD_Register_Control>
	USBD_Register_Descriptor(&winusb_dev, winusb_get_desc);
 8003f4a:	4a0e      	ldr	r2, [pc, #56]	; (8003f84 <winusb_init_usbd+0x80>)
 8003f4c:	4b0a      	ldr	r3, [pc, #40]	; (8003f78 <winusb_init_usbd+0x74>)
 8003f4e:	0011      	movs	r1, r2
 8003f50:	0018      	movs	r0, r3
 8003f52:	f7ff fdcd 	bl	8003af0 <USBD_Register_Descriptor>


	USBD_Enable(&winusb_dev, true);
 8003f56:	4b08      	ldr	r3, [pc, #32]	; (8003f78 <winusb_init_usbd+0x74>)
 8003f58:	2101      	movs	r1, #1
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	f7ff fe3c 	bl	8003bd8 <USBD_Enable>
}
 8003f60:	46c0      	nop			; (mov r8, r8)
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	46c0      	nop			; (mov r8, r8)
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	40010000 	.word	0x40010000
 8003f70:	200006f8 	.word	0x200006f8
 8003f74:	08004074 	.word	0x08004074
 8003f78:	20000040 	.word	0x20000040
 8003f7c:	08003ce9 	.word	0x08003ce9
 8003f80:	08003db9 	.word	0x08003db9
 8003f84:	08003c25 	.word	0x08003c25

08003f88 <usb_device_connect>:


///@brief	function connects the USB device with the host
///@param	none
///@return	none
void usb_device_connect(void){
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	af00      	add	r7, sp, #0
	USBD_Connect(&winusb_dev, true);
 8003f8c:	4b05      	ldr	r3, [pc, #20]	; (8003fa4 <usb_device_connect+0x1c>)
 8003f8e:	2101      	movs	r1, #1
 8003f90:	0018      	movs	r0, r3
 8003f92:	f7ff fe33 	bl	8003bfc <USBD_Connect>
	usb_device_state.isConnected = true;
 8003f96:	4b04      	ldr	r3, [pc, #16]	; (8003fa8 <usb_device_connect+0x20>)
 8003f98:	2201      	movs	r2, #1
 8003f9a:	705a      	strb	r2, [r3, #1]
}
 8003f9c:	46c0      	nop			; (mov r8, r8)
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	46c0      	nop			; (mov r8, r8)
 8003fa4:	20000040 	.word	0x20000040
 8003fa8:	2000003c 	.word	0x2000003c

08003fac <USB_Handler>:


///@brief	function handles the USB device communication
///@param	none
///@return	none
void USB_Handler(void){
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
	USBD_Poll(&winusb_dev);
 8003fb0:	4b03      	ldr	r3, [pc, #12]	; (8003fc0 <USB_Handler+0x14>)
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	f7fe fe02 	bl	8002bbc <USBD_Poll>
}
 8003fb8:	46c0      	nop			; (mov r8, r8)
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	46c0      	nop			; (mov r8, r8)
 8003fc0:	20000040 	.word	0x20000040

08003fc4 <__libc_init_array>:
 8003fc4:	b570      	push	{r4, r5, r6, lr}
 8003fc6:	2600      	movs	r6, #0
 8003fc8:	4d0c      	ldr	r5, [pc, #48]	; (8003ffc <__libc_init_array+0x38>)
 8003fca:	4c0d      	ldr	r4, [pc, #52]	; (8004000 <__libc_init_array+0x3c>)
 8003fcc:	1b64      	subs	r4, r4, r5
 8003fce:	10a4      	asrs	r4, r4, #2
 8003fd0:	42a6      	cmp	r6, r4
 8003fd2:	d109      	bne.n	8003fe8 <__libc_init_array+0x24>
 8003fd4:	2600      	movs	r6, #0
 8003fd6:	f000 f823 	bl	8004020 <_init>
 8003fda:	4d0a      	ldr	r5, [pc, #40]	; (8004004 <__libc_init_array+0x40>)
 8003fdc:	4c0a      	ldr	r4, [pc, #40]	; (8004008 <__libc_init_array+0x44>)
 8003fde:	1b64      	subs	r4, r4, r5
 8003fe0:	10a4      	asrs	r4, r4, #2
 8003fe2:	42a6      	cmp	r6, r4
 8003fe4:	d105      	bne.n	8003ff2 <__libc_init_array+0x2e>
 8003fe6:	bd70      	pop	{r4, r5, r6, pc}
 8003fe8:	00b3      	lsls	r3, r6, #2
 8003fea:	58eb      	ldr	r3, [r5, r3]
 8003fec:	4798      	blx	r3
 8003fee:	3601      	adds	r6, #1
 8003ff0:	e7ee      	b.n	8003fd0 <__libc_init_array+0xc>
 8003ff2:	00b3      	lsls	r3, r6, #2
 8003ff4:	58eb      	ldr	r3, [r5, r3]
 8003ff6:	4798      	blx	r3
 8003ff8:	3601      	adds	r6, #1
 8003ffa:	e7f2      	b.n	8003fe2 <__libc_init_array+0x1e>
 8003ffc:	08004230 	.word	0x08004230
 8004000:	08004230 	.word	0x08004230
 8004004:	08004230 	.word	0x08004230
 8004008:	08004234 	.word	0x08004234

0800400c <memcpy>:
 800400c:	2300      	movs	r3, #0
 800400e:	b510      	push	{r4, lr}
 8004010:	429a      	cmp	r2, r3
 8004012:	d100      	bne.n	8004016 <memcpy+0xa>
 8004014:	bd10      	pop	{r4, pc}
 8004016:	5ccc      	ldrb	r4, [r1, r3]
 8004018:	54c4      	strb	r4, [r0, r3]
 800401a:	3301      	adds	r3, #1
 800401c:	e7f8      	b.n	8004010 <memcpy+0x4>
	...

08004020 <_init>:
 8004020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004022:	46c0      	nop			; (mov r8, r8)
 8004024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004026:	bc08      	pop	{r3}
 8004028:	469e      	mov	lr, r3
 800402a:	4770      	bx	lr

0800402c <_fini>:
 800402c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800402e:	46c0      	nop			; (mov r8, r8)
 8004030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004032:	bc08      	pop	{r3}
 8004034:	469e      	mov	lr, r3
 8004036:	4770      	bx	lr
